paddle.add(Tensor([1, 1, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([1, 1024, 62, 64],"float32"), Tensor([1, 1024, 62, 64],"float32"), None, )
paddle.add(Tensor([1, 1024, 64, 128],"float32"), Tensor([1, 1024, 64, 128],"float32"), None, )
paddle.add(Tensor([1, 1024, 64, 64],"float16"), Tensor([1, 1024, 64, 64],"float16"), None, )
paddle.add(Tensor([1, 1024, 64, 64],"float32"), Tensor([1, 1024, 64, 64],"float32"), None, )
paddle.add(Tensor([1, 112, 32, 64],"float32"), Tensor([1, 112, 32, 64],"float32"), )
paddle.add(Tensor([1, 128, 128, 128],"float32"), Tensor([1, 128, 128, 128],"float32"), None, )
paddle.add(Tensor([1, 128, 200, 272],"float32"), Tensor([1, 128, 200, 272],"float32"), )
paddle.add(Tensor([1, 128, 200, 304],"float32"), Tensor([1, 128, 200, 304],"float32"), )
paddle.add(Tensor([1, 128, 200, 312],"float32"), Tensor([1, 128, 200, 312],"float32"), )
paddle.add(Tensor([1, 128, 304, 200],"float32"), Tensor([1, 128, 304, 200],"float32"), )
paddle.add(Tensor([1, 16, 256, 512],"float32"), Tensor([1, 16, 256, 512],"float32"), )
paddle.add(Tensor([1, 160, 16, 32],"float32"), Tensor([1, 160, 16, 32],"float32"), )
paddle.add(Tensor([1, 160, 7, 7],"float32"), Tensor([1, 160, 7, 7],"float32"), )
paddle.add(Tensor([1, 192, 100, 100],"float32"), Tensor([1, 192, 100, 100],"float32"), )
paddle.add(Tensor([1, 192, 104, 104],"float32"), Tensor([1, 192, 104, 104],"float32"), )
paddle.add(Tensor([1, 192, 108, 108],"float32"), Tensor([1, 192, 108, 108],"float32"), )
paddle.add(Tensor([1, 192, 112, 112],"float32"), Tensor([1, 192, 112, 112],"float32"), )
paddle.add(Tensor([1, 192, 116, 116],"float32"), Tensor([1, 192, 116, 116],"float32"), )
paddle.add(Tensor([1, 192, 120, 120],"float32"), Tensor([1, 192, 120, 120],"float32"), )
paddle.add(Tensor([1, 192, 20, 20],"float32"), Tensor([1, 192, 20, 20],"float32"), )
paddle.add(Tensor([1, 192, 64, 64],"float32"), Tensor([1, 192, 64, 64],"float32"), )
paddle.add(Tensor([1, 192, 68, 68],"float32"), Tensor([1, 192, 68, 68],"float32"), )
paddle.add(Tensor([1, 192, 72, 72],"float32"), Tensor([1, 192, 72, 72],"float32"), )
paddle.add(Tensor([1, 192, 76, 76],"float32"), Tensor([1, 192, 76, 76],"float32"), )
paddle.add(Tensor([1, 192, 80, 80],"float32"), Tensor([1, 192, 80, 80],"float32"), )
paddle.add(Tensor([1, 192, 84, 84],"float32"), Tensor([1, 192, 84, 84],"float32"), )
paddle.add(Tensor([1, 192, 88, 88],"float32"), Tensor([1, 192, 88, 88],"float32"), )
paddle.add(Tensor([1, 192, 92, 92],"float32"), Tensor([1, 192, 92, 92],"float32"), )
paddle.add(Tensor([1, 192, 96, 96],"float32"), Tensor([1, 192, 96, 96],"float32"), )
paddle.add(Tensor([1, 2, 8, 8],"float32"), Tensor([1, 2, 8, 8],"float32"), )
paddle.add(Tensor([1, 2048, 62, 64],"float32"), Tensor([1, 2048, 62, 64],"float32"), None, )
paddle.add(Tensor([1, 2048, 64, 128],"float32"), Tensor([1, 2048, 64, 128],"float32"), None, )
paddle.add(Tensor([1, 2048, 64, 64],"float16"), Tensor([1, 2048, 64, 64],"float16"), None, )
paddle.add(Tensor([1, 2048, 64, 64],"float32"), Tensor([1, 2048, 64, 64],"float32"), None, )
paddle.add(Tensor([1, 24, 10, 10],"float32"), Tensor([1, 24, 10, 10],"float32"), )
paddle.add(Tensor([1, 24, 128, 256],"float32"), Tensor([1, 24, 128, 256],"float32"), )
paddle.add(Tensor([1, 24, 160, 160],"float32"), Tensor([1, 24, 160, 160],"float32"), )
paddle.add(Tensor([1, 24, 56, 56],"float32"), Tensor([1, 24, 56, 56],"float32"), )
paddle.add(Tensor([1, 256, 124, 128],"float32"), Tensor([1, 256, 124, 128],"float32"), None, )
paddle.add(Tensor([1, 256, 128, 128],"float16"), Tensor([1, 256, 128, 128],"float16"), None, )
paddle.add(Tensor([1, 256, 128, 128],"float32"), Tensor([1, 256, 128, 128],"float32"), None, )
paddle.add(Tensor([1, 256, 128, 256],"float32"), Tensor([1, 256, 128, 256],"float32"), None, )
paddle.add(Tensor([1, 32, 28, 28],"float32"), Tensor([1, 32, 28, 28],"float32"), )
paddle.add(Tensor([1, 384, 32, 32],"float32"), Tensor([1, 384, 32, 32],"float32"), )
paddle.add(Tensor([1, 384, 34, 34],"float32"), Tensor([1, 384, 34, 34],"float32"), )
paddle.add(Tensor([1, 384, 36, 36],"float32"), Tensor([1, 384, 36, 36],"float32"), )
paddle.add(Tensor([1, 384, 38, 38],"float32"), Tensor([1, 384, 38, 38],"float32"), )
paddle.add(Tensor([1, 384, 40, 40],"float32"), Tensor([1, 384, 40, 40],"float32"), )
paddle.add(Tensor([1, 384, 42, 42],"float32"), Tensor([1, 384, 42, 42],"float32"), )
paddle.add(Tensor([1, 384, 44, 44],"float32"), Tensor([1, 384, 44, 44],"float32"), )
paddle.add(Tensor([1, 384, 46, 46],"float32"), Tensor([1, 384, 46, 46],"float32"), )
paddle.add(Tensor([1, 384, 48, 48],"float32"), Tensor([1, 384, 48, 48],"float32"), )
paddle.add(Tensor([1, 384, 50, 50],"float32"), Tensor([1, 384, 50, 50],"float32"), )
paddle.add(Tensor([1, 384, 52, 52],"float32"), Tensor([1, 384, 52, 52],"float32"), )
paddle.add(Tensor([1, 384, 54, 54],"float32"), Tensor([1, 384, 54, 54],"float32"), )
paddle.add(Tensor([1, 384, 56, 56],"float32"), Tensor([1, 384, 56, 56],"float32"), )
paddle.add(Tensor([1, 384, 58, 58],"float32"), Tensor([1, 384, 58, 58],"float32"), )
paddle.add(Tensor([1, 384, 60, 60],"float32"), Tensor([1, 384, 60, 60],"float32"), )
paddle.add(Tensor([1, 3],"int64"), Tensor([3, 3],"int64"), )
paddle.add(Tensor([1, 4, 8, 8],"float32"), Tensor([1, 4, 8, 8],"float32"), )
paddle.add(Tensor([1, 40, 5, 5],"float32"), Tensor([1, 40, 5, 5],"float32"), )
paddle.add(Tensor([1, 40, 64, 128],"float32"), Tensor([1, 40, 64, 128],"float32"), )
paddle.add(Tensor([1, 48, 256, 256],"float32"), Tensor([1, 48, 256, 256],"float32"), )
paddle.add(Tensor([1, 48, 272, 272],"float32"), Tensor([1, 48, 272, 272],"float32"), )
paddle.add(Tensor([1, 48, 288, 288],"float32"), Tensor([1, 48, 288, 288],"float32"), )
paddle.add(Tensor([1, 48, 304, 304],"float32"), Tensor([1, 48, 304, 304],"float32"), )
paddle.add(Tensor([1, 48, 320, 320],"float32"), Tensor([1, 48, 320, 320],"float32"), )
paddle.add(Tensor([1, 48, 336, 336],"float32"), Tensor([1, 48, 336, 336],"float32"), )
paddle.add(Tensor([1, 48, 352, 352],"float32"), Tensor([1, 48, 352, 352],"float32"), )
paddle.add(Tensor([1, 48, 368, 368],"float32"), Tensor([1, 48, 368, 368],"float32"), )
paddle.add(Tensor([1, 48, 384, 384],"float32"), Tensor([1, 48, 384, 384],"float32"), )
paddle.add(Tensor([1, 48, 400, 400],"float32"), Tensor([1, 48, 400, 400],"float32"), )
paddle.add(Tensor([1, 48, 416, 416],"float32"), Tensor([1, 48, 416, 416],"float32"), )
paddle.add(Tensor([1, 48, 432, 432],"float32"), Tensor([1, 48, 432, 432],"float32"), )
paddle.add(Tensor([1, 48, 448, 448],"float32"), Tensor([1, 48, 448, 448],"float32"), )
paddle.add(Tensor([1, 48, 464, 464],"float32"), Tensor([1, 48, 464, 464],"float32"), )
paddle.add(Tensor([1, 48, 480, 480],"float32"), Tensor([1, 48, 480, 480],"float32"), )
paddle.add(Tensor([1, 48, 5, 5],"float32"), Tensor([1, 48, 5, 5],"float32"), )
paddle.add(Tensor([1, 48, 80, 80],"float32"), Tensor([1, 48, 80, 80],"float32"), )
paddle.add(Tensor([1, 512, 128, 128],"float32"), Tensor([1, 512, 128, 128],"float32"), None, )
paddle.add(Tensor([1, 512, 62, 64],"float32"), Tensor([1, 512, 62, 64],"float32"), None, )
paddle.add(Tensor([1, 512, 64, 128],"float32"), Tensor([1, 512, 64, 128],"float32"), None, )
paddle.add(Tensor([1, 512, 64, 64],"float16"), Tensor([1, 512, 64, 64],"float16"), None, )
paddle.add(Tensor([1, 512, 64, 64],"float32"), Tensor([1, 512, 64, 64],"float32"), None, )
paddle.add(Tensor([1, 64, 14, 14],"float32"), Tensor([1, 64, 14, 14],"float32"), )
paddle.add(Tensor([1, 64, 256, 256],"float32"), Tensor([1, 64, 256, 256],"float32"), None, )
paddle.add(Tensor([1, 8, 4],"float32"), Tensor([8, 4],"float32"), )
paddle.add(Tensor([1, 80, 32, 64],"float32"), Tensor([1, 80, 32, 64],"float32"), )
paddle.add(Tensor([1, 96, 128, 128],"float32"), Tensor([1, 96, 128, 128],"float32"), )
paddle.add(Tensor([1, 96, 136, 136],"float32"), Tensor([1, 96, 136, 136],"float32"), )
paddle.add(Tensor([1, 96, 14, 14],"float32"), Tensor([1, 96, 14, 14],"float32"), )
paddle.add(Tensor([1, 96, 144, 144],"float32"), Tensor([1, 96, 144, 144],"float32"), )
paddle.add(Tensor([1, 96, 152, 152],"float32"), Tensor([1, 96, 152, 152],"float32"), )
paddle.add(Tensor([1, 96, 160, 160],"float32"), Tensor([1, 96, 160, 160],"float32"), )
paddle.add(Tensor([1, 96, 168, 168],"float32"), Tensor([1, 96, 168, 168],"float32"), )
paddle.add(Tensor([1, 96, 176, 176],"float32"), Tensor([1, 96, 176, 176],"float32"), )
paddle.add(Tensor([1, 96, 184, 184],"float32"), Tensor([1, 96, 184, 184],"float32"), )
paddle.add(Tensor([1, 96, 192, 192],"float32"), Tensor([1, 96, 192, 192],"float32"), )
paddle.add(Tensor([1, 96, 200, 200],"float32"), Tensor([1, 96, 200, 200],"float32"), )
paddle.add(Tensor([1, 96, 208, 208],"float32"), Tensor([1, 96, 208, 208],"float32"), )
paddle.add(Tensor([1, 96, 216, 216],"float32"), Tensor([1, 96, 216, 216],"float32"), )
paddle.add(Tensor([1, 96, 224, 224],"float32"), Tensor([1, 96, 224, 224],"float32"), )
paddle.add(Tensor([1, 96, 232, 232],"float32"), Tensor([1, 96, 232, 232],"float32"), )
paddle.add(Tensor([1, 96, 240, 240],"float32"), Tensor([1, 96, 240, 240],"float32"), )
paddle.add(Tensor([1, 96, 3, 3],"float32"), Tensor([1, 96, 3, 3],"float32"), )
paddle.add(Tensor([1, 96, 40, 40],"float32"), Tensor([1, 96, 40, 40],"float32"), )
paddle.add(Tensor([10, 12],"float32"), Tensor([10, 12],"float32"), )
paddle.add(Tensor([10, 12],"float64"), Tensor([10, 12],"float64"), )
paddle.add(Tensor([100, 1, 2, 2],"float32"), Tensor([100, 1, 2, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1, 2, 2],"float32"), Tensor([100, 1, 2, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1, 2],"float32"), Tensor([100, 1, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1, 2],"float32"), Tensor([100, 1, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1024],"float16"), Tensor([1024],"float16"), )
paddle.add(Tensor([100, 1],"float32"), Tensor([100, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1],"float32"), Tensor([100, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1],"float64"), Tensor([100, 1],"float64"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1],"float64"), Tensor([100, 1],"float64"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2, 1],"float32"), Tensor([100, 2, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2, 1],"float32"), Tensor([100, 2, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2, 3, 1],"float32"), Tensor([100, 2, 3, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2, 3, 1],"float32"), Tensor([100, 2, 3, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2, 3],"float32"), Tensor([100, 2, 3],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2, 3],"float32"), Tensor([100, 2, 3],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2],"float32"), Tensor([100, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2],"float32"), Tensor([100, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([10000, 4],"float64"), Tensor([4],"float64"), name="Uniform_sample", )
paddle.add(Tensor([10000, 5, 3],"float64"), Tensor([5, 3],"float64"), name="Uniform_sample", )
paddle.add(Tensor([100000, 4],"complex128"), Tensor([4],"complex64"), name="Normal_sample", )
paddle.add(Tensor([100000, 4],"float64"), Tensor([4],"float64"), name="Normal_sample", )
paddle.add(Tensor([1000000, 4],"float64"), Tensor([4],"float64"), name="Normal_sample", )
paddle.add(Tensor([100],"float32"), Tensor([100],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100],"float32"), Tensor([100],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100],"float32"), Tensor([],"float32"), name="Uniform_sample", )
paddle.add(Tensor([101, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([1024, 24, 28, 28],"float16"), Tensor([1024, 24, 28, 28],"float16"), )
paddle.add(Tensor([1024, 24, 28, 28],"float32"), Tensor([1024, 24, 28, 28],"float32"), )
paddle.add(Tensor([1024, 40, 14, 14],"float16"), Tensor([1024, 40, 14, 14],"float16"), )
paddle.add(Tensor([1024, 40, 14, 14],"float32"), Tensor([1024, 40, 14, 14],"float32"), )
paddle.add(Tensor([1024, 48, 14, 14],"float16"), Tensor([1024, 48, 14, 14],"float16"), )
paddle.add(Tensor([1024, 48, 14, 14],"float32"), Tensor([1024, 48, 14, 14],"float32"), )
paddle.add(Tensor([1024, 96, 7, 7],"float16"), Tensor([1024, 96, 7, 7],"float16"), )
paddle.add(Tensor([1024, 96, 7, 7],"float32"), Tensor([1024, 96, 7, 7],"float32"), )
paddle.add(Tensor([104, 1024],"float16"), Tensor([1024],"float16"), )
paddle.add(Tensor([12544, 16, 24],"float16"), Tensor([12544, 16, 24],"float16"), )
paddle.add(Tensor([12544, 16, 24],"float32"), Tensor([12544, 16, 24],"float32"), )
paddle.add(Tensor([128, 1024, 7, 7],"float32"), Tensor([128, 1024, 7, 7],"float32"), )
paddle.add(Tensor([128, 104, 14, 14],"float32"), Tensor([128, 104, 14, 14],"float32"), )
paddle.add(Tensor([128, 112, 14, 14],"float16"), Tensor([128, 112, 14, 14],"float16"), )
paddle.add(Tensor([128, 112, 14, 14],"float32"), Tensor([128, 112, 14, 14],"float32"), )
paddle.add(Tensor([128, 120, 7, 7],"float32"), Tensor([128, 120, 7, 7],"float32"), )
paddle.add(Tensor([128, 128, 14, 14],"float32"), Tensor([128, 128, 14, 14],"float32"), )
paddle.add(Tensor([128, 128, 7, 7],"float32"), Tensor([128, 128, 7, 7],"float32"), )
paddle.add(Tensor([128, 144, 14, 14],"float32"), Tensor([128, 144, 14, 14],"float32"), )
paddle.add(Tensor([128, 16, 112, 112],"float32"), Tensor([128, 16, 112, 112],"float32"), )
paddle.add(Tensor([128, 16, 28, 28],"float32"), Tensor([128, 16, 28, 28],"float32"), )
paddle.add(Tensor([128, 16, 56, 56],"float32"), Tensor([128, 16, 56, 56],"float32"), )
paddle.add(Tensor([128, 160, 16, 16],"float32"), Tensor([128, 160, 16, 16],"float32"), )
paddle.add(Tensor([128, 160, 7, 7],"float16"), Tensor([128, 160, 7, 7],"float16"), )
paddle.add(Tensor([128, 160, 7, 7],"float32"), Tensor([128, 160, 7, 7],"float32"), )
paddle.add(Tensor([128, 192, 14, 14],"float32"), Tensor([128, 192, 14, 14],"float32"), )
paddle.add(Tensor([128, 192, 7, 7],"float16"), Tensor([128, 192, 7, 7],"float16"), )
paddle.add(Tensor([128, 192, 7, 7],"float32"), Tensor([128, 192, 7, 7],"float32"), )
paddle.add(Tensor([128, 200, 7, 7],"float32"), Tensor([128, 200, 7, 7],"float32"), )
paddle.add(Tensor([128, 24, 112, 112],"float32"), Tensor([128, 24, 112, 112],"float32"), )
paddle.add(Tensor([128, 24, 28, 28],"float32"), Tensor([128, 24, 28, 28],"float32"), )
paddle.add(Tensor([128, 24, 56, 56],"float16"), Tensor([128, 24, 56, 56],"float16"), )
paddle.add(Tensor([128, 24, 56, 56],"float32"), Tensor([128, 24, 56, 56],"float32"), )
paddle.add(Tensor([128, 240, 7, 7],"float32"), Tensor([128, 240, 7, 7],"float32"), )
paddle.add(Tensor([128, 256, 28, 28],"float32"), Tensor([128, 256, 28, 28],"float32"), )
paddle.add(Tensor([128, 256, 8, 8],"float32"), Tensor([128, 256, 8, 8],"float32"), )
paddle.add(Tensor([128, 32, 14, 14],"float32"), Tensor([128, 32, 14, 14],"float32"), )
paddle.add(Tensor([128, 32, 28, 28],"float16"), Tensor([128, 32, 28, 28],"float16"), )
paddle.add(Tensor([128, 32, 28, 28],"float32"), Tensor([128, 32, 28, 28],"float32"), )
paddle.add(Tensor([128, 32, 56, 56],"float32"), Tensor([128, 32, 56, 56],"float32"), )
paddle.add(Tensor([128, 320, 7, 7],"float32"), Tensor([128, 320, 7, 7],"float32"), )
paddle.add(Tensor([128, 36, 56, 56],"float32"), Tensor([128, 36, 56, 56],"float32"), )
paddle.add(Tensor([128, 40, 14, 14],"float32"), Tensor([128, 40, 14, 14],"float32"), )
paddle.add(Tensor([128, 40, 28, 28],"float16"), Tensor([128, 40, 28, 28],"float16"), )
paddle.add(Tensor([128, 40, 28, 28],"float32"), Tensor([128, 40, 28, 28],"float32"), )
paddle.add(Tensor([128, 48, 28, 28],"float32"), Tensor([128, 48, 28, 28],"float32"), )
paddle.add(Tensor([128, 48, 56, 56],"float32"), Tensor([128, 48, 56, 56],"float32"), )
paddle.add(Tensor([128, 512, 14, 14],"float32"), Tensor([128, 512, 14, 14],"float32"), )
paddle.add(Tensor([128, 56, 14, 14],"float32"), Tensor([128, 56, 14, 14],"float32"), )
paddle.add(Tensor([128, 56, 7, 7],"float32"), Tensor([128, 56, 7, 7],"float32"), )
paddle.add(Tensor([128, 64, 14, 14],"float16"), Tensor([128, 64, 14, 14],"float16"), )
paddle.add(Tensor([128, 64, 14, 14],"float32"), Tensor([128, 64, 14, 14],"float32"), )
paddle.add(Tensor([128, 64, 28, 28],"float32"), Tensor([128, 64, 28, 28],"float32"), )
paddle.add(Tensor([128, 8, 112, 112],"float32"), Tensor([128, 8, 112, 112],"float32"), )
paddle.add(Tensor([128, 8, 56, 56],"float32"), Tensor([128, 8, 56, 56],"float32"), )
paddle.add(Tensor([128, 80, 14, 14],"float16"), Tensor([128, 80, 14, 14],"float16"), )
paddle.add(Tensor([128, 80, 14, 14],"float32"), Tensor([128, 80, 14, 14],"float32"), )
paddle.add(Tensor([128, 80, 32, 32],"float32"), Tensor([128, 80, 32, 32],"float32"), )
paddle.add(Tensor([128, 80, 7, 7],"float32"), Tensor([128, 80, 7, 7],"float32"), )
paddle.add(Tensor([128, 88, 14, 14],"float32"), Tensor([128, 88, 14, 14],"float32"), )
paddle.add(Tensor([128, 96, 14, 14],"float16"), Tensor([128, 96, 14, 14],"float16"), )
paddle.add(Tensor([128, 96, 14, 14],"float32"), Tensor([128, 96, 14, 14],"float32"), )
paddle.add(Tensor([13, 7, 99],"float32"), Tensor([99],"float32"), )
paddle.add(Tensor([16, 1, 128],"float32"), Tensor([128],"float32"), )
paddle.add(Tensor([16, 1, 25, 1],"float32"), Tensor([1],"float32"), name="Normal_sample", )
paddle.add(Tensor([16, 128, 80, 80],"float16"), Tensor([16, 128, 80, 80],"float16"), )
paddle.add(Tensor([16, 128, 80, 80],"float32"), Tensor([16, 128, 80, 80],"float32"), )
paddle.add(Tensor([16, 16, 160, 160],"float16"), Tensor([16, 16, 160, 160],"float16"), )
paddle.add(Tensor([16, 16, 160, 160],"float32"), Tensor([16, 16, 160, 160],"float32"), )
paddle.add(Tensor([16, 192, 20, 20],"float16"), Tensor([16, 192, 20, 20],"float32"), )
paddle.add(Tensor([16, 192, 20, 20],"float32"), Tensor([16, 192, 20, 20],"float32"), )
paddle.add(Tensor([16, 192, 22, 22],"float16"), Tensor([16, 192, 22, 22],"float32"), )
paddle.add(Tensor([16, 192, 22, 22],"float32"), Tensor([16, 192, 22, 22],"float32"), )
paddle.add(Tensor([16, 192, 24, 24],"float16"), Tensor([16, 192, 24, 24],"float32"), )
paddle.add(Tensor([16, 192, 24, 24],"float32"), Tensor([16, 192, 24, 24],"float32"), )
paddle.add(Tensor([16, 192, 26, 26],"float16"), Tensor([16, 192, 26, 26],"float32"), )
paddle.add(Tensor([16, 192, 26, 26],"float32"), Tensor([16, 192, 26, 26],"float32"), )
paddle.add(Tensor([16, 192, 28, 28],"float16"), Tensor([16, 192, 28, 28],"float32"), )
paddle.add(Tensor([16, 192, 28, 28],"float32"), Tensor([16, 192, 28, 28],"float32"), )
paddle.add(Tensor([16, 192, 30, 30],"float16"), Tensor([16, 192, 30, 30],"float32"), )
paddle.add(Tensor([16, 192, 30, 30],"float32"), Tensor([16, 192, 30, 30],"float32"), )
paddle.add(Tensor([16, 192, 32, 32],"float16"), Tensor([16, 192, 32, 32],"float32"), )
paddle.add(Tensor([16, 192, 32, 32],"float32"), Tensor([16, 192, 32, 32],"float32"), )
paddle.add(Tensor([16, 192, 34, 34],"float16"), Tensor([16, 192, 34, 34],"float32"), )
paddle.add(Tensor([16, 192, 34, 34],"float32"), Tensor([16, 192, 34, 34],"float32"), )
paddle.add(Tensor([16, 192, 36, 36],"float16"), Tensor([16, 192, 36, 36],"float32"), )
paddle.add(Tensor([16, 192, 36, 36],"float32"), Tensor([16, 192, 36, 36],"float32"), )
paddle.add(Tensor([16, 192, 38, 38],"float16"), Tensor([16, 192, 38, 38],"float32"), )
paddle.add(Tensor([16, 192, 38, 38],"float32"), Tensor([16, 192, 38, 38],"float32"), )
paddle.add(Tensor([16, 192, 40, 40],"float16"), Tensor([16, 192, 40, 40],"float32"), )
paddle.add(Tensor([16, 192, 40, 40],"float32"), Tensor([16, 192, 40, 40],"float32"), )
paddle.add(Tensor([16, 192, 42, 42],"float16"), Tensor([16, 192, 42, 42],"float32"), )
paddle.add(Tensor([16, 192, 42, 42],"float32"), Tensor([16, 192, 42, 42],"float32"), )
paddle.add(Tensor([16, 192, 44, 44],"float16"), Tensor([16, 192, 44, 44],"float32"), )
paddle.add(Tensor([16, 192, 44, 44],"float32"), Tensor([16, 192, 44, 44],"float32"), )
paddle.add(Tensor([16, 192, 46, 46],"float16"), Tensor([16, 192, 46, 46],"float32"), )
paddle.add(Tensor([16, 192, 46, 46],"float32"), Tensor([16, 192, 46, 46],"float32"), )
paddle.add(Tensor([16, 192, 48, 48],"float16"), Tensor([16, 192, 48, 48],"float32"), )
paddle.add(Tensor([16, 192, 48, 48],"float32"), Tensor([16, 192, 48, 48],"float32"), )
paddle.add(Tensor([16, 2, 3, 1],"float32"), Tensor([1],"float32"), name="Normal_sample", )
paddle.add(Tensor([16, 24, 80, 80],"float16"), Tensor([16, 24, 80, 80],"float16"), )
paddle.add(Tensor([16, 24, 80, 80],"float32"), Tensor([16, 24, 80, 80],"float32"), )
paddle.add(Tensor([16, 256, 40, 40],"float16"), Tensor([16, 256, 40, 40],"float16"), )
paddle.add(Tensor([16, 256, 40, 40],"float32"), Tensor([16, 256, 40, 40],"float32"), )
paddle.add(Tensor([16, 384, 10, 10],"float16"), Tensor([16, 384, 10, 10],"float32"), )
paddle.add(Tensor([16, 384, 10, 10],"float32"), Tensor([16, 384, 10, 10],"float32"), )
paddle.add(Tensor([16, 384, 11, 11],"float16"), Tensor([16, 384, 11, 11],"float32"), )
paddle.add(Tensor([16, 384, 11, 11],"float32"), Tensor([16, 384, 11, 11],"float32"), )
paddle.add(Tensor([16, 384, 12, 12],"float16"), Tensor([16, 384, 12, 12],"float32"), )
paddle.add(Tensor([16, 384, 12, 12],"float32"), Tensor([16, 384, 12, 12],"float32"), )
paddle.add(Tensor([16, 384, 13, 13],"float16"), Tensor([16, 384, 13, 13],"float32"), )
paddle.add(Tensor([16, 384, 13, 13],"float32"), Tensor([16, 384, 13, 13],"float32"), )
paddle.add(Tensor([16, 384, 14, 14],"float16"), Tensor([16, 384, 14, 14],"float32"), )
paddle.add(Tensor([16, 384, 14, 14],"float32"), Tensor([16, 384, 14, 14],"float32"), )
paddle.add(Tensor([16, 384, 15, 15],"float16"), Tensor([16, 384, 15, 15],"float32"), )
paddle.add(Tensor([16, 384, 15, 15],"float32"), Tensor([16, 384, 15, 15],"float32"), )
paddle.add(Tensor([16, 384, 16, 16],"float16"), Tensor([16, 384, 16, 16],"float32"), )
paddle.add(Tensor([16, 384, 16, 16],"float32"), Tensor([16, 384, 16, 16],"float32"), )
paddle.add(Tensor([16, 384, 17, 17],"float16"), Tensor([16, 384, 17, 17],"float32"), )
paddle.add(Tensor([16, 384, 17, 17],"float32"), Tensor([16, 384, 17, 17],"float32"), )
paddle.add(Tensor([16, 384, 18, 18],"float16"), Tensor([16, 384, 18, 18],"float32"), )
paddle.add(Tensor([16, 384, 18, 18],"float32"), Tensor([16, 384, 18, 18],"float32"), )
paddle.add(Tensor([16, 384, 19, 19],"float16"), Tensor([16, 384, 19, 19],"float32"), )
paddle.add(Tensor([16, 384, 19, 19],"float32"), Tensor([16, 384, 19, 19],"float32"), )
paddle.add(Tensor([16, 384, 20, 20],"float16"), Tensor([16, 384, 20, 20],"float32"), )
paddle.add(Tensor([16, 384, 20, 20],"float32"), Tensor([16, 384, 20, 20],"float32"), )
paddle.add(Tensor([16, 384, 21, 21],"float16"), Tensor([16, 384, 21, 21],"float32"), )
paddle.add(Tensor([16, 384, 21, 21],"float32"), Tensor([16, 384, 21, 21],"float32"), )
paddle.add(Tensor([16, 384, 22, 22],"float16"), Tensor([16, 384, 22, 22],"float32"), )
paddle.add(Tensor([16, 384, 22, 22],"float32"), Tensor([16, 384, 22, 22],"float32"), )
paddle.add(Tensor([16, 384, 23, 23],"float16"), Tensor([16, 384, 23, 23],"float32"), )
paddle.add(Tensor([16, 384, 23, 23],"float32"), Tensor([16, 384, 23, 23],"float32"), )
paddle.add(Tensor([16, 384, 24, 24],"float16"), Tensor([16, 384, 24, 24],"float32"), )
paddle.add(Tensor([16, 384, 24, 24],"float32"), Tensor([16, 384, 24, 24],"float32"), )
paddle.add(Tensor([16, 40, 40, 40],"float16"), Tensor([16, 40, 40, 40],"float16"), )
paddle.add(Tensor([16, 40, 40, 40],"float32"), Tensor([16, 40, 40, 40],"float32"), )
paddle.add(Tensor([16, 48, 104, 104],"float16"), Tensor([16, 48, 104, 104],"float32"), )
paddle.add(Tensor([16, 48, 104, 104],"float32"), Tensor([16, 48, 104, 104],"float32"), )
paddle.add(Tensor([16, 48, 112, 112],"float16"), Tensor([16, 48, 112, 112],"float32"), )
paddle.add(Tensor([16, 48, 112, 112],"float32"), Tensor([16, 48, 112, 112],"float32"), )
paddle.add(Tensor([16, 48, 120, 120],"float16"), Tensor([16, 48, 120, 120],"float32"), )
paddle.add(Tensor([16, 48, 120, 120],"float32"), Tensor([16, 48, 120, 120],"float32"), )
paddle.add(Tensor([16, 48, 128, 128],"float16"), Tensor([16, 48, 128, 128],"float32"), )
paddle.add(Tensor([16, 48, 128, 128],"float32"), Tensor([16, 48, 128, 128],"float32"), )
paddle.add(Tensor([16, 48, 136, 136],"float16"), Tensor([16, 48, 136, 136],"float32"), )
paddle.add(Tensor([16, 48, 136, 136],"float32"), Tensor([16, 48, 136, 136],"float32"), )
paddle.add(Tensor([16, 48, 144, 144],"float16"), Tensor([16, 48, 144, 144],"float32"), )
paddle.add(Tensor([16, 48, 144, 144],"float32"), Tensor([16, 48, 144, 144],"float32"), )
paddle.add(Tensor([16, 48, 152, 152],"float16"), Tensor([16, 48, 152, 152],"float32"), )
paddle.add(Tensor([16, 48, 152, 152],"float32"), Tensor([16, 48, 152, 152],"float32"), )
paddle.add(Tensor([16, 48, 160, 160],"float16"), Tensor([16, 48, 160, 160],"float32"), )
paddle.add(Tensor([16, 48, 160, 160],"float32"), Tensor([16, 48, 160, 160],"float32"), )
paddle.add(Tensor([16, 48, 168, 168],"float16"), Tensor([16, 48, 168, 168],"float32"), )
paddle.add(Tensor([16, 48, 168, 168],"float32"), Tensor([16, 48, 168, 168],"float32"), )
paddle.add(Tensor([16, 48, 176, 176],"float16"), Tensor([16, 48, 176, 176],"float32"), )
paddle.add(Tensor([16, 48, 176, 176],"float32"), Tensor([16, 48, 176, 176],"float32"), )
paddle.add(Tensor([16, 48, 184, 184],"float16"), Tensor([16, 48, 184, 184],"float32"), )
paddle.add(Tensor([16, 48, 184, 184],"float32"), Tensor([16, 48, 184, 184],"float32"), )
paddle.add(Tensor([16, 48, 192, 192],"float16"), Tensor([16, 48, 192, 192],"float32"), )
paddle.add(Tensor([16, 48, 192, 192],"float32"), Tensor([16, 48, 192, 192],"float32"), )
paddle.add(Tensor([16, 48, 80, 80],"float16"), Tensor([16, 48, 80, 80],"float32"), )
paddle.add(Tensor([16, 48, 80, 80],"float32"), Tensor([16, 48, 80, 80],"float32"), )
paddle.add(Tensor([16, 48, 88, 88],"float16"), Tensor([16, 48, 88, 88],"float32"), )
paddle.add(Tensor([16, 48, 88, 88],"float32"), Tensor([16, 48, 88, 88],"float32"), )
paddle.add(Tensor([16, 48, 96, 96],"float16"), Tensor([16, 48, 96, 96],"float32"), )
paddle.add(Tensor([16, 48, 96, 96],"float32"), Tensor([16, 48, 96, 96],"float32"), )
paddle.add(Tensor([16, 512, 20, 20],"float16"), Tensor([16, 512, 20, 20],"float16"), )
paddle.add(Tensor([16, 512, 20, 20],"float32"), Tensor([16, 512, 20, 20],"float32"), )
paddle.add(Tensor([16, 56, 40, 40],"float16"), Tensor([16, 56, 40, 40],"float16"), )
paddle.add(Tensor([16, 56, 40, 40],"float32"), Tensor([16, 56, 40, 40],"float32"), )
paddle.add(Tensor([16, 64, 160, 160],"float16"), Tensor([16, 64, 160, 160],"float16"), )
paddle.add(Tensor([16, 64, 160, 160],"float32"), Tensor([16, 64, 160, 160],"float32"), )
paddle.add(Tensor([16, 8, 320, 320],"float16"), Tensor([16, 8, 320, 320],"float16"), )
paddle.add(Tensor([16, 8, 320, 320],"float32"), Tensor([16, 8, 320, 320],"float32"), )
paddle.add(Tensor([16, 80, 20, 20],"float16"), Tensor([16, 80, 20, 20],"float16"), )
paddle.add(Tensor([16, 80, 20, 20],"float32"), Tensor([16, 80, 20, 20],"float32"), )
paddle.add(Tensor([16, 96, 40, 40],"float16"), Tensor([16, 96, 40, 40],"float32"), )
paddle.add(Tensor([16, 96, 40, 40],"float32"), Tensor([16, 96, 40, 40],"float32"), )
paddle.add(Tensor([16, 96, 44, 44],"float16"), Tensor([16, 96, 44, 44],"float32"), )
paddle.add(Tensor([16, 96, 44, 44],"float32"), Tensor([16, 96, 44, 44],"float32"), )
paddle.add(Tensor([16, 96, 48, 48],"float16"), Tensor([16, 96, 48, 48],"float32"), )
paddle.add(Tensor([16, 96, 48, 48],"float32"), Tensor([16, 96, 48, 48],"float32"), )
paddle.add(Tensor([16, 96, 52, 52],"float16"), Tensor([16, 96, 52, 52],"float32"), )
paddle.add(Tensor([16, 96, 52, 52],"float32"), Tensor([16, 96, 52, 52],"float32"), )
paddle.add(Tensor([16, 96, 56, 56],"float16"), Tensor([16, 96, 56, 56],"float32"), )
paddle.add(Tensor([16, 96, 56, 56],"float32"), Tensor([16, 96, 56, 56],"float32"), )
paddle.add(Tensor([16, 96, 60, 60],"float16"), Tensor([16, 96, 60, 60],"float32"), )
paddle.add(Tensor([16, 96, 60, 60],"float32"), Tensor([16, 96, 60, 60],"float32"), )
paddle.add(Tensor([16, 96, 64, 64],"float16"), Tensor([16, 96, 64, 64],"float32"), )
paddle.add(Tensor([16, 96, 64, 64],"float32"), Tensor([16, 96, 64, 64],"float32"), )
paddle.add(Tensor([16, 96, 68, 68],"float16"), Tensor([16, 96, 68, 68],"float32"), )
paddle.add(Tensor([16, 96, 68, 68],"float32"), Tensor([16, 96, 68, 68],"float32"), )
paddle.add(Tensor([16, 96, 72, 72],"float16"), Tensor([16, 96, 72, 72],"float32"), )
paddle.add(Tensor([16, 96, 72, 72],"float32"), Tensor([16, 96, 72, 72],"float32"), )
paddle.add(Tensor([16, 96, 76, 76],"float16"), Tensor([16, 96, 76, 76],"float32"), )
paddle.add(Tensor([16, 96, 76, 76],"float32"), Tensor([16, 96, 76, 76],"float32"), )
paddle.add(Tensor([16, 96, 80, 80],"float16"), Tensor([16, 96, 80, 80],"float32"), )
paddle.add(Tensor([16, 96, 80, 80],"float32"), Tensor([16, 96, 80, 80],"float32"), )
paddle.add(Tensor([16, 96, 84, 84],"float16"), Tensor([16, 96, 84, 84],"float32"), )
paddle.add(Tensor([16, 96, 84, 84],"float32"), Tensor([16, 96, 84, 84],"float32"), )
paddle.add(Tensor([16, 96, 88, 88],"float16"), Tensor([16, 96, 88, 88],"float32"), )
paddle.add(Tensor([16, 96, 88, 88],"float32"), Tensor([16, 96, 88, 88],"float32"), )
paddle.add(Tensor([16, 96, 92, 92],"float16"), Tensor([16, 96, 92, 92],"float32"), )
paddle.add(Tensor([16, 96, 92, 92],"float32"), Tensor([16, 96, 92, 92],"float32"), )
paddle.add(Tensor([16, 96, 96, 96],"float16"), Tensor([16, 96, 96, 96],"float32"), )
paddle.add(Tensor([16, 96, 96, 96],"float32"), Tensor([16, 96, 96, 96],"float32"), )
paddle.add(Tensor([168],"int64"), Tensor([168],"int64"), )
paddle.add(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.add(Tensor([1],"float32"), Tensor([1],"float32"), name="Cauchy_entropy", )
paddle.add(Tensor([1],"float32"), Tensor([],"float32"), )
paddle.add(Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.add(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.add(Tensor([1],"int64"), Tensor([],"int64"), )
paddle.add(Tensor([2, 1, 1024],"float16"), Tensor([1024],"float16"), )
paddle.add(Tensor([2, 1, 128],"float32"), Tensor([128],"float32"), )
paddle.add(Tensor([2, 1, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 1, 8, 8],"float32"), )
paddle.add(Tensor([2, 1024, 64, 128],"float32"), Tensor([2, 1024, 64, 128],"float32"), None, )
paddle.add(Tensor([2, 1024, 64, 64],"float16"), Tensor([2, 1024, 64, 64],"float16"), None, )
paddle.add(Tensor([2, 1024, 64, 64],"float32"), Tensor([2, 1024, 64, 64],"float32"), None, )
paddle.add(Tensor([2, 112, 14, 14],"float32"), Tensor([2, 112, 14, 14],"float32"), )
paddle.add(Tensor([2, 16, 112, 112],"float32"), Tensor([2, 16, 112, 112],"float32"), )
paddle.add(Tensor([2, 160, 7, 7],"float32"), Tensor([2, 160, 7, 7],"float32"), )
paddle.add(Tensor([2, 192, 10, 10],"float32"), Tensor([2, 192, 10, 10],"float32"), )
paddle.add(Tensor([2, 192, 11, 11],"float32"), Tensor([2, 192, 11, 11],"float32"), )
paddle.add(Tensor([2, 192, 12, 12],"float32"), Tensor([2, 192, 12, 12],"float32"), )
paddle.add(Tensor([2, 192, 13, 13],"float32"), Tensor([2, 192, 13, 13],"float32"), )
paddle.add(Tensor([2, 192, 14, 14],"float32"), Tensor([2, 192, 14, 14],"float32"), )
paddle.add(Tensor([2, 192, 15, 15],"float32"), Tensor([2, 192, 15, 15],"float32"), )
paddle.add(Tensor([2, 192, 16, 16],"float32"), Tensor([2, 192, 16, 16],"float32"), )
paddle.add(Tensor([2, 192, 17, 17],"float32"), Tensor([2, 192, 17, 17],"float32"), )
paddle.add(Tensor([2, 192, 18, 18],"float32"), Tensor([2, 192, 18, 18],"float32"), )
paddle.add(Tensor([2, 192, 19, 19],"float32"), Tensor([2, 192, 19, 19],"float32"), )
paddle.add(Tensor([2, 192, 20, 20],"float32"), Tensor([2, 192, 20, 20],"float32"), )
paddle.add(Tensor([2, 192, 21, 21],"float32"), Tensor([2, 192, 21, 21],"float32"), )
paddle.add(Tensor([2, 192, 22, 22],"float32"), Tensor([2, 192, 22, 22],"float32"), )
paddle.add(Tensor([2, 192, 23, 23],"float32"), Tensor([2, 192, 23, 23],"float32"), )
paddle.add(Tensor([2, 192, 24, 24],"float32"), Tensor([2, 192, 24, 24],"float32"), )
paddle.add(Tensor([2, 192, 26, 26],"float32"), Tensor([2, 192, 26, 26],"float32"), )
paddle.add(Tensor([2, 192, 28, 28],"float32"), Tensor([2, 192, 28, 28],"float32"), )
paddle.add(Tensor([2, 192, 30, 30],"float32"), Tensor([2, 192, 30, 30],"float32"), )
paddle.add(Tensor([2, 192, 32, 32],"float32"), Tensor([2, 192, 32, 32],"float32"), )
paddle.add(Tensor([2, 192, 34, 34],"float32"), Tensor([2, 192, 34, 34],"float32"), )
paddle.add(Tensor([2, 192, 36, 36],"float32"), Tensor([2, 192, 36, 36],"float32"), )
paddle.add(Tensor([2, 192, 38, 38],"float32"), Tensor([2, 192, 38, 38],"float32"), )
paddle.add(Tensor([2, 192, 40, 40],"float32"), Tensor([2, 192, 40, 40],"float32"), )
paddle.add(Tensor([2, 192, 42, 42],"float32"), Tensor([2, 192, 42, 42],"float32"), )
paddle.add(Tensor([2, 192, 44, 44],"float32"), Tensor([2, 192, 44, 44],"float32"), )
paddle.add(Tensor([2, 192, 46, 46],"float32"), Tensor([2, 192, 46, 46],"float32"), )
paddle.add(Tensor([2, 192, 48, 48],"float32"), Tensor([2, 192, 48, 48],"float32"), )
paddle.add(Tensor([2, 2, 1, 64],"float16"), Tensor([2, 2, 1, 64],"float16"), )
paddle.add(Tensor([2, 2, 64, 64],"float16"), Tensor([2, 2, 64, 64],"float16"), )
paddle.add(Tensor([2, 2, 8, 16],"float32"), Tensor([2, 2, 8, 16],"float32"), )
paddle.add(Tensor([2, 2048, 64, 128],"float32"), Tensor([2, 2048, 64, 128],"float32"), None, )
paddle.add(Tensor([2, 2048, 64, 64],"float16"), Tensor([2, 2048, 64, 64],"float16"), None, )
paddle.add(Tensor([2, 2048, 64, 64],"float32"), Tensor([2, 2048, 64, 64],"float32"), None, )
paddle.add(Tensor([2, 24, 104, 104],"float32"), Tensor([2, 24, 104, 104],"float32"), )
paddle.add(Tensor([2, 24, 112, 112],"float32"), Tensor([2, 24, 112, 112],"float32"), )
paddle.add(Tensor([2, 24, 120, 120],"float32"), Tensor([2, 24, 120, 120],"float32"), )
paddle.add(Tensor([2, 24, 128, 128],"float32"), Tensor([2, 24, 128, 128],"float32"), )
paddle.add(Tensor([2, 24, 136, 136],"float32"), Tensor([2, 24, 136, 136],"float32"), )
paddle.add(Tensor([2, 24, 144, 144],"float32"), Tensor([2, 24, 144, 144],"float32"), )
paddle.add(Tensor([2, 24, 152, 152],"float32"), Tensor([2, 24, 152, 152],"float32"), )
paddle.add(Tensor([2, 24, 160, 160],"float32"), Tensor([2, 24, 160, 160],"float32"), )
paddle.add(Tensor([2, 24, 168, 168],"float32"), Tensor([2, 24, 168, 168],"float32"), )
paddle.add(Tensor([2, 24, 176, 176],"float32"), Tensor([2, 24, 176, 176],"float32"), )
paddle.add(Tensor([2, 24, 184, 184],"float32"), Tensor([2, 24, 184, 184],"float32"), )
paddle.add(Tensor([2, 24, 192, 192],"float32"), Tensor([2, 24, 192, 192],"float32"), )
paddle.add(Tensor([2, 24, 28, 28],"float32"), Tensor([2, 24, 28, 28],"float32"), )
paddle.add(Tensor([2, 24, 56, 56],"float32"), Tensor([2, 24, 56, 56],"float32"), )
paddle.add(Tensor([2, 24, 80, 80],"float32"), Tensor([2, 24, 80, 80],"float32"), )
paddle.add(Tensor([2, 24, 88, 88],"float32"), Tensor([2, 24, 88, 88],"float32"), )
paddle.add(Tensor([2, 24, 96, 96],"float32"), Tensor([2, 24, 96, 96],"float32"), )
paddle.add(Tensor([2, 256, 128, 128],"float16"), Tensor([2, 256, 128, 128],"float16"), None, )
paddle.add(Tensor([2, 256, 128, 128],"float32"), Tensor([2, 256, 128, 128],"float32"), None, )
paddle.add(Tensor([2, 256, 128, 256],"float32"), Tensor([2, 256, 128, 256],"float32"), None, )
paddle.add(Tensor([2, 2],"complex128"), Tensor([1, 2],"complex128"), )
paddle.add(Tensor([2, 2],"complex64"), Tensor([1, 2],"complex64"), )
paddle.add(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.add(Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), name="Normal_kl_divergence", )
paddle.add(Tensor([2, 3, 1, 1000],"float32"), Tensor([1000],"float32"), )
paddle.add(Tensor([2, 3, 1, 10],"float32"), Tensor([10],"float32"), )
paddle.add(Tensor([2, 3, 3, 4],"float32"), Tensor([2, 3, 1, 1],"float32"), )
paddle.add(Tensor([2, 3, 3, 4],"float32"), Tensor([2, 3, 1, 4],"float32"), )
paddle.add(Tensor([2, 3, 3, 4],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.add(Tensor([2, 3, 3, 4],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.add(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 3, 4, 5],"complex128"), )
paddle.add(Tensor([2, 3, 4, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.add(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 3, 4, 5],"complex64"), )
paddle.add(Tensor([2, 3, 4, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.add(Tensor([2, 3, 4, 5],"float32"), Tensor([5],"complex64"), )
paddle.add(Tensor([2, 3, 4, 5],"float64"), Tensor([5],"complex128"), )
paddle.add(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.add(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.add(Tensor([2, 384, 10, 10],"float32"), Tensor([2, 384, 10, 10],"float32"), )
paddle.add(Tensor([2, 384, 11, 11],"float32"), Tensor([2, 384, 11, 11],"float32"), )
paddle.add(Tensor([2, 384, 12, 12],"float32"), Tensor([2, 384, 12, 12],"float32"), )
paddle.add(Tensor([2, 384, 13, 13],"float32"), Tensor([2, 384, 13, 13],"float32"), )
paddle.add(Tensor([2, 384, 14, 14],"float32"), Tensor([2, 384, 14, 14],"float32"), )
paddle.add(Tensor([2, 384, 15, 15],"float32"), Tensor([2, 384, 15, 15],"float32"), )
paddle.add(Tensor([2, 384, 16, 16],"float32"), Tensor([2, 384, 16, 16],"float32"), )
paddle.add(Tensor([2, 384, 17, 17],"float32"), Tensor([2, 384, 17, 17],"float32"), )
paddle.add(Tensor([2, 384, 18, 18],"float32"), Tensor([2, 384, 18, 18],"float32"), )
paddle.add(Tensor([2, 384, 19, 19],"float32"), Tensor([2, 384, 19, 19],"float32"), )
paddle.add(Tensor([2, 384, 20, 20],"float32"), Tensor([2, 384, 20, 20],"float32"), )
paddle.add(Tensor([2, 384, 21, 21],"float32"), Tensor([2, 384, 21, 21],"float32"), )
paddle.add(Tensor([2, 384, 22, 22],"float32"), Tensor([2, 384, 22, 22],"float32"), )
paddle.add(Tensor([2, 384, 23, 23],"float32"), Tensor([2, 384, 23, 23],"float32"), )
paddle.add(Tensor([2, 384, 24, 24],"float32"), Tensor([2, 384, 24, 24],"float32"), )
paddle.add(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.add(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), name="Normal_entropy", )
paddle.add(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), name="Normal_kl_divergence", )
paddle.add(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), name=None, )
paddle.add(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), name="Normal_entropy", )
paddle.add(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), name="Normal_kl_divergence", )
paddle.add(Tensor([2, 4, 8, 8],"float32"), Tensor([2, 4, 8, 8],"float32"), )
paddle.add(Tensor([2, 40, 14, 14],"float32"), Tensor([2, 40, 14, 14],"float32"), )
paddle.add(Tensor([2, 40, 28, 28],"float32"), Tensor([2, 40, 28, 28],"float32"), )
paddle.add(Tensor([2, 48, 104, 104],"float32"), Tensor([2, 48, 104, 104],"float32"), )
paddle.add(Tensor([2, 48, 112, 112],"float32"), Tensor([2, 48, 112, 112],"float32"), )
paddle.add(Tensor([2, 48, 120, 120],"float32"), Tensor([2, 48, 120, 120],"float32"), )
paddle.add(Tensor([2, 48, 128, 128],"float32"), Tensor([2, 48, 128, 128],"float32"), )
paddle.add(Tensor([2, 48, 136, 136],"float32"), Tensor([2, 48, 136, 136],"float32"), )
paddle.add(Tensor([2, 48, 14, 14],"float32"), Tensor([2, 48, 14, 14],"float32"), )
paddle.add(Tensor([2, 48, 144, 144],"float32"), Tensor([2, 48, 144, 144],"float32"), )
paddle.add(Tensor([2, 48, 152, 152],"float32"), Tensor([2, 48, 152, 152],"float32"), )
paddle.add(Tensor([2, 48, 160, 160],"float32"), Tensor([2, 48, 160, 160],"float32"), )
paddle.add(Tensor([2, 48, 168, 168],"float32"), Tensor([2, 48, 168, 168],"float32"), )
paddle.add(Tensor([2, 48, 176, 176],"float32"), Tensor([2, 48, 176, 176],"float32"), )
paddle.add(Tensor([2, 48, 184, 184],"float32"), Tensor([2, 48, 184, 184],"float32"), )
paddle.add(Tensor([2, 48, 192, 192],"float32"), Tensor([2, 48, 192, 192],"float32"), )
paddle.add(Tensor([2, 48, 40, 40],"float32"), Tensor([2, 48, 40, 40],"float32"), )
paddle.add(Tensor([2, 48, 44, 44],"float32"), Tensor([2, 48, 44, 44],"float32"), )
paddle.add(Tensor([2, 48, 48, 48],"float32"), Tensor([2, 48, 48, 48],"float32"), )
paddle.add(Tensor([2, 48, 52, 52],"float32"), Tensor([2, 48, 52, 52],"float32"), )
paddle.add(Tensor([2, 48, 56, 56],"float32"), Tensor([2, 48, 56, 56],"float32"), )
paddle.add(Tensor([2, 48, 60, 60],"float32"), Tensor([2, 48, 60, 60],"float32"), )
paddle.add(Tensor([2, 48, 64, 64],"float32"), Tensor([2, 48, 64, 64],"float32"), )
paddle.add(Tensor([2, 48, 68, 68],"float32"), Tensor([2, 48, 68, 68],"float32"), )
paddle.add(Tensor([2, 48, 72, 72],"float32"), Tensor([2, 48, 72, 72],"float32"), )
paddle.add(Tensor([2, 48, 76, 76],"float32"), Tensor([2, 48, 76, 76],"float32"), )
paddle.add(Tensor([2, 48, 80, 80],"float32"), Tensor([2, 48, 80, 80],"float32"), )
paddle.add(Tensor([2, 48, 84, 84],"float32"), Tensor([2, 48, 84, 84],"float32"), )
paddle.add(Tensor([2, 48, 88, 88],"float32"), Tensor([2, 48, 88, 88],"float32"), )
paddle.add(Tensor([2, 48, 92, 92],"float32"), Tensor([2, 48, 92, 92],"float32"), )
paddle.add(Tensor([2, 48, 96, 96],"float32"), Tensor([2, 48, 96, 96],"float32"), )
paddle.add(Tensor([2, 512, 64, 128],"float32"), Tensor([2, 512, 64, 128],"float32"), None, )
paddle.add(Tensor([2, 512, 64, 64],"float16"), Tensor([2, 512, 64, 64],"float16"), None, )
paddle.add(Tensor([2, 512, 64, 64],"float32"), Tensor([2, 512, 64, 64],"float32"), None, )
paddle.add(Tensor([2, 8, 1, 64],"float16"), Tensor([2, 8, 1, 64],"float16"), )
paddle.add(Tensor([2, 8, 64, 64],"float16"), Tensor([2, 8, 64, 64],"float16"), )
paddle.add(Tensor([2, 8, 8],"float32"), Tensor([2, 8, 8],"float32"), )
paddle.add(Tensor([2, 80, 14, 14],"float32"), Tensor([2, 80, 14, 14],"float32"), )
paddle.add(Tensor([2, 96, 20, 20],"float32"), Tensor([2, 96, 20, 20],"float32"), )
paddle.add(Tensor([2, 96, 22, 22],"float32"), Tensor([2, 96, 22, 22],"float32"), )
paddle.add(Tensor([2, 96, 24, 24],"float32"), Tensor([2, 96, 24, 24],"float32"), )
paddle.add(Tensor([2, 96, 26, 26],"float32"), Tensor([2, 96, 26, 26],"float32"), )
paddle.add(Tensor([2, 96, 28, 28],"float32"), Tensor([2, 96, 28, 28],"float32"), )
paddle.add(Tensor([2, 96, 30, 30],"float32"), Tensor([2, 96, 30, 30],"float32"), )
paddle.add(Tensor([2, 96, 32, 32],"float32"), Tensor([2, 96, 32, 32],"float32"), )
paddle.add(Tensor([2, 96, 34, 34],"float32"), Tensor([2, 96, 34, 34],"float32"), )
paddle.add(Tensor([2, 96, 36, 36],"float32"), Tensor([2, 96, 36, 36],"float32"), )
paddle.add(Tensor([2, 96, 38, 38],"float32"), Tensor([2, 96, 38, 38],"float32"), )
paddle.add(Tensor([2, 96, 40, 40],"float32"), Tensor([2, 96, 40, 40],"float32"), )
paddle.add(Tensor([2, 96, 42, 42],"float32"), Tensor([2, 96, 42, 42],"float32"), )
paddle.add(Tensor([2, 96, 44, 44],"float32"), Tensor([2, 96, 44, 44],"float32"), )
paddle.add(Tensor([2, 96, 46, 46],"float32"), Tensor([2, 96, 46, 46],"float32"), )
paddle.add(Tensor([2, 96, 48, 48],"float32"), Tensor([2, 96, 48, 48],"float32"), )
paddle.add(Tensor([2, 96, 52, 52],"float32"), Tensor([2, 96, 52, 52],"float32"), )
paddle.add(Tensor([2, 96, 56, 56],"float32"), Tensor([2, 96, 56, 56],"float32"), )
paddle.add(Tensor([2, 96, 60, 60],"float32"), Tensor([2, 96, 60, 60],"float32"), )
paddle.add(Tensor([2, 96, 64, 64],"float32"), Tensor([2, 96, 64, 64],"float32"), )
paddle.add(Tensor([2, 96, 68, 68],"float32"), Tensor([2, 96, 68, 68],"float32"), )
paddle.add(Tensor([2, 96, 7, 7],"float32"), Tensor([2, 96, 7, 7],"float32"), )
paddle.add(Tensor([2, 96, 72, 72],"float32"), Tensor([2, 96, 72, 72],"float32"), )
paddle.add(Tensor([2, 96, 76, 76],"float32"), Tensor([2, 96, 76, 76],"float32"), )
paddle.add(Tensor([2, 96, 80, 80],"float32"), Tensor([2, 96, 80, 80],"float32"), )
paddle.add(Tensor([2, 96, 84, 84],"float32"), Tensor([2, 96, 84, 84],"float32"), )
paddle.add(Tensor([2, 96, 88, 88],"float32"), Tensor([2, 96, 88, 88],"float32"), )
paddle.add(Tensor([2, 96, 92, 92],"float32"), Tensor([2, 96, 92, 92],"float32"), )
paddle.add(Tensor([2, 96, 96, 96],"float32"), Tensor([2, 96, 96, 96],"float32"), )
paddle.add(Tensor([20, 128, 76, 136],"float32"), Tensor([20, 128, 76, 136],"float16"), )
paddle.add(Tensor([20, 128, 76, 136],"float32"), Tensor([20, 128, 76, 136],"float32"), )
paddle.add(Tensor([20, 256, 38, 68],"float32"), Tensor([20, 256, 38, 68],"float16"), )
paddle.add(Tensor([20, 256, 38, 68],"float32"), Tensor([20, 256, 38, 68],"float32"), )
paddle.add(Tensor([20, 64, 152, 272],"float32"), Tensor([20, 64, 152, 272],"float16"), )
paddle.add(Tensor([20, 64, 152, 272],"float32"), Tensor([20, 64, 152, 272],"float32"), )
paddle.add(Tensor([24, 256, 256],"float32"), Tensor([24, 1, 256],"float32"), )
paddle.add(Tensor([256, 12, 56, 56],"float32"), Tensor([256, 12, 56, 56],"float32"), )
paddle.add(Tensor([256, 120, 7, 7],"float32"), Tensor([256, 120, 7, 7],"float32"), )
paddle.add(Tensor([256, 16, 14, 14],"float32"), Tensor([256, 16, 14, 14],"float32"), )
paddle.add(Tensor([256, 16, 28, 28],"float32"), Tensor([256, 16, 28, 28],"float32"), )
paddle.add(Tensor([256, 16, 8, 50],"float16"), Tensor([256, 16, 8, 50],"float16"), )
paddle.add(Tensor([256, 16, 8, 50],"float32"), Tensor([256, 16, 8, 50],"float32"), )
paddle.add(Tensor([256, 160, 7, 7],"float16"), Tensor([256, 160, 7, 7],"float16"), )
paddle.add(Tensor([256, 160, 7, 7],"float32"), Tensor([256, 160, 7, 7],"float32"), )
paddle.add(Tensor([256, 24, 14, 14],"float32"), Tensor([256, 24, 14, 14],"float32"), )
paddle.add(Tensor([256, 24, 28, 28],"float32"), Tensor([256, 24, 28, 28],"float32"), )
paddle.add(Tensor([256, 24, 4, 50],"float16"), Tensor([256, 24, 4, 50],"float16"), )
paddle.add(Tensor([256, 24, 4, 50],"float32"), Tensor([256, 24, 4, 50],"float32"), )
paddle.add(Tensor([256, 24, 56, 56],"float16"), Tensor([256, 24, 56, 56],"float16"), )
paddle.add(Tensor([256, 24, 56, 56],"float32"), Tensor([256, 24, 56, 56],"float32"), )
paddle.add(Tensor([256, 32, 14, 14],"float32"), Tensor([256, 32, 14, 14],"float32"), )
paddle.add(Tensor([256, 32, 28, 28],"float16"), Tensor([256, 32, 28, 28],"float16"), )
paddle.add(Tensor([256, 32, 28, 28],"float32"), Tensor([256, 32, 28, 28],"float32"), )
paddle.add(Tensor([256, 32, 7, 7],"float32"), Tensor([256, 32, 7, 7],"float32"), )
paddle.add(Tensor([256, 40, 14, 14],"float32"), Tensor([256, 40, 14, 14],"float32"), )
paddle.add(Tensor([256, 40, 4, 50],"float16"), Tensor([256, 40, 4, 50],"float16"), )
paddle.add(Tensor([256, 40, 4, 50],"float32"), Tensor([256, 40, 4, 50],"float32"), )
paddle.add(Tensor([256, 40, 7, 7],"float32"), Tensor([256, 40, 7, 7],"float32"), )
paddle.add(Tensor([256, 48, 14, 14],"float32"), Tensor([256, 48, 14, 14],"float32"), )
paddle.add(Tensor([256, 48, 7, 7],"float32"), Tensor([256, 48, 7, 7],"float32"), )
paddle.add(Tensor([256, 56, 4, 50],"float16"), Tensor([256, 56, 4, 50],"float16"), )
paddle.add(Tensor([256, 56, 4, 50],"float32"), Tensor([256, 56, 4, 50],"float32"), )
paddle.add(Tensor([256, 6, 56, 56],"float32"), Tensor([256, 6, 56, 56],"float32"), )
paddle.add(Tensor([256, 64, 14, 14],"float16"), Tensor([256, 64, 14, 14],"float16"), )
paddle.add(Tensor([256, 64, 14, 14],"float32"), Tensor([256, 64, 14, 14],"float32"), )
paddle.add(Tensor([256, 72, 7, 7],"float32"), Tensor([256, 72, 7, 7],"float32"), )
paddle.add(Tensor([256, 8, 16, 50],"float16"), Tensor([256, 8, 16, 50],"float16"), )
paddle.add(Tensor([256, 8, 16, 50],"float32"), Tensor([256, 8, 16, 50],"float32"), )
paddle.add(Tensor([256, 8, 28, 28],"float32"), Tensor([256, 8, 28, 28],"float32"), )
paddle.add(Tensor([256, 80, 2, 50],"float16"), Tensor([256, 80, 2, 50],"float16"), )
paddle.add(Tensor([256, 80, 2, 50],"float32"), Tensor([256, 80, 2, 50],"float32"), )
paddle.add(Tensor([256, 80, 7, 7],"float32"), Tensor([256, 80, 7, 7],"float32"), )
paddle.add(Tensor([256, 96, 14, 14],"float16"), Tensor([256, 96, 14, 14],"float16"), )
paddle.add(Tensor([256, 96, 14, 14],"float32"), Tensor([256, 96, 14, 14],"float32"), )
paddle.add(Tensor([256, 96, 7, 7],"float32"), Tensor([256, 96, 7, 7],"float32"), )
paddle.add(Tensor([2],"float64"), Tensor([2],"float64"), name="Normal_entropy", )
paddle.add(Tensor([2],"float64"), Tensor([2],"float64"), name="Normal_kl_divergence", )
paddle.add(Tensor([3, 100, 120],"float64"), Tensor([3, 100, 120],"float64"), )
paddle.add(Tensor([3, 1],"int64"), Tensor([3, 40],"int64"), )
paddle.add(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.add(Tensor([3, 3],"float64"), Tensor([3, 3],"float64"), name="Normal_entropy", )
paddle.add(Tensor([30, 1],"int64"), Tensor([30, 3],"int64"), )
paddle.add(Tensor([300, 120],"int64"), Tensor([120],"int64"), )
paddle.add(Tensor([300, 40],"int64"), Tensor([300, 1],"int64"), )
paddle.add(Tensor([31, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([32, 192, 24, 24],"float32"), Tensor([32, 192, 24, 24],"float32"), )
paddle.add(Tensor([32, 24, 61, 61],"float16"), Tensor([32, 24, 61, 61],"float16"), )
paddle.add(Tensor([32, 24, 61, 61],"float32"), Tensor([32, 24, 61, 61],"float32"), )
paddle.add(Tensor([32, 256, 256],"float32"), Tensor([32, 1, 256],"float32"), )
paddle.add(Tensor([32, 40, 31, 31],"float16"), Tensor([32, 40, 31, 31],"float16"), )
paddle.add(Tensor([32, 40, 31, 31],"float32"), Tensor([32, 40, 31, 31],"float16"), )
paddle.add(Tensor([32, 40, 31, 31],"float32"), Tensor([32, 40, 31, 31],"float32"), )
paddle.add(Tensor([32, 48, 31, 31],"float16"), Tensor([32, 48, 31, 31],"float16"), )
paddle.add(Tensor([32, 48, 31, 31],"float32"), Tensor([32, 48, 31, 31],"float32"), )
paddle.add(Tensor([32, 512, 12, 12],"float32"), Tensor([32, 512, 12, 12],"float32"), )
paddle.add(Tensor([32, 96, 16, 16],"float16"), Tensor([32, 96, 16, 16],"float16"), )
paddle.add(Tensor([32, 96, 16, 16],"float32"), Tensor([32, 96, 16, 16],"float16"), )
paddle.add(Tensor([32, 96, 16, 16],"float32"), Tensor([32, 96, 16, 16],"float32"), )
paddle.add(Tensor([32, 96, 48, 48],"float32"), Tensor([32, 96, 48, 48],"float32"), )
paddle.add(Tensor([32],"float32"), Tensor([32],"float32"), )
paddle.add(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.add(Tensor([3],"float32"), Tensor([3],"float32"), name="Cauchy_entropy", )
paddle.add(Tensor([3],"float32"), Tensor([],"float32"), )
paddle.add(Tensor([4, 1, 128],"float32"), Tensor([128],"float32"), )
paddle.add(Tensor([4, 1024, 32, 32],"float32"), Tensor([4, 1024, 32, 32],"float32"), )
paddle.add(Tensor([4, 1024, 64, 128],"float16"), Tensor([4, 1024, 64, 128],"float16"), None, )
paddle.add(Tensor([4, 1024, 64, 128],"float32"), Tensor([4, 1024, 64, 128],"float32"), None, )
paddle.add(Tensor([4, 1024, 64, 64],"float16"), Tensor([4, 1024, 64, 64],"float16"), None, )
paddle.add(Tensor([4, 1024, 64, 64],"float32"), Tensor([4, 1024, 64, 64],"float32"), None, )
paddle.add(Tensor([4, 112, 32, 64],"float16"), Tensor([4, 112, 32, 64],"float16"), )
paddle.add(Tensor([4, 112, 32, 64],"float32"), Tensor([4, 112, 32, 64],"float32"), )
paddle.add(Tensor([4, 120, 44, 44],"float32"), Tensor([4, 120, 44, 44],"float32"), )
paddle.add(Tensor([4, 120, 56, 56],"float32"), Tensor([4, 120, 56, 56],"float32"), )
paddle.add(Tensor([4, 120, 60, 60],"float32"), Tensor([4, 120, 60, 60],"float32"), )
paddle.add(Tensor([4, 120, 64, 64],"float32"), Tensor([4, 120, 64, 64],"float32"), )
paddle.add(Tensor([4, 120, 68, 68],"float32"), Tensor([4, 120, 68, 68],"float32"), )
paddle.add(Tensor([4, 120, 72, 72],"float32"), Tensor([4, 120, 72, 72],"float32"), )
paddle.add(Tensor([4, 120, 76, 76],"float32"), Tensor([4, 120, 76, 76],"float32"), )
paddle.add(Tensor([4, 120, 80, 80],"float32"), Tensor([4, 120, 80, 80],"float32"), )
paddle.add(Tensor([4, 120, 84, 84],"float32"), Tensor([4, 120, 84, 84],"float32"), )
paddle.add(Tensor([4, 120, 88, 88],"float32"), Tensor([4, 120, 88, 88],"float32"), )
paddle.add(Tensor([4, 120, 96, 96],"float32"), Tensor([4, 120, 96, 96],"float32"), )
paddle.add(Tensor([4, 128, 128, 128],"float16"), Tensor([4, 128, 128, 128],"float16"), None, )
paddle.add(Tensor([4, 128, 128, 128],"float32"), Tensor([4, 128, 128, 128],"float32"), None, )
paddle.add(Tensor([4, 128, 200, 272],"float16"), Tensor([4, 128, 200, 272],"float32"), )
paddle.add(Tensor([4, 128, 200, 272],"float32"), Tensor([4, 128, 200, 272],"float32"), )
paddle.add(Tensor([4, 128, 200, 280],"float16"), Tensor([4, 128, 200, 280],"float32"), )
paddle.add(Tensor([4, 128, 200, 280],"float32"), Tensor([4, 128, 200, 280],"float32"), )
paddle.add(Tensor([4, 128, 200, 288],"float16"), Tensor([4, 128, 200, 288],"float32"), )
paddle.add(Tensor([4, 128, 200, 288],"float32"), Tensor([4, 128, 200, 288],"float32"), )
paddle.add(Tensor([4, 128, 200, 296],"float16"), Tensor([4, 128, 200, 296],"float32"), )
paddle.add(Tensor([4, 128, 200, 296],"float32"), Tensor([4, 128, 200, 296],"float32"), )
paddle.add(Tensor([4, 128, 200, 304],"float16"), Tensor([4, 128, 200, 304],"float32"), )
paddle.add(Tensor([4, 128, 200, 304],"float32"), Tensor([4, 128, 200, 304],"float32"), )
paddle.add(Tensor([4, 128, 200, 312],"float16"), Tensor([4, 128, 200, 312],"float32"), )
paddle.add(Tensor([4, 128, 200, 312],"float32"), Tensor([4, 128, 200, 312],"float32"), )
paddle.add(Tensor([4, 128, 200, 320],"float16"), Tensor([4, 128, 200, 320],"float32"), )
paddle.add(Tensor([4, 128, 200, 320],"float32"), Tensor([4, 128, 200, 320],"float32"), )
paddle.add(Tensor([4, 128, 200, 328],"float16"), Tensor([4, 128, 200, 328],"float32"), )
paddle.add(Tensor([4, 128, 200, 328],"float32"), Tensor([4, 128, 200, 328],"float32"), )
paddle.add(Tensor([4, 128, 200, 336],"float16"), Tensor([4, 128, 200, 336],"float32"), )
paddle.add(Tensor([4, 128, 200, 336],"float32"), Tensor([4, 128, 200, 336],"float32"), )
paddle.add(Tensor([4, 128, 208, 272],"float16"), Tensor([4, 128, 208, 272],"float32"), )
paddle.add(Tensor([4, 128, 208, 272],"float32"), Tensor([4, 128, 208, 272],"float32"), )
paddle.add(Tensor([4, 128, 208, 304],"float16"), Tensor([4, 128, 208, 304],"float32"), )
paddle.add(Tensor([4, 128, 208, 304],"float32"), Tensor([4, 128, 208, 304],"float32"), )
paddle.add(Tensor([4, 128, 208, 328],"float16"), Tensor([4, 128, 208, 328],"float32"), )
paddle.add(Tensor([4, 128, 208, 328],"float32"), Tensor([4, 128, 208, 328],"float32"), )
paddle.add(Tensor([4, 128, 208, 336],"float16"), Tensor([4, 128, 208, 336],"float32"), )
paddle.add(Tensor([4, 128, 208, 336],"float32"), Tensor([4, 128, 208, 336],"float32"), )
paddle.add(Tensor([4, 128, 216, 296],"float16"), Tensor([4, 128, 216, 296],"float32"), )
paddle.add(Tensor([4, 128, 216, 296],"float32"), Tensor([4, 128, 216, 296],"float32"), )
paddle.add(Tensor([4, 128, 216, 304],"float16"), Tensor([4, 128, 216, 304],"float32"), )
paddle.add(Tensor([4, 128, 216, 304],"float32"), Tensor([4, 128, 216, 304],"float32"), )
paddle.add(Tensor([4, 128, 216, 312],"float16"), Tensor([4, 128, 216, 312],"float32"), )
paddle.add(Tensor([4, 128, 216, 312],"float32"), Tensor([4, 128, 216, 312],"float32"), )
paddle.add(Tensor([4, 128, 224, 304],"float16"), Tensor([4, 128, 224, 304],"float32"), )
paddle.add(Tensor([4, 128, 224, 304],"float32"), Tensor([4, 128, 224, 304],"float32"), )
paddle.add(Tensor([4, 128, 232, 304],"float16"), Tensor([4, 128, 232, 304],"float32"), )
paddle.add(Tensor([4, 128, 232, 304],"float32"), Tensor([4, 128, 232, 304],"float32"), )
paddle.add(Tensor([4, 128, 232, 320],"float16"), Tensor([4, 128, 232, 320],"float32"), )
paddle.add(Tensor([4, 128, 232, 320],"float32"), Tensor([4, 128, 232, 320],"float32"), )
paddle.add(Tensor([4, 128, 240, 304],"float16"), Tensor([4, 128, 240, 304],"float32"), )
paddle.add(Tensor([4, 128, 240, 304],"float32"), Tensor([4, 128, 240, 304],"float32"), )
paddle.add(Tensor([4, 128, 248, 272],"float16"), Tensor([4, 128, 248, 272],"float32"), )
paddle.add(Tensor([4, 128, 248, 272],"float32"), Tensor([4, 128, 248, 272],"float32"), )
paddle.add(Tensor([4, 128, 248, 304],"float16"), Tensor([4, 128, 248, 304],"float32"), )
paddle.add(Tensor([4, 128, 248, 304],"float32"), Tensor([4, 128, 248, 304],"float32"), )
paddle.add(Tensor([4, 128, 248, 336],"float16"), Tensor([4, 128, 248, 336],"float32"), )
paddle.add(Tensor([4, 128, 248, 336],"float32"), Tensor([4, 128, 248, 336],"float32"), )
paddle.add(Tensor([4, 128, 256, 272],"float16"), Tensor([4, 128, 256, 272],"float32"), )
paddle.add(Tensor([4, 128, 256, 272],"float32"), Tensor([4, 128, 256, 272],"float32"), )
paddle.add(Tensor([4, 128, 256, 304],"float16"), Tensor([4, 128, 256, 304],"float32"), )
paddle.add(Tensor([4, 128, 256, 304],"float32"), Tensor([4, 128, 256, 304],"float32"), )
paddle.add(Tensor([4, 128, 256, 336],"float16"), Tensor([4, 128, 256, 336],"float32"), )
paddle.add(Tensor([4, 128, 256, 336],"float32"), Tensor([4, 128, 256, 336],"float32"), )
paddle.add(Tensor([4, 128, 264, 288],"float16"), Tensor([4, 128, 264, 288],"float32"), )
paddle.add(Tensor([4, 128, 264, 288],"float32"), Tensor([4, 128, 264, 288],"float32"), )
paddle.add(Tensor([4, 128, 264, 296],"float16"), Tensor([4, 128, 264, 296],"float32"), )
paddle.add(Tensor([4, 128, 264, 296],"float32"), Tensor([4, 128, 264, 296],"float32"), )
paddle.add(Tensor([4, 128, 264, 304],"float16"), Tensor([4, 128, 264, 304],"float32"), )
paddle.add(Tensor([4, 128, 264, 304],"float32"), Tensor([4, 128, 264, 304],"float32"), )
paddle.add(Tensor([4, 128, 264, 320],"float16"), Tensor([4, 128, 264, 320],"float32"), )
paddle.add(Tensor([4, 128, 264, 320],"float32"), Tensor([4, 128, 264, 320],"float32"), )
paddle.add(Tensor([4, 128, 264, 336],"float16"), Tensor([4, 128, 264, 336],"float32"), )
paddle.add(Tensor([4, 128, 264, 336],"float32"), Tensor([4, 128, 264, 336],"float32"), )
paddle.add(Tensor([4, 128, 272, 200],"float16"), Tensor([4, 128, 272, 200],"float32"), )
paddle.add(Tensor([4, 128, 272, 200],"float32"), Tensor([4, 128, 272, 200],"float32"), )
paddle.add(Tensor([4, 128, 272, 216],"float16"), Tensor([4, 128, 272, 216],"float32"), )
paddle.add(Tensor([4, 128, 272, 216],"float32"), Tensor([4, 128, 272, 216],"float32"), )
paddle.add(Tensor([4, 128, 272, 272],"float16"), Tensor([4, 128, 272, 272],"float32"), )
paddle.add(Tensor([4, 128, 272, 272],"float32"), Tensor([4, 128, 272, 272],"float32"), )
paddle.add(Tensor([4, 128, 272, 280],"float16"), Tensor([4, 128, 272, 280],"float32"), )
paddle.add(Tensor([4, 128, 272, 280],"float32"), Tensor([4, 128, 272, 280],"float32"), )
paddle.add(Tensor([4, 128, 272, 296],"float16"), Tensor([4, 128, 272, 296],"float32"), )
paddle.add(Tensor([4, 128, 272, 296],"float32"), Tensor([4, 128, 272, 296],"float32"), )
paddle.add(Tensor([4, 128, 272, 304],"float16"), Tensor([4, 128, 272, 304],"float32"), )
paddle.add(Tensor([4, 128, 272, 304],"float32"), Tensor([4, 128, 272, 304],"float32"), )
paddle.add(Tensor([4, 128, 272, 312],"float16"), Tensor([4, 128, 272, 312],"float32"), )
paddle.add(Tensor([4, 128, 272, 312],"float32"), Tensor([4, 128, 272, 312],"float32"), )
paddle.add(Tensor([4, 128, 272, 320],"float16"), Tensor([4, 128, 272, 320],"float32"), )
paddle.add(Tensor([4, 128, 272, 320],"float32"), Tensor([4, 128, 272, 320],"float32"), )
paddle.add(Tensor([4, 128, 272, 328],"float16"), Tensor([4, 128, 272, 328],"float32"), )
paddle.add(Tensor([4, 128, 272, 328],"float32"), Tensor([4, 128, 272, 328],"float32"), )
paddle.add(Tensor([4, 128, 272, 336],"float16"), Tensor([4, 128, 272, 336],"float32"), )
paddle.add(Tensor([4, 128, 272, 336],"float32"), Tensor([4, 128, 272, 336],"float32"), )
paddle.add(Tensor([4, 128, 280, 272],"float16"), Tensor([4, 128, 280, 272],"float32"), )
paddle.add(Tensor([4, 128, 280, 272],"float32"), Tensor([4, 128, 280, 272],"float32"), )
paddle.add(Tensor([4, 128, 280, 280],"float16"), Tensor([4, 128, 280, 280],"float32"), )
paddle.add(Tensor([4, 128, 280, 280],"float32"), Tensor([4, 128, 280, 280],"float32"), )
paddle.add(Tensor([4, 128, 280, 304],"float16"), Tensor([4, 128, 280, 304],"float32"), )
paddle.add(Tensor([4, 128, 280, 304],"float32"), Tensor([4, 128, 280, 304],"float32"), )
paddle.add(Tensor([4, 128, 280, 312],"float16"), Tensor([4, 128, 280, 312],"float32"), )
paddle.add(Tensor([4, 128, 280, 312],"float32"), Tensor([4, 128, 280, 312],"float32"), )
paddle.add(Tensor([4, 128, 280, 328],"float16"), Tensor([4, 128, 280, 328],"float32"), )
paddle.add(Tensor([4, 128, 280, 328],"float32"), Tensor([4, 128, 280, 328],"float32"), )
paddle.add(Tensor([4, 128, 280, 336],"float16"), Tensor([4, 128, 280, 336],"float32"), )
paddle.add(Tensor([4, 128, 280, 336],"float32"), Tensor([4, 128, 280, 336],"float32"), )
paddle.add(Tensor([4, 128, 288, 272],"float16"), Tensor([4, 128, 288, 272],"float32"), )
paddle.add(Tensor([4, 128, 288, 272],"float32"), Tensor([4, 128, 288, 272],"float32"), )
paddle.add(Tensor([4, 128, 288, 304],"float16"), Tensor([4, 128, 288, 304],"float32"), )
paddle.add(Tensor([4, 128, 288, 304],"float32"), Tensor([4, 128, 288, 304],"float32"), )
paddle.add(Tensor([4, 128, 288, 336],"float16"), Tensor([4, 128, 288, 336],"float32"), )
paddle.add(Tensor([4, 128, 288, 336],"float32"), Tensor([4, 128, 288, 336],"float32"), )
paddle.add(Tensor([4, 128, 296, 272],"float16"), Tensor([4, 128, 296, 272],"float32"), )
paddle.add(Tensor([4, 128, 296, 272],"float32"), Tensor([4, 128, 296, 272],"float32"), )
paddle.add(Tensor([4, 128, 296, 304],"float16"), Tensor([4, 128, 296, 304],"float32"), )
paddle.add(Tensor([4, 128, 296, 304],"float32"), Tensor([4, 128, 296, 304],"float32"), )
paddle.add(Tensor([4, 128, 296, 328],"float16"), Tensor([4, 128, 296, 328],"float32"), )
paddle.add(Tensor([4, 128, 296, 328],"float32"), Tensor([4, 128, 296, 328],"float32"), )
paddle.add(Tensor([4, 128, 296, 336],"float16"), Tensor([4, 128, 296, 336],"float32"), )
paddle.add(Tensor([4, 128, 296, 336],"float32"), Tensor([4, 128, 296, 336],"float32"), )
paddle.add(Tensor([4, 128, 304, 200],"float16"), Tensor([4, 128, 304, 200],"float32"), )
paddle.add(Tensor([4, 128, 304, 200],"float32"), Tensor([4, 128, 304, 200],"float32"), )
paddle.add(Tensor([4, 128, 304, 216],"float16"), Tensor([4, 128, 304, 216],"float32"), )
paddle.add(Tensor([4, 128, 304, 216],"float32"), Tensor([4, 128, 304, 216],"float32"), )
paddle.add(Tensor([4, 128, 304, 264],"float16"), Tensor([4, 128, 304, 264],"float32"), )
paddle.add(Tensor([4, 128, 304, 264],"float32"), Tensor([4, 128, 304, 264],"float32"), )
paddle.add(Tensor([4, 128, 304, 272],"float16"), Tensor([4, 128, 304, 272],"float32"), )
paddle.add(Tensor([4, 128, 304, 272],"float32"), Tensor([4, 128, 304, 272],"float32"), )
paddle.add(Tensor([4, 128, 304, 280],"float16"), Tensor([4, 128, 304, 280],"float32"), )
paddle.add(Tensor([4, 128, 304, 280],"float32"), Tensor([4, 128, 304, 280],"float32"), )
paddle.add(Tensor([4, 128, 304, 288],"float16"), Tensor([4, 128, 304, 288],"float32"), )
paddle.add(Tensor([4, 128, 304, 288],"float32"), Tensor([4, 128, 304, 288],"float32"), )
paddle.add(Tensor([4, 128, 304, 296],"float16"), Tensor([4, 128, 304, 296],"float32"), )
paddle.add(Tensor([4, 128, 304, 296],"float32"), Tensor([4, 128, 304, 296],"float32"), )
paddle.add(Tensor([4, 128, 304, 304],"float16"), Tensor([4, 128, 304, 304],"float32"), )
paddle.add(Tensor([4, 128, 304, 304],"float32"), Tensor([4, 128, 304, 304],"float32"), )
paddle.add(Tensor([4, 128, 304, 312],"float16"), Tensor([4, 128, 304, 312],"float32"), )
paddle.add(Tensor([4, 128, 304, 312],"float32"), Tensor([4, 128, 304, 312],"float32"), )
paddle.add(Tensor([4, 128, 304, 320],"float16"), Tensor([4, 128, 304, 320],"float32"), )
paddle.add(Tensor([4, 128, 304, 320],"float32"), Tensor([4, 128, 304, 320],"float32"), )
paddle.add(Tensor([4, 128, 304, 328],"float16"), Tensor([4, 128, 304, 328],"float32"), )
paddle.add(Tensor([4, 128, 304, 328],"float32"), Tensor([4, 128, 304, 328],"float32"), )
paddle.add(Tensor([4, 128, 304, 336],"float16"), Tensor([4, 128, 304, 336],"float32"), )
paddle.add(Tensor([4, 128, 304, 336],"float32"), Tensor([4, 128, 304, 336],"float32"), )
paddle.add(Tensor([4, 128, 312, 272],"float16"), Tensor([4, 128, 312, 272],"float32"), )
paddle.add(Tensor([4, 128, 312, 272],"float32"), Tensor([4, 128, 312, 272],"float32"), )
paddle.add(Tensor([4, 128, 312, 296],"float16"), Tensor([4, 128, 312, 296],"float32"), )
paddle.add(Tensor([4, 128, 312, 296],"float32"), Tensor([4, 128, 312, 296],"float32"), )
paddle.add(Tensor([4, 128, 312, 304],"float16"), Tensor([4, 128, 312, 304],"float32"), )
paddle.add(Tensor([4, 128, 312, 304],"float32"), Tensor([4, 128, 312, 304],"float32"), )
paddle.add(Tensor([4, 128, 312, 336],"float16"), Tensor([4, 128, 312, 336],"float32"), )
paddle.add(Tensor([4, 128, 312, 336],"float32"), Tensor([4, 128, 312, 336],"float32"), )
paddle.add(Tensor([4, 128, 32, 32],"float16"), Tensor([4, 128, 32, 32],"float16"), )
paddle.add(Tensor([4, 128, 32, 32],"float32"), Tensor([4, 128, 32, 32],"float32"), )
paddle.add(Tensor([4, 128, 320, 272],"float16"), Tensor([4, 128, 320, 272],"float32"), )
paddle.add(Tensor([4, 128, 320, 272],"float32"), Tensor([4, 128, 320, 272],"float32"), )
paddle.add(Tensor([4, 128, 320, 304],"float16"), Tensor([4, 128, 320, 304],"float32"), )
paddle.add(Tensor([4, 128, 320, 304],"float32"), Tensor([4, 128, 320, 304],"float32"), )
paddle.add(Tensor([4, 128, 320, 320],"float16"), Tensor([4, 128, 320, 320],"float32"), )
paddle.add(Tensor([4, 128, 320, 320],"float32"), Tensor([4, 128, 320, 320],"float32"), )
paddle.add(Tensor([4, 128, 328, 200],"float16"), Tensor([4, 128, 328, 200],"float32"), )
paddle.add(Tensor([4, 128, 328, 200],"float32"), Tensor([4, 128, 328, 200],"float32"), )
paddle.add(Tensor([4, 128, 328, 272],"float16"), Tensor([4, 128, 328, 272],"float32"), )
paddle.add(Tensor([4, 128, 328, 272],"float32"), Tensor([4, 128, 328, 272],"float32"), )
paddle.add(Tensor([4, 128, 328, 296],"float16"), Tensor([4, 128, 328, 296],"float32"), )
paddle.add(Tensor([4, 128, 328, 296],"float32"), Tensor([4, 128, 328, 296],"float32"), )
paddle.add(Tensor([4, 128, 328, 304],"float16"), Tensor([4, 128, 328, 304],"float32"), )
paddle.add(Tensor([4, 128, 328, 304],"float32"), Tensor([4, 128, 328, 304],"float32"), )
paddle.add(Tensor([4, 128, 336, 200],"float16"), Tensor([4, 128, 336, 200],"float32"), )
paddle.add(Tensor([4, 128, 336, 200],"float32"), Tensor([4, 128, 336, 200],"float32"), )
paddle.add(Tensor([4, 128, 336, 272],"float16"), Tensor([4, 128, 336, 272],"float32"), )
paddle.add(Tensor([4, 128, 336, 272],"float32"), Tensor([4, 128, 336, 272],"float32"), )
paddle.add(Tensor([4, 128, 336, 280],"float16"), Tensor([4, 128, 336, 280],"float32"), )
paddle.add(Tensor([4, 128, 336, 280],"float32"), Tensor([4, 128, 336, 280],"float32"), )
paddle.add(Tensor([4, 128, 336, 304],"float16"), Tensor([4, 128, 336, 304],"float32"), )
paddle.add(Tensor([4, 128, 336, 304],"float32"), Tensor([4, 128, 336, 304],"float32"), )
paddle.add(Tensor([4, 128, 336, 312],"float16"), Tensor([4, 128, 336, 312],"float32"), )
paddle.add(Tensor([4, 128, 336, 312],"float32"), Tensor([4, 128, 336, 312],"float32"), )
paddle.add(Tensor([4, 128, 336, 320],"float16"), Tensor([4, 128, 336, 320],"float32"), )
paddle.add(Tensor([4, 128, 336, 320],"float32"), Tensor([4, 128, 336, 320],"float32"), )
paddle.add(Tensor([4, 128, 336, 336],"float16"), Tensor([4, 128, 336, 336],"float32"), )
paddle.add(Tensor([4, 128, 336, 336],"float32"), Tensor([4, 128, 336, 336],"float32"), )
paddle.add(Tensor([4, 128, 64, 64],"float32"), Tensor([4, 128, 64, 64],"float32"), )
paddle.add(Tensor([4, 144, 12, 39],"float32"), Tensor([4, 144, 12, 39],"float32"), )
paddle.add(Tensor([4, 16, 16, 32],"float32"), Tensor([4, 16, 16, 32],"float32"), )
paddle.add(Tensor([4, 16, 240, 240],"float32"), Tensor([4, 16, 240, 240],"float32"), )
paddle.add(Tensor([4, 16, 256, 256],"float16"), Tensor([4, 16, 256, 256],"float16"), )
paddle.add(Tensor([4, 16, 256, 256],"float32"), Tensor([4, 16, 256, 256],"float32"), )
paddle.add(Tensor([4, 16, 256, 512],"float16"), Tensor([4, 16, 256, 512],"float16"), )
paddle.add(Tensor([4, 16, 256, 512],"float32"), Tensor([4, 16, 256, 512],"float32"), )
paddle.add(Tensor([4, 160, 16, 32],"float16"), Tensor([4, 160, 16, 32],"float16"), )
paddle.add(Tensor([4, 160, 16, 32],"float32"), Tensor([4, 160, 16, 32],"float32"), )
paddle.add(Tensor([4, 160, 7, 7],"float32"), Tensor([4, 160, 7, 7],"float32"), )
paddle.add(Tensor([4, 18, 94, 311],"float32"), Tensor([4, 18, 94, 311],"float32"), )
paddle.add(Tensor([4, 192, 10, 10],"float32"), Tensor([4, 192, 10, 10],"float32"), )
paddle.add(Tensor([4, 192, 11, 11],"float32"), Tensor([4, 192, 11, 11],"float32"), )
paddle.add(Tensor([4, 192, 12, 12],"float32"), Tensor([4, 192, 12, 12],"float32"), )
paddle.add(Tensor([4, 192, 13, 13],"float32"), Tensor([4, 192, 13, 13],"float32"), )
paddle.add(Tensor([4, 192, 14, 14],"float32"), Tensor([4, 192, 14, 14],"float32"), )
paddle.add(Tensor([4, 192, 15, 15],"float32"), Tensor([4, 192, 15, 15],"float32"), )
paddle.add(Tensor([4, 192, 16, 16],"float16"), Tensor([4, 192, 16, 16],"float16"), )
paddle.add(Tensor([4, 192, 16, 16],"float32"), Tensor([4, 192, 16, 16],"float32"), )
paddle.add(Tensor([4, 192, 17, 17],"float32"), Tensor([4, 192, 17, 17],"float32"), )
paddle.add(Tensor([4, 192, 18, 18],"float32"), Tensor([4, 192, 18, 18],"float32"), )
paddle.add(Tensor([4, 192, 19, 19],"float32"), Tensor([4, 192, 19, 19],"float32"), )
paddle.add(Tensor([4, 192, 20, 20],"float32"), Tensor([4, 192, 20, 20],"float32"), )
paddle.add(Tensor([4, 192, 21, 21],"float32"), Tensor([4, 192, 21, 21],"float32"), )
paddle.add(Tensor([4, 192, 22, 22],"float32"), Tensor([4, 192, 22, 22],"float32"), )
paddle.add(Tensor([4, 192, 23, 23],"float32"), Tensor([4, 192, 23, 23],"float32"), )
paddle.add(Tensor([4, 192, 24, 24],"float32"), Tensor([4, 192, 24, 24],"float32"), )
paddle.add(Tensor([4, 2048, 64, 128],"float16"), Tensor([4, 2048, 64, 128],"float16"), None, )
paddle.add(Tensor([4, 2048, 64, 128],"float32"), Tensor([4, 2048, 64, 128],"float32"), None, )
paddle.add(Tensor([4, 2048, 64, 64],"float16"), Tensor([4, 2048, 64, 64],"float16"), None, )
paddle.add(Tensor([4, 2048, 64, 64],"float32"), Tensor([4, 2048, 64, 64],"float32"), None, )
paddle.add(Tensor([4, 24, 104, 104],"float32"), Tensor([4, 24, 104, 104],"float32"), )
paddle.add(Tensor([4, 24, 112, 112],"float32"), Tensor([4, 24, 112, 112],"float32"), )
paddle.add(Tensor([4, 24, 120, 120],"float32"), Tensor([4, 24, 120, 120],"float32"), )
paddle.add(Tensor([4, 24, 128, 128],"float32"), Tensor([4, 24, 128, 128],"float32"), )
paddle.add(Tensor([4, 24, 128, 256],"float16"), Tensor([4, 24, 128, 256],"float16"), )
paddle.add(Tensor([4, 24, 128, 256],"float32"), Tensor([4, 24, 128, 256],"float32"), )
paddle.add(Tensor([4, 24, 136, 136],"float32"), Tensor([4, 24, 136, 136],"float32"), )
paddle.add(Tensor([4, 24, 144, 144],"float32"), Tensor([4, 24, 144, 144],"float32"), )
paddle.add(Tensor([4, 24, 152, 152],"float32"), Tensor([4, 24, 152, 152],"float32"), )
paddle.add(Tensor([4, 24, 160, 160],"float32"), Tensor([4, 24, 160, 160],"float32"), )
paddle.add(Tensor([4, 24, 168, 168],"float32"), Tensor([4, 24, 168, 168],"float32"), )
paddle.add(Tensor([4, 24, 176, 176],"float32"), Tensor([4, 24, 176, 176],"float32"), )
paddle.add(Tensor([4, 24, 184, 184],"float32"), Tensor([4, 24, 184, 184],"float32"), )
paddle.add(Tensor([4, 24, 192, 192],"float32"), Tensor([4, 24, 192, 192],"float32"), )
paddle.add(Tensor([4, 24, 320, 320],"float32"), Tensor([4, 24, 320, 320],"float32"), )
paddle.add(Tensor([4, 24, 56, 56],"float32"), Tensor([4, 24, 56, 56],"float32"), )
paddle.add(Tensor([4, 24, 80, 80],"float32"), Tensor([4, 24, 80, 80],"float32"), )
paddle.add(Tensor([4, 24, 88, 88],"float32"), Tensor([4, 24, 88, 88],"float32"), )
paddle.add(Tensor([4, 24, 96, 96],"float32"), Tensor([4, 24, 96, 96],"float32"), )
paddle.add(Tensor([4, 240, 22, 22],"float32"), Tensor([4, 240, 22, 22],"float32"), )
paddle.add(Tensor([4, 240, 28, 28],"float32"), Tensor([4, 240, 28, 28],"float32"), )
paddle.add(Tensor([4, 240, 30, 30],"float32"), Tensor([4, 240, 30, 30],"float32"), )
paddle.add(Tensor([4, 240, 32, 32],"float32"), Tensor([4, 240, 32, 32],"float32"), )
paddle.add(Tensor([4, 240, 34, 34],"float32"), Tensor([4, 240, 34, 34],"float32"), )
paddle.add(Tensor([4, 240, 36, 36],"float32"), Tensor([4, 240, 36, 36],"float32"), )
paddle.add(Tensor([4, 240, 38, 38],"float32"), Tensor([4, 240, 38, 38],"float32"), )
paddle.add(Tensor([4, 240, 40, 40],"float32"), Tensor([4, 240, 40, 40],"float32"), )
paddle.add(Tensor([4, 240, 42, 42],"float32"), Tensor([4, 240, 42, 42],"float32"), )
paddle.add(Tensor([4, 240, 44, 44],"float32"), Tensor([4, 240, 44, 44],"float32"), )
paddle.add(Tensor([4, 240, 48, 48],"float32"), Tensor([4, 240, 48, 48],"float32"), )
paddle.add(Tensor([4, 256, 128, 128],"float16"), Tensor([4, 256, 128, 128],"float16"), None, )
paddle.add(Tensor([4, 256, 128, 128],"float32"), Tensor([4, 256, 128, 128],"float32"), )
paddle.add(Tensor([4, 256, 128, 128],"float32"), Tensor([4, 256, 128, 128],"float32"), None, )
paddle.add(Tensor([4, 256, 128, 256],"float16"), Tensor([4, 256, 128, 256],"float16"), None, )
paddle.add(Tensor([4, 256, 128, 256],"float32"), Tensor([4, 256, 128, 256],"float32"), None, )
paddle.add(Tensor([4, 256, 16, 16],"float16"), Tensor([4, 256, 16, 16],"float16"), )
paddle.add(Tensor([4, 256, 16, 16],"float32"), Tensor([4, 256, 16, 16],"float32"), )
paddle.add(Tensor([4, 256, 16, 1],"float16"), Tensor([4, 256, 1, 16],"float16"), )
paddle.add(Tensor([4, 256, 16, 1],"float32"), Tensor([4, 256, 1, 16],"float32"), )
paddle.add(Tensor([4, 256, 32, 32],"float32"), Tensor([4, 256, 32, 32],"float32"), )
paddle.add(Tensor([4, 256, 512],"float32"), Tensor([4, 1, 512],"float32"), )
paddle.add(Tensor([4, 256, 94, 311],"float32"), Tensor([4, 256, 94, 311],"float32"), )
paddle.add(Tensor([4, 3, 1, 1000],"float32"), Tensor([1000],"float32"), )
paddle.add(Tensor([4, 3, 1, 10],"float32"), Tensor([10],"float32"), )
paddle.add(Tensor([4, 3, 1000],"float32"), Tensor([1000],"float32"), )
paddle.add(Tensor([4, 3, 1000],"float64"), Tensor([1000],"float64"), )
paddle.add(Tensor([4, 3, 10],"float32"), Tensor([10],"float32"), )
paddle.add(Tensor([4, 3, 10],"float64"), Tensor([10],"float64"), )
paddle.add(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.add(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float32"), )
paddle.add(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float64"), )
paddle.add(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"bfloat16"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"uint8"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"bfloat16"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"uint8"), )
paddle.add(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"bfloat16"), )
paddle.add(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.add(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.add(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"bfloat16"), )
paddle.add(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.add(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.add(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"bfloat16"), )
paddle.add(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.add(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.add(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 3, 2],"uint8"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([4, 3, 2],"uint8"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 32, 128, 128],"float16"), Tensor([4, 32, 128, 128],"float16"), )
paddle.add(Tensor([4, 32, 128, 128],"float32"), Tensor([4, 32, 128, 128],"float32"), )
paddle.add(Tensor([4, 32, 28, 28],"float32"), Tensor([4, 32, 28, 28],"float32"), )
paddle.add(Tensor([4, 36, 47, 156],"float32"), Tensor([4, 36, 47, 156],"float32"), )
paddle.add(Tensor([4, 384, 8, 1],"float16"), Tensor([4, 384, 1, 8],"float16"), )
paddle.add(Tensor([4, 384, 8, 1],"float32"), Tensor([4, 384, 1, 8],"float32"), )
paddle.add(Tensor([4, 384, 8, 8],"float16"), Tensor([4, 384, 8, 8],"float16"), )
paddle.add(Tensor([4, 384, 8, 8],"float32"), Tensor([4, 384, 8, 8],"float32"), )
paddle.add(Tensor([4, 3],"float32"), Tensor([3],"float32"), )
paddle.add(Tensor([4, 4, 16],"float32"), Tensor([4, 4, 1],"float32"), )
paddle.add(Tensor([4, 4, 32],"float32"), Tensor([4, 4, 1],"float32"), )
paddle.add(Tensor([4, 40, 60, 60],"float32"), Tensor([4, 40, 60, 60],"float32"), )
paddle.add(Tensor([4, 40, 64, 128],"float16"), Tensor([4, 40, 64, 128],"float16"), )
paddle.add(Tensor([4, 40, 64, 128],"float32"), Tensor([4, 40, 64, 128],"float32"), )
paddle.add(Tensor([4, 40],"float32"), Tensor([40],"float32"), )
paddle.add(Tensor([4, 48, 160, 160],"float32"), Tensor([4, 48, 160, 160],"float32"), )
paddle.add(Tensor([4, 48, 40, 40],"float32"), Tensor([4, 48, 40, 40],"float32"), )
paddle.add(Tensor([4, 48, 44, 44],"float32"), Tensor([4, 48, 44, 44],"float32"), )
paddle.add(Tensor([4, 48, 48, 48],"float32"), Tensor([4, 48, 48, 48],"float32"), )
paddle.add(Tensor([4, 48, 52, 52],"float32"), Tensor([4, 48, 52, 52],"float32"), )
paddle.add(Tensor([4, 48, 56, 56],"float32"), Tensor([4, 48, 56, 56],"float32"), )
paddle.add(Tensor([4, 48, 60, 60],"float32"), Tensor([4, 48, 60, 60],"float32"), )
paddle.add(Tensor([4, 48, 64, 64],"float32"), Tensor([4, 48, 64, 64],"float32"), )
paddle.add(Tensor([4, 48, 68, 68],"float32"), Tensor([4, 48, 68, 68],"float32"), )
paddle.add(Tensor([4, 48, 72, 72],"float32"), Tensor([4, 48, 72, 72],"float32"), )
paddle.add(Tensor([4, 48, 76, 76],"float32"), Tensor([4, 48, 76, 76],"float32"), )
paddle.add(Tensor([4, 48, 80, 80],"float32"), Tensor([4, 48, 80, 80],"float32"), )
paddle.add(Tensor([4, 48, 84, 84],"float32"), Tensor([4, 48, 84, 84],"float32"), )
paddle.add(Tensor([4, 48, 88, 88],"float32"), Tensor([4, 48, 88, 88],"float32"), )
paddle.add(Tensor([4, 48, 92, 92],"float32"), Tensor([4, 48, 92, 92],"float32"), )
paddle.add(Tensor([4, 48, 96, 96],"float32"), Tensor([4, 48, 96, 96],"float32"), )
paddle.add(Tensor([4, 480, 11, 11],"float32"), Tensor([4, 480, 11, 11],"float32"), )
paddle.add(Tensor([4, 480, 14, 14],"float32"), Tensor([4, 480, 14, 14],"float32"), )
paddle.add(Tensor([4, 480, 15, 15],"float32"), Tensor([4, 480, 15, 15],"float32"), )
paddle.add(Tensor([4, 480, 16, 16],"float32"), Tensor([4, 480, 16, 16],"float32"), )
paddle.add(Tensor([4, 480, 17, 17],"float32"), Tensor([4, 480, 17, 17],"float32"), )
paddle.add(Tensor([4, 480, 18, 18],"float32"), Tensor([4, 480, 18, 18],"float32"), )
paddle.add(Tensor([4, 480, 19, 19],"float32"), Tensor([4, 480, 19, 19],"float32"), )
paddle.add(Tensor([4, 480, 20, 20],"float32"), Tensor([4, 480, 20, 20],"float32"), )
paddle.add(Tensor([4, 480, 21, 21],"float32"), Tensor([4, 480, 21, 21],"float32"), )
paddle.add(Tensor([4, 480, 22, 22],"float32"), Tensor([4, 480, 22, 22],"float32"), )
paddle.add(Tensor([4, 480, 24, 24],"float32"), Tensor([4, 480, 24, 24],"float32"), )
paddle.add(Tensor([4, 4],"float32"), Tensor([4, 4],"complex128"), )
paddle.add(Tensor([4, 5, 2],"float32"), Tensor([4, 5, 2],"float32"), )
paddle.add(Tensor([4, 5, 2],"float64"), Tensor([4, 5, 2],"float64"), )
paddle.add(Tensor([4, 512, 128, 128],"float16"), Tensor([4, 512, 128, 128],"float16"), None, )
paddle.add(Tensor([4, 512, 128, 128],"float32"), Tensor([4, 512, 128, 128],"float32"), None, )
paddle.add(Tensor([4, 512, 64, 128],"float16"), Tensor([4, 512, 64, 128],"float16"), None, )
paddle.add(Tensor([4, 512, 64, 128],"float32"), Tensor([4, 512, 64, 128],"float32"), None, )
paddle.add(Tensor([4, 512, 64, 64],"float16"), Tensor([4, 512, 64, 64],"float16"), None, )
paddle.add(Tensor([4, 512, 64, 64],"float32"), Tensor([4, 512, 64, 64],"float32"), )
paddle.add(Tensor([4, 512, 64, 64],"float32"), Tensor([4, 512, 64, 64],"float32"), None, )
paddle.add(Tensor([4, 56, 60, 60],"float32"), Tensor([4, 56, 60, 60],"float32"), )
paddle.add(Tensor([4, 60, 112, 112],"float32"), Tensor([4, 60, 112, 112],"float32"), )
paddle.add(Tensor([4, 60, 120, 120],"float32"), Tensor([4, 60, 120, 120],"float32"), )
paddle.add(Tensor([4, 60, 128, 128],"float32"), Tensor([4, 60, 128, 128],"float32"), )
paddle.add(Tensor([4, 60, 136, 136],"float32"), Tensor([4, 60, 136, 136],"float32"), )
paddle.add(Tensor([4, 60, 144, 144],"float32"), Tensor([4, 60, 144, 144],"float32"), )
paddle.add(Tensor([4, 60, 152, 152],"float32"), Tensor([4, 60, 152, 152],"float32"), )
paddle.add(Tensor([4, 60, 160, 160],"float32"), Tensor([4, 60, 160, 160],"float32"), )
paddle.add(Tensor([4, 60, 168, 168],"float32"), Tensor([4, 60, 168, 168],"float32"), )
paddle.add(Tensor([4, 60, 176, 176],"float32"), Tensor([4, 60, 176, 176],"float32"), )
paddle.add(Tensor([4, 60, 192, 192],"float32"), Tensor([4, 60, 192, 192],"float32"), )
paddle.add(Tensor([4, 60, 88, 88],"float32"), Tensor([4, 60, 88, 88],"float32"), )
paddle.add(Tensor([4, 64, 128, 128],"float32"), Tensor([4, 64, 128, 128],"float32"), )
paddle.add(Tensor([4, 64, 14, 14],"float32"), Tensor([4, 64, 14, 14],"float32"), )
paddle.add(Tensor([4, 64, 256, 256],"float16"), Tensor([4, 64, 256, 256],"float16"), None, )
paddle.add(Tensor([4, 64, 256, 256],"float32"), Tensor([4, 64, 256, 256],"float32"), None, )
paddle.add(Tensor([4, 64, 64, 64],"float16"), Tensor([4, 64, 64, 64],"float16"), )
paddle.add(Tensor([4, 64, 64, 64],"float32"), Tensor([4, 64, 64, 64],"float32"), )
paddle.add(Tensor([4, 72, 24, 78],"float32"), Tensor([4, 72, 24, 78],"float32"), )
paddle.add(Tensor([4, 8, 32],"float32"), Tensor([4, 8, 1],"float32"), )
paddle.add(Tensor([4, 8, 480, 480],"float32"), Tensor([4, 8, 480, 480],"float32"), )
paddle.add(Tensor([4, 80, 30, 30],"float32"), Tensor([4, 80, 30, 30],"float32"), )
paddle.add(Tensor([4, 80, 32, 64],"float16"), Tensor([4, 80, 32, 64],"float16"), )
paddle.add(Tensor([4, 80, 32, 64],"float32"), Tensor([4, 80, 32, 64],"float32"), )
paddle.add(Tensor([4, 96, 14, 14],"float32"), Tensor([4, 96, 14, 14],"float32"), )
paddle.add(Tensor([4, 96, 20, 20],"float32"), Tensor([4, 96, 20, 20],"float32"), )
paddle.add(Tensor([4, 96, 22, 22],"float32"), Tensor([4, 96, 22, 22],"float32"), )
paddle.add(Tensor([4, 96, 24, 24],"float32"), Tensor([4, 96, 24, 24],"float32"), )
paddle.add(Tensor([4, 96, 26, 26],"float32"), Tensor([4, 96, 26, 26],"float32"), )
paddle.add(Tensor([4, 96, 28, 28],"float32"), Tensor([4, 96, 28, 28],"float32"), )
paddle.add(Tensor([4, 96, 30, 30],"float32"), Tensor([4, 96, 30, 30],"float32"), )
paddle.add(Tensor([4, 96, 32, 32],"float32"), Tensor([4, 96, 32, 32],"float32"), )
paddle.add(Tensor([4, 96, 34, 34],"float32"), Tensor([4, 96, 34, 34],"float32"), )
paddle.add(Tensor([4, 96, 36, 36],"float32"), Tensor([4, 96, 36, 36],"float32"), )
paddle.add(Tensor([4, 96, 38, 38],"float32"), Tensor([4, 96, 38, 38],"float32"), )
paddle.add(Tensor([4, 96, 40, 40],"float32"), Tensor([4, 96, 40, 40],"float32"), )
paddle.add(Tensor([4, 96, 42, 42],"float32"), Tensor([4, 96, 42, 42],"float32"), )
paddle.add(Tensor([4, 96, 44, 44],"float32"), Tensor([4, 96, 44, 44],"float32"), )
paddle.add(Tensor([4, 96, 46, 46],"float32"), Tensor([4, 96, 46, 46],"float32"), )
paddle.add(Tensor([4, 96, 48, 48],"float32"), Tensor([4, 96, 48, 48],"float32"), )
paddle.add(Tensor([4, 96, 80, 80],"float32"), Tensor([4, 96, 80, 80],"float32"), )
paddle.add(Tensor([40, 40],"bfloat16"), Tensor([40, 40],"bfloat16"), )
paddle.add(Tensor([40, 40],"bfloat16"), Tensor([40, 40],"bfloat16"), name=None, )
paddle.add(Tensor([40, 40],"float32"), Tensor([40, 40],"float32"), )
paddle.add(Tensor([40, 40],"float32"), Tensor([40, 40],"float32"), name=None, )
paddle.add(Tensor([40],"int64"), Tensor([300, 40],"int64"), )
paddle.add(Tensor([5, 10, 15, 20],"float32"), Tensor([5, 10, 15, 20],"float32"), )
paddle.add(Tensor([5, 10, 15, 20],"float32"), Tensor([5, 10, 15, 20],"float32"), name=None, )
paddle.add(Tensor([5, 10, 8],"float32"), Tensor([],"float32"), name="Normal_sample", )
paddle.add(Tensor([50, 3],"int64"), Tensor([50, 3],"int64"), )
paddle.add(Tensor([50, 50],"float32"), Tensor([50, 50],"float32"), )
paddle.add(Tensor([500000],"float32"), Tensor([500000],"float32"), )
paddle.add(Tensor([512, 16, 28, 28],"float16"), Tensor([512, 16, 28, 28],"float16"), )
paddle.add(Tensor([512, 16, 28, 28],"float32"), Tensor([512, 16, 28, 28],"float32"), )
paddle.add(Tensor([512, 24, 14, 14],"float16"), Tensor([512, 24, 14, 14],"float16"), )
paddle.add(Tensor([512, 24, 14, 14],"float32"), Tensor([512, 24, 14, 14],"float32"), )
paddle.add(Tensor([512, 24, 28, 28],"float16"), Tensor([512, 24, 28, 28],"float16"), )
paddle.add(Tensor([512, 24, 28, 28],"float32"), Tensor([512, 24, 28, 28],"float32"), )
paddle.add(Tensor([512, 40, 14, 14],"float16"), Tensor([512, 40, 14, 14],"float16"), )
paddle.add(Tensor([512, 40, 14, 14],"float32"), Tensor([512, 40, 14, 14],"float32"), )
paddle.add(Tensor([512, 48, 14, 14],"float16"), Tensor([512, 48, 14, 14],"float16"), )
paddle.add(Tensor([512, 48, 14, 14],"float32"), Tensor([512, 48, 14, 14],"float32"), )
paddle.add(Tensor([512, 48, 7, 7],"float16"), Tensor([512, 48, 7, 7],"float16"), )
paddle.add(Tensor([512, 48, 7, 7],"float32"), Tensor([512, 48, 7, 7],"float32"), )
paddle.add(Tensor([512, 768],"float32"), Tensor([512, 768],"float32"), )
paddle.add(Tensor([512, 96, 7, 7],"float16"), Tensor([512, 96, 7, 7],"float16"), )
paddle.add(Tensor([512, 96, 7, 7],"float32"), Tensor([512, 96, 7, 7],"float32"), )
paddle.add(Tensor([524288],"float32"), Tensor([524288],"float32"), )
paddle.add(Tensor([58, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([59, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([6, 3, 1, 32],"float32"), Tensor([32],"float32"), )
paddle.add(Tensor([6, 8, 9, 18],"int64"), Tensor([6, 8, 9, 18],"int64"), )
paddle.add(Tensor([60, 16, 56, 56],"float32"), Tensor([60, 16, 56, 56],"float32"), )
paddle.add(Tensor([60, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([60, 24, 28, 28],"float32"), Tensor([60, 24, 28, 28],"float32"), )
paddle.add(Tensor([60, 40, 14, 14],"float32"), Tensor([60, 40, 14, 14],"float32"), )
paddle.add(Tensor([60, 56, 14, 14],"float32"), Tensor([60, 56, 14, 14],"float32"), )
paddle.add(Tensor([60, 8, 112, 112],"float32"), Tensor([60, 8, 112, 112],"float32"), )
paddle.add(Tensor([60, 80, 7, 7],"float32"), Tensor([60, 80, 7, 7],"float32"), )
paddle.add(Tensor([64, 1, 512, 1, 40],"float16"), Tensor([64, 26, 512, 1, 1],"float16"), )
paddle.add(Tensor([64, 1, 512, 1, 40],"float32"), Tensor([64, 26, 512, 1, 1],"float32"), )
paddle.add(Tensor([64, 1024, 7, 7],"float16"), Tensor([64, 1024, 7, 7],"float16"), )
paddle.add(Tensor([64, 1024, 7, 7],"float32"), Tensor([64, 1024, 7, 7],"float32"), )
paddle.add(Tensor([64, 1024],"float16"), Tensor([1024],"float16"), )
paddle.add(Tensor([64, 104, 14, 14],"float16"), Tensor([64, 104, 14, 14],"float16"), )
paddle.add(Tensor([64, 104, 14, 14],"float32"), Tensor([64, 104, 14, 14],"float32"), )
paddle.add(Tensor([64, 16, 56, 56],"float32"), Tensor([64, 16, 56, 56],"float32"), )
paddle.add(Tensor([64, 160, 14, 14],"float32"), Tensor([64, 160, 14, 14],"float32"), )
paddle.add(Tensor([64, 196, 384],"float16"), Tensor([64, 196, 384],"float16"), )
paddle.add(Tensor([64, 196, 384],"float32"), Tensor([64, 196, 384],"float32"), )
paddle.add(Tensor([64, 197, 384],"float16"), Tensor([64, 197, 384],"float16"), )
paddle.add(Tensor([64, 197, 384],"float32"), Tensor([64, 197, 384],"float32"), )
paddle.add(Tensor([64, 208, 7, 7],"float16"), Tensor([64, 208, 7, 7],"float16"), )
paddle.add(Tensor([64, 208, 7, 7],"float32"), Tensor([64, 208, 7, 7],"float32"), )
paddle.add(Tensor([64, 24, 28, 28],"float32"), Tensor([64, 24, 28, 28],"float32"), )
paddle.add(Tensor([64, 256, 256],"float16"), Tensor([64, 1, 256],"float16"), )
paddle.add(Tensor([64, 256, 28, 28],"float16"), Tensor([64, 256, 28, 28],"float16"), )
paddle.add(Tensor([64, 256, 28, 28],"float32"), Tensor([64, 256, 28, 28],"float32"), )
paddle.add(Tensor([64, 256, 7, 7],"float32"), Tensor([64, 256, 7, 7],"float32"), )
paddle.add(Tensor([64, 26, 56, 56],"float16"), Tensor([64, 26, 56, 56],"float16"), )
paddle.add(Tensor([64, 26, 56, 56],"float32"), Tensor([64, 26, 56, 56],"float32"), )
paddle.add(Tensor([64, 40, 14, 14],"float32"), Tensor([64, 40, 14, 14],"float32"), )
paddle.add(Tensor([64, 512, 14, 14],"float16"), Tensor([64, 512, 14, 14],"float16"), )
paddle.add(Tensor([64, 512, 14, 14],"float32"), Tensor([64, 512, 14, 14],"float32"), )
paddle.add(Tensor([64, 52, 28, 28],"float16"), Tensor([64, 52, 28, 28],"float16"), )
paddle.add(Tensor([64, 52, 28, 28],"float32"), Tensor([64, 52, 28, 28],"float32"), )
paddle.add(Tensor([64, 56, 14, 14],"float32"), Tensor([64, 56, 14, 14],"float32"), )
paddle.add(Tensor([64, 8, 112, 112],"float32"), Tensor([64, 8, 112, 112],"float32"), )
paddle.add(Tensor([64, 80, 28, 28],"float32"), Tensor([64, 80, 28, 28],"float32"), )
paddle.add(Tensor([64, 80, 7, 7],"float32"), Tensor([64, 80, 7, 7],"float32"), )
paddle.add(Tensor([640, 112, 14, 14],"float16"), Tensor([640, 112, 14, 14],"float16"), )
paddle.add(Tensor([640, 112, 14, 14],"float32"), Tensor([640, 112, 14, 14],"float32"), )
paddle.add(Tensor([640, 16, 112, 112],"float16"), Tensor([640, 16, 112, 112],"float16"), )
paddle.add(Tensor([640, 16, 112, 112],"float32"), Tensor([640, 16, 112, 112],"float32"), )
paddle.add(Tensor([640, 160, 7, 7],"float16"), Tensor([640, 160, 7, 7],"float16"), )
paddle.add(Tensor([640, 160, 7, 7],"float32"), Tensor([640, 160, 7, 7],"float32"), )
paddle.add(Tensor([640, 24, 56, 56],"float16"), Tensor([640, 24, 56, 56],"float16"), )
paddle.add(Tensor([640, 24, 56, 56],"float32"), Tensor([640, 24, 56, 56],"float32"), )
paddle.add(Tensor([640, 40, 28, 28],"float16"), Tensor([640, 40, 28, 28],"float16"), )
paddle.add(Tensor([640, 40, 28, 28],"float32"), Tensor([640, 40, 28, 28],"float32"), )
paddle.add(Tensor([640, 80, 14, 14],"float16"), Tensor([640, 80, 14, 14],"float16"), )
paddle.add(Tensor([640, 80, 14, 14],"float32"), Tensor([640, 80, 14, 14],"float32"), )
paddle.add(Tensor([67, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([68, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([7, 2, 3],"complex128"), Tensor([2, 3],"complex128"), name="Normal_sample", )
paddle.add(Tensor([7, 2, 3],"complex64"), Tensor([2, 3],"complex64"), name="Normal_sample", )
paddle.add(Tensor([7, 2, 3],"complex64"), Tensor([],"complex64"), name="Normal_sample", )
paddle.add(Tensor([7, 2, 3],"float32"), Tensor([2, 3],"float32"), name="Normal_sample", )
paddle.add(Tensor([7, 2, 3],"float64"), Tensor([2, 3],"float64"), name="Normal_sample", )
paddle.add(Tensor([7, 5, 6],"float32"), Tensor([5, 6],"float32"), name="Uniform_sample", )
paddle.add(Tensor([7, 5, 6],"float64"), Tensor([5, 6],"float64"), name="Uniform_sample", )
paddle.add(Tensor([71, 1024],"float16"), Tensor([1024],"float16"), )
paddle.add(Tensor([74, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([76, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([77, 1024],"float16"), Tensor([1024],"float16"), )
paddle.add(Tensor([78, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([7],"complex64"), Tensor([],"complex64"), name="Normal_sample", )
paddle.add(Tensor([7],"float32"), Tensor([],"float32"), name="Normal_sample", )
paddle.add(Tensor([7],"float32"), Tensor([],"float32"), name="Uniform_sample", )
paddle.add(Tensor([8, 1, 128],"float32"), Tensor([128],"float32"), )
paddle.add(Tensor([8, 1, 512, 1, 40],"float32"), Tensor([8, 26, 512, 1, 1],"float32"), )
paddle.add(Tensor([8, 112, 22, 22],"float32"), Tensor([8, 112, 22, 22],"float32"), )
paddle.add(Tensor([8, 112, 26, 26],"float32"), Tensor([8, 112, 26, 26],"float32"), )
paddle.add(Tensor([8, 112, 32, 32],"float32"), Tensor([8, 112, 32, 32],"float32"), )
paddle.add(Tensor([8, 112, 36, 36],"float32"), Tensor([8, 112, 36, 36],"float32"), )
paddle.add(Tensor([8, 112, 38, 38],"float32"), Tensor([8, 112, 38, 38],"float32"), )
paddle.add(Tensor([8, 128, 40, 40],"float16"), Tensor([8, 128, 40, 40],"float16"), )
paddle.add(Tensor([8, 128, 40, 40],"float32"), Tensor([8, 128, 40, 40],"float32"), )
paddle.add(Tensor([8, 144, 20, 20],"float32"), Tensor([8, 144, 20, 20],"float32"), )
paddle.add(Tensor([8, 144, 22, 22],"float32"), Tensor([8, 144, 22, 22],"float32"), )
paddle.add(Tensor([8, 144, 28, 28],"float32"), Tensor([8, 144, 28, 28],"float32"), )
paddle.add(Tensor([8, 144, 30, 30],"float32"), Tensor([8, 144, 30, 30],"float32"), )
paddle.add(Tensor([8, 144, 40, 40],"float32"), Tensor([8, 144, 40, 40],"float32"), )
paddle.add(Tensor([8, 144, 44, 44],"float32"), Tensor([8, 144, 44, 44],"float32"), )
paddle.add(Tensor([8, 16, 176, 176],"float32"), Tensor([8, 16, 176, 176],"float32"), )
paddle.add(Tensor([8, 16, 208, 208],"float32"), Tensor([8, 16, 208, 208],"float32"), )
paddle.add(Tensor([8, 16, 240, 240],"float16"), Tensor([8, 16, 240, 240],"float16"), )
paddle.add(Tensor([8, 16, 240, 240],"float32"), Tensor([8, 16, 240, 240],"float32"), )
paddle.add(Tensor([8, 16, 256, 256],"float32"), Tensor([8, 16, 256, 256],"float32"), )
paddle.add(Tensor([8, 16, 288, 288],"float32"), Tensor([8, 16, 288, 288],"float32"), )
paddle.add(Tensor([8, 16, 304, 304],"float32"), Tensor([8, 16, 304, 304],"float32"), )
paddle.add(Tensor([8, 160, 11, 11],"float32"), Tensor([8, 160, 11, 11],"float32"), )
paddle.add(Tensor([8, 160, 13, 13],"float32"), Tensor([8, 160, 13, 13],"float32"), )
paddle.add(Tensor([8, 160, 16, 16],"float32"), Tensor([8, 160, 16, 16],"float32"), )
paddle.add(Tensor([8, 160, 18, 18],"float32"), Tensor([8, 160, 18, 18],"float32"), )
paddle.add(Tensor([8, 160, 19, 19],"float32"), Tensor([8, 160, 19, 19],"float32"), )
paddle.add(Tensor([8, 192, 10, 10],"float16"), Tensor([8, 192, 10, 10],"float16"), )
paddle.add(Tensor([8, 192, 10, 10],"float32"), Tensor([8, 192, 10, 10],"float32"), )
paddle.add(Tensor([8, 192, 11, 11],"float16"), Tensor([8, 192, 11, 11],"float16"), )
paddle.add(Tensor([8, 192, 11, 11],"float32"), Tensor([8, 192, 11, 11],"float32"), )
paddle.add(Tensor([8, 192, 12, 12],"float16"), Tensor([8, 192, 12, 12],"float16"), )
paddle.add(Tensor([8, 192, 12, 12],"float32"), Tensor([8, 192, 12, 12],"float32"), )
paddle.add(Tensor([8, 192, 13, 13],"float16"), Tensor([8, 192, 13, 13],"float16"), )
paddle.add(Tensor([8, 192, 13, 13],"float32"), Tensor([8, 192, 13, 13],"float32"), )
paddle.add(Tensor([8, 192, 14, 14],"float16"), Tensor([8, 192, 14, 14],"float16"), )
paddle.add(Tensor([8, 192, 14, 14],"float32"), Tensor([8, 192, 14, 14],"float32"), )
paddle.add(Tensor([8, 192, 15, 15],"float16"), Tensor([8, 192, 15, 15],"float16"), )
paddle.add(Tensor([8, 192, 15, 15],"float32"), Tensor([8, 192, 15, 15],"float32"), )
paddle.add(Tensor([8, 192, 16, 16],"float16"), Tensor([8, 192, 16, 16],"float16"), )
paddle.add(Tensor([8, 192, 16, 16],"float32"), Tensor([8, 192, 16, 16],"float32"), )
paddle.add(Tensor([8, 192, 17, 17],"float16"), Tensor([8, 192, 17, 17],"float16"), )
paddle.add(Tensor([8, 192, 17, 17],"float32"), Tensor([8, 192, 17, 17],"float32"), )
paddle.add(Tensor([8, 192, 18, 18],"float16"), Tensor([8, 192, 18, 18],"float16"), )
paddle.add(Tensor([8, 192, 18, 18],"float32"), Tensor([8, 192, 18, 18],"float32"), )
paddle.add(Tensor([8, 192, 19, 19],"float16"), Tensor([8, 192, 19, 19],"float16"), )
paddle.add(Tensor([8, 192, 19, 19],"float32"), Tensor([8, 192, 19, 19],"float32"), )
paddle.add(Tensor([8, 192, 20, 20],"float16"), Tensor([8, 192, 20, 20],"float16"), )
paddle.add(Tensor([8, 192, 20, 20],"float32"), Tensor([8, 192, 20, 20],"float32"), )
paddle.add(Tensor([8, 192, 21, 21],"float16"), Tensor([8, 192, 21, 21],"float16"), )
paddle.add(Tensor([8, 192, 21, 21],"float32"), Tensor([8, 192, 21, 21],"float32"), )
paddle.add(Tensor([8, 192, 22, 22],"float16"), Tensor([8, 192, 22, 22],"float16"), )
paddle.add(Tensor([8, 192, 22, 22],"float32"), Tensor([8, 192, 22, 22],"float32"), )
paddle.add(Tensor([8, 192, 23, 23],"float16"), Tensor([8, 192, 23, 23],"float16"), )
paddle.add(Tensor([8, 192, 23, 23],"float32"), Tensor([8, 192, 23, 23],"float32"), )
paddle.add(Tensor([8, 192, 24, 24],"float16"), Tensor([8, 192, 24, 24],"float16"), )
paddle.add(Tensor([8, 192, 24, 24],"float32"), Tensor([8, 192, 24, 24],"float32"), )
paddle.add(Tensor([8, 192, 34, 34],"float32"), Tensor([8, 192, 34, 34],"float32"), )
paddle.add(Tensor([8, 192, 36, 36],"float32"), Tensor([8, 192, 36, 36],"float32"), )
paddle.add(Tensor([8, 192, 38, 38],"float32"), Tensor([8, 192, 38, 38],"float32"), )
paddle.add(Tensor([8, 192, 42, 42],"float32"), Tensor([8, 192, 42, 42],"float32"), )
paddle.add(Tensor([8, 192, 44, 44],"float32"), Tensor([8, 192, 44, 44],"float32"), )
paddle.add(Tensor([8, 192, 46, 46],"float32"), Tensor([8, 192, 46, 46],"float32"), )
paddle.add(Tensor([8, 24, 104, 104],"float16"), Tensor([8, 24, 104, 104],"float16"), )
paddle.add(Tensor([8, 24, 104, 104],"float32"), Tensor([8, 24, 104, 104],"float32"), )
paddle.add(Tensor([8, 24, 112, 112],"float16"), Tensor([8, 24, 112, 112],"float16"), )
paddle.add(Tensor([8, 24, 112, 112],"float32"), Tensor([8, 24, 112, 112],"float32"), )
paddle.add(Tensor([8, 24, 120, 120],"float16"), Tensor([8, 24, 120, 120],"float16"), )
paddle.add(Tensor([8, 24, 120, 120],"float32"), Tensor([8, 24, 120, 120],"float32"), )
paddle.add(Tensor([8, 24, 128, 128],"float16"), Tensor([8, 24, 128, 128],"float16"), )
paddle.add(Tensor([8, 24, 128, 128],"float32"), Tensor([8, 24, 128, 128],"float32"), )
paddle.add(Tensor([8, 24, 136, 136],"float16"), Tensor([8, 24, 136, 136],"float16"), )
paddle.add(Tensor([8, 24, 136, 136],"float32"), Tensor([8, 24, 136, 136],"float32"), )
paddle.add(Tensor([8, 24, 144, 144],"float16"), Tensor([8, 24, 144, 144],"float16"), )
paddle.add(Tensor([8, 24, 144, 144],"float32"), Tensor([8, 24, 144, 144],"float32"), )
paddle.add(Tensor([8, 24, 152, 152],"float16"), Tensor([8, 24, 152, 152],"float16"), )
paddle.add(Tensor([8, 24, 152, 152],"float32"), Tensor([8, 24, 152, 152],"float32"), )
paddle.add(Tensor([8, 24, 160, 160],"float16"), Tensor([8, 24, 160, 160],"float16"), )
paddle.add(Tensor([8, 24, 160, 160],"float32"), Tensor([8, 24, 160, 160],"float32"), )
paddle.add(Tensor([8, 24, 168, 168],"float16"), Tensor([8, 24, 168, 168],"float16"), )
paddle.add(Tensor([8, 24, 168, 168],"float32"), Tensor([8, 24, 168, 168],"float32"), )
paddle.add(Tensor([8, 24, 176, 176],"float16"), Tensor([8, 24, 176, 176],"float16"), )
paddle.add(Tensor([8, 24, 176, 176],"float32"), Tensor([8, 24, 176, 176],"float32"), )
paddle.add(Tensor([8, 24, 184, 184],"float16"), Tensor([8, 24, 184, 184],"float16"), )
paddle.add(Tensor([8, 24, 184, 184],"float32"), Tensor([8, 24, 184, 184],"float32"), )
paddle.add(Tensor([8, 24, 192, 192],"float16"), Tensor([8, 24, 192, 192],"float16"), )
paddle.add(Tensor([8, 24, 192, 192],"float32"), Tensor([8, 24, 192, 192],"float32"), )
paddle.add(Tensor([8, 24, 80, 80],"float16"), Tensor([8, 24, 80, 80],"float16"), )
paddle.add(Tensor([8, 24, 80, 80],"float32"), Tensor([8, 24, 80, 80],"float32"), )
paddle.add(Tensor([8, 24, 88, 88],"float16"), Tensor([8, 24, 88, 88],"float16"), )
paddle.add(Tensor([8, 24, 88, 88],"float32"), Tensor([8, 24, 88, 88],"float32"), )
paddle.add(Tensor([8, 24, 96, 96],"float16"), Tensor([8, 24, 96, 96],"float16"), )
paddle.add(Tensor([8, 24, 96, 96],"float32"), Tensor([8, 24, 96, 96],"float32"), )
paddle.add(Tensor([8, 256, 20, 20],"float16"), Tensor([8, 256, 20, 20],"float16"), )
paddle.add(Tensor([8, 256, 20, 20],"float32"), Tensor([8, 256, 20, 20],"float32"), )
paddle.add(Tensor([8, 256, 512],"float32"), Tensor([8, 1, 512],"float32"), )
paddle.add(Tensor([8, 288, 10, 10],"float32"), Tensor([8, 288, 10, 10],"float32"), )
paddle.add(Tensor([8, 288, 11, 11],"float32"), Tensor([8, 288, 11, 11],"float32"), )
paddle.add(Tensor([8, 288, 14, 14],"float32"), Tensor([8, 288, 14, 14],"float32"), )
paddle.add(Tensor([8, 288, 15, 15],"float32"), Tensor([8, 288, 15, 15],"float32"), )
paddle.add(Tensor([8, 288, 20, 20],"float32"), Tensor([8, 288, 20, 20],"float32"), )
paddle.add(Tensor([8, 288, 22, 22],"float32"), Tensor([8, 288, 22, 22],"float32"), )
paddle.add(Tensor([8, 32, 160, 160],"float16"), Tensor([8, 32, 160, 160],"float16"), )
paddle.add(Tensor([8, 32, 160, 160],"float32"), Tensor([8, 32, 160, 160],"float32"), )
paddle.add(Tensor([8, 32],"float32"), Tensor([32],"float32"), )
paddle.add(Tensor([8, 36, 112, 112],"float32"), Tensor([8, 36, 112, 112],"float32"), )
paddle.add(Tensor([8, 36, 120, 120],"float32"), Tensor([8, 36, 120, 120],"float32"), )
paddle.add(Tensor([8, 36, 160, 160],"float32"), Tensor([8, 36, 160, 160],"float32"), )
paddle.add(Tensor([8, 36, 176, 176],"float32"), Tensor([8, 36, 176, 176],"float32"), )
paddle.add(Tensor([8, 36, 80, 80],"float32"), Tensor([8, 36, 80, 80],"float32"), )
paddle.add(Tensor([8, 36, 88, 88],"float32"), Tensor([8, 36, 88, 88],"float32"), )
paddle.add(Tensor([8, 384, 11, 11],"float32"), Tensor([8, 384, 11, 11],"float32"), )
paddle.add(Tensor([8, 384, 17, 17],"float32"), Tensor([8, 384, 17, 17],"float32"), )
paddle.add(Tensor([8, 384, 18, 18],"float32"), Tensor([8, 384, 18, 18],"float32"), )
paddle.add(Tensor([8, 384, 19, 19],"float32"), Tensor([8, 384, 19, 19],"float32"), )
paddle.add(Tensor([8, 384, 21, 21],"float32"), Tensor([8, 384, 21, 21],"float32"), )
paddle.add(Tensor([8, 384, 22, 22],"float32"), Tensor([8, 384, 22, 22],"float32"), )
paddle.add(Tensor([8, 384, 23, 23],"float32"), Tensor([8, 384, 23, 23],"float32"), )
paddle.add(Tensor([8, 4, 100],"float64"), Tensor([8, 4, 1],"float64"), )
paddle.add(Tensor([8, 40, 44, 44],"float32"), Tensor([8, 40, 44, 44],"float32"), )
paddle.add(Tensor([8, 40, 52, 52],"float32"), Tensor([8, 40, 52, 52],"float32"), )
paddle.add(Tensor([8, 40, 60, 60],"float16"), Tensor([8, 40, 60, 60],"float16"), )
paddle.add(Tensor([8, 40, 60, 60],"float32"), Tensor([8, 40, 60, 60],"float32"), )
paddle.add(Tensor([8, 40, 64, 64],"float32"), Tensor([8, 40, 64, 64],"float32"), )
paddle.add(Tensor([8, 40, 72, 72],"float32"), Tensor([8, 40, 72, 72],"float32"), )
paddle.add(Tensor([8, 40, 76, 76],"float32"), Tensor([8, 40, 76, 76],"float32"), )
paddle.add(Tensor([8, 48, 136, 136],"float32"), Tensor([8, 48, 136, 136],"float32"), )
paddle.add(Tensor([8, 48, 144, 144],"float32"), Tensor([8, 48, 144, 144],"float32"), )
paddle.add(Tensor([8, 48, 152, 152],"float32"), Tensor([8, 48, 152, 152],"float32"), )
paddle.add(Tensor([8, 48, 168, 168],"float32"), Tensor([8, 48, 168, 168],"float32"), )
paddle.add(Tensor([8, 48, 176, 176],"float32"), Tensor([8, 48, 176, 176],"float32"), )
paddle.add(Tensor([8, 48, 184, 184],"float32"), Tensor([8, 48, 184, 184],"float32"), )
paddle.add(Tensor([8, 48, 40, 40],"float16"), Tensor([8, 48, 40, 40],"float16"), )
paddle.add(Tensor([8, 48, 40, 40],"float32"), Tensor([8, 48, 40, 40],"float32"), )
paddle.add(Tensor([8, 48, 44, 44],"float16"), Tensor([8, 48, 44, 44],"float16"), )
paddle.add(Tensor([8, 48, 44, 44],"float32"), Tensor([8, 48, 44, 44],"float32"), )
paddle.add(Tensor([8, 48, 48, 48],"float16"), Tensor([8, 48, 48, 48],"float16"), )
paddle.add(Tensor([8, 48, 48, 48],"float32"), Tensor([8, 48, 48, 48],"float32"), )
paddle.add(Tensor([8, 48, 52, 52],"float16"), Tensor([8, 48, 52, 52],"float16"), )
paddle.add(Tensor([8, 48, 52, 52],"float32"), Tensor([8, 48, 52, 52],"float32"), )
paddle.add(Tensor([8, 48, 56, 56],"float16"), Tensor([8, 48, 56, 56],"float16"), )
paddle.add(Tensor([8, 48, 56, 56],"float32"), Tensor([8, 48, 56, 56],"float32"), )
paddle.add(Tensor([8, 48, 60, 60],"float16"), Tensor([8, 48, 60, 60],"float16"), )
paddle.add(Tensor([8, 48, 60, 60],"float32"), Tensor([8, 48, 60, 60],"float32"), )
paddle.add(Tensor([8, 48, 64, 64],"float16"), Tensor([8, 48, 64, 64],"float16"), )
paddle.add(Tensor([8, 48, 64, 64],"float32"), Tensor([8, 48, 64, 64],"float32"), )
paddle.add(Tensor([8, 48, 68, 68],"float16"), Tensor([8, 48, 68, 68],"float16"), )
paddle.add(Tensor([8, 48, 68, 68],"float32"), Tensor([8, 48, 68, 68],"float32"), )
paddle.add(Tensor([8, 48, 72, 72],"float16"), Tensor([8, 48, 72, 72],"float16"), )
paddle.add(Tensor([8, 48, 72, 72],"float32"), Tensor([8, 48, 72, 72],"float32"), )
paddle.add(Tensor([8, 48, 76, 76],"float16"), Tensor([8, 48, 76, 76],"float16"), )
paddle.add(Tensor([8, 48, 76, 76],"float32"), Tensor([8, 48, 76, 76],"float32"), )
paddle.add(Tensor([8, 48, 80, 80],"float16"), Tensor([8, 48, 80, 80],"float16"), )
paddle.add(Tensor([8, 48, 80, 80],"float32"), Tensor([8, 48, 80, 80],"float32"), )
paddle.add(Tensor([8, 48, 84, 84],"float16"), Tensor([8, 48, 84, 84],"float16"), )
paddle.add(Tensor([8, 48, 84, 84],"float32"), Tensor([8, 48, 84, 84],"float32"), )
paddle.add(Tensor([8, 48, 88, 88],"float16"), Tensor([8, 48, 88, 88],"float16"), )
paddle.add(Tensor([8, 48, 88, 88],"float32"), Tensor([8, 48, 88, 88],"float32"), )
paddle.add(Tensor([8, 48, 92, 92],"float16"), Tensor([8, 48, 92, 92],"float16"), )
paddle.add(Tensor([8, 48, 92, 92],"float32"), Tensor([8, 48, 92, 92],"float32"), )
paddle.add(Tensor([8, 48, 96, 96],"float16"), Tensor([8, 48, 96, 96],"float16"), )
paddle.add(Tensor([8, 48, 96, 96],"float32"), Tensor([8, 48, 96, 96],"float32"), )
paddle.add(Tensor([8, 56, 60, 60],"float16"), Tensor([8, 56, 60, 60],"float16"), )
paddle.add(Tensor([8, 56, 60, 60],"float32"), Tensor([8, 56, 60, 60],"float32"), )
paddle.add(Tensor([8, 64, 80, 80],"float16"), Tensor([8, 64, 80, 80],"float16"), )
paddle.add(Tensor([8, 64, 80, 80],"float32"), Tensor([8, 64, 80, 80],"float32"), )
paddle.add(Tensor([8, 72, 40, 40],"float32"), Tensor([8, 72, 40, 40],"float32"), )
paddle.add(Tensor([8, 72, 44, 44],"float32"), Tensor([8, 72, 44, 44],"float32"), )
paddle.add(Tensor([8, 72, 56, 56],"float32"), Tensor([8, 72, 56, 56],"float32"), )
paddle.add(Tensor([8, 72, 60, 60],"float32"), Tensor([8, 72, 60, 60],"float32"), )
paddle.add(Tensor([8, 72, 80, 80],"float32"), Tensor([8, 72, 80, 80],"float32"), )
paddle.add(Tensor([8, 72, 88, 88],"float32"), Tensor([8, 72, 88, 88],"float32"), )
paddle.add(Tensor([8, 8, 480, 480],"float16"), Tensor([8, 8, 480, 480],"float16"), )
paddle.add(Tensor([8, 8, 480, 480],"float32"), Tensor([8, 8, 480, 480],"float32"), )
paddle.add(Tensor([8, 80, 22, 22],"float32"), Tensor([8, 80, 22, 22],"float32"), )
paddle.add(Tensor([8, 80, 26, 26],"float32"), Tensor([8, 80, 26, 26],"float32"), )
paddle.add(Tensor([8, 80, 30, 30],"float16"), Tensor([8, 80, 30, 30],"float16"), )
paddle.add(Tensor([8, 80, 30, 30],"float32"), Tensor([8, 80, 30, 30],"float32"), )
paddle.add(Tensor([8, 80, 32, 32],"float32"), Tensor([8, 80, 32, 32],"float32"), )
paddle.add(Tensor([8, 80, 36, 36],"float32"), Tensor([8, 80, 36, 36],"float32"), )
paddle.add(Tensor([8, 80, 38, 38],"float32"), Tensor([8, 80, 38, 38],"float32"), )
paddle.add(Tensor([8, 8],"float32"), Tensor([8, 8],"float32"), )
paddle.add(Tensor([8, 96, 20, 20],"float16"), Tensor([8, 96, 20, 20],"float16"), )
paddle.add(Tensor([8, 96, 20, 20],"float32"), Tensor([8, 96, 20, 20],"float32"), )
paddle.add(Tensor([8, 96, 22, 22],"float16"), Tensor([8, 96, 22, 22],"float16"), )
paddle.add(Tensor([8, 96, 22, 22],"float32"), Tensor([8, 96, 22, 22],"float32"), )
paddle.add(Tensor([8, 96, 24, 24],"float16"), Tensor([8, 96, 24, 24],"float16"), )
paddle.add(Tensor([8, 96, 24, 24],"float32"), Tensor([8, 96, 24, 24],"float32"), )
paddle.add(Tensor([8, 96, 26, 26],"float16"), Tensor([8, 96, 26, 26],"float16"), )
paddle.add(Tensor([8, 96, 26, 26],"float32"), Tensor([8, 96, 26, 26],"float32"), )
paddle.add(Tensor([8, 96, 28, 28],"float16"), Tensor([8, 96, 28, 28],"float16"), )
paddle.add(Tensor([8, 96, 28, 28],"float32"), Tensor([8, 96, 28, 28],"float32"), )
paddle.add(Tensor([8, 96, 30, 30],"float16"), Tensor([8, 96, 30, 30],"float16"), )
paddle.add(Tensor([8, 96, 30, 30],"float32"), Tensor([8, 96, 30, 30],"float32"), )
paddle.add(Tensor([8, 96, 32, 32],"float16"), Tensor([8, 96, 32, 32],"float16"), )
paddle.add(Tensor([8, 96, 32, 32],"float32"), Tensor([8, 96, 32, 32],"float32"), )
paddle.add(Tensor([8, 96, 34, 34],"float16"), Tensor([8, 96, 34, 34],"float16"), )
paddle.add(Tensor([8, 96, 34, 34],"float32"), Tensor([8, 96, 34, 34],"float32"), )
paddle.add(Tensor([8, 96, 36, 36],"float16"), Tensor([8, 96, 36, 36],"float16"), )
paddle.add(Tensor([8, 96, 36, 36],"float32"), Tensor([8, 96, 36, 36],"float32"), )
paddle.add(Tensor([8, 96, 38, 38],"float16"), Tensor([8, 96, 38, 38],"float16"), )
paddle.add(Tensor([8, 96, 38, 38],"float32"), Tensor([8, 96, 38, 38],"float32"), )
paddle.add(Tensor([8, 96, 40, 40],"float16"), Tensor([8, 96, 40, 40],"float16"), )
paddle.add(Tensor([8, 96, 40, 40],"float32"), Tensor([8, 96, 40, 40],"float32"), )
paddle.add(Tensor([8, 96, 42, 42],"float16"), Tensor([8, 96, 42, 42],"float16"), )
paddle.add(Tensor([8, 96, 42, 42],"float32"), Tensor([8, 96, 42, 42],"float32"), )
paddle.add(Tensor([8, 96, 44, 44],"float16"), Tensor([8, 96, 44, 44],"float16"), )
paddle.add(Tensor([8, 96, 44, 44],"float32"), Tensor([8, 96, 44, 44],"float32"), )
paddle.add(Tensor([8, 96, 46, 46],"float16"), Tensor([8, 96, 46, 46],"float16"), )
paddle.add(Tensor([8, 96, 46, 46],"float32"), Tensor([8, 96, 46, 46],"float32"), )
paddle.add(Tensor([8, 96, 48, 48],"float16"), Tensor([8, 96, 48, 48],"float16"), )
paddle.add(Tensor([8, 96, 48, 48],"float32"), Tensor([8, 96, 48, 48],"float32"), )
paddle.add(Tensor([8, 96, 68, 68],"float32"), Tensor([8, 96, 68, 68],"float32"), )
paddle.add(Tensor([8, 96, 72, 72],"float32"), Tensor([8, 96, 72, 72],"float32"), )
paddle.add(Tensor([8, 96, 76, 76],"float32"), Tensor([8, 96, 76, 76],"float32"), )
paddle.add(Tensor([8, 96, 84, 84],"float32"), Tensor([8, 96, 84, 84],"float32"), )
paddle.add(Tensor([8, 96, 88, 88],"float32"), Tensor([8, 96, 88, 88],"float32"), )
paddle.add(Tensor([8, 96, 92, 92],"float32"), Tensor([8, 96, 92, 92],"float32"), )
paddle.add(Tensor([81, 1024],"float16"), Tensor([1024],"float16"), )
paddle.add(Tensor([87, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([88, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([89, 1024],"float16"), Tensor([1024],"float16"), )
paddle.add(Tensor([90, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([91, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([92, 1024],"float16"), Tensor([1024],"float16"), )
paddle.add(Tensor([97, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([98, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.add(Tensor([],"float32"), Tensor([],"float32"), )
paddle.add(Tensor([],"float32"), Tensor([],"float32"), name="Cauchy_entropy", )
paddle.add(Tensor([],"float32"), Tensor([],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([],"float32"), Tensor([],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([],"float32"), Tensor([],"float32"), name="Normal_entropy", )
paddle.add(Tensor([],"float32"), Tensor([],"float32"), name="Normal_kl_divergence", )
paddle.add(Tensor([],"float32"), Tensor([],"float32"), name="Normal_sample", )
paddle.add(Tensor([],"float32"), Tensor([],"float32"), name="Uniform_sample", )
paddle.add(Tensor([],"float32"), Tensor([],"float32"), name=None, )
paddle.add(Tensor([],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([],"float64"), Tensor([],"float64"), name="Cauchy_entropy", )
paddle.add(Tensor([],"int64"), Tensor([],"int64"), )
paddle.add(x=Tensor([1, 1024, 14, 14],"float32"), y=Tensor([1, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([1, 1024, 36, 50],"float32"), y=Tensor([1, 1024, 36, 50],"float32"), )
paddle.add(x=Tensor([1, 1024, 40, 54],"float32"), y=Tensor([1, 1024, 40, 54],"float32"), )
paddle.add(x=Tensor([1, 1024, 40, 60],"float32"), y=Tensor([1, 1024, 40, 60],"float32"), )
paddle.add(x=Tensor([1, 1024, 40, 62],"float32"), y=Tensor([1, 1024, 40, 62],"float32"), )
paddle.add(x=Tensor([1, 1024, 42, 63],"float32"), y=Tensor([1, 1024, 42, 63],"float32"), )
paddle.add(x=Tensor([1, 1024, 42, 64],"float32"), y=Tensor([1, 1024, 42, 64],"float32"), )
paddle.add(x=Tensor([1, 1024, 42, 66],"float32"), y=Tensor([1, 1024, 42, 66],"float32"), )
paddle.add(x=Tensor([1, 1024, 44, 59],"float32"), y=Tensor([1, 1024, 44, 59],"float32"), )
paddle.add(x=Tensor([1, 1024, 44, 60],"float32"), y=Tensor([1, 1024, 44, 60],"float32"), )
paddle.add(x=Tensor([1, 1024, 44, 66],"float32"), y=Tensor([1, 1024, 44, 66],"float32"), )
paddle.add(x=Tensor([1, 1024, 44, 69],"float32"), y=Tensor([1, 1024, 44, 69],"float32"), )
paddle.add(x=Tensor([1, 1024, 44, 70],"float32"), y=Tensor([1, 1024, 44, 70],"float32"), )
paddle.add(x=Tensor([1, 1024, 45, 36],"float32"), y=Tensor([1, 1024, 45, 36],"float32"), )
paddle.add(x=Tensor([1, 1024, 46, 62],"float32"), y=Tensor([1, 1024, 46, 62],"float32"), )
paddle.add(x=Tensor([1, 1024, 46, 69],"float32"), y=Tensor([1, 1024, 46, 69],"float32"), )
paddle.add(x=Tensor([1, 1024, 46, 70],"float32"), y=Tensor([1, 1024, 46, 70],"float32"), )
paddle.add(x=Tensor([1, 1024, 48, 72],"float32"), y=Tensor([1, 1024, 48, 72],"float32"), )
paddle.add(x=Tensor([1, 1024, 50, 68],"float32"), y=Tensor([1, 1024, 50, 68],"float32"), )
paddle.add(x=Tensor([1, 1024, 50, 75],"float32"), y=Tensor([1, 1024, 50, 75],"float32"), )
paddle.add(x=Tensor([1, 1024, 50, 76],"float32"), y=Tensor([1, 1024, 50, 76],"float32"), )
paddle.add(x=Tensor([1, 1024, 50, 78],"float32"), y=Tensor([1, 1024, 50, 78],"float32"), )
paddle.add(x=Tensor([1, 1024, 62, 40],"float32"), y=Tensor([1, 1024, 62, 40],"float32"), )
paddle.add(x=Tensor([1, 1024, 64, 42],"float32"), y=Tensor([1, 1024, 64, 42],"float32"), )
paddle.add(x=Tensor([1, 1024, 67, 44],"float32"), y=Tensor([1, 1024, 67, 44],"float32"), )
paddle.add(x=Tensor([1, 1024, 68, 44],"float32"), y=Tensor([1, 1024, 68, 44],"float32"), )
paddle.add(x=Tensor([1, 1024, 70, 46],"float32"), y=Tensor([1, 1024, 70, 46],"float32"), )
paddle.add(x=Tensor([1, 1024, 74, 48],"float32"), y=Tensor([1, 1024, 74, 48],"float32"), )
paddle.add(x=Tensor([1, 1024, 76, 50],"float32"), y=Tensor([1, 1024, 76, 50],"float32"), )
paddle.add(x=Tensor([1, 2048, 18, 25],"float32"), y=Tensor([1, 2048, 18, 25],"float32"), )
paddle.add(x=Tensor([1, 2048, 20, 27],"float32"), y=Tensor([1, 2048, 20, 27],"float32"), )
paddle.add(x=Tensor([1, 2048, 20, 30],"float32"), y=Tensor([1, 2048, 20, 30],"float32"), )
paddle.add(x=Tensor([1, 2048, 20, 31],"float32"), y=Tensor([1, 2048, 20, 31],"float32"), )
paddle.add(x=Tensor([1, 2048, 21, 32],"float32"), y=Tensor([1, 2048, 21, 32],"float32"), )
paddle.add(x=Tensor([1, 2048, 21, 33],"float32"), y=Tensor([1, 2048, 21, 33],"float32"), )
paddle.add(x=Tensor([1, 2048, 22, 30],"float32"), y=Tensor([1, 2048, 22, 30],"float32"), )
paddle.add(x=Tensor([1, 2048, 22, 33],"float32"), y=Tensor([1, 2048, 22, 33],"float32"), )
paddle.add(x=Tensor([1, 2048, 22, 35],"float32"), y=Tensor([1, 2048, 22, 35],"float32"), )
paddle.add(x=Tensor([1, 2048, 23, 18],"float32"), y=Tensor([1, 2048, 23, 18],"float32"), )
paddle.add(x=Tensor([1, 2048, 23, 31],"float32"), y=Tensor([1, 2048, 23, 31],"float32"), )
paddle.add(x=Tensor([1, 2048, 23, 35],"float32"), y=Tensor([1, 2048, 23, 35],"float32"), )
paddle.add(x=Tensor([1, 2048, 24, 36],"float32"), y=Tensor([1, 2048, 24, 36],"float32"), )
paddle.add(x=Tensor([1, 2048, 25, 34],"float32"), y=Tensor([1, 2048, 25, 34],"float32"), )
paddle.add(x=Tensor([1, 2048, 25, 38],"float32"), y=Tensor([1, 2048, 25, 38],"float32"), )
paddle.add(x=Tensor([1, 2048, 25, 39],"float32"), y=Tensor([1, 2048, 25, 39],"float32"), )
paddle.add(x=Tensor([1, 2048, 31, 20],"float32"), y=Tensor([1, 2048, 31, 20],"float32"), )
paddle.add(x=Tensor([1, 2048, 32, 21],"float32"), y=Tensor([1, 2048, 32, 21],"float32"), )
paddle.add(x=Tensor([1, 2048, 34, 22],"float32"), y=Tensor([1, 2048, 34, 22],"float32"), )
paddle.add(x=Tensor([1, 2048, 35, 23],"float32"), y=Tensor([1, 2048, 35, 23],"float32"), )
paddle.add(x=Tensor([1, 2048, 37, 24],"float32"), y=Tensor([1, 2048, 37, 24],"float32"), )
paddle.add(x=Tensor([1, 2048, 38, 25],"float32"), y=Tensor([1, 2048, 38, 25],"float32"), )
paddle.add(x=Tensor([1, 2048, 7, 7],"float32"), y=Tensor([1, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([1, 256, 144, 200],"float32"), y=Tensor([1, 256, 144, 200],"float32"), )
paddle.add(x=Tensor([1, 256, 160, 216],"float32"), y=Tensor([1, 256, 160, 216],"float32"), )
paddle.add(x=Tensor([1, 256, 160, 240],"float32"), y=Tensor([1, 256, 160, 240],"float32"), )
paddle.add(x=Tensor([1, 256, 160, 248],"float32"), y=Tensor([1, 256, 160, 248],"float32"), )
paddle.add(x=Tensor([1, 256, 168, 252],"float32"), y=Tensor([1, 256, 168, 252],"float32"), )
paddle.add(x=Tensor([1, 256, 168, 256],"float32"), y=Tensor([1, 256, 168, 256],"float32"), )
paddle.add(x=Tensor([1, 256, 168, 264],"float32"), y=Tensor([1, 256, 168, 264],"float32"), )
paddle.add(x=Tensor([1, 256, 176, 235],"float32"), y=Tensor([1, 256, 176, 235],"float32"), )
paddle.add(x=Tensor([1, 256, 176, 240],"float32"), y=Tensor([1, 256, 176, 240],"float32"), )
paddle.add(x=Tensor([1, 256, 176, 264],"float32"), y=Tensor([1, 256, 176, 264],"float32"), )
paddle.add(x=Tensor([1, 256, 176, 273],"float32"), y=Tensor([1, 256, 176, 273],"float32"), )
paddle.add(x=Tensor([1, 256, 176, 280],"float32"), y=Tensor([1, 256, 176, 280],"float32"), )
paddle.add(x=Tensor([1, 256, 177, 144],"float32"), y=Tensor([1, 256, 177, 144],"float32"), )
paddle.add(x=Tensor([1, 256, 184, 248],"float32"), y=Tensor([1, 256, 184, 248],"float32"), )
paddle.add(x=Tensor([1, 256, 184, 276],"float32"), y=Tensor([1, 256, 184, 276],"float32"), )
paddle.add(x=Tensor([1, 256, 184, 280],"float32"), y=Tensor([1, 256, 184, 280],"float32"), )
paddle.add(x=Tensor([1, 256, 192, 288],"float32"), y=Tensor([1, 256, 192, 288],"float32"), )
paddle.add(x=Tensor([1, 256, 200, 272],"float32"), y=Tensor([1, 256, 200, 272],"float32"), )
paddle.add(x=Tensor([1, 256, 200, 300],"float32"), y=Tensor([1, 256, 200, 300],"float32"), )
paddle.add(x=Tensor([1, 256, 200, 304],"float32"), y=Tensor([1, 256, 200, 304],"float32"), )
paddle.add(x=Tensor([1, 256, 200, 312],"float32"), y=Tensor([1, 256, 200, 312],"float32"), )
paddle.add(x=Tensor([1, 256, 248, 160],"float32"), y=Tensor([1, 256, 248, 160],"float32"), )
paddle.add(x=Tensor([1, 256, 256, 168],"float32"), y=Tensor([1, 256, 256, 168],"float32"), )
paddle.add(x=Tensor([1, 256, 265, 176],"float32"), y=Tensor([1, 256, 265, 176],"float32"), )
paddle.add(x=Tensor([1, 256, 272, 176],"float32"), y=Tensor([1, 256, 272, 176],"float32"), )
paddle.add(x=Tensor([1, 256, 277, 184],"float32"), y=Tensor([1, 256, 277, 184],"float32"), )
paddle.add(x=Tensor([1, 256, 280, 184],"float32"), y=Tensor([1, 256, 280, 184],"float32"), )
paddle.add(x=Tensor([1, 256, 296, 192],"float32"), y=Tensor([1, 256, 296, 192],"float32"), )
paddle.add(x=Tensor([1, 256, 304, 200],"float32"), y=Tensor([1, 256, 304, 200],"float32"), )
paddle.add(x=Tensor([1, 256, 56, 56],"float32"), y=Tensor([1, 256, 56, 56],"float32"), )
paddle.add(x=Tensor([1, 512, 100, 136],"float32"), y=Tensor([1, 512, 100, 136],"float32"), )
paddle.add(x=Tensor([1, 512, 100, 150],"float32"), y=Tensor([1, 512, 100, 150],"float32"), )
paddle.add(x=Tensor([1, 512, 100, 152],"float32"), y=Tensor([1, 512, 100, 152],"float32"), )
paddle.add(x=Tensor([1, 512, 100, 156],"float32"), y=Tensor([1, 512, 100, 156],"float32"), )
paddle.add(x=Tensor([1, 512, 124, 80],"float32"), y=Tensor([1, 512, 124, 80],"float32"), )
paddle.add(x=Tensor([1, 512, 128, 84],"float32"), y=Tensor([1, 512, 128, 84],"float32"), )
paddle.add(x=Tensor([1, 512, 133, 88],"float32"), y=Tensor([1, 512, 133, 88],"float32"), )
paddle.add(x=Tensor([1, 512, 136, 88],"float32"), y=Tensor([1, 512, 136, 88],"float32"), )
paddle.add(x=Tensor([1, 512, 139, 92],"float32"), y=Tensor([1, 512, 139, 92],"float32"), )
paddle.add(x=Tensor([1, 512, 140, 92],"float32"), y=Tensor([1, 512, 140, 92],"float32"), )
paddle.add(x=Tensor([1, 512, 148, 96],"float32"), y=Tensor([1, 512, 148, 96],"float32"), )
paddle.add(x=Tensor([1, 512, 152, 100],"float32"), y=Tensor([1, 512, 152, 100],"float32"), )
paddle.add(x=Tensor([1, 512, 28, 28],"float32"), y=Tensor([1, 512, 28, 28],"float32"), )
paddle.add(x=Tensor([1, 512, 72, 100],"float32"), y=Tensor([1, 512, 72, 100],"float32"), )
paddle.add(x=Tensor([1, 512, 80, 108],"float32"), y=Tensor([1, 512, 80, 108],"float32"), )
paddle.add(x=Tensor([1, 512, 80, 120],"float32"), y=Tensor([1, 512, 80, 120],"float32"), )
paddle.add(x=Tensor([1, 512, 80, 124],"float32"), y=Tensor([1, 512, 80, 124],"float32"), )
paddle.add(x=Tensor([1, 512, 84, 126],"float32"), y=Tensor([1, 512, 84, 126],"float32"), )
paddle.add(x=Tensor([1, 512, 84, 128],"float32"), y=Tensor([1, 512, 84, 128],"float32"), )
paddle.add(x=Tensor([1, 512, 84, 132],"float32"), y=Tensor([1, 512, 84, 132],"float32"), )
paddle.add(x=Tensor([1, 512, 88, 118],"float32"), y=Tensor([1, 512, 88, 118],"float32"), )
paddle.add(x=Tensor([1, 512, 88, 120],"float32"), y=Tensor([1, 512, 88, 120],"float32"), )
paddle.add(x=Tensor([1, 512, 88, 132],"float32"), y=Tensor([1, 512, 88, 132],"float32"), )
paddle.add(x=Tensor([1, 512, 88, 137],"float32"), y=Tensor([1, 512, 88, 137],"float32"), )
paddle.add(x=Tensor([1, 512, 88, 140],"float32"), y=Tensor([1, 512, 88, 140],"float32"), )
paddle.add(x=Tensor([1, 512, 89, 72],"float32"), y=Tensor([1, 512, 89, 72],"float32"), )
paddle.add(x=Tensor([1, 512, 92, 124],"float32"), y=Tensor([1, 512, 92, 124],"float32"), )
paddle.add(x=Tensor([1, 512, 92, 138],"float32"), y=Tensor([1, 512, 92, 138],"float32"), )
paddle.add(x=Tensor([1, 512, 92, 140],"float32"), y=Tensor([1, 512, 92, 140],"float32"), )
paddle.add(x=Tensor([1, 512, 96, 144],"float32"), y=Tensor([1, 512, 96, 144],"float32"), )
paddle.add(x=Tensor([1024, 2048, 7, 7],"float32"), y=Tensor([1024, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([12, 1024, 19, 34],"float16"), y=Tensor([12, 1024, 19, 34],"float16"), )
paddle.add(x=Tensor([12, 1024, 19, 34],"float32"), y=Tensor([12, 1024, 19, 34],"float32"), )
paddle.add(x=Tensor([12, 1024, 20, 20],"float16"), y=Tensor([12, 1024, 20, 20],"float16"), )
paddle.add(x=Tensor([12, 1024, 20, 20],"float32"), y=Tensor([12, 1024, 20, 20],"float32"), )
paddle.add(x=Tensor([12, 128, 152, 272],"float16"), y=Tensor([12, 128, 152, 272],"float16"), )
paddle.add(x=Tensor([12, 128, 152, 272],"float32"), y=Tensor([12, 128, 152, 272],"float32"), )
paddle.add(x=Tensor([12, 2048, 10, 10],"float16"), y=Tensor([12, 2048, 10, 10],"float16"), )
paddle.add(x=Tensor([12, 2048, 10, 10],"float32"), y=Tensor([12, 2048, 10, 10],"float32"), )
paddle.add(x=Tensor([12, 256, 76, 136],"float16"), y=Tensor([12, 256, 76, 136],"float16"), )
paddle.add(x=Tensor([12, 256, 76, 136],"float32"), y=Tensor([12, 256, 76, 136],"float32"), )
paddle.add(x=Tensor([12, 256, 80, 80],"float16"), y=Tensor([12, 256, 80, 80],"float16"), )
paddle.add(x=Tensor([12, 256, 80, 80],"float32"), y=Tensor([12, 256, 80, 80],"float32"), )
paddle.add(x=Tensor([12, 512, 38, 68],"float16"), y=Tensor([12, 512, 38, 68],"float16"), )
paddle.add(x=Tensor([12, 512, 38, 68],"float32"), y=Tensor([12, 512, 38, 68],"float32"), )
paddle.add(x=Tensor([12, 512, 40, 40],"float16"), y=Tensor([12, 512, 40, 40],"float16"), )
paddle.add(x=Tensor([12, 512, 40, 40],"float32"), y=Tensor([12, 512, 40, 40],"float32"), )
paddle.add(x=Tensor([12, 64, 304, 544],"float16"), y=Tensor([12, 64, 304, 544],"float16"), )
paddle.add(x=Tensor([12, 64, 304, 544],"float32"), y=Tensor([12, 64, 304, 544],"float32"), )
paddle.add(x=Tensor([128, 1024, 14, 14],"float16"), y=Tensor([128, 1024, 14, 14],"float16"), )
paddle.add(x=Tensor([128, 1024, 14, 14],"float32"), y=Tensor([128, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([128, 1024, 7, 7],"float32"), y=Tensor([128, 1024, 7, 7],"float32"), )
paddle.add(x=Tensor([128, 128, 56, 56],"float32"), y=Tensor([128, 128, 56, 56],"float32"), )
paddle.add(x=Tensor([128, 192, 14, 14],"float32"), y=Tensor([128, 192, 14, 14],"float32"), )
paddle.add(x=Tensor([128, 2048, 7, 7],"float16"), y=Tensor([128, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([128, 2048, 7, 7],"float32"), y=Tensor([128, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([128, 256, 28, 28],"float32"), y=Tensor([128, 256, 28, 28],"float32"), )
paddle.add(x=Tensor([128, 256, 56, 56],"float16"), y=Tensor([128, 256, 56, 56],"float16"), )
paddle.add(x=Tensor([128, 256, 56, 56],"float32"), y=Tensor([128, 256, 56, 56],"float32"), )
paddle.add(x=Tensor([128, 384, 7, 7],"float32"), y=Tensor([128, 384, 7, 7],"float32"), )
paddle.add(x=Tensor([128, 48, 56, 56],"float32"), y=Tensor([128, 48, 56, 56],"float32"), )
paddle.add(x=Tensor([128, 512, 14, 14],"float32"), y=Tensor([128, 512, 14, 14],"float32"), )
paddle.add(x=Tensor([128, 512, 28, 28],"float16"), y=Tensor([128, 512, 28, 28],"float16"), )
paddle.add(x=Tensor([128, 512, 28, 28],"float32"), y=Tensor([128, 512, 28, 28],"float32"), )
paddle.add(x=Tensor([128, 96, 28, 28],"float32"), y=Tensor([128, 96, 28, 28],"float32"), )
paddle.add(x=Tensor([13, 256, 56, 56],"float32"), y=Tensor([13, 256, 56, 56],"float32"), )
paddle.add(x=Tensor([16, 1024, 14, 14],"float32"), y=Tensor([16, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([16, 1024, 28, 28],"float32"), y=Tensor([16, 1024, 28, 28],"float32"), )
paddle.add(x=Tensor([16, 2048, 14, 14],"float32"), y=Tensor([16, 2048, 14, 14],"float32"), )
paddle.add(x=Tensor([16, 2048, 7, 7],"float32"), y=Tensor([16, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([16, 256, 112, 112],"float32"), y=Tensor([16, 256, 112, 112],"float32"), )
paddle.add(x=Tensor([16, 256, 56, 56],"float32"), y=Tensor([16, 256, 56, 56],"float32"), )
paddle.add(x=Tensor([16, 512, 28, 28],"float32"), y=Tensor([16, 512, 28, 28],"float32"), )
paddle.add(x=Tensor([16, 512, 56, 56],"float32"), y=Tensor([16, 512, 56, 56],"float32"), )
paddle.add(x=Tensor([160, 128, 16, 12],"float16"), y=Tensor([160, 128, 16, 12],"float16"), )
paddle.add(x=Tensor([160, 128, 16, 12],"float16"), y=Tensor([160, 128, 16, 12],"float32"), )
paddle.add(x=Tensor([160, 128, 16, 12],"float32"), y=Tensor([160, 128, 16, 12],"float16"), )
paddle.add(x=Tensor([160, 128, 16, 12],"float32"), y=Tensor([160, 128, 16, 12],"float32"), )
paddle.add(x=Tensor([160, 256, 64, 48],"float16"), y=Tensor([160, 256, 64, 48],"float16"), )
paddle.add(x=Tensor([160, 256, 64, 48],"float32"), y=Tensor([160, 256, 64, 48],"float32"), )
paddle.add(x=Tensor([160, 256, 8, 6],"float16"), y=Tensor([160, 256, 8, 6],"float16"), )
paddle.add(x=Tensor([160, 256, 8, 6],"float32"), y=Tensor([160, 256, 8, 6],"float32"), )
paddle.add(x=Tensor([160, 32, 64, 48],"float16"), y=Tensor([160, 32, 64, 48],"float16"), )
paddle.add(x=Tensor([160, 32, 64, 48],"float16"), y=Tensor([160, 32, 64, 48],"float32"), )
paddle.add(x=Tensor([160, 32, 64, 48],"float32"), y=Tensor([160, 32, 64, 48],"float16"), )
paddle.add(x=Tensor([160, 32, 64, 48],"float32"), y=Tensor([160, 32, 64, 48],"float32"), )
paddle.add(x=Tensor([160, 64, 32, 24],"float16"), y=Tensor([160, 64, 32, 24],"float16"), )
paddle.add(x=Tensor([160, 64, 32, 24],"float16"), y=Tensor([160, 64, 32, 24],"float32"), )
paddle.add(x=Tensor([160, 64, 32, 24],"float32"), y=Tensor([160, 64, 32, 24],"float16"), )
paddle.add(x=Tensor([160, 64, 32, 24],"float32"), y=Tensor([160, 64, 32, 24],"float32"), )
paddle.add(x=Tensor([1914, 2048, 7, 7],"float16"), y=Tensor([1914, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([1917, 2048, 7, 7],"float16"), y=Tensor([1917, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([1921, 2048, 7, 7],"float16"), y=Tensor([1921, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([1929, 2048, 7, 7],"float16"), y=Tensor([1929, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([1934, 2048, 7, 7],"float16"), y=Tensor([1934, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([1947, 2048, 7, 7],"float16"), y=Tensor([1947, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([1950, 2048, 7, 7],"float16"), y=Tensor([1950, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([1950, 2048, 7, 7],"float32"), y=Tensor([1950, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([2, 1024, 10, 10],"float32"), y=Tensor([2, 1024, 10, 10],"float32"), )
paddle.add(x=Tensor([2, 1024, 11, 11],"float32"), y=Tensor([2, 1024, 11, 11],"float32"), )
paddle.add(x=Tensor([2, 1024, 12, 12],"float32"), y=Tensor([2, 1024, 12, 12],"float32"), )
paddle.add(x=Tensor([2, 1024, 13, 13],"float32"), y=Tensor([2, 1024, 13, 13],"float32"), )
paddle.add(x=Tensor([2, 1024, 14, 14],"float16"), y=Tensor([2, 1024, 14, 14],"float16"), )
paddle.add(x=Tensor([2, 1024, 14, 14],"float32"), y=Tensor([2, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([2, 1024, 15, 15],"float32"), y=Tensor([2, 1024, 15, 15],"float32"), )
paddle.add(x=Tensor([2, 1024, 16, 16],"float32"), y=Tensor([2, 1024, 16, 16],"float32"), )
paddle.add(x=Tensor([2, 1024, 17, 17],"float32"), y=Tensor([2, 1024, 17, 17],"float32"), )
paddle.add(x=Tensor([2, 1024, 18, 18],"float32"), y=Tensor([2, 1024, 18, 18],"float32"), )
paddle.add(x=Tensor([2, 1024, 19, 19],"float32"), y=Tensor([2, 1024, 19, 19],"float32"), )
paddle.add(x=Tensor([2, 1024, 38, 58],"float16"), y=Tensor([2, 1024, 38, 58],"float16"), )
paddle.add(x=Tensor([2, 1024, 38, 58],"float32"), y=Tensor([2, 1024, 38, 58],"float32"), )
paddle.add(x=Tensor([2, 1024, 54, 60],"float32"), y=Tensor([2, 1024, 54, 60],"float32"), )
paddle.add(x=Tensor([2, 1024, 54, 62],"float32"), y=Tensor([2, 1024, 54, 62],"float32"), )
paddle.add(x=Tensor([2, 1024, 54, 66],"float32"), y=Tensor([2, 1024, 54, 66],"float32"), )
paddle.add(x=Tensor([2, 1024, 56, 42],"float32"), y=Tensor([2, 1024, 56, 42],"float32"), )
paddle.add(x=Tensor([2, 1024, 59, 44],"float32"), y=Tensor([2, 1024, 59, 44],"float32"), )
paddle.add(x=Tensor([2, 1024, 59, 63],"float32"), y=Tensor([2, 1024, 59, 63],"float32"), )
paddle.add(x=Tensor([2, 1024, 59, 65],"float32"), y=Tensor([2, 1024, 59, 65],"float32"), )
paddle.add(x=Tensor([2, 1024, 59, 81],"float32"), y=Tensor([2, 1024, 59, 81],"float32"), )
paddle.add(x=Tensor([2, 1024, 60, 42],"float32"), y=Tensor([2, 1024, 60, 42],"float32"), )
paddle.add(x=Tensor([2, 1024, 60, 44],"float32"), y=Tensor([2, 1024, 60, 44],"float32"), )
paddle.add(x=Tensor([2, 1024, 62, 46],"float32"), y=Tensor([2, 1024, 62, 46],"float32"), )
paddle.add(x=Tensor([2, 1024, 62, 64],"float32"), y=Tensor([2, 1024, 62, 64],"float32"), )
paddle.add(x=Tensor([2, 1024, 63, 42],"float32"), y=Tensor([2, 1024, 63, 42],"float32"), )
paddle.add(x=Tensor([2, 1024, 64, 48],"float32"), y=Tensor([2, 1024, 64, 48],"float32"), )
paddle.add(x=Tensor([2, 1024, 64, 60],"float32"), y=Tensor([2, 1024, 64, 60],"float32"), )
paddle.add(x=Tensor([2, 1024, 64, 62],"float32"), y=Tensor([2, 1024, 64, 62],"float32"), )
paddle.add(x=Tensor([2, 1024, 64, 63],"float32"), y=Tensor([2, 1024, 64, 63],"float32"), )
paddle.add(x=Tensor([2, 1024, 64, 78],"float32"), y=Tensor([2, 1024, 64, 78],"float32"), )
paddle.add(x=Tensor([2, 1024, 66, 44],"float32"), y=Tensor([2, 1024, 66, 44],"float32"), )
paddle.add(x=Tensor([2, 1024, 67, 50],"float32"), y=Tensor([2, 1024, 67, 50],"float32"), )
paddle.add(x=Tensor([2, 1024, 67, 74],"float32"), y=Tensor([2, 1024, 67, 74],"float32"), )
paddle.add(x=Tensor([2, 1024, 68, 50],"float32"), y=Tensor([2, 1024, 68, 50],"float32"), )
paddle.add(x=Tensor([2, 1024, 75, 50],"float32"), y=Tensor([2, 1024, 75, 50],"float32"), )
paddle.add(x=Tensor([2, 1024, 76, 50],"float32"), y=Tensor([2, 1024, 76, 50],"float32"), )
paddle.add(x=Tensor([2, 128, 104, 104],"float32"), y=Tensor([2, 128, 104, 104],"float32"), )
paddle.add(x=Tensor([2, 128, 112, 112],"float32"), y=Tensor([2, 128, 112, 112],"float32"), )
paddle.add(x=Tensor([2, 128, 120, 120],"float32"), y=Tensor([2, 128, 120, 120],"float32"), )
paddle.add(x=Tensor([2, 128, 128, 128],"float32"), y=Tensor([2, 128, 128, 128],"float32"), )
paddle.add(x=Tensor([2, 128, 136, 136],"float32"), y=Tensor([2, 128, 136, 136],"float32"), )
paddle.add(x=Tensor([2, 128, 144, 144],"float32"), y=Tensor([2, 128, 144, 144],"float32"), )
paddle.add(x=Tensor([2, 128, 152, 152],"float32"), y=Tensor([2, 128, 152, 152],"float32"), )
paddle.add(x=Tensor([2, 128, 80, 80],"float32"), y=Tensor([2, 128, 80, 80],"float32"), )
paddle.add(x=Tensor([2, 128, 88, 88],"float32"), y=Tensor([2, 128, 88, 88],"float32"), )
paddle.add(x=Tensor([2, 128, 96, 96],"float32"), y=Tensor([2, 128, 96, 96],"float32"), )
paddle.add(x=Tensor([2, 2048, 19, 29],"float16"), y=Tensor([2, 2048, 19, 29],"float16"), )
paddle.add(x=Tensor([2, 2048, 19, 29],"float32"), y=Tensor([2, 2048, 19, 29],"float32"), )
paddle.add(x=Tensor([2, 2048, 27, 33],"float32"), y=Tensor([2, 2048, 27, 33],"float32"), )
paddle.add(x=Tensor([2, 2048, 28, 21],"float32"), y=Tensor([2, 2048, 28, 21],"float32"), )
paddle.add(x=Tensor([2, 2048, 30, 22],"float32"), y=Tensor([2, 2048, 30, 22],"float32"), )
paddle.add(x=Tensor([2, 2048, 31, 23],"float32"), y=Tensor([2, 2048, 31, 23],"float32"), )
paddle.add(x=Tensor([2, 2048, 32, 24],"float32"), y=Tensor([2, 2048, 32, 24],"float32"), )
paddle.add(x=Tensor([2, 2048, 32, 30],"float32"), y=Tensor([2, 2048, 32, 30],"float32"), )
paddle.add(x=Tensor([2, 2048, 32, 31],"float32"), y=Tensor([2, 2048, 32, 31],"float32"), )
paddle.add(x=Tensor([2, 2048, 32, 39],"float32"), y=Tensor([2, 2048, 32, 39],"float32"), )
paddle.add(x=Tensor([2, 2048, 34, 25],"float32"), y=Tensor([2, 2048, 34, 25],"float32"), )
paddle.add(x=Tensor([2, 2048, 38, 25],"float32"), y=Tensor([2, 2048, 38, 25],"float32"), )
paddle.add(x=Tensor([2, 2048, 7, 7],"float16"), y=Tensor([2, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([2, 2048, 7, 7],"float32"), y=Tensor([2, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([2, 24],"float32"), y=Tensor([2, 24],"float32"), )
paddle.add(x=Tensor([2, 256, 152, 229],"float16"), y=Tensor([2, 256, 152, 229],"float16"), )
paddle.add(x=Tensor([2, 256, 152, 229],"float32"), y=Tensor([2, 256, 152, 229],"float32"), )
paddle.add(x=Tensor([2, 256, 214, 240],"float32"), y=Tensor([2, 256, 214, 240],"float32"), )
paddle.add(x=Tensor([2, 256, 214, 245],"float32"), y=Tensor([2, 256, 214, 245],"float32"), )
paddle.add(x=Tensor([2, 256, 216, 264],"float32"), y=Tensor([2, 256, 216, 264],"float32"), )
paddle.add(x=Tensor([2, 256, 224, 168],"float32"), y=Tensor([2, 256, 224, 168],"float32"), )
paddle.add(x=Tensor([2, 256, 235, 176],"float32"), y=Tensor([2, 256, 235, 176],"float32"), )
paddle.add(x=Tensor([2, 256, 235, 252],"float32"), y=Tensor([2, 256, 235, 252],"float32"), )
paddle.add(x=Tensor([2, 256, 235, 260],"float32"), y=Tensor([2, 256, 235, 260],"float32"), )
paddle.add(x=Tensor([2, 256, 235, 322],"float32"), y=Tensor([2, 256, 235, 322],"float32"), )
paddle.add(x=Tensor([2, 256, 240, 168],"float32"), y=Tensor([2, 256, 240, 168],"float32"), )
paddle.add(x=Tensor([2, 256, 240, 176],"float32"), y=Tensor([2, 256, 240, 176],"float32"), )
paddle.add(x=Tensor([2, 256, 246, 184],"float32"), y=Tensor([2, 256, 246, 184],"float32"), )
paddle.add(x=Tensor([2, 256, 246, 256],"float32"), y=Tensor([2, 256, 246, 256],"float32"), )
paddle.add(x=Tensor([2, 256, 248, 184],"float32"), y=Tensor([2, 256, 248, 184],"float32"), )
paddle.add(x=Tensor([2, 256, 251, 168],"float32"), y=Tensor([2, 256, 251, 168],"float32"), )
paddle.add(x=Tensor([2, 256, 256, 192],"float32"), y=Tensor([2, 256, 256, 192],"float32"), )
paddle.add(x=Tensor([2, 256, 256, 240],"float32"), y=Tensor([2, 256, 256, 240],"float32"), )
paddle.add(x=Tensor([2, 256, 256, 248],"float32"), y=Tensor([2, 256, 256, 248],"float32"), )
paddle.add(x=Tensor([2, 256, 256, 249],"float32"), y=Tensor([2, 256, 256, 249],"float32"), )
paddle.add(x=Tensor([2, 256, 256, 312],"float32"), y=Tensor([2, 256, 256, 312],"float32"), )
paddle.add(x=Tensor([2, 256, 263, 176],"float32"), y=Tensor([2, 256, 263, 176],"float32"), )
paddle.add(x=Tensor([2, 256, 264, 176],"float32"), y=Tensor([2, 256, 264, 176],"float32"), )
paddle.add(x=Tensor([2, 256, 267, 200],"float32"), y=Tensor([2, 256, 267, 200],"float32"), )
paddle.add(x=Tensor([2, 256, 267, 294],"float32"), y=Tensor([2, 256, 267, 294],"float32"), )
paddle.add(x=Tensor([2, 256, 272, 200],"float32"), y=Tensor([2, 256, 272, 200],"float32"), )
paddle.add(x=Tensor([2, 256, 300, 200],"float32"), y=Tensor([2, 256, 300, 200],"float32"), )
paddle.add(x=Tensor([2, 256, 304, 200],"float32"), y=Tensor([2, 256, 304, 200],"float32"), )
paddle.add(x=Tensor([2, 256, 40, 40],"float32"), y=Tensor([2, 256, 40, 40],"float32"), )
paddle.add(x=Tensor([2, 256, 44, 44],"float32"), y=Tensor([2, 256, 44, 44],"float32"), )
paddle.add(x=Tensor([2, 256, 48, 48],"float32"), y=Tensor([2, 256, 48, 48],"float32"), )
paddle.add(x=Tensor([2, 256, 52, 52],"float32"), y=Tensor([2, 256, 52, 52],"float32"), )
paddle.add(x=Tensor([2, 256, 56, 56],"float16"), y=Tensor([2, 256, 56, 56],"float16"), )
paddle.add(x=Tensor([2, 256, 56, 56],"float32"), y=Tensor([2, 256, 56, 56],"float32"), )
paddle.add(x=Tensor([2, 256, 60, 60],"float32"), y=Tensor([2, 256, 60, 60],"float32"), )
paddle.add(x=Tensor([2, 256, 64, 64],"float32"), y=Tensor([2, 256, 64, 64],"float32"), )
paddle.add(x=Tensor([2, 256, 68, 68],"float32"), y=Tensor([2, 256, 68, 68],"float32"), )
paddle.add(x=Tensor([2, 256, 72, 72],"float32"), y=Tensor([2, 256, 72, 72],"float32"), )
paddle.add(x=Tensor([2, 256, 76, 76],"float32"), y=Tensor([2, 256, 76, 76],"float32"), )
paddle.add(x=Tensor([2, 512, 107, 120],"float32"), y=Tensor([2, 512, 107, 120],"float32"), )
paddle.add(x=Tensor([2, 512, 107, 123],"float32"), y=Tensor([2, 512, 107, 123],"float32"), )
paddle.add(x=Tensor([2, 512, 108, 132],"float32"), y=Tensor([2, 512, 108, 132],"float32"), )
paddle.add(x=Tensor([2, 512, 112, 84],"float32"), y=Tensor([2, 512, 112, 84],"float32"), )
paddle.add(x=Tensor([2, 512, 118, 126],"float32"), y=Tensor([2, 512, 118, 126],"float32"), )
paddle.add(x=Tensor([2, 512, 118, 130],"float32"), y=Tensor([2, 512, 118, 130],"float32"), )
paddle.add(x=Tensor([2, 512, 118, 161],"float32"), y=Tensor([2, 512, 118, 161],"float32"), )
paddle.add(x=Tensor([2, 512, 118, 88],"float32"), y=Tensor([2, 512, 118, 88],"float32"), )
paddle.add(x=Tensor([2, 512, 120, 84],"float32"), y=Tensor([2, 512, 120, 84],"float32"), )
paddle.add(x=Tensor([2, 512, 120, 88],"float32"), y=Tensor([2, 512, 120, 88],"float32"), )
paddle.add(x=Tensor([2, 512, 123, 128],"float32"), y=Tensor([2, 512, 123, 128],"float32"), )
paddle.add(x=Tensor([2, 512, 123, 92],"float32"), y=Tensor([2, 512, 123, 92],"float32"), )
paddle.add(x=Tensor([2, 512, 124, 92],"float32"), y=Tensor([2, 512, 124, 92],"float32"), )
paddle.add(x=Tensor([2, 512, 126, 84],"float32"), y=Tensor([2, 512, 126, 84],"float32"), )
paddle.add(x=Tensor([2, 512, 128, 120],"float32"), y=Tensor([2, 512, 128, 120],"float32"), )
paddle.add(x=Tensor([2, 512, 128, 124],"float32"), y=Tensor([2, 512, 128, 124],"float32"), )
paddle.add(x=Tensor([2, 512, 128, 125],"float32"), y=Tensor([2, 512, 128, 125],"float32"), )
paddle.add(x=Tensor([2, 512, 128, 156],"float32"), y=Tensor([2, 512, 128, 156],"float32"), )
paddle.add(x=Tensor([2, 512, 128, 96],"float32"), y=Tensor([2, 512, 128, 96],"float32"), )
paddle.add(x=Tensor([2, 512, 132, 88],"float32"), y=Tensor([2, 512, 132, 88],"float32"), )
paddle.add(x=Tensor([2, 512, 134, 100],"float32"), y=Tensor([2, 512, 134, 100],"float32"), )
paddle.add(x=Tensor([2, 512, 134, 147],"float32"), y=Tensor([2, 512, 134, 147],"float32"), )
paddle.add(x=Tensor([2, 512, 136, 100],"float32"), y=Tensor([2, 512, 136, 100],"float32"), )
paddle.add(x=Tensor([2, 512, 150, 100],"float32"), y=Tensor([2, 512, 150, 100],"float32"), )
paddle.add(x=Tensor([2, 512, 152, 100],"float32"), y=Tensor([2, 512, 152, 100],"float32"), )
paddle.add(x=Tensor([2, 512, 20, 20],"float32"), y=Tensor([2, 512, 20, 20],"float32"), )
paddle.add(x=Tensor([2, 512, 22, 22],"float32"), y=Tensor([2, 512, 22, 22],"float32"), )
paddle.add(x=Tensor([2, 512, 24, 24],"float32"), y=Tensor([2, 512, 24, 24],"float32"), )
paddle.add(x=Tensor([2, 512, 26, 26],"float32"), y=Tensor([2, 512, 26, 26],"float32"), )
paddle.add(x=Tensor([2, 512, 28, 28],"float16"), y=Tensor([2, 512, 28, 28],"float16"), )
paddle.add(x=Tensor([2, 512, 28, 28],"float32"), y=Tensor([2, 512, 28, 28],"float32"), )
paddle.add(x=Tensor([2, 512, 30, 30],"float32"), y=Tensor([2, 512, 30, 30],"float32"), )
paddle.add(x=Tensor([2, 512, 32, 32],"float32"), y=Tensor([2, 512, 32, 32],"float32"), )
paddle.add(x=Tensor([2, 512, 34, 34],"float32"), y=Tensor([2, 512, 34, 34],"float32"), )
paddle.add(x=Tensor([2, 512, 36, 36],"float32"), y=Tensor([2, 512, 36, 36],"float32"), )
paddle.add(x=Tensor([2, 512, 38, 38],"float32"), y=Tensor([2, 512, 38, 38],"float32"), )
paddle.add(x=Tensor([2, 512, 76, 115],"float16"), y=Tensor([2, 512, 76, 115],"float16"), )
paddle.add(x=Tensor([2, 512, 76, 115],"float32"), y=Tensor([2, 512, 76, 115],"float32"), )
paddle.add(x=Tensor([2, 64, 160, 160],"float32"), y=Tensor([2, 64, 160, 160],"float32"), )
paddle.add(x=Tensor([2, 64, 176, 176],"float32"), y=Tensor([2, 64, 176, 176],"float32"), )
paddle.add(x=Tensor([2, 64, 192, 192],"float32"), y=Tensor([2, 64, 192, 192],"float32"), )
paddle.add(x=Tensor([2, 64, 208, 208],"float32"), y=Tensor([2, 64, 208, 208],"float32"), )
paddle.add(x=Tensor([2, 64, 224, 224],"float32"), y=Tensor([2, 64, 224, 224],"float32"), )
paddle.add(x=Tensor([2, 64, 240, 240],"float32"), y=Tensor([2, 64, 240, 240],"float32"), )
paddle.add(x=Tensor([2, 64, 256, 256],"float32"), y=Tensor([2, 64, 256, 256],"float32"), )
paddle.add(x=Tensor([2, 64, 272, 272],"float32"), y=Tensor([2, 64, 272, 272],"float32"), )
paddle.add(x=Tensor([2, 64, 288, 288],"float32"), y=Tensor([2, 64, 288, 288],"float32"), )
paddle.add(x=Tensor([2, 64, 304, 304],"float32"), y=Tensor([2, 64, 304, 304],"float32"), )
paddle.add(x=Tensor([20, 128, 76, 136],"float16"), y=Tensor([20, 128, 76, 136],"float16"), )
paddle.add(x=Tensor([20, 128, 76, 136],"float32"), y=Tensor([20, 128, 76, 136],"float32"), )
paddle.add(x=Tensor([20, 256, 38, 68],"float16"), y=Tensor([20, 256, 38, 68],"float16"), )
paddle.add(x=Tensor([20, 256, 38, 68],"float32"), y=Tensor([20, 256, 38, 68],"float32"), )
paddle.add(x=Tensor([20, 512, 19, 34],"float16"), y=Tensor([20, 512, 19, 34],"float16"), )
paddle.add(x=Tensor([20, 512, 19, 34],"float32"), y=Tensor([20, 512, 19, 34],"float32"), )
paddle.add(x=Tensor([20, 64, 152, 272],"float16"), y=Tensor([20, 64, 152, 272],"float16"), )
paddle.add(x=Tensor([20, 64, 152, 272],"float32"), y=Tensor([20, 64, 152, 272],"float32"), )
paddle.add(x=Tensor([2003, 2048, 7, 7],"float16"), y=Tensor([2003, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([2012, 2048, 7, 7],"float32"), y=Tensor([2012, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([2016, 2048, 7, 7],"float16"), y=Tensor([2016, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([2022, 2048, 7, 7],"float32"), y=Tensor([2022, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([2023, 2048, 7, 7],"float16"), y=Tensor([2023, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([2025, 2048, 7, 7],"float16"), y=Tensor([2025, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([2036, 2048, 7, 7],"float16"), y=Tensor([2036, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([2036, 2048, 7, 7],"float32"), y=Tensor([2036, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([2037, 2048, 7, 7],"float32"), y=Tensor([2037, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([2038, 2048, 7, 7],"float16"), y=Tensor([2038, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([2041, 2048, 7, 7],"float16"), y=Tensor([2041, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([2044, 2048, 7, 7],"float16"), y=Tensor([2044, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([2045, 2048, 7, 7],"float32"), y=Tensor([2045, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([2047, 2048, 7, 7],"float16"), y=Tensor([2047, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([2048, 2048, 7, 7],"float16"), y=Tensor([2048, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([2048, 2048, 7, 7],"float32"), y=Tensor([2048, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([23, 1024, 28, 28],"float32"), y=Tensor([23, 1024, 28, 28],"float32"), )
paddle.add(x=Tensor([23, 2048, 14, 14],"float32"), y=Tensor([23, 2048, 14, 14],"float32"), )
paddle.add(x=Tensor([23, 256, 112, 112],"float32"), y=Tensor([23, 256, 112, 112],"float32"), )
paddle.add(x=Tensor([23, 512, 56, 56],"float32"), y=Tensor([23, 512, 56, 56],"float32"), )
paddle.add(x=Tensor([24, 128, 32, 32],"float16"), y=Tensor([24, 128, 32, 32],"float16"), )
paddle.add(x=Tensor([24, 128, 32, 32],"float16"), y=Tensor([24, 128, 32, 32],"float32"), )
paddle.add(x=Tensor([24, 128, 32, 32],"float32"), y=Tensor([24, 128, 32, 32],"float16"), )
paddle.add(x=Tensor([24, 128, 32, 32],"float32"), y=Tensor([24, 128, 32, 32],"float32"), )
paddle.add(x=Tensor([24, 256, 128, 128],"float16"), y=Tensor([24, 256, 128, 128],"float16"), )
paddle.add(x=Tensor([24, 256, 128, 128],"float32"), y=Tensor([24, 256, 128, 128],"float32"), )
paddle.add(x=Tensor([24, 256, 16, 16],"float16"), y=Tensor([24, 256, 16, 16],"float16"), )
paddle.add(x=Tensor([24, 256, 16, 16],"float32"), y=Tensor([24, 256, 16, 16],"float32"), )
paddle.add(x=Tensor([24, 32, 128, 128],"float16"), y=Tensor([24, 32, 128, 128],"float16"), )
paddle.add(x=Tensor([24, 32, 128, 128],"float16"), y=Tensor([24, 32, 128, 128],"float32"), )
paddle.add(x=Tensor([24, 32, 128, 128],"float32"), y=Tensor([24, 32, 128, 128],"float16"), )
paddle.add(x=Tensor([24, 32, 128, 128],"float32"), y=Tensor([24, 32, 128, 128],"float32"), )
paddle.add(x=Tensor([24, 32, 256, 256],"float32"), y=Tensor([24, 32, 256, 256],"float16"), )
paddle.add(x=Tensor([24, 32, 256, 256],"float32"), y=Tensor([24, 32, 256, 256],"float32"), )
paddle.add(x=Tensor([24, 64, 64, 64],"float16"), y=Tensor([24, 64, 64, 64],"float16"), )
paddle.add(x=Tensor([24, 64, 64, 64],"float16"), y=Tensor([24, 64, 64, 64],"float32"), )
paddle.add(x=Tensor([24, 64, 64, 64],"float32"), y=Tensor([24, 64, 64, 64],"float16"), )
paddle.add(x=Tensor([24, 64, 64, 64],"float32"), y=Tensor([24, 64, 64, 64],"float32"), )
paddle.add(x=Tensor([240, 1024, 14, 14],"float16"), y=Tensor([240, 1024, 14, 14],"float16"), )
paddle.add(x=Tensor([240, 1024, 14, 14],"float32"), y=Tensor([240, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([240, 2048, 7, 7],"float16"), y=Tensor([240, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([240, 2048, 7, 7],"float32"), y=Tensor([240, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([240, 256, 56, 56],"float16"), y=Tensor([240, 256, 56, 56],"float16"), )
paddle.add(x=Tensor([240, 256, 56, 56],"float32"), y=Tensor([240, 256, 56, 56],"float32"), )
paddle.add(x=Tensor([240, 512, 28, 28],"float16"), y=Tensor([240, 512, 28, 28],"float16"), )
paddle.add(x=Tensor([240, 512, 28, 28],"float32"), y=Tensor([240, 512, 28, 28],"float32"), )
paddle.add(x=Tensor([256, 1024, 14, 14],"float16"), y=Tensor([256, 1024, 14, 14],"float16"), )
paddle.add(x=Tensor([256, 1024, 14, 14],"float32"), y=Tensor([256, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([256, 128, 8, 50],"float16"), y=Tensor([256, 128, 8, 50],"float16"), )
paddle.add(x=Tensor([256, 128, 8, 50],"float32"), y=Tensor([256, 128, 8, 50],"float32"), )
paddle.add(x=Tensor([256, 14, 14, 1024],"float16"), y=Tensor([256, 14, 14, 1024],"float16"), )
paddle.add(x=Tensor([256, 2048, 7, 7],"float16"), y=Tensor([256, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([256, 2048, 7, 7],"float32"), y=Tensor([256, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([256, 256, 4, 50],"float16"), y=Tensor([256, 256, 4, 50],"float16"), )
paddle.add(x=Tensor([256, 256, 4, 50],"float32"), y=Tensor([256, 256, 4, 50],"float32"), )
paddle.add(x=Tensor([256, 256, 56, 56],"float16"), y=Tensor([256, 256, 56, 56],"float16"), )
paddle.add(x=Tensor([256, 256, 56, 56],"float32"), y=Tensor([256, 256, 56, 56],"float32"), )
paddle.add(x=Tensor([256, 28, 28, 512],"float16"), y=Tensor([256, 28, 28, 512],"float16"), )
paddle.add(x=Tensor([256, 512, 2, 50],"float16"), y=Tensor([256, 512, 2, 50],"float16"), )
paddle.add(x=Tensor([256, 512, 2, 50],"float32"), y=Tensor([256, 512, 2, 50],"float32"), )
paddle.add(x=Tensor([256, 512, 28, 28],"float16"), y=Tensor([256, 512, 28, 28],"float16"), )
paddle.add(x=Tensor([256, 512, 28, 28],"float32"), y=Tensor([256, 512, 28, 28],"float32"), )
paddle.add(x=Tensor([256, 56, 56, 256],"float16"), y=Tensor([256, 56, 56, 256],"float16"), )
paddle.add(x=Tensor([256, 64, 16, 50],"float16"), y=Tensor([256, 64, 16, 50],"float16"), )
paddle.add(x=Tensor([256, 64, 16, 50],"float32"), y=Tensor([256, 64, 16, 50],"float32"), )
paddle.add(x=Tensor([256, 7, 7, 2048],"float16"), y=Tensor([256, 7, 7, 2048],"float16"), )
paddle.add(x=Tensor([3, 3, 3],"float32"), y=Tensor([3, 3, 3],"float32"), )
paddle.add(x=Tensor([3, 3, 3],"float64"), y=Tensor([1, 3, 3],"float64"), )
paddle.add(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 1, 3],"float64"), )
paddle.add(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 1],"float64"), )
paddle.add(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), )
paddle.add(x=Tensor([3, 3, 3],"int32"), y=Tensor([3, 3, 3],"int32"), )
paddle.add(x=Tensor([3, 3, 3],"int64"), y=Tensor([3, 3, 3],"int64"), )
paddle.add(x=Tensor([32, 1024, 14, 14],"float32"), y=Tensor([32, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([32, 1024, 28, 28],"float32"), y=Tensor([32, 1024, 28, 28],"float32"), )
paddle.add(x=Tensor([32, 2048, 14, 14],"float32"), y=Tensor([32, 2048, 14, 14],"float32"), )
paddle.add(x=Tensor([32, 2048, 7, 7],"float32"), y=Tensor([32, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([32, 256, 112, 112],"float32"), y=Tensor([32, 256, 112, 112],"float32"), )
paddle.add(x=Tensor([32, 256, 56, 56],"float32"), y=Tensor([32, 256, 56, 56],"float32"), )
paddle.add(x=Tensor([32, 512, 28, 28],"float32"), y=Tensor([32, 512, 28, 28],"float32"), )
paddle.add(x=Tensor([32, 512, 56, 56],"float32"), y=Tensor([32, 512, 56, 56],"float32"), )
paddle.add(x=Tensor([4, 1024, 19, 19],"float32"), y=Tensor([4, 1024, 19, 19],"float32"), )
paddle.add(x=Tensor([4, 1024, 32, 32],"float32"), y=Tensor([4, 1024, 32, 32],"float32"), )
paddle.add(x=Tensor([4, 1024, 42, 62],"float16"), y=Tensor([4, 1024, 42, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 42, 63],"float16"), y=Tensor([4, 1024, 42, 63],"float16"), )
paddle.add(x=Tensor([4, 1024, 42, 63],"float32"), y=Tensor([4, 1024, 42, 63],"float32"), )
paddle.add(x=Tensor([4, 1024, 42, 64],"float16"), y=Tensor([4, 1024, 42, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 42, 64],"float32"), y=Tensor([4, 1024, 42, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 44, 59],"float16"), y=Tensor([4, 1024, 44, 59],"float16"), )
paddle.add(x=Tensor([4, 1024, 44, 60],"float16"), y=Tensor([4, 1024, 44, 60],"float16"), )
paddle.add(x=Tensor([4, 1024, 44, 60],"float32"), y=Tensor([4, 1024, 44, 60],"float32"), )
paddle.add(x=Tensor([4, 1024, 44, 64],"float16"), y=Tensor([4, 1024, 44, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 44, 66],"float16"), y=Tensor([4, 1024, 44, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 44, 66],"float32"), y=Tensor([4, 1024, 44, 66],"float32"), )
paddle.add(x=Tensor([4, 1024, 44, 67],"float16"), y=Tensor([4, 1024, 44, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 44, 67],"float32"), y=Tensor([4, 1024, 44, 67],"float32"), )
paddle.add(x=Tensor([4, 1024, 44, 68],"float16"), y=Tensor([4, 1024, 44, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 44, 68],"float32"), y=Tensor([4, 1024, 44, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 44, 74],"float16"), y=Tensor([4, 1024, 44, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 44, 84],"float16"), y=Tensor([4, 1024, 44, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 44, 84],"float32"), y=Tensor([4, 1024, 44, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 46, 60],"float16"), y=Tensor([4, 1024, 46, 60],"float16"), )
paddle.add(x=Tensor([4, 1024, 46, 62],"float16"), y=Tensor([4, 1024, 46, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 46, 62],"float32"), y=Tensor([4, 1024, 46, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 46, 63],"float16"), y=Tensor([4, 1024, 46, 63],"float16"), )
paddle.add(x=Tensor([4, 1024, 46, 64],"float16"), y=Tensor([4, 1024, 46, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 46, 64],"float32"), y=Tensor([4, 1024, 46, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 46, 67],"float16"), y=Tensor([4, 1024, 46, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 46, 67],"float32"), y=Tensor([4, 1024, 46, 67],"float32"), )
paddle.add(x=Tensor([4, 1024, 46, 68],"float16"), y=Tensor([4, 1024, 46, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 46, 68],"float32"), y=Tensor([4, 1024, 46, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 46, 69],"float16"), y=Tensor([4, 1024, 46, 69],"float16"), )
paddle.add(x=Tensor([4, 1024, 46, 69],"float32"), y=Tensor([4, 1024, 46, 69],"float32"), )
paddle.add(x=Tensor([4, 1024, 46, 70],"float16"), y=Tensor([4, 1024, 46, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 46, 70],"float32"), y=Tensor([4, 1024, 46, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 46, 74],"float16"), y=Tensor([4, 1024, 46, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 46, 74],"float32"), y=Tensor([4, 1024, 46, 74],"float32"), )
paddle.add(x=Tensor([4, 1024, 46, 75],"float16"), y=Tensor([4, 1024, 46, 75],"float16"), )
paddle.add(x=Tensor([4, 1024, 46, 75],"float32"), y=Tensor([4, 1024, 46, 75],"float32"), )
paddle.add(x=Tensor([4, 1024, 46, 76],"float16"), y=Tensor([4, 1024, 46, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 46, 76],"float32"), y=Tensor([4, 1024, 46, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 46, 78],"float16"), y=Tensor([4, 1024, 46, 78],"float16"), )
paddle.add(x=Tensor([4, 1024, 46, 78],"float32"), y=Tensor([4, 1024, 46, 78],"float32"), )
paddle.add(x=Tensor([4, 1024, 46, 80],"float16"), y=Tensor([4, 1024, 46, 80],"float16"), )
paddle.add(x=Tensor([4, 1024, 46, 80],"float32"), y=Tensor([4, 1024, 46, 80],"float32"), )
paddle.add(x=Tensor([4, 1024, 46, 82],"float16"), y=Tensor([4, 1024, 46, 82],"float16"), )
paddle.add(x=Tensor([4, 1024, 46, 82],"float32"), y=Tensor([4, 1024, 46, 82],"float32"), )
paddle.add(x=Tensor([4, 1024, 46, 84],"float16"), y=Tensor([4, 1024, 46, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 46, 84],"float32"), y=Tensor([4, 1024, 46, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 47, 84],"float16"), y=Tensor([4, 1024, 47, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 47, 84],"float32"), y=Tensor([4, 1024, 47, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 48, 60],"float16"), y=Tensor([4, 1024, 48, 60],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 62],"float16"), y=Tensor([4, 1024, 48, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 62],"float32"), y=Tensor([4, 1024, 48, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 48, 64],"float16"), y=Tensor([4, 1024, 48, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 64],"float32"), y=Tensor([4, 1024, 48, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 48, 65],"float16"), y=Tensor([4, 1024, 48, 65],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 66],"float16"), y=Tensor([4, 1024, 48, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 66],"float32"), y=Tensor([4, 1024, 48, 66],"float32"), )
paddle.add(x=Tensor([4, 1024, 48, 67],"float16"), y=Tensor([4, 1024, 48, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 67],"float32"), y=Tensor([4, 1024, 48, 67],"float32"), )
paddle.add(x=Tensor([4, 1024, 48, 68],"float16"), y=Tensor([4, 1024, 48, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 68],"float32"), y=Tensor([4, 1024, 48, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 48, 69],"float16"), y=Tensor([4, 1024, 48, 69],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 69],"float32"), y=Tensor([4, 1024, 48, 69],"float32"), )
paddle.add(x=Tensor([4, 1024, 48, 70],"float16"), y=Tensor([4, 1024, 48, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 70],"float32"), y=Tensor([4, 1024, 48, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 48, 72],"float16"), y=Tensor([4, 1024, 48, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 72],"float32"), y=Tensor([4, 1024, 48, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 48, 73],"float16"), y=Tensor([4, 1024, 48, 73],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 73],"float32"), y=Tensor([4, 1024, 48, 73],"float32"), )
paddle.add(x=Tensor([4, 1024, 48, 74],"float16"), y=Tensor([4, 1024, 48, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 74],"float32"), y=Tensor([4, 1024, 48, 74],"float32"), )
paddle.add(x=Tensor([4, 1024, 48, 75],"float16"), y=Tensor([4, 1024, 48, 75],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 76],"float16"), y=Tensor([4, 1024, 48, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 76],"float32"), y=Tensor([4, 1024, 48, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 48, 80],"float16"), y=Tensor([4, 1024, 48, 80],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 82],"float16"), y=Tensor([4, 1024, 48, 82],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 84],"float16"), y=Tensor([4, 1024, 48, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 48, 84],"float32"), y=Tensor([4, 1024, 48, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 49, 63],"float16"), y=Tensor([4, 1024, 49, 63],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 57],"float32"), y=Tensor([4, 1024, 50, 57],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 59],"float16"), y=Tensor([4, 1024, 50, 59],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 60],"float16"), y=Tensor([4, 1024, 50, 60],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 60],"float32"), y=Tensor([4, 1024, 50, 60],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 61],"float16"), y=Tensor([4, 1024, 50, 61],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 62],"float16"), y=Tensor([4, 1024, 50, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 62],"float32"), y=Tensor([4, 1024, 50, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 64],"float16"), y=Tensor([4, 1024, 50, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 64],"float32"), y=Tensor([4, 1024, 50, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 66],"float16"), y=Tensor([4, 1024, 50, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 67],"float16"), y=Tensor([4, 1024, 50, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 67],"float32"), y=Tensor([4, 1024, 50, 67],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 68],"float16"), y=Tensor([4, 1024, 50, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 68],"float32"), y=Tensor([4, 1024, 50, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 69],"float16"), y=Tensor([4, 1024, 50, 69],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 70],"float16"), y=Tensor([4, 1024, 50, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 70],"float32"), y=Tensor([4, 1024, 50, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 71],"float16"), y=Tensor([4, 1024, 50, 71],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 71],"float32"), y=Tensor([4, 1024, 50, 71],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 72],"float16"), y=Tensor([4, 1024, 50, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 72],"float32"), y=Tensor([4, 1024, 50, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 73],"float16"), y=Tensor([4, 1024, 50, 73],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 73],"float32"), y=Tensor([4, 1024, 50, 73],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 74],"float16"), y=Tensor([4, 1024, 50, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 74],"float32"), y=Tensor([4, 1024, 50, 74],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 75],"float16"), y=Tensor([4, 1024, 50, 75],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 75],"float32"), y=Tensor([4, 1024, 50, 75],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 76],"float16"), y=Tensor([4, 1024, 50, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 76],"float32"), y=Tensor([4, 1024, 50, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 78],"float16"), y=Tensor([4, 1024, 50, 78],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 78],"float32"), y=Tensor([4, 1024, 50, 78],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 79],"float16"), y=Tensor([4, 1024, 50, 79],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 79],"float32"), y=Tensor([4, 1024, 50, 79],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 80],"float16"), y=Tensor([4, 1024, 50, 80],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 80],"float32"), y=Tensor([4, 1024, 50, 80],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 81],"float16"), y=Tensor([4, 1024, 50, 81],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 81],"float32"), y=Tensor([4, 1024, 50, 81],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 82],"float16"), y=Tensor([4, 1024, 50, 82],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 82],"float32"), y=Tensor([4, 1024, 50, 82],"float32"), )
paddle.add(x=Tensor([4, 1024, 50, 84],"float16"), y=Tensor([4, 1024, 50, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 50, 84],"float32"), y=Tensor([4, 1024, 50, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 51, 73],"float16"), y=Tensor([4, 1024, 51, 73],"float16"), )
paddle.add(x=Tensor([4, 1024, 51, 82],"float16"), y=Tensor([4, 1024, 51, 82],"float16"), )
paddle.add(x=Tensor([4, 1024, 51, 82],"float32"), y=Tensor([4, 1024, 51, 82],"float32"), )
paddle.add(x=Tensor([4, 1024, 52, 64],"float16"), y=Tensor([4, 1024, 52, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 52, 68],"float16"), y=Tensor([4, 1024, 52, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 52, 72],"float16"), y=Tensor([4, 1024, 52, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 52, 72],"float32"), y=Tensor([4, 1024, 52, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 52, 74],"float16"), y=Tensor([4, 1024, 52, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 52, 74],"float32"), y=Tensor([4, 1024, 52, 74],"float32"), )
paddle.add(x=Tensor([4, 1024, 52, 75],"float16"), y=Tensor([4, 1024, 52, 75],"float16"), )
paddle.add(x=Tensor([4, 1024, 52, 75],"float32"), y=Tensor([4, 1024, 52, 75],"float32"), )
paddle.add(x=Tensor([4, 1024, 52, 76],"float16"), y=Tensor([4, 1024, 52, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 52, 76],"float32"), y=Tensor([4, 1024, 52, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 52, 82],"float16"), y=Tensor([4, 1024, 52, 82],"float16"), )
paddle.add(x=Tensor([4, 1024, 52, 82],"float32"), y=Tensor([4, 1024, 52, 82],"float32"), )
paddle.add(x=Tensor([4, 1024, 52, 84],"float16"), y=Tensor([4, 1024, 52, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 52, 84],"float32"), y=Tensor([4, 1024, 52, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 53, 56],"float16"), y=Tensor([4, 1024, 53, 56],"float16"), )
paddle.add(x=Tensor([4, 1024, 53, 56],"float32"), y=Tensor([4, 1024, 53, 56],"float32"), )
paddle.add(x=Tensor([4, 1024, 53, 72],"float16"), y=Tensor([4, 1024, 53, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 54, 56],"float16"), y=Tensor([4, 1024, 54, 56],"float16"), )
paddle.add(x=Tensor([4, 1024, 54, 56],"float32"), y=Tensor([4, 1024, 54, 56],"float32"), )
paddle.add(x=Tensor([4, 1024, 54, 61],"float16"), y=Tensor([4, 1024, 54, 61],"float16"), )
paddle.add(x=Tensor([4, 1024, 54, 61],"float32"), y=Tensor([4, 1024, 54, 61],"float32"), )
paddle.add(x=Tensor([4, 1024, 54, 62],"float16"), y=Tensor([4, 1024, 54, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 54, 62],"float32"), y=Tensor([4, 1024, 54, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 54, 63],"float16"), y=Tensor([4, 1024, 54, 63],"float16"), )
paddle.add(x=Tensor([4, 1024, 54, 63],"float32"), y=Tensor([4, 1024, 54, 63],"float32"), )
paddle.add(x=Tensor([4, 1024, 54, 64],"float16"), y=Tensor([4, 1024, 54, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 54, 64],"float32"), y=Tensor([4, 1024, 54, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 54, 66],"float16"), y=Tensor([4, 1024, 54, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 54, 66],"float32"), y=Tensor([4, 1024, 54, 66],"float32"), )
paddle.add(x=Tensor([4, 1024, 54, 68],"float16"), y=Tensor([4, 1024, 54, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 54, 68],"float32"), y=Tensor([4, 1024, 54, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 54, 69],"float16"), y=Tensor([4, 1024, 54, 69],"float16"), )
paddle.add(x=Tensor([4, 1024, 54, 70],"float16"), y=Tensor([4, 1024, 54, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 54, 70],"float32"), y=Tensor([4, 1024, 54, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 54, 72],"float16"), y=Tensor([4, 1024, 54, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 54, 72],"float32"), y=Tensor([4, 1024, 54, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 54, 74],"float16"), y=Tensor([4, 1024, 54, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 54, 74],"float32"), y=Tensor([4, 1024, 54, 74],"float32"), )
paddle.add(x=Tensor([4, 1024, 54, 75],"float16"), y=Tensor([4, 1024, 54, 75],"float16"), )
paddle.add(x=Tensor([4, 1024, 54, 76],"float16"), y=Tensor([4, 1024, 54, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 54, 76],"float32"), y=Tensor([4, 1024, 54, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 54, 78],"float16"), y=Tensor([4, 1024, 54, 78],"float16"), )
paddle.add(x=Tensor([4, 1024, 54, 78],"float32"), y=Tensor([4, 1024, 54, 78],"float32"), )
paddle.add(x=Tensor([4, 1024, 54, 84],"float16"), y=Tensor([4, 1024, 54, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 54, 84],"float32"), y=Tensor([4, 1024, 54, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 55, 70],"float16"), y=Tensor([4, 1024, 55, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 55, 70],"float32"), y=Tensor([4, 1024, 55, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 55, 76],"float16"), y=Tensor([4, 1024, 55, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 60],"float32"), y=Tensor([4, 1024, 56, 60],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 62],"float16"), y=Tensor([4, 1024, 56, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 62],"float32"), y=Tensor([4, 1024, 56, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 63],"float16"), y=Tensor([4, 1024, 56, 63],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 63],"float32"), y=Tensor([4, 1024, 56, 63],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 64],"float16"), y=Tensor([4, 1024, 56, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 64],"float32"), y=Tensor([4, 1024, 56, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 65],"float16"), y=Tensor([4, 1024, 56, 65],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 66],"float16"), y=Tensor([4, 1024, 56, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 66],"float32"), y=Tensor([4, 1024, 56, 66],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 67],"float16"), y=Tensor([4, 1024, 56, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 67],"float32"), y=Tensor([4, 1024, 56, 67],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 68],"float16"), y=Tensor([4, 1024, 56, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 68],"float32"), y=Tensor([4, 1024, 56, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 69],"float16"), y=Tensor([4, 1024, 56, 69],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 69],"float32"), y=Tensor([4, 1024, 56, 69],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 70],"float16"), y=Tensor([4, 1024, 56, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 70],"float32"), y=Tensor([4, 1024, 56, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 72],"float16"), y=Tensor([4, 1024, 56, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 72],"float32"), y=Tensor([4, 1024, 56, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 74],"float16"), y=Tensor([4, 1024, 56, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 74],"float32"), y=Tensor([4, 1024, 56, 74],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 75],"float16"), y=Tensor([4, 1024, 56, 75],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 75],"float32"), y=Tensor([4, 1024, 56, 75],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 76],"float16"), y=Tensor([4, 1024, 56, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 76],"float32"), y=Tensor([4, 1024, 56, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 78],"float16"), y=Tensor([4, 1024, 56, 78],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 79],"float16"), y=Tensor([4, 1024, 56, 79],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 79],"float32"), y=Tensor([4, 1024, 56, 79],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 80],"float16"), y=Tensor([4, 1024, 56, 80],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 80],"float32"), y=Tensor([4, 1024, 56, 80],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 81],"float16"), y=Tensor([4, 1024, 56, 81],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 81],"float32"), y=Tensor([4, 1024, 56, 81],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 82],"float16"), y=Tensor([4, 1024, 56, 82],"float16"), )
paddle.add(x=Tensor([4, 1024, 56, 82],"float32"), y=Tensor([4, 1024, 56, 82],"float32"), )
paddle.add(x=Tensor([4, 1024, 56, 84],"float16"), y=Tensor([4, 1024, 56, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 57, 66],"float16"), y=Tensor([4, 1024, 57, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 57, 67],"float16"), y=Tensor([4, 1024, 57, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 57, 67],"float32"), y=Tensor([4, 1024, 57, 67],"float32"), )
paddle.add(x=Tensor([4, 1024, 58, 64],"float16"), y=Tensor([4, 1024, 58, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 58, 64],"float32"), y=Tensor([4, 1024, 58, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 58, 66],"float16"), y=Tensor([4, 1024, 58, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 58, 66],"float32"), y=Tensor([4, 1024, 58, 66],"float32"), )
paddle.add(x=Tensor([4, 1024, 58, 68],"float16"), y=Tensor([4, 1024, 58, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 58, 68],"float32"), y=Tensor([4, 1024, 58, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 58, 76],"float16"), y=Tensor([4, 1024, 58, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 58, 76],"float32"), y=Tensor([4, 1024, 58, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 58, 80],"float16"), y=Tensor([4, 1024, 58, 80],"float16"), )
paddle.add(x=Tensor([4, 1024, 58, 80],"float32"), y=Tensor([4, 1024, 58, 80],"float32"), )
paddle.add(x=Tensor([4, 1024, 58, 84],"float16"), y=Tensor([4, 1024, 58, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 59, 51],"float16"), y=Tensor([4, 1024, 59, 51],"float16"), )
paddle.add(x=Tensor([4, 1024, 59, 60],"float16"), y=Tensor([4, 1024, 59, 60],"float16"), )
paddle.add(x=Tensor([4, 1024, 59, 62],"float16"), y=Tensor([4, 1024, 59, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 59, 64],"float16"), y=Tensor([4, 1024, 59, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 59, 64],"float32"), y=Tensor([4, 1024, 59, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 59, 67],"float16"), y=Tensor([4, 1024, 59, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 59, 69],"float16"), y=Tensor([4, 1024, 59, 69],"float16"), )
paddle.add(x=Tensor([4, 1024, 59, 72],"float16"), y=Tensor([4, 1024, 59, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 59, 73],"float16"), y=Tensor([4, 1024, 59, 73],"float16"), )
paddle.add(x=Tensor([4, 1024, 59, 76],"float16"), y=Tensor([4, 1024, 59, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 59, 78],"float16"), y=Tensor([4, 1024, 59, 78],"float16"), )
paddle.add(x=Tensor([4, 1024, 59, 84],"float16"), y=Tensor([4, 1024, 59, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 59, 84],"float32"), y=Tensor([4, 1024, 59, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 44],"float32"), y=Tensor([4, 1024, 60, 44],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 52],"float16"), y=Tensor([4, 1024, 60, 52],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 52],"float32"), y=Tensor([4, 1024, 60, 52],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 56],"float32"), y=Tensor([4, 1024, 60, 56],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 60],"float16"), y=Tensor([4, 1024, 60, 60],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 60],"float32"), y=Tensor([4, 1024, 60, 60],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 62],"float16"), y=Tensor([4, 1024, 60, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 62],"float32"), y=Tensor([4, 1024, 60, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 64],"float16"), y=Tensor([4, 1024, 60, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 64],"float32"), y=Tensor([4, 1024, 60, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 67],"float16"), y=Tensor([4, 1024, 60, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 67],"float32"), y=Tensor([4, 1024, 60, 67],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 68],"float16"), y=Tensor([4, 1024, 60, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 68],"float32"), y=Tensor([4, 1024, 60, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 70],"float16"), y=Tensor([4, 1024, 60, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 70],"float32"), y=Tensor([4, 1024, 60, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 72],"float16"), y=Tensor([4, 1024, 60, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 72],"float32"), y=Tensor([4, 1024, 60, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 74],"float16"), y=Tensor([4, 1024, 60, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 74],"float32"), y=Tensor([4, 1024, 60, 74],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 75],"float16"), y=Tensor([4, 1024, 60, 75],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 75],"float32"), y=Tensor([4, 1024, 60, 75],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 76],"float16"), y=Tensor([4, 1024, 60, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 76],"float32"), y=Tensor([4, 1024, 60, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 77],"float16"), y=Tensor([4, 1024, 60, 77],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 77],"float32"), y=Tensor([4, 1024, 60, 77],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 78],"float16"), y=Tensor([4, 1024, 60, 78],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 78],"float32"), y=Tensor([4, 1024, 60, 78],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 79],"float16"), y=Tensor([4, 1024, 60, 79],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 79],"float32"), y=Tensor([4, 1024, 60, 79],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 80],"float16"), y=Tensor([4, 1024, 60, 80],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 80],"float32"), y=Tensor([4, 1024, 60, 80],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 82],"float16"), y=Tensor([4, 1024, 60, 82],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 82],"float32"), y=Tensor([4, 1024, 60, 82],"float32"), )
paddle.add(x=Tensor([4, 1024, 60, 84],"float16"), y=Tensor([4, 1024, 60, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 60, 84],"float32"), y=Tensor([4, 1024, 60, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 61, 56],"float16"), y=Tensor([4, 1024, 61, 56],"float16"), )
paddle.add(x=Tensor([4, 1024, 61, 56],"float32"), y=Tensor([4, 1024, 61, 56],"float32"), )
paddle.add(x=Tensor([4, 1024, 61, 62],"float16"), y=Tensor([4, 1024, 61, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 61, 62],"float32"), y=Tensor([4, 1024, 61, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 61, 66],"float16"), y=Tensor([4, 1024, 61, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 61, 66],"float32"), y=Tensor([4, 1024, 61, 66],"float32"), )
paddle.add(x=Tensor([4, 1024, 61, 67],"float16"), y=Tensor([4, 1024, 61, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 61, 69],"float16"), y=Tensor([4, 1024, 61, 69],"float16"), )
paddle.add(x=Tensor([4, 1024, 61, 69],"float32"), y=Tensor([4, 1024, 61, 69],"float32"), )
paddle.add(x=Tensor([4, 1024, 61, 84],"float16"), y=Tensor([4, 1024, 61, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 61, 84],"float32"), y=Tensor([4, 1024, 61, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 46],"float32"), y=Tensor([4, 1024, 62, 46],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 48],"float16"), y=Tensor([4, 1024, 62, 48],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 48],"float32"), y=Tensor([4, 1024, 62, 48],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 54],"float32"), y=Tensor([4, 1024, 62, 54],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 56],"float16"), y=Tensor([4, 1024, 62, 56],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 56],"float32"), y=Tensor([4, 1024, 62, 56],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 62],"float16"), y=Tensor([4, 1024, 62, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 62],"float32"), y=Tensor([4, 1024, 62, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 64],"float16"), y=Tensor([4, 1024, 62, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 64],"float32"), y=Tensor([4, 1024, 62, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 66],"float16"), y=Tensor([4, 1024, 62, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 66],"float32"), y=Tensor([4, 1024, 62, 66],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 67],"float16"), y=Tensor([4, 1024, 62, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 67],"float32"), y=Tensor([4, 1024, 62, 67],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 68],"float16"), y=Tensor([4, 1024, 62, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 68],"float32"), y=Tensor([4, 1024, 62, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 69],"float16"), y=Tensor([4, 1024, 62, 69],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 69],"float32"), y=Tensor([4, 1024, 62, 69],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 70],"float16"), y=Tensor([4, 1024, 62, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 70],"float32"), y=Tensor([4, 1024, 62, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 72],"float16"), y=Tensor([4, 1024, 62, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 72],"float32"), y=Tensor([4, 1024, 62, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 73],"float16"), y=Tensor([4, 1024, 62, 73],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 74],"float16"), y=Tensor([4, 1024, 62, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 74],"float32"), y=Tensor([4, 1024, 62, 74],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 75],"float16"), y=Tensor([4, 1024, 62, 75],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 75],"float32"), y=Tensor([4, 1024, 62, 75],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 76],"float16"), y=Tensor([4, 1024, 62, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 76],"float32"), y=Tensor([4, 1024, 62, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 78],"float16"), y=Tensor([4, 1024, 62, 78],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 81],"float16"), y=Tensor([4, 1024, 62, 81],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 82],"float16"), y=Tensor([4, 1024, 62, 82],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 82],"float32"), y=Tensor([4, 1024, 62, 82],"float32"), )
paddle.add(x=Tensor([4, 1024, 62, 84],"float16"), y=Tensor([4, 1024, 62, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 62, 84],"float32"), y=Tensor([4, 1024, 62, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 63, 56],"float16"), y=Tensor([4, 1024, 63, 56],"float16"), )
paddle.add(x=Tensor([4, 1024, 63, 59],"float16"), y=Tensor([4, 1024, 63, 59],"float16"), )
paddle.add(x=Tensor([4, 1024, 63, 59],"float32"), y=Tensor([4, 1024, 63, 59],"float32"), )
paddle.add(x=Tensor([4, 1024, 63, 64],"float16"), y=Tensor([4, 1024, 63, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 63, 64],"float32"), y=Tensor([4, 1024, 63, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 63, 72],"float16"), y=Tensor([4, 1024, 63, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 63, 73],"float16"), y=Tensor([4, 1024, 63, 73],"float16"), )
paddle.add(x=Tensor([4, 1024, 63, 73],"float32"), y=Tensor([4, 1024, 63, 73],"float32"), )
paddle.add(x=Tensor([4, 1024, 63, 75],"float16"), y=Tensor([4, 1024, 63, 75],"float16"), )
paddle.add(x=Tensor([4, 1024, 63, 76],"float16"), y=Tensor([4, 1024, 63, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 63, 82],"float16"), y=Tensor([4, 1024, 63, 82],"float16"), )
paddle.add(x=Tensor([4, 1024, 63, 84],"float16"), y=Tensor([4, 1024, 63, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 63, 84],"float32"), y=Tensor([4, 1024, 63, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 48],"float32"), y=Tensor([4, 1024, 64, 48],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 54],"float16"), y=Tensor([4, 1024, 64, 54],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 56],"float16"), y=Tensor([4, 1024, 64, 56],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 56],"float32"), y=Tensor([4, 1024, 64, 56],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 59],"float16"), y=Tensor([4, 1024, 64, 59],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 59],"float32"), y=Tensor([4, 1024, 64, 59],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 60],"float16"), y=Tensor([4, 1024, 64, 60],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 60],"float32"), y=Tensor([4, 1024, 64, 60],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 62],"float16"), y=Tensor([4, 1024, 64, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 62],"float32"), y=Tensor([4, 1024, 64, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 63],"float16"), y=Tensor([4, 1024, 64, 63],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 63],"float32"), y=Tensor([4, 1024, 64, 63],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 64],"float16"), y=Tensor([4, 1024, 64, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 64],"float32"), y=Tensor([4, 1024, 64, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 66],"float16"), y=Tensor([4, 1024, 64, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 66],"float32"), y=Tensor([4, 1024, 64, 66],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 67],"float16"), y=Tensor([4, 1024, 64, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 68],"float16"), y=Tensor([4, 1024, 64, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 68],"float32"), y=Tensor([4, 1024, 64, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 70],"float16"), y=Tensor([4, 1024, 64, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 70],"float32"), y=Tensor([4, 1024, 64, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 72],"float16"), y=Tensor([4, 1024, 64, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 72],"float32"), y=Tensor([4, 1024, 64, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 73],"float16"), y=Tensor([4, 1024, 64, 73],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 73],"float32"), y=Tensor([4, 1024, 64, 73],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 74],"float16"), y=Tensor([4, 1024, 64, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 74],"float32"), y=Tensor([4, 1024, 64, 74],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 75],"float16"), y=Tensor([4, 1024, 64, 75],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 75],"float32"), y=Tensor([4, 1024, 64, 75],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 76],"float16"), y=Tensor([4, 1024, 64, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 76],"float32"), y=Tensor([4, 1024, 64, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 77],"float16"), y=Tensor([4, 1024, 64, 77],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 78],"float16"), y=Tensor([4, 1024, 64, 78],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 78],"float32"), y=Tensor([4, 1024, 64, 78],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 79],"float16"), y=Tensor([4, 1024, 64, 79],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 79],"float32"), y=Tensor([4, 1024, 64, 79],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 80],"float16"), y=Tensor([4, 1024, 64, 80],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 80],"float32"), y=Tensor([4, 1024, 64, 80],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 82],"float16"), y=Tensor([4, 1024, 64, 82],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 82],"float32"), y=Tensor([4, 1024, 64, 82],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 83],"float16"), y=Tensor([4, 1024, 64, 83],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 83],"float32"), y=Tensor([4, 1024, 64, 83],"float32"), )
paddle.add(x=Tensor([4, 1024, 64, 84],"float16"), y=Tensor([4, 1024, 64, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 64, 84],"float32"), y=Tensor([4, 1024, 64, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 65, 48],"float16"), y=Tensor([4, 1024, 65, 48],"float16"), )
paddle.add(x=Tensor([4, 1024, 65, 62],"float16"), y=Tensor([4, 1024, 65, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 65, 62],"float32"), y=Tensor([4, 1024, 65, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 65, 64],"float16"), y=Tensor([4, 1024, 65, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 65, 64],"float32"), y=Tensor([4, 1024, 65, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 65, 75],"float16"), y=Tensor([4, 1024, 65, 75],"float16"), )
paddle.add(x=Tensor([4, 1024, 65, 75],"float32"), y=Tensor([4, 1024, 65, 75],"float32"), )
paddle.add(x=Tensor([4, 1024, 65, 76],"float16"), y=Tensor([4, 1024, 65, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 65, 76],"float32"), y=Tensor([4, 1024, 65, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 65, 77],"float16"), y=Tensor([4, 1024, 65, 77],"float16"), )
paddle.add(x=Tensor([4, 1024, 65, 77],"float32"), y=Tensor([4, 1024, 65, 77],"float32"), )
paddle.add(x=Tensor([4, 1024, 65, 79],"float16"), y=Tensor([4, 1024, 65, 79],"float16"), )
paddle.add(x=Tensor([4, 1024, 65, 79],"float32"), y=Tensor([4, 1024, 65, 79],"float32"), )
paddle.add(x=Tensor([4, 1024, 65, 84],"float16"), y=Tensor([4, 1024, 65, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 48],"float16"), y=Tensor([4, 1024, 66, 48],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 48],"float32"), y=Tensor([4, 1024, 66, 48],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 50],"float32"), y=Tensor([4, 1024, 66, 50],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 52],"float16"), y=Tensor([4, 1024, 66, 52],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 54],"float16"), y=Tensor([4, 1024, 66, 54],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 54],"float32"), y=Tensor([4, 1024, 66, 54],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 62],"float16"), y=Tensor([4, 1024, 66, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 62],"float32"), y=Tensor([4, 1024, 66, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 64],"float16"), y=Tensor([4, 1024, 66, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 64],"float32"), y=Tensor([4, 1024, 66, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 65],"float16"), y=Tensor([4, 1024, 66, 65],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 65],"float32"), y=Tensor([4, 1024, 66, 65],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 66],"float16"), y=Tensor([4, 1024, 66, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 66],"float32"), y=Tensor([4, 1024, 66, 66],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 67],"float16"), y=Tensor([4, 1024, 66, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 67],"float32"), y=Tensor([4, 1024, 66, 67],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 68],"float16"), y=Tensor([4, 1024, 66, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 68],"float32"), y=Tensor([4, 1024, 66, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 69],"float16"), y=Tensor([4, 1024, 66, 69],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 70],"float16"), y=Tensor([4, 1024, 66, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 70],"float32"), y=Tensor([4, 1024, 66, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 72],"float16"), y=Tensor([4, 1024, 66, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 72],"float32"), y=Tensor([4, 1024, 66, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 74],"float16"), y=Tensor([4, 1024, 66, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 74],"float32"), y=Tensor([4, 1024, 66, 74],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 75],"float16"), y=Tensor([4, 1024, 66, 75],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 75],"float32"), y=Tensor([4, 1024, 66, 75],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 76],"float16"), y=Tensor([4, 1024, 66, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 76],"float32"), y=Tensor([4, 1024, 66, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 78],"float16"), y=Tensor([4, 1024, 66, 78],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 78],"float32"), y=Tensor([4, 1024, 66, 78],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 80],"float16"), y=Tensor([4, 1024, 66, 80],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 80],"float32"), y=Tensor([4, 1024, 66, 80],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 82],"float16"), y=Tensor([4, 1024, 66, 82],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 82],"float32"), y=Tensor([4, 1024, 66, 82],"float32"), )
paddle.add(x=Tensor([4, 1024, 66, 84],"float16"), y=Tensor([4, 1024, 66, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 66, 84],"float32"), y=Tensor([4, 1024, 66, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 67, 54],"float16"), y=Tensor([4, 1024, 67, 54],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 54],"float32"), y=Tensor([4, 1024, 67, 54],"float32"), )
paddle.add(x=Tensor([4, 1024, 67, 57],"float16"), y=Tensor([4, 1024, 67, 57],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 61],"float16"), y=Tensor([4, 1024, 67, 61],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 62],"float16"), y=Tensor([4, 1024, 67, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 63],"float16"), y=Tensor([4, 1024, 67, 63],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 64],"float16"), y=Tensor([4, 1024, 67, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 67],"float16"), y=Tensor([4, 1024, 67, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 68],"float16"), y=Tensor([4, 1024, 67, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 68],"float32"), y=Tensor([4, 1024, 67, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 67, 69],"float16"), y=Tensor([4, 1024, 67, 69],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 70],"float16"), y=Tensor([4, 1024, 67, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 72],"float16"), y=Tensor([4, 1024, 67, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 72],"float32"), y=Tensor([4, 1024, 67, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 67, 73],"float16"), y=Tensor([4, 1024, 67, 73],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 73],"float32"), y=Tensor([4, 1024, 67, 73],"float32"), )
paddle.add(x=Tensor([4, 1024, 67, 75],"float16"), y=Tensor([4, 1024, 67, 75],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 76],"float16"), y=Tensor([4, 1024, 67, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 76],"float32"), y=Tensor([4, 1024, 67, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 67, 80],"float16"), y=Tensor([4, 1024, 67, 80],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 80],"float32"), y=Tensor([4, 1024, 67, 80],"float32"), )
paddle.add(x=Tensor([4, 1024, 67, 83],"float16"), y=Tensor([4, 1024, 67, 83],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 84],"float16"), y=Tensor([4, 1024, 67, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 67, 84],"float32"), y=Tensor([4, 1024, 67, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 68, 44],"float16"), y=Tensor([4, 1024, 68, 44],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 48],"float16"), y=Tensor([4, 1024, 68, 48],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 50],"float16"), y=Tensor([4, 1024, 68, 50],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 50],"float32"), y=Tensor([4, 1024, 68, 50],"float32"), )
paddle.add(x=Tensor([4, 1024, 68, 54],"float16"), y=Tensor([4, 1024, 68, 54],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 54],"float32"), y=Tensor([4, 1024, 68, 54],"float32"), )
paddle.add(x=Tensor([4, 1024, 68, 56],"float16"), y=Tensor([4, 1024, 68, 56],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 56],"float32"), y=Tensor([4, 1024, 68, 56],"float32"), )
paddle.add(x=Tensor([4, 1024, 68, 58],"float16"), y=Tensor([4, 1024, 68, 58],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 58],"float32"), y=Tensor([4, 1024, 68, 58],"float32"), )
paddle.add(x=Tensor([4, 1024, 68, 60],"float16"), y=Tensor([4, 1024, 68, 60],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 60],"float32"), y=Tensor([4, 1024, 68, 60],"float32"), )
paddle.add(x=Tensor([4, 1024, 68, 62],"float16"), y=Tensor([4, 1024, 68, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 62],"float32"), y=Tensor([4, 1024, 68, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 68, 64],"float16"), y=Tensor([4, 1024, 68, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 64],"float32"), y=Tensor([4, 1024, 68, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 68, 66],"float16"), y=Tensor([4, 1024, 68, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 68],"float16"), y=Tensor([4, 1024, 68, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 68],"float32"), y=Tensor([4, 1024, 68, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 68, 70],"float16"), y=Tensor([4, 1024, 68, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 70],"float32"), y=Tensor([4, 1024, 68, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 68, 72],"float16"), y=Tensor([4, 1024, 68, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 72],"float32"), y=Tensor([4, 1024, 68, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 68, 74],"float16"), y=Tensor([4, 1024, 68, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 74],"float32"), y=Tensor([4, 1024, 68, 74],"float32"), )
paddle.add(x=Tensor([4, 1024, 68, 76],"float16"), y=Tensor([4, 1024, 68, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 76],"float32"), y=Tensor([4, 1024, 68, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 68, 78],"float16"), y=Tensor([4, 1024, 68, 78],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 78],"float32"), y=Tensor([4, 1024, 68, 78],"float32"), )
paddle.add(x=Tensor([4, 1024, 68, 80],"float16"), y=Tensor([4, 1024, 68, 80],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 80],"float32"), y=Tensor([4, 1024, 68, 80],"float32"), )
paddle.add(x=Tensor([4, 1024, 68, 82],"float16"), y=Tensor([4, 1024, 68, 82],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 82],"float32"), y=Tensor([4, 1024, 68, 82],"float32"), )
paddle.add(x=Tensor([4, 1024, 68, 84],"float16"), y=Tensor([4, 1024, 68, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 68, 84],"float32"), y=Tensor([4, 1024, 68, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 69, 48],"float16"), y=Tensor([4, 1024, 69, 48],"float16"), )
paddle.add(x=Tensor([4, 1024, 69, 48],"float32"), y=Tensor([4, 1024, 69, 48],"float32"), )
paddle.add(x=Tensor([4, 1024, 69, 56],"float16"), y=Tensor([4, 1024, 69, 56],"float16"), )
paddle.add(x=Tensor([4, 1024, 69, 59],"float16"), y=Tensor([4, 1024, 69, 59],"float16"), )
paddle.add(x=Tensor([4, 1024, 69, 64],"float16"), y=Tensor([4, 1024, 69, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 69, 64],"float32"), y=Tensor([4, 1024, 69, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 69, 67],"float16"), y=Tensor([4, 1024, 69, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 69, 67],"float32"), y=Tensor([4, 1024, 69, 67],"float32"), )
paddle.add(x=Tensor([4, 1024, 69, 69],"float16"), y=Tensor([4, 1024, 69, 69],"float16"), )
paddle.add(x=Tensor([4, 1024, 69, 72],"float16"), y=Tensor([4, 1024, 69, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 69, 72],"float32"), y=Tensor([4, 1024, 69, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 69, 73],"float16"), y=Tensor([4, 1024, 69, 73],"float16"), )
paddle.add(x=Tensor([4, 1024, 69, 75],"float16"), y=Tensor([4, 1024, 69, 75],"float16"), )
paddle.add(x=Tensor([4, 1024, 69, 75],"float32"), y=Tensor([4, 1024, 69, 75],"float32"), )
paddle.add(x=Tensor([4, 1024, 69, 76],"float16"), y=Tensor([4, 1024, 69, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 69, 76],"float32"), y=Tensor([4, 1024, 69, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 69, 84],"float16"), y=Tensor([4, 1024, 69, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 69, 84],"float32"), y=Tensor([4, 1024, 69, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 70, 48],"float16"), y=Tensor([4, 1024, 70, 48],"float16"), )
paddle.add(x=Tensor([4, 1024, 70, 48],"float32"), y=Tensor([4, 1024, 70, 48],"float32"), )
paddle.add(x=Tensor([4, 1024, 70, 56],"float16"), y=Tensor([4, 1024, 70, 56],"float16"), )
paddle.add(x=Tensor([4, 1024, 70, 56],"float32"), y=Tensor([4, 1024, 70, 56],"float32"), )
paddle.add(x=Tensor([4, 1024, 70, 60],"float16"), y=Tensor([4, 1024, 70, 60],"float16"), )
paddle.add(x=Tensor([4, 1024, 70, 60],"float32"), y=Tensor([4, 1024, 70, 60],"float32"), )
paddle.add(x=Tensor([4, 1024, 70, 62],"float16"), y=Tensor([4, 1024, 70, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 70, 62],"float32"), y=Tensor([4, 1024, 70, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 70, 63],"float16"), y=Tensor([4, 1024, 70, 63],"float16"), )
paddle.add(x=Tensor([4, 1024, 70, 64],"float16"), y=Tensor([4, 1024, 70, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 70, 64],"float32"), y=Tensor([4, 1024, 70, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 70, 66],"float16"), y=Tensor([4, 1024, 70, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 70, 66],"float32"), y=Tensor([4, 1024, 70, 66],"float32"), )
paddle.add(x=Tensor([4, 1024, 70, 68],"float16"), y=Tensor([4, 1024, 70, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 70, 68],"float32"), y=Tensor([4, 1024, 70, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 70, 70],"float16"), y=Tensor([4, 1024, 70, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 70, 70],"float32"), y=Tensor([4, 1024, 70, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 70, 71],"float16"), y=Tensor([4, 1024, 70, 71],"float16"), )
paddle.add(x=Tensor([4, 1024, 70, 72],"float16"), y=Tensor([4, 1024, 70, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 70, 72],"float32"), y=Tensor([4, 1024, 70, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 70, 74],"float16"), y=Tensor([4, 1024, 70, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 70, 74],"float32"), y=Tensor([4, 1024, 70, 74],"float32"), )
paddle.add(x=Tensor([4, 1024, 70, 76],"float16"), y=Tensor([4, 1024, 70, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 70, 76],"float32"), y=Tensor([4, 1024, 70, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 70, 78],"float16"), y=Tensor([4, 1024, 70, 78],"float16"), )
paddle.add(x=Tensor([4, 1024, 70, 78],"float32"), y=Tensor([4, 1024, 70, 78],"float32"), )
paddle.add(x=Tensor([4, 1024, 70, 82],"float16"), y=Tensor([4, 1024, 70, 82],"float16"), )
paddle.add(x=Tensor([4, 1024, 70, 84],"float16"), y=Tensor([4, 1024, 70, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 70, 84],"float32"), y=Tensor([4, 1024, 70, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 71, 64],"float16"), y=Tensor([4, 1024, 71, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 71, 64],"float32"), y=Tensor([4, 1024, 71, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 71, 66],"float16"), y=Tensor([4, 1024, 71, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 71, 66],"float32"), y=Tensor([4, 1024, 71, 66],"float32"), )
paddle.add(x=Tensor([4, 1024, 71, 71],"float16"), y=Tensor([4, 1024, 71, 71],"float16"), )
paddle.add(x=Tensor([4, 1024, 71, 78],"float16"), y=Tensor([4, 1024, 71, 78],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 48],"float32"), y=Tensor([4, 1024, 72, 48],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 50],"float32"), y=Tensor([4, 1024, 72, 50],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 54],"float16"), y=Tensor([4, 1024, 72, 54],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 54],"float32"), y=Tensor([4, 1024, 72, 54],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 56],"float16"), y=Tensor([4, 1024, 72, 56],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 56],"float32"), y=Tensor([4, 1024, 72, 56],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 59],"float16"), y=Tensor([4, 1024, 72, 59],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 59],"float32"), y=Tensor([4, 1024, 72, 59],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 60],"float16"), y=Tensor([4, 1024, 72, 60],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 60],"float32"), y=Tensor([4, 1024, 72, 60],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 62],"float16"), y=Tensor([4, 1024, 72, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 62],"float32"), y=Tensor([4, 1024, 72, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 64],"float16"), y=Tensor([4, 1024, 72, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 64],"float32"), y=Tensor([4, 1024, 72, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 66],"float16"), y=Tensor([4, 1024, 72, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 66],"float32"), y=Tensor([4, 1024, 72, 66],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 67],"float16"), y=Tensor([4, 1024, 72, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 67],"float32"), y=Tensor([4, 1024, 72, 67],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 68],"float16"), y=Tensor([4, 1024, 72, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 68],"float32"), y=Tensor([4, 1024, 72, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 69],"float16"), y=Tensor([4, 1024, 72, 69],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 70],"float16"), y=Tensor([4, 1024, 72, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 70],"float32"), y=Tensor([4, 1024, 72, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 72],"float16"), y=Tensor([4, 1024, 72, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 72],"float32"), y=Tensor([4, 1024, 72, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 74],"float16"), y=Tensor([4, 1024, 72, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 76],"float16"), y=Tensor([4, 1024, 72, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 76],"float32"), y=Tensor([4, 1024, 72, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 78],"float16"), y=Tensor([4, 1024, 72, 78],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 78],"float32"), y=Tensor([4, 1024, 72, 78],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 80],"float32"), y=Tensor([4, 1024, 72, 80],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 82],"float16"), y=Tensor([4, 1024, 72, 82],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 82],"float32"), y=Tensor([4, 1024, 72, 82],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 84],"float16"), y=Tensor([4, 1024, 72, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 72, 84],"float32"), y=Tensor([4, 1024, 72, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 72, 88],"float32"), y=Tensor([4, 1024, 72, 88],"float32"), )
paddle.add(x=Tensor([4, 1024, 73, 64],"float16"), y=Tensor([4, 1024, 73, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 73, 66],"float16"), y=Tensor([4, 1024, 73, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 73, 67],"float16"), y=Tensor([4, 1024, 73, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 73, 67],"float32"), y=Tensor([4, 1024, 73, 67],"float32"), )
paddle.add(x=Tensor([4, 1024, 73, 72],"float16"), y=Tensor([4, 1024, 73, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 73, 73],"float16"), y=Tensor([4, 1024, 73, 73],"float16"), )
paddle.add(x=Tensor([4, 1024, 73, 73],"float32"), y=Tensor([4, 1024, 73, 73],"float32"), )
paddle.add(x=Tensor([4, 1024, 73, 75],"float16"), y=Tensor([4, 1024, 73, 75],"float16"), )
paddle.add(x=Tensor([4, 1024, 73, 76],"float16"), y=Tensor([4, 1024, 73, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 73, 80],"float16"), y=Tensor([4, 1024, 73, 80],"float16"), )
paddle.add(x=Tensor([4, 1024, 73, 80],"float32"), y=Tensor([4, 1024, 73, 80],"float32"), )
paddle.add(x=Tensor([4, 1024, 73, 84],"float16"), y=Tensor([4, 1024, 73, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 74, 60],"float16"), y=Tensor([4, 1024, 74, 60],"float16"), )
paddle.add(x=Tensor([4, 1024, 74, 63],"float16"), y=Tensor([4, 1024, 74, 63],"float16"), )
paddle.add(x=Tensor([4, 1024, 74, 63],"float32"), y=Tensor([4, 1024, 74, 63],"float32"), )
paddle.add(x=Tensor([4, 1024, 74, 64],"float16"), y=Tensor([4, 1024, 74, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 74, 64],"float32"), y=Tensor([4, 1024, 74, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 74, 66],"float16"), y=Tensor([4, 1024, 74, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 74, 66],"float32"), y=Tensor([4, 1024, 74, 66],"float32"), )
paddle.add(x=Tensor([4, 1024, 74, 68],"float16"), y=Tensor([4, 1024, 74, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 74, 68],"float32"), y=Tensor([4, 1024, 74, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 74, 69],"float16"), y=Tensor([4, 1024, 74, 69],"float16"), )
paddle.add(x=Tensor([4, 1024, 74, 70],"float16"), y=Tensor([4, 1024, 74, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 74, 70],"float32"), y=Tensor([4, 1024, 74, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 74, 72],"float16"), y=Tensor([4, 1024, 74, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 74, 72],"float32"), y=Tensor([4, 1024, 74, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 74, 74],"float16"), y=Tensor([4, 1024, 74, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 74, 74],"float32"), y=Tensor([4, 1024, 74, 74],"float32"), )
paddle.add(x=Tensor([4, 1024, 74, 76],"float16"), y=Tensor([4, 1024, 74, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 74, 76],"float32"), y=Tensor([4, 1024, 74, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 74, 80],"float16"), y=Tensor([4, 1024, 74, 80],"float16"), )
paddle.add(x=Tensor([4, 1024, 74, 80],"float32"), y=Tensor([4, 1024, 74, 80],"float32"), )
paddle.add(x=Tensor([4, 1024, 74, 82],"float16"), y=Tensor([4, 1024, 74, 82],"float16"), )
paddle.add(x=Tensor([4, 1024, 74, 84],"float16"), y=Tensor([4, 1024, 74, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 74, 84],"float32"), y=Tensor([4, 1024, 74, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 75, 50],"float16"), y=Tensor([4, 1024, 75, 50],"float16"), )
paddle.add(x=Tensor([4, 1024, 75, 50],"float32"), y=Tensor([4, 1024, 75, 50],"float32"), )
paddle.add(x=Tensor([4, 1024, 75, 61],"float16"), y=Tensor([4, 1024, 75, 61],"float16"), )
paddle.add(x=Tensor([4, 1024, 75, 61],"float32"), y=Tensor([4, 1024, 75, 61],"float32"), )
paddle.add(x=Tensor([4, 1024, 75, 62],"float16"), y=Tensor([4, 1024, 75, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 75, 62],"float32"), y=Tensor([4, 1024, 75, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 75, 64],"float16"), y=Tensor([4, 1024, 75, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 75, 64],"float32"), y=Tensor([4, 1024, 75, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 75, 67],"float16"), y=Tensor([4, 1024, 75, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 75, 69],"float16"), y=Tensor([4, 1024, 75, 69],"float16"), )
paddle.add(x=Tensor([4, 1024, 75, 70],"float16"), y=Tensor([4, 1024, 75, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 75, 70],"float32"), y=Tensor([4, 1024, 75, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 75, 72],"float16"), y=Tensor([4, 1024, 75, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 75, 72],"float32"), y=Tensor([4, 1024, 75, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 75, 73],"float16"), y=Tensor([4, 1024, 75, 73],"float16"), )
paddle.add(x=Tensor([4, 1024, 75, 73],"float32"), y=Tensor([4, 1024, 75, 73],"float32"), )
paddle.add(x=Tensor([4, 1024, 75, 75],"float16"), y=Tensor([4, 1024, 75, 75],"float16"), )
paddle.add(x=Tensor([4, 1024, 75, 75],"float32"), y=Tensor([4, 1024, 75, 75],"float32"), )
paddle.add(x=Tensor([4, 1024, 75, 84],"float16"), y=Tensor([4, 1024, 75, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 50],"float16"), y=Tensor([4, 1024, 76, 50],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 50],"float32"), y=Tensor([4, 1024, 76, 50],"float32"), )
paddle.add(x=Tensor([4, 1024, 76, 54],"float16"), y=Tensor([4, 1024, 76, 54],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 56],"float16"), y=Tensor([4, 1024, 76, 56],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 60],"float16"), y=Tensor([4, 1024, 76, 60],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 62],"float16"), y=Tensor([4, 1024, 76, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 62],"float32"), y=Tensor([4, 1024, 76, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 76, 63],"float16"), y=Tensor([4, 1024, 76, 63],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 63],"float32"), y=Tensor([4, 1024, 76, 63],"float32"), )
paddle.add(x=Tensor([4, 1024, 76, 64],"float16"), y=Tensor([4, 1024, 76, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 64],"float32"), y=Tensor([4, 1024, 76, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 76, 66],"float16"), y=Tensor([4, 1024, 76, 66],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 66],"float32"), y=Tensor([4, 1024, 76, 66],"float32"), )
paddle.add(x=Tensor([4, 1024, 76, 67],"float16"), y=Tensor([4, 1024, 76, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 67],"float32"), y=Tensor([4, 1024, 76, 67],"float32"), )
paddle.add(x=Tensor([4, 1024, 76, 68],"float16"), y=Tensor([4, 1024, 76, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 68],"float32"), y=Tensor([4, 1024, 76, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 76, 70],"float16"), y=Tensor([4, 1024, 76, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 70],"float32"), y=Tensor([4, 1024, 76, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 76, 72],"float16"), y=Tensor([4, 1024, 76, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 72],"float32"), y=Tensor([4, 1024, 76, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 76, 74],"float16"), y=Tensor([4, 1024, 76, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 74],"float32"), y=Tensor([4, 1024, 76, 74],"float32"), )
paddle.add(x=Tensor([4, 1024, 76, 76],"float16"), y=Tensor([4, 1024, 76, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 76],"float32"), y=Tensor([4, 1024, 76, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 76, 78],"float16"), y=Tensor([4, 1024, 76, 78],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 78],"float32"), y=Tensor([4, 1024, 76, 78],"float32"), )
paddle.add(x=Tensor([4, 1024, 76, 79],"float16"), y=Tensor([4, 1024, 76, 79],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 80],"float16"), y=Tensor([4, 1024, 76, 80],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 80],"float32"), y=Tensor([4, 1024, 76, 80],"float32"), )
paddle.add(x=Tensor([4, 1024, 76, 82],"float16"), y=Tensor([4, 1024, 76, 82],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 82],"float32"), y=Tensor([4, 1024, 76, 82],"float32"), )
paddle.add(x=Tensor([4, 1024, 76, 83],"float16"), y=Tensor([4, 1024, 76, 83],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 83],"float32"), y=Tensor([4, 1024, 76, 83],"float32"), )
paddle.add(x=Tensor([4, 1024, 76, 84],"float16"), y=Tensor([4, 1024, 76, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 76, 84],"float32"), y=Tensor([4, 1024, 76, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 77, 56],"float16"), y=Tensor([4, 1024, 77, 56],"float16"), )
paddle.add(x=Tensor([4, 1024, 77, 62],"float16"), y=Tensor([4, 1024, 77, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 77, 62],"float32"), y=Tensor([4, 1024, 77, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 77, 69],"float16"), y=Tensor([4, 1024, 77, 69],"float16"), )
paddle.add(x=Tensor([4, 1024, 78, 56],"float16"), y=Tensor([4, 1024, 78, 56],"float16"), )
paddle.add(x=Tensor([4, 1024, 78, 56],"float32"), y=Tensor([4, 1024, 78, 56],"float32"), )
paddle.add(x=Tensor([4, 1024, 78, 60],"float16"), y=Tensor([4, 1024, 78, 60],"float16"), )
paddle.add(x=Tensor([4, 1024, 78, 62],"float16"), y=Tensor([4, 1024, 78, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 78, 62],"float32"), y=Tensor([4, 1024, 78, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 78, 68],"float16"), y=Tensor([4, 1024, 78, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 78, 68],"float32"), y=Tensor([4, 1024, 78, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 78, 70],"float16"), y=Tensor([4, 1024, 78, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 78, 70],"float32"), y=Tensor([4, 1024, 78, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 78, 74],"float16"), y=Tensor([4, 1024, 78, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 78, 74],"float32"), y=Tensor([4, 1024, 78, 74],"float32"), )
paddle.add(x=Tensor([4, 1024, 78, 76],"float16"), y=Tensor([4, 1024, 78, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 78, 76],"float32"), y=Tensor([4, 1024, 78, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 78, 84],"float16"), y=Tensor([4, 1024, 78, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 78, 84],"float32"), y=Tensor([4, 1024, 78, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 79, 67],"float16"), y=Tensor([4, 1024, 79, 67],"float16"), )
paddle.add(x=Tensor([4, 1024, 79, 72],"float16"), y=Tensor([4, 1024, 79, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 80, 56],"float32"), y=Tensor([4, 1024, 80, 56],"float32"), )
paddle.add(x=Tensor([4, 1024, 80, 64],"float16"), y=Tensor([4, 1024, 80, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 80, 64],"float32"), y=Tensor([4, 1024, 80, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 80, 68],"float16"), y=Tensor([4, 1024, 80, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 80, 68],"float32"), y=Tensor([4, 1024, 80, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 80, 72],"float16"), y=Tensor([4, 1024, 80, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 80, 72],"float32"), y=Tensor([4, 1024, 80, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 80, 76],"float16"), y=Tensor([4, 1024, 80, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 80, 76],"float32"), y=Tensor([4, 1024, 80, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 80, 80],"float16"), y=Tensor([4, 1024, 80, 80],"float16"), )
paddle.add(x=Tensor([4, 1024, 80, 80],"float32"), y=Tensor([4, 1024, 80, 80],"float32"), )
paddle.add(x=Tensor([4, 1024, 82, 50],"float16"), y=Tensor([4, 1024, 82, 50],"float16"), )
paddle.add(x=Tensor([4, 1024, 82, 61],"float16"), y=Tensor([4, 1024, 82, 61],"float16"), )
paddle.add(x=Tensor([4, 1024, 82, 62],"float16"), y=Tensor([4, 1024, 82, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 82, 62],"float32"), y=Tensor([4, 1024, 82, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 82, 64],"float16"), y=Tensor([4, 1024, 82, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 82, 68],"float16"), y=Tensor([4, 1024, 82, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 82, 70],"float16"), y=Tensor([4, 1024, 82, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 82, 74],"float16"), y=Tensor([4, 1024, 82, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 82, 74],"float32"), y=Tensor([4, 1024, 82, 74],"float32"), )
paddle.add(x=Tensor([4, 1024, 82, 76],"float16"), y=Tensor([4, 1024, 82, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 82, 76],"float32"), y=Tensor([4, 1024, 82, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 82, 84],"float16"), y=Tensor([4, 1024, 82, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 82, 84],"float32"), y=Tensor([4, 1024, 82, 84],"float32"), )
paddle.add(x=Tensor([4, 1024, 84, 50],"float16"), y=Tensor([4, 1024, 84, 50],"float16"), )
paddle.add(x=Tensor([4, 1024, 84, 50],"float32"), y=Tensor([4, 1024, 84, 50],"float32"), )
paddle.add(x=Tensor([4, 1024, 84, 60],"float16"), y=Tensor([4, 1024, 84, 60],"float16"), )
paddle.add(x=Tensor([4, 1024, 84, 60],"float32"), y=Tensor([4, 1024, 84, 60],"float32"), )
paddle.add(x=Tensor([4, 1024, 84, 62],"float16"), y=Tensor([4, 1024, 84, 62],"float16"), )
paddle.add(x=Tensor([4, 1024, 84, 62],"float32"), y=Tensor([4, 1024, 84, 62],"float32"), )
paddle.add(x=Tensor([4, 1024, 84, 64],"float16"), y=Tensor([4, 1024, 84, 64],"float16"), )
paddle.add(x=Tensor([4, 1024, 84, 64],"float32"), y=Tensor([4, 1024, 84, 64],"float32"), )
paddle.add(x=Tensor([4, 1024, 84, 68],"float16"), y=Tensor([4, 1024, 84, 68],"float16"), )
paddle.add(x=Tensor([4, 1024, 84, 68],"float32"), y=Tensor([4, 1024, 84, 68],"float32"), )
paddle.add(x=Tensor([4, 1024, 84, 70],"float16"), y=Tensor([4, 1024, 84, 70],"float16"), )
paddle.add(x=Tensor([4, 1024, 84, 70],"float32"), y=Tensor([4, 1024, 84, 70],"float32"), )
paddle.add(x=Tensor([4, 1024, 84, 72],"float16"), y=Tensor([4, 1024, 84, 72],"float16"), )
paddle.add(x=Tensor([4, 1024, 84, 72],"float32"), y=Tensor([4, 1024, 84, 72],"float32"), )
paddle.add(x=Tensor([4, 1024, 84, 74],"float16"), y=Tensor([4, 1024, 84, 74],"float16"), )
paddle.add(x=Tensor([4, 1024, 84, 76],"float16"), y=Tensor([4, 1024, 84, 76],"float16"), )
paddle.add(x=Tensor([4, 1024, 84, 76],"float32"), y=Tensor([4, 1024, 84, 76],"float32"), )
paddle.add(x=Tensor([4, 1024, 84, 78],"float16"), y=Tensor([4, 1024, 84, 78],"float16"), )
paddle.add(x=Tensor([4, 1024, 84, 78],"float32"), y=Tensor([4, 1024, 84, 78],"float32"), )
paddle.add(x=Tensor([4, 1024, 84, 80],"float16"), y=Tensor([4, 1024, 84, 80],"float16"), )
paddle.add(x=Tensor([4, 1024, 84, 84],"float16"), y=Tensor([4, 1024, 84, 84],"float16"), )
paddle.add(x=Tensor([4, 1024, 84, 84],"float32"), y=Tensor([4, 1024, 84, 84],"float32"), )
paddle.add(x=Tensor([4, 128, 124, 92],"float32"), y=Tensor([4, 128, 124, 92],"float32"), )
paddle.add(x=Tensor([4, 128, 128, 112],"float32"), y=Tensor([4, 128, 128, 112],"float32"), )
paddle.add(x=Tensor([4, 128, 128, 128],"float32"), y=Tensor([4, 128, 128, 128],"float32"), )
paddle.add(x=Tensor([4, 128, 128, 164],"float32"), y=Tensor([4, 128, 128, 164],"float32"), )
paddle.add(x=Tensor([4, 128, 128, 96],"float32"), y=Tensor([4, 128, 128, 96],"float32"), )
paddle.add(x=Tensor([4, 128, 136, 100],"float32"), y=Tensor([4, 128, 136, 100],"float32"), )
paddle.add(x=Tensor([4, 128, 144, 116],"float32"), y=Tensor([4, 128, 144, 116],"float32"), )
paddle.add(x=Tensor([4, 128, 152, 152],"float32"), y=Tensor([4, 128, 152, 152],"float32"), )
paddle.add(x=Tensor([4, 128, 64, 64],"float32"), y=Tensor([4, 128, 64, 64],"float32"), )
paddle.add(x=Tensor([4, 128, 80, 80],"float32"), y=Tensor([4, 128, 80, 80],"float32"), )
paddle.add(x=Tensor([4, 2048, 16, 16],"float32"), y=Tensor([4, 2048, 16, 16],"float32"), )
paddle.add(x=Tensor([4, 2048, 21, 31],"float16"), y=Tensor([4, 2048, 21, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 21, 32],"float16"), y=Tensor([4, 2048, 21, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 21, 32],"float32"), y=Tensor([4, 2048, 21, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 22, 30],"float16"), y=Tensor([4, 2048, 22, 30],"float16"), )
paddle.add(x=Tensor([4, 2048, 22, 30],"float32"), y=Tensor([4, 2048, 22, 30],"float32"), )
paddle.add(x=Tensor([4, 2048, 22, 32],"float16"), y=Tensor([4, 2048, 22, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 22, 33],"float16"), y=Tensor([4, 2048, 22, 33],"float16"), )
paddle.add(x=Tensor([4, 2048, 22, 33],"float32"), y=Tensor([4, 2048, 22, 33],"float32"), )
paddle.add(x=Tensor([4, 2048, 22, 34],"float16"), y=Tensor([4, 2048, 22, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 22, 34],"float32"), y=Tensor([4, 2048, 22, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 22, 37],"float16"), y=Tensor([4, 2048, 22, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 22, 42],"float16"), y=Tensor([4, 2048, 22, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 22, 42],"float32"), y=Tensor([4, 2048, 22, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 23, 30],"float16"), y=Tensor([4, 2048, 23, 30],"float16"), )
paddle.add(x=Tensor([4, 2048, 23, 31],"float16"), y=Tensor([4, 2048, 23, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 23, 31],"float32"), y=Tensor([4, 2048, 23, 31],"float32"), )
paddle.add(x=Tensor([4, 2048, 23, 32],"float16"), y=Tensor([4, 2048, 23, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 23, 32],"float32"), y=Tensor([4, 2048, 23, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 23, 34],"float16"), y=Tensor([4, 2048, 23, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 23, 34],"float32"), y=Tensor([4, 2048, 23, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 23, 35],"float16"), y=Tensor([4, 2048, 23, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 23, 35],"float32"), y=Tensor([4, 2048, 23, 35],"float32"), )
paddle.add(x=Tensor([4, 2048, 23, 37],"float16"), y=Tensor([4, 2048, 23, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 23, 37],"float32"), y=Tensor([4, 2048, 23, 37],"float32"), )
paddle.add(x=Tensor([4, 2048, 23, 38],"float16"), y=Tensor([4, 2048, 23, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 23, 38],"float32"), y=Tensor([4, 2048, 23, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 23, 39],"float16"), y=Tensor([4, 2048, 23, 39],"float16"), )
paddle.add(x=Tensor([4, 2048, 23, 39],"float32"), y=Tensor([4, 2048, 23, 39],"float32"), )
paddle.add(x=Tensor([4, 2048, 23, 40],"float16"), y=Tensor([4, 2048, 23, 40],"float16"), )
paddle.add(x=Tensor([4, 2048, 23, 40],"float32"), y=Tensor([4, 2048, 23, 40],"float32"), )
paddle.add(x=Tensor([4, 2048, 23, 41],"float16"), y=Tensor([4, 2048, 23, 41],"float16"), )
paddle.add(x=Tensor([4, 2048, 23, 41],"float32"), y=Tensor([4, 2048, 23, 41],"float32"), )
paddle.add(x=Tensor([4, 2048, 23, 42],"float16"), y=Tensor([4, 2048, 23, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 23, 42],"float32"), y=Tensor([4, 2048, 23, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 24, 30],"float16"), y=Tensor([4, 2048, 24, 30],"float16"), )
paddle.add(x=Tensor([4, 2048, 24, 31],"float16"), y=Tensor([4, 2048, 24, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 24, 31],"float32"), y=Tensor([4, 2048, 24, 31],"float32"), )
paddle.add(x=Tensor([4, 2048, 24, 32],"float16"), y=Tensor([4, 2048, 24, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 24, 32],"float32"), y=Tensor([4, 2048, 24, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 24, 33],"float16"), y=Tensor([4, 2048, 24, 33],"float16"), )
paddle.add(x=Tensor([4, 2048, 24, 33],"float32"), y=Tensor([4, 2048, 24, 33],"float32"), )
paddle.add(x=Tensor([4, 2048, 24, 34],"float16"), y=Tensor([4, 2048, 24, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 24, 34],"float32"), y=Tensor([4, 2048, 24, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 24, 35],"float16"), y=Tensor([4, 2048, 24, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 24, 35],"float32"), y=Tensor([4, 2048, 24, 35],"float32"), )
paddle.add(x=Tensor([4, 2048, 24, 36],"float16"), y=Tensor([4, 2048, 24, 36],"float16"), )
paddle.add(x=Tensor([4, 2048, 24, 36],"float32"), y=Tensor([4, 2048, 24, 36],"float32"), )
paddle.add(x=Tensor([4, 2048, 24, 37],"float16"), y=Tensor([4, 2048, 24, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 24, 37],"float32"), y=Tensor([4, 2048, 24, 37],"float32"), )
paddle.add(x=Tensor([4, 2048, 24, 38],"float16"), y=Tensor([4, 2048, 24, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 24, 38],"float32"), y=Tensor([4, 2048, 24, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 24, 40],"float16"), y=Tensor([4, 2048, 24, 40],"float16"), )
paddle.add(x=Tensor([4, 2048, 24, 41],"float16"), y=Tensor([4, 2048, 24, 41],"float16"), )
paddle.add(x=Tensor([4, 2048, 24, 42],"float16"), y=Tensor([4, 2048, 24, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 24, 42],"float32"), y=Tensor([4, 2048, 24, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 25, 29],"float32"), y=Tensor([4, 2048, 25, 29],"float32"), )
paddle.add(x=Tensor([4, 2048, 25, 30],"float16"), y=Tensor([4, 2048, 25, 30],"float16"), )
paddle.add(x=Tensor([4, 2048, 25, 30],"float32"), y=Tensor([4, 2048, 25, 30],"float32"), )
paddle.add(x=Tensor([4, 2048, 25, 31],"float16"), y=Tensor([4, 2048, 25, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 25, 31],"float32"), y=Tensor([4, 2048, 25, 31],"float32"), )
paddle.add(x=Tensor([4, 2048, 25, 32],"float16"), y=Tensor([4, 2048, 25, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 25, 32],"float32"), y=Tensor([4, 2048, 25, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 25, 33],"float16"), y=Tensor([4, 2048, 25, 33],"float16"), )
paddle.add(x=Tensor([4, 2048, 25, 34],"float16"), y=Tensor([4, 2048, 25, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 25, 34],"float32"), y=Tensor([4, 2048, 25, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 25, 35],"float16"), y=Tensor([4, 2048, 25, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 25, 35],"float32"), y=Tensor([4, 2048, 25, 35],"float32"), )
paddle.add(x=Tensor([4, 2048, 25, 36],"float16"), y=Tensor([4, 2048, 25, 36],"float16"), )
paddle.add(x=Tensor([4, 2048, 25, 36],"float32"), y=Tensor([4, 2048, 25, 36],"float32"), )
paddle.add(x=Tensor([4, 2048, 25, 37],"float16"), y=Tensor([4, 2048, 25, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 25, 37],"float32"), y=Tensor([4, 2048, 25, 37],"float32"), )
paddle.add(x=Tensor([4, 2048, 25, 38],"float16"), y=Tensor([4, 2048, 25, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 25, 38],"float32"), y=Tensor([4, 2048, 25, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 25, 39],"float16"), y=Tensor([4, 2048, 25, 39],"float16"), )
paddle.add(x=Tensor([4, 2048, 25, 39],"float32"), y=Tensor([4, 2048, 25, 39],"float32"), )
paddle.add(x=Tensor([4, 2048, 25, 40],"float16"), y=Tensor([4, 2048, 25, 40],"float16"), )
paddle.add(x=Tensor([4, 2048, 25, 40],"float32"), y=Tensor([4, 2048, 25, 40],"float32"), )
paddle.add(x=Tensor([4, 2048, 25, 41],"float16"), y=Tensor([4, 2048, 25, 41],"float16"), )
paddle.add(x=Tensor([4, 2048, 25, 41],"float32"), y=Tensor([4, 2048, 25, 41],"float32"), )
paddle.add(x=Tensor([4, 2048, 25, 42],"float16"), y=Tensor([4, 2048, 25, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 25, 42],"float32"), y=Tensor([4, 2048, 25, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 26, 32],"float16"), y=Tensor([4, 2048, 26, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 26, 34],"float16"), y=Tensor([4, 2048, 26, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 26, 36],"float16"), y=Tensor([4, 2048, 26, 36],"float16"), )
paddle.add(x=Tensor([4, 2048, 26, 36],"float32"), y=Tensor([4, 2048, 26, 36],"float32"), )
paddle.add(x=Tensor([4, 2048, 26, 37],"float16"), y=Tensor([4, 2048, 26, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 26, 37],"float32"), y=Tensor([4, 2048, 26, 37],"float32"), )
paddle.add(x=Tensor([4, 2048, 26, 38],"float16"), y=Tensor([4, 2048, 26, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 26, 38],"float32"), y=Tensor([4, 2048, 26, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 26, 41],"float16"), y=Tensor([4, 2048, 26, 41],"float16"), )
paddle.add(x=Tensor([4, 2048, 26, 41],"float32"), y=Tensor([4, 2048, 26, 41],"float32"), )
paddle.add(x=Tensor([4, 2048, 26, 42],"float16"), y=Tensor([4, 2048, 26, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 26, 42],"float32"), y=Tensor([4, 2048, 26, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 27, 28],"float16"), y=Tensor([4, 2048, 27, 28],"float16"), )
paddle.add(x=Tensor([4, 2048, 27, 28],"float32"), y=Tensor([4, 2048, 27, 28],"float32"), )
paddle.add(x=Tensor([4, 2048, 27, 31],"float16"), y=Tensor([4, 2048, 27, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 27, 31],"float32"), y=Tensor([4, 2048, 27, 31],"float32"), )
paddle.add(x=Tensor([4, 2048, 27, 32],"float16"), y=Tensor([4, 2048, 27, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 27, 32],"float32"), y=Tensor([4, 2048, 27, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 27, 33],"float16"), y=Tensor([4, 2048, 27, 33],"float16"), )
paddle.add(x=Tensor([4, 2048, 27, 33],"float32"), y=Tensor([4, 2048, 27, 33],"float32"), )
paddle.add(x=Tensor([4, 2048, 27, 34],"float16"), y=Tensor([4, 2048, 27, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 27, 34],"float32"), y=Tensor([4, 2048, 27, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 27, 35],"float16"), y=Tensor([4, 2048, 27, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 27, 35],"float32"), y=Tensor([4, 2048, 27, 35],"float32"), )
paddle.add(x=Tensor([4, 2048, 27, 36],"float16"), y=Tensor([4, 2048, 27, 36],"float16"), )
paddle.add(x=Tensor([4, 2048, 27, 36],"float32"), y=Tensor([4, 2048, 27, 36],"float32"), )
paddle.add(x=Tensor([4, 2048, 27, 37],"float16"), y=Tensor([4, 2048, 27, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 27, 37],"float32"), y=Tensor([4, 2048, 27, 37],"float32"), )
paddle.add(x=Tensor([4, 2048, 27, 38],"float16"), y=Tensor([4, 2048, 27, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 27, 38],"float32"), y=Tensor([4, 2048, 27, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 27, 39],"float16"), y=Tensor([4, 2048, 27, 39],"float16"), )
paddle.add(x=Tensor([4, 2048, 27, 39],"float32"), y=Tensor([4, 2048, 27, 39],"float32"), )
paddle.add(x=Tensor([4, 2048, 27, 42],"float16"), y=Tensor([4, 2048, 27, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 27, 42],"float32"), y=Tensor([4, 2048, 27, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 28, 30],"float32"), y=Tensor([4, 2048, 28, 30],"float32"), )
paddle.add(x=Tensor([4, 2048, 28, 31],"float16"), y=Tensor([4, 2048, 28, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 28, 31],"float32"), y=Tensor([4, 2048, 28, 31],"float32"), )
paddle.add(x=Tensor([4, 2048, 28, 32],"float16"), y=Tensor([4, 2048, 28, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 28, 32],"float32"), y=Tensor([4, 2048, 28, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 28, 33],"float16"), y=Tensor([4, 2048, 28, 33],"float16"), )
paddle.add(x=Tensor([4, 2048, 28, 33],"float32"), y=Tensor([4, 2048, 28, 33],"float32"), )
paddle.add(x=Tensor([4, 2048, 28, 34],"float16"), y=Tensor([4, 2048, 28, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 28, 34],"float32"), y=Tensor([4, 2048, 28, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 28, 35],"float16"), y=Tensor([4, 2048, 28, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 28, 35],"float32"), y=Tensor([4, 2048, 28, 35],"float32"), )
paddle.add(x=Tensor([4, 2048, 28, 36],"float16"), y=Tensor([4, 2048, 28, 36],"float16"), )
paddle.add(x=Tensor([4, 2048, 28, 36],"float32"), y=Tensor([4, 2048, 28, 36],"float32"), )
paddle.add(x=Tensor([4, 2048, 28, 37],"float16"), y=Tensor([4, 2048, 28, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 28, 37],"float32"), y=Tensor([4, 2048, 28, 37],"float32"), )
paddle.add(x=Tensor([4, 2048, 28, 38],"float16"), y=Tensor([4, 2048, 28, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 28, 38],"float32"), y=Tensor([4, 2048, 28, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 28, 39],"float16"), y=Tensor([4, 2048, 28, 39],"float16"), )
paddle.add(x=Tensor([4, 2048, 28, 40],"float16"), y=Tensor([4, 2048, 28, 40],"float16"), )
paddle.add(x=Tensor([4, 2048, 28, 40],"float32"), y=Tensor([4, 2048, 28, 40],"float32"), )
paddle.add(x=Tensor([4, 2048, 28, 41],"float16"), y=Tensor([4, 2048, 28, 41],"float16"), )
paddle.add(x=Tensor([4, 2048, 28, 41],"float32"), y=Tensor([4, 2048, 28, 41],"float32"), )
paddle.add(x=Tensor([4, 2048, 28, 42],"float16"), y=Tensor([4, 2048, 28, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 29, 32],"float16"), y=Tensor([4, 2048, 29, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 29, 32],"float32"), y=Tensor([4, 2048, 29, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 29, 33],"float16"), y=Tensor([4, 2048, 29, 33],"float16"), )
paddle.add(x=Tensor([4, 2048, 29, 33],"float32"), y=Tensor([4, 2048, 29, 33],"float32"), )
paddle.add(x=Tensor([4, 2048, 29, 34],"float16"), y=Tensor([4, 2048, 29, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 29, 34],"float32"), y=Tensor([4, 2048, 29, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 29, 38],"float16"), y=Tensor([4, 2048, 29, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 29, 38],"float32"), y=Tensor([4, 2048, 29, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 29, 40],"float16"), y=Tensor([4, 2048, 29, 40],"float16"), )
paddle.add(x=Tensor([4, 2048, 29, 40],"float32"), y=Tensor([4, 2048, 29, 40],"float32"), )
paddle.add(x=Tensor([4, 2048, 29, 42],"float16"), y=Tensor([4, 2048, 29, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 30, 22],"float32"), y=Tensor([4, 2048, 30, 22],"float32"), )
paddle.add(x=Tensor([4, 2048, 30, 26],"float16"), y=Tensor([4, 2048, 30, 26],"float16"), )
paddle.add(x=Tensor([4, 2048, 30, 26],"float32"), y=Tensor([4, 2048, 30, 26],"float32"), )
paddle.add(x=Tensor([4, 2048, 30, 28],"float32"), y=Tensor([4, 2048, 30, 28],"float32"), )
paddle.add(x=Tensor([4, 2048, 30, 30],"float16"), y=Tensor([4, 2048, 30, 30],"float16"), )
paddle.add(x=Tensor([4, 2048, 30, 30],"float32"), y=Tensor([4, 2048, 30, 30],"float32"), )
paddle.add(x=Tensor([4, 2048, 30, 31],"float16"), y=Tensor([4, 2048, 30, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 30, 31],"float32"), y=Tensor([4, 2048, 30, 31],"float32"), )
paddle.add(x=Tensor([4, 2048, 30, 32],"float16"), y=Tensor([4, 2048, 30, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 30, 32],"float32"), y=Tensor([4, 2048, 30, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 30, 34],"float16"), y=Tensor([4, 2048, 30, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 30, 34],"float32"), y=Tensor([4, 2048, 30, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 30, 35],"float16"), y=Tensor([4, 2048, 30, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 30, 35],"float32"), y=Tensor([4, 2048, 30, 35],"float32"), )
paddle.add(x=Tensor([4, 2048, 30, 36],"float16"), y=Tensor([4, 2048, 30, 36],"float16"), )
paddle.add(x=Tensor([4, 2048, 30, 36],"float32"), y=Tensor([4, 2048, 30, 36],"float32"), )
paddle.add(x=Tensor([4, 2048, 30, 37],"float16"), y=Tensor([4, 2048, 30, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 30, 37],"float32"), y=Tensor([4, 2048, 30, 37],"float32"), )
paddle.add(x=Tensor([4, 2048, 30, 38],"float16"), y=Tensor([4, 2048, 30, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 30, 38],"float32"), y=Tensor([4, 2048, 30, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 30, 39],"float16"), y=Tensor([4, 2048, 30, 39],"float16"), )
paddle.add(x=Tensor([4, 2048, 30, 39],"float32"), y=Tensor([4, 2048, 30, 39],"float32"), )
paddle.add(x=Tensor([4, 2048, 30, 40],"float16"), y=Tensor([4, 2048, 30, 40],"float16"), )
paddle.add(x=Tensor([4, 2048, 30, 40],"float32"), y=Tensor([4, 2048, 30, 40],"float32"), )
paddle.add(x=Tensor([4, 2048, 30, 41],"float16"), y=Tensor([4, 2048, 30, 41],"float16"), )
paddle.add(x=Tensor([4, 2048, 30, 41],"float32"), y=Tensor([4, 2048, 30, 41],"float32"), )
paddle.add(x=Tensor([4, 2048, 30, 42],"float16"), y=Tensor([4, 2048, 30, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 30, 42],"float32"), y=Tensor([4, 2048, 30, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 31, 23],"float32"), y=Tensor([4, 2048, 31, 23],"float32"), )
paddle.add(x=Tensor([4, 2048, 31, 24],"float16"), y=Tensor([4, 2048, 31, 24],"float16"), )
paddle.add(x=Tensor([4, 2048, 31, 24],"float32"), y=Tensor([4, 2048, 31, 24],"float32"), )
paddle.add(x=Tensor([4, 2048, 31, 27],"float32"), y=Tensor([4, 2048, 31, 27],"float32"), )
paddle.add(x=Tensor([4, 2048, 31, 28],"float16"), y=Tensor([4, 2048, 31, 28],"float16"), )
paddle.add(x=Tensor([4, 2048, 31, 28],"float32"), y=Tensor([4, 2048, 31, 28],"float32"), )
paddle.add(x=Tensor([4, 2048, 31, 31],"float16"), y=Tensor([4, 2048, 31, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 31, 31],"float32"), y=Tensor([4, 2048, 31, 31],"float32"), )
paddle.add(x=Tensor([4, 2048, 31, 32],"float16"), y=Tensor([4, 2048, 31, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 31, 32],"float32"), y=Tensor([4, 2048, 31, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 31, 33],"float16"), y=Tensor([4, 2048, 31, 33],"float16"), )
paddle.add(x=Tensor([4, 2048, 31, 33],"float32"), y=Tensor([4, 2048, 31, 33],"float32"), )
paddle.add(x=Tensor([4, 2048, 31, 34],"float16"), y=Tensor([4, 2048, 31, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 31, 34],"float32"), y=Tensor([4, 2048, 31, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 31, 35],"float16"), y=Tensor([4, 2048, 31, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 31, 35],"float32"), y=Tensor([4, 2048, 31, 35],"float32"), )
paddle.add(x=Tensor([4, 2048, 31, 36],"float16"), y=Tensor([4, 2048, 31, 36],"float16"), )
paddle.add(x=Tensor([4, 2048, 31, 36],"float32"), y=Tensor([4, 2048, 31, 36],"float32"), )
paddle.add(x=Tensor([4, 2048, 31, 37],"float16"), y=Tensor([4, 2048, 31, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 31, 37],"float32"), y=Tensor([4, 2048, 31, 37],"float32"), )
paddle.add(x=Tensor([4, 2048, 31, 38],"float16"), y=Tensor([4, 2048, 31, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 31, 38],"float32"), y=Tensor([4, 2048, 31, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 31, 39],"float16"), y=Tensor([4, 2048, 31, 39],"float16"), )
paddle.add(x=Tensor([4, 2048, 31, 41],"float16"), y=Tensor([4, 2048, 31, 41],"float16"), )
paddle.add(x=Tensor([4, 2048, 31, 41],"float32"), y=Tensor([4, 2048, 31, 41],"float32"), )
paddle.add(x=Tensor([4, 2048, 31, 42],"float16"), y=Tensor([4, 2048, 31, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 31, 42],"float32"), y=Tensor([4, 2048, 31, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 32, 24],"float32"), y=Tensor([4, 2048, 32, 24],"float32"), )
paddle.add(x=Tensor([4, 2048, 32, 27],"float16"), y=Tensor([4, 2048, 32, 27],"float16"), )
paddle.add(x=Tensor([4, 2048, 32, 28],"float16"), y=Tensor([4, 2048, 32, 28],"float16"), )
paddle.add(x=Tensor([4, 2048, 32, 28],"float32"), y=Tensor([4, 2048, 32, 28],"float32"), )
paddle.add(x=Tensor([4, 2048, 32, 30],"float16"), y=Tensor([4, 2048, 32, 30],"float16"), )
paddle.add(x=Tensor([4, 2048, 32, 30],"float32"), y=Tensor([4, 2048, 32, 30],"float32"), )
paddle.add(x=Tensor([4, 2048, 32, 31],"float16"), y=Tensor([4, 2048, 32, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 32, 31],"float32"), y=Tensor([4, 2048, 32, 31],"float32"), )
paddle.add(x=Tensor([4, 2048, 32, 32],"float16"), y=Tensor([4, 2048, 32, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 32, 32],"float32"), y=Tensor([4, 2048, 32, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 32, 33],"float16"), y=Tensor([4, 2048, 32, 33],"float16"), )
paddle.add(x=Tensor([4, 2048, 32, 33],"float32"), y=Tensor([4, 2048, 32, 33],"float32"), )
paddle.add(x=Tensor([4, 2048, 32, 34],"float16"), y=Tensor([4, 2048, 32, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 32, 34],"float32"), y=Tensor([4, 2048, 32, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 32, 35],"float16"), y=Tensor([4, 2048, 32, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 32, 35],"float32"), y=Tensor([4, 2048, 32, 35],"float32"), )
paddle.add(x=Tensor([4, 2048, 32, 36],"float16"), y=Tensor([4, 2048, 32, 36],"float16"), )
paddle.add(x=Tensor([4, 2048, 32, 36],"float32"), y=Tensor([4, 2048, 32, 36],"float32"), )
paddle.add(x=Tensor([4, 2048, 32, 37],"float16"), y=Tensor([4, 2048, 32, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 32, 37],"float32"), y=Tensor([4, 2048, 32, 37],"float32"), )
paddle.add(x=Tensor([4, 2048, 32, 38],"float16"), y=Tensor([4, 2048, 32, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 32, 38],"float32"), y=Tensor([4, 2048, 32, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 32, 39],"float16"), y=Tensor([4, 2048, 32, 39],"float16"), )
paddle.add(x=Tensor([4, 2048, 32, 39],"float32"), y=Tensor([4, 2048, 32, 39],"float32"), )
paddle.add(x=Tensor([4, 2048, 32, 40],"float16"), y=Tensor([4, 2048, 32, 40],"float16"), )
paddle.add(x=Tensor([4, 2048, 32, 40],"float32"), y=Tensor([4, 2048, 32, 40],"float32"), )
paddle.add(x=Tensor([4, 2048, 32, 41],"float16"), y=Tensor([4, 2048, 32, 41],"float16"), )
paddle.add(x=Tensor([4, 2048, 32, 41],"float32"), y=Tensor([4, 2048, 32, 41],"float32"), )
paddle.add(x=Tensor([4, 2048, 32, 42],"float16"), y=Tensor([4, 2048, 32, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 32, 42],"float32"), y=Tensor([4, 2048, 32, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 33, 24],"float16"), y=Tensor([4, 2048, 33, 24],"float16"), )
paddle.add(x=Tensor([4, 2048, 33, 24],"float32"), y=Tensor([4, 2048, 33, 24],"float32"), )
paddle.add(x=Tensor([4, 2048, 33, 25],"float32"), y=Tensor([4, 2048, 33, 25],"float32"), )
paddle.add(x=Tensor([4, 2048, 33, 26],"float16"), y=Tensor([4, 2048, 33, 26],"float16"), )
paddle.add(x=Tensor([4, 2048, 33, 27],"float16"), y=Tensor([4, 2048, 33, 27],"float16"), )
paddle.add(x=Tensor([4, 2048, 33, 27],"float32"), y=Tensor([4, 2048, 33, 27],"float32"), )
paddle.add(x=Tensor([4, 2048, 33, 31],"float16"), y=Tensor([4, 2048, 33, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 33, 31],"float32"), y=Tensor([4, 2048, 33, 31],"float32"), )
paddle.add(x=Tensor([4, 2048, 33, 32],"float16"), y=Tensor([4, 2048, 33, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 33, 32],"float32"), y=Tensor([4, 2048, 33, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 33, 33],"float16"), y=Tensor([4, 2048, 33, 33],"float16"), )
paddle.add(x=Tensor([4, 2048, 33, 33],"float32"), y=Tensor([4, 2048, 33, 33],"float32"), )
paddle.add(x=Tensor([4, 2048, 33, 34],"float16"), y=Tensor([4, 2048, 33, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 33, 34],"float32"), y=Tensor([4, 2048, 33, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 33, 35],"float16"), y=Tensor([4, 2048, 33, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 33, 35],"float32"), y=Tensor([4, 2048, 33, 35],"float32"), )
paddle.add(x=Tensor([4, 2048, 33, 36],"float16"), y=Tensor([4, 2048, 33, 36],"float16"), )
paddle.add(x=Tensor([4, 2048, 33, 36],"float32"), y=Tensor([4, 2048, 33, 36],"float32"), )
paddle.add(x=Tensor([4, 2048, 33, 37],"float16"), y=Tensor([4, 2048, 33, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 33, 37],"float32"), y=Tensor([4, 2048, 33, 37],"float32"), )
paddle.add(x=Tensor([4, 2048, 33, 38],"float16"), y=Tensor([4, 2048, 33, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 33, 38],"float32"), y=Tensor([4, 2048, 33, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 33, 39],"float16"), y=Tensor([4, 2048, 33, 39],"float16"), )
paddle.add(x=Tensor([4, 2048, 33, 39],"float32"), y=Tensor([4, 2048, 33, 39],"float32"), )
paddle.add(x=Tensor([4, 2048, 33, 40],"float16"), y=Tensor([4, 2048, 33, 40],"float16"), )
paddle.add(x=Tensor([4, 2048, 33, 40],"float32"), y=Tensor([4, 2048, 33, 40],"float32"), )
paddle.add(x=Tensor([4, 2048, 33, 41],"float16"), y=Tensor([4, 2048, 33, 41],"float16"), )
paddle.add(x=Tensor([4, 2048, 33, 41],"float32"), y=Tensor([4, 2048, 33, 41],"float32"), )
paddle.add(x=Tensor([4, 2048, 33, 42],"float16"), y=Tensor([4, 2048, 33, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 33, 42],"float32"), y=Tensor([4, 2048, 33, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 34, 22],"float16"), y=Tensor([4, 2048, 34, 22],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 24],"float16"), y=Tensor([4, 2048, 34, 24],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 25],"float16"), y=Tensor([4, 2048, 34, 25],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 25],"float32"), y=Tensor([4, 2048, 34, 25],"float32"), )
paddle.add(x=Tensor([4, 2048, 34, 27],"float16"), y=Tensor([4, 2048, 34, 27],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 27],"float32"), y=Tensor([4, 2048, 34, 27],"float32"), )
paddle.add(x=Tensor([4, 2048, 34, 28],"float16"), y=Tensor([4, 2048, 34, 28],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 28],"float32"), y=Tensor([4, 2048, 34, 28],"float32"), )
paddle.add(x=Tensor([4, 2048, 34, 29],"float16"), y=Tensor([4, 2048, 34, 29],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 29],"float32"), y=Tensor([4, 2048, 34, 29],"float32"), )
paddle.add(x=Tensor([4, 2048, 34, 30],"float16"), y=Tensor([4, 2048, 34, 30],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 30],"float32"), y=Tensor([4, 2048, 34, 30],"float32"), )
paddle.add(x=Tensor([4, 2048, 34, 31],"float16"), y=Tensor([4, 2048, 34, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 31],"float32"), y=Tensor([4, 2048, 34, 31],"float32"), )
paddle.add(x=Tensor([4, 2048, 34, 32],"float16"), y=Tensor([4, 2048, 34, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 32],"float32"), y=Tensor([4, 2048, 34, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 34, 33],"float16"), y=Tensor([4, 2048, 34, 33],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 34],"float16"), y=Tensor([4, 2048, 34, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 34],"float32"), y=Tensor([4, 2048, 34, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 34, 35],"float16"), y=Tensor([4, 2048, 34, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 35],"float32"), y=Tensor([4, 2048, 34, 35],"float32"), )
paddle.add(x=Tensor([4, 2048, 34, 36],"float16"), y=Tensor([4, 2048, 34, 36],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 36],"float32"), y=Tensor([4, 2048, 34, 36],"float32"), )
paddle.add(x=Tensor([4, 2048, 34, 37],"float16"), y=Tensor([4, 2048, 34, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 37],"float32"), y=Tensor([4, 2048, 34, 37],"float32"), )
paddle.add(x=Tensor([4, 2048, 34, 38],"float16"), y=Tensor([4, 2048, 34, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 38],"float32"), y=Tensor([4, 2048, 34, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 34, 39],"float16"), y=Tensor([4, 2048, 34, 39],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 39],"float32"), y=Tensor([4, 2048, 34, 39],"float32"), )
paddle.add(x=Tensor([4, 2048, 34, 40],"float16"), y=Tensor([4, 2048, 34, 40],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 40],"float32"), y=Tensor([4, 2048, 34, 40],"float32"), )
paddle.add(x=Tensor([4, 2048, 34, 41],"float16"), y=Tensor([4, 2048, 34, 41],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 41],"float32"), y=Tensor([4, 2048, 34, 41],"float32"), )
paddle.add(x=Tensor([4, 2048, 34, 42],"float16"), y=Tensor([4, 2048, 34, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 34, 42],"float32"), y=Tensor([4, 2048, 34, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 35, 24],"float16"), y=Tensor([4, 2048, 35, 24],"float16"), )
paddle.add(x=Tensor([4, 2048, 35, 24],"float32"), y=Tensor([4, 2048, 35, 24],"float32"), )
paddle.add(x=Tensor([4, 2048, 35, 28],"float16"), y=Tensor([4, 2048, 35, 28],"float16"), )
paddle.add(x=Tensor([4, 2048, 35, 28],"float32"), y=Tensor([4, 2048, 35, 28],"float32"), )
paddle.add(x=Tensor([4, 2048, 35, 30],"float16"), y=Tensor([4, 2048, 35, 30],"float16"), )
paddle.add(x=Tensor([4, 2048, 35, 30],"float32"), y=Tensor([4, 2048, 35, 30],"float32"), )
paddle.add(x=Tensor([4, 2048, 35, 31],"float16"), y=Tensor([4, 2048, 35, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 35, 31],"float32"), y=Tensor([4, 2048, 35, 31],"float32"), )
paddle.add(x=Tensor([4, 2048, 35, 32],"float16"), y=Tensor([4, 2048, 35, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 35, 32],"float32"), y=Tensor([4, 2048, 35, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 35, 33],"float16"), y=Tensor([4, 2048, 35, 33],"float16"), )
paddle.add(x=Tensor([4, 2048, 35, 33],"float32"), y=Tensor([4, 2048, 35, 33],"float32"), )
paddle.add(x=Tensor([4, 2048, 35, 34],"float16"), y=Tensor([4, 2048, 35, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 35, 34],"float32"), y=Tensor([4, 2048, 35, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 35, 35],"float16"), y=Tensor([4, 2048, 35, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 35, 35],"float32"), y=Tensor([4, 2048, 35, 35],"float32"), )
paddle.add(x=Tensor([4, 2048, 35, 36],"float16"), y=Tensor([4, 2048, 35, 36],"float16"), )
paddle.add(x=Tensor([4, 2048, 35, 36],"float32"), y=Tensor([4, 2048, 35, 36],"float32"), )
paddle.add(x=Tensor([4, 2048, 35, 37],"float16"), y=Tensor([4, 2048, 35, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 35, 37],"float32"), y=Tensor([4, 2048, 35, 37],"float32"), )
paddle.add(x=Tensor([4, 2048, 35, 38],"float16"), y=Tensor([4, 2048, 35, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 35, 38],"float32"), y=Tensor([4, 2048, 35, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 35, 39],"float16"), y=Tensor([4, 2048, 35, 39],"float16"), )
paddle.add(x=Tensor([4, 2048, 35, 39],"float32"), y=Tensor([4, 2048, 35, 39],"float32"), )
paddle.add(x=Tensor([4, 2048, 35, 41],"float16"), y=Tensor([4, 2048, 35, 41],"float16"), )
paddle.add(x=Tensor([4, 2048, 35, 42],"float16"), y=Tensor([4, 2048, 35, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 35, 42],"float32"), y=Tensor([4, 2048, 35, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 24],"float32"), y=Tensor([4, 2048, 36, 24],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 25],"float32"), y=Tensor([4, 2048, 36, 25],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 27],"float16"), y=Tensor([4, 2048, 36, 27],"float16"), )
paddle.add(x=Tensor([4, 2048, 36, 27],"float32"), y=Tensor([4, 2048, 36, 27],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 28],"float16"), y=Tensor([4, 2048, 36, 28],"float16"), )
paddle.add(x=Tensor([4, 2048, 36, 28],"float32"), y=Tensor([4, 2048, 36, 28],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 30],"float16"), y=Tensor([4, 2048, 36, 30],"float16"), )
paddle.add(x=Tensor([4, 2048, 36, 30],"float32"), y=Tensor([4, 2048, 36, 30],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 31],"float16"), y=Tensor([4, 2048, 36, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 36, 31],"float32"), y=Tensor([4, 2048, 36, 31],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 32],"float16"), y=Tensor([4, 2048, 36, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 36, 32],"float32"), y=Tensor([4, 2048, 36, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 33],"float16"), y=Tensor([4, 2048, 36, 33],"float16"), )
paddle.add(x=Tensor([4, 2048, 36, 33],"float32"), y=Tensor([4, 2048, 36, 33],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 34],"float16"), y=Tensor([4, 2048, 36, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 36, 34],"float32"), y=Tensor([4, 2048, 36, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 35],"float16"), y=Tensor([4, 2048, 36, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 36, 35],"float32"), y=Tensor([4, 2048, 36, 35],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 36],"float16"), y=Tensor([4, 2048, 36, 36],"float16"), )
paddle.add(x=Tensor([4, 2048, 36, 36],"float32"), y=Tensor([4, 2048, 36, 36],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 37],"float16"), y=Tensor([4, 2048, 36, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 36, 38],"float16"), y=Tensor([4, 2048, 36, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 36, 38],"float32"), y=Tensor([4, 2048, 36, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 39],"float16"), y=Tensor([4, 2048, 36, 39],"float16"), )
paddle.add(x=Tensor([4, 2048, 36, 39],"float32"), y=Tensor([4, 2048, 36, 39],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 40],"float32"), y=Tensor([4, 2048, 36, 40],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 41],"float16"), y=Tensor([4, 2048, 36, 41],"float16"), )
paddle.add(x=Tensor([4, 2048, 36, 41],"float32"), y=Tensor([4, 2048, 36, 41],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 42],"float16"), y=Tensor([4, 2048, 36, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 36, 42],"float32"), y=Tensor([4, 2048, 36, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 36, 44],"float32"), y=Tensor([4, 2048, 36, 44],"float32"), )
paddle.add(x=Tensor([4, 2048, 37, 30],"float16"), y=Tensor([4, 2048, 37, 30],"float16"), )
paddle.add(x=Tensor([4, 2048, 37, 32],"float16"), y=Tensor([4, 2048, 37, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 37, 32],"float32"), y=Tensor([4, 2048, 37, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 37, 33],"float16"), y=Tensor([4, 2048, 37, 33],"float16"), )
paddle.add(x=Tensor([4, 2048, 37, 33],"float32"), y=Tensor([4, 2048, 37, 33],"float32"), )
paddle.add(x=Tensor([4, 2048, 37, 34],"float16"), y=Tensor([4, 2048, 37, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 37, 34],"float32"), y=Tensor([4, 2048, 37, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 37, 35],"float16"), y=Tensor([4, 2048, 37, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 37, 35],"float32"), y=Tensor([4, 2048, 37, 35],"float32"), )
paddle.add(x=Tensor([4, 2048, 37, 36],"float16"), y=Tensor([4, 2048, 37, 36],"float16"), )
paddle.add(x=Tensor([4, 2048, 37, 36],"float32"), y=Tensor([4, 2048, 37, 36],"float32"), )
paddle.add(x=Tensor([4, 2048, 37, 37],"float16"), y=Tensor([4, 2048, 37, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 37, 37],"float32"), y=Tensor([4, 2048, 37, 37],"float32"), )
paddle.add(x=Tensor([4, 2048, 37, 38],"float16"), y=Tensor([4, 2048, 37, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 37, 38],"float32"), y=Tensor([4, 2048, 37, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 37, 40],"float16"), y=Tensor([4, 2048, 37, 40],"float16"), )
paddle.add(x=Tensor([4, 2048, 37, 40],"float32"), y=Tensor([4, 2048, 37, 40],"float32"), )
paddle.add(x=Tensor([4, 2048, 37, 41],"float16"), y=Tensor([4, 2048, 37, 41],"float16"), )
paddle.add(x=Tensor([4, 2048, 37, 42],"float16"), y=Tensor([4, 2048, 37, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 37, 42],"float32"), y=Tensor([4, 2048, 37, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 38, 25],"float16"), y=Tensor([4, 2048, 38, 25],"float16"), )
paddle.add(x=Tensor([4, 2048, 38, 25],"float32"), y=Tensor([4, 2048, 38, 25],"float32"), )
paddle.add(x=Tensor([4, 2048, 38, 27],"float16"), y=Tensor([4, 2048, 38, 27],"float16"), )
paddle.add(x=Tensor([4, 2048, 38, 28],"float16"), y=Tensor([4, 2048, 38, 28],"float16"), )
paddle.add(x=Tensor([4, 2048, 38, 30],"float16"), y=Tensor([4, 2048, 38, 30],"float16"), )
paddle.add(x=Tensor([4, 2048, 38, 31],"float16"), y=Tensor([4, 2048, 38, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 38, 31],"float32"), y=Tensor([4, 2048, 38, 31],"float32"), )
paddle.add(x=Tensor([4, 2048, 38, 32],"float16"), y=Tensor([4, 2048, 38, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 38, 32],"float32"), y=Tensor([4, 2048, 38, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 38, 33],"float16"), y=Tensor([4, 2048, 38, 33],"float16"), )
paddle.add(x=Tensor([4, 2048, 38, 33],"float32"), y=Tensor([4, 2048, 38, 33],"float32"), )
paddle.add(x=Tensor([4, 2048, 38, 34],"float16"), y=Tensor([4, 2048, 38, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 38, 34],"float32"), y=Tensor([4, 2048, 38, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 38, 35],"float16"), y=Tensor([4, 2048, 38, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 38, 35],"float32"), y=Tensor([4, 2048, 38, 35],"float32"), )
paddle.add(x=Tensor([4, 2048, 38, 36],"float16"), y=Tensor([4, 2048, 38, 36],"float16"), )
paddle.add(x=Tensor([4, 2048, 38, 36],"float32"), y=Tensor([4, 2048, 38, 36],"float32"), )
paddle.add(x=Tensor([4, 2048, 38, 37],"float16"), y=Tensor([4, 2048, 38, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 38, 37],"float32"), y=Tensor([4, 2048, 38, 37],"float32"), )
paddle.add(x=Tensor([4, 2048, 38, 38],"float16"), y=Tensor([4, 2048, 38, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 38, 38],"float32"), y=Tensor([4, 2048, 38, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 38, 39],"float16"), y=Tensor([4, 2048, 38, 39],"float16"), )
paddle.add(x=Tensor([4, 2048, 38, 39],"float32"), y=Tensor([4, 2048, 38, 39],"float32"), )
paddle.add(x=Tensor([4, 2048, 38, 40],"float16"), y=Tensor([4, 2048, 38, 40],"float16"), )
paddle.add(x=Tensor([4, 2048, 38, 40],"float32"), y=Tensor([4, 2048, 38, 40],"float32"), )
paddle.add(x=Tensor([4, 2048, 38, 41],"float16"), y=Tensor([4, 2048, 38, 41],"float16"), )
paddle.add(x=Tensor([4, 2048, 38, 41],"float32"), y=Tensor([4, 2048, 38, 41],"float32"), )
paddle.add(x=Tensor([4, 2048, 38, 42],"float16"), y=Tensor([4, 2048, 38, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 38, 42],"float32"), y=Tensor([4, 2048, 38, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 39, 28],"float16"), y=Tensor([4, 2048, 39, 28],"float16"), )
paddle.add(x=Tensor([4, 2048, 39, 28],"float32"), y=Tensor([4, 2048, 39, 28],"float32"), )
paddle.add(x=Tensor([4, 2048, 39, 30],"float16"), y=Tensor([4, 2048, 39, 30],"float16"), )
paddle.add(x=Tensor([4, 2048, 39, 31],"float16"), y=Tensor([4, 2048, 39, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 39, 31],"float32"), y=Tensor([4, 2048, 39, 31],"float32"), )
paddle.add(x=Tensor([4, 2048, 39, 34],"float16"), y=Tensor([4, 2048, 39, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 39, 34],"float32"), y=Tensor([4, 2048, 39, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 39, 35],"float16"), y=Tensor([4, 2048, 39, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 39, 35],"float32"), y=Tensor([4, 2048, 39, 35],"float32"), )
paddle.add(x=Tensor([4, 2048, 39, 37],"float16"), y=Tensor([4, 2048, 39, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 39, 37],"float32"), y=Tensor([4, 2048, 39, 37],"float32"), )
paddle.add(x=Tensor([4, 2048, 39, 38],"float16"), y=Tensor([4, 2048, 39, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 39, 38],"float32"), y=Tensor([4, 2048, 39, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 39, 42],"float16"), y=Tensor([4, 2048, 39, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 39, 42],"float32"), y=Tensor([4, 2048, 39, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 40, 28],"float32"), y=Tensor([4, 2048, 40, 28],"float32"), )
paddle.add(x=Tensor([4, 2048, 40, 32],"float16"), y=Tensor([4, 2048, 40, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 40, 32],"float32"), y=Tensor([4, 2048, 40, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 40, 34],"float16"), y=Tensor([4, 2048, 40, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 40, 34],"float32"), y=Tensor([4, 2048, 40, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 40, 36],"float16"), y=Tensor([4, 2048, 40, 36],"float16"), )
paddle.add(x=Tensor([4, 2048, 40, 36],"float32"), y=Tensor([4, 2048, 40, 36],"float32"), )
paddle.add(x=Tensor([4, 2048, 40, 38],"float16"), y=Tensor([4, 2048, 40, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 40, 38],"float32"), y=Tensor([4, 2048, 40, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 40, 40],"float16"), y=Tensor([4, 2048, 40, 40],"float16"), )
paddle.add(x=Tensor([4, 2048, 40, 40],"float32"), y=Tensor([4, 2048, 40, 40],"float32"), )
paddle.add(x=Tensor([4, 2048, 41, 25],"float16"), y=Tensor([4, 2048, 41, 25],"float16"), )
paddle.add(x=Tensor([4, 2048, 41, 31],"float16"), y=Tensor([4, 2048, 41, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 41, 31],"float32"), y=Tensor([4, 2048, 41, 31],"float32"), )
paddle.add(x=Tensor([4, 2048, 41, 32],"float16"), y=Tensor([4, 2048, 41, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 41, 34],"float16"), y=Tensor([4, 2048, 41, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 41, 35],"float16"), y=Tensor([4, 2048, 41, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 41, 37],"float16"), y=Tensor([4, 2048, 41, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 41, 37],"float32"), y=Tensor([4, 2048, 41, 37],"float32"), )
paddle.add(x=Tensor([4, 2048, 41, 38],"float16"), y=Tensor([4, 2048, 41, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 41, 38],"float32"), y=Tensor([4, 2048, 41, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 41, 42],"float16"), y=Tensor([4, 2048, 41, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 41, 42],"float32"), y=Tensor([4, 2048, 41, 42],"float32"), )
paddle.add(x=Tensor([4, 2048, 42, 25],"float16"), y=Tensor([4, 2048, 42, 25],"float16"), )
paddle.add(x=Tensor([4, 2048, 42, 25],"float32"), y=Tensor([4, 2048, 42, 25],"float32"), )
paddle.add(x=Tensor([4, 2048, 42, 30],"float16"), y=Tensor([4, 2048, 42, 30],"float16"), )
paddle.add(x=Tensor([4, 2048, 42, 30],"float32"), y=Tensor([4, 2048, 42, 30],"float32"), )
paddle.add(x=Tensor([4, 2048, 42, 31],"float16"), y=Tensor([4, 2048, 42, 31],"float16"), )
paddle.add(x=Tensor([4, 2048, 42, 31],"float32"), y=Tensor([4, 2048, 42, 31],"float32"), )
paddle.add(x=Tensor([4, 2048, 42, 32],"float16"), y=Tensor([4, 2048, 42, 32],"float16"), )
paddle.add(x=Tensor([4, 2048, 42, 32],"float32"), y=Tensor([4, 2048, 42, 32],"float32"), )
paddle.add(x=Tensor([4, 2048, 42, 34],"float16"), y=Tensor([4, 2048, 42, 34],"float16"), )
paddle.add(x=Tensor([4, 2048, 42, 34],"float32"), y=Tensor([4, 2048, 42, 34],"float32"), )
paddle.add(x=Tensor([4, 2048, 42, 35],"float16"), y=Tensor([4, 2048, 42, 35],"float16"), )
paddle.add(x=Tensor([4, 2048, 42, 35],"float32"), y=Tensor([4, 2048, 42, 35],"float32"), )
paddle.add(x=Tensor([4, 2048, 42, 36],"float16"), y=Tensor([4, 2048, 42, 36],"float16"), )
paddle.add(x=Tensor([4, 2048, 42, 36],"float32"), y=Tensor([4, 2048, 42, 36],"float32"), )
paddle.add(x=Tensor([4, 2048, 42, 37],"float16"), y=Tensor([4, 2048, 42, 37],"float16"), )
paddle.add(x=Tensor([4, 2048, 42, 38],"float16"), y=Tensor([4, 2048, 42, 38],"float16"), )
paddle.add(x=Tensor([4, 2048, 42, 38],"float32"), y=Tensor([4, 2048, 42, 38],"float32"), )
paddle.add(x=Tensor([4, 2048, 42, 39],"float16"), y=Tensor([4, 2048, 42, 39],"float16"), )
paddle.add(x=Tensor([4, 2048, 42, 39],"float32"), y=Tensor([4, 2048, 42, 39],"float32"), )
paddle.add(x=Tensor([4, 2048, 42, 40],"float16"), y=Tensor([4, 2048, 42, 40],"float16"), )
paddle.add(x=Tensor([4, 2048, 42, 42],"float16"), y=Tensor([4, 2048, 42, 42],"float16"), )
paddle.add(x=Tensor([4, 2048, 42, 42],"float32"), y=Tensor([4, 2048, 42, 42],"float32"), )
paddle.add(x=Tensor([4, 256, 128, 128],"float32"), y=Tensor([4, 256, 128, 128],"float32"), )
paddle.add(x=Tensor([4, 256, 168, 248],"float16"), y=Tensor([4, 256, 168, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 168, 252],"float16"), y=Tensor([4, 256, 168, 252],"float16"), )
paddle.add(x=Tensor([4, 256, 168, 252],"float32"), y=Tensor([4, 256, 168, 252],"float32"), )
paddle.add(x=Tensor([4, 256, 168, 253],"float16"), y=Tensor([4, 256, 168, 253],"float16"), )
paddle.add(x=Tensor([4, 256, 168, 253],"float32"), y=Tensor([4, 256, 168, 253],"float32"), )
paddle.add(x=Tensor([4, 256, 168, 256],"float16"), y=Tensor([4, 256, 168, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 168, 256],"float32"), y=Tensor([4, 256, 168, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 176, 235],"float16"), y=Tensor([4, 256, 176, 235],"float16"), )
paddle.add(x=Tensor([4, 256, 176, 240],"float16"), y=Tensor([4, 256, 176, 240],"float16"), )
paddle.add(x=Tensor([4, 256, 176, 240],"float32"), y=Tensor([4, 256, 176, 240],"float32"), )
paddle.add(x=Tensor([4, 256, 176, 256],"float16"), y=Tensor([4, 256, 176, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 176, 264],"float16"), y=Tensor([4, 256, 176, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 176, 264],"float32"), y=Tensor([4, 256, 176, 264],"float32"), )
paddle.add(x=Tensor([4, 256, 176, 265],"float16"), y=Tensor([4, 256, 176, 265],"float16"), )
paddle.add(x=Tensor([4, 256, 176, 265],"float32"), y=Tensor([4, 256, 176, 265],"float32"), )
paddle.add(x=Tensor([4, 256, 176, 266],"float16"), y=Tensor([4, 256, 176, 266],"float16"), )
paddle.add(x=Tensor([4, 256, 176, 272],"float16"), y=Tensor([4, 256, 176, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 176, 272],"float32"), y=Tensor([4, 256, 176, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 176, 296],"float16"), y=Tensor([4, 256, 176, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 176, 336],"float16"), y=Tensor([4, 256, 176, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 176, 336],"float32"), y=Tensor([4, 256, 176, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 240],"float16"), y=Tensor([4, 256, 184, 240],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 246],"float16"), y=Tensor([4, 256, 184, 246],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 246],"float32"), y=Tensor([4, 256, 184, 246],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 248],"float16"), y=Tensor([4, 256, 184, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 248],"float32"), y=Tensor([4, 256, 184, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 250],"float16"), y=Tensor([4, 256, 184, 250],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 256],"float16"), y=Tensor([4, 256, 184, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 256],"float32"), y=Tensor([4, 256, 184, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 265],"float16"), y=Tensor([4, 256, 184, 265],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 266],"float16"), y=Tensor([4, 256, 184, 266],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 266],"float32"), y=Tensor([4, 256, 184, 266],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 270],"float16"), y=Tensor([4, 256, 184, 270],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 270],"float32"), y=Tensor([4, 256, 184, 270],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 272],"float16"), y=Tensor([4, 256, 184, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 272],"float32"), y=Tensor([4, 256, 184, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 276],"float16"), y=Tensor([4, 256, 184, 276],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 276],"float32"), y=Tensor([4, 256, 184, 276],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 277],"float16"), y=Tensor([4, 256, 184, 277],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 277],"float32"), y=Tensor([4, 256, 184, 277],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 280],"float16"), y=Tensor([4, 256, 184, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 280],"float32"), y=Tensor([4, 256, 184, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 296],"float16"), y=Tensor([4, 256, 184, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 296],"float32"), y=Tensor([4, 256, 184, 296],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 299],"float16"), y=Tensor([4, 256, 184, 299],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 299],"float32"), y=Tensor([4, 256, 184, 299],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 304],"float16"), y=Tensor([4, 256, 184, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 304],"float32"), y=Tensor([4, 256, 184, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 312],"float16"), y=Tensor([4, 256, 184, 312],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 312],"float32"), y=Tensor([4, 256, 184, 312],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 320],"float16"), y=Tensor([4, 256, 184, 320],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 320],"float32"), y=Tensor([4, 256, 184, 320],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 328],"float16"), y=Tensor([4, 256, 184, 328],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 328],"float32"), y=Tensor([4, 256, 184, 328],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 334],"float16"), y=Tensor([4, 256, 184, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 334],"float32"), y=Tensor([4, 256, 184, 334],"float32"), )
paddle.add(x=Tensor([4, 256, 184, 336],"float16"), y=Tensor([4, 256, 184, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 184, 336],"float32"), y=Tensor([4, 256, 184, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 188, 334],"float16"), y=Tensor([4, 256, 188, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 188, 334],"float32"), y=Tensor([4, 256, 188, 334],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 240],"float16"), y=Tensor([4, 256, 192, 240],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 245],"float16"), y=Tensor([4, 256, 192, 245],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 245],"float32"), y=Tensor([4, 256, 192, 245],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 248],"float16"), y=Tensor([4, 256, 192, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 248],"float32"), y=Tensor([4, 256, 192, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 253],"float16"), y=Tensor([4, 256, 192, 253],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 253],"float32"), y=Tensor([4, 256, 192, 253],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 256],"float16"), y=Tensor([4, 256, 192, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 256],"float32"), y=Tensor([4, 256, 192, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 257],"float16"), y=Tensor([4, 256, 192, 257],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 264],"float16"), y=Tensor([4, 256, 192, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 264],"float32"), y=Tensor([4, 256, 192, 264],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 265],"float16"), y=Tensor([4, 256, 192, 265],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 265],"float32"), y=Tensor([4, 256, 192, 265],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 272],"float16"), y=Tensor([4, 256, 192, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 272],"float32"), y=Tensor([4, 256, 192, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 273],"float16"), y=Tensor([4, 256, 192, 273],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 273],"float32"), y=Tensor([4, 256, 192, 273],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 276],"float16"), y=Tensor([4, 256, 192, 276],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 276],"float32"), y=Tensor([4, 256, 192, 276],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 277],"float16"), y=Tensor([4, 256, 192, 277],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 277],"float32"), y=Tensor([4, 256, 192, 277],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 280],"float16"), y=Tensor([4, 256, 192, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 280],"float32"), y=Tensor([4, 256, 192, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 285],"float16"), y=Tensor([4, 256, 192, 285],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 287],"float16"), y=Tensor([4, 256, 192, 287],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 287],"float32"), y=Tensor([4, 256, 192, 287],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 288],"float16"), y=Tensor([4, 256, 192, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 288],"float32"), y=Tensor([4, 256, 192, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 289],"float16"), y=Tensor([4, 256, 192, 289],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 289],"float32"), y=Tensor([4, 256, 192, 289],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 290],"float16"), y=Tensor([4, 256, 192, 290],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 290],"float32"), y=Tensor([4, 256, 192, 290],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 296],"float16"), y=Tensor([4, 256, 192, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 296],"float32"), y=Tensor([4, 256, 192, 296],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 300],"float16"), y=Tensor([4, 256, 192, 300],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 304],"float16"), y=Tensor([4, 256, 192, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 304],"float32"), y=Tensor([4, 256, 192, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 320],"float16"), y=Tensor([4, 256, 192, 320],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 328],"float16"), y=Tensor([4, 256, 192, 328],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 334],"float16"), y=Tensor([4, 256, 192, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 334],"float32"), y=Tensor([4, 256, 192, 334],"float32"), )
paddle.add(x=Tensor([4, 256, 192, 336],"float16"), y=Tensor([4, 256, 192, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 192, 336],"float32"), y=Tensor([4, 256, 192, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 195, 252],"float16"), y=Tensor([4, 256, 195, 252],"float16"), )
paddle.add(x=Tensor([4, 256, 199, 288],"float16"), y=Tensor([4, 256, 199, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 199, 288],"float32"), y=Tensor([4, 256, 199, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 227],"float32"), y=Tensor([4, 256, 200, 227],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 235],"float16"), y=Tensor([4, 256, 200, 235],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 240],"float16"), y=Tensor([4, 256, 200, 240],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 240],"float32"), y=Tensor([4, 256, 200, 240],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 241],"float16"), y=Tensor([4, 256, 200, 241],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 248],"float16"), y=Tensor([4, 256, 200, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 248],"float32"), y=Tensor([4, 256, 200, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 256],"float16"), y=Tensor([4, 256, 200, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 256],"float32"), y=Tensor([4, 256, 200, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 264],"float16"), y=Tensor([4, 256, 200, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 266],"float16"), y=Tensor([4, 256, 200, 266],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 266],"float32"), y=Tensor([4, 256, 200, 266],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 267],"float16"), y=Tensor([4, 256, 200, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 267],"float32"), y=Tensor([4, 256, 200, 267],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 272],"float16"), y=Tensor([4, 256, 200, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 272],"float32"), y=Tensor([4, 256, 200, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 276],"float16"), y=Tensor([4, 256, 200, 276],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 278],"float16"), y=Tensor([4, 256, 200, 278],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 280],"float16"), y=Tensor([4, 256, 200, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 280],"float32"), y=Tensor([4, 256, 200, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 283],"float16"), y=Tensor([4, 256, 200, 283],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 283],"float32"), y=Tensor([4, 256, 200, 283],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 287],"float16"), y=Tensor([4, 256, 200, 287],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 287],"float32"), y=Tensor([4, 256, 200, 287],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 288],"float16"), y=Tensor([4, 256, 200, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 288],"float32"), y=Tensor([4, 256, 200, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 289],"float16"), y=Tensor([4, 256, 200, 289],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 289],"float32"), y=Tensor([4, 256, 200, 289],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 290],"float16"), y=Tensor([4, 256, 200, 290],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 290],"float32"), y=Tensor([4, 256, 200, 290],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 296],"float16"), y=Tensor([4, 256, 200, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 296],"float32"), y=Tensor([4, 256, 200, 296],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 299],"float16"), y=Tensor([4, 256, 200, 299],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 299],"float32"), y=Tensor([4, 256, 200, 299],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 300],"float16"), y=Tensor([4, 256, 200, 300],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 300],"float32"), y=Tensor([4, 256, 200, 300],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 301],"float16"), y=Tensor([4, 256, 200, 301],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 301],"float32"), y=Tensor([4, 256, 200, 301],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 302],"float16"), y=Tensor([4, 256, 200, 302],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 302],"float32"), y=Tensor([4, 256, 200, 302],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 303],"float16"), y=Tensor([4, 256, 200, 303],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 303],"float32"), y=Tensor([4, 256, 200, 303],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 304],"float16"), y=Tensor([4, 256, 200, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 304],"float32"), y=Tensor([4, 256, 200, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 312],"float16"), y=Tensor([4, 256, 200, 312],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 312],"float32"), y=Tensor([4, 256, 200, 312],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 313],"float16"), y=Tensor([4, 256, 200, 313],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 313],"float32"), y=Tensor([4, 256, 200, 313],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 314],"float16"), y=Tensor([4, 256, 200, 314],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 320],"float16"), y=Tensor([4, 256, 200, 320],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 320],"float32"), y=Tensor([4, 256, 200, 320],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 321],"float16"), y=Tensor([4, 256, 200, 321],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 321],"float32"), y=Tensor([4, 256, 200, 321],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 327],"float16"), y=Tensor([4, 256, 200, 327],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 327],"float32"), y=Tensor([4, 256, 200, 327],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 328],"float16"), y=Tensor([4, 256, 200, 328],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 328],"float32"), y=Tensor([4, 256, 200, 328],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 334],"float16"), y=Tensor([4, 256, 200, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 334],"float32"), y=Tensor([4, 256, 200, 334],"float32"), )
paddle.add(x=Tensor([4, 256, 200, 336],"float16"), y=Tensor([4, 256, 200, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 200, 336],"float32"), y=Tensor([4, 256, 200, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 203, 325],"float16"), y=Tensor([4, 256, 203, 325],"float16"), )
paddle.add(x=Tensor([4, 256, 203, 325],"float32"), y=Tensor([4, 256, 203, 325],"float32"), )
paddle.add(x=Tensor([4, 256, 204, 292],"float16"), y=Tensor([4, 256, 204, 292],"float16"), )
paddle.add(x=Tensor([4, 256, 208, 256],"float16"), y=Tensor([4, 256, 208, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 208, 272],"float16"), y=Tensor([4, 256, 208, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 208, 288],"float16"), y=Tensor([4, 256, 208, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 208, 288],"float32"), y=Tensor([4, 256, 208, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 208, 296],"float16"), y=Tensor([4, 256, 208, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 208, 296],"float32"), y=Tensor([4, 256, 208, 296],"float32"), )
paddle.add(x=Tensor([4, 256, 208, 300],"float16"), y=Tensor([4, 256, 208, 300],"float16"), )
paddle.add(x=Tensor([4, 256, 208, 300],"float32"), y=Tensor([4, 256, 208, 300],"float32"), )
paddle.add(x=Tensor([4, 256, 208, 304],"float16"), y=Tensor([4, 256, 208, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 208, 304],"float32"), y=Tensor([4, 256, 208, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 208, 328],"float16"), y=Tensor([4, 256, 208, 328],"float16"), )
paddle.add(x=Tensor([4, 256, 208, 328],"float32"), y=Tensor([4, 256, 208, 328],"float32"), )
paddle.add(x=Tensor([4, 256, 208, 336],"float16"), y=Tensor([4, 256, 208, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 208, 336],"float32"), y=Tensor([4, 256, 208, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 210, 224],"float16"), y=Tensor([4, 256, 210, 224],"float16"), )
paddle.add(x=Tensor([4, 256, 210, 224],"float32"), y=Tensor([4, 256, 210, 224],"float32"), )
paddle.add(x=Tensor([4, 256, 210, 287],"float16"), y=Tensor([4, 256, 210, 287],"float16"), )
paddle.add(x=Tensor([4, 256, 213, 264],"float16"), y=Tensor([4, 256, 213, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 213, 264],"float32"), y=Tensor([4, 256, 213, 264],"float32"), )
paddle.add(x=Tensor([4, 256, 214, 241],"float16"), y=Tensor([4, 256, 214, 241],"float16"), )
paddle.add(x=Tensor([4, 256, 214, 241],"float32"), y=Tensor([4, 256, 214, 241],"float32"), )
paddle.add(x=Tensor([4, 256, 214, 251],"float16"), y=Tensor([4, 256, 214, 251],"float16"), )
paddle.add(x=Tensor([4, 256, 214, 251],"float32"), y=Tensor([4, 256, 214, 251],"float32"), )
paddle.add(x=Tensor([4, 256, 214, 252],"float16"), y=Tensor([4, 256, 214, 252],"float16"), )
paddle.add(x=Tensor([4, 256, 214, 273],"float16"), y=Tensor([4, 256, 214, 273],"float16"), )
paddle.add(x=Tensor([4, 256, 214, 277],"float16"), y=Tensor([4, 256, 214, 277],"float16"), )
paddle.add(x=Tensor([4, 256, 214, 287],"float16"), y=Tensor([4, 256, 214, 287],"float16"), )
paddle.add(x=Tensor([4, 256, 214, 288],"float16"), y=Tensor([4, 256, 214, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 214, 299],"float16"), y=Tensor([4, 256, 214, 299],"float16"), )
paddle.add(x=Tensor([4, 256, 216, 224],"float16"), y=Tensor([4, 256, 216, 224],"float16"), )
paddle.add(x=Tensor([4, 256, 216, 224],"float32"), y=Tensor([4, 256, 216, 224],"float32"), )
paddle.add(x=Tensor([4, 256, 216, 248],"float16"), y=Tensor([4, 256, 216, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 216, 248],"float32"), y=Tensor([4, 256, 216, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 216, 256],"float16"), y=Tensor([4, 256, 216, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 216, 256],"float32"), y=Tensor([4, 256, 216, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 216, 264],"float16"), y=Tensor([4, 256, 216, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 216, 264],"float32"), y=Tensor([4, 256, 216, 264],"float32"), )
paddle.add(x=Tensor([4, 256, 216, 272],"float16"), y=Tensor([4, 256, 216, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 216, 272],"float32"), y=Tensor([4, 256, 216, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 216, 280],"float16"), y=Tensor([4, 256, 216, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 216, 280],"float32"), y=Tensor([4, 256, 216, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 216, 288],"float16"), y=Tensor([4, 256, 216, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 216, 288],"float32"), y=Tensor([4, 256, 216, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 216, 296],"float16"), y=Tensor([4, 256, 216, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 216, 296],"float32"), y=Tensor([4, 256, 216, 296],"float32"), )
paddle.add(x=Tensor([4, 256, 216, 304],"float16"), y=Tensor([4, 256, 216, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 216, 304],"float32"), y=Tensor([4, 256, 216, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 216, 312],"float16"), y=Tensor([4, 256, 216, 312],"float16"), )
paddle.add(x=Tensor([4, 256, 216, 312],"float32"), y=Tensor([4, 256, 216, 312],"float32"), )
paddle.add(x=Tensor([4, 256, 216, 336],"float16"), y=Tensor([4, 256, 216, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 216, 336],"float32"), y=Tensor([4, 256, 216, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 217, 280],"float16"), y=Tensor([4, 256, 217, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 217, 280],"float32"), y=Tensor([4, 256, 217, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 220, 302],"float16"), y=Tensor([4, 256, 220, 302],"float16"), )
paddle.add(x=Tensor([4, 256, 223, 248],"float16"), y=Tensor([4, 256, 223, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 223, 248],"float32"), y=Tensor([4, 256, 223, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 240],"float32"), y=Tensor([4, 256, 224, 240],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 248],"float16"), y=Tensor([4, 256, 224, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 248],"float32"), y=Tensor([4, 256, 224, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 252],"float16"), y=Tensor([4, 256, 224, 252],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 252],"float32"), y=Tensor([4, 256, 224, 252],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 253],"float16"), y=Tensor([4, 256, 224, 253],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 253],"float32"), y=Tensor([4, 256, 224, 253],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 256],"float16"), y=Tensor([4, 256, 224, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 256],"float32"), y=Tensor([4, 256, 224, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 257],"float16"), y=Tensor([4, 256, 224, 257],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 264],"float16"), y=Tensor([4, 256, 224, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 264],"float32"), y=Tensor([4, 256, 224, 264],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 267],"float16"), y=Tensor([4, 256, 224, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 267],"float32"), y=Tensor([4, 256, 224, 267],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 272],"float16"), y=Tensor([4, 256, 224, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 272],"float32"), y=Tensor([4, 256, 224, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 274],"float16"), y=Tensor([4, 256, 224, 274],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 274],"float32"), y=Tensor([4, 256, 224, 274],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 280],"float16"), y=Tensor([4, 256, 224, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 280],"float32"), y=Tensor([4, 256, 224, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 286],"float16"), y=Tensor([4, 256, 224, 286],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 288],"float16"), y=Tensor([4, 256, 224, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 288],"float32"), y=Tensor([4, 256, 224, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 296],"float16"), y=Tensor([4, 256, 224, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 296],"float32"), y=Tensor([4, 256, 224, 296],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 300],"float16"), y=Tensor([4, 256, 224, 300],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 300],"float32"), y=Tensor([4, 256, 224, 300],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 301],"float16"), y=Tensor([4, 256, 224, 301],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 304],"float16"), y=Tensor([4, 256, 224, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 304],"float32"), y=Tensor([4, 256, 224, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 312],"float16"), y=Tensor([4, 256, 224, 312],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 313],"float16"), y=Tensor([4, 256, 224, 313],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 313],"float32"), y=Tensor([4, 256, 224, 313],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 320],"float16"), y=Tensor([4, 256, 224, 320],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 320],"float32"), y=Tensor([4, 256, 224, 320],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 321],"float16"), y=Tensor([4, 256, 224, 321],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 321],"float32"), y=Tensor([4, 256, 224, 321],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 328],"float16"), y=Tensor([4, 256, 224, 328],"float16"), )
paddle.add(x=Tensor([4, 256, 224, 328],"float32"), y=Tensor([4, 256, 224, 328],"float32"), )
paddle.add(x=Tensor([4, 256, 224, 336],"float16"), y=Tensor([4, 256, 224, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 225, 267],"float16"), y=Tensor([4, 256, 225, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 225, 267],"float32"), y=Tensor([4, 256, 225, 267],"float32"), )
paddle.add(x=Tensor([4, 256, 228, 262],"float16"), y=Tensor([4, 256, 228, 262],"float16"), )
paddle.add(x=Tensor([4, 256, 229, 256],"float16"), y=Tensor([4, 256, 229, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 229, 256],"float32"), y=Tensor([4, 256, 229, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 232, 256],"float16"), y=Tensor([4, 256, 232, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 232, 256],"float32"), y=Tensor([4, 256, 232, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 232, 264],"float16"), y=Tensor([4, 256, 232, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 232, 264],"float32"), y=Tensor([4, 256, 232, 264],"float32"), )
paddle.add(x=Tensor([4, 256, 232, 272],"float16"), y=Tensor([4, 256, 232, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 232, 272],"float32"), y=Tensor([4, 256, 232, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 232, 304],"float16"), y=Tensor([4, 256, 232, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 232, 304],"float32"), y=Tensor([4, 256, 232, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 232, 320],"float16"), y=Tensor([4, 256, 232, 320],"float16"), )
paddle.add(x=Tensor([4, 256, 232, 320],"float32"), y=Tensor([4, 256, 232, 320],"float32"), )
paddle.add(x=Tensor([4, 256, 232, 336],"float16"), y=Tensor([4, 256, 232, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 234, 265],"float16"), y=Tensor([4, 256, 234, 265],"float16"), )
paddle.add(x=Tensor([4, 256, 235, 201],"float16"), y=Tensor([4, 256, 235, 201],"float16"), )
paddle.add(x=Tensor([4, 256, 235, 240],"float16"), y=Tensor([4, 256, 235, 240],"float16"), )
paddle.add(x=Tensor([4, 256, 235, 246],"float16"), y=Tensor([4, 256, 235, 246],"float16"), )
paddle.add(x=Tensor([4, 256, 235, 256],"float16"), y=Tensor([4, 256, 235, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 235, 256],"float32"), y=Tensor([4, 256, 235, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 235, 267],"float16"), y=Tensor([4, 256, 235, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 235, 276],"float16"), y=Tensor([4, 256, 235, 276],"float16"), )
paddle.add(x=Tensor([4, 256, 235, 288],"float16"), y=Tensor([4, 256, 235, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 235, 289],"float16"), y=Tensor([4, 256, 235, 289],"float16"), )
paddle.add(x=Tensor([4, 256, 235, 304],"float16"), y=Tensor([4, 256, 235, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 235, 309],"float16"), y=Tensor([4, 256, 235, 309],"float16"), )
paddle.add(x=Tensor([4, 256, 235, 334],"float16"), y=Tensor([4, 256, 235, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 235, 334],"float32"), y=Tensor([4, 256, 235, 334],"float32"), )
paddle.add(x=Tensor([4, 256, 237, 267],"float16"), y=Tensor([4, 256, 237, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 239, 307],"float16"), y=Tensor([4, 256, 239, 307],"float16"), )
paddle.add(x=Tensor([4, 256, 239, 307],"float32"), y=Tensor([4, 256, 239, 307],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 176],"float32"), y=Tensor([4, 256, 240, 176],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 208],"float16"), y=Tensor([4, 256, 240, 208],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 208],"float32"), y=Tensor([4, 256, 240, 208],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 224],"float32"), y=Tensor([4, 256, 240, 224],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 240],"float16"), y=Tensor([4, 256, 240, 240],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 240],"float32"), y=Tensor([4, 256, 240, 240],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 248],"float16"), y=Tensor([4, 256, 240, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 248],"float32"), y=Tensor([4, 256, 240, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 256],"float16"), y=Tensor([4, 256, 240, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 256],"float32"), y=Tensor([4, 256, 240, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 267],"float16"), y=Tensor([4, 256, 240, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 267],"float32"), y=Tensor([4, 256, 240, 267],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 272],"float16"), y=Tensor([4, 256, 240, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 272],"float32"), y=Tensor([4, 256, 240, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 280],"float16"), y=Tensor([4, 256, 240, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 280],"float32"), y=Tensor([4, 256, 240, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 288],"float16"), y=Tensor([4, 256, 240, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 288],"float32"), y=Tensor([4, 256, 240, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 296],"float16"), y=Tensor([4, 256, 240, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 296],"float32"), y=Tensor([4, 256, 240, 296],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 300],"float16"), y=Tensor([4, 256, 240, 300],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 300],"float32"), y=Tensor([4, 256, 240, 300],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 301],"float16"), y=Tensor([4, 256, 240, 301],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 301],"float32"), y=Tensor([4, 256, 240, 301],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 302],"float16"), y=Tensor([4, 256, 240, 302],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 304],"float16"), y=Tensor([4, 256, 240, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 304],"float32"), y=Tensor([4, 256, 240, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 312],"float16"), y=Tensor([4, 256, 240, 312],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 312],"float32"), y=Tensor([4, 256, 240, 312],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 313],"float16"), y=Tensor([4, 256, 240, 313],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 313],"float32"), y=Tensor([4, 256, 240, 313],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 320],"float16"), y=Tensor([4, 256, 240, 320],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 320],"float32"), y=Tensor([4, 256, 240, 320],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 328],"float16"), y=Tensor([4, 256, 240, 328],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 328],"float32"), y=Tensor([4, 256, 240, 328],"float32"), )
paddle.add(x=Tensor([4, 256, 240, 336],"float16"), y=Tensor([4, 256, 240, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 240, 336],"float32"), y=Tensor([4, 256, 240, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 241, 246],"float16"), y=Tensor([4, 256, 241, 246],"float16"), )
paddle.add(x=Tensor([4, 256, 241, 246],"float32"), y=Tensor([4, 256, 241, 246],"float32"), )
paddle.add(x=Tensor([4, 256, 241, 264],"float16"), y=Tensor([4, 256, 241, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 241, 264],"float32"), y=Tensor([4, 256, 241, 264],"float32"), )
paddle.add(x=Tensor([4, 256, 241, 265],"float16"), y=Tensor([4, 256, 241, 265],"float16"), )
paddle.add(x=Tensor([4, 256, 241, 276],"float16"), y=Tensor([4, 256, 241, 276],"float16"), )
paddle.add(x=Tensor([4, 256, 241, 276],"float32"), y=Tensor([4, 256, 241, 276],"float32"), )
paddle.add(x=Tensor([4, 256, 241, 334],"float16"), y=Tensor([4, 256, 241, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 241, 334],"float32"), y=Tensor([4, 256, 241, 334],"float32"), )
paddle.add(x=Tensor([4, 256, 242, 224],"float16"), y=Tensor([4, 256, 242, 224],"float16"), )
paddle.add(x=Tensor([4, 256, 242, 224],"float32"), y=Tensor([4, 256, 242, 224],"float32"), )
paddle.add(x=Tensor([4, 256, 242, 276],"float16"), y=Tensor([4, 256, 242, 276],"float16"), )
paddle.add(x=Tensor([4, 256, 242, 276],"float32"), y=Tensor([4, 256, 242, 276],"float32"), )
paddle.add(x=Tensor([4, 256, 245, 285],"float16"), y=Tensor([4, 256, 245, 285],"float16"), )
paddle.add(x=Tensor([4, 256, 246, 192],"float16"), y=Tensor([4, 256, 246, 192],"float16"), )
paddle.add(x=Tensor([4, 256, 246, 253],"float16"), y=Tensor([4, 256, 246, 253],"float16"), )
paddle.add(x=Tensor([4, 256, 246, 253],"float32"), y=Tensor([4, 256, 246, 253],"float32"), )
paddle.add(x=Tensor([4, 256, 246, 265],"float16"), y=Tensor([4, 256, 246, 265],"float16"), )
paddle.add(x=Tensor([4, 256, 246, 265],"float32"), y=Tensor([4, 256, 246, 265],"float32"), )
paddle.add(x=Tensor([4, 256, 246, 266],"float16"), y=Tensor([4, 256, 246, 266],"float16"), )
paddle.add(x=Tensor([4, 256, 246, 266],"float32"), y=Tensor([4, 256, 246, 266],"float32"), )
paddle.add(x=Tensor([4, 256, 246, 267],"float16"), y=Tensor([4, 256, 246, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 246, 267],"float32"), y=Tensor([4, 256, 246, 267],"float32"), )
paddle.add(x=Tensor([4, 256, 246, 276],"float16"), y=Tensor([4, 256, 246, 276],"float16"), )
paddle.add(x=Tensor([4, 256, 246, 276],"float32"), y=Tensor([4, 256, 246, 276],"float32"), )
paddle.add(x=Tensor([4, 256, 246, 290],"float16"), y=Tensor([4, 256, 246, 290],"float16"), )
paddle.add(x=Tensor([4, 256, 246, 300],"float16"), y=Tensor([4, 256, 246, 300],"float16"), )
paddle.add(x=Tensor([4, 256, 246, 300],"float32"), y=Tensor([4, 256, 246, 300],"float32"), )
paddle.add(x=Tensor([4, 256, 246, 303],"float16"), y=Tensor([4, 256, 246, 303],"float16"), )
paddle.add(x=Tensor([4, 256, 246, 321],"float16"), y=Tensor([4, 256, 246, 321],"float16"), )
paddle.add(x=Tensor([4, 256, 246, 327],"float16"), y=Tensor([4, 256, 246, 327],"float16"), )
paddle.add(x=Tensor([4, 256, 246, 334],"float16"), y=Tensor([4, 256, 246, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 246, 334],"float32"), y=Tensor([4, 256, 246, 334],"float32"), )
paddle.add(x=Tensor([4, 256, 247, 334],"float16"), y=Tensor([4, 256, 247, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 247, 334],"float32"), y=Tensor([4, 256, 247, 334],"float32"), )
paddle.add(x=Tensor([4, 256, 248, 184],"float32"), y=Tensor([4, 256, 248, 184],"float32"), )
paddle.add(x=Tensor([4, 256, 248, 192],"float16"), y=Tensor([4, 256, 248, 192],"float16"), )
paddle.add(x=Tensor([4, 256, 248, 192],"float32"), y=Tensor([4, 256, 248, 192],"float32"), )
paddle.add(x=Tensor([4, 256, 248, 216],"float32"), y=Tensor([4, 256, 248, 216],"float32"), )
paddle.add(x=Tensor([4, 256, 248, 224],"float16"), y=Tensor([4, 256, 248, 224],"float16"), )
paddle.add(x=Tensor([4, 256, 248, 224],"float32"), y=Tensor([4, 256, 248, 224],"float32"), )
paddle.add(x=Tensor([4, 256, 248, 248],"float16"), y=Tensor([4, 256, 248, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 248, 248],"float32"), y=Tensor([4, 256, 248, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 248, 256],"float16"), y=Tensor([4, 256, 248, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 248, 256],"float32"), y=Tensor([4, 256, 248, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 248, 264],"float16"), y=Tensor([4, 256, 248, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 248, 264],"float32"), y=Tensor([4, 256, 248, 264],"float32"), )
paddle.add(x=Tensor([4, 256, 248, 272],"float16"), y=Tensor([4, 256, 248, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 248, 272],"float32"), y=Tensor([4, 256, 248, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 248, 280],"float16"), y=Tensor([4, 256, 248, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 248, 280],"float32"), y=Tensor([4, 256, 248, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 248, 288],"float16"), y=Tensor([4, 256, 248, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 248, 288],"float32"), y=Tensor([4, 256, 248, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 248, 296],"float16"), y=Tensor([4, 256, 248, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 248, 296],"float32"), y=Tensor([4, 256, 248, 296],"float32"), )
paddle.add(x=Tensor([4, 256, 248, 304],"float16"), y=Tensor([4, 256, 248, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 248, 304],"float32"), y=Tensor([4, 256, 248, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 248, 312],"float16"), y=Tensor([4, 256, 248, 312],"float16"), )
paddle.add(x=Tensor([4, 256, 248, 328],"float16"), y=Tensor([4, 256, 248, 328],"float16"), )
paddle.add(x=Tensor([4, 256, 248, 328],"float32"), y=Tensor([4, 256, 248, 328],"float32"), )
paddle.add(x=Tensor([4, 256, 248, 336],"float16"), y=Tensor([4, 256, 248, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 248, 336],"float32"), y=Tensor([4, 256, 248, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 250, 224],"float16"), y=Tensor([4, 256, 250, 224],"float16"), )
paddle.add(x=Tensor([4, 256, 250, 286],"float16"), y=Tensor([4, 256, 250, 286],"float16"), )
paddle.add(x=Tensor([4, 256, 250, 289],"float16"), y=Tensor([4, 256, 250, 289],"float16"), )
paddle.add(x=Tensor([4, 256, 250, 289],"float32"), y=Tensor([4, 256, 250, 289],"float32"), )
paddle.add(x=Tensor([4, 256, 250, 334],"float16"), y=Tensor([4, 256, 250, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 250, 334],"float32"), y=Tensor([4, 256, 250, 334],"float32"), )
paddle.add(x=Tensor([4, 256, 252, 235],"float16"), y=Tensor([4, 256, 252, 235],"float16"), )
paddle.add(x=Tensor([4, 256, 252, 235],"float32"), y=Tensor([4, 256, 252, 235],"float32"), )
paddle.add(x=Tensor([4, 256, 252, 254],"float16"), y=Tensor([4, 256, 252, 254],"float16"), )
paddle.add(x=Tensor([4, 256, 252, 254],"float32"), y=Tensor([4, 256, 252, 254],"float32"), )
paddle.add(x=Tensor([4, 256, 252, 256],"float16"), y=Tensor([4, 256, 252, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 252, 256],"float32"), y=Tensor([4, 256, 252, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 252, 290],"float16"), y=Tensor([4, 256, 252, 290],"float16"), )
paddle.add(x=Tensor([4, 256, 252, 290],"float32"), y=Tensor([4, 256, 252, 290],"float32"), )
paddle.add(x=Tensor([4, 256, 252, 300],"float16"), y=Tensor([4, 256, 252, 300],"float16"), )
paddle.add(x=Tensor([4, 256, 252, 301],"float16"), y=Tensor([4, 256, 252, 301],"float16"), )
paddle.add(x=Tensor([4, 256, 252, 328],"float16"), y=Tensor([4, 256, 252, 328],"float16"), )
paddle.add(x=Tensor([4, 256, 252, 334],"float16"), y=Tensor([4, 256, 252, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 252, 334],"float32"), y=Tensor([4, 256, 252, 334],"float32"), )
paddle.add(x=Tensor([4, 256, 253, 252],"float16"), y=Tensor([4, 256, 253, 252],"float16"), )
paddle.add(x=Tensor([4, 256, 253, 252],"float32"), y=Tensor([4, 256, 253, 252],"float32"), )
paddle.add(x=Tensor([4, 256, 253, 263],"float16"), y=Tensor([4, 256, 253, 263],"float16"), )
paddle.add(x=Tensor([4, 256, 253, 290],"float16"), y=Tensor([4, 256, 253, 290],"float16"), )
paddle.add(x=Tensor([4, 256, 253, 290],"float32"), y=Tensor([4, 256, 253, 290],"float32"), )
paddle.add(x=Tensor([4, 256, 253, 300],"float16"), y=Tensor([4, 256, 253, 300],"float16"), )
paddle.add(x=Tensor([4, 256, 253, 300],"float32"), y=Tensor([4, 256, 253, 300],"float32"), )
paddle.add(x=Tensor([4, 256, 253, 301],"float16"), y=Tensor([4, 256, 253, 301],"float16"), )
paddle.add(x=Tensor([4, 256, 253, 301],"float32"), y=Tensor([4, 256, 253, 301],"float32"), )
paddle.add(x=Tensor([4, 256, 253, 329],"float16"), y=Tensor([4, 256, 253, 329],"float16"), )
paddle.add(x=Tensor([4, 256, 253, 329],"float32"), y=Tensor([4, 256, 253, 329],"float32"), )
paddle.add(x=Tensor([4, 256, 253, 334],"float16"), y=Tensor([4, 256, 253, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 253, 334],"float32"), y=Tensor([4, 256, 253, 334],"float32"), )
paddle.add(x=Tensor([4, 256, 254, 297],"float16"), y=Tensor([4, 256, 254, 297],"float16"), )
paddle.add(x=Tensor([4, 256, 255, 305],"float16"), y=Tensor([4, 256, 255, 305],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 192],"float32"), y=Tensor([4, 256, 256, 192],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 216],"float16"), y=Tensor([4, 256, 256, 216],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 224],"float16"), y=Tensor([4, 256, 256, 224],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 224],"float32"), y=Tensor([4, 256, 256, 224],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 235],"float16"), y=Tensor([4, 256, 256, 235],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 235],"float32"), y=Tensor([4, 256, 256, 235],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 240],"float16"), y=Tensor([4, 256, 256, 240],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 240],"float32"), y=Tensor([4, 256, 256, 240],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 246],"float16"), y=Tensor([4, 256, 256, 246],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 246],"float32"), y=Tensor([4, 256, 256, 246],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 248],"float16"), y=Tensor([4, 256, 256, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 248],"float32"), y=Tensor([4, 256, 256, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 250],"float16"), y=Tensor([4, 256, 256, 250],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 253],"float16"), y=Tensor([4, 256, 256, 253],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 256],"float16"), y=Tensor([4, 256, 256, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 256],"float32"), y=Tensor([4, 256, 256, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 264],"float16"), y=Tensor([4, 256, 256, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 264],"float32"), y=Tensor([4, 256, 256, 264],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 267],"float16"), y=Tensor([4, 256, 256, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 272],"float16"), y=Tensor([4, 256, 256, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 272],"float32"), y=Tensor([4, 256, 256, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 277],"float16"), y=Tensor([4, 256, 256, 277],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 277],"float32"), y=Tensor([4, 256, 256, 277],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 280],"float16"), y=Tensor([4, 256, 256, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 280],"float32"), y=Tensor([4, 256, 256, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 288],"float16"), y=Tensor([4, 256, 256, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 288],"float32"), y=Tensor([4, 256, 256, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 291],"float16"), y=Tensor([4, 256, 256, 291],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 296],"float16"), y=Tensor([4, 256, 256, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 296],"float32"), y=Tensor([4, 256, 256, 296],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 300],"float16"), y=Tensor([4, 256, 256, 300],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 304],"float16"), y=Tensor([4, 256, 256, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 304],"float32"), y=Tensor([4, 256, 256, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 312],"float16"), y=Tensor([4, 256, 256, 312],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 312],"float32"), y=Tensor([4, 256, 256, 312],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 313],"float16"), y=Tensor([4, 256, 256, 313],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 313],"float32"), y=Tensor([4, 256, 256, 313],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 320],"float16"), y=Tensor([4, 256, 256, 320],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 320],"float32"), y=Tensor([4, 256, 256, 320],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 328],"float16"), y=Tensor([4, 256, 256, 328],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 328],"float32"), y=Tensor([4, 256, 256, 328],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 334],"float16"), y=Tensor([4, 256, 256, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 334],"float32"), y=Tensor([4, 256, 256, 334],"float32"), )
paddle.add(x=Tensor([4, 256, 256, 336],"float16"), y=Tensor([4, 256, 256, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 256, 336],"float32"), y=Tensor([4, 256, 256, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 257, 192],"float16"), y=Tensor([4, 256, 257, 192],"float16"), )
paddle.add(x=Tensor([4, 256, 257, 300],"float16"), y=Tensor([4, 256, 257, 300],"float16"), )
paddle.add(x=Tensor([4, 256, 257, 300],"float32"), y=Tensor([4, 256, 257, 300],"float32"), )
paddle.add(x=Tensor([4, 256, 257, 307],"float16"), y=Tensor([4, 256, 257, 307],"float16"), )
paddle.add(x=Tensor([4, 256, 257, 307],"float32"), y=Tensor([4, 256, 257, 307],"float32"), )
paddle.add(x=Tensor([4, 256, 257, 334],"float16"), y=Tensor([4, 256, 257, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 258, 314],"float16"), y=Tensor([4, 256, 258, 314],"float16"), )
paddle.add(x=Tensor([4, 256, 258, 314],"float32"), y=Tensor([4, 256, 258, 314],"float32"), )
paddle.add(x=Tensor([4, 256, 260, 246],"float16"), y=Tensor([4, 256, 260, 246],"float16"), )
paddle.add(x=Tensor([4, 256, 260, 246],"float32"), y=Tensor([4, 256, 260, 246],"float32"), )
paddle.add(x=Tensor([4, 256, 260, 256],"float16"), y=Tensor([4, 256, 260, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 260, 256],"float32"), y=Tensor([4, 256, 260, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 260, 303],"float16"), y=Tensor([4, 256, 260, 303],"float16"), )
paddle.add(x=Tensor([4, 256, 260, 303],"float32"), y=Tensor([4, 256, 260, 303],"float32"), )
paddle.add(x=Tensor([4, 256, 262, 258],"float16"), y=Tensor([4, 256, 262, 258],"float16"), )
paddle.add(x=Tensor([4, 256, 262, 258],"float32"), y=Tensor([4, 256, 262, 258],"float32"), )
paddle.add(x=Tensor([4, 256, 263, 267],"float16"), y=Tensor([4, 256, 263, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 263, 267],"float32"), y=Tensor([4, 256, 263, 267],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 192],"float16"), y=Tensor([4, 256, 264, 192],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 192],"float32"), y=Tensor([4, 256, 264, 192],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 200],"float32"), y=Tensor([4, 256, 264, 200],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 208],"float16"), y=Tensor([4, 256, 264, 208],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 214],"float16"), y=Tensor([4, 256, 264, 214],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 214],"float32"), y=Tensor([4, 256, 264, 214],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 216],"float16"), y=Tensor([4, 256, 264, 216],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 216],"float32"), y=Tensor([4, 256, 264, 216],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 246],"float16"), y=Tensor([4, 256, 264, 246],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 246],"float32"), y=Tensor([4, 256, 264, 246],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 248],"float16"), y=Tensor([4, 256, 264, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 248],"float32"), y=Tensor([4, 256, 264, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 256],"float16"), y=Tensor([4, 256, 264, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 256],"float32"), y=Tensor([4, 256, 264, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 264],"float16"), y=Tensor([4, 256, 264, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 264],"float32"), y=Tensor([4, 256, 264, 264],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 272],"float16"), y=Tensor([4, 256, 264, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 272],"float32"), y=Tensor([4, 256, 264, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 276],"float16"), y=Tensor([4, 256, 264, 276],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 277],"float16"), y=Tensor([4, 256, 264, 277],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 277],"float32"), y=Tensor([4, 256, 264, 277],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 280],"float16"), y=Tensor([4, 256, 264, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 280],"float32"), y=Tensor([4, 256, 264, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 288],"float16"), y=Tensor([4, 256, 264, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 288],"float32"), y=Tensor([4, 256, 264, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 296],"float16"), y=Tensor([4, 256, 264, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 296],"float32"), y=Tensor([4, 256, 264, 296],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 300],"float16"), y=Tensor([4, 256, 264, 300],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 300],"float32"), y=Tensor([4, 256, 264, 300],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 301],"float16"), y=Tensor([4, 256, 264, 301],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 301],"float32"), y=Tensor([4, 256, 264, 301],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 304],"float16"), y=Tensor([4, 256, 264, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 304],"float32"), y=Tensor([4, 256, 264, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 312],"float16"), y=Tensor([4, 256, 264, 312],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 312],"float32"), y=Tensor([4, 256, 264, 312],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 320],"float16"), y=Tensor([4, 256, 264, 320],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 320],"float32"), y=Tensor([4, 256, 264, 320],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 325],"float16"), y=Tensor([4, 256, 264, 325],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 328],"float16"), y=Tensor([4, 256, 264, 328],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 328],"float32"), y=Tensor([4, 256, 264, 328],"float32"), )
paddle.add(x=Tensor([4, 256, 264, 336],"float16"), y=Tensor([4, 256, 264, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 264, 336],"float32"), y=Tensor([4, 256, 264, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 265, 256],"float16"), y=Tensor([4, 256, 265, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 265, 270],"float16"), y=Tensor([4, 256, 265, 270],"float16"), )
paddle.add(x=Tensor([4, 256, 265, 270],"float32"), y=Tensor([4, 256, 265, 270],"float32"), )
paddle.add(x=Tensor([4, 256, 265, 276],"float16"), y=Tensor([4, 256, 265, 276],"float16"), )
paddle.add(x=Tensor([4, 256, 265, 289],"float16"), y=Tensor([4, 256, 265, 289],"float16"), )
paddle.add(x=Tensor([4, 256, 265, 290],"float16"), y=Tensor([4, 256, 265, 290],"float16"), )
paddle.add(x=Tensor([4, 256, 265, 290],"float32"), y=Tensor([4, 256, 265, 290],"float32"), )
paddle.add(x=Tensor([4, 256, 265, 320],"float16"), y=Tensor([4, 256, 265, 320],"float16"), )
paddle.add(x=Tensor([4, 256, 265, 320],"float32"), y=Tensor([4, 256, 265, 320],"float32"), )
paddle.add(x=Tensor([4, 256, 265, 334],"float16"), y=Tensor([4, 256, 265, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 265, 334],"float32"), y=Tensor([4, 256, 265, 334],"float32"), )
paddle.add(x=Tensor([4, 256, 266, 214],"float16"), y=Tensor([4, 256, 266, 214],"float16"), )
paddle.add(x=Tensor([4, 256, 266, 214],"float32"), y=Tensor([4, 256, 266, 214],"float32"), )
paddle.add(x=Tensor([4, 256, 266, 277],"float16"), y=Tensor([4, 256, 266, 277],"float16"), )
paddle.add(x=Tensor([4, 256, 267, 242],"float16"), y=Tensor([4, 256, 267, 242],"float16"), )
paddle.add(x=Tensor([4, 256, 267, 246],"float16"), y=Tensor([4, 256, 267, 246],"float16"), )
paddle.add(x=Tensor([4, 256, 267, 252],"float16"), y=Tensor([4, 256, 267, 252],"float16"), )
paddle.add(x=Tensor([4, 256, 267, 254],"float16"), y=Tensor([4, 256, 267, 254],"float16"), )
paddle.add(x=Tensor([4, 256, 267, 256],"float16"), y=Tensor([4, 256, 267, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 267, 267],"float16"), y=Tensor([4, 256, 267, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 267, 275],"float16"), y=Tensor([4, 256, 267, 275],"float16"), )
paddle.add(x=Tensor([4, 256, 267, 277],"float16"), y=Tensor([4, 256, 267, 277],"float16"), )
paddle.add(x=Tensor([4, 256, 267, 290],"float16"), y=Tensor([4, 256, 267, 290],"float16"), )
paddle.add(x=Tensor([4, 256, 267, 300],"float16"), y=Tensor([4, 256, 267, 300],"float16"), )
paddle.add(x=Tensor([4, 256, 267, 330],"float16"), y=Tensor([4, 256, 267, 330],"float16"), )
paddle.add(x=Tensor([4, 256, 268, 228],"float16"), y=Tensor([4, 256, 268, 228],"float16"), )
paddle.add(x=Tensor([4, 256, 268, 276],"float16"), y=Tensor([4, 256, 268, 276],"float16"), )
paddle.add(x=Tensor([4, 256, 268, 288],"float16"), y=Tensor([4, 256, 268, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 268, 288],"float32"), y=Tensor([4, 256, 268, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 268, 300],"float16"), y=Tensor([4, 256, 268, 300],"float16"), )
paddle.add(x=Tensor([4, 256, 268, 302],"float16"), y=Tensor([4, 256, 268, 302],"float16"), )
paddle.add(x=Tensor([4, 256, 268, 302],"float32"), y=Tensor([4, 256, 268, 302],"float32"), )
paddle.add(x=Tensor([4, 256, 270, 240],"float16"), y=Tensor([4, 256, 270, 240],"float16"), )
paddle.add(x=Tensor([4, 256, 270, 240],"float32"), y=Tensor([4, 256, 270, 240],"float32"), )
paddle.add(x=Tensor([4, 256, 272, 176],"float16"), y=Tensor([4, 256, 272, 176],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 192],"float16"), y=Tensor([4, 256, 272, 192],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 200],"float16"), y=Tensor([4, 256, 272, 200],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 200],"float32"), y=Tensor([4, 256, 272, 200],"float32"), )
paddle.add(x=Tensor([4, 256, 272, 216],"float16"), y=Tensor([4, 256, 272, 216],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 216],"float32"), y=Tensor([4, 256, 272, 216],"float32"), )
paddle.add(x=Tensor([4, 256, 272, 224],"float16"), y=Tensor([4, 256, 272, 224],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 224],"float32"), y=Tensor([4, 256, 272, 224],"float32"), )
paddle.add(x=Tensor([4, 256, 272, 232],"float16"), y=Tensor([4, 256, 272, 232],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 232],"float32"), y=Tensor([4, 256, 272, 232],"float32"), )
paddle.add(x=Tensor([4, 256, 272, 240],"float16"), y=Tensor([4, 256, 272, 240],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 240],"float32"), y=Tensor([4, 256, 272, 240],"float32"), )
paddle.add(x=Tensor([4, 256, 272, 248],"float16"), y=Tensor([4, 256, 272, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 248],"float32"), y=Tensor([4, 256, 272, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 272, 256],"float16"), y=Tensor([4, 256, 272, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 256],"float32"), y=Tensor([4, 256, 272, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 272, 264],"float16"), y=Tensor([4, 256, 272, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 272],"float16"), y=Tensor([4, 256, 272, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 272],"float32"), y=Tensor([4, 256, 272, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 272, 280],"float16"), y=Tensor([4, 256, 272, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 280],"float32"), y=Tensor([4, 256, 272, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 272, 288],"float16"), y=Tensor([4, 256, 272, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 288],"float32"), y=Tensor([4, 256, 272, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 272, 296],"float16"), y=Tensor([4, 256, 272, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 296],"float32"), y=Tensor([4, 256, 272, 296],"float32"), )
paddle.add(x=Tensor([4, 256, 272, 304],"float16"), y=Tensor([4, 256, 272, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 304],"float32"), y=Tensor([4, 256, 272, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 272, 312],"float16"), y=Tensor([4, 256, 272, 312],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 312],"float32"), y=Tensor([4, 256, 272, 312],"float32"), )
paddle.add(x=Tensor([4, 256, 272, 320],"float16"), y=Tensor([4, 256, 272, 320],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 320],"float32"), y=Tensor([4, 256, 272, 320],"float32"), )
paddle.add(x=Tensor([4, 256, 272, 328],"float16"), y=Tensor([4, 256, 272, 328],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 328],"float32"), y=Tensor([4, 256, 272, 328],"float32"), )
paddle.add(x=Tensor([4, 256, 272, 336],"float16"), y=Tensor([4, 256, 272, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 272, 336],"float32"), y=Tensor([4, 256, 272, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 273, 267],"float16"), y=Tensor([4, 256, 273, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 273, 267],"float32"), y=Tensor([4, 256, 273, 267],"float32"), )
paddle.add(x=Tensor([4, 256, 275, 192],"float16"), y=Tensor([4, 256, 275, 192],"float16"), )
paddle.add(x=Tensor([4, 256, 275, 192],"float32"), y=Tensor([4, 256, 275, 192],"float32"), )
paddle.add(x=Tensor([4, 256, 275, 290],"float16"), y=Tensor([4, 256, 275, 290],"float16"), )
paddle.add(x=Tensor([4, 256, 276, 224],"float16"), y=Tensor([4, 256, 276, 224],"float16"), )
paddle.add(x=Tensor([4, 256, 276, 235],"float16"), y=Tensor([4, 256, 276, 235],"float16"), )
paddle.add(x=Tensor([4, 256, 276, 253],"float16"), y=Tensor([4, 256, 276, 253],"float16"), )
paddle.add(x=Tensor([4, 256, 276, 253],"float32"), y=Tensor([4, 256, 276, 253],"float32"), )
paddle.add(x=Tensor([4, 256, 276, 256],"float16"), y=Tensor([4, 256, 276, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 276, 267],"float16"), y=Tensor([4, 256, 276, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 276, 276],"float16"), y=Tensor([4, 256, 276, 276],"float16"), )
paddle.add(x=Tensor([4, 256, 276, 286],"float16"), y=Tensor([4, 256, 276, 286],"float16"), )
paddle.add(x=Tensor([4, 256, 276, 286],"float32"), y=Tensor([4, 256, 276, 286],"float32"), )
paddle.add(x=Tensor([4, 256, 276, 288],"float16"), y=Tensor([4, 256, 276, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 276, 288],"float32"), y=Tensor([4, 256, 276, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 276, 300],"float16"), y=Tensor([4, 256, 276, 300],"float16"), )
paddle.add(x=Tensor([4, 256, 276, 300],"float32"), y=Tensor([4, 256, 276, 300],"float32"), )
paddle.add(x=Tensor([4, 256, 276, 301],"float16"), y=Tensor([4, 256, 276, 301],"float16"), )
paddle.add(x=Tensor([4, 256, 276, 301],"float32"), y=Tensor([4, 256, 276, 301],"float32"), )
paddle.add(x=Tensor([4, 256, 276, 334],"float16"), y=Tensor([4, 256, 276, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 276, 334],"float32"), y=Tensor([4, 256, 276, 334],"float32"), )
paddle.add(x=Tensor([4, 256, 277, 224],"float16"), y=Tensor([4, 256, 277, 224],"float16"), )
paddle.add(x=Tensor([4, 256, 277, 224],"float32"), y=Tensor([4, 256, 277, 224],"float32"), )
paddle.add(x=Tensor([4, 256, 277, 252],"float16"), y=Tensor([4, 256, 277, 252],"float16"), )
paddle.add(x=Tensor([4, 256, 277, 277],"float16"), y=Tensor([4, 256, 277, 277],"float16"), )
paddle.add(x=Tensor([4, 256, 277, 281],"float16"), y=Tensor([4, 256, 277, 281],"float16"), )
paddle.add(x=Tensor([4, 256, 278, 256],"float16"), y=Tensor([4, 256, 278, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 279, 253],"float16"), y=Tensor([4, 256, 279, 253],"float16"), )
paddle.add(x=Tensor([4, 256, 279, 253],"float32"), y=Tensor([4, 256, 279, 253],"float32"), )
paddle.add(x=Tensor([4, 256, 280, 192],"float16"), y=Tensor([4, 256, 280, 192],"float16"), )
paddle.add(x=Tensor([4, 256, 280, 192],"float32"), y=Tensor([4, 256, 280, 192],"float32"), )
paddle.add(x=Tensor([4, 256, 280, 224],"float16"), y=Tensor([4, 256, 280, 224],"float16"), )
paddle.add(x=Tensor([4, 256, 280, 224],"float32"), y=Tensor([4, 256, 280, 224],"float32"), )
paddle.add(x=Tensor([4, 256, 280, 240],"float16"), y=Tensor([4, 256, 280, 240],"float16"), )
paddle.add(x=Tensor([4, 256, 280, 240],"float32"), y=Tensor([4, 256, 280, 240],"float32"), )
paddle.add(x=Tensor([4, 256, 280, 248],"float16"), y=Tensor([4, 256, 280, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 280, 248],"float32"), y=Tensor([4, 256, 280, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 280, 256],"float16"), y=Tensor([4, 256, 280, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 280, 256],"float32"), y=Tensor([4, 256, 280, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 280, 264],"float16"), y=Tensor([4, 256, 280, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 280, 264],"float32"), y=Tensor([4, 256, 280, 264],"float32"), )
paddle.add(x=Tensor([4, 256, 280, 272],"float16"), y=Tensor([4, 256, 280, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 280, 272],"float32"), y=Tensor([4, 256, 280, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 280, 280],"float16"), y=Tensor([4, 256, 280, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 280, 280],"float32"), y=Tensor([4, 256, 280, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 280, 288],"float16"), y=Tensor([4, 256, 280, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 280, 288],"float32"), y=Tensor([4, 256, 280, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 280, 296],"float16"), y=Tensor([4, 256, 280, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 280, 296],"float32"), y=Tensor([4, 256, 280, 296],"float32"), )
paddle.add(x=Tensor([4, 256, 280, 304],"float16"), y=Tensor([4, 256, 280, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 280, 304],"float32"), y=Tensor([4, 256, 280, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 280, 312],"float16"), y=Tensor([4, 256, 280, 312],"float16"), )
paddle.add(x=Tensor([4, 256, 280, 312],"float32"), y=Tensor([4, 256, 280, 312],"float32"), )
paddle.add(x=Tensor([4, 256, 280, 328],"float16"), y=Tensor([4, 256, 280, 328],"float16"), )
paddle.add(x=Tensor([4, 256, 280, 336],"float16"), y=Tensor([4, 256, 280, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 280, 336],"float32"), y=Tensor([4, 256, 280, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 281, 282],"float16"), y=Tensor([4, 256, 281, 282],"float16"), )
paddle.add(x=Tensor([4, 256, 281, 312],"float16"), y=Tensor([4, 256, 281, 312],"float16"), )
paddle.add(x=Tensor([4, 256, 283, 263],"float16"), y=Tensor([4, 256, 283, 263],"float16"), )
paddle.add(x=Tensor([4, 256, 283, 263],"float32"), y=Tensor([4, 256, 283, 263],"float32"), )
paddle.add(x=Tensor([4, 256, 284, 256],"float16"), y=Tensor([4, 256, 284, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 284, 256],"float32"), y=Tensor([4, 256, 284, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 287, 267],"float16"), y=Tensor([4, 256, 287, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 287, 267],"float32"), y=Tensor([4, 256, 287, 267],"float32"), )
paddle.add(x=Tensor([4, 256, 287, 327],"float16"), y=Tensor([4, 256, 287, 327],"float16"), )
paddle.add(x=Tensor([4, 256, 287, 327],"float32"), y=Tensor([4, 256, 287, 327],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 192],"float32"), y=Tensor([4, 256, 288, 192],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 200],"float32"), y=Tensor([4, 256, 288, 200],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 214],"float16"), y=Tensor([4, 256, 288, 214],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 214],"float32"), y=Tensor([4, 256, 288, 214],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 216],"float16"), y=Tensor([4, 256, 288, 216],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 216],"float32"), y=Tensor([4, 256, 288, 216],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 224],"float16"), y=Tensor([4, 256, 288, 224],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 224],"float32"), y=Tensor([4, 256, 288, 224],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 235],"float16"), y=Tensor([4, 256, 288, 235],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 235],"float32"), y=Tensor([4, 256, 288, 235],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 240],"float16"), y=Tensor([4, 256, 288, 240],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 240],"float32"), y=Tensor([4, 256, 288, 240],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 246],"float16"), y=Tensor([4, 256, 288, 246],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 248],"float16"), y=Tensor([4, 256, 288, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 248],"float32"), y=Tensor([4, 256, 288, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 256],"float16"), y=Tensor([4, 256, 288, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 256],"float32"), y=Tensor([4, 256, 288, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 264],"float16"), y=Tensor([4, 256, 288, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 264],"float32"), y=Tensor([4, 256, 288, 264],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 267],"float16"), y=Tensor([4, 256, 288, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 267],"float32"), y=Tensor([4, 256, 288, 267],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 268],"float16"), y=Tensor([4, 256, 288, 268],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 272],"float16"), y=Tensor([4, 256, 288, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 272],"float32"), y=Tensor([4, 256, 288, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 276],"float16"), y=Tensor([4, 256, 288, 276],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 280],"float16"), y=Tensor([4, 256, 288, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 280],"float32"), y=Tensor([4, 256, 288, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 286],"float16"), y=Tensor([4, 256, 288, 286],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 288],"float16"), y=Tensor([4, 256, 288, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 288],"float32"), y=Tensor([4, 256, 288, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 296],"float16"), y=Tensor([4, 256, 288, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 304],"float16"), y=Tensor([4, 256, 288, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 304],"float32"), y=Tensor([4, 256, 288, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 312],"float16"), y=Tensor([4, 256, 288, 312],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 312],"float32"), y=Tensor([4, 256, 288, 312],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 320],"float32"), y=Tensor([4, 256, 288, 320],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 328],"float16"), y=Tensor([4, 256, 288, 328],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 328],"float32"), y=Tensor([4, 256, 288, 328],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 334],"float16"), y=Tensor([4, 256, 288, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 336],"float16"), y=Tensor([4, 256, 288, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 288, 336],"float32"), y=Tensor([4, 256, 288, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 288, 352],"float32"), y=Tensor([4, 256, 288, 352],"float32"), )
paddle.add(x=Tensor([4, 256, 289, 256],"float16"), y=Tensor([4, 256, 289, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 289, 288],"float16"), y=Tensor([4, 256, 289, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 289, 289],"float16"), y=Tensor([4, 256, 289, 289],"float16"), )
paddle.add(x=Tensor([4, 256, 289, 289],"float32"), y=Tensor([4, 256, 289, 289],"float32"), )
paddle.add(x=Tensor([4, 256, 289, 300],"float16"), y=Tensor([4, 256, 289, 300],"float16"), )
paddle.add(x=Tensor([4, 256, 289, 301],"float16"), y=Tensor([4, 256, 289, 301],"float16"), )
paddle.add(x=Tensor([4, 256, 289, 320],"float16"), y=Tensor([4, 256, 289, 320],"float16"), )
paddle.add(x=Tensor([4, 256, 289, 320],"float32"), y=Tensor([4, 256, 289, 320],"float32"), )
paddle.add(x=Tensor([4, 256, 289, 334],"float16"), y=Tensor([4, 256, 289, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 290, 264],"float16"), y=Tensor([4, 256, 290, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 290, 267],"float16"), y=Tensor([4, 256, 290, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 290, 267],"float32"), y=Tensor([4, 256, 290, 267],"float32"), )
paddle.add(x=Tensor([4, 256, 290, 290],"float16"), y=Tensor([4, 256, 290, 290],"float16"), )
paddle.add(x=Tensor([4, 256, 290, 290],"float32"), y=Tensor([4, 256, 290, 290],"float32"), )
paddle.add(x=Tensor([4, 256, 293, 250],"float16"), y=Tensor([4, 256, 293, 250],"float16"), )
paddle.add(x=Tensor([4, 256, 293, 250],"float32"), y=Tensor([4, 256, 293, 250],"float32"), )
paddle.add(x=Tensor([4, 256, 296, 240],"float16"), y=Tensor([4, 256, 296, 240],"float16"), )
paddle.add(x=Tensor([4, 256, 296, 256],"float16"), y=Tensor([4, 256, 296, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 296, 256],"float32"), y=Tensor([4, 256, 296, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 296, 264],"float16"), y=Tensor([4, 256, 296, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 296, 264],"float32"), y=Tensor([4, 256, 296, 264],"float32"), )
paddle.add(x=Tensor([4, 256, 296, 272],"float16"), y=Tensor([4, 256, 296, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 296, 272],"float32"), y=Tensor([4, 256, 296, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 296, 276],"float16"), y=Tensor([4, 256, 296, 276],"float16"), )
paddle.add(x=Tensor([4, 256, 296, 280],"float16"), y=Tensor([4, 256, 296, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 296, 280],"float32"), y=Tensor([4, 256, 296, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 296, 288],"float16"), y=Tensor([4, 256, 296, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 296, 288],"float32"), y=Tensor([4, 256, 296, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 296, 296],"float16"), y=Tensor([4, 256, 296, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 296, 296],"float32"), y=Tensor([4, 256, 296, 296],"float32"), )
paddle.add(x=Tensor([4, 256, 296, 304],"float16"), y=Tensor([4, 256, 296, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 296, 304],"float32"), y=Tensor([4, 256, 296, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 296, 320],"float16"), y=Tensor([4, 256, 296, 320],"float16"), )
paddle.add(x=Tensor([4, 256, 296, 320],"float32"), y=Tensor([4, 256, 296, 320],"float32"), )
paddle.add(x=Tensor([4, 256, 296, 328],"float16"), y=Tensor([4, 256, 296, 328],"float16"), )
paddle.add(x=Tensor([4, 256, 296, 336],"float16"), y=Tensor([4, 256, 296, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 296, 336],"float32"), y=Tensor([4, 256, 296, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 298, 246],"float16"), y=Tensor([4, 256, 298, 246],"float16"), )
paddle.add(x=Tensor([4, 256, 298, 246],"float32"), y=Tensor([4, 256, 298, 246],"float32"), )
paddle.add(x=Tensor([4, 256, 299, 267],"float16"), y=Tensor([4, 256, 299, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 299, 277],"float16"), y=Tensor([4, 256, 299, 277],"float16"), )
paddle.add(x=Tensor([4, 256, 299, 277],"float32"), y=Tensor([4, 256, 299, 277],"float32"), )
paddle.add(x=Tensor([4, 256, 299, 287],"float16"), y=Tensor([4, 256, 299, 287],"float16"), )
paddle.add(x=Tensor([4, 256, 299, 287],"float32"), y=Tensor([4, 256, 299, 287],"float32"), )
paddle.add(x=Tensor([4, 256, 299, 299],"float16"), y=Tensor([4, 256, 299, 299],"float16"), )
paddle.add(x=Tensor([4, 256, 299, 299],"float32"), y=Tensor([4, 256, 299, 299],"float32"), )
paddle.add(x=Tensor([4, 256, 300, 200],"float16"), y=Tensor([4, 256, 300, 200],"float16"), )
paddle.add(x=Tensor([4, 256, 300, 200],"float32"), y=Tensor([4, 256, 300, 200],"float32"), )
paddle.add(x=Tensor([4, 256, 300, 242],"float16"), y=Tensor([4, 256, 300, 242],"float16"), )
paddle.add(x=Tensor([4, 256, 300, 242],"float32"), y=Tensor([4, 256, 300, 242],"float32"), )
paddle.add(x=Tensor([4, 256, 300, 253],"float16"), y=Tensor([4, 256, 300, 253],"float16"), )
paddle.add(x=Tensor([4, 256, 300, 253],"float32"), y=Tensor([4, 256, 300, 253],"float32"), )
paddle.add(x=Tensor([4, 256, 300, 256],"float16"), y=Tensor([4, 256, 300, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 300, 256],"float32"), y=Tensor([4, 256, 300, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 300, 267],"float16"), y=Tensor([4, 256, 300, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 300, 276],"float16"), y=Tensor([4, 256, 300, 276],"float16"), )
paddle.add(x=Tensor([4, 256, 300, 277],"float16"), y=Tensor([4, 256, 300, 277],"float16"), )
paddle.add(x=Tensor([4, 256, 300, 278],"float16"), y=Tensor([4, 256, 300, 278],"float16"), )
paddle.add(x=Tensor([4, 256, 300, 278],"float32"), y=Tensor([4, 256, 300, 278],"float32"), )
paddle.add(x=Tensor([4, 256, 300, 287],"float16"), y=Tensor([4, 256, 300, 287],"float16"), )
paddle.add(x=Tensor([4, 256, 300, 288],"float16"), y=Tensor([4, 256, 300, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 300, 290],"float16"), y=Tensor([4, 256, 300, 290],"float16"), )
paddle.add(x=Tensor([4, 256, 300, 290],"float32"), y=Tensor([4, 256, 300, 290],"float32"), )
paddle.add(x=Tensor([4, 256, 300, 334],"float16"), y=Tensor([4, 256, 300, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 301, 200],"float16"), y=Tensor([4, 256, 301, 200],"float16"), )
paddle.add(x=Tensor([4, 256, 301, 252],"float16"), y=Tensor([4, 256, 301, 252],"float16"), )
paddle.add(x=Tensor([4, 256, 301, 252],"float32"), y=Tensor([4, 256, 301, 252],"float32"), )
paddle.add(x=Tensor([4, 256, 301, 264],"float16"), y=Tensor([4, 256, 301, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 301, 267],"float16"), y=Tensor([4, 256, 301, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 301, 267],"float32"), y=Tensor([4, 256, 301, 267],"float32"), )
paddle.add(x=Tensor([4, 256, 301, 285],"float16"), y=Tensor([4, 256, 301, 285],"float16"), )
paddle.add(x=Tensor([4, 256, 301, 285],"float32"), y=Tensor([4, 256, 301, 285],"float32"), )
paddle.add(x=Tensor([4, 256, 301, 287],"float16"), y=Tensor([4, 256, 301, 287],"float16"), )
paddle.add(x=Tensor([4, 256, 301, 330],"float16"), y=Tensor([4, 256, 301, 330],"float16"), )
paddle.add(x=Tensor([4, 256, 301, 330],"float32"), y=Tensor([4, 256, 301, 330],"float32"), )
paddle.add(x=Tensor([4, 256, 301, 334],"float16"), y=Tensor([4, 256, 301, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 302, 288],"float16"), y=Tensor([4, 256, 302, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 302, 288],"float32"), y=Tensor([4, 256, 302, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 302, 301],"float16"), y=Tensor([4, 256, 302, 301],"float16"), )
paddle.add(x=Tensor([4, 256, 302, 301],"float32"), y=Tensor([4, 256, 302, 301],"float32"), )
paddle.add(x=Tensor([4, 256, 302, 313],"float16"), y=Tensor([4, 256, 302, 313],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 200],"float16"), y=Tensor([4, 256, 304, 200],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 200],"float32"), y=Tensor([4, 256, 304, 200],"float32"), )
paddle.add(x=Tensor([4, 256, 304, 216],"float16"), y=Tensor([4, 256, 304, 216],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 224],"float16"), y=Tensor([4, 256, 304, 224],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 240],"float16"), y=Tensor([4, 256, 304, 240],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 248],"float16"), y=Tensor([4, 256, 304, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 248],"float32"), y=Tensor([4, 256, 304, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 304, 256],"float16"), y=Tensor([4, 256, 304, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 256],"float32"), y=Tensor([4, 256, 304, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 304, 264],"float16"), y=Tensor([4, 256, 304, 264],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 264],"float32"), y=Tensor([4, 256, 304, 264],"float32"), )
paddle.add(x=Tensor([4, 256, 304, 272],"float16"), y=Tensor([4, 256, 304, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 272],"float32"), y=Tensor([4, 256, 304, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 304, 280],"float16"), y=Tensor([4, 256, 304, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 280],"float32"), y=Tensor([4, 256, 304, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 304, 285],"float16"), y=Tensor([4, 256, 304, 285],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 285],"float32"), y=Tensor([4, 256, 304, 285],"float32"), )
paddle.add(x=Tensor([4, 256, 304, 288],"float16"), y=Tensor([4, 256, 304, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 288],"float32"), y=Tensor([4, 256, 304, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 304, 296],"float16"), y=Tensor([4, 256, 304, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 296],"float32"), y=Tensor([4, 256, 304, 296],"float32"), )
paddle.add(x=Tensor([4, 256, 304, 304],"float16"), y=Tensor([4, 256, 304, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 304],"float32"), y=Tensor([4, 256, 304, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 304, 312],"float16"), y=Tensor([4, 256, 304, 312],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 312],"float32"), y=Tensor([4, 256, 304, 312],"float32"), )
paddle.add(x=Tensor([4, 256, 304, 320],"float16"), y=Tensor([4, 256, 304, 320],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 320],"float32"), y=Tensor([4, 256, 304, 320],"float32"), )
paddle.add(x=Tensor([4, 256, 304, 328],"float16"), y=Tensor([4, 256, 304, 328],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 328],"float32"), y=Tensor([4, 256, 304, 328],"float32"), )
paddle.add(x=Tensor([4, 256, 304, 336],"float16"), y=Tensor([4, 256, 304, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 304, 336],"float32"), y=Tensor([4, 256, 304, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 305, 275],"float16"), y=Tensor([4, 256, 305, 275],"float16"), )
paddle.add(x=Tensor([4, 256, 306, 246],"float16"), y=Tensor([4, 256, 306, 246],"float16"), )
paddle.add(x=Tensor([4, 256, 306, 246],"float32"), y=Tensor([4, 256, 306, 246],"float32"), )
paddle.add(x=Tensor([4, 256, 307, 224],"float16"), y=Tensor([4, 256, 307, 224],"float16"), )
paddle.add(x=Tensor([4, 256, 312, 224],"float16"), y=Tensor([4, 256, 312, 224],"float16"), )
paddle.add(x=Tensor([4, 256, 312, 224],"float32"), y=Tensor([4, 256, 312, 224],"float32"), )
paddle.add(x=Tensor([4, 256, 312, 240],"float16"), y=Tensor([4, 256, 312, 240],"float16"), )
paddle.add(x=Tensor([4, 256, 312, 248],"float16"), y=Tensor([4, 256, 312, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 312, 248],"float32"), y=Tensor([4, 256, 312, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 312, 272],"float16"), y=Tensor([4, 256, 312, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 312, 272],"float32"), y=Tensor([4, 256, 312, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 312, 280],"float16"), y=Tensor([4, 256, 312, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 312, 280],"float32"), y=Tensor([4, 256, 312, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 312, 296],"float16"), y=Tensor([4, 256, 312, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 312, 296],"float32"), y=Tensor([4, 256, 312, 296],"float32"), )
paddle.add(x=Tensor([4, 256, 312, 304],"float16"), y=Tensor([4, 256, 312, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 312, 304],"float32"), y=Tensor([4, 256, 312, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 312, 336],"float16"), y=Tensor([4, 256, 312, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 312, 336],"float32"), y=Tensor([4, 256, 312, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 313, 288],"float16"), y=Tensor([4, 256, 313, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 315, 267],"float16"), y=Tensor([4, 256, 315, 267],"float16"), )
paddle.add(x=Tensor([4, 256, 32, 32],"float32"), y=Tensor([4, 256, 32, 32],"float32"), )
paddle.add(x=Tensor([4, 256, 320, 224],"float32"), y=Tensor([4, 256, 320, 224],"float32"), )
paddle.add(x=Tensor([4, 256, 320, 255],"float16"), y=Tensor([4, 256, 320, 255],"float16"), )
paddle.add(x=Tensor([4, 256, 320, 255],"float32"), y=Tensor([4, 256, 320, 255],"float32"), )
paddle.add(x=Tensor([4, 256, 320, 256],"float16"), y=Tensor([4, 256, 320, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 320, 256],"float32"), y=Tensor([4, 256, 320, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 320, 272],"float16"), y=Tensor([4, 256, 320, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 320, 272],"float32"), y=Tensor([4, 256, 320, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 320, 288],"float16"), y=Tensor([4, 256, 320, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 320, 288],"float32"), y=Tensor([4, 256, 320, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 320, 304],"float16"), y=Tensor([4, 256, 320, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 320, 304],"float32"), y=Tensor([4, 256, 320, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 320, 320],"float16"), y=Tensor([4, 256, 320, 320],"float16"), )
paddle.add(x=Tensor([4, 256, 320, 320],"float32"), y=Tensor([4, 256, 320, 320],"float32"), )
paddle.add(x=Tensor([4, 256, 327, 241],"float16"), y=Tensor([4, 256, 327, 241],"float16"), )
paddle.add(x=Tensor([4, 256, 327, 334],"float16"), y=Tensor([4, 256, 327, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 327, 334],"float32"), y=Tensor([4, 256, 327, 334],"float32"), )
paddle.add(x=Tensor([4, 256, 328, 200],"float16"), y=Tensor([4, 256, 328, 200],"float16"), )
paddle.add(x=Tensor([4, 256, 328, 248],"float16"), y=Tensor([4, 256, 328, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 328, 248],"float32"), y=Tensor([4, 256, 328, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 328, 256],"float16"), y=Tensor([4, 256, 328, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 328, 272],"float16"), y=Tensor([4, 256, 328, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 328, 280],"float16"), y=Tensor([4, 256, 328, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 328, 296],"float16"), y=Tensor([4, 256, 328, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 328, 296],"float32"), y=Tensor([4, 256, 328, 296],"float32"), )
paddle.add(x=Tensor([4, 256, 328, 304],"float16"), y=Tensor([4, 256, 328, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 328, 304],"float32"), y=Tensor([4, 256, 328, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 328, 336],"float16"), y=Tensor([4, 256, 328, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 328, 336],"float32"), y=Tensor([4, 256, 328, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 334, 246],"float16"), y=Tensor([4, 256, 334, 246],"float16"), )
paddle.add(x=Tensor([4, 256, 334, 255],"float16"), y=Tensor([4, 256, 334, 255],"float16"), )
paddle.add(x=Tensor([4, 256, 334, 255],"float32"), y=Tensor([4, 256, 334, 255],"float32"), )
paddle.add(x=Tensor([4, 256, 334, 277],"float16"), y=Tensor([4, 256, 334, 277],"float16"), )
paddle.add(x=Tensor([4, 256, 334, 277],"float32"), y=Tensor([4, 256, 334, 277],"float32"), )
paddle.add(x=Tensor([4, 256, 334, 334],"float16"), y=Tensor([4, 256, 334, 334],"float16"), )
paddle.add(x=Tensor([4, 256, 336, 200],"float16"), y=Tensor([4, 256, 336, 200],"float16"), )
paddle.add(x=Tensor([4, 256, 336, 200],"float32"), y=Tensor([4, 256, 336, 200],"float32"), )
paddle.add(x=Tensor([4, 256, 336, 240],"float16"), y=Tensor([4, 256, 336, 240],"float16"), )
paddle.add(x=Tensor([4, 256, 336, 240],"float32"), y=Tensor([4, 256, 336, 240],"float32"), )
paddle.add(x=Tensor([4, 256, 336, 248],"float16"), y=Tensor([4, 256, 336, 248],"float16"), )
paddle.add(x=Tensor([4, 256, 336, 248],"float32"), y=Tensor([4, 256, 336, 248],"float32"), )
paddle.add(x=Tensor([4, 256, 336, 256],"float16"), y=Tensor([4, 256, 336, 256],"float16"), )
paddle.add(x=Tensor([4, 256, 336, 256],"float32"), y=Tensor([4, 256, 336, 256],"float32"), )
paddle.add(x=Tensor([4, 256, 336, 272],"float16"), y=Tensor([4, 256, 336, 272],"float16"), )
paddle.add(x=Tensor([4, 256, 336, 272],"float32"), y=Tensor([4, 256, 336, 272],"float32"), )
paddle.add(x=Tensor([4, 256, 336, 280],"float16"), y=Tensor([4, 256, 336, 280],"float16"), )
paddle.add(x=Tensor([4, 256, 336, 280],"float32"), y=Tensor([4, 256, 336, 280],"float32"), )
paddle.add(x=Tensor([4, 256, 336, 288],"float16"), y=Tensor([4, 256, 336, 288],"float16"), )
paddle.add(x=Tensor([4, 256, 336, 288],"float32"), y=Tensor([4, 256, 336, 288],"float32"), )
paddle.add(x=Tensor([4, 256, 336, 296],"float16"), y=Tensor([4, 256, 336, 296],"float16"), )
paddle.add(x=Tensor([4, 256, 336, 304],"float16"), y=Tensor([4, 256, 336, 304],"float16"), )
paddle.add(x=Tensor([4, 256, 336, 304],"float32"), y=Tensor([4, 256, 336, 304],"float32"), )
paddle.add(x=Tensor([4, 256, 336, 312],"float16"), y=Tensor([4, 256, 336, 312],"float16"), )
paddle.add(x=Tensor([4, 256, 336, 312],"float32"), y=Tensor([4, 256, 336, 312],"float32"), )
paddle.add(x=Tensor([4, 256, 336, 320],"float16"), y=Tensor([4, 256, 336, 320],"float16"), )
paddle.add(x=Tensor([4, 256, 336, 336],"float16"), y=Tensor([4, 256, 336, 336],"float16"), )
paddle.add(x=Tensor([4, 256, 336, 336],"float32"), y=Tensor([4, 256, 336, 336],"float32"), )
paddle.add(x=Tensor([4, 256, 40, 40],"float32"), y=Tensor([4, 256, 40, 40],"float32"), )
paddle.add(x=Tensor([4, 256, 62, 46],"float32"), y=Tensor([4, 256, 62, 46],"float32"), )
paddle.add(x=Tensor([4, 256, 64, 48],"float32"), y=Tensor([4, 256, 64, 48],"float32"), )
paddle.add(x=Tensor([4, 256, 64, 56],"float32"), y=Tensor([4, 256, 64, 56],"float32"), )
paddle.add(x=Tensor([4, 256, 64, 64],"float32"), y=Tensor([4, 256, 64, 64],"float32"), )
paddle.add(x=Tensor([4, 256, 64, 82],"float32"), y=Tensor([4, 256, 64, 82],"float32"), )
paddle.add(x=Tensor([4, 256, 68, 50],"float32"), y=Tensor([4, 256, 68, 50],"float32"), )
paddle.add(x=Tensor([4, 256, 72, 58],"float32"), y=Tensor([4, 256, 72, 58],"float32"), )
paddle.add(x=Tensor([4, 256, 76, 76],"float32"), y=Tensor([4, 256, 76, 76],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 114],"float32"), y=Tensor([4, 512, 100, 114],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 118],"float16"), y=Tensor([4, 512, 100, 118],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 120],"float16"), y=Tensor([4, 512, 100, 120],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 120],"float32"), y=Tensor([4, 512, 100, 120],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 121],"float16"), y=Tensor([4, 512, 100, 121],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 124],"float16"), y=Tensor([4, 512, 100, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 124],"float32"), y=Tensor([4, 512, 100, 124],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 128],"float16"), y=Tensor([4, 512, 100, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 128],"float32"), y=Tensor([4, 512, 100, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 132],"float16"), y=Tensor([4, 512, 100, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 133],"float16"), y=Tensor([4, 512, 100, 133],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 133],"float32"), y=Tensor([4, 512, 100, 133],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 134],"float16"), y=Tensor([4, 512, 100, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 134],"float32"), y=Tensor([4, 512, 100, 134],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 136],"float16"), y=Tensor([4, 512, 100, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 136],"float32"), y=Tensor([4, 512, 100, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 138],"float16"), y=Tensor([4, 512, 100, 138],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 139],"float16"), y=Tensor([4, 512, 100, 139],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 140],"float16"), y=Tensor([4, 512, 100, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 140],"float32"), y=Tensor([4, 512, 100, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 142],"float16"), y=Tensor([4, 512, 100, 142],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 142],"float32"), y=Tensor([4, 512, 100, 142],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 144],"float16"), y=Tensor([4, 512, 100, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 144],"float32"), y=Tensor([4, 512, 100, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 145],"float16"), y=Tensor([4, 512, 100, 145],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 145],"float32"), y=Tensor([4, 512, 100, 145],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 148],"float16"), y=Tensor([4, 512, 100, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 148],"float32"), y=Tensor([4, 512, 100, 148],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 150],"float16"), y=Tensor([4, 512, 100, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 150],"float32"), y=Tensor([4, 512, 100, 150],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 151],"float16"), y=Tensor([4, 512, 100, 151],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 151],"float32"), y=Tensor([4, 512, 100, 151],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 152],"float16"), y=Tensor([4, 512, 100, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 152],"float32"), y=Tensor([4, 512, 100, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 156],"float16"), y=Tensor([4, 512, 100, 156],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 156],"float32"), y=Tensor([4, 512, 100, 156],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 157],"float16"), y=Tensor([4, 512, 100, 157],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 157],"float32"), y=Tensor([4, 512, 100, 157],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 160],"float16"), y=Tensor([4, 512, 100, 160],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 160],"float32"), y=Tensor([4, 512, 100, 160],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 161],"float16"), y=Tensor([4, 512, 100, 161],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 161],"float32"), y=Tensor([4, 512, 100, 161],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 164],"float16"), y=Tensor([4, 512, 100, 164],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 164],"float32"), y=Tensor([4, 512, 100, 164],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 167],"float16"), y=Tensor([4, 512, 100, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 167],"float32"), y=Tensor([4, 512, 100, 167],"float32"), )
paddle.add(x=Tensor([4, 512, 100, 168],"float16"), y=Tensor([4, 512, 100, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 100, 168],"float32"), y=Tensor([4, 512, 100, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 102, 146],"float16"), y=Tensor([4, 512, 102, 146],"float16"), )
paddle.add(x=Tensor([4, 512, 102, 163],"float16"), y=Tensor([4, 512, 102, 163],"float16"), )
paddle.add(x=Tensor([4, 512, 102, 163],"float32"), y=Tensor([4, 512, 102, 163],"float32"), )
paddle.add(x=Tensor([4, 512, 104, 128],"float16"), y=Tensor([4, 512, 104, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 104, 136],"float16"), y=Tensor([4, 512, 104, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 104, 144],"float16"), y=Tensor([4, 512, 104, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 104, 144],"float32"), y=Tensor([4, 512, 104, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 104, 148],"float16"), y=Tensor([4, 512, 104, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 104, 148],"float32"), y=Tensor([4, 512, 104, 148],"float32"), )
paddle.add(x=Tensor([4, 512, 104, 150],"float16"), y=Tensor([4, 512, 104, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 104, 150],"float32"), y=Tensor([4, 512, 104, 150],"float32"), )
paddle.add(x=Tensor([4, 512, 104, 152],"float16"), y=Tensor([4, 512, 104, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 104, 152],"float32"), y=Tensor([4, 512, 104, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 104, 164],"float16"), y=Tensor([4, 512, 104, 164],"float16"), )
paddle.add(x=Tensor([4, 512, 104, 164],"float32"), y=Tensor([4, 512, 104, 164],"float32"), )
paddle.add(x=Tensor([4, 512, 104, 168],"float16"), y=Tensor([4, 512, 104, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 104, 168],"float32"), y=Tensor([4, 512, 104, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 105, 112],"float16"), y=Tensor([4, 512, 105, 112],"float16"), )
paddle.add(x=Tensor([4, 512, 105, 112],"float32"), y=Tensor([4, 512, 105, 112],"float32"), )
paddle.add(x=Tensor([4, 512, 105, 144],"float16"), y=Tensor([4, 512, 105, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 107, 121],"float16"), y=Tensor([4, 512, 107, 121],"float16"), )
paddle.add(x=Tensor([4, 512, 107, 121],"float32"), y=Tensor([4, 512, 107, 121],"float32"), )
paddle.add(x=Tensor([4, 512, 107, 126],"float16"), y=Tensor([4, 512, 107, 126],"float16"), )
paddle.add(x=Tensor([4, 512, 107, 126],"float32"), y=Tensor([4, 512, 107, 126],"float32"), )
paddle.add(x=Tensor([4, 512, 107, 132],"float16"), y=Tensor([4, 512, 107, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 107, 132],"float32"), y=Tensor([4, 512, 107, 132],"float32"), )
paddle.add(x=Tensor([4, 512, 107, 137],"float16"), y=Tensor([4, 512, 107, 137],"float16"), )
paddle.add(x=Tensor([4, 512, 107, 139],"float16"), y=Tensor([4, 512, 107, 139],"float16"), )
paddle.add(x=Tensor([4, 512, 107, 144],"float16"), y=Tensor([4, 512, 107, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 107, 150],"float16"), y=Tensor([4, 512, 107, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 108, 112],"float16"), y=Tensor([4, 512, 108, 112],"float16"), )
paddle.add(x=Tensor([4, 512, 108, 112],"float32"), y=Tensor([4, 512, 108, 112],"float32"), )
paddle.add(x=Tensor([4, 512, 108, 124],"float16"), y=Tensor([4, 512, 108, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 108, 124],"float32"), y=Tensor([4, 512, 108, 124],"float32"), )
paddle.add(x=Tensor([4, 512, 108, 128],"float16"), y=Tensor([4, 512, 108, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 108, 128],"float32"), y=Tensor([4, 512, 108, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 108, 132],"float16"), y=Tensor([4, 512, 108, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 108, 132],"float32"), y=Tensor([4, 512, 108, 132],"float32"), )
paddle.add(x=Tensor([4, 512, 108, 136],"float16"), y=Tensor([4, 512, 108, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 108, 136],"float32"), y=Tensor([4, 512, 108, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 108, 140],"float16"), y=Tensor([4, 512, 108, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 108, 140],"float32"), y=Tensor([4, 512, 108, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 108, 144],"float16"), y=Tensor([4, 512, 108, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 108, 144],"float32"), y=Tensor([4, 512, 108, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 108, 148],"float16"), y=Tensor([4, 512, 108, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 108, 148],"float32"), y=Tensor([4, 512, 108, 148],"float32"), )
paddle.add(x=Tensor([4, 512, 108, 152],"float16"), y=Tensor([4, 512, 108, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 108, 152],"float32"), y=Tensor([4, 512, 108, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 108, 156],"float16"), y=Tensor([4, 512, 108, 156],"float16"), )
paddle.add(x=Tensor([4, 512, 108, 156],"float32"), y=Tensor([4, 512, 108, 156],"float32"), )
paddle.add(x=Tensor([4, 512, 108, 168],"float16"), y=Tensor([4, 512, 108, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 108, 168],"float32"), y=Tensor([4, 512, 108, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 109, 140],"float16"), y=Tensor([4, 512, 109, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 109, 140],"float32"), y=Tensor([4, 512, 109, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 110, 151],"float16"), y=Tensor([4, 512, 110, 151],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 120],"float32"), y=Tensor([4, 512, 112, 120],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 124],"float16"), y=Tensor([4, 512, 112, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 124],"float32"), y=Tensor([4, 512, 112, 124],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 126],"float16"), y=Tensor([4, 512, 112, 126],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 126],"float32"), y=Tensor([4, 512, 112, 126],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 127],"float16"), y=Tensor([4, 512, 112, 127],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 127],"float32"), y=Tensor([4, 512, 112, 127],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 128],"float16"), y=Tensor([4, 512, 112, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 128],"float32"), y=Tensor([4, 512, 112, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 129],"float16"), y=Tensor([4, 512, 112, 129],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 132],"float16"), y=Tensor([4, 512, 112, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 132],"float32"), y=Tensor([4, 512, 112, 132],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 134],"float16"), y=Tensor([4, 512, 112, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 134],"float32"), y=Tensor([4, 512, 112, 134],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 136],"float16"), y=Tensor([4, 512, 112, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 136],"float32"), y=Tensor([4, 512, 112, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 137],"float16"), y=Tensor([4, 512, 112, 137],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 137],"float32"), y=Tensor([4, 512, 112, 137],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 140],"float16"), y=Tensor([4, 512, 112, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 140],"float32"), y=Tensor([4, 512, 112, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 143],"float16"), y=Tensor([4, 512, 112, 143],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 144],"float16"), y=Tensor([4, 512, 112, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 144],"float32"), y=Tensor([4, 512, 112, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 148],"float16"), y=Tensor([4, 512, 112, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 148],"float32"), y=Tensor([4, 512, 112, 148],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 150],"float16"), y=Tensor([4, 512, 112, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 150],"float32"), y=Tensor([4, 512, 112, 150],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 151],"float16"), y=Tensor([4, 512, 112, 151],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 152],"float16"), y=Tensor([4, 512, 112, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 152],"float32"), y=Tensor([4, 512, 112, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 156],"float16"), y=Tensor([4, 512, 112, 156],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 157],"float16"), y=Tensor([4, 512, 112, 157],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 157],"float32"), y=Tensor([4, 512, 112, 157],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 160],"float16"), y=Tensor([4, 512, 112, 160],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 160],"float32"), y=Tensor([4, 512, 112, 160],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 161],"float16"), y=Tensor([4, 512, 112, 161],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 161],"float32"), y=Tensor([4, 512, 112, 161],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 164],"float16"), y=Tensor([4, 512, 112, 164],"float16"), )
paddle.add(x=Tensor([4, 512, 112, 164],"float32"), y=Tensor([4, 512, 112, 164],"float32"), )
paddle.add(x=Tensor([4, 512, 112, 168],"float16"), y=Tensor([4, 512, 112, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 113, 134],"float16"), y=Tensor([4, 512, 113, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 113, 134],"float32"), y=Tensor([4, 512, 113, 134],"float32"), )
paddle.add(x=Tensor([4, 512, 114, 131],"float16"), y=Tensor([4, 512, 114, 131],"float16"), )
paddle.add(x=Tensor([4, 512, 115, 128],"float16"), y=Tensor([4, 512, 115, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 115, 128],"float32"), y=Tensor([4, 512, 115, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 116, 128],"float16"), y=Tensor([4, 512, 116, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 116, 128],"float32"), y=Tensor([4, 512, 116, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 116, 132],"float16"), y=Tensor([4, 512, 116, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 116, 132],"float32"), y=Tensor([4, 512, 116, 132],"float32"), )
paddle.add(x=Tensor([4, 512, 116, 136],"float16"), y=Tensor([4, 512, 116, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 116, 136],"float32"), y=Tensor([4, 512, 116, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 116, 152],"float16"), y=Tensor([4, 512, 116, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 116, 152],"float32"), y=Tensor([4, 512, 116, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 116, 160],"float16"), y=Tensor([4, 512, 116, 160],"float16"), )
paddle.add(x=Tensor([4, 512, 116, 160],"float32"), y=Tensor([4, 512, 116, 160],"float32"), )
paddle.add(x=Tensor([4, 512, 116, 168],"float16"), y=Tensor([4, 512, 116, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 117, 133],"float16"), y=Tensor([4, 512, 117, 133],"float16"), )
paddle.add(x=Tensor([4, 512, 118, 101],"float16"), y=Tensor([4, 512, 118, 101],"float16"), )
paddle.add(x=Tensor([4, 512, 118, 120],"float16"), y=Tensor([4, 512, 118, 120],"float16"), )
paddle.add(x=Tensor([4, 512, 118, 123],"float16"), y=Tensor([4, 512, 118, 123],"float16"), )
paddle.add(x=Tensor([4, 512, 118, 128],"float16"), y=Tensor([4, 512, 118, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 118, 128],"float32"), y=Tensor([4, 512, 118, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 118, 134],"float16"), y=Tensor([4, 512, 118, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 118, 138],"float16"), y=Tensor([4, 512, 118, 138],"float16"), )
paddle.add(x=Tensor([4, 512, 118, 144],"float16"), y=Tensor([4, 512, 118, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 118, 145],"float16"), y=Tensor([4, 512, 118, 145],"float16"), )
paddle.add(x=Tensor([4, 512, 118, 152],"float16"), y=Tensor([4, 512, 118, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 118, 155],"float16"), y=Tensor([4, 512, 118, 155],"float16"), )
paddle.add(x=Tensor([4, 512, 118, 167],"float16"), y=Tensor([4, 512, 118, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 118, 167],"float32"), y=Tensor([4, 512, 118, 167],"float32"), )
paddle.add(x=Tensor([4, 512, 119, 134],"float16"), y=Tensor([4, 512, 119, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 104],"float16"), y=Tensor([4, 512, 120, 104],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 104],"float32"), y=Tensor([4, 512, 120, 104],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 112],"float32"), y=Tensor([4, 512, 120, 112],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 120],"float16"), y=Tensor([4, 512, 120, 120],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 120],"float32"), y=Tensor([4, 512, 120, 120],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 124],"float16"), y=Tensor([4, 512, 120, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 124],"float32"), y=Tensor([4, 512, 120, 124],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 128],"float16"), y=Tensor([4, 512, 120, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 128],"float32"), y=Tensor([4, 512, 120, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 134],"float16"), y=Tensor([4, 512, 120, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 134],"float32"), y=Tensor([4, 512, 120, 134],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 136],"float16"), y=Tensor([4, 512, 120, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 136],"float32"), y=Tensor([4, 512, 120, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 140],"float16"), y=Tensor([4, 512, 120, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 140],"float32"), y=Tensor([4, 512, 120, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 144],"float16"), y=Tensor([4, 512, 120, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 144],"float32"), y=Tensor([4, 512, 120, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 148],"float16"), y=Tensor([4, 512, 120, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 148],"float32"), y=Tensor([4, 512, 120, 148],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 150],"float16"), y=Tensor([4, 512, 120, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 150],"float32"), y=Tensor([4, 512, 120, 150],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 151],"float16"), y=Tensor([4, 512, 120, 151],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 151],"float32"), y=Tensor([4, 512, 120, 151],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 152],"float16"), y=Tensor([4, 512, 120, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 152],"float32"), y=Tensor([4, 512, 120, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 154],"float16"), y=Tensor([4, 512, 120, 154],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 154],"float32"), y=Tensor([4, 512, 120, 154],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 156],"float16"), y=Tensor([4, 512, 120, 156],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 156],"float32"), y=Tensor([4, 512, 120, 156],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 157],"float16"), y=Tensor([4, 512, 120, 157],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 157],"float32"), y=Tensor([4, 512, 120, 157],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 160],"float16"), y=Tensor([4, 512, 120, 160],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 160],"float32"), y=Tensor([4, 512, 120, 160],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 164],"float16"), y=Tensor([4, 512, 120, 164],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 164],"float32"), y=Tensor([4, 512, 120, 164],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 168],"float16"), y=Tensor([4, 512, 120, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 120, 168],"float32"), y=Tensor([4, 512, 120, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 120, 88],"float32"), y=Tensor([4, 512, 120, 88],"float32"), )
paddle.add(x=Tensor([4, 512, 121, 112],"float16"), y=Tensor([4, 512, 121, 112],"float16"), )
paddle.add(x=Tensor([4, 512, 121, 112],"float32"), y=Tensor([4, 512, 121, 112],"float32"), )
paddle.add(x=Tensor([4, 512, 121, 123],"float16"), y=Tensor([4, 512, 121, 123],"float16"), )
paddle.add(x=Tensor([4, 512, 121, 123],"float32"), y=Tensor([4, 512, 121, 123],"float32"), )
paddle.add(x=Tensor([4, 512, 121, 132],"float16"), y=Tensor([4, 512, 121, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 121, 132],"float32"), y=Tensor([4, 512, 121, 132],"float32"), )
paddle.add(x=Tensor([4, 512, 121, 133],"float16"), y=Tensor([4, 512, 121, 133],"float16"), )
paddle.add(x=Tensor([4, 512, 121, 138],"float16"), y=Tensor([4, 512, 121, 138],"float16"), )
paddle.add(x=Tensor([4, 512, 121, 138],"float32"), y=Tensor([4, 512, 121, 138],"float32"), )
paddle.add(x=Tensor([4, 512, 121, 167],"float16"), y=Tensor([4, 512, 121, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 121, 167],"float32"), y=Tensor([4, 512, 121, 167],"float32"), )
paddle.add(x=Tensor([4, 512, 123, 127],"float16"), y=Tensor([4, 512, 123, 127],"float16"), )
paddle.add(x=Tensor([4, 512, 123, 127],"float32"), y=Tensor([4, 512, 123, 127],"float32"), )
paddle.add(x=Tensor([4, 512, 123, 133],"float16"), y=Tensor([4, 512, 123, 133],"float16"), )
paddle.add(x=Tensor([4, 512, 123, 133],"float32"), y=Tensor([4, 512, 123, 133],"float32"), )
paddle.add(x=Tensor([4, 512, 123, 134],"float16"), y=Tensor([4, 512, 123, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 123, 134],"float32"), y=Tensor([4, 512, 123, 134],"float32"), )
paddle.add(x=Tensor([4, 512, 123, 138],"float16"), y=Tensor([4, 512, 123, 138],"float16"), )
paddle.add(x=Tensor([4, 512, 123, 138],"float32"), y=Tensor([4, 512, 123, 138],"float32"), )
paddle.add(x=Tensor([4, 512, 123, 143],"float16"), y=Tensor([4, 512, 123, 143],"float16"), )
paddle.add(x=Tensor([4, 512, 123, 145],"float16"), y=Tensor([4, 512, 123, 145],"float16"), )
paddle.add(x=Tensor([4, 512, 123, 150],"float16"), y=Tensor([4, 512, 123, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 123, 150],"float32"), y=Tensor([4, 512, 123, 150],"float32"), )
paddle.add(x=Tensor([4, 512, 123, 152],"float16"), y=Tensor([4, 512, 123, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 123, 161],"float16"), y=Tensor([4, 512, 123, 161],"float16"), )
paddle.add(x=Tensor([4, 512, 123, 164],"float16"), y=Tensor([4, 512, 123, 164],"float16"), )
paddle.add(x=Tensor([4, 512, 123, 167],"float16"), y=Tensor([4, 512, 123, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 123, 167],"float32"), y=Tensor([4, 512, 123, 167],"float32"), )
paddle.add(x=Tensor([4, 512, 123, 96],"float16"), y=Tensor([4, 512, 123, 96],"float16"), )
paddle.add(x=Tensor([4, 512, 124, 108],"float32"), y=Tensor([4, 512, 124, 108],"float32"), )
paddle.add(x=Tensor([4, 512, 124, 112],"float16"), y=Tensor([4, 512, 124, 112],"float16"), )
paddle.add(x=Tensor([4, 512, 124, 112],"float32"), y=Tensor([4, 512, 124, 112],"float32"), )
paddle.add(x=Tensor([4, 512, 124, 124],"float16"), y=Tensor([4, 512, 124, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 124, 124],"float32"), y=Tensor([4, 512, 124, 124],"float32"), )
paddle.add(x=Tensor([4, 512, 124, 128],"float16"), y=Tensor([4, 512, 124, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 124, 128],"float32"), y=Tensor([4, 512, 124, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 124, 132],"float16"), y=Tensor([4, 512, 124, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 124, 132],"float32"), y=Tensor([4, 512, 124, 132],"float32"), )
paddle.add(x=Tensor([4, 512, 124, 136],"float16"), y=Tensor([4, 512, 124, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 124, 136],"float32"), y=Tensor([4, 512, 124, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 124, 140],"float16"), y=Tensor([4, 512, 124, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 124, 140],"float32"), y=Tensor([4, 512, 124, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 124, 144],"float16"), y=Tensor([4, 512, 124, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 124, 144],"float32"), y=Tensor([4, 512, 124, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 124, 148],"float16"), y=Tensor([4, 512, 124, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 124, 148],"float32"), y=Tensor([4, 512, 124, 148],"float32"), )
paddle.add(x=Tensor([4, 512, 124, 152],"float16"), y=Tensor([4, 512, 124, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 124, 152],"float32"), y=Tensor([4, 512, 124, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 124, 156],"float16"), y=Tensor([4, 512, 124, 156],"float16"), )
paddle.add(x=Tensor([4, 512, 124, 164],"float16"), y=Tensor([4, 512, 124, 164],"float16"), )
paddle.add(x=Tensor([4, 512, 124, 164],"float32"), y=Tensor([4, 512, 124, 164],"float32"), )
paddle.add(x=Tensor([4, 512, 124, 167],"float16"), y=Tensor([4, 512, 124, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 124, 167],"float32"), y=Tensor([4, 512, 124, 167],"float32"), )
paddle.add(x=Tensor([4, 512, 124, 168],"float16"), y=Tensor([4, 512, 124, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 124, 168],"float32"), y=Tensor([4, 512, 124, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 124, 92],"float32"), y=Tensor([4, 512, 124, 92],"float32"), )
paddle.add(x=Tensor([4, 512, 124, 96],"float16"), y=Tensor([4, 512, 124, 96],"float16"), )
paddle.add(x=Tensor([4, 512, 124, 96],"float32"), y=Tensor([4, 512, 124, 96],"float32"), )
paddle.add(x=Tensor([4, 512, 125, 112],"float16"), y=Tensor([4, 512, 125, 112],"float16"), )
paddle.add(x=Tensor([4, 512, 125, 143],"float16"), y=Tensor([4, 512, 125, 143],"float16"), )
paddle.add(x=Tensor([4, 512, 125, 145],"float16"), y=Tensor([4, 512, 125, 145],"float16"), )
paddle.add(x=Tensor([4, 512, 125, 145],"float32"), y=Tensor([4, 512, 125, 145],"float32"), )
paddle.add(x=Tensor([4, 512, 125, 167],"float16"), y=Tensor([4, 512, 125, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 125, 167],"float32"), y=Tensor([4, 512, 125, 167],"float32"), )
paddle.add(x=Tensor([4, 512, 126, 118],"float16"), y=Tensor([4, 512, 126, 118],"float16"), )
paddle.add(x=Tensor([4, 512, 126, 118],"float32"), y=Tensor([4, 512, 126, 118],"float32"), )
paddle.add(x=Tensor([4, 512, 126, 127],"float16"), y=Tensor([4, 512, 126, 127],"float16"), )
paddle.add(x=Tensor([4, 512, 126, 127],"float32"), y=Tensor([4, 512, 126, 127],"float32"), )
paddle.add(x=Tensor([4, 512, 126, 128],"float16"), y=Tensor([4, 512, 126, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 126, 128],"float32"), y=Tensor([4, 512, 126, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 126, 145],"float16"), y=Tensor([4, 512, 126, 145],"float16"), )
paddle.add(x=Tensor([4, 512, 126, 145],"float32"), y=Tensor([4, 512, 126, 145],"float32"), )
paddle.add(x=Tensor([4, 512, 126, 150],"float16"), y=Tensor([4, 512, 126, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 126, 151],"float16"), y=Tensor([4, 512, 126, 151],"float16"), )
paddle.add(x=Tensor([4, 512, 126, 164],"float16"), y=Tensor([4, 512, 126, 164],"float16"), )
paddle.add(x=Tensor([4, 512, 126, 167],"float16"), y=Tensor([4, 512, 126, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 126, 167],"float32"), y=Tensor([4, 512, 126, 167],"float32"), )
paddle.add(x=Tensor([4, 512, 127, 126],"float16"), y=Tensor([4, 512, 127, 126],"float16"), )
paddle.add(x=Tensor([4, 512, 127, 126],"float32"), y=Tensor([4, 512, 127, 126],"float32"), )
paddle.add(x=Tensor([4, 512, 127, 132],"float16"), y=Tensor([4, 512, 127, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 127, 145],"float16"), y=Tensor([4, 512, 127, 145],"float16"), )
paddle.add(x=Tensor([4, 512, 127, 145],"float32"), y=Tensor([4, 512, 127, 145],"float32"), )
paddle.add(x=Tensor([4, 512, 127, 149],"float16"), y=Tensor([4, 512, 127, 149],"float16"), )
paddle.add(x=Tensor([4, 512, 127, 150],"float16"), y=Tensor([4, 512, 127, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 127, 150],"float32"), y=Tensor([4, 512, 127, 150],"float32"), )
paddle.add(x=Tensor([4, 512, 127, 151],"float16"), y=Tensor([4, 512, 127, 151],"float16"), )
paddle.add(x=Tensor([4, 512, 127, 151],"float32"), y=Tensor([4, 512, 127, 151],"float32"), )
paddle.add(x=Tensor([4, 512, 127, 165],"float16"), y=Tensor([4, 512, 127, 165],"float16"), )
paddle.add(x=Tensor([4, 512, 127, 165],"float32"), y=Tensor([4, 512, 127, 165],"float32"), )
paddle.add(x=Tensor([4, 512, 127, 167],"float16"), y=Tensor([4, 512, 127, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 127, 167],"float32"), y=Tensor([4, 512, 127, 167],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 108],"float16"), y=Tensor([4, 512, 128, 108],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 112],"float16"), y=Tensor([4, 512, 128, 112],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 112],"float32"), y=Tensor([4, 512, 128, 112],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 118],"float16"), y=Tensor([4, 512, 128, 118],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 118],"float32"), y=Tensor([4, 512, 128, 118],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 120],"float16"), y=Tensor([4, 512, 128, 120],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 120],"float32"), y=Tensor([4, 512, 128, 120],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 123],"float16"), y=Tensor([4, 512, 128, 123],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 123],"float32"), y=Tensor([4, 512, 128, 123],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 124],"float16"), y=Tensor([4, 512, 128, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 124],"float32"), y=Tensor([4, 512, 128, 124],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 125],"float16"), y=Tensor([4, 512, 128, 125],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 127],"float16"), y=Tensor([4, 512, 128, 127],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 128],"float16"), y=Tensor([4, 512, 128, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 128],"float32"), y=Tensor([4, 512, 128, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 132],"float16"), y=Tensor([4, 512, 128, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 132],"float32"), y=Tensor([4, 512, 128, 132],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 134],"float16"), y=Tensor([4, 512, 128, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 136],"float16"), y=Tensor([4, 512, 128, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 136],"float32"), y=Tensor([4, 512, 128, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 139],"float16"), y=Tensor([4, 512, 128, 139],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 139],"float32"), y=Tensor([4, 512, 128, 139],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 140],"float16"), y=Tensor([4, 512, 128, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 140],"float32"), y=Tensor([4, 512, 128, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 144],"float16"), y=Tensor([4, 512, 128, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 144],"float32"), y=Tensor([4, 512, 128, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 146],"float16"), y=Tensor([4, 512, 128, 146],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 148],"float16"), y=Tensor([4, 512, 128, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 148],"float32"), y=Tensor([4, 512, 128, 148],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 150],"float16"), y=Tensor([4, 512, 128, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 152],"float16"), y=Tensor([4, 512, 128, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 152],"float32"), y=Tensor([4, 512, 128, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 153],"float16"), y=Tensor([4, 512, 128, 153],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 156],"float16"), y=Tensor([4, 512, 128, 156],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 156],"float32"), y=Tensor([4, 512, 128, 156],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 157],"float16"), y=Tensor([4, 512, 128, 157],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 157],"float32"), y=Tensor([4, 512, 128, 157],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 160],"float16"), y=Tensor([4, 512, 128, 160],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 160],"float32"), y=Tensor([4, 512, 128, 160],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 164],"float16"), y=Tensor([4, 512, 128, 164],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 164],"float32"), y=Tensor([4, 512, 128, 164],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 167],"float16"), y=Tensor([4, 512, 128, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 167],"float32"), y=Tensor([4, 512, 128, 167],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 168],"float16"), y=Tensor([4, 512, 128, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 128, 168],"float32"), y=Tensor([4, 512, 128, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 128, 96],"float32"), y=Tensor([4, 512, 128, 96],"float32"), )
paddle.add(x=Tensor([4, 512, 129, 150],"float16"), y=Tensor([4, 512, 129, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 129, 150],"float32"), y=Tensor([4, 512, 129, 150],"float32"), )
paddle.add(x=Tensor([4, 512, 129, 154],"float16"), y=Tensor([4, 512, 129, 154],"float16"), )
paddle.add(x=Tensor([4, 512, 129, 154],"float32"), y=Tensor([4, 512, 129, 154],"float32"), )
paddle.add(x=Tensor([4, 512, 129, 157],"float16"), y=Tensor([4, 512, 129, 157],"float16"), )
paddle.add(x=Tensor([4, 512, 129, 157],"float32"), y=Tensor([4, 512, 129, 157],"float32"), )
paddle.add(x=Tensor([4, 512, 129, 167],"float16"), y=Tensor([4, 512, 129, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 129, 96],"float16"), y=Tensor([4, 512, 129, 96],"float16"), )
paddle.add(x=Tensor([4, 512, 130, 123],"float16"), y=Tensor([4, 512, 130, 123],"float16"), )
paddle.add(x=Tensor([4, 512, 130, 123],"float32"), y=Tensor([4, 512, 130, 123],"float32"), )
paddle.add(x=Tensor([4, 512, 130, 128],"float16"), y=Tensor([4, 512, 130, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 130, 128],"float32"), y=Tensor([4, 512, 130, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 130, 152],"float16"), y=Tensor([4, 512, 130, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 130, 152],"float32"), y=Tensor([4, 512, 130, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 131, 129],"float16"), y=Tensor([4, 512, 131, 129],"float16"), )
paddle.add(x=Tensor([4, 512, 131, 129],"float32"), y=Tensor([4, 512, 131, 129],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 100],"float32"), y=Tensor([4, 512, 132, 100],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 104],"float16"), y=Tensor([4, 512, 132, 104],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 107],"float16"), y=Tensor([4, 512, 132, 107],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 107],"float32"), y=Tensor([4, 512, 132, 107],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 108],"float16"), y=Tensor([4, 512, 132, 108],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 108],"float32"), y=Tensor([4, 512, 132, 108],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 123],"float16"), y=Tensor([4, 512, 132, 123],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 123],"float32"), y=Tensor([4, 512, 132, 123],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 124],"float16"), y=Tensor([4, 512, 132, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 124],"float32"), y=Tensor([4, 512, 132, 124],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 128],"float16"), y=Tensor([4, 512, 132, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 128],"float32"), y=Tensor([4, 512, 132, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 132],"float16"), y=Tensor([4, 512, 132, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 132],"float32"), y=Tensor([4, 512, 132, 132],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 134],"float16"), y=Tensor([4, 512, 132, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 134],"float32"), y=Tensor([4, 512, 132, 134],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 136],"float16"), y=Tensor([4, 512, 132, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 136],"float32"), y=Tensor([4, 512, 132, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 138],"float16"), y=Tensor([4, 512, 132, 138],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 139],"float16"), y=Tensor([4, 512, 132, 139],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 139],"float32"), y=Tensor([4, 512, 132, 139],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 140],"float16"), y=Tensor([4, 512, 132, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 140],"float32"), y=Tensor([4, 512, 132, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 144],"float16"), y=Tensor([4, 512, 132, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 144],"float32"), y=Tensor([4, 512, 132, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 148],"float16"), y=Tensor([4, 512, 132, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 148],"float32"), y=Tensor([4, 512, 132, 148],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 150],"float16"), y=Tensor([4, 512, 132, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 150],"float32"), y=Tensor([4, 512, 132, 150],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 151],"float16"), y=Tensor([4, 512, 132, 151],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 151],"float32"), y=Tensor([4, 512, 132, 151],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 152],"float16"), y=Tensor([4, 512, 132, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 152],"float32"), y=Tensor([4, 512, 132, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 156],"float16"), y=Tensor([4, 512, 132, 156],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 156],"float32"), y=Tensor([4, 512, 132, 156],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 160],"float16"), y=Tensor([4, 512, 132, 160],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 160],"float32"), y=Tensor([4, 512, 132, 160],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 163],"float16"), y=Tensor([4, 512, 132, 163],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 164],"float16"), y=Tensor([4, 512, 132, 164],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 164],"float32"), y=Tensor([4, 512, 132, 164],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 168],"float16"), y=Tensor([4, 512, 132, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 168],"float32"), y=Tensor([4, 512, 132, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 132, 96],"float16"), y=Tensor([4, 512, 132, 96],"float16"), )
paddle.add(x=Tensor([4, 512, 132, 96],"float32"), y=Tensor([4, 512, 132, 96],"float32"), )
paddle.add(x=Tensor([4, 512, 133, 107],"float16"), y=Tensor([4, 512, 133, 107],"float16"), )
paddle.add(x=Tensor([4, 512, 133, 107],"float32"), y=Tensor([4, 512, 133, 107],"float32"), )
paddle.add(x=Tensor([4, 512, 133, 128],"float16"), y=Tensor([4, 512, 133, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 133, 135],"float16"), y=Tensor([4, 512, 133, 135],"float16"), )
paddle.add(x=Tensor([4, 512, 133, 135],"float32"), y=Tensor([4, 512, 133, 135],"float32"), )
paddle.add(x=Tensor([4, 512, 133, 138],"float16"), y=Tensor([4, 512, 133, 138],"float16"), )
paddle.add(x=Tensor([4, 512, 133, 139],"float16"), y=Tensor([4, 512, 133, 139],"float16"), )
paddle.add(x=Tensor([4, 512, 133, 145],"float16"), y=Tensor([4, 512, 133, 145],"float16"), )
paddle.add(x=Tensor([4, 512, 133, 145],"float32"), y=Tensor([4, 512, 133, 145],"float32"), )
paddle.add(x=Tensor([4, 512, 133, 160],"float16"), y=Tensor([4, 512, 133, 160],"float16"), )
paddle.add(x=Tensor([4, 512, 133, 160],"float32"), y=Tensor([4, 512, 133, 160],"float32"), )
paddle.add(x=Tensor([4, 512, 133, 167],"float16"), y=Tensor([4, 512, 133, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 133, 167],"float32"), y=Tensor([4, 512, 133, 167],"float32"), )
paddle.add(x=Tensor([4, 512, 134, 114],"float16"), y=Tensor([4, 512, 134, 114],"float16"), )
paddle.add(x=Tensor([4, 512, 134, 121],"float16"), y=Tensor([4, 512, 134, 121],"float16"), )
paddle.add(x=Tensor([4, 512, 134, 123],"float16"), y=Tensor([4, 512, 134, 123],"float16"), )
paddle.add(x=Tensor([4, 512, 134, 126],"float16"), y=Tensor([4, 512, 134, 126],"float16"), )
paddle.add(x=Tensor([4, 512, 134, 127],"float16"), y=Tensor([4, 512, 134, 127],"float16"), )
paddle.add(x=Tensor([4, 512, 134, 128],"float16"), y=Tensor([4, 512, 134, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 134, 134],"float16"), y=Tensor([4, 512, 134, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 134, 138],"float16"), y=Tensor([4, 512, 134, 138],"float16"), )
paddle.add(x=Tensor([4, 512, 134, 139],"float16"), y=Tensor([4, 512, 134, 139],"float16"), )
paddle.add(x=Tensor([4, 512, 134, 144],"float16"), y=Tensor([4, 512, 134, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 134, 144],"float32"), y=Tensor([4, 512, 134, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 134, 145],"float16"), y=Tensor([4, 512, 134, 145],"float16"), )
paddle.add(x=Tensor([4, 512, 134, 150],"float16"), y=Tensor([4, 512, 134, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 134, 151],"float16"), y=Tensor([4, 512, 134, 151],"float16"), )
paddle.add(x=Tensor([4, 512, 134, 151],"float32"), y=Tensor([4, 512, 134, 151],"float32"), )
paddle.add(x=Tensor([4, 512, 134, 165],"float16"), y=Tensor([4, 512, 134, 165],"float16"), )
paddle.add(x=Tensor([4, 512, 135, 120],"float16"), y=Tensor([4, 512, 135, 120],"float16"), )
paddle.add(x=Tensor([4, 512, 135, 120],"float32"), y=Tensor([4, 512, 135, 120],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 100],"float16"), y=Tensor([4, 512, 136, 100],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 100],"float32"), y=Tensor([4, 512, 136, 100],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 108],"float16"), y=Tensor([4, 512, 136, 108],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 108],"float32"), y=Tensor([4, 512, 136, 108],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 112],"float16"), y=Tensor([4, 512, 136, 112],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 112],"float32"), y=Tensor([4, 512, 136, 112],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 116],"float16"), y=Tensor([4, 512, 136, 116],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 116],"float32"), y=Tensor([4, 512, 136, 116],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 120],"float16"), y=Tensor([4, 512, 136, 120],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 120],"float32"), y=Tensor([4, 512, 136, 120],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 124],"float16"), y=Tensor([4, 512, 136, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 124],"float32"), y=Tensor([4, 512, 136, 124],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 128],"float16"), y=Tensor([4, 512, 136, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 128],"float32"), y=Tensor([4, 512, 136, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 132],"float16"), y=Tensor([4, 512, 136, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 136],"float16"), y=Tensor([4, 512, 136, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 136],"float32"), y=Tensor([4, 512, 136, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 140],"float16"), y=Tensor([4, 512, 136, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 140],"float32"), y=Tensor([4, 512, 136, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 144],"float16"), y=Tensor([4, 512, 136, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 144],"float32"), y=Tensor([4, 512, 136, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 148],"float16"), y=Tensor([4, 512, 136, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 148],"float32"), y=Tensor([4, 512, 136, 148],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 152],"float16"), y=Tensor([4, 512, 136, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 152],"float32"), y=Tensor([4, 512, 136, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 156],"float16"), y=Tensor([4, 512, 136, 156],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 156],"float32"), y=Tensor([4, 512, 136, 156],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 160],"float16"), y=Tensor([4, 512, 136, 160],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 160],"float32"), y=Tensor([4, 512, 136, 160],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 164],"float16"), y=Tensor([4, 512, 136, 164],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 164],"float32"), y=Tensor([4, 512, 136, 164],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 168],"float16"), y=Tensor([4, 512, 136, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 168],"float32"), y=Tensor([4, 512, 136, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 136, 88],"float16"), y=Tensor([4, 512, 136, 88],"float16"), )
paddle.add(x=Tensor([4, 512, 136, 96],"float16"), y=Tensor([4, 512, 136, 96],"float16"), )
paddle.add(x=Tensor([4, 512, 137, 134],"float16"), y=Tensor([4, 512, 137, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 137, 134],"float32"), y=Tensor([4, 512, 137, 134],"float32"), )
paddle.add(x=Tensor([4, 512, 138, 112],"float16"), y=Tensor([4, 512, 138, 112],"float16"), )
paddle.add(x=Tensor([4, 512, 138, 118],"float16"), y=Tensor([4, 512, 138, 118],"float16"), )
paddle.add(x=Tensor([4, 512, 138, 127],"float16"), y=Tensor([4, 512, 138, 127],"float16"), )
paddle.add(x=Tensor([4, 512, 138, 127],"float32"), y=Tensor([4, 512, 138, 127],"float32"), )
paddle.add(x=Tensor([4, 512, 138, 128],"float16"), y=Tensor([4, 512, 138, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 138, 134],"float16"), y=Tensor([4, 512, 138, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 138, 138],"float16"), y=Tensor([4, 512, 138, 138],"float16"), )
paddle.add(x=Tensor([4, 512, 138, 143],"float16"), y=Tensor([4, 512, 138, 143],"float16"), )
paddle.add(x=Tensor([4, 512, 138, 143],"float32"), y=Tensor([4, 512, 138, 143],"float32"), )
paddle.add(x=Tensor([4, 512, 138, 144],"float16"), y=Tensor([4, 512, 138, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 138, 144],"float32"), y=Tensor([4, 512, 138, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 138, 145],"float16"), y=Tensor([4, 512, 138, 145],"float16"), )
paddle.add(x=Tensor([4, 512, 138, 150],"float16"), y=Tensor([4, 512, 138, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 138, 150],"float32"), y=Tensor([4, 512, 138, 150],"float32"), )
paddle.add(x=Tensor([4, 512, 138, 151],"float16"), y=Tensor([4, 512, 138, 151],"float16"), )
paddle.add(x=Tensor([4, 512, 138, 151],"float32"), y=Tensor([4, 512, 138, 151],"float32"), )
paddle.add(x=Tensor([4, 512, 138, 167],"float16"), y=Tensor([4, 512, 138, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 138, 167],"float32"), y=Tensor([4, 512, 138, 167],"float32"), )
paddle.add(x=Tensor([4, 512, 138, 96],"float16"), y=Tensor([4, 512, 138, 96],"float16"), )
paddle.add(x=Tensor([4, 512, 138, 96],"float32"), y=Tensor([4, 512, 138, 96],"float32"), )
paddle.add(x=Tensor([4, 512, 139, 112],"float16"), y=Tensor([4, 512, 139, 112],"float16"), )
paddle.add(x=Tensor([4, 512, 139, 112],"float32"), y=Tensor([4, 512, 139, 112],"float32"), )
paddle.add(x=Tensor([4, 512, 139, 126],"float16"), y=Tensor([4, 512, 139, 126],"float16"), )
paddle.add(x=Tensor([4, 512, 139, 128],"float16"), y=Tensor([4, 512, 139, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 139, 139],"float16"), y=Tensor([4, 512, 139, 139],"float16"), )
paddle.add(x=Tensor([4, 512, 139, 141],"float16"), y=Tensor([4, 512, 139, 141],"float16"), )
paddle.add(x=Tensor([4, 512, 140, 112],"float16"), y=Tensor([4, 512, 140, 112],"float16"), )
paddle.add(x=Tensor([4, 512, 140, 112],"float32"), y=Tensor([4, 512, 140, 112],"float32"), )
paddle.add(x=Tensor([4, 512, 140, 120],"float16"), y=Tensor([4, 512, 140, 120],"float16"), )
paddle.add(x=Tensor([4, 512, 140, 120],"float32"), y=Tensor([4, 512, 140, 120],"float32"), )
paddle.add(x=Tensor([4, 512, 140, 124],"float16"), y=Tensor([4, 512, 140, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 140, 124],"float32"), y=Tensor([4, 512, 140, 124],"float32"), )
paddle.add(x=Tensor([4, 512, 140, 127],"float16"), y=Tensor([4, 512, 140, 127],"float16"), )
paddle.add(x=Tensor([4, 512, 140, 127],"float32"), y=Tensor([4, 512, 140, 127],"float32"), )
paddle.add(x=Tensor([4, 512, 140, 128],"float16"), y=Tensor([4, 512, 140, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 140, 128],"float32"), y=Tensor([4, 512, 140, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 140, 132],"float16"), y=Tensor([4, 512, 140, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 140, 132],"float32"), y=Tensor([4, 512, 140, 132],"float32"), )
paddle.add(x=Tensor([4, 512, 140, 136],"float16"), y=Tensor([4, 512, 140, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 140, 136],"float32"), y=Tensor([4, 512, 140, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 140, 140],"float16"), y=Tensor([4, 512, 140, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 140, 140],"float32"), y=Tensor([4, 512, 140, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 140, 144],"float16"), y=Tensor([4, 512, 140, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 140, 144],"float32"), y=Tensor([4, 512, 140, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 140, 148],"float16"), y=Tensor([4, 512, 140, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 140, 148],"float32"), y=Tensor([4, 512, 140, 148],"float32"), )
paddle.add(x=Tensor([4, 512, 140, 152],"float16"), y=Tensor([4, 512, 140, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 140, 152],"float32"), y=Tensor([4, 512, 140, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 140, 156],"float16"), y=Tensor([4, 512, 140, 156],"float16"), )
paddle.add(x=Tensor([4, 512, 140, 156],"float32"), y=Tensor([4, 512, 140, 156],"float32"), )
paddle.add(x=Tensor([4, 512, 140, 164],"float16"), y=Tensor([4, 512, 140, 164],"float16"), )
paddle.add(x=Tensor([4, 512, 140, 168],"float16"), y=Tensor([4, 512, 140, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 140, 168],"float32"), y=Tensor([4, 512, 140, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 140, 96],"float16"), y=Tensor([4, 512, 140, 96],"float16"), )
paddle.add(x=Tensor([4, 512, 140, 96],"float32"), y=Tensor([4, 512, 140, 96],"float32"), )
paddle.add(x=Tensor([4, 512, 141, 141],"float16"), y=Tensor([4, 512, 141, 141],"float16"), )
paddle.add(x=Tensor([4, 512, 141, 156],"float16"), y=Tensor([4, 512, 141, 156],"float16"), )
paddle.add(x=Tensor([4, 512, 142, 128],"float16"), y=Tensor([4, 512, 142, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 142, 128],"float32"), y=Tensor([4, 512, 142, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 142, 132],"float16"), y=Tensor([4, 512, 142, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 142, 132],"float32"), y=Tensor([4, 512, 142, 132],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 100],"float32"), y=Tensor([4, 512, 144, 100],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 107],"float16"), y=Tensor([4, 512, 144, 107],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 107],"float32"), y=Tensor([4, 512, 144, 107],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 108],"float16"), y=Tensor([4, 512, 144, 108],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 108],"float32"), y=Tensor([4, 512, 144, 108],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 112],"float16"), y=Tensor([4, 512, 144, 112],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 112],"float32"), y=Tensor([4, 512, 144, 112],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 118],"float16"), y=Tensor([4, 512, 144, 118],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 118],"float32"), y=Tensor([4, 512, 144, 118],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 120],"float16"), y=Tensor([4, 512, 144, 120],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 120],"float32"), y=Tensor([4, 512, 144, 120],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 123],"float16"), y=Tensor([4, 512, 144, 123],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 124],"float16"), y=Tensor([4, 512, 144, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 124],"float32"), y=Tensor([4, 512, 144, 124],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 128],"float16"), y=Tensor([4, 512, 144, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 128],"float32"), y=Tensor([4, 512, 144, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 132],"float16"), y=Tensor([4, 512, 144, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 132],"float32"), y=Tensor([4, 512, 144, 132],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 134],"float16"), y=Tensor([4, 512, 144, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 134],"float32"), y=Tensor([4, 512, 144, 134],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 136],"float16"), y=Tensor([4, 512, 144, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 136],"float32"), y=Tensor([4, 512, 144, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 138],"float16"), y=Tensor([4, 512, 144, 138],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 140],"float16"), y=Tensor([4, 512, 144, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 140],"float32"), y=Tensor([4, 512, 144, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 143],"float16"), y=Tensor([4, 512, 144, 143],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 144],"float16"), y=Tensor([4, 512, 144, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 144],"float32"), y=Tensor([4, 512, 144, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 148],"float16"), y=Tensor([4, 512, 144, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 152],"float16"), y=Tensor([4, 512, 144, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 152],"float32"), y=Tensor([4, 512, 144, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 156],"float16"), y=Tensor([4, 512, 144, 156],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 156],"float32"), y=Tensor([4, 512, 144, 156],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 160],"float32"), y=Tensor([4, 512, 144, 160],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 164],"float16"), y=Tensor([4, 512, 144, 164],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 164],"float32"), y=Tensor([4, 512, 144, 164],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 167],"float16"), y=Tensor([4, 512, 144, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 168],"float16"), y=Tensor([4, 512, 144, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 144, 168],"float32"), y=Tensor([4, 512, 144, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 176],"float32"), y=Tensor([4, 512, 144, 176],"float32"), )
paddle.add(x=Tensor([4, 512, 144, 96],"float32"), y=Tensor([4, 512, 144, 96],"float32"), )
paddle.add(x=Tensor([4, 512, 145, 128],"float16"), y=Tensor([4, 512, 145, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 145, 132],"float16"), y=Tensor([4, 512, 145, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 145, 134],"float16"), y=Tensor([4, 512, 145, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 145, 134],"float32"), y=Tensor([4, 512, 145, 134],"float32"), )
paddle.add(x=Tensor([4, 512, 145, 144],"float16"), y=Tensor([4, 512, 145, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 145, 145],"float16"), y=Tensor([4, 512, 145, 145],"float16"), )
paddle.add(x=Tensor([4, 512, 145, 145],"float32"), y=Tensor([4, 512, 145, 145],"float32"), )
paddle.add(x=Tensor([4, 512, 145, 150],"float16"), y=Tensor([4, 512, 145, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 145, 151],"float16"), y=Tensor([4, 512, 145, 151],"float16"), )
paddle.add(x=Tensor([4, 512, 145, 160],"float16"), y=Tensor([4, 512, 145, 160],"float16"), )
paddle.add(x=Tensor([4, 512, 145, 160],"float32"), y=Tensor([4, 512, 145, 160],"float32"), )
paddle.add(x=Tensor([4, 512, 145, 167],"float16"), y=Tensor([4, 512, 145, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 147, 125],"float16"), y=Tensor([4, 512, 147, 125],"float16"), )
paddle.add(x=Tensor([4, 512, 147, 125],"float32"), y=Tensor([4, 512, 147, 125],"float32"), )
paddle.add(x=Tensor([4, 512, 148, 120],"float16"), y=Tensor([4, 512, 148, 120],"float16"), )
paddle.add(x=Tensor([4, 512, 148, 128],"float16"), y=Tensor([4, 512, 148, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 148, 128],"float32"), y=Tensor([4, 512, 148, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 148, 132],"float16"), y=Tensor([4, 512, 148, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 148, 132],"float32"), y=Tensor([4, 512, 148, 132],"float32"), )
paddle.add(x=Tensor([4, 512, 148, 136],"float16"), y=Tensor([4, 512, 148, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 148, 136],"float32"), y=Tensor([4, 512, 148, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 148, 138],"float16"), y=Tensor([4, 512, 148, 138],"float16"), )
paddle.add(x=Tensor([4, 512, 148, 140],"float16"), y=Tensor([4, 512, 148, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 148, 140],"float32"), y=Tensor([4, 512, 148, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 148, 144],"float16"), y=Tensor([4, 512, 148, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 148, 144],"float32"), y=Tensor([4, 512, 148, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 148, 148],"float16"), y=Tensor([4, 512, 148, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 148, 148],"float32"), y=Tensor([4, 512, 148, 148],"float32"), )
paddle.add(x=Tensor([4, 512, 148, 152],"float16"), y=Tensor([4, 512, 148, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 148, 152],"float32"), y=Tensor([4, 512, 148, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 148, 160],"float16"), y=Tensor([4, 512, 148, 160],"float16"), )
paddle.add(x=Tensor([4, 512, 148, 160],"float32"), y=Tensor([4, 512, 148, 160],"float32"), )
paddle.add(x=Tensor([4, 512, 148, 164],"float16"), y=Tensor([4, 512, 148, 164],"float16"), )
paddle.add(x=Tensor([4, 512, 148, 168],"float16"), y=Tensor([4, 512, 148, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 148, 168],"float32"), y=Tensor([4, 512, 148, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 149, 123],"float16"), y=Tensor([4, 512, 149, 123],"float16"), )
paddle.add(x=Tensor([4, 512, 149, 123],"float32"), y=Tensor([4, 512, 149, 123],"float32"), )
paddle.add(x=Tensor([4, 512, 150, 100],"float16"), y=Tensor([4, 512, 150, 100],"float16"), )
paddle.add(x=Tensor([4, 512, 150, 100],"float32"), y=Tensor([4, 512, 150, 100],"float32"), )
paddle.add(x=Tensor([4, 512, 150, 121],"float16"), y=Tensor([4, 512, 150, 121],"float16"), )
paddle.add(x=Tensor([4, 512, 150, 121],"float32"), y=Tensor([4, 512, 150, 121],"float32"), )
paddle.add(x=Tensor([4, 512, 150, 127],"float16"), y=Tensor([4, 512, 150, 127],"float16"), )
paddle.add(x=Tensor([4, 512, 150, 127],"float32"), y=Tensor([4, 512, 150, 127],"float32"), )
paddle.add(x=Tensor([4, 512, 150, 128],"float16"), y=Tensor([4, 512, 150, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 150, 128],"float32"), y=Tensor([4, 512, 150, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 150, 134],"float16"), y=Tensor([4, 512, 150, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 150, 138],"float16"), y=Tensor([4, 512, 150, 138],"float16"), )
paddle.add(x=Tensor([4, 512, 150, 139],"float16"), y=Tensor([4, 512, 150, 139],"float16"), )
paddle.add(x=Tensor([4, 512, 150, 139],"float32"), y=Tensor([4, 512, 150, 139],"float32"), )
paddle.add(x=Tensor([4, 512, 150, 144],"float16"), y=Tensor([4, 512, 150, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 150, 144],"float32"), y=Tensor([4, 512, 150, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 150, 145],"float16"), y=Tensor([4, 512, 150, 145],"float16"), )
paddle.add(x=Tensor([4, 512, 150, 145],"float32"), y=Tensor([4, 512, 150, 145],"float32"), )
paddle.add(x=Tensor([4, 512, 150, 150],"float16"), y=Tensor([4, 512, 150, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 150, 150],"float32"), y=Tensor([4, 512, 150, 150],"float32"), )
paddle.add(x=Tensor([4, 512, 150, 167],"float16"), y=Tensor([4, 512, 150, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 151, 100],"float16"), y=Tensor([4, 512, 151, 100],"float16"), )
paddle.add(x=Tensor([4, 512, 151, 126],"float16"), y=Tensor([4, 512, 151, 126],"float16"), )
paddle.add(x=Tensor([4, 512, 151, 126],"float32"), y=Tensor([4, 512, 151, 126],"float32"), )
paddle.add(x=Tensor([4, 512, 151, 132],"float16"), y=Tensor([4, 512, 151, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 151, 134],"float16"), y=Tensor([4, 512, 151, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 151, 134],"float32"), y=Tensor([4, 512, 151, 134],"float32"), )
paddle.add(x=Tensor([4, 512, 151, 143],"float16"), y=Tensor([4, 512, 151, 143],"float16"), )
paddle.add(x=Tensor([4, 512, 151, 143],"float32"), y=Tensor([4, 512, 151, 143],"float32"), )
paddle.add(x=Tensor([4, 512, 151, 144],"float16"), y=Tensor([4, 512, 151, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 151, 144],"float32"), y=Tensor([4, 512, 151, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 151, 151],"float16"), y=Tensor([4, 512, 151, 151],"float16"), )
paddle.add(x=Tensor([4, 512, 151, 151],"float32"), y=Tensor([4, 512, 151, 151],"float32"), )
paddle.add(x=Tensor([4, 512, 151, 157],"float16"), y=Tensor([4, 512, 151, 157],"float16"), )
paddle.add(x=Tensor([4, 512, 151, 165],"float16"), y=Tensor([4, 512, 151, 165],"float16"), )
paddle.add(x=Tensor([4, 512, 151, 165],"float32"), y=Tensor([4, 512, 151, 165],"float32"), )
paddle.add(x=Tensor([4, 512, 151, 167],"float16"), y=Tensor([4, 512, 151, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 100],"float16"), y=Tensor([4, 512, 152, 100],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 100],"float32"), y=Tensor([4, 512, 152, 100],"float32"), )
paddle.add(x=Tensor([4, 512, 152, 108],"float16"), y=Tensor([4, 512, 152, 108],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 112],"float16"), y=Tensor([4, 512, 152, 112],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 120],"float16"), y=Tensor([4, 512, 152, 120],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 124],"float16"), y=Tensor([4, 512, 152, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 124],"float32"), y=Tensor([4, 512, 152, 124],"float32"), )
paddle.add(x=Tensor([4, 512, 152, 128],"float16"), y=Tensor([4, 512, 152, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 128],"float32"), y=Tensor([4, 512, 152, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 152, 132],"float16"), y=Tensor([4, 512, 152, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 132],"float32"), y=Tensor([4, 512, 152, 132],"float32"), )
paddle.add(x=Tensor([4, 512, 152, 136],"float16"), y=Tensor([4, 512, 152, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 136],"float32"), y=Tensor([4, 512, 152, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 152, 140],"float16"), y=Tensor([4, 512, 152, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 140],"float32"), y=Tensor([4, 512, 152, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 152, 143],"float16"), y=Tensor([4, 512, 152, 143],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 143],"float32"), y=Tensor([4, 512, 152, 143],"float32"), )
paddle.add(x=Tensor([4, 512, 152, 144],"float16"), y=Tensor([4, 512, 152, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 144],"float32"), y=Tensor([4, 512, 152, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 152, 148],"float16"), y=Tensor([4, 512, 152, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 148],"float32"), y=Tensor([4, 512, 152, 148],"float32"), )
paddle.add(x=Tensor([4, 512, 152, 152],"float16"), y=Tensor([4, 512, 152, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 152],"float32"), y=Tensor([4, 512, 152, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 152, 156],"float16"), y=Tensor([4, 512, 152, 156],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 156],"float32"), y=Tensor([4, 512, 152, 156],"float32"), )
paddle.add(x=Tensor([4, 512, 152, 160],"float16"), y=Tensor([4, 512, 152, 160],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 160],"float32"), y=Tensor([4, 512, 152, 160],"float32"), )
paddle.add(x=Tensor([4, 512, 152, 164],"float16"), y=Tensor([4, 512, 152, 164],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 164],"float32"), y=Tensor([4, 512, 152, 164],"float32"), )
paddle.add(x=Tensor([4, 512, 152, 168],"float16"), y=Tensor([4, 512, 152, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 152, 168],"float32"), y=Tensor([4, 512, 152, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 153, 123],"float16"), y=Tensor([4, 512, 153, 123],"float16"), )
paddle.add(x=Tensor([4, 512, 153, 123],"float32"), y=Tensor([4, 512, 153, 123],"float32"), )
paddle.add(x=Tensor([4, 512, 153, 138],"float16"), y=Tensor([4, 512, 153, 138],"float16"), )
paddle.add(x=Tensor([4, 512, 154, 112],"float16"), y=Tensor([4, 512, 154, 112],"float16"), )
paddle.add(x=Tensor([4, 512, 156, 112],"float16"), y=Tensor([4, 512, 156, 112],"float16"), )
paddle.add(x=Tensor([4, 512, 156, 112],"float32"), y=Tensor([4, 512, 156, 112],"float32"), )
paddle.add(x=Tensor([4, 512, 156, 120],"float16"), y=Tensor([4, 512, 156, 120],"float16"), )
paddle.add(x=Tensor([4, 512, 156, 124],"float16"), y=Tensor([4, 512, 156, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 156, 124],"float32"), y=Tensor([4, 512, 156, 124],"float32"), )
paddle.add(x=Tensor([4, 512, 156, 136],"float16"), y=Tensor([4, 512, 156, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 156, 136],"float32"), y=Tensor([4, 512, 156, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 156, 140],"float16"), y=Tensor([4, 512, 156, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 156, 140],"float32"), y=Tensor([4, 512, 156, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 156, 148],"float16"), y=Tensor([4, 512, 156, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 156, 148],"float32"), y=Tensor([4, 512, 156, 148],"float32"), )
paddle.add(x=Tensor([4, 512, 156, 152],"float16"), y=Tensor([4, 512, 156, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 156, 152],"float32"), y=Tensor([4, 512, 156, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 156, 168],"float16"), y=Tensor([4, 512, 156, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 156, 168],"float32"), y=Tensor([4, 512, 156, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 157, 144],"float16"), y=Tensor([4, 512, 157, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 158, 134],"float16"), y=Tensor([4, 512, 158, 134],"float16"), )
paddle.add(x=Tensor([4, 512, 16, 16],"float32"), y=Tensor([4, 512, 16, 16],"float32"), )
paddle.add(x=Tensor([4, 512, 160, 112],"float32"), y=Tensor([4, 512, 160, 112],"float32"), )
paddle.add(x=Tensor([4, 512, 160, 128],"float16"), y=Tensor([4, 512, 160, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 160, 128],"float32"), y=Tensor([4, 512, 160, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 160, 136],"float16"), y=Tensor([4, 512, 160, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 160, 136],"float32"), y=Tensor([4, 512, 160, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 160, 144],"float16"), y=Tensor([4, 512, 160, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 160, 144],"float32"), y=Tensor([4, 512, 160, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 160, 152],"float16"), y=Tensor([4, 512, 160, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 160, 152],"float32"), y=Tensor([4, 512, 160, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 160, 160],"float16"), y=Tensor([4, 512, 160, 160],"float16"), )
paddle.add(x=Tensor([4, 512, 160, 160],"float32"), y=Tensor([4, 512, 160, 160],"float32"), )
paddle.add(x=Tensor([4, 512, 164, 100],"float16"), y=Tensor([4, 512, 164, 100],"float16"), )
paddle.add(x=Tensor([4, 512, 164, 121],"float16"), y=Tensor([4, 512, 164, 121],"float16"), )
paddle.add(x=Tensor([4, 512, 164, 124],"float16"), y=Tensor([4, 512, 164, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 164, 124],"float32"), y=Tensor([4, 512, 164, 124],"float32"), )
paddle.add(x=Tensor([4, 512, 164, 128],"float16"), y=Tensor([4, 512, 164, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 164, 136],"float16"), y=Tensor([4, 512, 164, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 164, 140],"float16"), y=Tensor([4, 512, 164, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 164, 148],"float16"), y=Tensor([4, 512, 164, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 164, 148],"float32"), y=Tensor([4, 512, 164, 148],"float32"), )
paddle.add(x=Tensor([4, 512, 164, 152],"float16"), y=Tensor([4, 512, 164, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 164, 152],"float32"), y=Tensor([4, 512, 164, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 164, 167],"float16"), y=Tensor([4, 512, 164, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 164, 167],"float32"), y=Tensor([4, 512, 164, 167],"float32"), )
paddle.add(x=Tensor([4, 512, 164, 168],"float16"), y=Tensor([4, 512, 164, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 164, 168],"float32"), y=Tensor([4, 512, 164, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 167, 123],"float16"), y=Tensor([4, 512, 167, 123],"float16"), )
paddle.add(x=Tensor([4, 512, 167, 128],"float16"), y=Tensor([4, 512, 167, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 167, 128],"float32"), y=Tensor([4, 512, 167, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 167, 139],"float16"), y=Tensor([4, 512, 167, 139],"float16"), )
paddle.add(x=Tensor([4, 512, 167, 139],"float32"), y=Tensor([4, 512, 167, 139],"float32"), )
paddle.add(x=Tensor([4, 512, 167, 167],"float16"), y=Tensor([4, 512, 167, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 168, 100],"float16"), y=Tensor([4, 512, 168, 100],"float16"), )
paddle.add(x=Tensor([4, 512, 168, 100],"float32"), y=Tensor([4, 512, 168, 100],"float32"), )
paddle.add(x=Tensor([4, 512, 168, 120],"float16"), y=Tensor([4, 512, 168, 120],"float16"), )
paddle.add(x=Tensor([4, 512, 168, 120],"float32"), y=Tensor([4, 512, 168, 120],"float32"), )
paddle.add(x=Tensor([4, 512, 168, 124],"float16"), y=Tensor([4, 512, 168, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 168, 124],"float32"), y=Tensor([4, 512, 168, 124],"float32"), )
paddle.add(x=Tensor([4, 512, 168, 128],"float16"), y=Tensor([4, 512, 168, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 168, 128],"float32"), y=Tensor([4, 512, 168, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 168, 136],"float16"), y=Tensor([4, 512, 168, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 168, 136],"float32"), y=Tensor([4, 512, 168, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 168, 140],"float16"), y=Tensor([4, 512, 168, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 168, 140],"float32"), y=Tensor([4, 512, 168, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 168, 144],"float16"), y=Tensor([4, 512, 168, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 168, 144],"float32"), y=Tensor([4, 512, 168, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 168, 148],"float16"), y=Tensor([4, 512, 168, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 168, 152],"float16"), y=Tensor([4, 512, 168, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 168, 152],"float32"), y=Tensor([4, 512, 168, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 168, 156],"float16"), y=Tensor([4, 512, 168, 156],"float16"), )
paddle.add(x=Tensor([4, 512, 168, 156],"float32"), y=Tensor([4, 512, 168, 156],"float32"), )
paddle.add(x=Tensor([4, 512, 168, 160],"float16"), y=Tensor([4, 512, 168, 160],"float16"), )
paddle.add(x=Tensor([4, 512, 168, 168],"float16"), y=Tensor([4, 512, 168, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 168, 168],"float32"), y=Tensor([4, 512, 168, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 20, 20],"float32"), y=Tensor([4, 512, 20, 20],"float32"), )
paddle.add(x=Tensor([4, 512, 31, 23],"float32"), y=Tensor([4, 512, 31, 23],"float32"), )
paddle.add(x=Tensor([4, 512, 32, 24],"float32"), y=Tensor([4, 512, 32, 24],"float32"), )
paddle.add(x=Tensor([4, 512, 32, 28],"float32"), y=Tensor([4, 512, 32, 28],"float32"), )
paddle.add(x=Tensor([4, 512, 32, 32],"float32"), y=Tensor([4, 512, 32, 32],"float32"), )
paddle.add(x=Tensor([4, 512, 32, 41],"float32"), y=Tensor([4, 512, 32, 41],"float32"), )
paddle.add(x=Tensor([4, 512, 34, 25],"float32"), y=Tensor([4, 512, 34, 25],"float32"), )
paddle.add(x=Tensor([4, 512, 36, 29],"float32"), y=Tensor([4, 512, 36, 29],"float32"), )
paddle.add(x=Tensor([4, 512, 38, 38],"float32"), y=Tensor([4, 512, 38, 38],"float32"), )
paddle.add(x=Tensor([4, 512, 64, 64],"float32"), y=Tensor([4, 512, 64, 64],"float32"), )
paddle.add(x=Tensor([4, 512, 84, 124],"float16"), y=Tensor([4, 512, 84, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 84, 126],"float16"), y=Tensor([4, 512, 84, 126],"float16"), )
paddle.add(x=Tensor([4, 512, 84, 126],"float32"), y=Tensor([4, 512, 84, 126],"float32"), )
paddle.add(x=Tensor([4, 512, 84, 127],"float16"), y=Tensor([4, 512, 84, 127],"float16"), )
paddle.add(x=Tensor([4, 512, 84, 127],"float32"), y=Tensor([4, 512, 84, 127],"float32"), )
paddle.add(x=Tensor([4, 512, 84, 128],"float16"), y=Tensor([4, 512, 84, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 84, 128],"float32"), y=Tensor([4, 512, 84, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 88, 118],"float16"), y=Tensor([4, 512, 88, 118],"float16"), )
paddle.add(x=Tensor([4, 512, 88, 120],"float16"), y=Tensor([4, 512, 88, 120],"float16"), )
paddle.add(x=Tensor([4, 512, 88, 120],"float32"), y=Tensor([4, 512, 88, 120],"float32"), )
paddle.add(x=Tensor([4, 512, 88, 128],"float16"), y=Tensor([4, 512, 88, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 88, 132],"float16"), y=Tensor([4, 512, 88, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 88, 132],"float32"), y=Tensor([4, 512, 88, 132],"float32"), )
paddle.add(x=Tensor([4, 512, 88, 133],"float16"), y=Tensor([4, 512, 88, 133],"float16"), )
paddle.add(x=Tensor([4, 512, 88, 133],"float32"), y=Tensor([4, 512, 88, 133],"float32"), )
paddle.add(x=Tensor([4, 512, 88, 136],"float16"), y=Tensor([4, 512, 88, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 88, 136],"float32"), y=Tensor([4, 512, 88, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 88, 148],"float16"), y=Tensor([4, 512, 88, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 88, 168],"float16"), y=Tensor([4, 512, 88, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 88, 168],"float32"), y=Tensor([4, 512, 88, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 120],"float16"), y=Tensor([4, 512, 92, 120],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 123],"float16"), y=Tensor([4, 512, 92, 123],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 123],"float32"), y=Tensor([4, 512, 92, 123],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 124],"float16"), y=Tensor([4, 512, 92, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 124],"float32"), y=Tensor([4, 512, 92, 124],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 125],"float16"), y=Tensor([4, 512, 92, 125],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 128],"float16"), y=Tensor([4, 512, 92, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 128],"float32"), y=Tensor([4, 512, 92, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 133],"float16"), y=Tensor([4, 512, 92, 133],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 133],"float32"), y=Tensor([4, 512, 92, 133],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 135],"float16"), y=Tensor([4, 512, 92, 135],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 135],"float32"), y=Tensor([4, 512, 92, 135],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 136],"float16"), y=Tensor([4, 512, 92, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 136],"float32"), y=Tensor([4, 512, 92, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 138],"float16"), y=Tensor([4, 512, 92, 138],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 138],"float32"), y=Tensor([4, 512, 92, 138],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 139],"float16"), y=Tensor([4, 512, 92, 139],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 139],"float32"), y=Tensor([4, 512, 92, 139],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 140],"float16"), y=Tensor([4, 512, 92, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 140],"float32"), y=Tensor([4, 512, 92, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 148],"float16"), y=Tensor([4, 512, 92, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 148],"float32"), y=Tensor([4, 512, 92, 148],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 150],"float16"), y=Tensor([4, 512, 92, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 150],"float32"), y=Tensor([4, 512, 92, 150],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 152],"float16"), y=Tensor([4, 512, 92, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 152],"float32"), y=Tensor([4, 512, 92, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 156],"float16"), y=Tensor([4, 512, 92, 156],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 156],"float32"), y=Tensor([4, 512, 92, 156],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 160],"float16"), y=Tensor([4, 512, 92, 160],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 160],"float32"), y=Tensor([4, 512, 92, 160],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 164],"float16"), y=Tensor([4, 512, 92, 164],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 164],"float32"), y=Tensor([4, 512, 92, 164],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 167],"float16"), y=Tensor([4, 512, 92, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 167],"float32"), y=Tensor([4, 512, 92, 167],"float32"), )
paddle.add(x=Tensor([4, 512, 92, 168],"float16"), y=Tensor([4, 512, 92, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 92, 168],"float32"), y=Tensor([4, 512, 92, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 94, 167],"float16"), y=Tensor([4, 512, 94, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 94, 167],"float32"), y=Tensor([4, 512, 94, 167],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 120],"float16"), y=Tensor([4, 512, 96, 120],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 123],"float16"), y=Tensor([4, 512, 96, 123],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 123],"float32"), y=Tensor([4, 512, 96, 123],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 124],"float16"), y=Tensor([4, 512, 96, 124],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 124],"float32"), y=Tensor([4, 512, 96, 124],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 127],"float16"), y=Tensor([4, 512, 96, 127],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 127],"float32"), y=Tensor([4, 512, 96, 127],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 128],"float16"), y=Tensor([4, 512, 96, 128],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 128],"float32"), y=Tensor([4, 512, 96, 128],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 129],"float16"), y=Tensor([4, 512, 96, 129],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 132],"float16"), y=Tensor([4, 512, 96, 132],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 132],"float32"), y=Tensor([4, 512, 96, 132],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 133],"float16"), y=Tensor([4, 512, 96, 133],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 133],"float32"), y=Tensor([4, 512, 96, 133],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 136],"float16"), y=Tensor([4, 512, 96, 136],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 136],"float32"), y=Tensor([4, 512, 96, 136],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 137],"float16"), y=Tensor([4, 512, 96, 137],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 137],"float32"), y=Tensor([4, 512, 96, 137],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 138],"float16"), y=Tensor([4, 512, 96, 138],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 138],"float32"), y=Tensor([4, 512, 96, 138],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 139],"float16"), y=Tensor([4, 512, 96, 139],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 139],"float32"), y=Tensor([4, 512, 96, 139],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 140],"float16"), y=Tensor([4, 512, 96, 140],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 140],"float32"), y=Tensor([4, 512, 96, 140],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 143],"float16"), y=Tensor([4, 512, 96, 143],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 144],"float16"), y=Tensor([4, 512, 96, 144],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 144],"float32"), y=Tensor([4, 512, 96, 144],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 145],"float16"), y=Tensor([4, 512, 96, 145],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 145],"float32"), y=Tensor([4, 512, 96, 145],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 148],"float16"), y=Tensor([4, 512, 96, 148],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 148],"float32"), y=Tensor([4, 512, 96, 148],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 150],"float16"), y=Tensor([4, 512, 96, 150],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 152],"float16"), y=Tensor([4, 512, 96, 152],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 152],"float32"), y=Tensor([4, 512, 96, 152],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 160],"float16"), y=Tensor([4, 512, 96, 160],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 164],"float16"), y=Tensor([4, 512, 96, 164],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 167],"float16"), y=Tensor([4, 512, 96, 167],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 167],"float32"), y=Tensor([4, 512, 96, 167],"float32"), )
paddle.add(x=Tensor([4, 512, 96, 168],"float16"), y=Tensor([4, 512, 96, 168],"float16"), )
paddle.add(x=Tensor([4, 512, 96, 168],"float32"), y=Tensor([4, 512, 96, 168],"float32"), )
paddle.add(x=Tensor([4, 512, 98, 126],"float16"), y=Tensor([4, 512, 98, 126],"float16"), )
paddle.add(x=Tensor([4, 64, 128, 128],"float32"), y=Tensor([4, 64, 128, 128],"float32"), )
paddle.add(x=Tensor([4, 64, 160, 160],"float32"), y=Tensor([4, 64, 160, 160],"float32"), )
paddle.add(x=Tensor([4, 64, 248, 184],"float32"), y=Tensor([4, 64, 248, 184],"float32"), )
paddle.add(x=Tensor([4, 64, 256, 192],"float32"), y=Tensor([4, 64, 256, 192],"float32"), )
paddle.add(x=Tensor([4, 64, 256, 224],"float32"), y=Tensor([4, 64, 256, 224],"float32"), )
paddle.add(x=Tensor([4, 64, 256, 256],"float32"), y=Tensor([4, 64, 256, 256],"float32"), )
paddle.add(x=Tensor([4, 64, 256, 328],"float32"), y=Tensor([4, 64, 256, 328],"float32"), )
paddle.add(x=Tensor([4, 64, 272, 200],"float32"), y=Tensor([4, 64, 272, 200],"float32"), )
paddle.add(x=Tensor([4, 64, 288, 232],"float32"), y=Tensor([4, 64, 288, 232],"float32"), )
paddle.add(x=Tensor([4, 64, 304, 304],"float32"), y=Tensor([4, 64, 304, 304],"float32"), )
paddle.add(x=Tensor([40, 1024, 14, 14],"float32"), y=Tensor([40, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([40, 2048, 7, 7],"float32"), y=Tensor([40, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([40, 256, 56, 56],"float32"), y=Tensor([40, 256, 56, 56],"float32"), )
paddle.add(x=Tensor([40, 512, 28, 28],"float32"), y=Tensor([40, 512, 28, 28],"float32"), )
paddle.add(x=Tensor([48, 1024, 14, 14],"float16"), y=Tensor([48, 1024, 14, 14],"float16"), )
paddle.add(x=Tensor([48, 1024, 14, 14],"float32"), y=Tensor([48, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([48, 2048, 7, 7],"float16"), y=Tensor([48, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([48, 2048, 7, 7],"float32"), y=Tensor([48, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([48, 256, 56, 56],"float16"), y=Tensor([48, 256, 56, 56],"float16"), )
paddle.add(x=Tensor([48, 256, 56, 56],"float32"), y=Tensor([48, 256, 56, 56],"float32"), )
paddle.add(x=Tensor([48, 512, 28, 28],"float16"), y=Tensor([48, 512, 28, 28],"float16"), )
paddle.add(x=Tensor([48, 512, 28, 28],"float32"), y=Tensor([48, 512, 28, 28],"float32"), )
paddle.add(x=Tensor([512, 104, 14, 14],"float16"), y=Tensor([512, 104, 14, 14],"float16"), )
paddle.add(x=Tensor([512, 104, 14, 14],"float32"), y=Tensor([512, 104, 14, 14],"float32"), )
paddle.add(x=Tensor([512, 144, 14, 14],"float16"), y=Tensor([512, 144, 14, 14],"float16"), )
paddle.add(x=Tensor([512, 144, 14, 14],"float32"), y=Tensor([512, 144, 14, 14],"float32"), )
paddle.add(x=Tensor([512, 20, 112, 112],"float16"), y=Tensor([512, 20, 112, 112],"float16"), )
paddle.add(x=Tensor([512, 20, 112, 112],"float32"), y=Tensor([512, 20, 112, 112],"float32"), )
paddle.add(x=Tensor([512, 2048, 7, 7],"float32"), y=Tensor([512, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([512, 208, 7, 7],"float16"), y=Tensor([512, 208, 7, 7],"float16"), )
paddle.add(x=Tensor([512, 208, 7, 7],"float32"), y=Tensor([512, 208, 7, 7],"float32"), )
paddle.add(x=Tensor([512, 32, 56, 56],"float16"), y=Tensor([512, 32, 56, 56],"float16"), )
paddle.add(x=Tensor([512, 32, 56, 56],"float32"), y=Tensor([512, 32, 56, 56],"float32"), )
paddle.add(x=Tensor([512, 52, 28, 28],"float16"), y=Tensor([512, 52, 28, 28],"float16"), )
paddle.add(x=Tensor([512, 52, 28, 28],"float32"), y=Tensor([512, 52, 28, 28],"float32"), )
paddle.add(x=Tensor([6, 1024, 50, 50],"float16"), y=Tensor([6, 1024, 50, 50],"float16"), )
paddle.add(x=Tensor([6, 1024, 50, 50],"float32"), y=Tensor([6, 1024, 50, 50],"float32"), )
paddle.add(x=Tensor([6, 2048, 25, 25],"float16"), y=Tensor([6, 2048, 25, 25],"float16"), )
paddle.add(x=Tensor([6, 2048, 25, 25],"float32"), y=Tensor([6, 2048, 25, 25],"float32"), )
paddle.add(x=Tensor([6, 256, 200, 200],"float16"), y=Tensor([6, 256, 200, 200],"float16"), )
paddle.add(x=Tensor([6, 256, 200, 200],"float32"), y=Tensor([6, 256, 200, 200],"float32"), )
paddle.add(x=Tensor([6, 512, 100, 100],"float16"), y=Tensor([6, 512, 100, 100],"float16"), )
paddle.add(x=Tensor([6, 512, 100, 100],"float32"), y=Tensor([6, 512, 100, 100],"float32"), )
paddle.add(x=Tensor([60, 1024, 14, 14],"float32"), y=Tensor([60, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([60, 2048, 7, 7],"float32"), y=Tensor([60, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([60, 256, 56, 56],"float32"), y=Tensor([60, 256, 56, 56],"float32"), )
paddle.add(x=Tensor([60, 512, 28, 28],"float32"), y=Tensor([60, 512, 28, 28],"float32"), )
paddle.add(x=Tensor([64, 1024, 10, 10],"float16"), y=Tensor([64, 1024, 10, 10],"float16"), )
paddle.add(x=Tensor([64, 1024, 10, 10],"float32"), y=Tensor([64, 1024, 10, 10],"float32"), )
paddle.add(x=Tensor([64, 1024, 14, 14],"float16"), y=Tensor([64, 1024, 14, 14],"float16"), )
paddle.add(x=Tensor([64, 1024, 14, 14],"float32"), y=Tensor([64, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([64, 1024, 16, 16],"float16"), y=Tensor([64, 1024, 16, 16],"float16"), )
paddle.add(x=Tensor([64, 1024, 16, 16],"float32"), y=Tensor([64, 1024, 16, 16],"float32"), )
paddle.add(x=Tensor([64, 1024, 7, 7],"float16"), y=Tensor([64, 1024, 7, 7],"float16"), )
paddle.add(x=Tensor([64, 1024, 7, 7],"float32"), y=Tensor([64, 1024, 7, 7],"float32"), )
paddle.add(x=Tensor([64, 1024, 8, 8],"float16"), y=Tensor([64, 1024, 8, 8],"float16"), )
paddle.add(x=Tensor([64, 1024, 8, 8],"float32"), y=Tensor([64, 1024, 8, 8],"float32"), )
paddle.add(x=Tensor([64, 128, 28, 28],"float16"), y=Tensor([64, 128, 28, 28],"float16"), )
paddle.add(x=Tensor([64, 128, 28, 28],"float32"), y=Tensor([64, 128, 28, 28],"float32"), )
paddle.add(x=Tensor([64, 128, 56, 56],"float16"), y=Tensor([64, 128, 56, 56],"float16"), )
paddle.add(x=Tensor([64, 128, 56, 56],"float32"), y=Tensor([64, 128, 56, 56],"float32"), )
paddle.add(x=Tensor([64, 128, 64, 64],"float16"), y=Tensor([64, 128, 64, 64],"float16"), )
paddle.add(x=Tensor([64, 128, 64, 64],"float32"), y=Tensor([64, 128, 64, 64],"float32"), )
paddle.add(x=Tensor([64, 128, 75, 75],"float16"), y=Tensor([64, 128, 75, 75],"float16"), )
paddle.add(x=Tensor([64, 128, 75, 75],"float32"), y=Tensor([64, 128, 75, 75],"float32"), )
paddle.add(x=Tensor([64, 144, 7, 7],"float16"), y=Tensor([64, 144, 7, 7],"float16"), )
paddle.add(x=Tensor([64, 144, 7, 7],"float32"), y=Tensor([64, 144, 7, 7],"float32"), )
paddle.add(x=Tensor([64, 160, 14, 14],"float16"), y=Tensor([64, 160, 14, 14],"float16"), )
paddle.add(x=Tensor([64, 160, 14, 14],"float16"), y=Tensor([64, 160, 14, 14],"float32"), )
paddle.add(x=Tensor([64, 160, 14, 14],"float32"), y=Tensor([64, 160, 14, 14],"float32"), )
paddle.add(x=Tensor([64, 18, 56, 56],"float16"), y=Tensor([64, 18, 56, 56],"float16"), )
paddle.add(x=Tensor([64, 18, 56, 56],"float16"), y=Tensor([64, 18, 56, 56],"float32"), )
paddle.add(x=Tensor([64, 18, 56, 56],"float32"), y=Tensor([64, 18, 56, 56],"float32"), )
paddle.add(x=Tensor([64, 2048, 7, 7],"float16"), y=Tensor([64, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([64, 2048, 7, 7],"float32"), y=Tensor([64, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([64, 2048, 8, 8],"float16"), y=Tensor([64, 2048, 8, 8],"float16"), )
paddle.add(x=Tensor([64, 2048, 8, 8],"float32"), y=Tensor([64, 2048, 8, 8],"float32"), )
paddle.add(x=Tensor([64, 256, 14, 14],"float16"), y=Tensor([64, 256, 14, 14],"float16"), )
paddle.add(x=Tensor([64, 256, 14, 14],"float32"), y=Tensor([64, 256, 14, 14],"float32"), )
paddle.add(x=Tensor([64, 256, 28, 28],"float16"), y=Tensor([64, 256, 28, 28],"float16"), )
paddle.add(x=Tensor([64, 256, 28, 28],"float32"), y=Tensor([64, 256, 28, 28],"float32"), )
paddle.add(x=Tensor([64, 256, 32, 32],"float16"), y=Tensor([64, 256, 32, 32],"float16"), )
paddle.add(x=Tensor([64, 256, 32, 32],"float32"), y=Tensor([64, 256, 32, 32],"float32"), )
paddle.add(x=Tensor([64, 256, 38, 38],"float16"), y=Tensor([64, 256, 38, 38],"float16"), )
paddle.add(x=Tensor([64, 256, 38, 38],"float32"), y=Tensor([64, 256, 38, 38],"float32"), )
paddle.add(x=Tensor([64, 256, 56, 56],"float16"), y=Tensor([64, 256, 56, 56],"float16"), )
paddle.add(x=Tensor([64, 256, 56, 56],"float32"), y=Tensor([64, 256, 56, 56],"float32"), )
paddle.add(x=Tensor([64, 256, 64, 64],"float16"), y=Tensor([64, 256, 64, 64],"float16"), )
paddle.add(x=Tensor([64, 256, 64, 64],"float32"), y=Tensor([64, 256, 64, 64],"float32"), )
paddle.add(x=Tensor([64, 320, 7, 7],"float16"), y=Tensor([64, 320, 7, 7],"float16"), )
paddle.add(x=Tensor([64, 320, 7, 7],"float32"), y=Tensor([64, 320, 7, 7],"float32"), )
paddle.add(x=Tensor([64, 36, 28, 28],"float16"), y=Tensor([64, 36, 28, 28],"float16"), )
paddle.add(x=Tensor([64, 36, 28, 28],"float16"), y=Tensor([64, 36, 28, 28],"float32"), )
paddle.add(x=Tensor([64, 36, 28, 28],"float32"), y=Tensor([64, 36, 28, 28],"float32"), )
paddle.add(x=Tensor([64, 40, 56, 56],"float16"), y=Tensor([64, 40, 56, 56],"float16"), )
paddle.add(x=Tensor([64, 40, 56, 56],"float16"), y=Tensor([64, 40, 56, 56],"float32"), )
paddle.add(x=Tensor([64, 40, 56, 56],"float32"), y=Tensor([64, 40, 56, 56],"float32"), )
paddle.add(x=Tensor([64, 512, 14, 14],"float16"), y=Tensor([64, 512, 14, 14],"float16"), )
paddle.add(x=Tensor([64, 512, 14, 14],"float32"), y=Tensor([64, 512, 14, 14],"float32"), )
paddle.add(x=Tensor([64, 512, 16, 16],"float16"), y=Tensor([64, 512, 16, 16],"float16"), )
paddle.add(x=Tensor([64, 512, 16, 16],"float32"), y=Tensor([64, 512, 16, 16],"float32"), )
paddle.add(x=Tensor([64, 512, 28, 28],"float16"), y=Tensor([64, 512, 28, 28],"float16"), )
paddle.add(x=Tensor([64, 512, 28, 28],"float32"), y=Tensor([64, 512, 28, 28],"float32"), )
paddle.add(x=Tensor([64, 512, 32, 32],"float16"), y=Tensor([64, 512, 32, 32],"float16"), )
paddle.add(x=Tensor([64, 512, 32, 32],"float32"), y=Tensor([64, 512, 32, 32],"float32"), )
paddle.add(x=Tensor([64, 512, 7, 7],"float16"), y=Tensor([64, 512, 7, 7],"float16"), )
paddle.add(x=Tensor([64, 512, 7, 7],"float32"), y=Tensor([64, 512, 7, 7],"float32"), )
paddle.add(x=Tensor([64, 64, 128, 128],"float16"), y=Tensor([64, 64, 128, 128],"float16"), )
paddle.add(x=Tensor([64, 64, 128, 128],"float32"), y=Tensor([64, 64, 128, 128],"float32"), )
paddle.add(x=Tensor([64, 64, 56, 56],"float16"), y=Tensor([64, 64, 56, 56],"float16"), )
paddle.add(x=Tensor([64, 64, 56, 56],"float32"), y=Tensor([64, 64, 56, 56],"float32"), )
paddle.add(x=Tensor([64, 72, 14, 14],"float16"), y=Tensor([64, 72, 14, 14],"float16"), )
paddle.add(x=Tensor([64, 72, 14, 14],"float16"), y=Tensor([64, 72, 14, 14],"float32"), )
paddle.add(x=Tensor([64, 72, 14, 14],"float32"), y=Tensor([64, 72, 14, 14],"float32"), )
paddle.add(x=Tensor([64, 728, 19, 19],"float16"), y=Tensor([64, 728, 19, 19],"float16"), )
paddle.add(x=Tensor([64, 728, 19, 19],"float32"), y=Tensor([64, 728, 19, 19],"float32"), )
paddle.add(x=Tensor([64, 80, 28, 28],"float16"), y=Tensor([64, 80, 28, 28],"float16"), )
paddle.add(x=Tensor([64, 80, 28, 28],"float16"), y=Tensor([64, 80, 28, 28],"float32"), )
paddle.add(x=Tensor([64, 80, 28, 28],"float32"), y=Tensor([64, 80, 28, 28],"float32"), )
paddle.add(x=Tensor([8, 1024, 10, 10],"float16"), y=Tensor([8, 1024, 10, 10],"float16"), )
paddle.add(x=Tensor([8, 1024, 10, 10],"float32"), y=Tensor([8, 1024, 10, 10],"float32"), )
paddle.add(x=Tensor([8, 1024, 11, 11],"float16"), y=Tensor([8, 1024, 11, 11],"float16"), )
paddle.add(x=Tensor([8, 1024, 11, 11],"float32"), y=Tensor([8, 1024, 11, 11],"float32"), )
paddle.add(x=Tensor([8, 1024, 12, 12],"float16"), y=Tensor([8, 1024, 12, 12],"float16"), )
paddle.add(x=Tensor([8, 1024, 12, 12],"float32"), y=Tensor([8, 1024, 12, 12],"float32"), )
paddle.add(x=Tensor([8, 1024, 13, 13],"float16"), y=Tensor([8, 1024, 13, 13],"float16"), )
paddle.add(x=Tensor([8, 1024, 13, 13],"float32"), y=Tensor([8, 1024, 13, 13],"float32"), )
paddle.add(x=Tensor([8, 1024, 14, 14],"float16"), y=Tensor([8, 1024, 14, 14],"float16"), )
paddle.add(x=Tensor([8, 1024, 14, 14],"float32"), y=Tensor([8, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 1024, 15, 15],"float16"), y=Tensor([8, 1024, 15, 15],"float16"), )
paddle.add(x=Tensor([8, 1024, 15, 15],"float32"), y=Tensor([8, 1024, 15, 15],"float32"), )
paddle.add(x=Tensor([8, 1024, 16, 16],"float16"), y=Tensor([8, 1024, 16, 16],"float16"), )
paddle.add(x=Tensor([8, 1024, 16, 16],"float32"), y=Tensor([8, 1024, 16, 16],"float32"), )
paddle.add(x=Tensor([8, 1024, 17, 17],"float16"), y=Tensor([8, 1024, 17, 17],"float16"), )
paddle.add(x=Tensor([8, 1024, 17, 17],"float32"), y=Tensor([8, 1024, 17, 17],"float32"), )
paddle.add(x=Tensor([8, 1024, 18, 18],"float16"), y=Tensor([8, 1024, 18, 18],"float16"), )
paddle.add(x=Tensor([8, 1024, 18, 18],"float32"), y=Tensor([8, 1024, 18, 18],"float32"), )
paddle.add(x=Tensor([8, 1024, 19, 19],"float16"), y=Tensor([8, 1024, 19, 19],"float16"), )
paddle.add(x=Tensor([8, 1024, 19, 19],"float32"), y=Tensor([8, 1024, 19, 19],"float32"), )
paddle.add(x=Tensor([8, 1024, 26, 26],"float32"), y=Tensor([8, 1024, 26, 26],"float32"), )
paddle.add(x=Tensor([8, 1024, 30, 30],"float32"), y=Tensor([8, 1024, 30, 30],"float32"), )
paddle.add(x=Tensor([8, 1024, 32, 32],"float16"), y=Tensor([8, 1024, 32, 32],"float16"), )
paddle.add(x=Tensor([8, 1024, 32, 32],"float32"), y=Tensor([8, 1024, 32, 32],"float32"), )
paddle.add(x=Tensor([8, 1024, 34, 34],"float32"), y=Tensor([8, 1024, 34, 34],"float32"), )
paddle.add(x=Tensor([8, 1024, 36, 36],"float32"), y=Tensor([8, 1024, 36, 36],"float32"), )
paddle.add(x=Tensor([8, 1024, 4, 14, 14],"float32"), y=Tensor([8, 1024, 4, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 1024, 40, 40],"float16"), y=Tensor([8, 1024, 40, 40],"float16"), )
paddle.add(x=Tensor([8, 1024, 40, 40],"float32"), y=Tensor([8, 1024, 40, 40],"float32"), )
paddle.add(x=Tensor([8, 1024, 46, 66],"float16"), y=Tensor([8, 1024, 46, 66],"float16"), )
paddle.add(x=Tensor([8, 1024, 46, 68],"float16"), y=Tensor([8, 1024, 46, 68],"float16"), )
paddle.add(x=Tensor([8, 1024, 46, 68],"float32"), y=Tensor([8, 1024, 46, 68],"float32"), )
paddle.add(x=Tensor([8, 1024, 48, 70],"float16"), y=Tensor([8, 1024, 48, 70],"float16"), )
paddle.add(x=Tensor([8, 1024, 48, 72],"float16"), y=Tensor([8, 1024, 48, 72],"float16"), )
paddle.add(x=Tensor([8, 1024, 48, 72],"float32"), y=Tensor([8, 1024, 48, 72],"float32"), )
paddle.add(x=Tensor([8, 1024, 48, 74],"float16"), y=Tensor([8, 1024, 48, 74],"float16"), )
paddle.add(x=Tensor([8, 1024, 48, 74],"float32"), y=Tensor([8, 1024, 48, 74],"float32"), )
paddle.add(x=Tensor([8, 1024, 50, 68],"float16"), y=Tensor([8, 1024, 50, 68],"float16"), )
paddle.add(x=Tensor([8, 1024, 50, 68],"float32"), y=Tensor([8, 1024, 50, 68],"float32"), )
paddle.add(x=Tensor([8, 1024, 50, 70],"float16"), y=Tensor([8, 1024, 50, 70],"float16"), )
paddle.add(x=Tensor([8, 1024, 50, 70],"float32"), y=Tensor([8, 1024, 50, 70],"float32"), )
paddle.add(x=Tensor([8, 1024, 50, 72],"float16"), y=Tensor([8, 1024, 50, 72],"float16"), )
paddle.add(x=Tensor([8, 1024, 50, 72],"float32"), y=Tensor([8, 1024, 50, 72],"float32"), )
paddle.add(x=Tensor([8, 1024, 50, 74],"float16"), y=Tensor([8, 1024, 50, 74],"float16"), )
paddle.add(x=Tensor([8, 1024, 50, 74],"float32"), y=Tensor([8, 1024, 50, 74],"float32"), )
paddle.add(x=Tensor([8, 1024, 50, 76],"float16"), y=Tensor([8, 1024, 50, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 50, 76],"float32"), y=Tensor([8, 1024, 50, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 50, 78],"float16"), y=Tensor([8, 1024, 50, 78],"float16"), )
paddle.add(x=Tensor([8, 1024, 50, 80],"float16"), y=Tensor([8, 1024, 50, 80],"float16"), )
paddle.add(x=Tensor([8, 1024, 50, 82],"float16"), y=Tensor([8, 1024, 50, 82],"float16"), )
paddle.add(x=Tensor([8, 1024, 50, 82],"float32"), y=Tensor([8, 1024, 50, 82],"float32"), )
paddle.add(x=Tensor([8, 1024, 50, 84],"float16"), y=Tensor([8, 1024, 50, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 50, 84],"float32"), y=Tensor([8, 1024, 50, 84],"float32"), )
paddle.add(x=Tensor([8, 1024, 52, 76],"float16"), y=Tensor([8, 1024, 52, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 52, 76],"float32"), y=Tensor([8, 1024, 52, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 52, 82],"float16"), y=Tensor([8, 1024, 52, 82],"float16"), )
paddle.add(x=Tensor([8, 1024, 52, 82],"float32"), y=Tensor([8, 1024, 52, 82],"float32"), )
paddle.add(x=Tensor([8, 1024, 52, 84],"float16"), y=Tensor([8, 1024, 52, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 52, 84],"float32"), y=Tensor([8, 1024, 52, 84],"float32"), )
paddle.add(x=Tensor([8, 1024, 54, 68],"float16"), y=Tensor([8, 1024, 54, 68],"float16"), )
paddle.add(x=Tensor([8, 1024, 54, 72],"float16"), y=Tensor([8, 1024, 54, 72],"float16"), )
paddle.add(x=Tensor([8, 1024, 54, 76],"float16"), y=Tensor([8, 1024, 54, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 54, 76],"float32"), y=Tensor([8, 1024, 54, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 54, 78],"float16"), y=Tensor([8, 1024, 54, 78],"float16"), )
paddle.add(x=Tensor([8, 1024, 54, 82],"float16"), y=Tensor([8, 1024, 54, 82],"float16"), )
paddle.add(x=Tensor([8, 1024, 54, 82],"float32"), y=Tensor([8, 1024, 54, 82],"float32"), )
paddle.add(x=Tensor([8, 1024, 54, 84],"float16"), y=Tensor([8, 1024, 54, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 54, 84],"float32"), y=Tensor([8, 1024, 54, 84],"float32"), )
paddle.add(x=Tensor([8, 1024, 56, 64],"float16"), y=Tensor([8, 1024, 56, 64],"float16"), )
paddle.add(x=Tensor([8, 1024, 56, 68],"float16"), y=Tensor([8, 1024, 56, 68],"float16"), )
paddle.add(x=Tensor([8, 1024, 56, 68],"float32"), y=Tensor([8, 1024, 56, 68],"float32"), )
paddle.add(x=Tensor([8, 1024, 56, 70],"float16"), y=Tensor([8, 1024, 56, 70],"float16"), )
paddle.add(x=Tensor([8, 1024, 56, 70],"float32"), y=Tensor([8, 1024, 56, 70],"float32"), )
paddle.add(x=Tensor([8, 1024, 56, 72],"float16"), y=Tensor([8, 1024, 56, 72],"float16"), )
paddle.add(x=Tensor([8, 1024, 56, 74],"float16"), y=Tensor([8, 1024, 56, 74],"float16"), )
paddle.add(x=Tensor([8, 1024, 56, 74],"float32"), y=Tensor([8, 1024, 56, 74],"float32"), )
paddle.add(x=Tensor([8, 1024, 56, 76],"float16"), y=Tensor([8, 1024, 56, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 56, 76],"float32"), y=Tensor([8, 1024, 56, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 56, 78],"float16"), y=Tensor([8, 1024, 56, 78],"float16"), )
paddle.add(x=Tensor([8, 1024, 56, 78],"float32"), y=Tensor([8, 1024, 56, 78],"float32"), )
paddle.add(x=Tensor([8, 1024, 56, 80],"float16"), y=Tensor([8, 1024, 56, 80],"float16"), )
paddle.add(x=Tensor([8, 1024, 56, 80],"float32"), y=Tensor([8, 1024, 56, 80],"float32"), )
paddle.add(x=Tensor([8, 1024, 56, 88],"float16"), y=Tensor([8, 1024, 56, 88],"float16"), )
paddle.add(x=Tensor([8, 1024, 56, 88],"float32"), y=Tensor([8, 1024, 56, 88],"float32"), )
paddle.add(x=Tensor([8, 1024, 58, 62],"float16"), y=Tensor([8, 1024, 58, 62],"float16"), )
paddle.add(x=Tensor([8, 1024, 58, 62],"float32"), y=Tensor([8, 1024, 58, 62],"float32"), )
paddle.add(x=Tensor([8, 1024, 58, 76],"float16"), y=Tensor([8, 1024, 58, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 58, 84],"float16"), y=Tensor([8, 1024, 58, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 60, 60],"float32"), y=Tensor([8, 1024, 60, 60],"float32"), )
paddle.add(x=Tensor([8, 1024, 60, 68],"float16"), y=Tensor([8, 1024, 60, 68],"float16"), )
paddle.add(x=Tensor([8, 1024, 60, 68],"float32"), y=Tensor([8, 1024, 60, 68],"float32"), )
paddle.add(x=Tensor([8, 1024, 60, 70],"float16"), y=Tensor([8, 1024, 60, 70],"float16"), )
paddle.add(x=Tensor([8, 1024, 60, 70],"float32"), y=Tensor([8, 1024, 60, 70],"float32"), )
paddle.add(x=Tensor([8, 1024, 60, 72],"float16"), y=Tensor([8, 1024, 60, 72],"float16"), )
paddle.add(x=Tensor([8, 1024, 60, 72],"float32"), y=Tensor([8, 1024, 60, 72],"float32"), )
paddle.add(x=Tensor([8, 1024, 60, 74],"float16"), y=Tensor([8, 1024, 60, 74],"float16"), )
paddle.add(x=Tensor([8, 1024, 60, 74],"float32"), y=Tensor([8, 1024, 60, 74],"float32"), )
paddle.add(x=Tensor([8, 1024, 60, 76],"float16"), y=Tensor([8, 1024, 60, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 60, 76],"float32"), y=Tensor([8, 1024, 60, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 60, 78],"float16"), y=Tensor([8, 1024, 60, 78],"float16"), )
paddle.add(x=Tensor([8, 1024, 60, 80],"float16"), y=Tensor([8, 1024, 60, 80],"float16"), )
paddle.add(x=Tensor([8, 1024, 60, 80],"float32"), y=Tensor([8, 1024, 60, 80],"float32"), )
paddle.add(x=Tensor([8, 1024, 60, 84],"float16"), y=Tensor([8, 1024, 60, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 60, 84],"float32"), y=Tensor([8, 1024, 60, 84],"float32"), )
paddle.add(x=Tensor([8, 1024, 62, 64],"float16"), y=Tensor([8, 1024, 62, 64],"float16"), )
paddle.add(x=Tensor([8, 1024, 62, 64],"float32"), y=Tensor([8, 1024, 62, 64],"float32"), )
paddle.add(x=Tensor([8, 1024, 62, 68],"float16"), y=Tensor([8, 1024, 62, 68],"float16"), )
paddle.add(x=Tensor([8, 1024, 62, 68],"float32"), y=Tensor([8, 1024, 62, 68],"float32"), )
paddle.add(x=Tensor([8, 1024, 62, 70],"float16"), y=Tensor([8, 1024, 62, 70],"float16"), )
paddle.add(x=Tensor([8, 1024, 62, 70],"float32"), y=Tensor([8, 1024, 62, 70],"float32"), )
paddle.add(x=Tensor([8, 1024, 62, 72],"float16"), y=Tensor([8, 1024, 62, 72],"float16"), )
paddle.add(x=Tensor([8, 1024, 62, 72],"float32"), y=Tensor([8, 1024, 62, 72],"float32"), )
paddle.add(x=Tensor([8, 1024, 62, 74],"float16"), y=Tensor([8, 1024, 62, 74],"float16"), )
paddle.add(x=Tensor([8, 1024, 62, 74],"float32"), y=Tensor([8, 1024, 62, 74],"float32"), )
paddle.add(x=Tensor([8, 1024, 62, 76],"float16"), y=Tensor([8, 1024, 62, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 62, 76],"float32"), y=Tensor([8, 1024, 62, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 62, 80],"float16"), y=Tensor([8, 1024, 62, 80],"float16"), )
paddle.add(x=Tensor([8, 1024, 62, 80],"float32"), y=Tensor([8, 1024, 62, 80],"float32"), )
paddle.add(x=Tensor([8, 1024, 62, 82],"float16"), y=Tensor([8, 1024, 62, 82],"float16"), )
paddle.add(x=Tensor([8, 1024, 62, 82],"float32"), y=Tensor([8, 1024, 62, 82],"float32"), )
paddle.add(x=Tensor([8, 1024, 62, 84],"float16"), y=Tensor([8, 1024, 62, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 62, 84],"float32"), y=Tensor([8, 1024, 62, 84],"float32"), )
paddle.add(x=Tensor([8, 1024, 64, 62],"float16"), y=Tensor([8, 1024, 64, 62],"float16"), )
paddle.add(x=Tensor([8, 1024, 64, 62],"float32"), y=Tensor([8, 1024, 64, 62],"float32"), )
paddle.add(x=Tensor([8, 1024, 64, 64],"float16"), y=Tensor([8, 1024, 64, 64],"float16"), )
paddle.add(x=Tensor([8, 1024, 64, 64],"float32"), y=Tensor([8, 1024, 64, 64],"float32"), )
paddle.add(x=Tensor([8, 1024, 64, 68],"float16"), y=Tensor([8, 1024, 64, 68],"float16"), )
paddle.add(x=Tensor([8, 1024, 64, 68],"float32"), y=Tensor([8, 1024, 64, 68],"float32"), )
paddle.add(x=Tensor([8, 1024, 64, 70],"float16"), y=Tensor([8, 1024, 64, 70],"float16"), )
paddle.add(x=Tensor([8, 1024, 64, 70],"float32"), y=Tensor([8, 1024, 64, 70],"float32"), )
paddle.add(x=Tensor([8, 1024, 64, 72],"float16"), y=Tensor([8, 1024, 64, 72],"float16"), )
paddle.add(x=Tensor([8, 1024, 64, 72],"float32"), y=Tensor([8, 1024, 64, 72],"float32"), )
paddle.add(x=Tensor([8, 1024, 64, 74],"float16"), y=Tensor([8, 1024, 64, 74],"float16"), )
paddle.add(x=Tensor([8, 1024, 64, 74],"float32"), y=Tensor([8, 1024, 64, 74],"float32"), )
paddle.add(x=Tensor([8, 1024, 64, 76],"float16"), y=Tensor([8, 1024, 64, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 64, 76],"float32"), y=Tensor([8, 1024, 64, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 64, 78],"float16"), y=Tensor([8, 1024, 64, 78],"float16"), )
paddle.add(x=Tensor([8, 1024, 64, 78],"float32"), y=Tensor([8, 1024, 64, 78],"float32"), )
paddle.add(x=Tensor([8, 1024, 64, 80],"float16"), y=Tensor([8, 1024, 64, 80],"float16"), )
paddle.add(x=Tensor([8, 1024, 64, 80],"float32"), y=Tensor([8, 1024, 64, 80],"float32"), )
paddle.add(x=Tensor([8, 1024, 64, 82],"float16"), y=Tensor([8, 1024, 64, 82],"float16"), )
paddle.add(x=Tensor([8, 1024, 64, 82],"float32"), y=Tensor([8, 1024, 64, 82],"float32"), )
paddle.add(x=Tensor([8, 1024, 64, 84],"float16"), y=Tensor([8, 1024, 64, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 64, 84],"float32"), y=Tensor([8, 1024, 64, 84],"float32"), )
paddle.add(x=Tensor([8, 1024, 64, 88],"float16"), y=Tensor([8, 1024, 64, 88],"float16"), )
paddle.add(x=Tensor([8, 1024, 64, 88],"float32"), y=Tensor([8, 1024, 64, 88],"float32"), )
paddle.add(x=Tensor([8, 1024, 66, 62],"float16"), y=Tensor([8, 1024, 66, 62],"float16"), )
paddle.add(x=Tensor([8, 1024, 66, 62],"float32"), y=Tensor([8, 1024, 66, 62],"float32"), )
paddle.add(x=Tensor([8, 1024, 66, 70],"float16"), y=Tensor([8, 1024, 66, 70],"float16"), )
paddle.add(x=Tensor([8, 1024, 66, 70],"float32"), y=Tensor([8, 1024, 66, 70],"float32"), )
paddle.add(x=Tensor([8, 1024, 66, 74],"float16"), y=Tensor([8, 1024, 66, 74],"float16"), )
paddle.add(x=Tensor([8, 1024, 66, 74],"float32"), y=Tensor([8, 1024, 66, 74],"float32"), )
paddle.add(x=Tensor([8, 1024, 66, 76],"float16"), y=Tensor([8, 1024, 66, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 66, 76],"float32"), y=Tensor([8, 1024, 66, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 66, 82],"float16"), y=Tensor([8, 1024, 66, 82],"float16"), )
paddle.add(x=Tensor([8, 1024, 66, 82],"float32"), y=Tensor([8, 1024, 66, 82],"float32"), )
paddle.add(x=Tensor([8, 1024, 66, 84],"float16"), y=Tensor([8, 1024, 66, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 66, 84],"float32"), y=Tensor([8, 1024, 66, 84],"float32"), )
paddle.add(x=Tensor([8, 1024, 68, 60],"float16"), y=Tensor([8, 1024, 68, 60],"float16"), )
paddle.add(x=Tensor([8, 1024, 68, 60],"float32"), y=Tensor([8, 1024, 68, 60],"float32"), )
paddle.add(x=Tensor([8, 1024, 68, 62],"float16"), y=Tensor([8, 1024, 68, 62],"float16"), )
paddle.add(x=Tensor([8, 1024, 68, 62],"float32"), y=Tensor([8, 1024, 68, 62],"float32"), )
paddle.add(x=Tensor([8, 1024, 68, 64],"float16"), y=Tensor([8, 1024, 68, 64],"float16"), )
paddle.add(x=Tensor([8, 1024, 68, 64],"float32"), y=Tensor([8, 1024, 68, 64],"float32"), )
paddle.add(x=Tensor([8, 1024, 68, 68],"float16"), y=Tensor([8, 1024, 68, 68],"float16"), )
paddle.add(x=Tensor([8, 1024, 68, 68],"float32"), y=Tensor([8, 1024, 68, 68],"float32"), )
paddle.add(x=Tensor([8, 1024, 68, 70],"float16"), y=Tensor([8, 1024, 68, 70],"float16"), )
paddle.add(x=Tensor([8, 1024, 68, 70],"float32"), y=Tensor([8, 1024, 68, 70],"float32"), )
paddle.add(x=Tensor([8, 1024, 68, 72],"float16"), y=Tensor([8, 1024, 68, 72],"float16"), )
paddle.add(x=Tensor([8, 1024, 68, 74],"float16"), y=Tensor([8, 1024, 68, 74],"float16"), )
paddle.add(x=Tensor([8, 1024, 68, 74],"float32"), y=Tensor([8, 1024, 68, 74],"float32"), )
paddle.add(x=Tensor([8, 1024, 68, 76],"float16"), y=Tensor([8, 1024, 68, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 68, 76],"float32"), y=Tensor([8, 1024, 68, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 68, 78],"float16"), y=Tensor([8, 1024, 68, 78],"float16"), )
paddle.add(x=Tensor([8, 1024, 68, 78],"float32"), y=Tensor([8, 1024, 68, 78],"float32"), )
paddle.add(x=Tensor([8, 1024, 68, 80],"float16"), y=Tensor([8, 1024, 68, 80],"float16"), )
paddle.add(x=Tensor([8, 1024, 68, 80],"float32"), y=Tensor([8, 1024, 68, 80],"float32"), )
paddle.add(x=Tensor([8, 1024, 68, 82],"float16"), y=Tensor([8, 1024, 68, 82],"float16"), )
paddle.add(x=Tensor([8, 1024, 68, 82],"float32"), y=Tensor([8, 1024, 68, 82],"float32"), )
paddle.add(x=Tensor([8, 1024, 68, 84],"float16"), y=Tensor([8, 1024, 68, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 68, 84],"float32"), y=Tensor([8, 1024, 68, 84],"float32"), )
paddle.add(x=Tensor([8, 1024, 70, 64],"float16"), y=Tensor([8, 1024, 70, 64],"float16"), )
paddle.add(x=Tensor([8, 1024, 70, 64],"float32"), y=Tensor([8, 1024, 70, 64],"float32"), )
paddle.add(x=Tensor([8, 1024, 70, 68],"float16"), y=Tensor([8, 1024, 70, 68],"float16"), )
paddle.add(x=Tensor([8, 1024, 70, 68],"float32"), y=Tensor([8, 1024, 70, 68],"float32"), )
paddle.add(x=Tensor([8, 1024, 70, 70],"float16"), y=Tensor([8, 1024, 70, 70],"float16"), )
paddle.add(x=Tensor([8, 1024, 70, 70],"float32"), y=Tensor([8, 1024, 70, 70],"float32"), )
paddle.add(x=Tensor([8, 1024, 70, 72],"float16"), y=Tensor([8, 1024, 70, 72],"float16"), )
paddle.add(x=Tensor([8, 1024, 70, 72],"float32"), y=Tensor([8, 1024, 70, 72],"float32"), )
paddle.add(x=Tensor([8, 1024, 70, 74],"float16"), y=Tensor([8, 1024, 70, 74],"float16"), )
paddle.add(x=Tensor([8, 1024, 70, 74],"float32"), y=Tensor([8, 1024, 70, 74],"float32"), )
paddle.add(x=Tensor([8, 1024, 70, 76],"float16"), y=Tensor([8, 1024, 70, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 70, 76],"float32"), y=Tensor([8, 1024, 70, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 70, 78],"float16"), y=Tensor([8, 1024, 70, 78],"float16"), )
paddle.add(x=Tensor([8, 1024, 70, 78],"float32"), y=Tensor([8, 1024, 70, 78],"float32"), )
paddle.add(x=Tensor([8, 1024, 70, 82],"float16"), y=Tensor([8, 1024, 70, 82],"float16"), )
paddle.add(x=Tensor([8, 1024, 70, 82],"float32"), y=Tensor([8, 1024, 70, 82],"float32"), )
paddle.add(x=Tensor([8, 1024, 70, 84],"float16"), y=Tensor([8, 1024, 70, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 70, 84],"float32"), y=Tensor([8, 1024, 70, 84],"float32"), )
paddle.add(x=Tensor([8, 1024, 72, 64],"float16"), y=Tensor([8, 1024, 72, 64],"float16"), )
paddle.add(x=Tensor([8, 1024, 72, 64],"float32"), y=Tensor([8, 1024, 72, 64],"float32"), )
paddle.add(x=Tensor([8, 1024, 72, 68],"float16"), y=Tensor([8, 1024, 72, 68],"float16"), )
paddle.add(x=Tensor([8, 1024, 72, 68],"float32"), y=Tensor([8, 1024, 72, 68],"float32"), )
paddle.add(x=Tensor([8, 1024, 72, 70],"float16"), y=Tensor([8, 1024, 72, 70],"float16"), )
paddle.add(x=Tensor([8, 1024, 72, 70],"float32"), y=Tensor([8, 1024, 72, 70],"float32"), )
paddle.add(x=Tensor([8, 1024, 72, 72],"float16"), y=Tensor([8, 1024, 72, 72],"float16"), )
paddle.add(x=Tensor([8, 1024, 72, 72],"float32"), y=Tensor([8, 1024, 72, 72],"float32"), )
paddle.add(x=Tensor([8, 1024, 72, 74],"float16"), y=Tensor([8, 1024, 72, 74],"float16"), )
paddle.add(x=Tensor([8, 1024, 72, 74],"float32"), y=Tensor([8, 1024, 72, 74],"float32"), )
paddle.add(x=Tensor([8, 1024, 72, 76],"float16"), y=Tensor([8, 1024, 72, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 72, 76],"float32"), y=Tensor([8, 1024, 72, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 72, 78],"float16"), y=Tensor([8, 1024, 72, 78],"float16"), )
paddle.add(x=Tensor([8, 1024, 72, 80],"float16"), y=Tensor([8, 1024, 72, 80],"float16"), )
paddle.add(x=Tensor([8, 1024, 72, 80],"float32"), y=Tensor([8, 1024, 72, 80],"float32"), )
paddle.add(x=Tensor([8, 1024, 72, 82],"float16"), y=Tensor([8, 1024, 72, 82],"float16"), )
paddle.add(x=Tensor([8, 1024, 72, 82],"float32"), y=Tensor([8, 1024, 72, 82],"float32"), )
paddle.add(x=Tensor([8, 1024, 72, 84],"float16"), y=Tensor([8, 1024, 72, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 72, 84],"float32"), y=Tensor([8, 1024, 72, 84],"float32"), )
paddle.add(x=Tensor([8, 1024, 72, 88],"float16"), y=Tensor([8, 1024, 72, 88],"float16"), )
paddle.add(x=Tensor([8, 1024, 72, 88],"float32"), y=Tensor([8, 1024, 72, 88],"float32"), )
paddle.add(x=Tensor([8, 1024, 74, 66],"float16"), y=Tensor([8, 1024, 74, 66],"float16"), )
paddle.add(x=Tensor([8, 1024, 74, 66],"float32"), y=Tensor([8, 1024, 74, 66],"float32"), )
paddle.add(x=Tensor([8, 1024, 74, 68],"float16"), y=Tensor([8, 1024, 74, 68],"float16"), )
paddle.add(x=Tensor([8, 1024, 74, 68],"float32"), y=Tensor([8, 1024, 74, 68],"float32"), )
paddle.add(x=Tensor([8, 1024, 74, 70],"float16"), y=Tensor([8, 1024, 74, 70],"float16"), )
paddle.add(x=Tensor([8, 1024, 74, 70],"float32"), y=Tensor([8, 1024, 74, 70],"float32"), )
paddle.add(x=Tensor([8, 1024, 74, 72],"float16"), y=Tensor([8, 1024, 74, 72],"float16"), )
paddle.add(x=Tensor([8, 1024, 74, 72],"float32"), y=Tensor([8, 1024, 74, 72],"float32"), )
paddle.add(x=Tensor([8, 1024, 74, 74],"float16"), y=Tensor([8, 1024, 74, 74],"float16"), )
paddle.add(x=Tensor([8, 1024, 74, 74],"float32"), y=Tensor([8, 1024, 74, 74],"float32"), )
paddle.add(x=Tensor([8, 1024, 74, 76],"float16"), y=Tensor([8, 1024, 74, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 74, 76],"float32"), y=Tensor([8, 1024, 74, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 74, 78],"float16"), y=Tensor([8, 1024, 74, 78],"float16"), )
paddle.add(x=Tensor([8, 1024, 74, 78],"float32"), y=Tensor([8, 1024, 74, 78],"float32"), )
paddle.add(x=Tensor([8, 1024, 74, 80],"float16"), y=Tensor([8, 1024, 74, 80],"float16"), )
paddle.add(x=Tensor([8, 1024, 74, 80],"float32"), y=Tensor([8, 1024, 74, 80],"float32"), )
paddle.add(x=Tensor([8, 1024, 74, 82],"float16"), y=Tensor([8, 1024, 74, 82],"float16"), )
paddle.add(x=Tensor([8, 1024, 74, 82],"float32"), y=Tensor([8, 1024, 74, 82],"float32"), )
paddle.add(x=Tensor([8, 1024, 74, 84],"float16"), y=Tensor([8, 1024, 74, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 74, 84],"float32"), y=Tensor([8, 1024, 74, 84],"float32"), )
paddle.add(x=Tensor([8, 1024, 76, 60],"float16"), y=Tensor([8, 1024, 76, 60],"float16"), )
paddle.add(x=Tensor([8, 1024, 76, 62],"float16"), y=Tensor([8, 1024, 76, 62],"float16"), )
paddle.add(x=Tensor([8, 1024, 76, 62],"float32"), y=Tensor([8, 1024, 76, 62],"float32"), )
paddle.add(x=Tensor([8, 1024, 76, 64],"float16"), y=Tensor([8, 1024, 76, 64],"float16"), )
paddle.add(x=Tensor([8, 1024, 76, 64],"float32"), y=Tensor([8, 1024, 76, 64],"float32"), )
paddle.add(x=Tensor([8, 1024, 76, 68],"float16"), y=Tensor([8, 1024, 76, 68],"float16"), )
paddle.add(x=Tensor([8, 1024, 76, 68],"float32"), y=Tensor([8, 1024, 76, 68],"float32"), )
paddle.add(x=Tensor([8, 1024, 76, 70],"float16"), y=Tensor([8, 1024, 76, 70],"float16"), )
paddle.add(x=Tensor([8, 1024, 76, 70],"float32"), y=Tensor([8, 1024, 76, 70],"float32"), )
paddle.add(x=Tensor([8, 1024, 76, 72],"float16"), y=Tensor([8, 1024, 76, 72],"float16"), )
paddle.add(x=Tensor([8, 1024, 76, 72],"float32"), y=Tensor([8, 1024, 76, 72],"float32"), )
paddle.add(x=Tensor([8, 1024, 76, 74],"float16"), y=Tensor([8, 1024, 76, 74],"float16"), )
paddle.add(x=Tensor([8, 1024, 76, 74],"float32"), y=Tensor([8, 1024, 76, 74],"float32"), )
paddle.add(x=Tensor([8, 1024, 76, 76],"float16"), y=Tensor([8, 1024, 76, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 76, 76],"float32"), y=Tensor([8, 1024, 76, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 76, 78],"float16"), y=Tensor([8, 1024, 76, 78],"float16"), )
paddle.add(x=Tensor([8, 1024, 76, 78],"float32"), y=Tensor([8, 1024, 76, 78],"float32"), )
paddle.add(x=Tensor([8, 1024, 76, 80],"float16"), y=Tensor([8, 1024, 76, 80],"float16"), )
paddle.add(x=Tensor([8, 1024, 76, 80],"float32"), y=Tensor([8, 1024, 76, 80],"float32"), )
paddle.add(x=Tensor([8, 1024, 76, 82],"float16"), y=Tensor([8, 1024, 76, 82],"float16"), )
paddle.add(x=Tensor([8, 1024, 76, 82],"float32"), y=Tensor([8, 1024, 76, 82],"float32"), )
paddle.add(x=Tensor([8, 1024, 76, 84],"float16"), y=Tensor([8, 1024, 76, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 76, 84],"float32"), y=Tensor([8, 1024, 76, 84],"float32"), )
paddle.add(x=Tensor([8, 1024, 78, 68],"float16"), y=Tensor([8, 1024, 78, 68],"float16"), )
paddle.add(x=Tensor([8, 1024, 78, 68],"float32"), y=Tensor([8, 1024, 78, 68],"float32"), )
paddle.add(x=Tensor([8, 1024, 78, 70],"float16"), y=Tensor([8, 1024, 78, 70],"float16"), )
paddle.add(x=Tensor([8, 1024, 78, 74],"float16"), y=Tensor([8, 1024, 78, 74],"float16"), )
paddle.add(x=Tensor([8, 1024, 78, 74],"float32"), y=Tensor([8, 1024, 78, 74],"float32"), )
paddle.add(x=Tensor([8, 1024, 78, 76],"float16"), y=Tensor([8, 1024, 78, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 78, 76],"float32"), y=Tensor([8, 1024, 78, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 78, 84],"float16"), y=Tensor([8, 1024, 78, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 78, 84],"float32"), y=Tensor([8, 1024, 78, 84],"float32"), )
paddle.add(x=Tensor([8, 1024, 80, 72],"float16"), y=Tensor([8, 1024, 80, 72],"float16"), )
paddle.add(x=Tensor([8, 1024, 80, 72],"float32"), y=Tensor([8, 1024, 80, 72],"float32"), )
paddle.add(x=Tensor([8, 1024, 80, 76],"float16"), y=Tensor([8, 1024, 80, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 80, 76],"float32"), y=Tensor([8, 1024, 80, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 80, 80],"float16"), y=Tensor([8, 1024, 80, 80],"float16"), )
paddle.add(x=Tensor([8, 1024, 80, 80],"float32"), y=Tensor([8, 1024, 80, 80],"float32"), )
paddle.add(x=Tensor([8, 1024, 80, 84],"float16"), y=Tensor([8, 1024, 80, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 80, 84],"float32"), y=Tensor([8, 1024, 80, 84],"float32"), )
paddle.add(x=Tensor([8, 1024, 80, 88],"float16"), y=Tensor([8, 1024, 80, 88],"float16"), )
paddle.add(x=Tensor([8, 1024, 80, 88],"float32"), y=Tensor([8, 1024, 80, 88],"float32"), )
paddle.add(x=Tensor([8, 1024, 82, 68],"float16"), y=Tensor([8, 1024, 82, 68],"float16"), )
paddle.add(x=Tensor([8, 1024, 82, 72],"float16"), y=Tensor([8, 1024, 82, 72],"float16"), )
paddle.add(x=Tensor([8, 1024, 82, 76],"float16"), y=Tensor([8, 1024, 82, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 82, 76],"float32"), y=Tensor([8, 1024, 82, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 82, 78],"float16"), y=Tensor([8, 1024, 82, 78],"float16"), )
paddle.add(x=Tensor([8, 1024, 82, 84],"float16"), y=Tensor([8, 1024, 82, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 82, 84],"float32"), y=Tensor([8, 1024, 82, 84],"float32"), )
paddle.add(x=Tensor([8, 1024, 84, 64],"float16"), y=Tensor([8, 1024, 84, 64],"float16"), )
paddle.add(x=Tensor([8, 1024, 84, 64],"float32"), y=Tensor([8, 1024, 84, 64],"float32"), )
paddle.add(x=Tensor([8, 1024, 84, 66],"float16"), y=Tensor([8, 1024, 84, 66],"float16"), )
paddle.add(x=Tensor([8, 1024, 84, 66],"float32"), y=Tensor([8, 1024, 84, 66],"float32"), )
paddle.add(x=Tensor([8, 1024, 84, 68],"float16"), y=Tensor([8, 1024, 84, 68],"float16"), )
paddle.add(x=Tensor([8, 1024, 84, 68],"float32"), y=Tensor([8, 1024, 84, 68],"float32"), )
paddle.add(x=Tensor([8, 1024, 84, 72],"float16"), y=Tensor([8, 1024, 84, 72],"float16"), )
paddle.add(x=Tensor([8, 1024, 84, 72],"float32"), y=Tensor([8, 1024, 84, 72],"float32"), )
paddle.add(x=Tensor([8, 1024, 84, 74],"float16"), y=Tensor([8, 1024, 84, 74],"float16"), )
paddle.add(x=Tensor([8, 1024, 84, 76],"float16"), y=Tensor([8, 1024, 84, 76],"float16"), )
paddle.add(x=Tensor([8, 1024, 84, 76],"float32"), y=Tensor([8, 1024, 84, 76],"float32"), )
paddle.add(x=Tensor([8, 1024, 84, 80],"float16"), y=Tensor([8, 1024, 84, 80],"float16"), )
paddle.add(x=Tensor([8, 1024, 84, 80],"float32"), y=Tensor([8, 1024, 84, 80],"float32"), )
paddle.add(x=Tensor([8, 1024, 84, 84],"float16"), y=Tensor([8, 1024, 84, 84],"float16"), )
paddle.add(x=Tensor([8, 1024, 84, 84],"float32"), y=Tensor([8, 1024, 84, 84],"float32"), )
paddle.add(x=Tensor([8, 1024, 88, 72],"float16"), y=Tensor([8, 1024, 88, 72],"float16"), )
paddle.add(x=Tensor([8, 1024, 88, 72],"float32"), y=Tensor([8, 1024, 88, 72],"float32"), )
paddle.add(x=Tensor([8, 1024, 88, 80],"float16"), y=Tensor([8, 1024, 88, 80],"float16"), )
paddle.add(x=Tensor([8, 1024, 88, 80],"float32"), y=Tensor([8, 1024, 88, 80],"float32"), )
paddle.add(x=Tensor([8, 1024, 88, 88],"float16"), y=Tensor([8, 1024, 88, 88],"float16"), )
paddle.add(x=Tensor([8, 1024, 88, 88],"float32"), y=Tensor([8, 1024, 88, 88],"float32"), )
paddle.add(x=Tensor([8, 128, 104, 104],"float16"), y=Tensor([8, 128, 104, 104],"float16"), )
paddle.add(x=Tensor([8, 128, 104, 104],"float32"), y=Tensor([8, 128, 104, 104],"float32"), )
paddle.add(x=Tensor([8, 128, 112, 112],"float16"), y=Tensor([8, 128, 112, 112],"float16"), )
paddle.add(x=Tensor([8, 128, 112, 112],"float32"), y=Tensor([8, 128, 112, 112],"float32"), )
paddle.add(x=Tensor([8, 128, 120, 120],"float16"), y=Tensor([8, 128, 120, 120],"float16"), )
paddle.add(x=Tensor([8, 128, 120, 120],"float32"), y=Tensor([8, 128, 120, 120],"float32"), )
paddle.add(x=Tensor([8, 128, 128, 128],"float16"), y=Tensor([8, 128, 128, 128],"float16"), )
paddle.add(x=Tensor([8, 128, 128, 128],"float32"), y=Tensor([8, 128, 128, 128],"float32"), )
paddle.add(x=Tensor([8, 128, 136, 136],"float16"), y=Tensor([8, 128, 136, 136],"float16"), )
paddle.add(x=Tensor([8, 128, 136, 136],"float32"), y=Tensor([8, 128, 136, 136],"float32"), )
paddle.add(x=Tensor([8, 128, 144, 144],"float16"), y=Tensor([8, 128, 144, 144],"float16"), )
paddle.add(x=Tensor([8, 128, 144, 144],"float32"), y=Tensor([8, 128, 144, 144],"float32"), )
paddle.add(x=Tensor([8, 128, 152, 152],"float16"), y=Tensor([8, 128, 152, 152],"float16"), )
paddle.add(x=Tensor([8, 128, 152, 152],"float32"), y=Tensor([8, 128, 152, 152],"float32"), )
paddle.add(x=Tensor([8, 128, 32, 14, 14],"float32"), y=Tensor([8, 128, 32, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 128, 80, 80],"float16"), y=Tensor([8, 128, 80, 80],"float16"), )
paddle.add(x=Tensor([8, 128, 80, 80],"float32"), y=Tensor([8, 128, 80, 80],"float32"), )
paddle.add(x=Tensor([8, 128, 88, 88],"float16"), y=Tensor([8, 128, 88, 88],"float16"), )
paddle.add(x=Tensor([8, 128, 88, 88],"float32"), y=Tensor([8, 128, 88, 88],"float32"), )
paddle.add(x=Tensor([8, 128, 96, 96],"float16"), y=Tensor([8, 128, 96, 96],"float16"), )
paddle.add(x=Tensor([8, 128, 96, 96],"float32"), y=Tensor([8, 128, 96, 96],"float32"), )
paddle.add(x=Tensor([8, 2048, 13, 13],"float32"), y=Tensor([8, 2048, 13, 13],"float32"), )
paddle.add(x=Tensor([8, 2048, 15, 15],"float32"), y=Tensor([8, 2048, 15, 15],"float32"), )
paddle.add(x=Tensor([8, 2048, 16, 16],"float16"), y=Tensor([8, 2048, 16, 16],"float16"), )
paddle.add(x=Tensor([8, 2048, 16, 16],"float32"), y=Tensor([8, 2048, 16, 16],"float32"), )
paddle.add(x=Tensor([8, 2048, 17, 17],"float32"), y=Tensor([8, 2048, 17, 17],"float32"), )
paddle.add(x=Tensor([8, 2048, 18, 18],"float32"), y=Tensor([8, 2048, 18, 18],"float32"), )
paddle.add(x=Tensor([8, 2048, 20, 20],"float16"), y=Tensor([8, 2048, 20, 20],"float16"), )
paddle.add(x=Tensor([8, 2048, 20, 20],"float32"), y=Tensor([8, 2048, 20, 20],"float32"), )
paddle.add(x=Tensor([8, 2048, 23, 33],"float16"), y=Tensor([8, 2048, 23, 33],"float16"), )
paddle.add(x=Tensor([8, 2048, 23, 34],"float16"), y=Tensor([8, 2048, 23, 34],"float16"), )
paddle.add(x=Tensor([8, 2048, 23, 34],"float32"), y=Tensor([8, 2048, 23, 34],"float32"), )
paddle.add(x=Tensor([8, 2048, 24, 35],"float16"), y=Tensor([8, 2048, 24, 35],"float16"), )
paddle.add(x=Tensor([8, 2048, 24, 36],"float16"), y=Tensor([8, 2048, 24, 36],"float16"), )
paddle.add(x=Tensor([8, 2048, 24, 36],"float32"), y=Tensor([8, 2048, 24, 36],"float32"), )
paddle.add(x=Tensor([8, 2048, 24, 37],"float16"), y=Tensor([8, 2048, 24, 37],"float16"), )
paddle.add(x=Tensor([8, 2048, 24, 37],"float32"), y=Tensor([8, 2048, 24, 37],"float32"), )
paddle.add(x=Tensor([8, 2048, 25, 34],"float16"), y=Tensor([8, 2048, 25, 34],"float16"), )
paddle.add(x=Tensor([8, 2048, 25, 34],"float32"), y=Tensor([8, 2048, 25, 34],"float32"), )
paddle.add(x=Tensor([8, 2048, 25, 35],"float16"), y=Tensor([8, 2048, 25, 35],"float16"), )
paddle.add(x=Tensor([8, 2048, 25, 35],"float32"), y=Tensor([8, 2048, 25, 35],"float32"), )
paddle.add(x=Tensor([8, 2048, 25, 36],"float16"), y=Tensor([8, 2048, 25, 36],"float16"), )
paddle.add(x=Tensor([8, 2048, 25, 36],"float32"), y=Tensor([8, 2048, 25, 36],"float32"), )
paddle.add(x=Tensor([8, 2048, 25, 37],"float16"), y=Tensor([8, 2048, 25, 37],"float16"), )
paddle.add(x=Tensor([8, 2048, 25, 37],"float32"), y=Tensor([8, 2048, 25, 37],"float32"), )
paddle.add(x=Tensor([8, 2048, 25, 38],"float16"), y=Tensor([8, 2048, 25, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 25, 38],"float32"), y=Tensor([8, 2048, 25, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 25, 39],"float16"), y=Tensor([8, 2048, 25, 39],"float16"), )
paddle.add(x=Tensor([8, 2048, 25, 40],"float16"), y=Tensor([8, 2048, 25, 40],"float16"), )
paddle.add(x=Tensor([8, 2048, 25, 41],"float16"), y=Tensor([8, 2048, 25, 41],"float16"), )
paddle.add(x=Tensor([8, 2048, 25, 41],"float32"), y=Tensor([8, 2048, 25, 41],"float32"), )
paddle.add(x=Tensor([8, 2048, 25, 42],"float16"), y=Tensor([8, 2048, 25, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 25, 42],"float32"), y=Tensor([8, 2048, 25, 42],"float32"), )
paddle.add(x=Tensor([8, 2048, 26, 38],"float16"), y=Tensor([8, 2048, 26, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 26, 38],"float32"), y=Tensor([8, 2048, 26, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 26, 41],"float16"), y=Tensor([8, 2048, 26, 41],"float16"), )
paddle.add(x=Tensor([8, 2048, 26, 41],"float32"), y=Tensor([8, 2048, 26, 41],"float32"), )
paddle.add(x=Tensor([8, 2048, 26, 42],"float16"), y=Tensor([8, 2048, 26, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 26, 42],"float32"), y=Tensor([8, 2048, 26, 42],"float32"), )
paddle.add(x=Tensor([8, 2048, 27, 34],"float16"), y=Tensor([8, 2048, 27, 34],"float16"), )
paddle.add(x=Tensor([8, 2048, 27, 36],"float16"), y=Tensor([8, 2048, 27, 36],"float16"), )
paddle.add(x=Tensor([8, 2048, 27, 38],"float16"), y=Tensor([8, 2048, 27, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 27, 38],"float32"), y=Tensor([8, 2048, 27, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 27, 39],"float16"), y=Tensor([8, 2048, 27, 39],"float16"), )
paddle.add(x=Tensor([8, 2048, 27, 41],"float16"), y=Tensor([8, 2048, 27, 41],"float16"), )
paddle.add(x=Tensor([8, 2048, 27, 41],"float32"), y=Tensor([8, 2048, 27, 41],"float32"), )
paddle.add(x=Tensor([8, 2048, 27, 42],"float16"), y=Tensor([8, 2048, 27, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 27, 42],"float32"), y=Tensor([8, 2048, 27, 42],"float32"), )
paddle.add(x=Tensor([8, 2048, 28, 32],"float16"), y=Tensor([8, 2048, 28, 32],"float16"), )
paddle.add(x=Tensor([8, 2048, 28, 34],"float16"), y=Tensor([8, 2048, 28, 34],"float16"), )
paddle.add(x=Tensor([8, 2048, 28, 34],"float32"), y=Tensor([8, 2048, 28, 34],"float32"), )
paddle.add(x=Tensor([8, 2048, 28, 35],"float16"), y=Tensor([8, 2048, 28, 35],"float16"), )
paddle.add(x=Tensor([8, 2048, 28, 35],"float32"), y=Tensor([8, 2048, 28, 35],"float32"), )
paddle.add(x=Tensor([8, 2048, 28, 36],"float16"), y=Tensor([8, 2048, 28, 36],"float16"), )
paddle.add(x=Tensor([8, 2048, 28, 37],"float16"), y=Tensor([8, 2048, 28, 37],"float16"), )
paddle.add(x=Tensor([8, 2048, 28, 37],"float32"), y=Tensor([8, 2048, 28, 37],"float32"), )
paddle.add(x=Tensor([8, 2048, 28, 38],"float16"), y=Tensor([8, 2048, 28, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 28, 38],"float32"), y=Tensor([8, 2048, 28, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 28, 39],"float16"), y=Tensor([8, 2048, 28, 39],"float16"), )
paddle.add(x=Tensor([8, 2048, 28, 39],"float32"), y=Tensor([8, 2048, 28, 39],"float32"), )
paddle.add(x=Tensor([8, 2048, 28, 40],"float16"), y=Tensor([8, 2048, 28, 40],"float16"), )
paddle.add(x=Tensor([8, 2048, 28, 40],"float32"), y=Tensor([8, 2048, 28, 40],"float32"), )
paddle.add(x=Tensor([8, 2048, 28, 44],"float16"), y=Tensor([8, 2048, 28, 44],"float16"), )
paddle.add(x=Tensor([8, 2048, 28, 44],"float32"), y=Tensor([8, 2048, 28, 44],"float32"), )
paddle.add(x=Tensor([8, 2048, 29, 31],"float16"), y=Tensor([8, 2048, 29, 31],"float16"), )
paddle.add(x=Tensor([8, 2048, 29, 31],"float32"), y=Tensor([8, 2048, 29, 31],"float32"), )
paddle.add(x=Tensor([8, 2048, 29, 38],"float16"), y=Tensor([8, 2048, 29, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 29, 42],"float16"), y=Tensor([8, 2048, 29, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 30, 30],"float32"), y=Tensor([8, 2048, 30, 30],"float32"), )
paddle.add(x=Tensor([8, 2048, 30, 34],"float16"), y=Tensor([8, 2048, 30, 34],"float16"), )
paddle.add(x=Tensor([8, 2048, 30, 34],"float32"), y=Tensor([8, 2048, 30, 34],"float32"), )
paddle.add(x=Tensor([8, 2048, 30, 35],"float16"), y=Tensor([8, 2048, 30, 35],"float16"), )
paddle.add(x=Tensor([8, 2048, 30, 35],"float32"), y=Tensor([8, 2048, 30, 35],"float32"), )
paddle.add(x=Tensor([8, 2048, 30, 36],"float16"), y=Tensor([8, 2048, 30, 36],"float16"), )
paddle.add(x=Tensor([8, 2048, 30, 36],"float32"), y=Tensor([8, 2048, 30, 36],"float32"), )
paddle.add(x=Tensor([8, 2048, 30, 37],"float16"), y=Tensor([8, 2048, 30, 37],"float16"), )
paddle.add(x=Tensor([8, 2048, 30, 37],"float32"), y=Tensor([8, 2048, 30, 37],"float32"), )
paddle.add(x=Tensor([8, 2048, 30, 38],"float16"), y=Tensor([8, 2048, 30, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 30, 38],"float32"), y=Tensor([8, 2048, 30, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 30, 39],"float16"), y=Tensor([8, 2048, 30, 39],"float16"), )
paddle.add(x=Tensor([8, 2048, 30, 40],"float16"), y=Tensor([8, 2048, 30, 40],"float16"), )
paddle.add(x=Tensor([8, 2048, 30, 40],"float32"), y=Tensor([8, 2048, 30, 40],"float32"), )
paddle.add(x=Tensor([8, 2048, 30, 42],"float16"), y=Tensor([8, 2048, 30, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 30, 42],"float32"), y=Tensor([8, 2048, 30, 42],"float32"), )
paddle.add(x=Tensor([8, 2048, 31, 32],"float16"), y=Tensor([8, 2048, 31, 32],"float16"), )
paddle.add(x=Tensor([8, 2048, 31, 32],"float32"), y=Tensor([8, 2048, 31, 32],"float32"), )
paddle.add(x=Tensor([8, 2048, 31, 34],"float16"), y=Tensor([8, 2048, 31, 34],"float16"), )
paddle.add(x=Tensor([8, 2048, 31, 34],"float32"), y=Tensor([8, 2048, 31, 34],"float32"), )
paddle.add(x=Tensor([8, 2048, 31, 35],"float16"), y=Tensor([8, 2048, 31, 35],"float16"), )
paddle.add(x=Tensor([8, 2048, 31, 35],"float32"), y=Tensor([8, 2048, 31, 35],"float32"), )
paddle.add(x=Tensor([8, 2048, 31, 36],"float16"), y=Tensor([8, 2048, 31, 36],"float16"), )
paddle.add(x=Tensor([8, 2048, 31, 36],"float32"), y=Tensor([8, 2048, 31, 36],"float32"), )
paddle.add(x=Tensor([8, 2048, 31, 37],"float16"), y=Tensor([8, 2048, 31, 37],"float16"), )
paddle.add(x=Tensor([8, 2048, 31, 37],"float32"), y=Tensor([8, 2048, 31, 37],"float32"), )
paddle.add(x=Tensor([8, 2048, 31, 38],"float16"), y=Tensor([8, 2048, 31, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 31, 38],"float32"), y=Tensor([8, 2048, 31, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 31, 40],"float16"), y=Tensor([8, 2048, 31, 40],"float16"), )
paddle.add(x=Tensor([8, 2048, 31, 40],"float32"), y=Tensor([8, 2048, 31, 40],"float32"), )
paddle.add(x=Tensor([8, 2048, 31, 41],"float16"), y=Tensor([8, 2048, 31, 41],"float16"), )
paddle.add(x=Tensor([8, 2048, 31, 41],"float32"), y=Tensor([8, 2048, 31, 41],"float32"), )
paddle.add(x=Tensor([8, 2048, 31, 42],"float16"), y=Tensor([8, 2048, 31, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 31, 42],"float32"), y=Tensor([8, 2048, 31, 42],"float32"), )
paddle.add(x=Tensor([8, 2048, 32, 31],"float16"), y=Tensor([8, 2048, 32, 31],"float16"), )
paddle.add(x=Tensor([8, 2048, 32, 31],"float32"), y=Tensor([8, 2048, 32, 31],"float32"), )
paddle.add(x=Tensor([8, 2048, 32, 32],"float16"), y=Tensor([8, 2048, 32, 32],"float16"), )
paddle.add(x=Tensor([8, 2048, 32, 32],"float32"), y=Tensor([8, 2048, 32, 32],"float32"), )
paddle.add(x=Tensor([8, 2048, 32, 34],"float16"), y=Tensor([8, 2048, 32, 34],"float16"), )
paddle.add(x=Tensor([8, 2048, 32, 34],"float32"), y=Tensor([8, 2048, 32, 34],"float32"), )
paddle.add(x=Tensor([8, 2048, 32, 35],"float16"), y=Tensor([8, 2048, 32, 35],"float16"), )
paddle.add(x=Tensor([8, 2048, 32, 35],"float32"), y=Tensor([8, 2048, 32, 35],"float32"), )
paddle.add(x=Tensor([8, 2048, 32, 36],"float16"), y=Tensor([8, 2048, 32, 36],"float16"), )
paddle.add(x=Tensor([8, 2048, 32, 36],"float32"), y=Tensor([8, 2048, 32, 36],"float32"), )
paddle.add(x=Tensor([8, 2048, 32, 37],"float16"), y=Tensor([8, 2048, 32, 37],"float16"), )
paddle.add(x=Tensor([8, 2048, 32, 37],"float32"), y=Tensor([8, 2048, 32, 37],"float32"), )
paddle.add(x=Tensor([8, 2048, 32, 38],"float16"), y=Tensor([8, 2048, 32, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 32, 38],"float32"), y=Tensor([8, 2048, 32, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 32, 39],"float16"), y=Tensor([8, 2048, 32, 39],"float16"), )
paddle.add(x=Tensor([8, 2048, 32, 39],"float32"), y=Tensor([8, 2048, 32, 39],"float32"), )
paddle.add(x=Tensor([8, 2048, 32, 40],"float16"), y=Tensor([8, 2048, 32, 40],"float16"), )
paddle.add(x=Tensor([8, 2048, 32, 40],"float32"), y=Tensor([8, 2048, 32, 40],"float32"), )
paddle.add(x=Tensor([8, 2048, 32, 41],"float16"), y=Tensor([8, 2048, 32, 41],"float16"), )
paddle.add(x=Tensor([8, 2048, 32, 41],"float32"), y=Tensor([8, 2048, 32, 41],"float32"), )
paddle.add(x=Tensor([8, 2048, 32, 42],"float16"), y=Tensor([8, 2048, 32, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 32, 42],"float32"), y=Tensor([8, 2048, 32, 42],"float32"), )
paddle.add(x=Tensor([8, 2048, 32, 44],"float16"), y=Tensor([8, 2048, 32, 44],"float16"), )
paddle.add(x=Tensor([8, 2048, 32, 44],"float32"), y=Tensor([8, 2048, 32, 44],"float32"), )
paddle.add(x=Tensor([8, 2048, 33, 31],"float16"), y=Tensor([8, 2048, 33, 31],"float16"), )
paddle.add(x=Tensor([8, 2048, 33, 31],"float32"), y=Tensor([8, 2048, 33, 31],"float32"), )
paddle.add(x=Tensor([8, 2048, 33, 35],"float16"), y=Tensor([8, 2048, 33, 35],"float16"), )
paddle.add(x=Tensor([8, 2048, 33, 35],"float32"), y=Tensor([8, 2048, 33, 35],"float32"), )
paddle.add(x=Tensor([8, 2048, 33, 37],"float16"), y=Tensor([8, 2048, 33, 37],"float16"), )
paddle.add(x=Tensor([8, 2048, 33, 37],"float32"), y=Tensor([8, 2048, 33, 37],"float32"), )
paddle.add(x=Tensor([8, 2048, 33, 38],"float16"), y=Tensor([8, 2048, 33, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 33, 38],"float32"), y=Tensor([8, 2048, 33, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 33, 41],"float16"), y=Tensor([8, 2048, 33, 41],"float16"), )
paddle.add(x=Tensor([8, 2048, 33, 41],"float32"), y=Tensor([8, 2048, 33, 41],"float32"), )
paddle.add(x=Tensor([8, 2048, 33, 42],"float16"), y=Tensor([8, 2048, 33, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 33, 42],"float32"), y=Tensor([8, 2048, 33, 42],"float32"), )
paddle.add(x=Tensor([8, 2048, 34, 30],"float16"), y=Tensor([8, 2048, 34, 30],"float16"), )
paddle.add(x=Tensor([8, 2048, 34, 30],"float32"), y=Tensor([8, 2048, 34, 30],"float32"), )
paddle.add(x=Tensor([8, 2048, 34, 31],"float16"), y=Tensor([8, 2048, 34, 31],"float16"), )
paddle.add(x=Tensor([8, 2048, 34, 31],"float32"), y=Tensor([8, 2048, 34, 31],"float32"), )
paddle.add(x=Tensor([8, 2048, 34, 32],"float16"), y=Tensor([8, 2048, 34, 32],"float16"), )
paddle.add(x=Tensor([8, 2048, 34, 32],"float32"), y=Tensor([8, 2048, 34, 32],"float32"), )
paddle.add(x=Tensor([8, 2048, 34, 34],"float16"), y=Tensor([8, 2048, 34, 34],"float16"), )
paddle.add(x=Tensor([8, 2048, 34, 34],"float32"), y=Tensor([8, 2048, 34, 34],"float32"), )
paddle.add(x=Tensor([8, 2048, 34, 35],"float16"), y=Tensor([8, 2048, 34, 35],"float16"), )
paddle.add(x=Tensor([8, 2048, 34, 35],"float32"), y=Tensor([8, 2048, 34, 35],"float32"), )
paddle.add(x=Tensor([8, 2048, 34, 36],"float16"), y=Tensor([8, 2048, 34, 36],"float16"), )
paddle.add(x=Tensor([8, 2048, 34, 37],"float16"), y=Tensor([8, 2048, 34, 37],"float16"), )
paddle.add(x=Tensor([8, 2048, 34, 37],"float32"), y=Tensor([8, 2048, 34, 37],"float32"), )
paddle.add(x=Tensor([8, 2048, 34, 38],"float16"), y=Tensor([8, 2048, 34, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 34, 38],"float32"), y=Tensor([8, 2048, 34, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 34, 39],"float16"), y=Tensor([8, 2048, 34, 39],"float16"), )
paddle.add(x=Tensor([8, 2048, 34, 39],"float32"), y=Tensor([8, 2048, 34, 39],"float32"), )
paddle.add(x=Tensor([8, 2048, 34, 40],"float16"), y=Tensor([8, 2048, 34, 40],"float16"), )
paddle.add(x=Tensor([8, 2048, 34, 40],"float32"), y=Tensor([8, 2048, 34, 40],"float32"), )
paddle.add(x=Tensor([8, 2048, 34, 41],"float16"), y=Tensor([8, 2048, 34, 41],"float16"), )
paddle.add(x=Tensor([8, 2048, 34, 41],"float32"), y=Tensor([8, 2048, 34, 41],"float32"), )
paddle.add(x=Tensor([8, 2048, 34, 42],"float16"), y=Tensor([8, 2048, 34, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 34, 42],"float32"), y=Tensor([8, 2048, 34, 42],"float32"), )
paddle.add(x=Tensor([8, 2048, 35, 32],"float16"), y=Tensor([8, 2048, 35, 32],"float16"), )
paddle.add(x=Tensor([8, 2048, 35, 32],"float32"), y=Tensor([8, 2048, 35, 32],"float32"), )
paddle.add(x=Tensor([8, 2048, 35, 34],"float16"), y=Tensor([8, 2048, 35, 34],"float16"), )
paddle.add(x=Tensor([8, 2048, 35, 34],"float32"), y=Tensor([8, 2048, 35, 34],"float32"), )
paddle.add(x=Tensor([8, 2048, 35, 35],"float16"), y=Tensor([8, 2048, 35, 35],"float16"), )
paddle.add(x=Tensor([8, 2048, 35, 35],"float32"), y=Tensor([8, 2048, 35, 35],"float32"), )
paddle.add(x=Tensor([8, 2048, 35, 36],"float16"), y=Tensor([8, 2048, 35, 36],"float16"), )
paddle.add(x=Tensor([8, 2048, 35, 36],"float32"), y=Tensor([8, 2048, 35, 36],"float32"), )
paddle.add(x=Tensor([8, 2048, 35, 37],"float16"), y=Tensor([8, 2048, 35, 37],"float16"), )
paddle.add(x=Tensor([8, 2048, 35, 37],"float32"), y=Tensor([8, 2048, 35, 37],"float32"), )
paddle.add(x=Tensor([8, 2048, 35, 38],"float16"), y=Tensor([8, 2048, 35, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 35, 38],"float32"), y=Tensor([8, 2048, 35, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 35, 39],"float16"), y=Tensor([8, 2048, 35, 39],"float16"), )
paddle.add(x=Tensor([8, 2048, 35, 39],"float32"), y=Tensor([8, 2048, 35, 39],"float32"), )
paddle.add(x=Tensor([8, 2048, 35, 41],"float16"), y=Tensor([8, 2048, 35, 41],"float16"), )
paddle.add(x=Tensor([8, 2048, 35, 41],"float32"), y=Tensor([8, 2048, 35, 41],"float32"), )
paddle.add(x=Tensor([8, 2048, 35, 42],"float16"), y=Tensor([8, 2048, 35, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 35, 42],"float32"), y=Tensor([8, 2048, 35, 42],"float32"), )
paddle.add(x=Tensor([8, 2048, 36, 32],"float16"), y=Tensor([8, 2048, 36, 32],"float16"), )
paddle.add(x=Tensor([8, 2048, 36, 32],"float32"), y=Tensor([8, 2048, 36, 32],"float32"), )
paddle.add(x=Tensor([8, 2048, 36, 34],"float16"), y=Tensor([8, 2048, 36, 34],"float16"), )
paddle.add(x=Tensor([8, 2048, 36, 34],"float32"), y=Tensor([8, 2048, 36, 34],"float32"), )
paddle.add(x=Tensor([8, 2048, 36, 35],"float16"), y=Tensor([8, 2048, 36, 35],"float16"), )
paddle.add(x=Tensor([8, 2048, 36, 35],"float32"), y=Tensor([8, 2048, 36, 35],"float32"), )
paddle.add(x=Tensor([8, 2048, 36, 36],"float16"), y=Tensor([8, 2048, 36, 36],"float16"), )
paddle.add(x=Tensor([8, 2048, 36, 36],"float32"), y=Tensor([8, 2048, 36, 36],"float32"), )
paddle.add(x=Tensor([8, 2048, 36, 37],"float16"), y=Tensor([8, 2048, 36, 37],"float16"), )
paddle.add(x=Tensor([8, 2048, 36, 37],"float32"), y=Tensor([8, 2048, 36, 37],"float32"), )
paddle.add(x=Tensor([8, 2048, 36, 38],"float16"), y=Tensor([8, 2048, 36, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 36, 38],"float32"), y=Tensor([8, 2048, 36, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 36, 39],"float16"), y=Tensor([8, 2048, 36, 39],"float16"), )
paddle.add(x=Tensor([8, 2048, 36, 40],"float16"), y=Tensor([8, 2048, 36, 40],"float16"), )
paddle.add(x=Tensor([8, 2048, 36, 40],"float32"), y=Tensor([8, 2048, 36, 40],"float32"), )
paddle.add(x=Tensor([8, 2048, 36, 41],"float16"), y=Tensor([8, 2048, 36, 41],"float16"), )
paddle.add(x=Tensor([8, 2048, 36, 41],"float32"), y=Tensor([8, 2048, 36, 41],"float32"), )
paddle.add(x=Tensor([8, 2048, 36, 42],"float16"), y=Tensor([8, 2048, 36, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 36, 42],"float32"), y=Tensor([8, 2048, 36, 42],"float32"), )
paddle.add(x=Tensor([8, 2048, 36, 44],"float16"), y=Tensor([8, 2048, 36, 44],"float16"), )
paddle.add(x=Tensor([8, 2048, 36, 44],"float32"), y=Tensor([8, 2048, 36, 44],"float32"), )
paddle.add(x=Tensor([8, 2048, 37, 33],"float16"), y=Tensor([8, 2048, 37, 33],"float16"), )
paddle.add(x=Tensor([8, 2048, 37, 33],"float32"), y=Tensor([8, 2048, 37, 33],"float32"), )
paddle.add(x=Tensor([8, 2048, 37, 34],"float16"), y=Tensor([8, 2048, 37, 34],"float16"), )
paddle.add(x=Tensor([8, 2048, 37, 34],"float32"), y=Tensor([8, 2048, 37, 34],"float32"), )
paddle.add(x=Tensor([8, 2048, 37, 35],"float16"), y=Tensor([8, 2048, 37, 35],"float16"), )
paddle.add(x=Tensor([8, 2048, 37, 35],"float32"), y=Tensor([8, 2048, 37, 35],"float32"), )
paddle.add(x=Tensor([8, 2048, 37, 36],"float16"), y=Tensor([8, 2048, 37, 36],"float16"), )
paddle.add(x=Tensor([8, 2048, 37, 36],"float32"), y=Tensor([8, 2048, 37, 36],"float32"), )
paddle.add(x=Tensor([8, 2048, 37, 37],"float16"), y=Tensor([8, 2048, 37, 37],"float16"), )
paddle.add(x=Tensor([8, 2048, 37, 37],"float32"), y=Tensor([8, 2048, 37, 37],"float32"), )
paddle.add(x=Tensor([8, 2048, 37, 38],"float16"), y=Tensor([8, 2048, 37, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 37, 38],"float32"), y=Tensor([8, 2048, 37, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 37, 39],"float16"), y=Tensor([8, 2048, 37, 39],"float16"), )
paddle.add(x=Tensor([8, 2048, 37, 39],"float32"), y=Tensor([8, 2048, 37, 39],"float32"), )
paddle.add(x=Tensor([8, 2048, 37, 40],"float16"), y=Tensor([8, 2048, 37, 40],"float16"), )
paddle.add(x=Tensor([8, 2048, 37, 40],"float32"), y=Tensor([8, 2048, 37, 40],"float32"), )
paddle.add(x=Tensor([8, 2048, 37, 41],"float16"), y=Tensor([8, 2048, 37, 41],"float16"), )
paddle.add(x=Tensor([8, 2048, 37, 41],"float32"), y=Tensor([8, 2048, 37, 41],"float32"), )
paddle.add(x=Tensor([8, 2048, 37, 42],"float16"), y=Tensor([8, 2048, 37, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 37, 42],"float32"), y=Tensor([8, 2048, 37, 42],"float32"), )
paddle.add(x=Tensor([8, 2048, 38, 30],"float16"), y=Tensor([8, 2048, 38, 30],"float16"), )
paddle.add(x=Tensor([8, 2048, 38, 31],"float16"), y=Tensor([8, 2048, 38, 31],"float16"), )
paddle.add(x=Tensor([8, 2048, 38, 31],"float32"), y=Tensor([8, 2048, 38, 31],"float32"), )
paddle.add(x=Tensor([8, 2048, 38, 32],"float16"), y=Tensor([8, 2048, 38, 32],"float16"), )
paddle.add(x=Tensor([8, 2048, 38, 32],"float32"), y=Tensor([8, 2048, 38, 32],"float32"), )
paddle.add(x=Tensor([8, 2048, 38, 34],"float16"), y=Tensor([8, 2048, 38, 34],"float16"), )
paddle.add(x=Tensor([8, 2048, 38, 34],"float32"), y=Tensor([8, 2048, 38, 34],"float32"), )
paddle.add(x=Tensor([8, 2048, 38, 35],"float16"), y=Tensor([8, 2048, 38, 35],"float16"), )
paddle.add(x=Tensor([8, 2048, 38, 35],"float32"), y=Tensor([8, 2048, 38, 35],"float32"), )
paddle.add(x=Tensor([8, 2048, 38, 36],"float16"), y=Tensor([8, 2048, 38, 36],"float16"), )
paddle.add(x=Tensor([8, 2048, 38, 36],"float32"), y=Tensor([8, 2048, 38, 36],"float32"), )
paddle.add(x=Tensor([8, 2048, 38, 37],"float16"), y=Tensor([8, 2048, 38, 37],"float16"), )
paddle.add(x=Tensor([8, 2048, 38, 37],"float32"), y=Tensor([8, 2048, 38, 37],"float32"), )
paddle.add(x=Tensor([8, 2048, 38, 38],"float16"), y=Tensor([8, 2048, 38, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 38, 38],"float32"), y=Tensor([8, 2048, 38, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 38, 39],"float16"), y=Tensor([8, 2048, 38, 39],"float16"), )
paddle.add(x=Tensor([8, 2048, 38, 39],"float32"), y=Tensor([8, 2048, 38, 39],"float32"), )
paddle.add(x=Tensor([8, 2048, 38, 40],"float16"), y=Tensor([8, 2048, 38, 40],"float16"), )
paddle.add(x=Tensor([8, 2048, 38, 40],"float32"), y=Tensor([8, 2048, 38, 40],"float32"), )
paddle.add(x=Tensor([8, 2048, 38, 41],"float16"), y=Tensor([8, 2048, 38, 41],"float16"), )
paddle.add(x=Tensor([8, 2048, 38, 41],"float32"), y=Tensor([8, 2048, 38, 41],"float32"), )
paddle.add(x=Tensor([8, 2048, 38, 42],"float16"), y=Tensor([8, 2048, 38, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 38, 42],"float32"), y=Tensor([8, 2048, 38, 42],"float32"), )
paddle.add(x=Tensor([8, 2048, 39, 34],"float16"), y=Tensor([8, 2048, 39, 34],"float16"), )
paddle.add(x=Tensor([8, 2048, 39, 34],"float32"), y=Tensor([8, 2048, 39, 34],"float32"), )
paddle.add(x=Tensor([8, 2048, 39, 35],"float16"), y=Tensor([8, 2048, 39, 35],"float16"), )
paddle.add(x=Tensor([8, 2048, 39, 37],"float16"), y=Tensor([8, 2048, 39, 37],"float16"), )
paddle.add(x=Tensor([8, 2048, 39, 37],"float32"), y=Tensor([8, 2048, 39, 37],"float32"), )
paddle.add(x=Tensor([8, 2048, 39, 38],"float16"), y=Tensor([8, 2048, 39, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 39, 38],"float32"), y=Tensor([8, 2048, 39, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 39, 42],"float16"), y=Tensor([8, 2048, 39, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 39, 42],"float32"), y=Tensor([8, 2048, 39, 42],"float32"), )
paddle.add(x=Tensor([8, 2048, 4, 7, 7],"float32"), y=Tensor([8, 2048, 4, 7, 7],"float32"), )
paddle.add(x=Tensor([8, 2048, 40, 36],"float16"), y=Tensor([8, 2048, 40, 36],"float16"), )
paddle.add(x=Tensor([8, 2048, 40, 36],"float32"), y=Tensor([8, 2048, 40, 36],"float32"), )
paddle.add(x=Tensor([8, 2048, 40, 38],"float16"), y=Tensor([8, 2048, 40, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 40, 38],"float32"), y=Tensor([8, 2048, 40, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 40, 40],"float16"), y=Tensor([8, 2048, 40, 40],"float16"), )
paddle.add(x=Tensor([8, 2048, 40, 40],"float32"), y=Tensor([8, 2048, 40, 40],"float32"), )
paddle.add(x=Tensor([8, 2048, 40, 42],"float16"), y=Tensor([8, 2048, 40, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 40, 42],"float32"), y=Tensor([8, 2048, 40, 42],"float32"), )
paddle.add(x=Tensor([8, 2048, 40, 44],"float16"), y=Tensor([8, 2048, 40, 44],"float16"), )
paddle.add(x=Tensor([8, 2048, 40, 44],"float32"), y=Tensor([8, 2048, 40, 44],"float32"), )
paddle.add(x=Tensor([8, 2048, 41, 34],"float16"), y=Tensor([8, 2048, 41, 34],"float16"), )
paddle.add(x=Tensor([8, 2048, 41, 36],"float16"), y=Tensor([8, 2048, 41, 36],"float16"), )
paddle.add(x=Tensor([8, 2048, 41, 38],"float16"), y=Tensor([8, 2048, 41, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 41, 38],"float32"), y=Tensor([8, 2048, 41, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 41, 39],"float16"), y=Tensor([8, 2048, 41, 39],"float16"), )
paddle.add(x=Tensor([8, 2048, 41, 42],"float16"), y=Tensor([8, 2048, 41, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 41, 42],"float32"), y=Tensor([8, 2048, 41, 42],"float32"), )
paddle.add(x=Tensor([8, 2048, 42, 32],"float16"), y=Tensor([8, 2048, 42, 32],"float16"), )
paddle.add(x=Tensor([8, 2048, 42, 32],"float32"), y=Tensor([8, 2048, 42, 32],"float32"), )
paddle.add(x=Tensor([8, 2048, 42, 33],"float16"), y=Tensor([8, 2048, 42, 33],"float16"), )
paddle.add(x=Tensor([8, 2048, 42, 33],"float32"), y=Tensor([8, 2048, 42, 33],"float32"), )
paddle.add(x=Tensor([8, 2048, 42, 34],"float16"), y=Tensor([8, 2048, 42, 34],"float16"), )
paddle.add(x=Tensor([8, 2048, 42, 34],"float32"), y=Tensor([8, 2048, 42, 34],"float32"), )
paddle.add(x=Tensor([8, 2048, 42, 36],"float16"), y=Tensor([8, 2048, 42, 36],"float16"), )
paddle.add(x=Tensor([8, 2048, 42, 36],"float32"), y=Tensor([8, 2048, 42, 36],"float32"), )
paddle.add(x=Tensor([8, 2048, 42, 37],"float16"), y=Tensor([8, 2048, 42, 37],"float16"), )
paddle.add(x=Tensor([8, 2048, 42, 38],"float16"), y=Tensor([8, 2048, 42, 38],"float16"), )
paddle.add(x=Tensor([8, 2048, 42, 38],"float32"), y=Tensor([8, 2048, 42, 38],"float32"), )
paddle.add(x=Tensor([8, 2048, 42, 40],"float16"), y=Tensor([8, 2048, 42, 40],"float16"), )
paddle.add(x=Tensor([8, 2048, 42, 40],"float32"), y=Tensor([8, 2048, 42, 40],"float32"), )
paddle.add(x=Tensor([8, 2048, 42, 42],"float16"), y=Tensor([8, 2048, 42, 42],"float16"), )
paddle.add(x=Tensor([8, 2048, 42, 42],"float32"), y=Tensor([8, 2048, 42, 42],"float32"), )
paddle.add(x=Tensor([8, 2048, 44, 36],"float16"), y=Tensor([8, 2048, 44, 36],"float16"), )
paddle.add(x=Tensor([8, 2048, 44, 36],"float32"), y=Tensor([8, 2048, 44, 36],"float32"), )
paddle.add(x=Tensor([8, 2048, 44, 40],"float16"), y=Tensor([8, 2048, 44, 40],"float16"), )
paddle.add(x=Tensor([8, 2048, 44, 40],"float32"), y=Tensor([8, 2048, 44, 40],"float32"), )
paddle.add(x=Tensor([8, 2048, 44, 44],"float16"), y=Tensor([8, 2048, 44, 44],"float16"), )
paddle.add(x=Tensor([8, 2048, 44, 44],"float32"), y=Tensor([8, 2048, 44, 44],"float32"), )
paddle.add(x=Tensor([8, 2048, 7, 7],"float16"), y=Tensor([8, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([8, 2048, 7, 7],"float32"), y=Tensor([8, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([8, 256, 104, 104],"float32"), y=Tensor([8, 256, 104, 104],"float32"), )
paddle.add(x=Tensor([8, 256, 120, 120],"float32"), y=Tensor([8, 256, 120, 120],"float32"), )
paddle.add(x=Tensor([8, 256, 128, 128],"float16"), y=Tensor([8, 256, 128, 128],"float16"), )
paddle.add(x=Tensor([8, 256, 128, 128],"float32"), y=Tensor([8, 256, 128, 128],"float32"), )
paddle.add(x=Tensor([8, 256, 136, 136],"float32"), y=Tensor([8, 256, 136, 136],"float32"), )
paddle.add(x=Tensor([8, 256, 144, 144],"float32"), y=Tensor([8, 256, 144, 144],"float32"), )
paddle.add(x=Tensor([8, 256, 160, 160],"float16"), y=Tensor([8, 256, 160, 160],"float16"), )
paddle.add(x=Tensor([8, 256, 160, 160],"float32"), y=Tensor([8, 256, 160, 160],"float32"), )
paddle.add(x=Tensor([8, 256, 184, 264],"float16"), y=Tensor([8, 256, 184, 264],"float16"), )
paddle.add(x=Tensor([8, 256, 184, 272],"float16"), y=Tensor([8, 256, 184, 272],"float16"), )
paddle.add(x=Tensor([8, 256, 184, 272],"float32"), y=Tensor([8, 256, 184, 272],"float32"), )
paddle.add(x=Tensor([8, 256, 192, 280],"float16"), y=Tensor([8, 256, 192, 280],"float16"), )
paddle.add(x=Tensor([8, 256, 192, 288],"float16"), y=Tensor([8, 256, 192, 288],"float16"), )
paddle.add(x=Tensor([8, 256, 192, 288],"float32"), y=Tensor([8, 256, 192, 288],"float32"), )
paddle.add(x=Tensor([8, 256, 192, 296],"float16"), y=Tensor([8, 256, 192, 296],"float16"), )
paddle.add(x=Tensor([8, 256, 192, 296],"float32"), y=Tensor([8, 256, 192, 296],"float32"), )
paddle.add(x=Tensor([8, 256, 200, 272],"float16"), y=Tensor([8, 256, 200, 272],"float16"), )
paddle.add(x=Tensor([8, 256, 200, 272],"float32"), y=Tensor([8, 256, 200, 272],"float32"), )
paddle.add(x=Tensor([8, 256, 200, 280],"float16"), y=Tensor([8, 256, 200, 280],"float16"), )
paddle.add(x=Tensor([8, 256, 200, 280],"float32"), y=Tensor([8, 256, 200, 280],"float32"), )
paddle.add(x=Tensor([8, 256, 200, 288],"float16"), y=Tensor([8, 256, 200, 288],"float16"), )
paddle.add(x=Tensor([8, 256, 200, 288],"float32"), y=Tensor([8, 256, 200, 288],"float32"), )
paddle.add(x=Tensor([8, 256, 200, 296],"float16"), y=Tensor([8, 256, 200, 296],"float16"), )
paddle.add(x=Tensor([8, 256, 200, 296],"float32"), y=Tensor([8, 256, 200, 296],"float32"), )
paddle.add(x=Tensor([8, 256, 200, 304],"float16"), y=Tensor([8, 256, 200, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 200, 304],"float32"), y=Tensor([8, 256, 200, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 200, 312],"float16"), y=Tensor([8, 256, 200, 312],"float16"), )
paddle.add(x=Tensor([8, 256, 200, 320],"float16"), y=Tensor([8, 256, 200, 320],"float16"), )
paddle.add(x=Tensor([8, 256, 200, 328],"float16"), y=Tensor([8, 256, 200, 328],"float16"), )
paddle.add(x=Tensor([8, 256, 200, 328],"float32"), y=Tensor([8, 256, 200, 328],"float32"), )
paddle.add(x=Tensor([8, 256, 200, 336],"float16"), y=Tensor([8, 256, 200, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 200, 336],"float32"), y=Tensor([8, 256, 200, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 208, 304],"float16"), y=Tensor([8, 256, 208, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 208, 304],"float32"), y=Tensor([8, 256, 208, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 208, 328],"float16"), y=Tensor([8, 256, 208, 328],"float16"), )
paddle.add(x=Tensor([8, 256, 208, 328],"float32"), y=Tensor([8, 256, 208, 328],"float32"), )
paddle.add(x=Tensor([8, 256, 208, 336],"float16"), y=Tensor([8, 256, 208, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 208, 336],"float32"), y=Tensor([8, 256, 208, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 216, 272],"float16"), y=Tensor([8, 256, 216, 272],"float16"), )
paddle.add(x=Tensor([8, 256, 216, 288],"float16"), y=Tensor([8, 256, 216, 288],"float16"), )
paddle.add(x=Tensor([8, 256, 216, 304],"float16"), y=Tensor([8, 256, 216, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 216, 304],"float32"), y=Tensor([8, 256, 216, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 216, 312],"float16"), y=Tensor([8, 256, 216, 312],"float16"), )
paddle.add(x=Tensor([8, 256, 216, 328],"float16"), y=Tensor([8, 256, 216, 328],"float16"), )
paddle.add(x=Tensor([8, 256, 216, 328],"float32"), y=Tensor([8, 256, 216, 328],"float32"), )
paddle.add(x=Tensor([8, 256, 216, 336],"float16"), y=Tensor([8, 256, 216, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 216, 336],"float32"), y=Tensor([8, 256, 216, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 224, 256],"float16"), y=Tensor([8, 256, 224, 256],"float16"), )
paddle.add(x=Tensor([8, 256, 224, 272],"float16"), y=Tensor([8, 256, 224, 272],"float16"), )
paddle.add(x=Tensor([8, 256, 224, 272],"float32"), y=Tensor([8, 256, 224, 272],"float32"), )
paddle.add(x=Tensor([8, 256, 224, 280],"float16"), y=Tensor([8, 256, 224, 280],"float16"), )
paddle.add(x=Tensor([8, 256, 224, 280],"float32"), y=Tensor([8, 256, 224, 280],"float32"), )
paddle.add(x=Tensor([8, 256, 224, 288],"float16"), y=Tensor([8, 256, 224, 288],"float16"), )
paddle.add(x=Tensor([8, 256, 224, 296],"float16"), y=Tensor([8, 256, 224, 296],"float16"), )
paddle.add(x=Tensor([8, 256, 224, 296],"float32"), y=Tensor([8, 256, 224, 296],"float32"), )
paddle.add(x=Tensor([8, 256, 224, 304],"float16"), y=Tensor([8, 256, 224, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 224, 304],"float32"), y=Tensor([8, 256, 224, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 224, 312],"float16"), y=Tensor([8, 256, 224, 312],"float16"), )
paddle.add(x=Tensor([8, 256, 224, 312],"float32"), y=Tensor([8, 256, 224, 312],"float32"), )
paddle.add(x=Tensor([8, 256, 224, 320],"float16"), y=Tensor([8, 256, 224, 320],"float16"), )
paddle.add(x=Tensor([8, 256, 224, 320],"float32"), y=Tensor([8, 256, 224, 320],"float32"), )
paddle.add(x=Tensor([8, 256, 224, 352],"float16"), y=Tensor([8, 256, 224, 352],"float16"), )
paddle.add(x=Tensor([8, 256, 224, 352],"float32"), y=Tensor([8, 256, 224, 352],"float32"), )
paddle.add(x=Tensor([8, 256, 232, 248],"float16"), y=Tensor([8, 256, 232, 248],"float16"), )
paddle.add(x=Tensor([8, 256, 232, 248],"float32"), y=Tensor([8, 256, 232, 248],"float32"), )
paddle.add(x=Tensor([8, 256, 232, 304],"float16"), y=Tensor([8, 256, 232, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 232, 336],"float16"), y=Tensor([8, 256, 232, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 240, 240],"float32"), y=Tensor([8, 256, 240, 240],"float32"), )
paddle.add(x=Tensor([8, 256, 240, 272],"float16"), y=Tensor([8, 256, 240, 272],"float16"), )
paddle.add(x=Tensor([8, 256, 240, 272],"float32"), y=Tensor([8, 256, 240, 272],"float32"), )
paddle.add(x=Tensor([8, 256, 240, 280],"float16"), y=Tensor([8, 256, 240, 280],"float16"), )
paddle.add(x=Tensor([8, 256, 240, 280],"float32"), y=Tensor([8, 256, 240, 280],"float32"), )
paddle.add(x=Tensor([8, 256, 240, 288],"float16"), y=Tensor([8, 256, 240, 288],"float16"), )
paddle.add(x=Tensor([8, 256, 240, 288],"float32"), y=Tensor([8, 256, 240, 288],"float32"), )
paddle.add(x=Tensor([8, 256, 240, 296],"float16"), y=Tensor([8, 256, 240, 296],"float16"), )
paddle.add(x=Tensor([8, 256, 240, 296],"float32"), y=Tensor([8, 256, 240, 296],"float32"), )
paddle.add(x=Tensor([8, 256, 240, 304],"float16"), y=Tensor([8, 256, 240, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 240, 304],"float32"), y=Tensor([8, 256, 240, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 240, 312],"float16"), y=Tensor([8, 256, 240, 312],"float16"), )
paddle.add(x=Tensor([8, 256, 240, 320],"float16"), y=Tensor([8, 256, 240, 320],"float16"), )
paddle.add(x=Tensor([8, 256, 240, 320],"float32"), y=Tensor([8, 256, 240, 320],"float32"), )
paddle.add(x=Tensor([8, 256, 240, 336],"float16"), y=Tensor([8, 256, 240, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 240, 336],"float32"), y=Tensor([8, 256, 240, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 248, 256],"float16"), y=Tensor([8, 256, 248, 256],"float16"), )
paddle.add(x=Tensor([8, 256, 248, 256],"float32"), y=Tensor([8, 256, 248, 256],"float32"), )
paddle.add(x=Tensor([8, 256, 248, 272],"float16"), y=Tensor([8, 256, 248, 272],"float16"), )
paddle.add(x=Tensor([8, 256, 248, 272],"float32"), y=Tensor([8, 256, 248, 272],"float32"), )
paddle.add(x=Tensor([8, 256, 248, 280],"float16"), y=Tensor([8, 256, 248, 280],"float16"), )
paddle.add(x=Tensor([8, 256, 248, 280],"float32"), y=Tensor([8, 256, 248, 280],"float32"), )
paddle.add(x=Tensor([8, 256, 248, 288],"float16"), y=Tensor([8, 256, 248, 288],"float16"), )
paddle.add(x=Tensor([8, 256, 248, 288],"float32"), y=Tensor([8, 256, 248, 288],"float32"), )
paddle.add(x=Tensor([8, 256, 248, 296],"float16"), y=Tensor([8, 256, 248, 296],"float16"), )
paddle.add(x=Tensor([8, 256, 248, 296],"float32"), y=Tensor([8, 256, 248, 296],"float32"), )
paddle.add(x=Tensor([8, 256, 248, 304],"float16"), y=Tensor([8, 256, 248, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 248, 304],"float32"), y=Tensor([8, 256, 248, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 248, 320],"float16"), y=Tensor([8, 256, 248, 320],"float16"), )
paddle.add(x=Tensor([8, 256, 248, 320],"float32"), y=Tensor([8, 256, 248, 320],"float32"), )
paddle.add(x=Tensor([8, 256, 248, 328],"float16"), y=Tensor([8, 256, 248, 328],"float16"), )
paddle.add(x=Tensor([8, 256, 248, 328],"float32"), y=Tensor([8, 256, 248, 328],"float32"), )
paddle.add(x=Tensor([8, 256, 248, 336],"float16"), y=Tensor([8, 256, 248, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 248, 336],"float32"), y=Tensor([8, 256, 248, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 256, 248],"float16"), y=Tensor([8, 256, 256, 248],"float16"), )
paddle.add(x=Tensor([8, 256, 256, 248],"float32"), y=Tensor([8, 256, 256, 248],"float32"), )
paddle.add(x=Tensor([8, 256, 256, 256],"float16"), y=Tensor([8, 256, 256, 256],"float16"), )
paddle.add(x=Tensor([8, 256, 256, 256],"float32"), y=Tensor([8, 256, 256, 256],"float32"), )
paddle.add(x=Tensor([8, 256, 256, 272],"float16"), y=Tensor([8, 256, 256, 272],"float16"), )
paddle.add(x=Tensor([8, 256, 256, 272],"float32"), y=Tensor([8, 256, 256, 272],"float32"), )
paddle.add(x=Tensor([8, 256, 256, 280],"float16"), y=Tensor([8, 256, 256, 280],"float16"), )
paddle.add(x=Tensor([8, 256, 256, 280],"float32"), y=Tensor([8, 256, 256, 280],"float32"), )
paddle.add(x=Tensor([8, 256, 256, 288],"float16"), y=Tensor([8, 256, 256, 288],"float16"), )
paddle.add(x=Tensor([8, 256, 256, 288],"float32"), y=Tensor([8, 256, 256, 288],"float32"), )
paddle.add(x=Tensor([8, 256, 256, 296],"float16"), y=Tensor([8, 256, 256, 296],"float16"), )
paddle.add(x=Tensor([8, 256, 256, 296],"float32"), y=Tensor([8, 256, 256, 296],"float32"), )
paddle.add(x=Tensor([8, 256, 256, 304],"float16"), y=Tensor([8, 256, 256, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 256, 304],"float32"), y=Tensor([8, 256, 256, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 256, 312],"float16"), y=Tensor([8, 256, 256, 312],"float16"), )
paddle.add(x=Tensor([8, 256, 256, 312],"float32"), y=Tensor([8, 256, 256, 312],"float32"), )
paddle.add(x=Tensor([8, 256, 256, 320],"float16"), y=Tensor([8, 256, 256, 320],"float16"), )
paddle.add(x=Tensor([8, 256, 256, 320],"float32"), y=Tensor([8, 256, 256, 320],"float32"), )
paddle.add(x=Tensor([8, 256, 256, 328],"float16"), y=Tensor([8, 256, 256, 328],"float16"), )
paddle.add(x=Tensor([8, 256, 256, 328],"float32"), y=Tensor([8, 256, 256, 328],"float32"), )
paddle.add(x=Tensor([8, 256, 256, 336],"float16"), y=Tensor([8, 256, 256, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 256, 336],"float32"), y=Tensor([8, 256, 256, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 256, 352],"float16"), y=Tensor([8, 256, 256, 352],"float16"), )
paddle.add(x=Tensor([8, 256, 256, 352],"float32"), y=Tensor([8, 256, 256, 352],"float32"), )
paddle.add(x=Tensor([8, 256, 264, 248],"float16"), y=Tensor([8, 256, 264, 248],"float16"), )
paddle.add(x=Tensor([8, 256, 264, 248],"float32"), y=Tensor([8, 256, 264, 248],"float32"), )
paddle.add(x=Tensor([8, 256, 264, 280],"float16"), y=Tensor([8, 256, 264, 280],"float16"), )
paddle.add(x=Tensor([8, 256, 264, 280],"float32"), y=Tensor([8, 256, 264, 280],"float32"), )
paddle.add(x=Tensor([8, 256, 264, 296],"float16"), y=Tensor([8, 256, 264, 296],"float16"), )
paddle.add(x=Tensor([8, 256, 264, 296],"float32"), y=Tensor([8, 256, 264, 296],"float32"), )
paddle.add(x=Tensor([8, 256, 264, 304],"float16"), y=Tensor([8, 256, 264, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 264, 304],"float32"), y=Tensor([8, 256, 264, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 264, 328],"float16"), y=Tensor([8, 256, 264, 328],"float16"), )
paddle.add(x=Tensor([8, 256, 264, 328],"float32"), y=Tensor([8, 256, 264, 328],"float32"), )
paddle.add(x=Tensor([8, 256, 264, 336],"float16"), y=Tensor([8, 256, 264, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 264, 336],"float32"), y=Tensor([8, 256, 264, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 272, 240],"float16"), y=Tensor([8, 256, 272, 240],"float16"), )
paddle.add(x=Tensor([8, 256, 272, 240],"float32"), y=Tensor([8, 256, 272, 240],"float32"), )
paddle.add(x=Tensor([8, 256, 272, 248],"float16"), y=Tensor([8, 256, 272, 248],"float16"), )
paddle.add(x=Tensor([8, 256, 272, 248],"float32"), y=Tensor([8, 256, 272, 248],"float32"), )
paddle.add(x=Tensor([8, 256, 272, 256],"float16"), y=Tensor([8, 256, 272, 256],"float16"), )
paddle.add(x=Tensor([8, 256, 272, 256],"float32"), y=Tensor([8, 256, 272, 256],"float32"), )
paddle.add(x=Tensor([8, 256, 272, 272],"float16"), y=Tensor([8, 256, 272, 272],"float16"), )
paddle.add(x=Tensor([8, 256, 272, 272],"float32"), y=Tensor([8, 256, 272, 272],"float32"), )
paddle.add(x=Tensor([8, 256, 272, 280],"float16"), y=Tensor([8, 256, 272, 280],"float16"), )
paddle.add(x=Tensor([8, 256, 272, 280],"float32"), y=Tensor([8, 256, 272, 280],"float32"), )
paddle.add(x=Tensor([8, 256, 272, 288],"float16"), y=Tensor([8, 256, 272, 288],"float16"), )
paddle.add(x=Tensor([8, 256, 272, 296],"float16"), y=Tensor([8, 256, 272, 296],"float16"), )
paddle.add(x=Tensor([8, 256, 272, 296],"float32"), y=Tensor([8, 256, 272, 296],"float32"), )
paddle.add(x=Tensor([8, 256, 272, 304],"float16"), y=Tensor([8, 256, 272, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 272, 304],"float32"), y=Tensor([8, 256, 272, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 272, 312],"float16"), y=Tensor([8, 256, 272, 312],"float16"), )
paddle.add(x=Tensor([8, 256, 272, 312],"float32"), y=Tensor([8, 256, 272, 312],"float32"), )
paddle.add(x=Tensor([8, 256, 272, 320],"float16"), y=Tensor([8, 256, 272, 320],"float16"), )
paddle.add(x=Tensor([8, 256, 272, 320],"float32"), y=Tensor([8, 256, 272, 320],"float32"), )
paddle.add(x=Tensor([8, 256, 272, 328],"float16"), y=Tensor([8, 256, 272, 328],"float16"), )
paddle.add(x=Tensor([8, 256, 272, 328],"float32"), y=Tensor([8, 256, 272, 328],"float32"), )
paddle.add(x=Tensor([8, 256, 272, 336],"float16"), y=Tensor([8, 256, 272, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 272, 336],"float32"), y=Tensor([8, 256, 272, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 280, 256],"float16"), y=Tensor([8, 256, 280, 256],"float16"), )
paddle.add(x=Tensor([8, 256, 280, 256],"float32"), y=Tensor([8, 256, 280, 256],"float32"), )
paddle.add(x=Tensor([8, 256, 280, 272],"float16"), y=Tensor([8, 256, 280, 272],"float16"), )
paddle.add(x=Tensor([8, 256, 280, 272],"float32"), y=Tensor([8, 256, 280, 272],"float32"), )
paddle.add(x=Tensor([8, 256, 280, 280],"float16"), y=Tensor([8, 256, 280, 280],"float16"), )
paddle.add(x=Tensor([8, 256, 280, 280],"float32"), y=Tensor([8, 256, 280, 280],"float32"), )
paddle.add(x=Tensor([8, 256, 280, 288],"float16"), y=Tensor([8, 256, 280, 288],"float16"), )
paddle.add(x=Tensor([8, 256, 280, 288],"float32"), y=Tensor([8, 256, 280, 288],"float32"), )
paddle.add(x=Tensor([8, 256, 280, 296],"float16"), y=Tensor([8, 256, 280, 296],"float16"), )
paddle.add(x=Tensor([8, 256, 280, 296],"float32"), y=Tensor([8, 256, 280, 296],"float32"), )
paddle.add(x=Tensor([8, 256, 280, 304],"float16"), y=Tensor([8, 256, 280, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 280, 304],"float32"), y=Tensor([8, 256, 280, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 280, 312],"float16"), y=Tensor([8, 256, 280, 312],"float16"), )
paddle.add(x=Tensor([8, 256, 280, 312],"float32"), y=Tensor([8, 256, 280, 312],"float32"), )
paddle.add(x=Tensor([8, 256, 280, 328],"float16"), y=Tensor([8, 256, 280, 328],"float16"), )
paddle.add(x=Tensor([8, 256, 280, 328],"float32"), y=Tensor([8, 256, 280, 328],"float32"), )
paddle.add(x=Tensor([8, 256, 280, 336],"float16"), y=Tensor([8, 256, 280, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 280, 336],"float32"), y=Tensor([8, 256, 280, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 288, 256],"float16"), y=Tensor([8, 256, 288, 256],"float16"), )
paddle.add(x=Tensor([8, 256, 288, 256],"float32"), y=Tensor([8, 256, 288, 256],"float32"), )
paddle.add(x=Tensor([8, 256, 288, 272],"float16"), y=Tensor([8, 256, 288, 272],"float16"), )
paddle.add(x=Tensor([8, 256, 288, 272],"float32"), y=Tensor([8, 256, 288, 272],"float32"), )
paddle.add(x=Tensor([8, 256, 288, 280],"float16"), y=Tensor([8, 256, 288, 280],"float16"), )
paddle.add(x=Tensor([8, 256, 288, 280],"float32"), y=Tensor([8, 256, 288, 280],"float32"), )
paddle.add(x=Tensor([8, 256, 288, 288],"float16"), y=Tensor([8, 256, 288, 288],"float16"), )
paddle.add(x=Tensor([8, 256, 288, 288],"float32"), y=Tensor([8, 256, 288, 288],"float32"), )
paddle.add(x=Tensor([8, 256, 288, 296],"float16"), y=Tensor([8, 256, 288, 296],"float16"), )
paddle.add(x=Tensor([8, 256, 288, 296],"float32"), y=Tensor([8, 256, 288, 296],"float32"), )
paddle.add(x=Tensor([8, 256, 288, 304],"float16"), y=Tensor([8, 256, 288, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 288, 304],"float32"), y=Tensor([8, 256, 288, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 288, 312],"float16"), y=Tensor([8, 256, 288, 312],"float16"), )
paddle.add(x=Tensor([8, 256, 288, 320],"float16"), y=Tensor([8, 256, 288, 320],"float16"), )
paddle.add(x=Tensor([8, 256, 288, 320],"float32"), y=Tensor([8, 256, 288, 320],"float32"), )
paddle.add(x=Tensor([8, 256, 288, 328],"float16"), y=Tensor([8, 256, 288, 328],"float16"), )
paddle.add(x=Tensor([8, 256, 288, 328],"float32"), y=Tensor([8, 256, 288, 328],"float32"), )
paddle.add(x=Tensor([8, 256, 288, 336],"float16"), y=Tensor([8, 256, 288, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 288, 336],"float32"), y=Tensor([8, 256, 288, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 288, 352],"float16"), y=Tensor([8, 256, 288, 352],"float16"), )
paddle.add(x=Tensor([8, 256, 288, 352],"float32"), y=Tensor([8, 256, 288, 352],"float32"), )
paddle.add(x=Tensor([8, 256, 296, 264],"float16"), y=Tensor([8, 256, 296, 264],"float16"), )
paddle.add(x=Tensor([8, 256, 296, 264],"float32"), y=Tensor([8, 256, 296, 264],"float32"), )
paddle.add(x=Tensor([8, 256, 296, 272],"float16"), y=Tensor([8, 256, 296, 272],"float16"), )
paddle.add(x=Tensor([8, 256, 296, 272],"float32"), y=Tensor([8, 256, 296, 272],"float32"), )
paddle.add(x=Tensor([8, 256, 296, 280],"float16"), y=Tensor([8, 256, 296, 280],"float16"), )
paddle.add(x=Tensor([8, 256, 296, 280],"float32"), y=Tensor([8, 256, 296, 280],"float32"), )
paddle.add(x=Tensor([8, 256, 296, 288],"float16"), y=Tensor([8, 256, 296, 288],"float16"), )
paddle.add(x=Tensor([8, 256, 296, 288],"float32"), y=Tensor([8, 256, 296, 288],"float32"), )
paddle.add(x=Tensor([8, 256, 296, 296],"float16"), y=Tensor([8, 256, 296, 296],"float16"), )
paddle.add(x=Tensor([8, 256, 296, 296],"float32"), y=Tensor([8, 256, 296, 296],"float32"), )
paddle.add(x=Tensor([8, 256, 296, 304],"float16"), y=Tensor([8, 256, 296, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 296, 304],"float32"), y=Tensor([8, 256, 296, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 296, 312],"float16"), y=Tensor([8, 256, 296, 312],"float16"), )
paddle.add(x=Tensor([8, 256, 296, 312],"float32"), y=Tensor([8, 256, 296, 312],"float32"), )
paddle.add(x=Tensor([8, 256, 296, 320],"float16"), y=Tensor([8, 256, 296, 320],"float16"), )
paddle.add(x=Tensor([8, 256, 296, 320],"float32"), y=Tensor([8, 256, 296, 320],"float32"), )
paddle.add(x=Tensor([8, 256, 296, 328],"float16"), y=Tensor([8, 256, 296, 328],"float16"), )
paddle.add(x=Tensor([8, 256, 296, 328],"float32"), y=Tensor([8, 256, 296, 328],"float32"), )
paddle.add(x=Tensor([8, 256, 296, 336],"float16"), y=Tensor([8, 256, 296, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 296, 336],"float32"), y=Tensor([8, 256, 296, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 304, 240],"float16"), y=Tensor([8, 256, 304, 240],"float16"), )
paddle.add(x=Tensor([8, 256, 304, 248],"float16"), y=Tensor([8, 256, 304, 248],"float16"), )
paddle.add(x=Tensor([8, 256, 304, 248],"float32"), y=Tensor([8, 256, 304, 248],"float32"), )
paddle.add(x=Tensor([8, 256, 304, 256],"float16"), y=Tensor([8, 256, 304, 256],"float16"), )
paddle.add(x=Tensor([8, 256, 304, 256],"float32"), y=Tensor([8, 256, 304, 256],"float32"), )
paddle.add(x=Tensor([8, 256, 304, 272],"float16"), y=Tensor([8, 256, 304, 272],"float16"), )
paddle.add(x=Tensor([8, 256, 304, 272],"float32"), y=Tensor([8, 256, 304, 272],"float32"), )
paddle.add(x=Tensor([8, 256, 304, 280],"float16"), y=Tensor([8, 256, 304, 280],"float16"), )
paddle.add(x=Tensor([8, 256, 304, 280],"float32"), y=Tensor([8, 256, 304, 280],"float32"), )
paddle.add(x=Tensor([8, 256, 304, 288],"float16"), y=Tensor([8, 256, 304, 288],"float16"), )
paddle.add(x=Tensor([8, 256, 304, 288],"float32"), y=Tensor([8, 256, 304, 288],"float32"), )
paddle.add(x=Tensor([8, 256, 304, 296],"float16"), y=Tensor([8, 256, 304, 296],"float16"), )
paddle.add(x=Tensor([8, 256, 304, 296],"float32"), y=Tensor([8, 256, 304, 296],"float32"), )
paddle.add(x=Tensor([8, 256, 304, 304],"float16"), y=Tensor([8, 256, 304, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 304, 304],"float32"), y=Tensor([8, 256, 304, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 304, 312],"float16"), y=Tensor([8, 256, 304, 312],"float16"), )
paddle.add(x=Tensor([8, 256, 304, 312],"float32"), y=Tensor([8, 256, 304, 312],"float32"), )
paddle.add(x=Tensor([8, 256, 304, 320],"float16"), y=Tensor([8, 256, 304, 320],"float16"), )
paddle.add(x=Tensor([8, 256, 304, 320],"float32"), y=Tensor([8, 256, 304, 320],"float32"), )
paddle.add(x=Tensor([8, 256, 304, 328],"float16"), y=Tensor([8, 256, 304, 328],"float16"), )
paddle.add(x=Tensor([8, 256, 304, 328],"float32"), y=Tensor([8, 256, 304, 328],"float32"), )
paddle.add(x=Tensor([8, 256, 304, 336],"float16"), y=Tensor([8, 256, 304, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 304, 336],"float32"), y=Tensor([8, 256, 304, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 312, 272],"float16"), y=Tensor([8, 256, 312, 272],"float16"), )
paddle.add(x=Tensor([8, 256, 312, 272],"float32"), y=Tensor([8, 256, 312, 272],"float32"), )
paddle.add(x=Tensor([8, 256, 312, 280],"float16"), y=Tensor([8, 256, 312, 280],"float16"), )
paddle.add(x=Tensor([8, 256, 312, 296],"float16"), y=Tensor([8, 256, 312, 296],"float16"), )
paddle.add(x=Tensor([8, 256, 312, 296],"float32"), y=Tensor([8, 256, 312, 296],"float32"), )
paddle.add(x=Tensor([8, 256, 312, 304],"float16"), y=Tensor([8, 256, 312, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 312, 304],"float32"), y=Tensor([8, 256, 312, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 312, 336],"float16"), y=Tensor([8, 256, 312, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 312, 336],"float32"), y=Tensor([8, 256, 312, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 32, 7, 7],"float32"), y=Tensor([8, 256, 32, 7, 7],"float32"), )
paddle.add(x=Tensor([8, 256, 320, 288],"float16"), y=Tensor([8, 256, 320, 288],"float16"), )
paddle.add(x=Tensor([8, 256, 320, 288],"float32"), y=Tensor([8, 256, 320, 288],"float32"), )
paddle.add(x=Tensor([8, 256, 320, 304],"float16"), y=Tensor([8, 256, 320, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 320, 304],"float32"), y=Tensor([8, 256, 320, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 320, 320],"float16"), y=Tensor([8, 256, 320, 320],"float16"), )
paddle.add(x=Tensor([8, 256, 320, 320],"float32"), y=Tensor([8, 256, 320, 320],"float32"), )
paddle.add(x=Tensor([8, 256, 320, 336],"float16"), y=Tensor([8, 256, 320, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 320, 336],"float32"), y=Tensor([8, 256, 320, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 320, 352],"float16"), y=Tensor([8, 256, 320, 352],"float16"), )
paddle.add(x=Tensor([8, 256, 320, 352],"float32"), y=Tensor([8, 256, 320, 352],"float32"), )
paddle.add(x=Tensor([8, 256, 328, 272],"float16"), y=Tensor([8, 256, 328, 272],"float16"), )
paddle.add(x=Tensor([8, 256, 328, 288],"float16"), y=Tensor([8, 256, 328, 288],"float16"), )
paddle.add(x=Tensor([8, 256, 328, 304],"float16"), y=Tensor([8, 256, 328, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 328, 304],"float32"), y=Tensor([8, 256, 328, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 328, 312],"float16"), y=Tensor([8, 256, 328, 312],"float16"), )
paddle.add(x=Tensor([8, 256, 328, 336],"float16"), y=Tensor([8, 256, 328, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 328, 336],"float32"), y=Tensor([8, 256, 328, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 336, 256],"float16"), y=Tensor([8, 256, 336, 256],"float16"), )
paddle.add(x=Tensor([8, 256, 336, 256],"float32"), y=Tensor([8, 256, 336, 256],"float32"), )
paddle.add(x=Tensor([8, 256, 336, 264],"float16"), y=Tensor([8, 256, 336, 264],"float16"), )
paddle.add(x=Tensor([8, 256, 336, 264],"float32"), y=Tensor([8, 256, 336, 264],"float32"), )
paddle.add(x=Tensor([8, 256, 336, 272],"float16"), y=Tensor([8, 256, 336, 272],"float16"), )
paddle.add(x=Tensor([8, 256, 336, 272],"float32"), y=Tensor([8, 256, 336, 272],"float32"), )
paddle.add(x=Tensor([8, 256, 336, 288],"float16"), y=Tensor([8, 256, 336, 288],"float16"), )
paddle.add(x=Tensor([8, 256, 336, 288],"float32"), y=Tensor([8, 256, 336, 288],"float32"), )
paddle.add(x=Tensor([8, 256, 336, 296],"float16"), y=Tensor([8, 256, 336, 296],"float16"), )
paddle.add(x=Tensor([8, 256, 336, 304],"float16"), y=Tensor([8, 256, 336, 304],"float16"), )
paddle.add(x=Tensor([8, 256, 336, 304],"float32"), y=Tensor([8, 256, 336, 304],"float32"), )
paddle.add(x=Tensor([8, 256, 336, 320],"float16"), y=Tensor([8, 256, 336, 320],"float16"), )
paddle.add(x=Tensor([8, 256, 336, 320],"float32"), y=Tensor([8, 256, 336, 320],"float32"), )
paddle.add(x=Tensor([8, 256, 336, 336],"float16"), y=Tensor([8, 256, 336, 336],"float16"), )
paddle.add(x=Tensor([8, 256, 336, 336],"float32"), y=Tensor([8, 256, 336, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 352, 288],"float16"), y=Tensor([8, 256, 352, 288],"float16"), )
paddle.add(x=Tensor([8, 256, 352, 288],"float32"), y=Tensor([8, 256, 352, 288],"float32"), )
paddle.add(x=Tensor([8, 256, 352, 320],"float16"), y=Tensor([8, 256, 352, 320],"float16"), )
paddle.add(x=Tensor([8, 256, 352, 320],"float32"), y=Tensor([8, 256, 352, 320],"float32"), )
paddle.add(x=Tensor([8, 256, 352, 352],"float16"), y=Tensor([8, 256, 352, 352],"float16"), )
paddle.add(x=Tensor([8, 256, 352, 352],"float32"), y=Tensor([8, 256, 352, 352],"float32"), )
paddle.add(x=Tensor([8, 256, 4, 56, 56],"float32"), y=Tensor([8, 256, 4, 56, 56],"float32"), )
paddle.add(x=Tensor([8, 256, 40, 40],"float16"), y=Tensor([8, 256, 40, 40],"float16"), )
paddle.add(x=Tensor([8, 256, 40, 40],"float32"), y=Tensor([8, 256, 40, 40],"float32"), )
paddle.add(x=Tensor([8, 256, 44, 44],"float16"), y=Tensor([8, 256, 44, 44],"float16"), )
paddle.add(x=Tensor([8, 256, 44, 44],"float32"), y=Tensor([8, 256, 44, 44],"float32"), )
paddle.add(x=Tensor([8, 256, 48, 48],"float16"), y=Tensor([8, 256, 48, 48],"float16"), )
paddle.add(x=Tensor([8, 256, 48, 48],"float32"), y=Tensor([8, 256, 48, 48],"float32"), )
paddle.add(x=Tensor([8, 256, 52, 52],"float16"), y=Tensor([8, 256, 52, 52],"float16"), )
paddle.add(x=Tensor([8, 256, 52, 52],"float32"), y=Tensor([8, 256, 52, 52],"float32"), )
paddle.add(x=Tensor([8, 256, 56, 56],"float16"), y=Tensor([8, 256, 56, 56],"float16"), )
paddle.add(x=Tensor([8, 256, 56, 56],"float32"), y=Tensor([8, 256, 56, 56],"float32"), )
paddle.add(x=Tensor([8, 256, 60, 60],"float16"), y=Tensor([8, 256, 60, 60],"float16"), )
paddle.add(x=Tensor([8, 256, 60, 60],"float32"), y=Tensor([8, 256, 60, 60],"float32"), )
paddle.add(x=Tensor([8, 256, 64, 64],"float16"), y=Tensor([8, 256, 64, 64],"float16"), )
paddle.add(x=Tensor([8, 256, 64, 64],"float32"), y=Tensor([8, 256, 64, 64],"float32"), )
paddle.add(x=Tensor([8, 256, 68, 68],"float16"), y=Tensor([8, 256, 68, 68],"float16"), )
paddle.add(x=Tensor([8, 256, 68, 68],"float32"), y=Tensor([8, 256, 68, 68],"float32"), )
paddle.add(x=Tensor([8, 256, 72, 72],"float16"), y=Tensor([8, 256, 72, 72],"float16"), )
paddle.add(x=Tensor([8, 256, 72, 72],"float32"), y=Tensor([8, 256, 72, 72],"float32"), )
paddle.add(x=Tensor([8, 256, 76, 76],"float16"), y=Tensor([8, 256, 76, 76],"float16"), )
paddle.add(x=Tensor([8, 256, 76, 76],"float32"), y=Tensor([8, 256, 76, 76],"float32"), )
paddle.add(x=Tensor([8, 32, 32, 56, 56],"float32"), y=Tensor([8, 32, 32, 56, 56],"float32"), )
paddle.add(x=Tensor([8, 512, 100, 136],"float16"), y=Tensor([8, 512, 100, 136],"float16"), )
paddle.add(x=Tensor([8, 512, 100, 136],"float32"), y=Tensor([8, 512, 100, 136],"float32"), )
paddle.add(x=Tensor([8, 512, 100, 140],"float16"), y=Tensor([8, 512, 100, 140],"float16"), )
paddle.add(x=Tensor([8, 512, 100, 140],"float32"), y=Tensor([8, 512, 100, 140],"float32"), )
paddle.add(x=Tensor([8, 512, 100, 144],"float16"), y=Tensor([8, 512, 100, 144],"float16"), )
paddle.add(x=Tensor([8, 512, 100, 144],"float32"), y=Tensor([8, 512, 100, 144],"float32"), )
paddle.add(x=Tensor([8, 512, 100, 148],"float16"), y=Tensor([8, 512, 100, 148],"float16"), )
paddle.add(x=Tensor([8, 512, 100, 148],"float32"), y=Tensor([8, 512, 100, 148],"float32"), )
paddle.add(x=Tensor([8, 512, 100, 152],"float16"), y=Tensor([8, 512, 100, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 100, 152],"float32"), y=Tensor([8, 512, 100, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 100, 156],"float16"), y=Tensor([8, 512, 100, 156],"float16"), )
paddle.add(x=Tensor([8, 512, 100, 160],"float16"), y=Tensor([8, 512, 100, 160],"float16"), )
paddle.add(x=Tensor([8, 512, 100, 164],"float16"), y=Tensor([8, 512, 100, 164],"float16"), )
paddle.add(x=Tensor([8, 512, 100, 164],"float32"), y=Tensor([8, 512, 100, 164],"float32"), )
paddle.add(x=Tensor([8, 512, 100, 168],"float16"), y=Tensor([8, 512, 100, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 100, 168],"float32"), y=Tensor([8, 512, 100, 168],"float32"), )
paddle.add(x=Tensor([8, 512, 104, 152],"float16"), y=Tensor([8, 512, 104, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 104, 152],"float32"), y=Tensor([8, 512, 104, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 104, 164],"float16"), y=Tensor([8, 512, 104, 164],"float16"), )
paddle.add(x=Tensor([8, 512, 104, 164],"float32"), y=Tensor([8, 512, 104, 164],"float32"), )
paddle.add(x=Tensor([8, 512, 104, 168],"float16"), y=Tensor([8, 512, 104, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 104, 168],"float32"), y=Tensor([8, 512, 104, 168],"float32"), )
paddle.add(x=Tensor([8, 512, 108, 136],"float16"), y=Tensor([8, 512, 108, 136],"float16"), )
paddle.add(x=Tensor([8, 512, 108, 144],"float16"), y=Tensor([8, 512, 108, 144],"float16"), )
paddle.add(x=Tensor([8, 512, 108, 152],"float16"), y=Tensor([8, 512, 108, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 108, 152],"float32"), y=Tensor([8, 512, 108, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 108, 156],"float16"), y=Tensor([8, 512, 108, 156],"float16"), )
paddle.add(x=Tensor([8, 512, 108, 164],"float16"), y=Tensor([8, 512, 108, 164],"float16"), )
paddle.add(x=Tensor([8, 512, 108, 164],"float32"), y=Tensor([8, 512, 108, 164],"float32"), )
paddle.add(x=Tensor([8, 512, 108, 168],"float16"), y=Tensor([8, 512, 108, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 108, 168],"float32"), y=Tensor([8, 512, 108, 168],"float32"), )
paddle.add(x=Tensor([8, 512, 112, 128],"float16"), y=Tensor([8, 512, 112, 128],"float16"), )
paddle.add(x=Tensor([8, 512, 112, 136],"float16"), y=Tensor([8, 512, 112, 136],"float16"), )
paddle.add(x=Tensor([8, 512, 112, 136],"float32"), y=Tensor([8, 512, 112, 136],"float32"), )
paddle.add(x=Tensor([8, 512, 112, 140],"float16"), y=Tensor([8, 512, 112, 140],"float16"), )
paddle.add(x=Tensor([8, 512, 112, 140],"float32"), y=Tensor([8, 512, 112, 140],"float32"), )
paddle.add(x=Tensor([8, 512, 112, 144],"float16"), y=Tensor([8, 512, 112, 144],"float16"), )
paddle.add(x=Tensor([8, 512, 112, 148],"float16"), y=Tensor([8, 512, 112, 148],"float16"), )
paddle.add(x=Tensor([8, 512, 112, 148],"float32"), y=Tensor([8, 512, 112, 148],"float32"), )
paddle.add(x=Tensor([8, 512, 112, 152],"float16"), y=Tensor([8, 512, 112, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 112, 152],"float32"), y=Tensor([8, 512, 112, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 112, 156],"float16"), y=Tensor([8, 512, 112, 156],"float16"), )
paddle.add(x=Tensor([8, 512, 112, 156],"float32"), y=Tensor([8, 512, 112, 156],"float32"), )
paddle.add(x=Tensor([8, 512, 112, 160],"float16"), y=Tensor([8, 512, 112, 160],"float16"), )
paddle.add(x=Tensor([8, 512, 112, 160],"float32"), y=Tensor([8, 512, 112, 160],"float32"), )
paddle.add(x=Tensor([8, 512, 112, 176],"float16"), y=Tensor([8, 512, 112, 176],"float16"), )
paddle.add(x=Tensor([8, 512, 112, 176],"float32"), y=Tensor([8, 512, 112, 176],"float32"), )
paddle.add(x=Tensor([8, 512, 116, 124],"float16"), y=Tensor([8, 512, 116, 124],"float16"), )
paddle.add(x=Tensor([8, 512, 116, 124],"float32"), y=Tensor([8, 512, 116, 124],"float32"), )
paddle.add(x=Tensor([8, 512, 116, 152],"float16"), y=Tensor([8, 512, 116, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 116, 168],"float16"), y=Tensor([8, 512, 116, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 120, 120],"float32"), y=Tensor([8, 512, 120, 120],"float32"), )
paddle.add(x=Tensor([8, 512, 120, 136],"float16"), y=Tensor([8, 512, 120, 136],"float16"), )
paddle.add(x=Tensor([8, 512, 120, 136],"float32"), y=Tensor([8, 512, 120, 136],"float32"), )
paddle.add(x=Tensor([8, 512, 120, 140],"float16"), y=Tensor([8, 512, 120, 140],"float16"), )
paddle.add(x=Tensor([8, 512, 120, 140],"float32"), y=Tensor([8, 512, 120, 140],"float32"), )
paddle.add(x=Tensor([8, 512, 120, 144],"float16"), y=Tensor([8, 512, 120, 144],"float16"), )
paddle.add(x=Tensor([8, 512, 120, 144],"float32"), y=Tensor([8, 512, 120, 144],"float32"), )
paddle.add(x=Tensor([8, 512, 120, 148],"float16"), y=Tensor([8, 512, 120, 148],"float16"), )
paddle.add(x=Tensor([8, 512, 120, 148],"float32"), y=Tensor([8, 512, 120, 148],"float32"), )
paddle.add(x=Tensor([8, 512, 120, 152],"float16"), y=Tensor([8, 512, 120, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 120, 152],"float32"), y=Tensor([8, 512, 120, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 120, 156],"float16"), y=Tensor([8, 512, 120, 156],"float16"), )
paddle.add(x=Tensor([8, 512, 120, 160],"float16"), y=Tensor([8, 512, 120, 160],"float16"), )
paddle.add(x=Tensor([8, 512, 120, 160],"float32"), y=Tensor([8, 512, 120, 160],"float32"), )
paddle.add(x=Tensor([8, 512, 120, 168],"float16"), y=Tensor([8, 512, 120, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 120, 168],"float32"), y=Tensor([8, 512, 120, 168],"float32"), )
paddle.add(x=Tensor([8, 512, 124, 128],"float16"), y=Tensor([8, 512, 124, 128],"float16"), )
paddle.add(x=Tensor([8, 512, 124, 128],"float32"), y=Tensor([8, 512, 124, 128],"float32"), )
paddle.add(x=Tensor([8, 512, 124, 136],"float16"), y=Tensor([8, 512, 124, 136],"float16"), )
paddle.add(x=Tensor([8, 512, 124, 136],"float32"), y=Tensor([8, 512, 124, 136],"float32"), )
paddle.add(x=Tensor([8, 512, 124, 140],"float16"), y=Tensor([8, 512, 124, 140],"float16"), )
paddle.add(x=Tensor([8, 512, 124, 140],"float32"), y=Tensor([8, 512, 124, 140],"float32"), )
paddle.add(x=Tensor([8, 512, 124, 144],"float16"), y=Tensor([8, 512, 124, 144],"float16"), )
paddle.add(x=Tensor([8, 512, 124, 144],"float32"), y=Tensor([8, 512, 124, 144],"float32"), )
paddle.add(x=Tensor([8, 512, 124, 148],"float16"), y=Tensor([8, 512, 124, 148],"float16"), )
paddle.add(x=Tensor([8, 512, 124, 148],"float32"), y=Tensor([8, 512, 124, 148],"float32"), )
paddle.add(x=Tensor([8, 512, 124, 152],"float16"), y=Tensor([8, 512, 124, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 124, 152],"float32"), y=Tensor([8, 512, 124, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 124, 160],"float16"), y=Tensor([8, 512, 124, 160],"float16"), )
paddle.add(x=Tensor([8, 512, 124, 160],"float32"), y=Tensor([8, 512, 124, 160],"float32"), )
paddle.add(x=Tensor([8, 512, 124, 164],"float16"), y=Tensor([8, 512, 124, 164],"float16"), )
paddle.add(x=Tensor([8, 512, 124, 164],"float32"), y=Tensor([8, 512, 124, 164],"float32"), )
paddle.add(x=Tensor([8, 512, 124, 168],"float16"), y=Tensor([8, 512, 124, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 124, 168],"float32"), y=Tensor([8, 512, 124, 168],"float32"), )
paddle.add(x=Tensor([8, 512, 128, 124],"float16"), y=Tensor([8, 512, 128, 124],"float16"), )
paddle.add(x=Tensor([8, 512, 128, 124],"float32"), y=Tensor([8, 512, 128, 124],"float32"), )
paddle.add(x=Tensor([8, 512, 128, 128],"float16"), y=Tensor([8, 512, 128, 128],"float16"), )
paddle.add(x=Tensor([8, 512, 128, 128],"float32"), y=Tensor([8, 512, 128, 128],"float32"), )
paddle.add(x=Tensor([8, 512, 128, 136],"float16"), y=Tensor([8, 512, 128, 136],"float16"), )
paddle.add(x=Tensor([8, 512, 128, 136],"float32"), y=Tensor([8, 512, 128, 136],"float32"), )
paddle.add(x=Tensor([8, 512, 128, 140],"float16"), y=Tensor([8, 512, 128, 140],"float16"), )
paddle.add(x=Tensor([8, 512, 128, 140],"float32"), y=Tensor([8, 512, 128, 140],"float32"), )
paddle.add(x=Tensor([8, 512, 128, 144],"float16"), y=Tensor([8, 512, 128, 144],"float16"), )
paddle.add(x=Tensor([8, 512, 128, 144],"float32"), y=Tensor([8, 512, 128, 144],"float32"), )
paddle.add(x=Tensor([8, 512, 128, 148],"float16"), y=Tensor([8, 512, 128, 148],"float16"), )
paddle.add(x=Tensor([8, 512, 128, 148],"float32"), y=Tensor([8, 512, 128, 148],"float32"), )
paddle.add(x=Tensor([8, 512, 128, 152],"float16"), y=Tensor([8, 512, 128, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 128, 152],"float32"), y=Tensor([8, 512, 128, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 128, 156],"float16"), y=Tensor([8, 512, 128, 156],"float16"), )
paddle.add(x=Tensor([8, 512, 128, 156],"float32"), y=Tensor([8, 512, 128, 156],"float32"), )
paddle.add(x=Tensor([8, 512, 128, 160],"float16"), y=Tensor([8, 512, 128, 160],"float16"), )
paddle.add(x=Tensor([8, 512, 128, 160],"float32"), y=Tensor([8, 512, 128, 160],"float32"), )
paddle.add(x=Tensor([8, 512, 128, 164],"float16"), y=Tensor([8, 512, 128, 164],"float16"), )
paddle.add(x=Tensor([8, 512, 128, 164],"float32"), y=Tensor([8, 512, 128, 164],"float32"), )
paddle.add(x=Tensor([8, 512, 128, 168],"float16"), y=Tensor([8, 512, 128, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 128, 168],"float32"), y=Tensor([8, 512, 128, 168],"float32"), )
paddle.add(x=Tensor([8, 512, 128, 176],"float16"), y=Tensor([8, 512, 128, 176],"float16"), )
paddle.add(x=Tensor([8, 512, 128, 176],"float32"), y=Tensor([8, 512, 128, 176],"float32"), )
paddle.add(x=Tensor([8, 512, 132, 124],"float16"), y=Tensor([8, 512, 132, 124],"float16"), )
paddle.add(x=Tensor([8, 512, 132, 124],"float32"), y=Tensor([8, 512, 132, 124],"float32"), )
paddle.add(x=Tensor([8, 512, 132, 140],"float16"), y=Tensor([8, 512, 132, 140],"float16"), )
paddle.add(x=Tensor([8, 512, 132, 140],"float32"), y=Tensor([8, 512, 132, 140],"float32"), )
paddle.add(x=Tensor([8, 512, 132, 148],"float16"), y=Tensor([8, 512, 132, 148],"float16"), )
paddle.add(x=Tensor([8, 512, 132, 148],"float32"), y=Tensor([8, 512, 132, 148],"float32"), )
paddle.add(x=Tensor([8, 512, 132, 152],"float16"), y=Tensor([8, 512, 132, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 132, 152],"float32"), y=Tensor([8, 512, 132, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 132, 164],"float16"), y=Tensor([8, 512, 132, 164],"float16"), )
paddle.add(x=Tensor([8, 512, 132, 164],"float32"), y=Tensor([8, 512, 132, 164],"float32"), )
paddle.add(x=Tensor([8, 512, 132, 168],"float16"), y=Tensor([8, 512, 132, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 132, 168],"float32"), y=Tensor([8, 512, 132, 168],"float32"), )
paddle.add(x=Tensor([8, 512, 136, 120],"float16"), y=Tensor([8, 512, 136, 120],"float16"), )
paddle.add(x=Tensor([8, 512, 136, 120],"float32"), y=Tensor([8, 512, 136, 120],"float32"), )
paddle.add(x=Tensor([8, 512, 136, 124],"float16"), y=Tensor([8, 512, 136, 124],"float16"), )
paddle.add(x=Tensor([8, 512, 136, 124],"float32"), y=Tensor([8, 512, 136, 124],"float32"), )
paddle.add(x=Tensor([8, 512, 136, 128],"float16"), y=Tensor([8, 512, 136, 128],"float16"), )
paddle.add(x=Tensor([8, 512, 136, 128],"float32"), y=Tensor([8, 512, 136, 128],"float32"), )
paddle.add(x=Tensor([8, 512, 136, 136],"float16"), y=Tensor([8, 512, 136, 136],"float16"), )
paddle.add(x=Tensor([8, 512, 136, 136],"float32"), y=Tensor([8, 512, 136, 136],"float32"), )
paddle.add(x=Tensor([8, 512, 136, 140],"float16"), y=Tensor([8, 512, 136, 140],"float16"), )
paddle.add(x=Tensor([8, 512, 136, 140],"float32"), y=Tensor([8, 512, 136, 140],"float32"), )
paddle.add(x=Tensor([8, 512, 136, 144],"float16"), y=Tensor([8, 512, 136, 144],"float16"), )
paddle.add(x=Tensor([8, 512, 136, 148],"float16"), y=Tensor([8, 512, 136, 148],"float16"), )
paddle.add(x=Tensor([8, 512, 136, 148],"float32"), y=Tensor([8, 512, 136, 148],"float32"), )
paddle.add(x=Tensor([8, 512, 136, 152],"float16"), y=Tensor([8, 512, 136, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 136, 152],"float32"), y=Tensor([8, 512, 136, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 136, 156],"float16"), y=Tensor([8, 512, 136, 156],"float16"), )
paddle.add(x=Tensor([8, 512, 136, 156],"float32"), y=Tensor([8, 512, 136, 156],"float32"), )
paddle.add(x=Tensor([8, 512, 136, 160],"float16"), y=Tensor([8, 512, 136, 160],"float16"), )
paddle.add(x=Tensor([8, 512, 136, 160],"float32"), y=Tensor([8, 512, 136, 160],"float32"), )
paddle.add(x=Tensor([8, 512, 136, 164],"float16"), y=Tensor([8, 512, 136, 164],"float16"), )
paddle.add(x=Tensor([8, 512, 136, 164],"float32"), y=Tensor([8, 512, 136, 164],"float32"), )
paddle.add(x=Tensor([8, 512, 136, 168],"float16"), y=Tensor([8, 512, 136, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 136, 168],"float32"), y=Tensor([8, 512, 136, 168],"float32"), )
paddle.add(x=Tensor([8, 512, 140, 128],"float16"), y=Tensor([8, 512, 140, 128],"float16"), )
paddle.add(x=Tensor([8, 512, 140, 128],"float32"), y=Tensor([8, 512, 140, 128],"float32"), )
paddle.add(x=Tensor([8, 512, 140, 136],"float16"), y=Tensor([8, 512, 140, 136],"float16"), )
paddle.add(x=Tensor([8, 512, 140, 136],"float32"), y=Tensor([8, 512, 140, 136],"float32"), )
paddle.add(x=Tensor([8, 512, 140, 140],"float16"), y=Tensor([8, 512, 140, 140],"float16"), )
paddle.add(x=Tensor([8, 512, 140, 140],"float32"), y=Tensor([8, 512, 140, 140],"float32"), )
paddle.add(x=Tensor([8, 512, 140, 144],"float16"), y=Tensor([8, 512, 140, 144],"float16"), )
paddle.add(x=Tensor([8, 512, 140, 144],"float32"), y=Tensor([8, 512, 140, 144],"float32"), )
paddle.add(x=Tensor([8, 512, 140, 148],"float16"), y=Tensor([8, 512, 140, 148],"float16"), )
paddle.add(x=Tensor([8, 512, 140, 148],"float32"), y=Tensor([8, 512, 140, 148],"float32"), )
paddle.add(x=Tensor([8, 512, 140, 152],"float16"), y=Tensor([8, 512, 140, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 140, 152],"float32"), y=Tensor([8, 512, 140, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 140, 156],"float16"), y=Tensor([8, 512, 140, 156],"float16"), )
paddle.add(x=Tensor([8, 512, 140, 156],"float32"), y=Tensor([8, 512, 140, 156],"float32"), )
paddle.add(x=Tensor([8, 512, 140, 164],"float16"), y=Tensor([8, 512, 140, 164],"float16"), )
paddle.add(x=Tensor([8, 512, 140, 164],"float32"), y=Tensor([8, 512, 140, 164],"float32"), )
paddle.add(x=Tensor([8, 512, 140, 168],"float16"), y=Tensor([8, 512, 140, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 140, 168],"float32"), y=Tensor([8, 512, 140, 168],"float32"), )
paddle.add(x=Tensor([8, 512, 144, 128],"float16"), y=Tensor([8, 512, 144, 128],"float16"), )
paddle.add(x=Tensor([8, 512, 144, 128],"float32"), y=Tensor([8, 512, 144, 128],"float32"), )
paddle.add(x=Tensor([8, 512, 144, 136],"float16"), y=Tensor([8, 512, 144, 136],"float16"), )
paddle.add(x=Tensor([8, 512, 144, 136],"float32"), y=Tensor([8, 512, 144, 136],"float32"), )
paddle.add(x=Tensor([8, 512, 144, 140],"float16"), y=Tensor([8, 512, 144, 140],"float16"), )
paddle.add(x=Tensor([8, 512, 144, 140],"float32"), y=Tensor([8, 512, 144, 140],"float32"), )
paddle.add(x=Tensor([8, 512, 144, 144],"float16"), y=Tensor([8, 512, 144, 144],"float16"), )
paddle.add(x=Tensor([8, 512, 144, 144],"float32"), y=Tensor([8, 512, 144, 144],"float32"), )
paddle.add(x=Tensor([8, 512, 144, 148],"float16"), y=Tensor([8, 512, 144, 148],"float16"), )
paddle.add(x=Tensor([8, 512, 144, 148],"float32"), y=Tensor([8, 512, 144, 148],"float32"), )
paddle.add(x=Tensor([8, 512, 144, 152],"float16"), y=Tensor([8, 512, 144, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 144, 152],"float32"), y=Tensor([8, 512, 144, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 144, 156],"float16"), y=Tensor([8, 512, 144, 156],"float16"), )
paddle.add(x=Tensor([8, 512, 144, 160],"float16"), y=Tensor([8, 512, 144, 160],"float16"), )
paddle.add(x=Tensor([8, 512, 144, 160],"float32"), y=Tensor([8, 512, 144, 160],"float32"), )
paddle.add(x=Tensor([8, 512, 144, 164],"float16"), y=Tensor([8, 512, 144, 164],"float16"), )
paddle.add(x=Tensor([8, 512, 144, 164],"float32"), y=Tensor([8, 512, 144, 164],"float32"), )
paddle.add(x=Tensor([8, 512, 144, 168],"float16"), y=Tensor([8, 512, 144, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 144, 168],"float32"), y=Tensor([8, 512, 144, 168],"float32"), )
paddle.add(x=Tensor([8, 512, 144, 176],"float16"), y=Tensor([8, 512, 144, 176],"float16"), )
paddle.add(x=Tensor([8, 512, 144, 176],"float32"), y=Tensor([8, 512, 144, 176],"float32"), )
paddle.add(x=Tensor([8, 512, 148, 132],"float16"), y=Tensor([8, 512, 148, 132],"float16"), )
paddle.add(x=Tensor([8, 512, 148, 132],"float32"), y=Tensor([8, 512, 148, 132],"float32"), )
paddle.add(x=Tensor([8, 512, 148, 136],"float16"), y=Tensor([8, 512, 148, 136],"float16"), )
paddle.add(x=Tensor([8, 512, 148, 136],"float32"), y=Tensor([8, 512, 148, 136],"float32"), )
paddle.add(x=Tensor([8, 512, 148, 140],"float16"), y=Tensor([8, 512, 148, 140],"float16"), )
paddle.add(x=Tensor([8, 512, 148, 140],"float32"), y=Tensor([8, 512, 148, 140],"float32"), )
paddle.add(x=Tensor([8, 512, 148, 144],"float16"), y=Tensor([8, 512, 148, 144],"float16"), )
paddle.add(x=Tensor([8, 512, 148, 144],"float32"), y=Tensor([8, 512, 148, 144],"float32"), )
paddle.add(x=Tensor([8, 512, 148, 148],"float16"), y=Tensor([8, 512, 148, 148],"float16"), )
paddle.add(x=Tensor([8, 512, 148, 148],"float32"), y=Tensor([8, 512, 148, 148],"float32"), )
paddle.add(x=Tensor([8, 512, 148, 152],"float16"), y=Tensor([8, 512, 148, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 148, 152],"float32"), y=Tensor([8, 512, 148, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 148, 156],"float16"), y=Tensor([8, 512, 148, 156],"float16"), )
paddle.add(x=Tensor([8, 512, 148, 156],"float32"), y=Tensor([8, 512, 148, 156],"float32"), )
paddle.add(x=Tensor([8, 512, 148, 160],"float16"), y=Tensor([8, 512, 148, 160],"float16"), )
paddle.add(x=Tensor([8, 512, 148, 160],"float32"), y=Tensor([8, 512, 148, 160],"float32"), )
paddle.add(x=Tensor([8, 512, 148, 164],"float16"), y=Tensor([8, 512, 148, 164],"float16"), )
paddle.add(x=Tensor([8, 512, 148, 164],"float32"), y=Tensor([8, 512, 148, 164],"float32"), )
paddle.add(x=Tensor([8, 512, 148, 168],"float16"), y=Tensor([8, 512, 148, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 148, 168],"float32"), y=Tensor([8, 512, 148, 168],"float32"), )
paddle.add(x=Tensor([8, 512, 152, 120],"float16"), y=Tensor([8, 512, 152, 120],"float16"), )
paddle.add(x=Tensor([8, 512, 152, 124],"float16"), y=Tensor([8, 512, 152, 124],"float16"), )
paddle.add(x=Tensor([8, 512, 152, 124],"float32"), y=Tensor([8, 512, 152, 124],"float32"), )
paddle.add(x=Tensor([8, 512, 152, 128],"float16"), y=Tensor([8, 512, 152, 128],"float16"), )
paddle.add(x=Tensor([8, 512, 152, 128],"float32"), y=Tensor([8, 512, 152, 128],"float32"), )
paddle.add(x=Tensor([8, 512, 152, 136],"float16"), y=Tensor([8, 512, 152, 136],"float16"), )
paddle.add(x=Tensor([8, 512, 152, 136],"float32"), y=Tensor([8, 512, 152, 136],"float32"), )
paddle.add(x=Tensor([8, 512, 152, 140],"float16"), y=Tensor([8, 512, 152, 140],"float16"), )
paddle.add(x=Tensor([8, 512, 152, 140],"float32"), y=Tensor([8, 512, 152, 140],"float32"), )
paddle.add(x=Tensor([8, 512, 152, 144],"float16"), y=Tensor([8, 512, 152, 144],"float16"), )
paddle.add(x=Tensor([8, 512, 152, 144],"float32"), y=Tensor([8, 512, 152, 144],"float32"), )
paddle.add(x=Tensor([8, 512, 152, 148],"float16"), y=Tensor([8, 512, 152, 148],"float16"), )
paddle.add(x=Tensor([8, 512, 152, 148],"float32"), y=Tensor([8, 512, 152, 148],"float32"), )
paddle.add(x=Tensor([8, 512, 152, 152],"float16"), y=Tensor([8, 512, 152, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 152, 152],"float32"), y=Tensor([8, 512, 152, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 152, 156],"float16"), y=Tensor([8, 512, 152, 156],"float16"), )
paddle.add(x=Tensor([8, 512, 152, 156],"float32"), y=Tensor([8, 512, 152, 156],"float32"), )
paddle.add(x=Tensor([8, 512, 152, 160],"float16"), y=Tensor([8, 512, 152, 160],"float16"), )
paddle.add(x=Tensor([8, 512, 152, 160],"float32"), y=Tensor([8, 512, 152, 160],"float32"), )
paddle.add(x=Tensor([8, 512, 152, 164],"float16"), y=Tensor([8, 512, 152, 164],"float16"), )
paddle.add(x=Tensor([8, 512, 152, 164],"float32"), y=Tensor([8, 512, 152, 164],"float32"), )
paddle.add(x=Tensor([8, 512, 152, 168],"float16"), y=Tensor([8, 512, 152, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 152, 168],"float32"), y=Tensor([8, 512, 152, 168],"float32"), )
paddle.add(x=Tensor([8, 512, 156, 136],"float16"), y=Tensor([8, 512, 156, 136],"float16"), )
paddle.add(x=Tensor([8, 512, 156, 136],"float32"), y=Tensor([8, 512, 156, 136],"float32"), )
paddle.add(x=Tensor([8, 512, 156, 140],"float16"), y=Tensor([8, 512, 156, 140],"float16"), )
paddle.add(x=Tensor([8, 512, 156, 148],"float16"), y=Tensor([8, 512, 156, 148],"float16"), )
paddle.add(x=Tensor([8, 512, 156, 148],"float32"), y=Tensor([8, 512, 156, 148],"float32"), )
paddle.add(x=Tensor([8, 512, 156, 152],"float16"), y=Tensor([8, 512, 156, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 156, 152],"float32"), y=Tensor([8, 512, 156, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 156, 168],"float16"), y=Tensor([8, 512, 156, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 156, 168],"float32"), y=Tensor([8, 512, 156, 168],"float32"), )
paddle.add(x=Tensor([8, 512, 160, 144],"float16"), y=Tensor([8, 512, 160, 144],"float16"), )
paddle.add(x=Tensor([8, 512, 160, 144],"float32"), y=Tensor([8, 512, 160, 144],"float32"), )
paddle.add(x=Tensor([8, 512, 160, 152],"float16"), y=Tensor([8, 512, 160, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 160, 152],"float32"), y=Tensor([8, 512, 160, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 160, 160],"float16"), y=Tensor([8, 512, 160, 160],"float16"), )
paddle.add(x=Tensor([8, 512, 160, 160],"float32"), y=Tensor([8, 512, 160, 160],"float32"), )
paddle.add(x=Tensor([8, 512, 160, 168],"float16"), y=Tensor([8, 512, 160, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 160, 168],"float32"), y=Tensor([8, 512, 160, 168],"float32"), )
paddle.add(x=Tensor([8, 512, 160, 176],"float16"), y=Tensor([8, 512, 160, 176],"float16"), )
paddle.add(x=Tensor([8, 512, 160, 176],"float32"), y=Tensor([8, 512, 160, 176],"float32"), )
paddle.add(x=Tensor([8, 512, 164, 136],"float16"), y=Tensor([8, 512, 164, 136],"float16"), )
paddle.add(x=Tensor([8, 512, 164, 144],"float16"), y=Tensor([8, 512, 164, 144],"float16"), )
paddle.add(x=Tensor([8, 512, 164, 152],"float16"), y=Tensor([8, 512, 164, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 164, 152],"float32"), y=Tensor([8, 512, 164, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 164, 156],"float16"), y=Tensor([8, 512, 164, 156],"float16"), )
paddle.add(x=Tensor([8, 512, 164, 168],"float16"), y=Tensor([8, 512, 164, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 164, 168],"float32"), y=Tensor([8, 512, 164, 168],"float32"), )
paddle.add(x=Tensor([8, 512, 168, 128],"float16"), y=Tensor([8, 512, 168, 128],"float16"), )
paddle.add(x=Tensor([8, 512, 168, 128],"float32"), y=Tensor([8, 512, 168, 128],"float32"), )
paddle.add(x=Tensor([8, 512, 168, 132],"float16"), y=Tensor([8, 512, 168, 132],"float16"), )
paddle.add(x=Tensor([8, 512, 168, 132],"float32"), y=Tensor([8, 512, 168, 132],"float32"), )
paddle.add(x=Tensor([8, 512, 168, 136],"float16"), y=Tensor([8, 512, 168, 136],"float16"), )
paddle.add(x=Tensor([8, 512, 168, 136],"float32"), y=Tensor([8, 512, 168, 136],"float32"), )
paddle.add(x=Tensor([8, 512, 168, 144],"float16"), y=Tensor([8, 512, 168, 144],"float16"), )
paddle.add(x=Tensor([8, 512, 168, 144],"float32"), y=Tensor([8, 512, 168, 144],"float32"), )
paddle.add(x=Tensor([8, 512, 168, 148],"float16"), y=Tensor([8, 512, 168, 148],"float16"), )
paddle.add(x=Tensor([8, 512, 168, 152],"float16"), y=Tensor([8, 512, 168, 152],"float16"), )
paddle.add(x=Tensor([8, 512, 168, 152],"float32"), y=Tensor([8, 512, 168, 152],"float32"), )
paddle.add(x=Tensor([8, 512, 168, 160],"float16"), y=Tensor([8, 512, 168, 160],"float16"), )
paddle.add(x=Tensor([8, 512, 168, 160],"float32"), y=Tensor([8, 512, 168, 160],"float32"), )
paddle.add(x=Tensor([8, 512, 168, 168],"float16"), y=Tensor([8, 512, 168, 168],"float16"), )
paddle.add(x=Tensor([8, 512, 168, 168],"float32"), y=Tensor([8, 512, 168, 168],"float32"), )
paddle.add(x=Tensor([8, 512, 176, 144],"float16"), y=Tensor([8, 512, 176, 144],"float16"), )
paddle.add(x=Tensor([8, 512, 176, 144],"float32"), y=Tensor([8, 512, 176, 144],"float32"), )
paddle.add(x=Tensor([8, 512, 176, 160],"float16"), y=Tensor([8, 512, 176, 160],"float16"), )
paddle.add(x=Tensor([8, 512, 176, 160],"float32"), y=Tensor([8, 512, 176, 160],"float32"), )
paddle.add(x=Tensor([8, 512, 176, 176],"float16"), y=Tensor([8, 512, 176, 176],"float16"), )
paddle.add(x=Tensor([8, 512, 176, 176],"float32"), y=Tensor([8, 512, 176, 176],"float32"), )
paddle.add(x=Tensor([8, 512, 20, 20],"float16"), y=Tensor([8, 512, 20, 20],"float16"), )
paddle.add(x=Tensor([8, 512, 20, 20],"float32"), y=Tensor([8, 512, 20, 20],"float32"), )
paddle.add(x=Tensor([8, 512, 22, 22],"float16"), y=Tensor([8, 512, 22, 22],"float16"), )
paddle.add(x=Tensor([8, 512, 22, 22],"float32"), y=Tensor([8, 512, 22, 22],"float32"), )
paddle.add(x=Tensor([8, 512, 24, 24],"float16"), y=Tensor([8, 512, 24, 24],"float16"), )
paddle.add(x=Tensor([8, 512, 24, 24],"float32"), y=Tensor([8, 512, 24, 24],"float32"), )
paddle.add(x=Tensor([8, 512, 26, 26],"float16"), y=Tensor([8, 512, 26, 26],"float16"), )
paddle.add(x=Tensor([8, 512, 26, 26],"float32"), y=Tensor([8, 512, 26, 26],"float32"), )
paddle.add(x=Tensor([8, 512, 28, 28],"float16"), y=Tensor([8, 512, 28, 28],"float16"), )
paddle.add(x=Tensor([8, 512, 28, 28],"float32"), y=Tensor([8, 512, 28, 28],"float32"), )
paddle.add(x=Tensor([8, 512, 30, 30],"float16"), y=Tensor([8, 512, 30, 30],"float16"), )
paddle.add(x=Tensor([8, 512, 30, 30],"float32"), y=Tensor([8, 512, 30, 30],"float32"), )
paddle.add(x=Tensor([8, 512, 32, 32],"float16"), y=Tensor([8, 512, 32, 32],"float16"), )
paddle.add(x=Tensor([8, 512, 32, 32],"float32"), y=Tensor([8, 512, 32, 32],"float32"), )
paddle.add(x=Tensor([8, 512, 34, 34],"float16"), y=Tensor([8, 512, 34, 34],"float16"), )
paddle.add(x=Tensor([8, 512, 34, 34],"float32"), y=Tensor([8, 512, 34, 34],"float32"), )
paddle.add(x=Tensor([8, 512, 36, 36],"float16"), y=Tensor([8, 512, 36, 36],"float16"), )
paddle.add(x=Tensor([8, 512, 36, 36],"float32"), y=Tensor([8, 512, 36, 36],"float32"), )
paddle.add(x=Tensor([8, 512, 38, 38],"float16"), y=Tensor([8, 512, 38, 38],"float16"), )
paddle.add(x=Tensor([8, 512, 38, 38],"float32"), y=Tensor([8, 512, 38, 38],"float32"), )
paddle.add(x=Tensor([8, 512, 4, 28, 28],"float32"), y=Tensor([8, 512, 4, 28, 28],"float32"), )
paddle.add(x=Tensor([8, 512, 52, 52],"float32"), y=Tensor([8, 512, 52, 52],"float32"), )
paddle.add(x=Tensor([8, 512, 60, 60],"float32"), y=Tensor([8, 512, 60, 60],"float32"), )
paddle.add(x=Tensor([8, 512, 64, 64],"float16"), y=Tensor([8, 512, 64, 64],"float16"), )
paddle.add(x=Tensor([8, 512, 64, 64],"float32"), y=Tensor([8, 512, 64, 64],"float32"), )
paddle.add(x=Tensor([8, 512, 68, 68],"float32"), y=Tensor([8, 512, 68, 68],"float32"), )
paddle.add(x=Tensor([8, 512, 72, 72],"float32"), y=Tensor([8, 512, 72, 72],"float32"), )
paddle.add(x=Tensor([8, 512, 80, 80],"float16"), y=Tensor([8, 512, 80, 80],"float16"), )
paddle.add(x=Tensor([8, 512, 80, 80],"float32"), y=Tensor([8, 512, 80, 80],"float32"), )
paddle.add(x=Tensor([8, 512, 92, 132],"float16"), y=Tensor([8, 512, 92, 132],"float16"), )
paddle.add(x=Tensor([8, 512, 92, 136],"float16"), y=Tensor([8, 512, 92, 136],"float16"), )
paddle.add(x=Tensor([8, 512, 92, 136],"float32"), y=Tensor([8, 512, 92, 136],"float32"), )
paddle.add(x=Tensor([8, 512, 96, 140],"float16"), y=Tensor([8, 512, 96, 140],"float16"), )
paddle.add(x=Tensor([8, 512, 96, 144],"float16"), y=Tensor([8, 512, 96, 144],"float16"), )
paddle.add(x=Tensor([8, 512, 96, 144],"float32"), y=Tensor([8, 512, 96, 144],"float32"), )
paddle.add(x=Tensor([8, 512, 96, 148],"float16"), y=Tensor([8, 512, 96, 148],"float16"), )
paddle.add(x=Tensor([8, 512, 96, 148],"float32"), y=Tensor([8, 512, 96, 148],"float32"), )
paddle.add(x=Tensor([8, 64, 160, 160],"float16"), y=Tensor([8, 64, 160, 160],"float16"), )
paddle.add(x=Tensor([8, 64, 160, 160],"float32"), y=Tensor([8, 64, 160, 160],"float32"), )
paddle.add(x=Tensor([8, 64, 176, 176],"float16"), y=Tensor([8, 64, 176, 176],"float16"), )
paddle.add(x=Tensor([8, 64, 176, 176],"float32"), y=Tensor([8, 64, 176, 176],"float32"), )
paddle.add(x=Tensor([8, 64, 192, 192],"float16"), y=Tensor([8, 64, 192, 192],"float16"), )
paddle.add(x=Tensor([8, 64, 192, 192],"float32"), y=Tensor([8, 64, 192, 192],"float32"), )
paddle.add(x=Tensor([8, 64, 208, 208],"float16"), y=Tensor([8, 64, 208, 208],"float16"), )
paddle.add(x=Tensor([8, 64, 208, 208],"float32"), y=Tensor([8, 64, 208, 208],"float32"), )
paddle.add(x=Tensor([8, 64, 224, 224],"float16"), y=Tensor([8, 64, 224, 224],"float16"), )
paddle.add(x=Tensor([8, 64, 224, 224],"float32"), y=Tensor([8, 64, 224, 224],"float32"), )
paddle.add(x=Tensor([8, 64, 240, 240],"float16"), y=Tensor([8, 64, 240, 240],"float16"), )
paddle.add(x=Tensor([8, 64, 240, 240],"float32"), y=Tensor([8, 64, 240, 240],"float32"), )
paddle.add(x=Tensor([8, 64, 256, 256],"float16"), y=Tensor([8, 64, 256, 256],"float16"), )
paddle.add(x=Tensor([8, 64, 256, 256],"float32"), y=Tensor([8, 64, 256, 256],"float32"), )
paddle.add(x=Tensor([8, 64, 272, 272],"float16"), y=Tensor([8, 64, 272, 272],"float16"), )
paddle.add(x=Tensor([8, 64, 272, 272],"float32"), y=Tensor([8, 64, 272, 272],"float32"), )
paddle.add(x=Tensor([8, 64, 288, 288],"float16"), y=Tensor([8, 64, 288, 288],"float16"), )
paddle.add(x=Tensor([8, 64, 288, 288],"float32"), y=Tensor([8, 64, 288, 288],"float32"), )
paddle.add(x=Tensor([8, 64, 304, 304],"float16"), y=Tensor([8, 64, 304, 304],"float16"), )
paddle.add(x=Tensor([8, 64, 304, 304],"float32"), y=Tensor([8, 64, 304, 304],"float32"), )
paddle.add(x=Tensor([8, 64, 32, 28, 28],"float32"), y=Tensor([8, 64, 32, 28, 28],"float32"), )
paddle.add(x=Tensor([96, 1024, 14, 14],"float16"), y=Tensor([96, 1024, 14, 14],"float16"), )
paddle.add(x=Tensor([96, 1024, 14, 14],"float32"), y=Tensor([96, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([96, 2048, 7, 7],"float16"), y=Tensor([96, 2048, 7, 7],"float16"), )
paddle.add(x=Tensor([96, 2048, 7, 7],"float32"), y=Tensor([96, 2048, 7, 7],"float32"), )
paddle.add(x=Tensor([96, 256, 56, 56],"float16"), y=Tensor([96, 256, 56, 56],"float16"), )
paddle.add(x=Tensor([96, 256, 56, 56],"float32"), y=Tensor([96, 256, 56, 56],"float32"), )
paddle.add(x=Tensor([96, 512, 28, 28],"float16"), y=Tensor([96, 512, 28, 28],"float16"), )
paddle.add(x=Tensor([96, 512, 28, 28],"float32"), y=Tensor([96, 512, 28, 28],"float32"), )
paddle.add_n(Tensor([2, 13, 11],"float32"), )
paddle.add_n(Tensor([],"float32"), )
paddle.add_n(inputs=Tensor([10],"float32"), )
paddle.add_n(inputs=Tensor([10],"float64"), )
paddle.add_n(inputs=Tensor([10],"int32"), )
paddle.add_n(inputs=Tensor([10],"int64"), )
paddle.add_n(inputs=Tensor([4, 4, 4, 4],"float64"), )
paddle.add_n(inputs=Tensor([4, 4, 4],"float64"), )
paddle.add_n(inputs=Tensor([4, 4],"float64"), )
paddle.add_n(list[Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([100, 1],"float32"),Tensor([100, 1],"float32"),], )
paddle.add_n(list[Tensor([100, 200],"int32"),Tensor([100, 200],"int32"),], )
paddle.add_n(list[Tensor([1200, 1],"float32"),Tensor([1200, 1],"float32"),], )
paddle.add_n(list[Tensor([1291, 1],"float32"),Tensor([1291, 1],"float32"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),], )
paddle.add_n(list[Tensor([16, 256],"float32"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),], )
paddle.add_n(list[Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),], )
paddle.add_n(list[Tensor([1800, 1],"float32"),Tensor([1800, 1],"float32"),], )
paddle.add_n(list[Tensor([18211, 1],"float32"),Tensor([18211, 1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([2885, 1],"float32"),Tensor([2885, 1],"float32"),], )
paddle.add_n(list[Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),], )
paddle.add_n(list[Tensor([3, 40],"float64"),Tensor([3, 40],"float64"),Tensor([3, 40],"float64"),], )
paddle.add_n(list[Tensor([3],"complex128"),Tensor([3],"complex128"),], )
paddle.add_n(list[Tensor([3],"complex64"),Tensor([3],"complex64"),], )
paddle.add_n(list[Tensor([3],"float32"),Tensor([3],"float32"),], )
paddle.add_n(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], )
paddle.add_n(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], )
paddle.add_n(list[Tensor([5000, 1],"float32"),Tensor([5000, 1],"float32"),], )
paddle.add_n(list[Tensor([6284, 1],"float32"),Tensor([6284, 1],"float32"),], )
paddle.add_n(list[Tensor([64, 128, 32, 32],"float16"),Tensor([64, 128, 32, 32],"float16"),], )
paddle.add_n(list[Tensor([64, 128, 32, 32],"float32"),Tensor([64, 128, 32, 32],"float32"),], )
paddle.add_n(list[Tensor([64, 128, 64, 64],"float16"),Tensor([64, 128, 64, 64],"float16"),], )
paddle.add_n(list[Tensor([64, 128, 64, 64],"float32"),Tensor([64, 128, 64, 64],"float32"),], )
paddle.add_n(list[Tensor([64, 256, 16, 16],"float16"),Tensor([64, 256, 16, 16],"float16"),], )
paddle.add_n(list[Tensor([64, 256, 16, 16],"float32"),Tensor([64, 256, 16, 16],"float32"),], )
paddle.add_n(list[Tensor([64, 256, 32, 32],"float16"),Tensor([64, 256, 32, 32],"float16"),], )
paddle.add_n(list[Tensor([64, 256, 32, 32],"float32"),Tensor([64, 256, 32, 32],"float32"),], )
paddle.add_n(list[Tensor([64, 512, 16, 16],"float16"),Tensor([64, 512, 16, 16],"float16"),], )
paddle.add_n(list[Tensor([64, 512, 16, 16],"float32"),Tensor([64, 512, 16, 16],"float32"),], )
paddle.add_n(list[Tensor([64, 512, 8, 8],"float16"),Tensor([64, 512, 8, 8],"float16"),], )
paddle.add_n(list[Tensor([64, 512, 8, 8],"float32"),Tensor([64, 512, 8, 8],"float32"),], )
paddle.add_n(list[Tensor([64, 64, 64, 64],"float16"),Tensor([64, 64, 64, 64],"float16"),], )
paddle.add_n(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], )
paddle.add_n(list[Tensor([],"complex128"),Tensor([],"complex128"),], )
paddle.add_n(list[Tensor([],"complex64"),Tensor([],"complex64"),], )
paddle.add_n(list[Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),], )
paddle.add_n(list[Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),], )
paddle.add_n(list[Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),], )
paddle.add_n(list[Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),], )
paddle.add_n(list[Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),], )
paddle.add_n(list[Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),], )
paddle.add_n(list[Tensor([],"float16"),Tensor([],"float16"),], )
paddle.add_n(list[Tensor([],"float16"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([],"float32"),], )
paddle.add_n(list[Tensor([],"float64"),Tensor([],"float64"),Tensor([],"float64"),], )
paddle.add_n(list[Tensor([],"float64"),Tensor([],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float64"),Tensor([1, 6, 1, 1, 3],"float64"),Tensor([1, 1, 1, 6, 3],"float64"),Tensor([1, 6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"int32"),Tensor([1, 6, 1, 1, 3],"int32"),Tensor([1, 1, 1, 6, 3],"int32"),Tensor([1, 6, 1, 6, 3],"int32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"int64"),Tensor([1, 6, 1, 1, 3],"int64"),Tensor([1, 1, 1, 6, 3],"int64"),Tensor([1, 6, 1, 6, 3],"int64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"float64"),Tensor([1, 6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"int32"),Tensor([1, 6, 1, 6, 3],"int32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"int64"),Tensor([1, 6, 1, 6, 3],"int64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"bool"),Tensor([6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"float32"),Tensor([6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"float64"),Tensor([6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"int32"),Tensor([6, 1, 6, 3],"int32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"int64"),Tensor([6, 1, 6, 3],"int64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"bool"),Tensor([6, 1, 6],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"float32"),Tensor([6, 1, 6],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"float64"),Tensor([6, 1, 6],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"int32"),Tensor([6, 1, 6],"int32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"int64"),Tensor([6, 1, 6],"int64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"bool"),Tensor([6, 1],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"float32"),Tensor([6, 1],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"float64"),Tensor([6, 1],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"int32"),Tensor([6, 1],"int32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"int64"),Tensor([6, 1],"int64"),], )
paddle.broadcast_tensors(list[Tensor([0],"int32"),Tensor([0],"int32"),], )
paddle.broadcast_tensors(list[Tensor([1, 1],"float32"),Tensor([1, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"bool"),Tensor([3, 1],"bool"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float32"),Tensor([3, 1],"float32"),Tensor([3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float32"),Tensor([3, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float64"),Tensor([1, 4],"float64"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float64"),Tensor([3, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"int32"),Tensor([3, 1],"int32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"int64"),Tensor([3, 1],"int64"),], )
paddle.broadcast_tensors(list[Tensor([10, 10, 10],"float64"),Tensor([10, 10, 10],"float64"),], )
paddle.broadcast_tensors(list[Tensor([12, 1, 10, 1],"float64"),Tensor([12, 1, 10, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([16384, 1024],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([3],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float64"),Tensor([1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 1, 2],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 1],"float32"),Tensor([2, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 1],"float64"),Tensor([2, 5],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 2],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 2],"float32"),Tensor([2, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 2],"float64"),Tensor([2, 2],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 3],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 1],"float64"),Tensor([2, 2, 1, 30],"float64"),Tensor([1, 2, 60, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 1],"float64"),Tensor([6, 2, 1, 10],"float64"),], )
paddle.broadcast_tensors(list[Tensor([200, 200],"float64"),Tensor([200, 200],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2],"float32"),Tensor([1, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float32"),Tensor([2, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float32"),Tensor([2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float64"),Tensor([2],"float64"),Tensor([2, 2],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2],"float64"),Tensor([2],"float64"),Tensor([2],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2],"float64"),Tensor([2],"float64"),], )
paddle.broadcast_tensors(list[Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([3, 4],"float32"),Tensor([3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([3, 4],"float64"),Tensor([3, 4],"float64"),], )
paddle.broadcast_tensors(list[Tensor([3, 4],"float64"),Tensor([],"float64"),], )
paddle.broadcast_tensors(list[Tensor([32, 3, 1024, 768],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([3],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([3],"float32"),Tensor([3],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([3],"float32"),Tensor([3],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([3],"float32"),Tensor([3],"float32"),], )
paddle.broadcast_tensors(list[Tensor([3],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([3],"float64"),Tensor([3],"float64"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 1],"complex128"),Tensor([1, 4, 1, 4],"complex128"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 1],"complex64"),Tensor([1, 4, 1, 4],"complex64"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 1],"float32"),Tensor([1, 4, 1, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 2, 1, 4],"float32"),Tensor([3, 1],"float32"),Tensor([1, 3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 5],"float64"),Tensor([4, 5],"float64"),], )
paddle.broadcast_tensors(list[Tensor([5, 5],"float64"),Tensor([5, 5],"float64"),], )
paddle.broadcast_tensors(list[Tensor([],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([],"float32"),Tensor([2, 3],"float32"),], )
paddle.broadcast_tensors(list[Tensor([],"float32"),Tensor([3],"float32"),], )
paddle.broadcast_tensors(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([],"float64"),Tensor([3, 4],"float64"),], )
paddle.broadcast_tensors(list[Tensor([],"float64"),Tensor([],"float64"),Tensor([1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([],"float64"),Tensor([],"float64"),Tensor([],"float64"),], )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float32"),Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float64"),Tensor([2, 1],"float64"),Tensor([2, 1],"float64"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float64"),Tensor([2, 3],"float64"),Tensor([2, 3],"float64"),), )
paddle.atleast_1d(Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), Tensor([2],"float64"), )
paddle.atleast_1d(Tensor([1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 2],"float64"), Tensor([3],"float64"), )
paddle.atleast_1d(Tensor([1],"float64"), )
paddle.atleast_1d(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.atleast_1d(Tensor([2, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_1d(Tensor([2, 3, 1],"float64"), Tensor([1, 3],"float64"), )
paddle.atleast_1d(Tensor([2, 3, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_1d(Tensor([2],"float32"), Tensor([2],"float64"), )
paddle.atleast_1d(Tensor([3, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([5],"float64"), Tensor([5],"float64"), Tensor([5],"float64"), )
paddle.atleast_1d(Tensor([],"float16"), )
paddle.atleast_1d(Tensor([],"float32"), )
paddle.atleast_1d(Tensor([],"float64"), )
paddle.atleast_1d(Tensor([],"float64"), Tensor([2],"float64"), )
paddle.atleast_1d(Tensor([],"float64"), Tensor([],"float64"), Tensor([],"float64"), )
paddle.atleast_1d(Tensor([],"int32"), )
paddle.atleast_1d(Tensor([],"int64"), )
paddle.atleast_2d(Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), Tensor([2],"float64"), )
paddle.atleast_2d(Tensor([1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 2],"float64"), Tensor([3],"float64"), )
paddle.atleast_2d(Tensor([1],"float64"), )
paddle.atleast_2d(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.atleast_2d(Tensor([2, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_2d(Tensor([2, 3, 1],"float64"), Tensor([1, 3],"float64"), )
paddle.atleast_2d(Tensor([2, 3, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_2d(Tensor([2],"float32"), Tensor([2],"float64"), )
paddle.atleast_2d(Tensor([2],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([5],"float64"), Tensor([5],"float64"), Tensor([5],"float64"), )
paddle.atleast_2d(Tensor([],"float16"), )
paddle.atleast_2d(Tensor([],"float32"), )
paddle.atleast_2d(Tensor([],"float64"), )
paddle.atleast_2d(Tensor([],"float64"), Tensor([2],"float64"), )
paddle.atleast_2d(Tensor([],"float64"), Tensor([],"float64"), Tensor([],"float64"), )
paddle.atleast_2d(Tensor([],"int32"), )
paddle.atleast_2d(Tensor([],"int64"), )
paddle.atleast_3d(Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), Tensor([2],"float64"), )
paddle.atleast_3d(Tensor([1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 2],"float64"), Tensor([3],"float64"), )
paddle.atleast_3d(Tensor([1],"float64"), )
paddle.atleast_3d(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.atleast_3d(Tensor([2, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_3d(Tensor([2, 3, 1],"float64"), Tensor([1, 3],"float64"), )
paddle.atleast_3d(Tensor([2, 3, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_3d(Tensor([2],"float32"), Tensor([2],"float64"), )
paddle.atleast_3d(Tensor([2],"float64"), Tensor([1, 2, 1],"float64"), )
paddle.atleast_3d(Tensor([2],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([5],"float64"), Tensor([5],"float64"), Tensor([5],"float64"), )
paddle.atleast_3d(Tensor([],"float16"), )
paddle.atleast_3d(Tensor([],"float32"), )
paddle.atleast_3d(Tensor([],"float64"), )
paddle.atleast_3d(Tensor([],"float64"), Tensor([2],"float64"), )
paddle.atleast_3d(Tensor([],"float64"), Tensor([],"float64"), Tensor([],"float64"), )
paddle.atleast_3d(Tensor([],"int32"), )
paddle.atleast_3d(Tensor([],"int64"), )
paddle.Tensor.set_(Tensor([0],"float16"), None, None, None, 0, )
paddle.Tensor.set_(Tensor([0],"float32"), None, None, None, 0, )
paddle.Tensor.set_(Tensor([20],"bool"), Tensor([15, 3],"bool"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"complex128"), Tensor([15, 3],"complex128"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"complex64"), Tensor([15, 3],"complex64"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"float32"), Tensor([15, 3],"float32"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"float64"), Tensor([15, 3],"float64"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"int16"), Tensor([15, 3],"int16"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"int32"), Tensor([15, 3],"int32"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"int64"), Tensor([15, 3],"int64"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"int8"), Tensor([15, 3],"int8"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"uint8"), Tensor([15, 3],"uint8"), list[20,], list[2,], 0, )
paddle.cummax(Tensor([100, 100],"float32"), )
paddle.cummax(Tensor([100, 100],"float32"), axis=-1, )
paddle.cummax(Tensor([100, 100],"float32"), axis=-2, )
paddle.cummax(Tensor([100, 100],"float32"), axis=-2, dtype="int32", )
paddle.cummax(Tensor([100, 100],"float32"), axis=0, )
paddle.cummax(Tensor([100, 100],"int32"), axis=0, )
paddle.cummin(Tensor([100, 100],"float32"), )
paddle.cummin(Tensor([100, 100],"float32"), axis=-1, )
paddle.cummin(Tensor([100, 100],"float32"), axis=-2, )
paddle.cummin(Tensor([100, 100],"float32"), axis=-2, dtype="int32", )
paddle.cummin(Tensor([100, 100],"float32"), axis=0, )
paddle.cummin(Tensor([100, 100],"int32"), axis=0, )
paddle.cumprod(Tensor([1, 2, 2],"float32"), dim=-1, )
paddle.cumprod(Tensor([10, 10],"float32"), dim=0, )
paddle.cumprod(Tensor([10, 10],"float32"), dim=1, )
paddle.cumprod(Tensor([10, 20, 1],"float32"), -1, dtype="float32", )
paddle.cumprod(Tensor([2, 2, 2],"float32"), dim=-1, )
paddle.cumprod(Tensor([2, 3, 10, 10],"float64"), 1, )
paddle.cumprod(Tensor([2, 3, 3, 4, 5],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 3, 4, 5],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 3, 4, 5],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 3, 3, 4, 5],"float32"), dim=3, )
paddle.cumprod(Tensor([2, 3, 3, 4, 5],"float32"), dim=4, )
paddle.cumprod(Tensor([2, 3, 3, 4],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 3, 4],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 3, 4],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 3, 3, 4],"float32"), dim=3, )
paddle.cumprod(Tensor([2, 3, 4],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 4],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 4],"float32"), dim=2, )
paddle.cumprod(Tensor([5, 1],"complex128"), dim=-1, )
paddle.cumprod(Tensor([5, 1],"float32"), dim=-1, )
paddle.cumprod(Tensor([5, 2],"complex128"), dim=-1, )
paddle.cumprod(Tensor([5, 2],"float32"), dim=-1, )
paddle.cumprod(Tensor([5, 3],"complex128"), dim=-1, )
paddle.cumprod(Tensor([5, 3],"float32"), dim=-1, )
paddle.cumprod(Tensor([5, 4],"float32"), dim=-1, )
paddle.cumprod(Tensor([5, 5],"float32"), dim=-1, )
paddle.cumprod(Tensor([5, 6],"float32"), dim=-1, )
paddle.cumprod(Tensor([5, 7],"float32"), dim=-1, )
paddle.cumprod(Tensor([50],"float32"), dim=0, )
paddle.cumprod(Tensor([],"float32"), 0, )
paddle.cumprod(Tensor([],"float32"), dim=0, )
paddle.cumprod(x=Tensor([12],"float64"), dim=0, )
paddle.cumprod(x=Tensor([2, 3, 2],"float64"), dim=-2, )
paddle.cumprod(x=Tensor([2, 3, 2],"float64"), dim=0, )
paddle.cumprod(x=Tensor([3, 4],"float32"), dim=0, )
paddle.cumprod(x=Tensor([3, 4],"float64"), dim=-1, )
paddle.cumprod(x=Tensor([3, 4],"float64"), dim=0, )
paddle.cumprod(x=Tensor([3, 4],"float64"), dim=1, )
paddle.cumprod(x=Tensor([3, 4],"int64"), dim=0, )
paddle.equal_all(Tensor([1, 10],"float32"), Tensor([1, 10],"float32"), )
paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([1, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([1, 2, 3, 4],"float32"), Tensor([1, 2, 3, 4],"float32"), )
paddle.equal_all(Tensor([1, 2],"float32"), Tensor([1, 2],"float32"), )
paddle.equal_all(Tensor([10, 10],"int32"), Tensor([10, 10],"int32"), )
paddle.equal_all(Tensor([128],"float32"), Tensor([128],"float32"), )
paddle.equal_all(Tensor([13, 7],"int64"), Tensor([13, 7],"int64"), )
paddle.equal_all(Tensor([16, 16],"float32"), Tensor([16, 16],"float32"), )
paddle.equal_all(Tensor([16],"float32"), Tensor([16],"float32"), )
paddle.equal_all(Tensor([2, 1, 2],"int64"), Tensor([2, 1, 2],"int64"), )
paddle.equal_all(Tensor([2, 1, 4],"int64"), Tensor([2, 1, 4],"int64"), )
paddle.equal_all(Tensor([2, 1],"int64"), Tensor([2, 1],"int64"), )
paddle.equal_all(Tensor([2, 2, 3],"int64"), Tensor([2, 2, 3],"int64"), )
paddle.equal_all(Tensor([2, 2, 4],"int64"), Tensor([2, 2, 4],"int64"), )
paddle.equal_all(Tensor([2, 2],"int64"), Tensor([2, 2],"int64"), )
paddle.equal_all(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.equal_all(Tensor([24],"float32"), Tensor([24],"float32"), )
paddle.equal_all(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.equal_all(Tensor([32],"float32"), Tensor([32],"float32"), )
paddle.equal_all(Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), )
paddle.equal_all(Tensor([5, 10],"float32"), Tensor([5, 10],"float32"), )
paddle.equal_all(Tensor([50],"float32"), Tensor([50],"float32"), )
paddle.equal_all(Tensor([64],"float32"), Tensor([64],"float32"), )
paddle.equal_all(Tensor([8],"float32"), Tensor([8],"float32"), )
paddle.equal_all(Tensor([],"float32"), Tensor([],"float32"), )
paddle.equal_all(x=Tensor([1, 1, 1, 2, 3],"float64"), y=Tensor([1, 1, 1, 2, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 2, 3],"float64"), y=Tensor([2, 3],"float64"), )
paddle.equal_all(x=Tensor([2, 3],"float64"), y=Tensor([1, 3],"float64"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float32"), y=Tensor([3, 3, 3],"float32"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.equal_all(x=Tensor([3, 3, 3],"int32"), y=Tensor([3, 3, 3],"int32"), )
paddle.equal_all(x=Tensor([3, 3, 3],"int64"), y=Tensor([3, 3, 3],"int64"), )
paddle.median(Tensor([2, 100],"float32"), axis=1, mode="min", )
paddle.median(Tensor([2, 4, 5],"float32"), mode="avg", )
paddle.median(Tensor([2, 4, 5],"float32"), mode="min", )
paddle.median(Tensor([2, 4, 5],"float64"), mode="avg", )
paddle.median(Tensor([2, 4, 5],"float64"), mode="min", )
paddle.median(Tensor([2, 4, 5],"int32"), mode="avg", )
paddle.median(Tensor([2, 4, 5],"int32"), mode="min", )
paddle.median(Tensor([2, 4, 5],"int64"), mode="avg", )
paddle.median(Tensor([2, 4, 5],"int64"), mode="min", )
paddle.median(Tensor([3, 10],"float32"), axis=1, mode="min", )
paddle.median(Tensor([3, 4, 2],"float32"), -1, False, )
paddle.median(Tensor([3, 4, 2],"float32"), -1, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"float32"), -1, True, )
paddle.median(Tensor([3, 4, 2],"float32"), -1, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"float32"), 0, False, )
paddle.median(Tensor([3, 4, 2],"float32"), 0, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"float32"), 0, True, )
paddle.median(Tensor([3, 4, 2],"float32"), 0, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"float32"), 1, False, )
paddle.median(Tensor([3, 4, 2],"float32"), 1, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"float32"), 1, True, )
paddle.median(Tensor([3, 4, 2],"float32"), 1, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"float32"), 2, False, )
paddle.median(Tensor([3, 4, 2],"float32"), 2, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"float32"), 2, True, )
paddle.median(Tensor([3, 4, 2],"float32"), 2, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"float32"), None, False, )
paddle.median(Tensor([3, 4, 2],"float32"), None, True, )
paddle.median(Tensor([3, 4, 2],"float64"), -1, False, )
paddle.median(Tensor([3, 4, 2],"float64"), -1, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"float64"), -1, True, )
paddle.median(Tensor([3, 4, 2],"float64"), -1, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"float64"), 0, False, )
paddle.median(Tensor([3, 4, 2],"float64"), 0, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"float64"), 0, True, )
paddle.median(Tensor([3, 4, 2],"float64"), 0, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"float64"), 1, False, )
paddle.median(Tensor([3, 4, 2],"float64"), 1, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"float64"), 1, True, )
paddle.median(Tensor([3, 4, 2],"float64"), 1, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"float64"), 2, False, )
paddle.median(Tensor([3, 4, 2],"float64"), 2, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"float64"), 2, True, )
paddle.median(Tensor([3, 4, 2],"float64"), 2, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"float64"), None, False, )
paddle.median(Tensor([3, 4, 2],"float64"), None, True, )
paddle.median(Tensor([3, 4, 2],"int32"), -1, False, )
paddle.median(Tensor([3, 4, 2],"int32"), -1, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"int32"), -1, True, )
paddle.median(Tensor([3, 4, 2],"int32"), -1, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"int32"), 0, False, )
paddle.median(Tensor([3, 4, 2],"int32"), 0, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"int32"), 0, True, )
paddle.median(Tensor([3, 4, 2],"int32"), 0, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"int32"), 1, False, )
paddle.median(Tensor([3, 4, 2],"int32"), 1, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"int32"), 1, True, )
paddle.median(Tensor([3, 4, 2],"int32"), 1, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"int32"), 2, False, )
paddle.median(Tensor([3, 4, 2],"int32"), 2, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"int32"), 2, True, )
paddle.median(Tensor([3, 4, 2],"int32"), 2, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"int32"), None, False, )
paddle.median(Tensor([3, 4, 2],"int32"), None, True, )
paddle.median(Tensor([3, 4, 2],"int64"), -1, False, )
paddle.median(Tensor([3, 4, 2],"int64"), -1, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"int64"), -1, True, )
paddle.median(Tensor([3, 4, 2],"int64"), -1, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"int64"), 0, False, )
paddle.median(Tensor([3, 4, 2],"int64"), 0, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"int64"), 0, True, )
paddle.median(Tensor([3, 4, 2],"int64"), 0, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"int64"), 1, False, )
paddle.median(Tensor([3, 4, 2],"int64"), 1, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"int64"), 1, True, )
paddle.median(Tensor([3, 4, 2],"int64"), 1, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"int64"), 2, False, )
paddle.median(Tensor([3, 4, 2],"int64"), 2, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"int64"), 2, True, )
paddle.median(Tensor([3, 4, 2],"int64"), 2, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"int64"), None, False, )
paddle.median(Tensor([3, 4, 2],"int64"), None, True, )
paddle.median(Tensor([3, 4],"float16"), -1, False, )
paddle.median(Tensor([3, 4],"float16"), -1, False, mode="min", )
paddle.median(Tensor([3, 4],"float16"), -1, True, )
paddle.median(Tensor([3, 4],"float16"), -1, True, mode="min", )
paddle.median(Tensor([3, 4],"float16"), 0, False, )
paddle.median(Tensor([3, 4],"float16"), 0, False, mode="min", )
paddle.median(Tensor([3, 4],"float16"), 0, True, )
paddle.median(Tensor([3, 4],"float16"), 0, True, mode="min", )
paddle.median(Tensor([3, 4],"float16"), 1, False, )
paddle.median(Tensor([3, 4],"float16"), 1, False, mode="min", )
paddle.median(Tensor([3, 4],"float16"), 1, True, )
paddle.median(Tensor([3, 4],"float16"), 1, True, mode="min", )
paddle.median(Tensor([3, 4],"float16"), None, False, )
paddle.median(Tensor([3, 4],"float16"), None, False, mode="min", )
paddle.median(Tensor([3, 4],"float16"), None, True, )
paddle.median(Tensor([3, 4],"float16"), None, True, mode="min", )
paddle.median(Tensor([3, 4],"float32"), -1, False, )
paddle.median(Tensor([3, 4],"float32"), -1, True, )
paddle.median(Tensor([3, 4],"float32"), 0, False, )
paddle.median(Tensor([3, 4],"float32"), 0, True, )
paddle.median(Tensor([3, 4],"float32"), 1, False, )
paddle.median(Tensor([3, 4],"float32"), 1, True, )
paddle.median(Tensor([3, 4],"float32"), None, False, )
paddle.median(Tensor([3, 4],"float32"), None, True, )
paddle.median(Tensor([3, 4],"float64"), -1, False, )
paddle.median(Tensor([3, 4],"float64"), -1, True, )
paddle.median(Tensor([3, 4],"float64"), 0, )
paddle.median(Tensor([3, 4],"float64"), 0, False, )
paddle.median(Tensor([3, 4],"float64"), 0, True, )
paddle.median(Tensor([3, 4],"float64"), 1, False, )
paddle.median(Tensor([3, 4],"float64"), 1, True, )
paddle.median(Tensor([3, 4],"float64"), None, False, )
paddle.median(Tensor([3, 4],"float64"), None, True, )
paddle.median(Tensor([3, 5],"float32"), axis=None, )
paddle.median(Tensor([3, 5],"float32"), keepdim=True, )
paddle.median(Tensor([5, 4],"float32"), -1, False, mode="min", )
paddle.median(Tensor([5, 4],"float32"), -1, True, mode="min", )
paddle.median(Tensor([5, 4],"float32"), 0, False, mode="min", )
paddle.median(Tensor([5, 4],"float32"), 0, True, mode="min", )
paddle.median(Tensor([5, 4],"float32"), 1, False, mode="min", )
paddle.median(Tensor([5, 4],"float32"), 1, True, mode="min", )
paddle.median(Tensor([5, 4],"float32"), None, False, mode="min", )
paddle.median(Tensor([5, 4],"float32"), None, True, mode="min", )
paddle.median(Tensor([5, 4],"float64"), -1, False, mode="min", )
paddle.median(Tensor([5, 4],"float64"), -1, True, mode="min", )
paddle.median(Tensor([5, 4],"float64"), 0, False, mode="min", )
paddle.median(Tensor([5, 4],"float64"), 0, True, mode="min", )
paddle.median(Tensor([5, 4],"float64"), 1, False, mode="min", )
paddle.median(Tensor([5, 4],"float64"), 1, True, mode="min", )
paddle.median(Tensor([5, 4],"float64"), None, False, mode="min", )
paddle.median(Tensor([5, 4],"float64"), None, True, mode="min", )
paddle.median(Tensor([5],"float32"), axis=0, )
paddle.median(Tensor([],"float32"), axis=-1, )
paddle.median(Tensor([],"float32"), axis=0, )
paddle.median(Tensor([],"float32"), axis=None, )
paddle.median(x=Tensor([4, 4, 4],"float32"), axis=-2, keepdim=True, )
paddle.median(x=Tensor([4, 4, 4],"float32"), axis=0, keepdim=False, )
paddle.median(x=Tensor([4, 4, 4],"float32"), axis=1, keepdim=False, )
paddle.median(x=Tensor([4, 4, 4],"float32"), axis=1, keepdim=True, )
paddle.mod(Tensor([10, 1024],"int64"), Tensor([10, 1024],"int64"), )
paddle.mod(Tensor([10, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.mod(Tensor([1],"int32"), Tensor([1],"int32"), )
paddle.mod(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.mod(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.mod(Tensor([2, 4, 5],"int32"), Tensor([2, 4, 5],"int32"), )
paddle.mod(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.mod(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.mod(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.mod(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.mod(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.mod(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.mod(Tensor([4, 5],"int32"), Tensor([4, 5],"int32"), )
paddle.mod(Tensor([6, 2, 4, 5],"int32"), Tensor([6, 2, 4, 5],"int32"), )
paddle.mod(Tensor([6],"int32"), Tensor([6],"int32"), )
paddle.mod(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.mod(Tensor([],"float32"), Tensor([],"float32"), )
paddle.mod(Tensor([],"int64"), Tensor([],"int64"), )
paddle.mode(Tensor([2, 10, 10],"float64"), -1, )
paddle.mode(Tensor([2, 10, 10],"float64"), -1, keepdim=True, )
paddle.mode(Tensor([2, 10, 10],"float64"), 1, )
paddle.mode(Tensor([2, 10, 10],"float64"), 1, keepdim=True, )
paddle.mode(Tensor([5],"float32"), )
paddle.mode(x=Tensor([3, 2, 3],"float32"), )
paddle.mode(x=Tensor([3, 2, 3],"float64"), )
paddle.mode(x=Tensor([3, 2, 3],"float64"), axis=1, keepdim=False, )
paddle.mode(x=Tensor([3, 2, 3],"float64"), axis=2, keepdim=True, )
paddle.mode(x=Tensor([3, 2, 3],"int32"), )
paddle.mode(x=Tensor([3, 2, 3],"int64"), )
paddle.nanmedian(Tensor([120],"float32"), keepdim=False, )
paddle.nanmedian(Tensor([120],"float32"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([120],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([120],"float32"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([120],"float64"), keepdim=False, )
paddle.nanmedian(Tensor([120],"float64"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([120],"float64"), keepdim=True, )
paddle.nanmedian(Tensor([120],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 100],"float32"), axis=1, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=-1, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=-1, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=-2, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=-2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=0, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=0, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=2, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=list[0,-1,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=list[0,-1,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=list[0,1,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=list[0,1,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=list[0,2,1,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=list[0,2,1,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=list[0,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=list[0,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=tuple(1,2,), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=tuple(1,2,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=tuple(1,2,3,), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=tuple(1,2,3,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float64"), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float64"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float64"), keepdim=True, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 3],"float64"), axis=1, keepdim=False, )
paddle.nanmedian(Tensor([2, 3],"float64"), axis=1, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([3, 5],"float32"), axis=None, )
paddle.nanmedian(Tensor([3, 5],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([4, 5],"float64"), axis=1, )
paddle.nanmedian(Tensor([4, 5],"float64"), axis=1, mode="min", )
paddle.nanmedian(Tensor([4, 5],"float64"), keepdim=True, )
paddle.nanmedian(Tensor([4, 5],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([5],"float32"), axis=0, )
paddle.nanmedian(Tensor([],"float32"), )
paddle.nanmedian(Tensor([],"float32"), axis=-1, )
paddle.nanmedian(Tensor([],"float32"), axis=0, )
paddle.nanmedian(Tensor([],"float32"), axis=None, )
paddle.nanmedian(Tensor([],"float32"), mode="min", )
paddle.negative(Tensor([2, 3, 4, 5],"float16"), )
paddle.negative(Tensor([2, 3, 4, 5],"float32"), )
paddle.negative(Tensor([2, 3, 4, 5],"float64"), )
paddle.negative(Tensor([2, 3, 4, 5],"int16"), )
paddle.negative(Tensor([2, 3, 4, 5],"int32"), )
paddle.negative(Tensor([2, 3, 4, 5],"int64"), )
paddle.Tensor.max(Tensor([1, 1, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 1, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 1, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 1, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 1, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 1, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 1, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 1, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 1, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 1, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 1, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 1, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 1, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 1, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 1, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 1, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 1, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 1, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 1, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 1, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 1, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 1, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 1, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 1, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 1, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 1, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 1, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 1, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 1, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 1, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 1, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 1, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 1, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 1, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 1, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 10, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 10, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 10, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 10, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 10, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 10, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 10, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 10, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 10, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 10, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 10, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 10, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 10, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 10, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 10, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 10, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 10, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 10, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 10, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 101, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 101, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 10164, 2],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 10164, 4],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 102, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 102, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 102, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 102, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 10285],"float32"), )
paddle.Tensor.max(Tensor([1, 103, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 103, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 105, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 105, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 105, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 105, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 105840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 106, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 106, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 107, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 107, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 108, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 108, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 109, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 109, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 11, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 11, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 11, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 11, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 11, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 11, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 11, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 11, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 11, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 11, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 11, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 11, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 11, 4789],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 11, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 11, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 11, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 11, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 11, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 11, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 11, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 11, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 11, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 11, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 11109, 11],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 11109, 2],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 112, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 112, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 113, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 113, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 113, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 113, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 116, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 116, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 117, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 117, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 119, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 119, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 12, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 12, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 12, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 12, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 12, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 12, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 12, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 12, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 12, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 12, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 12, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 12, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 12, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 12, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 12, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 12, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 12, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 12, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 12, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 12, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 12, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 12, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 12, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 12, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 12, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 12, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 12, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 12, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 12096, 2],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 122, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 122, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 123, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 123, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 124, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 124, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 126, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 126, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 127, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 127, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 129, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 129, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 13, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 13, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 13, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 13, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 13, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 13, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 13, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 13, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 13, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 13, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 13, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 13, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 13, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 13, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 13, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 13, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 13, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 13, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 13, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 13, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 13, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 13, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 131, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 131, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 132, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 132, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 138, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 138, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 138120],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 139, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 139, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 139, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 139, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 14, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 14, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 14, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 14, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 14, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 14, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 14, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 14, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 14, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 14, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 14, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 14, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 14, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 14, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 14, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 14, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 14, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 14, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 14, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 14, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 14, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 14, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 14, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 14, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 14, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 14, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 14, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 140, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 140, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 142, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 142, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 145, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 145, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 146, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 146, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 149, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 149, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 15, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 15, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 15, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 15, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 15, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 15, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 15, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 15, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 15, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 15, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 15, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 15, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 15, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 15, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 15, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 15, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 15, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 15, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 15, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 15, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 15, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 15, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 150, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 150, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 150, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 150, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 150402],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 153450],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 156, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 156, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 158580],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 16, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 16, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 16, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 16, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 16, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 16, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 16, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 16, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 16, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 16, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 16, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 16, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 16, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 16, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 16, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 16, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 16, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 16, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 16, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 16, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 16, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 16, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 16, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 16, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 16, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 16, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 166533],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 168, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 168, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 168795],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 169, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 169, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 17, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 17, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 17, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 17, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 17, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 17, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 17, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 17, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 17, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 17, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 17, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 17, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 17, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 17, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 17, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 17, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 17, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 17, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 17, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 17, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 17, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 17, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 171888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 172, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 172, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 176490],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 177276],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 18, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 18, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 18, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 18, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 18, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 18, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 18, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 18, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 18, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 18, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 18, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 18, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 18, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 18, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 18, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 18, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 18, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 18, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 18, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 18, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 18, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 18, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 182391],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 185691],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 188256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 19, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 19, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 19, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 19, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 19, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 19, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 19, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 19, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 19, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 19, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 19, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 19, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 19, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 19, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 19, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 19, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 19, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 19, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 19, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 19, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 19, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 19, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 19, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 19, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 19, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 19, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 19, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 19, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 19, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 19, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 190, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 190, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 191301],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 196416],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 196944],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 198249],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 2, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 2, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 2, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 2, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 2, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 2, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 2, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 2, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 2, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 2, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 2, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 2, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 2, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 2, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 2, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 2, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 2, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 2, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 2, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 2, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 2, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 2, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 2, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 2, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 2, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 2, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 2, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 2, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 2, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 2, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 20, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 20, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 20, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 20, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 20, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 20, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 20, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 20, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 20, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 20, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 20, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 20, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 20, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 20, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 20, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 20, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 20, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 20, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 200022],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 202572],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 204624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 208197],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 209, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 209, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 21, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 21, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 21, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 21, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 21, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 21, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 21, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 21, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 21, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 21, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 21, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 21, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 21, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 21, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 21, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 21, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 21, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 21, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 21, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 21, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 21, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 21, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 210, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 210, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 211038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 212784],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 214107],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 214830],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 215, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 215, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 21504],"float32"), )
paddle.Tensor.max(Tensor([1, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 217689],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 218, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 218, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 218, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 218, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 22, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 22, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 22, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 22, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 22, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 22, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 22, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 22, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 22, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 22, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 22, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 22, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 22, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 22, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 22, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 22, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 22, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 22, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 22, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 22, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 22, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 22, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 220992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 222012],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 223554],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 223827],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 225, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 225, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 227, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 227, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 227919],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 229965],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 23, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 23, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 23, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 23, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 23, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 23, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 23, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 23, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 23, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 23, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 23, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 23, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 23, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 23, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 23, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 23, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 23, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 23, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 233244],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 236334],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 237360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 237870],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 239382],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 24, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 24, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 24, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 24, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 24, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 24, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 24, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 24, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 24, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 24, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 24, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 24, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 24, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 24, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 24, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 24, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 24, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 24, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 24, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 24, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 24, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 24, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 241731],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 24276],"float32"), )
paddle.Tensor.max(Tensor([1, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 243474],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 245823],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 246051],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 247086],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 248616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 249, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 249, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 249405],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 25, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 25, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 25, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 25, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 25, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 25, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 25, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 25, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 25, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 25, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 25, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 25, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 25, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 25, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 25, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 25, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 25, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 25, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 25, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 25, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 25, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 25, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 250656],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 251676],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 252, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 252, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 252195],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 252681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 253728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 255, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 255, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 255780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 26, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 26, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 26, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 26, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 26, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 26, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 26, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 26, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 26, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 26, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 26, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 26, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 26, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 26, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 26, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 26, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 261681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 262194],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 264978],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 267030],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 27, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 27, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 27, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 27, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 27, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 27, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 27, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 27, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 27, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 27, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 27, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 27, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 27, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 27, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 27, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 27, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 27, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 27, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 27, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 27, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 270096],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 272118],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 27216],"float32"), )
paddle.Tensor.max(Tensor([1, 276210],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 279279],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 279300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 28, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 28, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 28, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 28, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 28, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 28, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 28, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 28, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 28, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 28, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 28, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 28, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 28, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 28, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 28, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 28, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 28, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 28, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 283167],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 283905],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 285444],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 29, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 29, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 29, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 29, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 29, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 29, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 29, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 29, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 29, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 29, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 29, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 29, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 29, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 29, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 29, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 29, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 29, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 29, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 29, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 29, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 29, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 29, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 290052],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 293397],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 293622],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 295443],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 295647],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 296, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 296, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 296700],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 299250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 3, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 3, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 3, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 3, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 3, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 3, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 3, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 3, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 3, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 3, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 3, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 3, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 3, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 3, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 3, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 3, 4789],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 3, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 3, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 3, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 3, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 3, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 3, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 3, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 3, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 3, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 3, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 3, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 3, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 3, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 30, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 30, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 30, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 30, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 30, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 30, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 30, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 30, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 30, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 30, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 30, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 30, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 30, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 30, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 30, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 30, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 30, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 30, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 30, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 30, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 30, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 30, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 300, 30976],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 300, 33856],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 300, 36864],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 300762],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 303, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 303, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 30324],"float32"), )
paddle.Tensor.max(Tensor([1, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 306900],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 31, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 31, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 31, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 31, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 31, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 31, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 31, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 31, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 31, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 31, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 31, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 31, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 31, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 31, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 31, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 31, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 31, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 31, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 311535],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 312324],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 314595],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 317160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 319200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 32, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 32, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 32, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 32, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 32, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 32, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 32, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 32, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 32, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 32, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 32, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 32, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 322245],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 325113],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 327360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 329, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 329, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 33, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 33, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 33, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 33, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 33, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 33, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 33, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 33, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 33, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 33, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 33, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 33, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 33, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 33, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 33, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 33, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 33, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 33, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 33, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 33, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 33, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 33, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 331452],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 331722],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 333, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 333, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 333018],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 335568],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 33600],"float32"), )
paddle.Tensor.max(Tensor([1, 34, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 34, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 34, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 34, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 34, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 34, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 34, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 34, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 34, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 34, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 34, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 34, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 34, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 34, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 34, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 34, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 340686],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 345618],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 347820],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 349155],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 35, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 35, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 35, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 35, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 35, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 35, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 35, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 35, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 35, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 35, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 35, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 35, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 35, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 35, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 35, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 35, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 35280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 354501],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 356541],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 359100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 3598],"float32"), )
paddle.Tensor.max(Tensor([1, 36, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 36, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 36, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 36, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 36, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 36, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 36, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 36, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 36, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 36, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 36, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 36, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 36000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 36828, 4],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 36858],"float32"), )
paddle.Tensor.max(Tensor([1, 369105],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 37, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 37, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 37, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 37, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 37, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 37, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 37, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 37, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 37, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 37, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 37, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 37, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 37, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 37, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 37, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 37, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 37044],"float32"), )
paddle.Tensor.max(Tensor([1, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 377514],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 37800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 378540],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 379050],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 38, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 38, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 38, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 38, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 38, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 38, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 38, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 38, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 38, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 38, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 38, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 38, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 38, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 38, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 38, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 38, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 38367, 4],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 38402],"float32"), )
paddle.Tensor.max(Tensor([1, 386694],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 388032],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 388740],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 38940],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 39, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 39, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 39, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 39, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 39, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 39, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 39, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 39, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 39, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 39, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 39, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 39, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 39, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 39, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 39690],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 397467],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 398487],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 4, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 4, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 4, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 4, 2],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 4, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 4, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 4, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 4, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 4, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 4, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 4, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 4, 4789],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 4, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 4, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 4, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 4, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 4, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 4, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 4, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 4, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 4, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 4, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 4, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 4, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 4, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 4, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 40, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 40, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 40, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 40, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 40, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 40, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 40, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 40, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 40, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 40, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 40, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 40, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 40, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 40, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 40, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 40, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 40, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 40, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 40, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 40, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 400, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 400, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 40656],"float32"), )
paddle.Tensor.max(Tensor([1, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 41, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 41, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 41, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 41, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 41, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 41, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 41, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 41, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 41, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 41, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 41, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 41, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 41, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 41, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 4165],"float32"), )
paddle.Tensor.max(Tensor([1, 42, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 42, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 42, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 42, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 42, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 42, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 42, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 42, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 42, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 42, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 42780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 429660],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 43, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 43, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 43, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 43, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 43, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 43, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 43, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 43, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 43, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 43, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 43, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 43, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 43, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 43, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 43560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 44, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 44, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 44, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 44, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 44, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 44, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 44, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 44, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 44, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 44, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 44, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 44, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 44, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 44, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 44, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 44, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 44, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 44, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 44220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 44436],"float32"), )
paddle.Tensor.max(Tensor([1, 45, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 45, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 45, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 45, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 45, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 45, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 45, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 45, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 45, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 45, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 45, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 45, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 45, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 45, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 45, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 45, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 45, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 45, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 451143],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 45540],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 45750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 46, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 46, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 46, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 46, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 46, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 46, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 46, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 46, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 46, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 46, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 46, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 46, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 46, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 46, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 46, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 46, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 46080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 46230],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 46305],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 46800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 46920],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 47, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 47, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 47, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 47, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 47, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 47, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 47, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 47, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 47, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 47, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 47, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 47, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 47, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 47, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 47, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 47, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 47, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 47, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 47, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 47, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 47520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 47610],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 4789],"float32"), )
paddle.Tensor.max(Tensor([1, 48, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 48, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 48, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 48, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 48, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 48, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 48, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 48, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 48, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 48, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 48, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 48, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 48300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 48384],"float32"), )
paddle.Tensor.max(Tensor([1, 48600],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 49, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 49, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 49, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 49, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 49, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 49, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 49, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 49, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 49, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 49, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 49410],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 49680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 5, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 5, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 5, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 5, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 5, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 5, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 5, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 5, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 5, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 5, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 5, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 5, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 5, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 5, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 5, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 5, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 5, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 5, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 5, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 5, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 5, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 5, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 5, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 5, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 5, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 50, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 50, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 50, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 50, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 50, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 50, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 50, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 50, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 50220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 51, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 51, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 51, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 51, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 51, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 51, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 51, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 51, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 51, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 51, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 51, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 51, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 51030],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 51240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 51840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 52, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 52, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 52, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 52, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 52, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 52, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 52, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 52, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 52, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 52, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 52, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 52, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 52, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 52, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 52, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 52, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 52080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 52500],"float32"), )
paddle.Tensor.max(Tensor([1, 52560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 52920],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 53, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 53, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 53, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 53, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 53, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 53, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 53250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 53460],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 53760],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 54, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 54, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 54, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 54, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 54, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 54, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 54, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 54, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 54, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 54, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 54, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 54, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 54000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 5440],"float32"), )
paddle.Tensor.max(Tensor([1, 54600],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 54750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 54870],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 55, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 55, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 55, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 55, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 55, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 55, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 55, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 55, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 55680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 55755],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 55845],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 55890],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 56, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 56, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 56, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 56, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 56, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 56, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 56, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 56, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 56, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 56, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 56, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 56, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 56, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 56, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 56, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 56, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 56, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 56, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 56640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 56730],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 56784],"float32"), )
paddle.Tensor.max(Tensor([1, 57, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 57, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 57, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 57, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 57, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 57, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 57, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 57, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 57, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 57, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 57, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 57, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 57285],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 57525],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 57600],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 57750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 57960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 58, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 58, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 58, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 58, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 58, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 58, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 58, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 58, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 58, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 58, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 58800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 59, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 59, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 59, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 59, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 59, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 59, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 59, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 59, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 59, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 59, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 59250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 59295],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 59520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 6, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 6, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 6, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 6, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 6, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 6, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 6, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 6, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 6, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 6, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 6, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 6, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 6, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 6, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 6, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 6, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 6, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 6, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 6, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 6, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 6, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 6, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 6, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 60, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 60, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 60, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 60, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 60, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 60, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 60, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 60, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 60, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 60, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 60, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 60, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 60, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 60, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 60300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 60450],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 61, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 61, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 61065],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 61200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 61236],"float32"), )
paddle.Tensor.max(Tensor([1, 61305],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 61500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 6150],"float32"), )
paddle.Tensor.max(Tensor([1, 62, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 62, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 62, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 62, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 62, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 62, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 62, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 62, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 62, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 62, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 62, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 62, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 62, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 62, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 62310],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 62700],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 63, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 63, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 63, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 63, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 63, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 63, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 63, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 63, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 63, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 63, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 63, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 63, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 63000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 63135],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 63315],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 64, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 64, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 64, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 64, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 64, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 64, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 6400],"float32"), )
paddle.Tensor.max(Tensor([1, 64170],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 64320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 64605],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 65, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 65, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 65, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 65, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 65, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 65, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 65, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 65, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 65, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 65, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 65, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 65, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 65, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 65, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 65, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 65, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 65856],"float32"), )
paddle.Tensor.max(Tensor([1, 66, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 66, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 66, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 66, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 66150],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 66240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 66960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 67, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 67, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 67, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 67, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 67, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 67, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 67260],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 67335],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 67890],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 68, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 68, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 68, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 68, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 6804, 11],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 68040],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 68310],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 68400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 6885],"float32"), )
paddle.Tensor.max(Tensor([1, 68985],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 69, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 69, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 69, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 69, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 69, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 69, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 69, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 69, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 69300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 69345],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 69750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 69930],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 7, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 7, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 7, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 7, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 7, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 7, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 7, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 7, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 7, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 7, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 7, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 7, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 7, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 7, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 7, 4789],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 7, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 7, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 7, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 7, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 7, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 7, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 7, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 7, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 7, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 7, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 7, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 70, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 70, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 70, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 70, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 70, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 70, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 70080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 70350],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 70644],"float32"), )
paddle.Tensor.max(Tensor([1, 71, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 71, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 71, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 71, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 71, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 71, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 71685],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 71820],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 72, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 72, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 72, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 72, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 72, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 72, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 72, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 72, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 72, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 72, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 72000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 72960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 73, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 73, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 73, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 73, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 73, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 73, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 73, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 73, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 73125],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 73365],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 74, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 74, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 74340],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 74370],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 74520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 74550],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 75, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 75, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 75, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 75, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 75240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 75330],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 75600],"float32"), )
paddle.Tensor.max(Tensor([1, 75615],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 76, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 76, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 76, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 76, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 76260],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 76380],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 76800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 7681],"float32"), )
paddle.Tensor.max(Tensor([1, 77, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 77, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 77, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 77, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 77, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 77, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 77220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 77625],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 78, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 78, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 78, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 78, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 78, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 78, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 78, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 78, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 78120],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 78660],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 78750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 79, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 79, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 79, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 79, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 79380],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 8, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 8, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 8, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 8, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 8, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 8, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 8, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 8, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 8, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 8, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 8, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 8, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 8, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 8, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 8, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 8, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 8, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 8, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 8, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 8, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 8, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 8, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 8, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 8, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 8, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 8, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 8, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 80, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 80, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 80, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 80, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 80, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 80, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 80, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 80, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 80, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 80, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 80400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 80640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 81, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 81, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 82080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 83, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 83, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 83, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 83, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 84, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 84, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 8400, 11],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 8400],"float32"), )
paddle.Tensor.max(Tensor([1, 85, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 85, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 85, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 85, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 8500],"float32"), )
paddle.Tensor.max(Tensor([1, 8580],"float32"), )
paddle.Tensor.max(Tensor([1, 86, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 86, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 86, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 86, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 87, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 87, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 87, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 87, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 87600],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 88, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 88, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 88560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 9, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 9, 21504],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 9, 21504],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 9, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 9, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 9, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 9, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 9, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 9, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 9, 40656],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 9, 40656],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 9, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 9, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 9, 48384],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 9, 48384],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 9, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 9, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 9, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 9, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 9, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 9, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 9, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 9, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 9, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 9, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 9, 75600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 9, 75600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 9, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 9, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 90060],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 91, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 91, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 91, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 91, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 91980],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 92, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 92, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 93, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 93, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 93, 61236],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 93, 61236],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 93, 70644],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 93, 70644],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 9382],"float32"), )
paddle.Tensor.max(Tensor([1, 95760],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 96, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 96, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 96, 52500],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 96, 52500],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 97, 44436],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 97, 44436],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 97, 56784],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 97, 56784],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 99, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 99, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 168795],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 185691],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 193368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 194157],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 196416],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 204624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 217689],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 220992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 223554],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 234804],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 236313],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 241221],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 243474],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 249405],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 253728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 255780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 261681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 270096],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 272118],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 279300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 283905],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 285444],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 293397],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 295647],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 300762],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 306900],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 312324],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 317160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 325113],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 327360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 331452],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 340686],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 346086],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 347820],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 350178],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 356541],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 369105],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 377514],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 388032],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 38940],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 46080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 47610],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 48000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 49680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 51030],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 51840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 52560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 53760],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 54000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 54750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 59250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 59295],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 59520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 61065],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 63360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 63840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 68340],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 68985],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 70680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 71100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 74100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 75240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 75555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 75840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 78750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 79935],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 81000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 82125],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10, 95760],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10032, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10032, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([100352, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10064, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1024, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([102400, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([102400, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10285, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10308, 4],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10336, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10336, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10368, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10368, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10608, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10608, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10640, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10640, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10752, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10752, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10800, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10880, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10880, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10890, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10920, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10920, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10944, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([10944, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 171888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 185691],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 194157],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 199485],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 202572],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 220992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 223827],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 234804],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 236313],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 243474],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 249405],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 250656],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 262194],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 264978],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 270096],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 272118],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 272649],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 279300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 283905],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 295443],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 309255],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 317160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 331452],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 333018],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 354501],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 359100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 367059],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 369105],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 379050],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 386694],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 398487],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 40320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 43560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 45135],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 46800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 48300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 51030],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 51840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 55755],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 56640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 57600],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 59295],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 60300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 60750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 61500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 62160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 62730],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 63360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 64680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 68160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 69345],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 70290],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 70350],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 72000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 74250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 75375],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 75555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 77760],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 78750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 79680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 81900],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 83220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11, 86940],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([110464, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([110592, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11088, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11088, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11152, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11152, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11248, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11248, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11400, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11424, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11424, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11480, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1152, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11520, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11520, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([115200, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11552, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11552, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11552, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1156, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11760, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11760, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11840, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11856, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([11856, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 1200, 100],"float32"), 2, )
paddle.Tensor.max(Tensor([12, 168795],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 171888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 180048],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 191301],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 193368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 196416],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 200022],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 202572],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 208692],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 217689],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 222012],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 223827],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 233244],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 236313],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 243474],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 247086],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 248616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 250656],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 252195],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 253728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 255780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 262194],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 264978],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 276210],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 283905],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 285444],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 300, 100],"float32"), 2, )
paddle.Tensor.max(Tensor([12, 300762],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 314595],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 322245],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 327360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 333018],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 339150],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 340686],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 346086],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 347820],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 349155],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 356541],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 367059],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 379050],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 388740],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 38940],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 4, 19, 34, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 4, 19, 34],"int64"), 1, )
paddle.Tensor.max(Tensor([12, 4, 38, 68, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 4, 38, 68],"int64"), 1, )
paddle.Tensor.max(Tensor([12, 4, 76, 136, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 4, 76, 136],"int64"), 1, )
paddle.Tensor.max(Tensor([12, 40320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 429660],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 44520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 46080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 46800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 4800, 100],"float32"), 2, )
paddle.Tensor.max(Tensor([12, 48240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 49680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 52080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 52500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 52560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 57960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 58320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 59295],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 60750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 61305],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 63000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 63135],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 63720],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 67200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 69750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 72000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 72360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 74520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 75375],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 75840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 78120],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 78750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 82080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 90060],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12096, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12096, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12136, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12136, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12160, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12160, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([121600, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([121600, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12240, 4],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12300, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([123904, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12432, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12432, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12464, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12464, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12480, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([124800, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12544, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([126464, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([126464, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12768, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12768, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12792, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12800, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12800, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12800, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([128000, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([128],"int64"), )
paddle.Tensor.max(Tensor([1296, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([12960, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([129792, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 103320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 16],"int64"), )
paddle.Tensor.max(Tensor([13, 188256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 193368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 200022],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 208692],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 214107],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 220992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 223554],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 223827],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 237360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 241731],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 248616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 252681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 255780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 262194],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 270096],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 276210],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 278562],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 283167],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 283905],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 286977],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 295443],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 299250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 3, 3],"float32"), 1, )
paddle.Tensor.max(Tensor([13, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 311535],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 322245],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 325113],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 327360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 32],"int64"), )
paddle.Tensor.max(Tensor([13, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 331452],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 333018],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 340686],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 347820],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 354501],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 356541],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 368280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 377514],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 386694],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 397467],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 398487],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 3],"float32"), 1, )
paddle.Tensor.max(Tensor([13, 3],"int64"), )
paddle.Tensor.max(Tensor([13, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 440433],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 44520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 451143],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 46230],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 46920],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 48240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 49410],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 49680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 53250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 53760],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 55680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 56640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 57240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 60750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 63000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 63360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 64350],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 64605],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 68160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 69300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 69750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 7, 16],"float32"), )
paddle.Tensor.max(Tensor([13, 70350],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 72000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 74520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 75240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 75375],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 75555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 76380],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 79380],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 80640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 84420],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 86640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 91980],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13104, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13104, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([131328, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([131328, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13440, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13440, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([134400, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([134400, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([134784, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([136000, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([136448, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([136448, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13770, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13776, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([139776, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([139776, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([13],"int64"), )
paddle.Tensor.max(Tensor([14, 185691],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 188256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 191835],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 194157],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 200022],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 220992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 223827],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 234804],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 236313],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 243474],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 248616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 250656],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 253728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 255780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 261681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 272118],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 279300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 283167],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 285444],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 293397],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 293622],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 295443],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 295647],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 306900],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 322245],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 325113],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 327360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 333018],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 339150],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 349155],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 354501],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 356541],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 377514],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 397467],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 44250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 48300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 50400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 54270],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 54750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 56280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 56640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 58800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 59220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 59520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 61440],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 62700],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 64170],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 64320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 66150],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 67500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 67890],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 68040],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 68625],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 68985],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 70290],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 71415],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 72000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 72960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 73500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 76860],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 78750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 79380],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14, 80640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([141056, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14112, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14112, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14112, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14392, 4],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([14400, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([147456, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 171888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 193368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 202572],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 219453],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 223827],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 230175],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 234804],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 241731],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 248616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 249405],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 250656],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 255780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 261681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 270096],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 276210],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 279279],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 283167],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 285444],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 293397],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 295647],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 299250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 300762],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 306900],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 311535],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 312324],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 317160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 325113],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 327360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 333018],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 347820],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 349155],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 350178],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 369105],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 379050],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 386694],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 397467],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 40320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 44520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 52560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 53100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 54000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 54750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 56700],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 57750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 57960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 59220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 62310],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 64170],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 66960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 67890],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 68040],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 78120],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 79380],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 82080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15, 94500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([150528, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([150784, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15210, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15362, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15488, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([15488, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([155648, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([155648, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([155904, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([156672, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1568, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 10, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 10, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 10, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 10, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 10, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 10, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 10, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 10, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 10, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 10, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 10164],"float32"), )
paddle.Tensor.max(Tensor([16, 11, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 11, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 11, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 11, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 11, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 11, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 11, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 11, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 11109],"float32"), )
paddle.Tensor.max(Tensor([16, 12, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 12, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 12, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 12, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 12, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 12, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 12, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 12, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 12, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 12, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 12, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 12096],"float32"), )
paddle.Tensor.max(Tensor([16, 13, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 13, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 13, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 13, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 13, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 13, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 13, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 13, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 13, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 13, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 13, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 13, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 13, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 14, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 14, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 14, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 14, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 14, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 14, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 14, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 14, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 14, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 14, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 14, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 14, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 14, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 15, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 15, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 15, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 15, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 15, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 15, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 15, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 15, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 15, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 15, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 15, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 15, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 15, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 16, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 16, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 16, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 16, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 16, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 16, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 16, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 16, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 16, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 16, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 16, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 16, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 16, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 17, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 17, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 17, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 17, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 17, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 17, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 17, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 17, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 17, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 17, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 17, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 17, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 17, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 17, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 17, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 18, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 18, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 18, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 18, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 18, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 18, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 18, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 18, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 18, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 18, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 18, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 18, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 18, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 18, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 18, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 182391],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 188256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 19, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 19, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 19, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 19, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 19, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 19, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 19, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 19, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 19, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 19, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 19, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 19, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 19, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 19, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 198249],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 2, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 2, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 20, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 20, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 20, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 20, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 20, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 20, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 20, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 20, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 20, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 20, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 20, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 20, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 20, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 202572],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 204624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 21, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 21, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 21, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 21, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 21, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 21, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 21, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 21, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 21, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 21, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 21, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 21, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 21, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 21, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 2100],"float32"), )
paddle.Tensor.max(Tensor([16, 2125],"float32"), )
paddle.Tensor.max(Tensor([16, 214107],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 22, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 22, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 22, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 22, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 22, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 22, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 22, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 22, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 22, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 22, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 22, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 22, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 22, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 22, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 222012],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 23, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 23, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 23, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 23, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 23, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 23, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 23, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 23, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 23, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 23, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 23, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 23, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 234804],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 24, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 24, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 24, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 24, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 24, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 24, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 24, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 24, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 24, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 24, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 24, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 24, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 24, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 24, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 241731],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 25, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 25, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 25, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 25, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 25, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 25, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 25, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 25, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 25, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 25, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 250656],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 252195],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 252681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 2541],"float32"), )
paddle.Tensor.max(Tensor([16, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 26, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 26, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 26, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 26, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 26, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 26, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 26, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 26, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 26, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 261681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 264978],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 27, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 27, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 27, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 27, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 27, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 27, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 27, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 27, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 27, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 27, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 27, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 270096],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 272649],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 278562],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 28, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 28, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 28, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 28, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 28, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 28, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 28, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 28, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 28, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 28, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 28, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 28, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 28, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 29, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 29, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 29, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 29, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 29, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 29, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 29, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 29, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 299250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 3, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 30, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 30, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 30, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 30, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 30, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 3024],"float32"), )
paddle.Tensor.max(Tensor([16, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 3060],"float32"), )
paddle.Tensor.max(Tensor([16, 306900],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 309255],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 31, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 31, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 31, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 31, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 31, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 31, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 31, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 31, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 31, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 31, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 312324],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 317160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 32, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 32, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 32, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 32, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 32, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 32, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 322245],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 33, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 33, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 33, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 33, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 337620],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 339150],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 34, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 34, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 34, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 34, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 34, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 340686],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 349155],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 35, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 35, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 35, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 35, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 35, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 350178],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 354501],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 3549],"float32"), )
paddle.Tensor.max(Tensor([16, 36, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 36, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 36, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 36, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 36, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 36, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 37, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 37, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 37, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 37, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 378540],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 379050],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 38, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 38, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 38, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 38, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 386694],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 39, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 39, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 39, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 39, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 40, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 40, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 40, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 40, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 40, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 4116],"float32"), )
paddle.Tensor.max(Tensor([16, 42, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 42, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 43, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 43, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 43, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 43, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 45, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 451143],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 45750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 46305],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 4725],"float32"), )
paddle.Tensor.max(Tensor([16, 48, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 48, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 48, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 49, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 5, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 5, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 5, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 50, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 50, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 51840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 52, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 52920],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 5376],"float32"), )
paddle.Tensor.max(Tensor([16, 54, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 54, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 54750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 55, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 56700],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 6, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 6, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 6069],"float32"), )
paddle.Tensor.max(Tensor([16, 60750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 62730],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 63000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 63135],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 6804],"float32"), )
paddle.Tensor.max(Tensor([16, 69300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 69345],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 7, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 7, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 7, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 7, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 72270],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 72360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 74100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 7581],"float32"), )
paddle.Tensor.max(Tensor([16, 77, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 77025],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 8, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 8, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 8, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 8, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 8, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 8, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 8, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 8, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 8, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 8, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 82080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 8400, 80],"float32"), -1, )
paddle.Tensor.max(Tensor([16, 8400],"float32"), )
paddle.Tensor.max(Tensor([16, 84420],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 86640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 86940],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 88200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16, 9, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 9, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 9, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 9, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 9, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 9, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 9, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 9, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 9, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 9, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([16, 9261],"float32"), )
paddle.Tensor.max(Tensor([1600, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1600, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([160512, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([160512, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([161024, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([162, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16384, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([164928, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([165376, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([165376, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([165888, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([16660, 4],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([169728, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([169728, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 171888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 191835],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 194157],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 196416],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 202572],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 204624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 208692],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 214107],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 223554],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 223827],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 234804],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 245823],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 253728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 262194],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 264978],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 270096],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 283905],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 295443],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 299250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 300762],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 327360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 339150],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 349155],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 354501],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 359100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 367059],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 368280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 377514],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 388740],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 40320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 440433],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 44250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 46800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 51750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 51840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 54000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 56730],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 59295],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 59520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 60750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 61065],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 62310],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 67200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 70875],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 71415],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 80640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 82080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 83070],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 83220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 88560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17, 94620],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17000, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([170240, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([170240, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([172032, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([172032, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1728, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([172800, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([174080, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([174240, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([174720, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([174720, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([175104, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([175104, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([17640, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([177408, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([177408, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([178432, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([178432, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([179968, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([179968, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 166533],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 168795],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 208197],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 208692],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 211038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 223827],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 245823],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 247086],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 248616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 250656],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 255780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 261681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 262194],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 272118],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 276210],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 283905],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 290052],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 295647],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 322245],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 325113],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 333018],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 388740],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 397467],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 49680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 52560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 53760],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 54000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 54750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 56730],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 57960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 58320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 58800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 59220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 59250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 59295],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 60390],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 63000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 63135],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 64605],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 71820],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 74100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 75240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 77625],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 81000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 82080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 83415],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18, 84420],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([182400, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([182784, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([182784, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([183680, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18432, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([184320, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([184320, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([184832, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([184832, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18496, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([18764, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([188160, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([188160, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([189440, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([189696, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([189696, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 208692],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 230175],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 243474],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 248616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 250656],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 253728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 255780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 261681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 270096],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 276210],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 279279],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 283905],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 295647],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 312324],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 319200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 322245],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 354501],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 367059],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 368280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 379050],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 388740],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 53100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 56280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 58320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 59520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 60450],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 61440],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 63000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 70875],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 74520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19, 78750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([19156, 4],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([192],"int64"), )
paddle.Tensor.max(Tensor([193536, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([193536, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1936, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([194176, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([194176, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([194560, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([194560, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([195840, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1976, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1976, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([198912, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([198912, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([199424, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([199424, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([199680, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([1],"float32"), )
paddle.Tensor.max(Tensor([1],"int64"), )
paddle.Tensor.max(Tensor([2, 1, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 1, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 1, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 1, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 1, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 1, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 1, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 1, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 1, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 1, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 1, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 1, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 1, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 1, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 1, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 1, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 1, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 1, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 1, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 1, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 1, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 1, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 10, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 10, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 10, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 10, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 10, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 10, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 10, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 10, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 10, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 10, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 10, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 10, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 10, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 10, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 10, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 10, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 10, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 10, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 10, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 10, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 10, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 10, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 100, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 100, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 100, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 100, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 100, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 100, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 101, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 101, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10164],"float32"), )
paddle.Tensor.max(Tensor([2, 102, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 102, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 102, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 102, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 102, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 102, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 102, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 102, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 102, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 102, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 102, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 102, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10285],"float32"), )
paddle.Tensor.max(Tensor([2, 103, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 103, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 103, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 103, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 103, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 103, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 103, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 103, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 105, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 105, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 105, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 105, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 105, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 105, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 105, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 105, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 105, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 105, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 105840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 106, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 106, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 106, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 106, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 106, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 106, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 107, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 107, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 107, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 107, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 107, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 107, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 108, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 108, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 108, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 108, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 108, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 108, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 108, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 108, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 108, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 108, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 108, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 108, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 10800, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 1083, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 109, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 109, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 109, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 109, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 11, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 11, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 11, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 11, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 11, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 11, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 11, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 11, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 11, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 11, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 11, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 11, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 11, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 11, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 11, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 11, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 11, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 11, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 11, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 110, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 110, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 110, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 110, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 111, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 111, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 111, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 111, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11109],"float32"), )
paddle.Tensor.max(Tensor([2, 112, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 112, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 112, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 112, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 112, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 112, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 113, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 113, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 113, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 113, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 113, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 113, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 113, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 113, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 114, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 114, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 114, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 114, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 114, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 114, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 114, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 114, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 114, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 114, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 115, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 115, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 115, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 115, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 115, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 115, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 116, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 116, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 116, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 116, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 116, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 116, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 116, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 116, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 11645, 80],"float32"), -1, )
paddle.Tensor.max(Tensor([2, 117, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 117, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 117, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 117, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 117, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 117, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 117, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 117, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 117, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 117, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 117, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 117, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 117, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 117, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 118, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 118, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 119, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 119, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 119, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 119, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 119, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 119, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 119, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 119, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 12, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 12, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 12, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 12, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 12, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 12, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 12, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 12, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 12, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 12, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 12, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 12, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 12, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 12, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 12, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 12, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 12, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 12, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 120, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 120, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 120, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 120, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 1200, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 12096],"float32"), )
paddle.Tensor.max(Tensor([2, 122, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 122, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 122, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 122, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 12288, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 123, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 123, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 123, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 123, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 123, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 123, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 123, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 123, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 123, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 123, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 123, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 123, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 124, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 124, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 124, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 124, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 125, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 125, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 125, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 125, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 126, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 126, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 126, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 126, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 126, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 126, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 127, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 127, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 129, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 129, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 129, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 129, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 13, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 13, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 13, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 13, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 13, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 13, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 13, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 13, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 13, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 13, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 13, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 13, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 13, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 13, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 13, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 13, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 13, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 13, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 13, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 13, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 130, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 130, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 130, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 130, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 131, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 131, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 132, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 132, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 132, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 132, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 132, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 132, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 132, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 132, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 132, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 132, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 132, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 132, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 132, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 132, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 133, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 133, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 133, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 133, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 136, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 136, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 138, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 138, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 138, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 138, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 138, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 138, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 13872, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 139, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 139, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 139, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 139, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 139, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 139, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 14, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 14, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 14, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 14, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 14, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 14, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 14, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 14, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 14, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 14, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 14, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 14, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 14, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 14, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 14, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 14, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 14, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 14, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 14, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 14, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 14, 4789],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 14, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 14, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 14, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 14, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 14, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 14, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 14, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 14, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 14, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 14, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 14, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 14, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 14, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 14, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 14, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 14, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 14, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 140, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 140, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 140, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 140, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 141, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 141, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 142, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 142, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 145, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 145, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 145, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 145, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 1452, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 146, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 146, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 146, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 146, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 146, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 146, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 147, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 147, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 149, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 149, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 149, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 149, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 15, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 15, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 15, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 15, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 15, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 15, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 15, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 15, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 15, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 15, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 15, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 15, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 15, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 15, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 15, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 15, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 15, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 150, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 150, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 150, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 150, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 150402],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 152, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 152, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 152, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 152, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 153, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 153, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 153, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 153, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 154, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 154, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 155, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 155, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 15552, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 156, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 156, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 156, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 156, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 157, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 157, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 158, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 158, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 158, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 158, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 159, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 159, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 159, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 159, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 159, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 159, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 16, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 16, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 16, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 16, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 16, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 16, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 16, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 16, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 16, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 16, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 16, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 16, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 16, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 16, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 16, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 16, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 16, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 16, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 16, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 16, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 16, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 16, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 16, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 16, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 16, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 16, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 16, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 16, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 16, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 160, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 160, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 160, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 160, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 163, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 163, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 166533],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 168, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 168, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 168, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 168, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 168, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 168, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 168795],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 169, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 169, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 169, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 169, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 17, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 17, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 17, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 17, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 17, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 17, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 17, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 17, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 17, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 17, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 17, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 17, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 17, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 17, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 17, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 17, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 17, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 17, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 17, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 17, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 17, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 17, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 17, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 17, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 17, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 17, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 170, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 170, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 170, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 170, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 171888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 1728, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 17328, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 176, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 176, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 176490],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 177, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 177, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 177, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 177, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 179, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 179, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 18, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 18, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 18, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 18, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 18, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 18, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 18, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 18, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 18, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 18, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 18, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 18, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 18, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 18, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 18, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 18, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 18, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 18, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 18, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 18, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 18, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 18, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 18, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 18, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 18, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 18, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 18, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 18, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 18, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 18, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 182391],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 184, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 184, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 184140],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 185, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 185, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 185691],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 188256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 189, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 189, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 189, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 189, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 19, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 19, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 19, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 19, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 19, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 19, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 19, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 19, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 19, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 19, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 19, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 19, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 19, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 19, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 19, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 19, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 19, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 19, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 19, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 19, 4789],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 19, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 19, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 19, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 19, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 19, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 19, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 19, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 19, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 19, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 19, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 19, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 19, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 19, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 19, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 19, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 19, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 190, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 190, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 190296],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 191301],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 191835],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 193368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 194, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 194, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 194, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 194, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 194157],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 196, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 196, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 196, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 196, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 196416],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 197, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 197, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 199485],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 2, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 2, 10],"int64"), )
paddle.Tensor.max(Tensor([2, 2, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 2, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 2, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 2, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 2, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2, 2],"float32"), axis=-1, )
paddle.Tensor.max(Tensor([2, 2, 2],"float32"), axis=1, )
paddle.Tensor.max(Tensor([2, 2, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 2, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 2, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 2, 35],"int64"), )
paddle.Tensor.max(Tensor([2, 2, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 2, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 2, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 2, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2, 4789],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 2, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 2, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 2, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 2, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 2, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 2, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 2, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 2, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 2, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 2, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 20, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 20, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 20, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 20, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 20, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 20, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 20, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 20, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 20, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 20, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 20, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 20, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 20, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 20, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 20, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 20, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 20, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 20, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 20, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 20, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 20, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 20, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 20, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 20, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 20, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 20, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 200022],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 201, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 201, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 201, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 201, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 202572],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2028, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 204, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 204, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 204624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 207, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 207, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 207, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 207, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 208, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 208, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 208692],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 209, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 209, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 21, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 21, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 21, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 21, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 21, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 21, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 21, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 21, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 21, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 21, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 21, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 21, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 21, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 21, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 21, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 21, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 21, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 21, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 21, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 21, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 21, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 21, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 21, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 21, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 21, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 210, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 210, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2100],"float32"), )
paddle.Tensor.max(Tensor([2, 211038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 212784],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 214107],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 217689],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 218, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 218, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 218, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 218, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 219453],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 22, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 22, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 22, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 22, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 22, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 22, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 22, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 22, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 22, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 22, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 22, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 22, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 22, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 22, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 22, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 22, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 22, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 22, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 22, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 22, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 22, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 22, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 22, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 22, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 22, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 22, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 22, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 22, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 22, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 220, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 220, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 220992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 222, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 222, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 222012],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 223827],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 224, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 224, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 227, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 227, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 227919],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 229455],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 229965],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 23, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 23, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 23, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 23, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 23, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 23, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 23, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 23, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 23, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 23, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 23, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 23, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 23, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 23, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 23, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 23, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 23, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 23, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 23, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 23, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 23, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 23, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 23, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 23, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 23, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 23, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 23, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 23, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 230175],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 233244],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 234804],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2352, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 236313],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 236334],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 237360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 237870],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 239, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 239, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 239382],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 24, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 24, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 24, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 24, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 24, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 24, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 24, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 24, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 24, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 24, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 24, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 24, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 24, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 24, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 24, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 24, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 24, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 24, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 24, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 24, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 24, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 24, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 24, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 24, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 24, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 24, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 240, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 240, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 241221],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 241731],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 243474],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 245823],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 246051],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 247086],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 248616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 249, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 249, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 249, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 249, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 249405],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 25, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 25, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 25, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 25, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 25, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 25, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 25, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 25, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 25, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 25, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 25, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 25, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 25, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 25, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 25, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 25, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 25, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 25, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 25, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 25, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 25, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 25, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 25, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 25, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 25, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 25, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 25, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 25, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 25, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 250656],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 252195],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 252681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 253728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2541],"float32"), )
paddle.Tensor.max(Tensor([2, 255, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 255, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 255, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 255, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 255780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 26, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 26, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 26, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 26, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 26, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 26, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 26, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 26, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 26, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 26, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 26, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 26, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 26, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 26, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 26, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 26, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 26, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 26, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 26, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 26, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 26, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 26, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 26, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 26, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 26, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 26, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 26, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 26, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 26, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 26, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 261681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 262194],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 264978],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 269355],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 27, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 27, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 27, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 27, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 27, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 27, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 27, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 27, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 27, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 27, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 27, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 27, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 27, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 27, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 27, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 27, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 27, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 27, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 27, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 27, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 27, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 27, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 27, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 27, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 27, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 27, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 27, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 27, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 27, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 27, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2700, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 270096],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 272118],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 275, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 275, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 275, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 275, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 276210],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 278562],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 279279],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 279300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 28, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 28, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 28, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 28, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 28, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 28, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 28, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 28, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 28, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 28, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 28, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 28, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 28, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 28, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 28, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 28, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 28, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 28, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 28, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 28, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 28, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 28, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 28, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 28, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 283, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 283, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 283, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 283, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 283167],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 283905],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 284, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 284, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 285444],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 286, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 286, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 286, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 286, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 286440],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 286977],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 29, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 29, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 29, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 29, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 29, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 29, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 29, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 29, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 29, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 29, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 29, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 29, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 29, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 29, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 29, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 29, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 29, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 29, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 29, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 29, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 29, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 29, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 29, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 29, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 29, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 29, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 29, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 29, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 290052],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 293, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 293, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 293397],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 293622],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 295443],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 295647],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 296, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 296, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 296700],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 299250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2],"float32"), axis=-1, )
paddle.Tensor.max(Tensor([2, 3, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 3, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 3, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 3, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 3, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 3, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 3, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3, 2],"float64"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 3, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 3, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 3, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 3, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 3, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3, 4789],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 3, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 3, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 3, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 3, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 3, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 3, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 3, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 3, 8, 8],"float32"), axis=-3, )
paddle.Tensor.max(Tensor([2, 3, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 3, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 3, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 3, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 30, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 30, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 30, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 30, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 30, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 30, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 30, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 30, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 30, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 30, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 30, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 30, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 30, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 30, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 30, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 30, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 30, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 30, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 30, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 30, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 30, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 30, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 30, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 30, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 30, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 30, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 30, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 30, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 30, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 30, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 30, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 300, 18496],"float32"), -1, )
paddle.Tensor.max(Tensor([2, 300, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 300762],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3024],"float32"), )
paddle.Tensor.max(Tensor([2, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 306900],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3072, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 31, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 31, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 31, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 31, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 31, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 31, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 31, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 31, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 31, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 31, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 31, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 31, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 31, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 31, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 31, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 31, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 31, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 31, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 31, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 31, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 31, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 31, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 31, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 31, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 31, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 31, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 31, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 31, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 312324],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 314595],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 319, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 319, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 32, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 32, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 32, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 32, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 32, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 32, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 32, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 32, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 32, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 32, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 32, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 32, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 32, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 32, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 32, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 32, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 32, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 32, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 32, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 32, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 32, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 32, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 32, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 32, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 32, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 32, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 322245],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 324, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 324, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 325113],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 327360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 329, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 329, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 329, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 329, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 33, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 33, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 33, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 33, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 33, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 33, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 33, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 33, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 33, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 33, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 33, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 33, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 33, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 33, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 33, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 33, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 33, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 33, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 33, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 33, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 33, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 33, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 33, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 33, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 33, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 33, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 331452],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 333, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 333, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 333018],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 335568],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 337620],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 339150],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 34, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 34, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 34, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 34, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 34, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 34, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 34, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 34, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 34, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 34, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 34, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 34, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 34, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 34, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 34, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 34, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 34, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 34, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 34, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 34, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 34, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 34, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 34, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 34, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 34, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 34, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 34, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 34, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 340686],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 346086],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3468, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 347820],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 349155],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 35, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 35, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 35, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 35, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 35, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 35, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 35, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 35, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 35, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 35, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 35, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 35, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 35, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 35, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 35, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 35, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 35, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 35, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 35, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 35, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 35, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 35, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 35, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 35, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 35, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 35, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 350178],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 35280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 354501],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3549],"float32"), )
paddle.Tensor.max(Tensor([2, 356541],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 359100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3598],"float32"), )
paddle.Tensor.max(Tensor([2, 36, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 36, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 36, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 36, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 36, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 36, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 36, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 36, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 36, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 36, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 36, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 36, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 36, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 36, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 36, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 36, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 36, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 36, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 36, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 36, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 36, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 36, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 36, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 36, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 363, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 368280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 369, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 369, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 369, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 369, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 369105],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 37, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 37, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 37, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 37, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 37, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 37, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 37, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 37, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 37, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 37, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 37, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 37, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 37, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 37, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 37, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 37, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 37, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 37, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 37, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 37, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 37, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 37, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 37, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 37, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 37, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 37, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 37, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 37, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 377514],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 378540],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 379050],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 38, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 38, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 38, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 38, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 38, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 38, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 38, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 38, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 38, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 38, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 38, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 38, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 38, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 38, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 38, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 38, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 38, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 38, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 38, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 38, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 38, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 38, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 38, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 38, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 38, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 38, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 386694],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 388740],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3888, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 38940],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 39, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 39, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 39, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 39, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 39, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 39, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 39, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 39, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 39, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 39, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 39, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 39, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 39, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 39, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 39, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 39, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 39, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 39, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 39, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 39, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 39, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 39, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 39, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 39, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 39690],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 397467],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 398487],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3],"float32"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3],"float64"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 4, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 4, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 4, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 4, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 4, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 4, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 4, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 4, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 4, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 4, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 4, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 4, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4, 4789],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 4, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 4, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 4, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 4, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 4, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 4, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 4, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 4, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 40, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 40, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 40, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 40, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 40, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 40, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 40, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 40, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 40, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 40, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 40, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 40, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 40, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 40, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 40, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 40, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 40, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 40, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 40, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 40, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 40, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 40, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 40, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 40, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 40, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 40, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 400, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 400, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 41, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 41, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 41, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 41, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 41, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 41, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 41, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 41, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 41, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 41, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 41, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 41, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 41, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 41, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 41, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 41, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 41, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 41, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 41, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 41, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 41, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 41, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 41, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 41, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4116],"float32"), )
paddle.Tensor.max(Tensor([2, 4165],"float32"), )
paddle.Tensor.max(Tensor([2, 42, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 42, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 42, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 42, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 42, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 42, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 42, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 42, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 42, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 42, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 42, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 42, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 42, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 42, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 42, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 42, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 42, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 42, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 42, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 42, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 42, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 42, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 42, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 42, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 42, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 42, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 42, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 42, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 42780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 43, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 43, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 43, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 43, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 43, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 43, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 43, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 43, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 43, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 43, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 43, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 43, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 43, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 43, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 43, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 43, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 43, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 43, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 43, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 43, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 43, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 43, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 43, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 43, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 43, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 43, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 43, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 43, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 432, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 4332, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 43560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 44, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 44, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 44, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 44, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 44, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 44, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 44, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 44, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 44, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 44, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 44, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 44, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 44, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 44, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 44, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 44, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 44, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 44, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 44, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 44, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 44250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 44640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 45, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 45, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 45, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 45, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 45, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 45, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 45, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 45, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 45, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 45, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 45, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 45, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 45, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 45, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 45, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 45, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 45, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 45, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 45, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 45, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 45, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 45, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 45, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 45, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 45, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 45, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 45, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 45, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 451143],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 45135],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 46, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 46, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 46, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 46, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 46, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 46, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 46, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 46, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 46, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 46, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 46, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 46, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 46, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 46, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 46, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 46, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 46080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 461, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 461, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 461, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 461, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 46230],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 47, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 47, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 47, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 47, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 47, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 47, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 47, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 47, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 47, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 47, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 47, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 47, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 47, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 47, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 47, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 47, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 47, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 47, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 47, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 47, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 47, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 47, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 47, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 47, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 47, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 47, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 47, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 47, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4725, 1],"float32"), -1, )
paddle.Tensor.max(Tensor([2, 4725],"float32"), )
paddle.Tensor.max(Tensor([2, 47610],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4789],"float32"), )
paddle.Tensor.max(Tensor([2, 48, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 48, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 48, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 48, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 48, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 48, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 48, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 48, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 48, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 48, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 48, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 48, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 48, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 48, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 48, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 48, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 48, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 48, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 48, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 48, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 48, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 48, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 48, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 48, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 48, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 48, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 4800, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 48240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 49, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 49, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 49, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 49, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 49, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 49, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 49, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 49, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 49, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 49, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 49, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 49, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 49, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 49, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 49, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 49, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 49, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 49, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 49, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 49, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 49, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 49, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 49410],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 49680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 5, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 5, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 5, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 5, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 5, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 5, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 5, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 5, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 5, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 5, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5, 4789],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 5, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 5, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 5, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 5, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 5, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 5, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 5, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 5, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 5, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 5, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 5, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 50, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 50, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 50, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 50, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 50, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 50, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 50, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 50, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 50, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 50, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 50, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 50, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 50, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 50, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 50, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 50, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 50, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 50, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 50, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 50, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 50, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 50, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 507, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 51, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 51, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 51, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 51, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 51, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 51, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 51, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 51, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 51, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 51, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 51, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 51, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 51, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 51, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 51, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 51, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 51, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 51, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 51, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 51, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 51240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 51840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 52, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 52, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 52, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 52, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 52, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 52, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 52, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 52, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 52, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 52, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 52, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 52, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 52, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 52, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 52, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 52, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 52, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 52, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 52080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 52560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 52920],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 53, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 53, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 53, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 53, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 53, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 53, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 53, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 53, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 53, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 53, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 53, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 53, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 53, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 53, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 53, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 53, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 53, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 53, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 53, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 53, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 53100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 53250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 53460],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 53760],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5376],"float32"), )
paddle.Tensor.max(Tensor([2, 54, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 54, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 54, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 54, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 54, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 54, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 54, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 54, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 54, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 54, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 54, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 54, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 54, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 54, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 54, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 54, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 54, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 54, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 54, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 54, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 54000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 54270],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5440],"float32"), )
paddle.Tensor.max(Tensor([2, 54750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 54870],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 55, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 55, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 55, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 55, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 55, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 55, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 55, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 55, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 55, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 55, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 55, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 55, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 55, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 55, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 55, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 55, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 55, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 55, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 55440],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 55680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 55755],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 55845],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 55890],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 56, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 56, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 56, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 56, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 56, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 56, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 56, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 56, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 56, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 56, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 56, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 56, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 56, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 56, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 56, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 56, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 56, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 56, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 56, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 56, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 56, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 56, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 56, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 56, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 56640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 56700],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 57, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 57, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 57, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 57, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 57, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 57, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 57, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 57, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 57, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 57, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 57, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 57, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57285],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 57960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 58, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 58, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 58, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 58, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 58, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 58, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 58, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 58, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 58, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 58, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 58, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 58, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 58, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 58, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 58, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 58, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 58, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 58, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 58, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 58, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 58, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 58, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 58, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 58, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 5808, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 58320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 58500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 588, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 58800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 59, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 59, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 59, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 59, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 59, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 59, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 59, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 59, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 59, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 59, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 59, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 59, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 59, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 59, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 59, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 59, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 59250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 59295],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 59520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 6, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 6, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 6, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 6, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 6, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 6, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 6, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 6, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 6, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 6, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 6, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 6, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 6, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 6, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 6, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 6, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 6, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 6, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 60, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 60, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 60, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 60, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 60, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 60, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 60, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 60, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 60, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 60, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 60, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 60, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 60, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 60, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 60, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 60, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 60, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 60, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 60, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 60, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 60, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 60, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 60, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 60, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 60300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 60390],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 60450],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6069, 2],"float32"), -1, )
paddle.Tensor.max(Tensor([2, 6069],"float32"), )
paddle.Tensor.max(Tensor([2, 61, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 61, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 61, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 61, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 61, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 61, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 61, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 61, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 61, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 61, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 61, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 61, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 61, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 61, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 61, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 61, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 61, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 61, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 61, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 61, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 61065],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 61200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 61305],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 61380],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6150],"float32"), )
paddle.Tensor.max(Tensor([2, 62, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 62, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 62, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 62, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 62, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 62, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 62, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 62, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 62, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 62, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 62310],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 62400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 63, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 63, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 63, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 63, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 63, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 63, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 63, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 63, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 63, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 63, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 63, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 63, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 63, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 63, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 63, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 63, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 63, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 63, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 63, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 63, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 63, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 63, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 63000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 63315],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 63360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 63720],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 63840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 64, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 64, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 64, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 64, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 64, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 64, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 64, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 64, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 64, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 64, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 64, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 64, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 64, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 64, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 64320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 64350],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 65, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 65, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 65, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 65, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 65, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 65, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 65, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 65, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 65, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 65, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 65, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 65, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 65, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 65, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 65, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 65, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 65, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 65, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 65, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 65, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 65, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 65, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 65, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 65, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 65, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 65, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 65280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 66, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 66, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 66, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 66, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 66, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 66, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 66, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 66, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 66, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 66, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 66, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 66, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 66, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 66, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 66, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 66, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 66, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 66, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 66, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 66, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 66150],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 66240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 66330],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 66360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 67, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 67, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 67, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 67, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 67, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 67, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 67, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 67, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 67, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 67, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 67200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 675, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 67890],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 68, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 68, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 68, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 68, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 68, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 68, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 68, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 68, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 68, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 68, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 68, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 68, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 68040],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6804],"float32"), )
paddle.Tensor.max(Tensor([2, 68160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 68340],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 68400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 68625],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6885],"float32"), )
paddle.Tensor.max(Tensor([2, 68985],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 69, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 69, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 69, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 69, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 69, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 69, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 69, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 69, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 69, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 69, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 69, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 69, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 69030],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 6912, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 69300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 69345],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 69750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 69930],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 7, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 7, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 7, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 7, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 7, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 7, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 7, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 7, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 7, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 7, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 7, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 7, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 7, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 7, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 7, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 7, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 7, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 7, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 7, 4789],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 7, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 7, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 7, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 7, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 7, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 7, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 7, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 7, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 7, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 7, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 7, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 70, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 70, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 70, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 70, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 70, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 70, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 70, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 70, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 70, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 70, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 70, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 70, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 70, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 70, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 70, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 70, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 70, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 70, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 70080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 70290],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 70350],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 70875],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 71, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 71, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 71, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 71, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 71, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 71, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 71, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 71, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 71, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 71, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 71, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 71, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 71, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 71, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 71100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 72, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 72, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 72, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 72, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 72, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 72, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 72, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 72, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 72, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 72, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 72, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 72, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 72, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 72, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 72, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 72, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 72, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 72, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 72, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 72, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 72000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 72360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 73, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 73, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 73, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 73, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 73, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 73, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 73, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 73, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 73, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 73, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 73, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 73, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 73365],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 73500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 74, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 74, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 74, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 74, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 74, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 74, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 74, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 74, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 74250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 74520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 74550],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 75, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 75, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 75, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 75, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 75, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 75, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 75, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 75, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 75, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 75, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 75, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 75, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 75, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 75, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 75030],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 75375],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 75615],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 7581],"float32"), )
paddle.Tensor.max(Tensor([2, 76, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 76, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 76, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 76, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 76, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 76, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 76, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 76, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 76, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 76, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 76, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 76, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 76, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 76, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 76260],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 76380],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 76590],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 768, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 7681],"float32"), )
paddle.Tensor.max(Tensor([2, 76860],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 77, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 77, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 77, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 77, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 77, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 77, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 77, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 77, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 77, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 77, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 77, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 77, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 77025],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 77490],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 77625],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 78, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 78, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 78, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 78, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 78, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 78, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 78, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 78, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 78, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 78, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 78120],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 78840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 79, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 79, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 79, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 79, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 79, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 79, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 79, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 79, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 79, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 79, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 79, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 79, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 79, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 79, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 79, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 79, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 79, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 79, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 79380],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 79395],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 79680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 79695],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 79935],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 8, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 8, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 8, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 8, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 8, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 8, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 8, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 8, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 8, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 8, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 8, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 8, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 8, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 8, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 8, 4789],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 8, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 8, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 8, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 8, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 8, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 8, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 8, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 8, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 8, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 8, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 8, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 8, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 8, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 8, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 8, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 8, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 8, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 80, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 80, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 80, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 80, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 80, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 80, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 80, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 80, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 80, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 80, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 80, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 80, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 80400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 80640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 81, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 81, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 81, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 81, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 81, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 81, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 81, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 81, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 81, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 81, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 81, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 81, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 81, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 81, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 81000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 8112, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 81900],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 82, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 82, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 82, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 82, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 82, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 82, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 82, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 82, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 82, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 82, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 82, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 82, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 82, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 82, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 82080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 82125],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 83, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 83, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 83, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 83, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 83, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 83, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 83, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 83, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 83070],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 83220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 84, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 84, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 84, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 84, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 84, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 84, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 84, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 84, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 84, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 84, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 84, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 84, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 8400, 1],"float32"), -1, )
paddle.Tensor.max(Tensor([2, 8400, 4],"float32"), -1, )
paddle.Tensor.max(Tensor([2, 8400],"float32"), )
paddle.Tensor.max(Tensor([2, 84420],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 85, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 85, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 85, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 85, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 85, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 85, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 85, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 85, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 85, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 85, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 8500],"float32"), )
paddle.Tensor.max(Tensor([2, 86, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 86, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 86640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 867, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 87, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 87, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 87, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 87, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 87, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 87, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 87, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 87, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 87, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 87, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 87, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 87, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 87, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 87, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 87, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 87, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 88, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 88, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 88, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 88, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 88, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 88, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 88, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 88, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 88, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 88, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 88200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 89, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 89, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 89, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 89, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 89, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 89, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 89, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 89, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 89, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 89, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 9, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 9, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 9, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 9, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 9, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 9, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 9, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 9, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 9, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 9, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 9, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 9, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 9, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 9, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 9, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 9, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 9, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 9, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 9, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 9, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([2, 90, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 90, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 90720],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 91, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 91, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 91, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 91, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 92, 11109],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 92, 11109],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 92, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 92, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 92, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 92, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 92, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 92, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 92, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 92, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 92, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 92, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9261],"float32"), )
paddle.Tensor.max(Tensor([2, 93, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 93, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 93, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 93, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 93, 3549],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 93, 3549],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 93, 6804],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 93, 6804],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9382],"float32"), )
paddle.Tensor.max(Tensor([2, 94, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 94, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 94, 5376],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 94, 5376],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 94, 6069],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 94, 6069],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 94, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 94, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 9408, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 95, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 95, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 95, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 95, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 95, 2541],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 95, 2541],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 95, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 95, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 95, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 95, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 95760],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 96, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 96, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 96, 3024],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 96, 3024],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 96, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 96, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 97, 10164],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 97, 10164],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 97, 12096],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 97, 12096],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 97, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 97, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 97, 8400],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 97, 8400],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 972, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 98, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 98, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 98, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 98, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 98, 7581],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 98, 7581],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 98, 9261],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 98, 9261],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 99, 2100],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 99, 2100],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 99, 4116],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 99, 4116],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 99, 4725],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 99, 4725],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 193368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 235320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 241221],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 279300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 293397],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 306900],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 309255],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 333018],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 347820],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 379050],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 397467],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 52560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 55200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 59295],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 62310],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 67200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 76860],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20, 79380],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([200, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20250, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([204288, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([204288, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([204672, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2048, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([204800, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([204800, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20570, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20736, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20736, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([207360, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2080, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([209664, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([209664, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([20],"float32"), )
paddle.Tensor.max(Tensor([21, 180048],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 191301],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 208692],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 223827],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 235320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 244800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 252681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 290052],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 295443],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 296700],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 333018],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 340686],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 379050],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 397467],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 55200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 56430],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 58500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 62310],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 70080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 78120],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 78750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 80640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21, 94500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2128, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2128, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([215040, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([215040, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([21632, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2184, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2184, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 190296],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 196416],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 222012],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 229965],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 243474],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 248616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 252195],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 285444],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 286977],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 293397],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 322245],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 325113],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 331452],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 349155],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 356541],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 369105],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 44640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 46080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 47610],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 57240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 59295],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 64320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 75330],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 82125],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 83220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([22, 84375],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([220416, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2240, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([225792, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([225792, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2280, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 234804],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 243474],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 249405],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 252195],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 253728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 270096],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 278562],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 295443],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 309255],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 312324],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 319200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 350178],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 359100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 52560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 63135],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23, 82125],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2304, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2304, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([23232, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2352, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 103320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 236334],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 286440],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 347820],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 356541],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 378540],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 440433],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 51840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 66360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 78750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24, 87600],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([242, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2432, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2432, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([243360, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2448, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([24],"int64"), )
paddle.Tensor.max(Tensor([25, 190296],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 196416],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 202572],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 261681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 264978],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 270096],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 286977],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 295647],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 335568],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 44640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 46080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 68985],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25, 88200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25088, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2520, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25600, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([25600, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2584, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2584, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2592, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2592, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 182391],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 234804],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 235320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 250656],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 261681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 262194],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 264978],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 290052],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 293397],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 312324],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 49680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 55200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 61500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 62160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([26, 67890],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2688, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2688, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 202572],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 223827],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 236334],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 299250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 327360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 349155],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 386694],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 47520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 55440],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 66240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 69030],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 72360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 73365],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 75840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27, 86940],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2720, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2720, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2736, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2736, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27648, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 188256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 285444],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 295647],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 306900],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 386694],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 63000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 66240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 69750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 73125],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28, 73365],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([282240, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2856, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2856, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2880, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2880, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28800, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2888, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2888, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2888, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 236313],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 331452],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 359100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 388740],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 54750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 66240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([29, 72360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([2],"float32"), )
paddle.Tensor.max(Tensor([2],"int64"), )
paddle.Tensor.max(Tensor([3, 150402],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 166533],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 168795],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 182391],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 185691],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 188256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 191301],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 193368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 194157],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 196416],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 200022],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 202572],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 204624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 208692],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 214107],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 217689],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 220992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 222012],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 223827],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 233244],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 234804],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 235320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 236334],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 237360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 239382],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 241221],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 241731],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 243474],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 244800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 245823],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 248616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 249405],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 250656],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 252195],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 253728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 255780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 261681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 262194],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 264978],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 270096],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 272118],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 272649],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 276210],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 278562],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 279279],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 279300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 28, 28],"float32"), axis=-3, )
paddle.Tensor.max(Tensor([3, 283167],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 283905],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 285444],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 286440],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 286977],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 290052],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 293397],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 295443],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 295647],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 306900],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 311535],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 312324],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 314595],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 317160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 319200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 322245],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 325113],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 327360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 329205],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 331452],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 333018],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 335568],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 337620],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 340686],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 346086],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 347820],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 349155],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 350178],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 35280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 354501],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 356541],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 359100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 367059],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 368280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 369105],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 377514],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 378540],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 379050],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 386694],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 388032],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 388740],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 38940],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 397467],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 398487],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 42780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 429660],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 43470],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 43560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 44220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 451143],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 46080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 46230],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 47520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 47610],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 49410],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 49680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 51030],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 51750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 51840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 52560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 52920],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 54000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 54750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 55200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 55440],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 56280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 56430],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 56730],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 57285],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 58320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 58800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 59220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 59250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 59295],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 59520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 60300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 60390],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 60450],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 60750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 61065],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 61200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 61305],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 62160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 62310],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 62700],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 62730],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 63000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 63360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 63720],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 63840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 64170],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 64320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 64350],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 64605],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 64680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 65280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 66150],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 66240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 66360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 66960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 67260],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 68040],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 68340],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 68400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 69300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 69345],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 69750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 69930],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 70080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 70290],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 70350],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 70680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 71100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 71685],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 71820],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 72000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 72270],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 72360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 73125],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 73365],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 73920],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 74100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 74340],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 74370],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 74520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 74550],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 75030],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 75075],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 75240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 75330],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 75375],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 76260],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 76380],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 76800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 77025],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 77625],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 77760],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 78120],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 78750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 79680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 79695],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 79935],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 8, 8],"float32"), axis=-3, )
paddle.Tensor.max(Tensor([3, 81000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 81180],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 82080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 82125],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 83220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 83415],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 84420],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 85320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 86940],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 88560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 90060],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 90720],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 94500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([30, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([30, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([30, 276210],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([30, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([30, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([30, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([30, 386694],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([30, 80640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3024, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3024, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3040, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3040, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([30400, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([30400, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3072, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([30976, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([30976, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 245823],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 285444],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 429660],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 56730],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 62310],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 63000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 66960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 67200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31, 82080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3120, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31200, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3136, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31616, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([31616, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3192, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3192, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([32, 208692],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([32, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([32, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([32, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([32, 80640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3200, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3200, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3200, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([32000, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3240, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([324000, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([32448, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([32832, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([32832, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([33, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([33, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([33, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3360, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3360, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([33600, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([33600, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([33696, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([34, 196416],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([34, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([34, 223554],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([34, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([34, 255780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([34, 368280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([34, 51750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([34, 51840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([34000, 4],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([34112, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([34112, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([34944, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([34944, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([35, 272118],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([35, 285444],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([35, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([35264, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3528, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3528, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3528, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3598, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([36, 208692],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([36, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([36, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([36, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([36, 331452],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([36, 368280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3600, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([36864, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([36864, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([37, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([37, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([37, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([37, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([37, 359100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([37632, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([37696, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([38, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([38, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([38, 369105],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([38, 82125],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3872, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3872, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([38912, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([38912, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([38976, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([39, 182391],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([39, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([39, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([39, 246051],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([39, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([39, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([39, 42780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([39, 55845],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([39168, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3],"int64"), )
paddle.Tensor.max(Tensor([4, 1, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 1, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 1, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 1, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 1, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 1, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 1, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 1, 4789],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 1, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 1, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 1, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 1, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 10, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 10, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 10164],"float32"), )
paddle.Tensor.max(Tensor([4, 103320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 105840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 11109],"float32"), )
paddle.Tensor.max(Tensor([4, 113, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 113, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 119, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 119, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 12, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 120, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 12096],"float32"), )
paddle.Tensor.max(Tensor([4, 121, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 127, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 130, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 135, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 15, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 15, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 15, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 16, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 163, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 166, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 167, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 168795],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 17, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 171, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 171888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 173, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 174, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 176, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 180, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 180048],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 182391],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 188256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 19, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 19, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 193368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 194157],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 196416],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 2, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 2, 114],"int64"), )
paddle.Tensor.max(Tensor([4, 2, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 2, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 2, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 2, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 2, 4789],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 2, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 2, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 20, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 20, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 20, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 20, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 200022],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 202572],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 204624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 208197],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 208692],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 2100],"float32"), )
paddle.Tensor.max(Tensor([4, 211, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 211038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 212784],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 214107],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 22, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 22, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 22, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 22, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 220992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 23, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 23, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 23, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 234, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 234804],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 236313],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 236334],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 237360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 24, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 24, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 241221],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 243474],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 244800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 247086],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 249405],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 25, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 25, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 250656],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 252681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 253728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 2541],"float32"), )
paddle.Tensor.max(Tensor([4, 255780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 2577],"float32"), )
paddle.Tensor.max(Tensor([4, 26, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 26, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 26, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 26, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 261681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 262194],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 264978],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 27, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 270096],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 272, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 272118],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 276210],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 279300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 28, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 28, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 28, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 28, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 283905],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 285444],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 286977],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 29, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 29, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 29, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 293397],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 295443],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 295647],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 299250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 3, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 3, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 3, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 3, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 3, 4789],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 3, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 30, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 30, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 30, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 30, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 3024],"float32"), )
paddle.Tensor.max(Tensor([4, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 3060],"float32"), )
paddle.Tensor.max(Tensor([4, 306900],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 31, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 312324],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 317160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 319200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 327360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 329205],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 33, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 333, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 333018],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 335568],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 339150],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 34, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 340686],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 346086],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 347820],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 349155],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 35, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 35, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 35, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 35, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 350178],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 354501],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 3549],"float32"), )
paddle.Tensor.max(Tensor([4, 356541],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 359100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 3598],"float32"), )
paddle.Tensor.max(Tensor([4, 36, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 36, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 37, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 37, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 37, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 377514],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 378540],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 379050],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 386694],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 388740],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 39, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 39, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 39, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 394, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 39690],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 397467],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 398487],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 4, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 40, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 41, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 41, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 41, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 4116],"float32"), )
paddle.Tensor.max(Tensor([4, 4165],"float32"), )
paddle.Tensor.max(Tensor([4, 418, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 42780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 43, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 43470],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 440433],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 45, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 451143],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 46, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 465, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 46800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 46920],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 47, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 4725],"float32"), )
paddle.Tensor.max(Tensor([4, 4789],"float32"), )
paddle.Tensor.max(Tensor([4, 48, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 48, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 48000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 49680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 5, 4789],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 5, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 50, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 50400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 51, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 51, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 51030],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 51840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 52, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 52, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 525, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 52560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 52920],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 53, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 5376, 4],"float32"), -1, )
paddle.Tensor.max(Tensor([4, 5376],"float32"), )
paddle.Tensor.max(Tensor([4, 54000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 54270],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 55680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 56, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 56430],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 56640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 57960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 58, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 58500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 59520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 6, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 60300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 60390],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 6069],"float32"), )
paddle.Tensor.max(Tensor([4, 60750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 61200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 62, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 62310],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 62400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 63, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 63135],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 63720],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 64, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 64320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 65, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 67200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 67260],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 67335],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 68040],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 6804],"float32"), )
paddle.Tensor.max(Tensor([4, 68310],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 68400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 68625],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 68985],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 69345],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 7, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 70080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 72000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 72270],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 72360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 73, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 73, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 73125],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 73365],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 73500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 73920],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 74250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 75075],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 75375],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 75555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 7581],"float32"), )
paddle.Tensor.max(Tensor([4, 76380],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 76590],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 77, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 77490],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 78, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 78120],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 78660],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 78750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 78840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 79380],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 79395],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 8, 16],"float32"), )
paddle.Tensor.max(Tensor([4, 80, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 80, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 80400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 80640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 81180],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 81900],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 83, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 83070],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 83415],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 8400, 4],"float32"), -1, )
paddle.Tensor.max(Tensor([4, 8400],"float32"), )
paddle.Tensor.max(Tensor([4, 84420],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 87600],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 88200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 89, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 90, 22400],"float32"), axis=1, )
paddle.Tensor.max(Tensor([4, 90, 22400],"float32"), axis=2, )
paddle.Tensor.max(Tensor([4, 90, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 92, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 9261],"float32"), )
paddle.Tensor.max(Tensor([4, 94620],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4, 95, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 97, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 97, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 98, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 99, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([4, 99, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([40, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([40, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([40, 252195],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([40, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([40, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([40, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([40, 57285],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([40128, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([40128, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([40256, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4096, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([41344, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([41344, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([41472, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4165, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([42432, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([42432, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([42560, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([42560, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([42],"float32"), )
paddle.Tensor.max(Tensor([43, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([43008, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([43008, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([43200, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([43520, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([43560, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([43680, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([43680, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([43776, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([43776, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4410, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([44352, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([44352, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([44608, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([44608, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([44992, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([44992, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([45, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([45, 331452],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([45600, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([45696, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([45696, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([45920, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4608, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([46080, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([46080, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([46208, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([46208, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4624, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([47040, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([47040, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([47360, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([47424, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([47424, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4789, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([48, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([48, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([48, 84420],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([48384, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([48384, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([484, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([48544, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([48544, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([48640, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([48640, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([48960, 4],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([49, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([49, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([49, 80640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([49728, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([49728, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([49856, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([49856, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([49920, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([4],"float32"), )
paddle.Tensor.max(Tensor([4],"int64"), )
paddle.Tensor.max(Tensor([5, 10],"float64"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 168795],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 182391],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 184140],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 190296],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 191301],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 194157],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 196416],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 200022],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 202572],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 208692],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 217689],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 220992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 222012],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 227919],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 229965],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 234804],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 236313],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 237360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 241731],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 243474],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 244800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 245823],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 246051],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 247086],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 248616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 249405],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 250656],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 251676],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 252195],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 255780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 261681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 264978],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 272118],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 279279],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 283905],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 285444],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 286977],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 290052],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 293397],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 295443],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 295647],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 299250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 306900],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 309255],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 312324],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 317160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 322245],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 327360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 329205],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 331452],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 333018],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 335568],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 340686],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 347820],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 349155],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 354501],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 356541],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 359100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 367059],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 368280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 369105],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 377514],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 379050],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 386694],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 388740],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 397467],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 42780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 440433],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 44220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 44640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 46080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 46230],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 46800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 47520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 49680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 51840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 52560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 52920],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 53460],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 53760],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 54000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 55845],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 56430],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 56730],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 57960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 58320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 59295],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 60300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 61200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 61440],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 62310],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 63000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 64170],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 64605],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 66330],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 66960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 67200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 67500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 67890],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 68040],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 69030],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 69345],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 70080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 70350],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 71100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 71610],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 72000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 72960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 74520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 75075],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 75375],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 75615],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 76380],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 76590],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 77625],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 78120],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 79695],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 81000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 83220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 84375],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 85320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 91980],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5, 94620],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([50, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([50176, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([51, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([51, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([51, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([51072, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([51072, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([51168, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([51200, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([51200, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5184, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5184, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([51840, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([52416, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([52416, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([53, 241731],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([53, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([53, 56700],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([53760, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([53760, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5408, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5440, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([55, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([55, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([55, 81000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([55080, 4],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([55104, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([560, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([560, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([56448, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([56448, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([576, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5760, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([57600, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([5808, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 103320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 171888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 184140],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 188256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 191301],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 193368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 196416],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 198249],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 200022],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 202572],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 204624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 208197],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 208692],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 211038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 219453],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 220992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 223554],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 229455],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 234804],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 236313],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 236334],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 241731],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 243474],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 245823],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 247086],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 248616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 249405],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 250656],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 251676],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 252195],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 253728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 255780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 261681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 262194],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 264978],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 276210],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 279279],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 283905],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 285444],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 286977],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 293397],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 295443],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 295647],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 299250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 306900],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 309255],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 312324],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 317160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 319200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 322245],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 325113],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 327360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 331452],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 333018],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 335568],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 337620],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 339150],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 340686],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 346086],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 347820],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 349155],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 350178],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 354501],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 356541],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 359100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 368280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 369105],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 377514],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 378540],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 379050],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 386694],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 388740],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 39690],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 397467],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 440433],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 44220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 451143],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 45750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 46080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 46305],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 47610],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 48300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 50400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 51030],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 51750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 51840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 52560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 54000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 54600],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 55440],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 56730],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 57750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 57960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 58320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 59250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 59295],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 59520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 61065],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 63000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 63135],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 63720],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 66240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 67200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 67335],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 67500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 67890],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 68160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 68310],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 68400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 69300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 69345],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 70080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 70350],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 71610],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 72000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 72360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 73920],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 74250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 75030],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 75840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 77025],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 78120],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 79935],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 80640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 85320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 86640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 91980],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6, 94500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([60840, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([61448, 4],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6150, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([616, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([616, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([61952, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6272, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([64, 13, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 1360],"float32"), )
paddle.Tensor.max(Tensor([64, 14, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 14, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 15, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 15, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 15, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 16, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 16, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 17, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 17, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 17, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 17, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 17, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 1726],"float32"), )
paddle.Tensor.max(Tensor([64, 18, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 18, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 18, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 18, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 18, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 19, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 19, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 19, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 19, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 19, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 20, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 20, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 20, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 20, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 20, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 21, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 21, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 21, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 21, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 21, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 2125],"float32"), )
paddle.Tensor.max(Tensor([64, 22, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 22, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 22, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 22, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 22, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 23, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 23, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 23, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 23, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 23, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 24, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 24, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 24, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 24, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 24, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 25, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 25, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 25, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 25, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 25, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 2577],"float32"), )
paddle.Tensor.max(Tensor([64, 26, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 26, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 26, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 26, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 26, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 27, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 27, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 27, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 27, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 27, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 28, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 28, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 28, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 28, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 28, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 29, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 29, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 29, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 29, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 29, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 30, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 30, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 30, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 30, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 30, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 3060],"float32"), )
paddle.Tensor.max(Tensor([64, 31, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 31, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 31, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 31, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 31, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 32, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 32, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 32, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 33, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 33, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 33, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 33, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 33, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 34, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 34, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 34, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 34, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 35, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 35, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 35, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 35, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 35, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 36, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 36, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 36, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 36, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 37, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 37, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 37, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 37, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 37, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 38, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 38, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 39, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 39, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 39, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 39, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 40, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 40, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 41, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 41, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 41, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 42, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 42, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 42, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 42, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 43, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 43, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 44, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 46, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 46, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 46, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 47, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 48, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 48, 2125],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 48, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 50, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 51, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 52, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 53, 1360],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 53, 1726],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 54, 3060],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([64, 77, 2577],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([640, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([640, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6400, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6400, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([648, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([648, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([64],"float32"), )
paddle.Tensor.max(Tensor([64],"int64"), )
paddle.Tensor.max(Tensor([65536, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([68000, 4],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6885, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([6912, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 168795],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 180048],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 185691],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 188256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 190296],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 191301],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 193368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 196416],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 200022],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 202572],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 204624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 211038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 214107],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 223554],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 223827],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 229455],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 229965],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 236334],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 237870],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 241221],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 241731],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 248616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 249405],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 250656],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 252681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 253728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 255780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 262194],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 264978],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 270096],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 272118],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 272649],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 276210],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 279300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 283905],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 285444],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 286440],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 286977],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 293397],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 295443],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 295647],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 317160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 319200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 322245],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 325113],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 327360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 329205],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 340686],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 349155],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 350178],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 356541],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 368280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 369105],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 378540],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 386694],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 397467],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 398487],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 43470],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 43560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 44220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 44520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 44640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 451143],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 46230],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 48000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 48300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 51750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 51840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 52500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 52560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 52920],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 53760],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 54870],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 55755],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 55890],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 56640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 57240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 58320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 58800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 59520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 60300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 60750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 62730],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 64170],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 64320],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 65280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 66360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 67335],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 69345],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 70080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 73125],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 73920],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 74340],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 74520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 75075],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 75375],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 76590],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 77625],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 78840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 81000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 83220],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7, 86940],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([704, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([704, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([70560, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7196, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([720, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([720, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7200, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([722, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([73728, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([73984, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([75056, 4],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7600, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7600, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7681, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7744, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7744, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7800, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([784, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7904, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([7904, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([792, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([792, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 1, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 1, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 1, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 1, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 10, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 10, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 10, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 10, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 10, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 10, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 10, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 10, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 10, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 10, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 10, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 10, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 10, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 10, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 10, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 10164],"float32"), )
paddle.Tensor.max(Tensor([8, 10285],"float32"), )
paddle.Tensor.max(Tensor([8, 10800, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 1083, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 11, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 11, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 11, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 11, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 11, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 11, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 11, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 11, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 11, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 11, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 11, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 11, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 11, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 11, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 11, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 11109],"float32"), )
paddle.Tensor.max(Tensor([8, 12, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 12, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 12, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 12, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 12, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 12, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 12, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 12, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 12, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 12, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 12, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 12, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 12, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 12, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 1200, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 12096],"float32"), )
paddle.Tensor.max(Tensor([8, 12288, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 13, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 13, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 13, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 13, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 13, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 13, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 13, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 13, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 13, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 13, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 13, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 13, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 13, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 13, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 13, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 13872, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 14, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 14, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 14, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 14, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 14, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 14, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 14, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 14, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 14, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 14, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 14, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 14, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 14, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 14, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 14, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 1452, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 15, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 15, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 15, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 15, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 15, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 15, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 15, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 15, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 15, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 15, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 15, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 15, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 15, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 15, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 15, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 15552, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 16, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 16, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 16, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 16, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 16, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 16, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 16, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 16, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 16, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 16, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 16, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 16, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 16, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 16, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 16, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 17, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 17, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 17, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 17, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 17, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 17, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 17, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 17, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 17, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 17, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 17, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 17, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 17, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 17, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 17, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 171888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 1728, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 17328, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 18, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 18, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 18, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 18, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 18, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 18, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 18, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 18, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 18, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 18, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 18, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 18, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 18, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 18, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 18, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 182391],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 185691],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 19, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 19, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 19, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 19, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 19, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 19, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 19, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 19, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 19, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 19, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 19, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 19, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 19, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 19, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 19, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 190296],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 199485],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 2, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 2, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 2, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 2, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 2, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 2, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 2, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 2, 6885],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 2, 7681],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 2, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 2, 8500],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 2, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 2, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 20, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 20, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 20, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 20, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 20, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 20, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 20, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 20, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 20, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 20, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 20, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 20, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 20, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 200022],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 202572],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 2028, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 208692],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 21, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 21, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 21, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 21, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 21, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 21, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 21, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 21, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 21, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 21, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 21, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 21, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 21, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 21, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 21, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 2100],"float32"), )
paddle.Tensor.max(Tensor([8, 214107],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 217689],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 22, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 22, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 22, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 22, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 22, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 22, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 22, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 22, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 22, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 22, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 22, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 22, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 22, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 22, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 220992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 223827],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 229152],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 23, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 23, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 23, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 23, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 23, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 23, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 23, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 23, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 23, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 23, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 23, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 23, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 23, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 234804],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 2352, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 236334],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 24, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 24, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 24, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 24, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 24, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 24, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 24, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 24, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 24, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 24, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 241731],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 243474],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 247086],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 25, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 25, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 25, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 25, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 25, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 25, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 25, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 25, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 25, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 25, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 25, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 25, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 25, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 252195],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 252681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 253728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 2541],"float32"), )
paddle.Tensor.max(Tensor([8, 255780],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 26, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 26, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 26, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 26, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 26, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 26, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 26, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 26, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 26, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 26, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 26, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 26, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 26, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 26, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 261681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 262194],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 262428],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 269355],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 27, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 27, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 27, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 27, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 27, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 27, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 27, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 27, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 27, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 27, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 27, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 27, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 2700, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 270096],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 272118],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 276210],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 277539],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 28, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 28, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 28, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 28, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 28, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 28, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 28, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 28, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 28, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 28, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 283167],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 285444],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 286464],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 29, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 29, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 29, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 29, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 29, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 29, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 29, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 290052],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 293397],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 295443],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 295647],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 2],"float32"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 3, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 3, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 3, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 3, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 3, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 3, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 3, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 3, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 3, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 3, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 3, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 3, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 3, 9382],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 30, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 30, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 30, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 30, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 30, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 30, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 30, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 30, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 30, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 30, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 300, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 3024],"float32"), )
paddle.Tensor.max(Tensor([8, 303858],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 3072, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 309255],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 31, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 31, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 31, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 31, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 31, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 31, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 31, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 31, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 31, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 31, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 317160],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 32, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 32, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 32, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 32, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 32, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 32, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 32, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 32, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 32, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 322245],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 327360],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 33, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 33, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 33, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 33, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 33, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 33, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 330429],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 333018],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 34, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 34, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 34, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 34, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 34, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 340686],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 3468, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 349155],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 35, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 35, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 35, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 35, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 35, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 35, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 35, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 35, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 3549],"float32"), )
paddle.Tensor.max(Tensor([8, 359100],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 36, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 36, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 36, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 36, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 36, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 363, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 37, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 37, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 37, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 37, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 37, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 37, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 377514],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 379050],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 38, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 38, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 38, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 38, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 38, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 386694],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 3888, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 39, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 39, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 4, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 4, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 4, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 4, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 4, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 4, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 4, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 4, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 4, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 4, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 4, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 4, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 4, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 40, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 40, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 41, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 41, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 4116],"float32"), )
paddle.Tensor.max(Tensor([8, 42, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 43, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 43, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 43, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 432, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 4332, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 43560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 44, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 44, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 440433],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 44640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 45, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 45, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 451143],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 45135],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 46, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 46, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 46230],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 47, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 4725],"float32"), )
paddle.Tensor.max(Tensor([8, 47520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 48, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 4800, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 48240],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 49680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 5, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 5, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 5, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 5, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 5, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 5, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 5, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 5, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 5, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 5, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 5, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 5, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 5, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 5, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 50, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 50, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 507, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 51750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 51840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 52, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 52560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 52920],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 53, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 53, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 5376],"float32"), )
paddle.Tensor.max(Tensor([8, 54, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 54, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 54600],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 55890],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 56280],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 57960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 5808, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 588, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 59250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 59520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 6, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 6, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 6, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 6, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 6, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 6, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 6, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 6, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 6, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 6, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 6, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 6, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 6, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 6, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 6069, 4],"float32"), -1, )
paddle.Tensor.max(Tensor([8, 6069],"float32"), )
paddle.Tensor.max(Tensor([8, 61440],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 61500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 62400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 62700],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 63000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 63720],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 66960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 675, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 6804],"float32"), )
paddle.Tensor.max(Tensor([8, 68340],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 68400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 6885],"float32"), )
paddle.Tensor.max(Tensor([8, 6912, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 69345],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 7, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 7, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 7, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 7, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 7, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 7, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 7, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 7, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 7, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 7, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 7, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 7, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 7, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 7, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 7, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 70350],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 71415],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 71610],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 72000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 72960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 73365],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 75375],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 7581],"float32"), )
paddle.Tensor.max(Tensor([8, 768, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 7681],"float32"), )
paddle.Tensor.max(Tensor([8, 78120],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 78660],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 79380],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 79695],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 8, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 8, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 8, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 8, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 8, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 8, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 8, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 8, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 8, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 8, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 8, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 8, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 8, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 8, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 8, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 8112, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 82080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 8400],"float32"), )
paddle.Tensor.max(Tensor([8, 84375],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 84420],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 8500],"float32"), )
paddle.Tensor.max(Tensor([8, 867, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 88560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 9, 10164],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 9, 11109],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 9, 12096],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 9, 2100],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 9, 2541],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 9, 3024],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 9, 3549],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 9, 4116],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 9, 4725],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 9, 5376],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 9, 6069],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 9, 6804],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 9, 7581],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 9, 8400],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 9, 9261],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([8, 9261],"float32"), )
paddle.Tensor.max(Tensor([8, 9382],"float32"), )
paddle.Tensor.max(Tensor([8, 9408, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 94620],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8, 972, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([80, 499],"float32"), )
paddle.Tensor.max(Tensor([800, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([800, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([800, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8000, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([81000, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8112, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8208, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8208, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([82280, 4],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([82944, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([82944, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8330, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8400, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8400, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8424, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8500, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8528, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8528, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([86528, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([87040, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8736, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8736, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([880, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([880, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8816, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([882, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([8],"float32"), )
paddle.Tensor.max(Tensor([8],"int64"), )
paddle.Tensor.max(Tensor([9, 171888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 182391],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 196416],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 200022],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 202572],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 204624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 205923],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 208692],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 214848],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 217413],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 220968],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 222012],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 223827],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 227124],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 230202],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 236616],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 242991],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 245520],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 245823],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 247086],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 249405],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 250656],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 252195],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 257796],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 260865],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 261681],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 261888],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 264978],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 268560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 268569],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 269586],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 272118],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 276210],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 278256],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 279300],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 283905],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 286977],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 290052],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 291555],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 294624],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 295443],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 295647],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 2],"float32"), axis=-1, )
paddle.Tensor.max(Tensor([9, 301302],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 302832],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 304368],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 309255],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 310992],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 313038],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 313347],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 320739],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 321759],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 322272],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 325113],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 331251],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 331452],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 333018],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 335568],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 340176],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 343728],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 346086],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 347820],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 349866],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 354501],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 359613],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 365211],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 367059],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 369105],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 369303],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 375984],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 377514],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 379050],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 386694],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 388740],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 39690],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 408177],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 451143],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 46305],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 46800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 47610],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 49680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 50250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 51840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 54000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 54750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 56250],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 56640],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 57000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 57960],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 58800],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 60480],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 61305],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 63000],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 63315],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 64680],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 66330],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 69345],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 69750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 71610],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 73365],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 73500],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 75030],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 77760],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 78750],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 81180],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 82080],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 86940],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9, 88560],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([900, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9216, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9216, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([92928, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9382, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9408, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9424, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9578, 11],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([968, 1],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([968, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([968, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([96],"int64"), )
paddle.Tensor.max(Tensor([9728, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9728, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9744, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([9792, 80],"float16"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([100, 4, 38, 38],"float32"), axis=1, )
paddle.Tensor.max(Tensor([100, 4, 9, 9],"float32"), axis=1, )
paddle.Tensor.max(Tensor([17157],"float32"), )
paddle.Tensor.max(Tensor([1861],"float32"), )
paddle.Tensor.max(Tensor([23619],"float32"), )
paddle.Tensor.max(Tensor([66244],"float32"), )
paddle.Tensor.max(Tensor([7953],"float32"), )
paddle.Tensor.min(Tensor([1, 1, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 192],"float32"), )
paddle.Tensor.min(Tensor([1, 1, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 3598, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 36858, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 38402, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 6150, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 6400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 8580, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 10, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 10, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 10, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 10, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 10, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 10, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 10, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 10, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 10, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 10, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 101, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 102, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 102, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 103, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 105, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 105, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 106, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 107, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 108, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 109, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 11, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 11, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 11, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 11, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 11, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 11, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 11, 4789, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 11, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 11, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 11, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 11, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 11, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 112, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 113, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 113, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 116, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 117, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 119, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 12, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 12, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 12, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 12, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 12, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 12, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 12, 3598, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 12, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 12, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 12, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 12, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 12, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 12, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 12, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 12, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 12, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 122, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 123, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 124, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 126, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 127, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 129, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 13, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 13, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 13, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 13, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 13, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 13, 3598, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 13, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 13, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 13, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 13, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 13, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 13, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 131, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 132, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 138, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 139, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 139, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 14, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 14, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 14, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 14, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 14, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 14, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 14, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 14, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 14, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 14, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 14, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 14, 6150, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 14, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 14, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 14, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 140, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 142, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 145, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 146, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 149, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 15, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 15, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 15, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 15, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 15, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 15, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 15, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 15, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 15, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 15, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 15, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 150, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 150, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 156, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 16, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 16, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 16, 3598, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 16, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 16, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 16, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 16, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 16, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 16, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 16, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 16, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 16, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 16, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 16, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 168, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 169, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 17, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 17, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 17, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 17, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 17, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 17, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 17, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 17, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 17, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 17, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 17, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 172, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 18, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 18, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 18, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 18, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 18, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 18, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 18, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 18, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 18, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 18, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 18, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 19, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 19, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 19, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 19, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 19, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 19, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 19, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 19, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 19, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 19, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 19, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 19, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 19, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 19, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 19, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 190, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 196, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 2, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 20, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 20, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 20, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 20, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 20, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 20, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 20, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 20, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 20, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 209, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 21, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 21, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 21, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 21, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 21, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 21, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 21, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 21, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 21, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 21, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 21, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 210, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 215, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 218, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 218, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 22, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 22, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 22, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 22, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 22, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 22, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 22, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 22, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 22, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 22, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 22, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 225, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 227, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 23, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 23, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 23, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 23, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 23, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 23, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 23, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 23, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 23, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 24, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 24, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 24, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 24, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 24, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 24, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 24, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 24, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 24, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 24, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 24, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 249, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 25, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 25, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 25, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 25, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 25, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 25, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 25, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 25, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 25, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 25, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 25, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 252, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 255, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 257, 192],"float32"), )
paddle.Tensor.min(Tensor([1, 26, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 26, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 26, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 26, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 26, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 26, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 26, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 26, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 27, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 27, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 27, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 27, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 27, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 27, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 27, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 27, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 27, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 27, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 28, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 28, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 28, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 28, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 28, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 28, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 28, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 28, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 28, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 29, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 29, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 29, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 29, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 29, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 29, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 29, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 29, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 29, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 29, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 29, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 296, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 3, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 3, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 3, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 3, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 3, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 3, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 3, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 3, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 3, 4789, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 3, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 3, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 3, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 3, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 3, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 3, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 3, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 30, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 30, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 30, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 30, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 30, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 30, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 30, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 30, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 30, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 30, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 30, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 300, 30976],"float32"), -1, )
paddle.Tensor.min(Tensor([1, 300, 33856],"float32"), -1, )
paddle.Tensor.min(Tensor([1, 300, 36864],"float32"), -1, )
paddle.Tensor.min(Tensor([1, 303, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 31, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 31, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 31, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 31, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 31, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 31, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 31, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 31, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 31, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 32, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 32, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 32, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 32, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 32, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 32, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 329, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 33, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 33, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 33, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 33, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 33, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 33, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 33, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 33, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 33, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 33, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 33, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 333, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 34, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 34, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 34, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 34, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 34, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 34, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 34, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 34, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 35, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 35, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 35, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 35, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 35, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 35, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 35, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 35, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 36, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 36, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 36, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 36, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 36, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 36, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 37, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 37, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 37, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 37, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 37, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 37, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 37, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 37, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 38, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 38, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 38, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 38, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 38, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 38, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 38, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 38, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 39, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 39, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 39, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 39, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 39, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 39, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 39, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 4, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 4, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 4, 2],"float32"), axis=-2, )
paddle.Tensor.min(Tensor([1, 4, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 4, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 4, 3598, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 4, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 4, 4789, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 4, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 4, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 4, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 4, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 4, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 4, 6150, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 4, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 4, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 4, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 40, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 40, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 40, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 40, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 40, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 40, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 40, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 40, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 40, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 40, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 400, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 41, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 41, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 41, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 41, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 41, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 41, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 41, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 42, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 42, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 42, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 42, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 42, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 43, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 43, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 43, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 43, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 43, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 43, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 43, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 44, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 44, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 44, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 44, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 44, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 44, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 44, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 44, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 44, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 45, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 45, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 45, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 45, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 45, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 45, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 45, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 45, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 45, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 46, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 46, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 46, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 46, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 46, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 46, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 46, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 46, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 47, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 47, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 47, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 47, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 47, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 47, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 47, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 47, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 47, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 47, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 48, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 48, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 48, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 48, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 48, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 48, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 49, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 49, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 49, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 49, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 49, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 5, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 5, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 5, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 5, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 5, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 5, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 5, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 5, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 5, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 5, 6150, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 5, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 5, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 5, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 5, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 50, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 50, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 50, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 50, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 51, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 51, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 51, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 51, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 51, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 51, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 52, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 52, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 52, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 52, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 52, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 52, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 52, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 52, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 53, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 53, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 53, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 54, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 54, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 54, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 54, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 54, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 54, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 55, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 55, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 55, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 55, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 56, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 56, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 56, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 56, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 56, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 56, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 56, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 56, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 56, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 57, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 57, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 57, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 57, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 57, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 57, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 58, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 58, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 58, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 58, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 58, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 59, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 59, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 59, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 59, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 59, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 6, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 6, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 6, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 6, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 6, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 6, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 6, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 6, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 6, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 6, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 6, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 6, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 60, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 60, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 60, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 60, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 60, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 60, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 60, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 61, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 62, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 62, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 62, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 62, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 62, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 62, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 62, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 63, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 63, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 63, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 63, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 63, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 63, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 64, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 64, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 64, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 65, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 65, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 65, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 65, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 65, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 65, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 65, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 65, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 66, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 66, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 67, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 67, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 67, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 68, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 68, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 69, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 69, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 69, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 69, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 7, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 7, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 7, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 7, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 7, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 7, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 7, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 7, 4789, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 7, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 7, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 7, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 7, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 7, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 7, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 7, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 70, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 70, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 70, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 71, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 71, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 71, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 72, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 72, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 72, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 72, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 72, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 73, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 73, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 73, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 73, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 74, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 75, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 75, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 76, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 76, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 77, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 77, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 77, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 78, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 78, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 78, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 78, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 79, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 79, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 8, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 8, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 8, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 8, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 8, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 8, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 8, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 8, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 8, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 8, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 8, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 8, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 8, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 8, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 8, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 80, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 80, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 80, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 80, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 80, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 81, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 83, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 83, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 84, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 85, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 85, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 86, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 86, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 87, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 87, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 88, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 21504, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 40656, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 48384, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 75600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 9, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 91, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 91, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 92, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 93, 37044, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 93, 61236, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 93, 70644, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 96, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 96, 52500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 97, 44436, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 97, 56784, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 99, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([10105, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 4, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 4, 15],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 4, 18],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1024],"float32"), )
paddle.Tensor.min(Tensor([10285, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 15],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 16],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 188],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 20],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 21],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 223],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 238],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 23],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 25],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 26],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 29],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 32],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 35],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 394],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 40],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 42],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 45],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 48],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 58],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 66],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 78],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 90],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 95],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 98],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 99],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10285, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10],"float64"), )
paddle.Tensor.min(Tensor([10],"int32"), )
paddle.Tensor.min(Tensor([10],"int64"), )
paddle.Tensor.min(Tensor([11050, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([11050, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([11050, 4, 16],"float32"), axis=1, )
paddle.Tensor.min(Tensor([11050, 4, 18],"float32"), axis=1, )
paddle.Tensor.min(Tensor([11050, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([11050, 4, 21],"float32"), axis=1, )
paddle.Tensor.min(Tensor([11050, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([11050, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([11050, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([11050, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([11050, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([11050, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 16],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 17],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 18],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 19],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 20],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 21],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 22],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 23],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 25],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 27],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 29],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 30],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 32],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 37],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 41],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 64],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([12240, 4, 97],"float32"), axis=1, )
paddle.Tensor.min(Tensor([13125, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([13125, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([13125, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([13125, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([13125, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([13125, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([13125, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([13125, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([13125, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 15],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 16],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 17],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 18],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 19],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 20],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 21],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 22],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 23],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 24],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 25],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 26],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 27],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 28],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 29],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 30],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 31],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 32],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 33],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 34],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 35],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 38],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 39],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 40],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1360, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16, 10, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 10, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 10, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 10, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 10, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 10, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 10, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 10, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 10, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 10, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 11, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 11, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 11, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 11, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 11, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 11, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 11, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 11, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 12, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 12, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 12, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 12, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 12, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 12, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 12, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 12, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 12, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 12, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 12, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 13, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 13, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 13, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 13, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 13, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 13, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 13, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 13, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 13, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 13, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 13, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 13, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 13, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 14, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 14, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 14, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 14, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 14, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 14, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 14, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 14, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 14, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 14, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 14, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 14, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 14, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 15, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 15, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 15, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 15, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 15, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 15, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 15, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 15, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 15, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 15, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 15, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 15, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 15, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 16, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 16, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 16, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 16, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 16, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 16, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 16, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 16, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 16, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 16, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 16, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 16, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 16, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 17, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 17, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 17, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 17, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 17, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 17, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 17, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 17, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 17, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 17, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 17, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 17, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 17, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 17, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 17, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 18, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 18, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 18, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 18, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 18, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 18, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 18, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 18, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 18, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 18, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 18, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 18, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 18, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 18, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 18, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 19, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 19, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 19, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 19, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 19, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 19, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 19, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 19, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 19, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 19, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 19, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 19, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 19, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 19, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 2, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 2, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 20, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 20, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 20, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 20, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 20, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 20, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 20, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 20, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 20, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 20, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 20, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 20, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 20, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 21, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 21, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 21, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 21, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 21, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 21, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 21, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 21, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 21, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 21, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 21, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 21, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 21, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 21, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 22, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 22, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 22, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 22, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 22, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 22, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 22, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 22, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 22, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 22, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 22, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 22, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 22, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 22, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 23, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 23, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 23, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 23, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 23, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 23, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 23, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 23, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 23, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 23, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 23, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 23, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 24, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 24, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 24, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 24, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 24, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 24, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 24, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 24, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 24, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 24, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 24, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 24, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 24, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 24, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 25, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 25, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 25, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 25, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 25, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 25, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 25, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 25, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 25, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 25, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 26, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 26, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 26, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 26, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 26, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 26, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 26, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 26, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 26, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 27, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 27, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 27, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 27, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 27, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 27, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 27, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 27, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 27, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 27, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 27, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 28, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 28, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 28, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 28, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 28, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 28, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 28, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 28, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 28, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 28, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 28, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 28, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 28, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 29, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 29, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 29, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 29, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 29, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 29, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 29, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 29, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 3, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 30, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 30, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 30, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 30, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 30, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 31, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 31, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 31, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 31, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 31, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 31, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 31, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 31, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 31, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 31, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 32, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 32, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 32, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 32, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 32, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 32, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 33, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 33, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 33, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 33, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 34, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 34, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 34, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 34, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 34, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 35, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 35, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 35, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 35, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 35, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 36, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 36, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 36, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 36, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 36, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 36, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 37, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 37, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 37, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 37, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 38, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 38, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 38, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 38, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 39, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 39, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 39, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 39, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 40, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 40, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 40, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 40, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 40, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 42, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 42, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 43, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 43, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 43, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 43, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 45, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 48, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 48, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 48, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 49, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 5, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 5, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 5, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 50, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 50, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 52, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 54, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 54, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 55, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 6, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 6, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 7, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 7, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 7, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 7, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 77, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 8, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 8, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 8, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 8, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 8, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 8, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 8, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 8, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 8, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 8, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 9, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 9, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 9, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 9, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 9, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 9, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 9, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 9, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 9, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16, 9, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([16660, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 135],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 142],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 15],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 16],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 17],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 18],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 19],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 20],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 27],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 28],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 29],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 36],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 41],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 49],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 52],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 58],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 64],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 71],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 77],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 88],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 92],"float32"), axis=1, )
paddle.Tensor.min(Tensor([16660, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 15],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 16],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 17],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 18],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 19],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 20],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 21],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 22],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 23],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 24],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 25],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 26],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 27],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 28],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 29],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 30],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 31],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 32],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 33],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 34],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 36],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1726, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1888],"float64"), )
paddle.Tensor.min(Tensor([19125, 4, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 121],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 131],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 143],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 16],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 18],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 21],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 22],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 24],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 25],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 26],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 28],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 30],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 31],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 37],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 41],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 43],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 44],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 53],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 54],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 56],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 69],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 73],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 77],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 83],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 89],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([19125, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([192, 1024],"float32"), )
paddle.Tensor.min(Tensor([192, 192],"float32"), )
paddle.Tensor.min(Tensor([192, 3, 14, 14],"float32"), )
paddle.Tensor.min(Tensor([192, 512],"float32"), )
paddle.Tensor.min(Tensor([192],"float32"), )
paddle.Tensor.min(Tensor([1],"int64"), )
paddle.Tensor.min(Tensor([2, 1, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 1, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 1, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 1, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 1, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 1, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 1, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 1, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 1, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 1, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 1, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 1, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 1, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 6150, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 10, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 100, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 100, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 100, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 101, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 102, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 102, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 102, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 102, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 102, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 102, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 103, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 103, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 103, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 103, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 105, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 105, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 105, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 105, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 105, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 106, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 106, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 106, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 107, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 107, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 107, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 108, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 108, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 108, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 108, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 108, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 108, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 109, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 109, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 11, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 110, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 110, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 111, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 111, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 112, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 112, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 112, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 113, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 113, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 113, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 113, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 114, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 114, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 114, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 114, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 114, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 115, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 115, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 115, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 116, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 116, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 116, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 116, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 117, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 117, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 117, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 117, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 117, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 117, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 117, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 118, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 119, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 119, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 119, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 119, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 12, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 120, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 120, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 122, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 122, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 123, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 123, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 123, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 123, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 123, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 123, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 124, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 124, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 125, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 125, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 126, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 126, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 126, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 127, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 129, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 129, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 3598, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 6150, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 13, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 130, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 130, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 131, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 132, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 132, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 132, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 132, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 132, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 132, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 132, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 133, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 133, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 136, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 138, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 138, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 138, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 139, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 139, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 139, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 3598, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 4789, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 6150, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 14, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 140, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 140, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 141, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 142, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 145, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 145, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 146, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 146, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 146, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 147, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 149, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 149, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 6150, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 15, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 150, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 150, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 152, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 152, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 153, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 153, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 154, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 155, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 156, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 156, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 157, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 158, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 158, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 159, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 159, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 159, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 16, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 16, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 16, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 16, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 16, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 16, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 16, 3598, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 16, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 16, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 16, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 16, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 16, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 16, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 16, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 16, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 160, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 160, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 163, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 168, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 168, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 168, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 169, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 169, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 17, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 17, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 17, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 17, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 17, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 17, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 17, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 17, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 17, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 17, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 17, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 17, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 17, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 170, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 170, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 176, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 177, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 177, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 179, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 18, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 18, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 18, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 18, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 18, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 18, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 18, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 18, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 18, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 18, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 18, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 18, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 18, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 18, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 18, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 18, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 184, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 185, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 189, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 189, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 4789, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 19, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 190, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 194, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 194, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 196, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 196, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 197, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 3598, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 4789, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 6150, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 2, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 20, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 20, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 20, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 20, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 20, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 20, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 20, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 20, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 20, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 20, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 20, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 20, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 20, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 20, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 201, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 201, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 204, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 207, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 207, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 208, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 209, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 21, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 21, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 21, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 21, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 21, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 21, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 21, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 21, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 21, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 21, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 21, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 21, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 21, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 210, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 218, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 218, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 22, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 22, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 22, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 22, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 22, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 22, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 22, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 22, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 22, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 22, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 22, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 22, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 22, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 22, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 22, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 220, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 222, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 224, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 227, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 23, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 23, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 23, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 23, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 23, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 23, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 23, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 23, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 23, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 23, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 23, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 23, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 23, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 23, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 23, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 239, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 24, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 24, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 24, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 24, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 24, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 24, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 24, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 24, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 24, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 24, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 24, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 24, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 24, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 240, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 249, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 249, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 25, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 25, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 25, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 25, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 25, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 25, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 25, 3598, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 25, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 25, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 25, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 25, 6150, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 25, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 25, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 25, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 25, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 25, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 255, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 255, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 26, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 26, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 26, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 26, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 26, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 26, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 26, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 26, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 26, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 26, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 26, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 26, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 26, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 26, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 26, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 27, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 27, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 27, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 27, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 27, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 27, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 27, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 27, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 27, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 27, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 27, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 27, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 27, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 27, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 27, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 275, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 275, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 28, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 28, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 28, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 28, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 28, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 28, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 28, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 28, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 28, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 28, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 28, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 28, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 28, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 283, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 283, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 284, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 286, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 286, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 29, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 29, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 29, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 29, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 29, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 29, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 29, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 29, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 29, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 29, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 29, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 29, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 29, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 29, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 293, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 296, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 4789, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 6150, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 8, 8],"float32"), axis=-3, )
paddle.Tensor.min(Tensor([2, 3, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 3, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 30, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 30, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 30, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 30, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 30, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 30, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 30, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 30, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 30, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 30, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 30, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 30, 6150, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 30, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 30, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 30, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 30, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 300, 18496],"float32"), -1, )
paddle.Tensor.min(Tensor([2, 31, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 31, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 31, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 31, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 31, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 31, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 31, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 31, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 31, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 31, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 31, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 31, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 31, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 31, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 319, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 32, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 32, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 32, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 32, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 32, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 32, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 32, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 32, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 32, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 32, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 32, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 32, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 32, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 324, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 329, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 329, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 33, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 33, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 33, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 33, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 33, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 33, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 33, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 33, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 33, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 33, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 33, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 33, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 33, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 333, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 34, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 34, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 34, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 34, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 34, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 34, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 34, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 34, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 34, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 34, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 34, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 34, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 34, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 34, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 35, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 35, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 35, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 35, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 35, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 35, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 35, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 35, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 35, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 35, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 35, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 35, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 35, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 36, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 36, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 36, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 36, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 36, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 36, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 36, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 36, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 36, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 36, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 36, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 36, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 369, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 369, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 37, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 37, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 37, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 37, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 37, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 37, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 37, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 37, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 37, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 37, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 37, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 37, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 37, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 37, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 38, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 38, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 38, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 38, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 38, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 38, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 38, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 38, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 38, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 38, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 38, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 38, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 38, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 39, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 39, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 39, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 39, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 39, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 39, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 39, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 39, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 39, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 39, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 39, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 39, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 3598, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 4789, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 4, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 40, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 40, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 40, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 40, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 40, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 40, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 40, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 40, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 40, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 40, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 40, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 40, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 40, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 400, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 41, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 41, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 41, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 41, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 41, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 41, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 41, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 41, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 41, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 41, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 41, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 41, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 42, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 42, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 42, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 42, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 42, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 42, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 42, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 42, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 42, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 42, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 42, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 42, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 42, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 42, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 43, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 43, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 43, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 43, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 43, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 43, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 43, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 43, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 43, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 43, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 43, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 43, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 43, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 43, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 44, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 44, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 44, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 44, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 44, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 44, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 44, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 44, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 44, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 44, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 45, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 45, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 45, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 45, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 45, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 45, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 45, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 45, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 45, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 45, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 45, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 45, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 45, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 45, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 46, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 46, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 46, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 46, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 46, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 46, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 46, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 46, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 461, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 461, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 47, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 47, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 47, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 47, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 47, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 47, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 47, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 47, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 47, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 47, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 47, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 47, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 47, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 47, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 48, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 48, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 48, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 48, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 48, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 48, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 48, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 48, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 48, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 48, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 48, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 48, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 48, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 49, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 49, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 49, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 49, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 49, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 49, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 49, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 49, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 49, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 49, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 49, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 3598, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 4789, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 5, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 50, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 50, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 50, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 50, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 50, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 50, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 50, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 50, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 50, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 50, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 50, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 51, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 51, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 51, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 51, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 51, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 51, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 51, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 51, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 51, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 51, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 52, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 52, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 52, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 52, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 52, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 52, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 52, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 52, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 52, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 53, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 53, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 53, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 53, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 53, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 53, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 53, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 53, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 53, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 53, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 54, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 54, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 54, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 54, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 54, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 54, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 54, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 54, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 54, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 54, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 55, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 55, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 55, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 55, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 55, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 55, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 55, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 55, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 55, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 56, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 56, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 56, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 56, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 56, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 56, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 56, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 56, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 56, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 56, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 56, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 56, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 57, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 57, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 57, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 57, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 57, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 57, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 57, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 57, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 57, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 57, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 57, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 57, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 58, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 58, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 58, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 58, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 58, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 58, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 58, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 58, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 58, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 58, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 58, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 58, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 59, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 59, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 59, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 59, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 59, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 59, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 59, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 59, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 6, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 60, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 60, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 60, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 60, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 60, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 60, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 60, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 60, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 60, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 60, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 60, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 60, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 61, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 61, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 61, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 61, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 61, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 61, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 61, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 61, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 61, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 61, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 62, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 62, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 62, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 62, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 62, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 63, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 63, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 63, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 63, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 63, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 63, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 63, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 63, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 63, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 63, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 63, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 64, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 64, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 64, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 64, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 64, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 64, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 64, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 65, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 65, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 65, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 65, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 65, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 65, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 65, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 65, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 65, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 65, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 65, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 65, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 65, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 66, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 66, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 66, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 66, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 66, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 66, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 66, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 66, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 66, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 66, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 67, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 67, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 67, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 67, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 67, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 68, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 68, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 68, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 68, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 68, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 68, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 69, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 69, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 69, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 69, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 69, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 69, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 3598, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 4789, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 6150, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 7, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 70, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 70, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 70, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 70, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 70, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 70, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 70, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 70, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 70, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 71, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 71, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 71, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 71, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 71, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 71, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 71, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 72, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 72, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 72, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 72, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 72, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 72, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 72, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 72, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 72, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 72, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 73, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 73, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 73, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 73, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 73, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 73, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 74, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 74, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 74, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 74, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 75, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 75, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 75, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 75, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 75, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 75, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 75, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 76, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 76, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 76, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 76, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 76, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 76, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 76, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 77, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 77, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 77, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 77, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 77, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 77, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 78, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 78, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 78, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 78, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 78, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 79, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 79, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 79, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 79, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 79, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 79, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 79, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 79, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 79, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 3598, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 4789, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 6150, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 8, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 80, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 80, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 80, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 80, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 80, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 80, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 81, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 81, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 81, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 81, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 81, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 81, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 81, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 82, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 82, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 82, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 82, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 82, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 82, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 82, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 83, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 83, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 83, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 83, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 84, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 84, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 84, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 84, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 84, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 84, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 85, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 85, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 85, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 85, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 85, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 86, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 87, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 87, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 87, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 87, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 87, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 87, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 87, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 87, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 88, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 88, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 88, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 88, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 88, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 89, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 89, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 89, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 89, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 89, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 5440, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 6150, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 9, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 90, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 91, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 91, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 92, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 92, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 92, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 92, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 92, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 92, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 93, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 93, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 93, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 93, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 94, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 94, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 94, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 94, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 95, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 95, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 95, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 95, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 95, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 96, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 96, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 96, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 97, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 97, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 97, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 97, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 98, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 98, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 98, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 98, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 99, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 99, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([2, 99, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([20],"float32"), )
paddle.Tensor.min(Tensor([2100, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2100, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2100, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2100, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2100, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2100, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2100, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 15],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 16],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 17],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 18],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 19],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 20],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 21],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 22],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 23],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 24],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 25],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 26],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 27],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 28],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 29],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 30],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 31],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 32],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 34],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 35],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 37],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 38],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 39],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 40],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 42],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 44],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 45],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 77],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2125, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([240640],"float64"), )
paddle.Tensor.min(Tensor([24565, 4, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 136],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 15],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 16],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 17],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 180],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 18],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 19],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 20],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 21],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 22],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 24],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 25],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 26],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 28],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 29],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 32],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 33],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 418],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 42],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 43],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 50],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 51],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 54],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 59],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 63],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 64],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 67],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 71],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 73],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 78],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 811],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 81],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 92],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 97],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 15],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 16],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 17],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 18],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 19],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 20],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 21],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 22],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 23],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 24],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 25],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 26],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 27],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 28],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 29],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 30],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 31],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 32],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 33],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 34],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 35],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 36],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 37],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 38],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 40],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 41],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 42],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 43],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 44],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 48],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 52],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 54],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2577, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 121],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 139],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 143],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 17],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 19],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 20],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 21],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 25],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 26],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 28],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 29],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 30],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 32],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 33],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 35],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 37],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 38],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 39],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 405],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 420],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 44],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 46],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 56],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 58],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 65],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 80],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([27540, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2],"int64"), )
paddle.Tensor.min(Tensor([3, 28, 28],"float32"), axis=-3, )
paddle.Tensor.min(Tensor([3, 8, 8],"float32"), axis=-3, )
paddle.Tensor.min(Tensor([3060, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 15],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 16],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 17],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 18],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 19],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 20],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 21],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 22],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 23],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 24],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 25],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 26],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 27],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 28],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 29],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 30],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 31],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 32],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 33],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 34],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 35],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 36],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 37],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 38],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 39],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 42],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 43],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 45],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 50],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 51],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 53],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 54],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3060, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 126],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 15],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 17],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 18],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 19],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 215],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 21],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 22],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 24],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 25],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 26],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 31],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 35],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 36],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 42],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 52],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 55],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([34000, 4, 97],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 15],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 16],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 17],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 18],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 19],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 20],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 21],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 22],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 23],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 24],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 25],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 26],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 27],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 28],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 29],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 30],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 31],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 32],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 33],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 34],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 35],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 36],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 37],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 39],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 40],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 41],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 42],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 43],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 47],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 49],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 50],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 53],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 54],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 77],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3598, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3],"int64"), )
paddle.Tensor.min(Tensor([4, 1, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 1, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 1, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 1, 3598, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 1, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 1, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 1, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 1, 4789, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 1, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 1, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 1, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 1, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 10, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 10, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 113, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 113, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 119, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 119, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 12, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 120, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 121, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 127, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 130, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 135, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 15, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 15, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 15, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 16, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 163, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 166, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 167, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 17, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 171, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 173, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 174, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 176, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 180, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 19, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 19, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 2, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 2, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 2, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 2, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 2, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 2, 4789, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 2, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 2, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 20, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 20, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 20, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 20, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 211, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 22, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 22, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 22, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 22, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 23, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 23, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 23, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 234, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 24, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 24, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 25, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 25, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 26, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 26, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 26, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 26, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 27, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 272, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 28, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 28, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 28, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 28, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 29, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 29, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 29, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 3, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 3, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 3, 3598, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 3, 4165, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 3, 4789, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 3, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 30, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 30, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 30, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 30, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 31, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 33, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 333, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 34, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 35, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 35, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 35, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 35, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 36, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 36, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 37, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 37, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 37, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 39, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 39, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 39, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 394, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 4, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 40, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 41, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 41, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 41, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 418, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 43, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 45, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 46, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 465, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 47, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 48, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 48, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 5, 4789, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 5, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 50, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 51, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 51, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 52, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 52, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 525, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 53, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 56, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 58, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 6, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 62, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 63, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 64, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 65, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 7, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 73, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 73, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 77, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 78, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 80, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 80, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 83, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 89, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 90, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 92, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 95, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 97, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 97, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 98, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 99, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 99, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4116, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4116, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4116, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4116, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4116, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4116, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 15],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 16],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 17],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 18],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 19],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 20],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 21],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 22],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 23],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 24],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 25],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 26],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 27],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 28],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 29],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 30],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 31],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 32],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 33],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 34],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 35],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 36],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 39],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 41],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 42],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 43],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 48],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 50],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 54],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 55],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4165, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([46530],"float64"), )
paddle.Tensor.min(Tensor([4725, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4725, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4725, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4725, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4725, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4725, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4725, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4725, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4725, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4725, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 15],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 16],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 17],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 18],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 19],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 20],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 21],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 22],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 23],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 24],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 25],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 26],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 27],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 28],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 29],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 30],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 31],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 32],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 33],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 34],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 35],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 36],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 37],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 38],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 39],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 40],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 42],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 45],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 48],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 77],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4789, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([4],"int64"), )
paddle.Tensor.min(Tensor([512, 192],"float32"), )
paddle.Tensor.min(Tensor([512],"float32"), )
paddle.Tensor.min(Tensor([5376, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([5376, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([5376, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([5376, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([5376, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([5376, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([5376, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([5376, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([60160],"float64"), )
paddle.Tensor.min(Tensor([60672],"float64"), )
paddle.Tensor.min(Tensor([64, 13, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 14, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 14, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 15, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 15, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 15, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 16, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 16, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 17, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 17, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 17, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 17, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 17, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 18, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 18, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 18, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 18, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 18, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 19, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 19, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 19, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 19, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 19, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 20, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 20, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 20, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 20, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 20, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 21, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 21, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 21, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 21, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 21, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 22, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 22, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 22, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 22, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 22, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 23, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 23, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 23, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 23, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 23, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 24, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 24, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 24, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 24, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 24, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 25, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 25, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 25, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 25, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 25, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 26, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 26, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 26, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 26, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 26, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 27, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 27, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 27, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 27, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 27, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 28, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 28, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 28, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 28, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 28, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 29, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 29, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 29, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 29, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 29, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 30, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 30, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 30, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 30, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 30, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 31, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 31, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 31, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 31, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 31, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 32, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 32, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 32, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 33, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 33, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 33, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 33, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 33, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 34, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 34, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 34, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 34, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 35, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 35, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 35, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 35, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 35, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 36, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 36, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 36, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 36, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 37, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 37, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 37, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 37, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 37, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 38, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 38, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 39, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 39, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 39, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 39, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 40, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 40, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 41, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 41, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 41, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 42, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 42, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 42, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 42, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 43, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 43, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 44, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 46, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 46, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 46, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 47, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 48, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 48, 2125, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 48, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 50, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 51, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 52, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 53, 1360, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 53, 1726, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 54, 3060, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64, 77, 2577, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([64],"float32"), )
paddle.Tensor.min(Tensor([6804, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([6804, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([6804, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([6804, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([6804, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([6804, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([6804, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([6804, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([6804, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([6804, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([6885, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([6885, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([6885, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([6885, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([7681, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([7681, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([7681, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([7681, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([8, 1, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 1, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 1, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 1, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 10, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 10, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 10, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 10, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 10, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 10, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 10, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 10, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 10, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 10, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 10, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 10, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 10, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 10, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 10, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 11, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 11, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 11, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 11, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 11, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 11, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 11, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 11, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 11, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 11, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 11, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 11, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 11, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 11, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 11, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 12, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 12, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 12, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 12, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 12, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 12, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 12, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 12, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 12, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 12, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 12, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 12, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 12, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 12, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 13, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 13, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 13, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 13, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 13, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 13, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 13, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 13, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 13, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 13, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 13, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 13, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 13, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 13, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 13, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 14, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 14, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 14, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 14, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 14, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 14, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 14, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 14, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 14, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 14, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 14, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 14, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 14, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 14, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 14, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 15, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 15, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 15, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 15, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 15, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 15, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 15, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 15, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 15, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 15, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 15, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 15, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 15, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 15, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 15, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 16, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 16, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 16, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 16, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 16, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 16, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 16, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 16, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 16, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 16, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 16, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 16, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 16, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 16, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 16, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 17, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 17, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 17, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 17, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 17, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 17, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 17, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 17, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 17, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 17, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 17, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 17, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 17, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 17, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 17, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 18, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 18, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 18, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 18, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 18, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 18, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 18, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 18, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 18, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 18, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 18, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 18, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 18, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 18, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 18, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 19, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 19, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 19, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 19, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 19, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 19, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 19, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 19, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 19, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 19, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 19, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 19, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 19, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 19, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 19, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 2, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 2, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 2, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 2, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 2, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 2, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 2, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 2, 6885, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 2, 7681, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 2, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 2, 8500, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 2, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 2, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 20, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 20, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 20, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 20, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 20, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 20, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 20, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 20, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 20, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 20, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 20, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 20, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 20, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 21, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 21, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 21, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 21, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 21, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 21, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 21, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 21, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 21, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 21, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 21, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 21, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 21, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 21, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 21, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 22, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 22, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 22, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 22, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 22, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 22, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 22, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 22, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 22, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 22, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 22, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 22, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 22, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 22, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 23, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 23, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 23, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 23, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 23, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 23, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 23, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 23, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 23, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 23, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 23, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 23, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 23, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 24, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 24, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 24, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 24, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 24, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 24, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 24, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 24, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 24, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 24, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 25, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 25, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 25, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 25, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 25, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 25, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 25, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 25, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 25, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 25, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 25, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 25, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 25, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 26, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 26, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 26, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 26, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 26, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 26, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 26, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 26, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 26, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 26, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 26, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 26, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 26, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 26, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 27, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 27, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 27, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 27, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 27, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 27, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 27, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 27, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 27, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 27, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 27, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 27, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 28, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 28, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 28, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 28, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 28, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 28, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 28, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 28, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 28, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 28, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 29, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 29, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 29, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 29, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 29, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 29, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 29, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 3, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 3, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 3, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 3, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 3, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 3, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 3, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 3, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 3, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 3, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 3, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 3, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 3, 9382, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 30, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 30, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 30, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 30, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 30, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 30, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 30, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 30, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 30, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 30, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 31, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 31, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 31, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 31, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 31, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 31, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 31, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 31, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 31, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 31, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 32, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 32, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 32, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 32, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 32, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 32, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 32, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 32, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 32, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 33, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 33, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 33, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 33, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 33, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 33, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 34, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 34, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 34, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 34, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 34, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 35, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 35, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 35, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 35, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 35, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 35, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 35, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 35, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 36, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 36, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 36, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 36, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 36, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 37, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 37, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 37, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 37, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 37, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 37, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 38, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 38, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 38, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 38, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 38, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 39, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 39, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 4, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 4, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 4, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 4, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 4, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 4, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 4, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 4, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 4, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 4, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 4, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 4, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 4, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 40, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 40, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 41, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 41, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 42, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 43, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 43, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 43, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 44, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 44, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 45, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 45, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 46, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 46, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 47, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 48, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 5, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 5, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 5, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 5, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 5, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 5, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 5, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 5, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 5, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 5, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 5, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 5, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 5, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 5, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 50, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 50, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 52, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 53, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 53, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 54, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 54, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 6, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 6, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 6, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 6, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 6, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 6, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 6, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 6, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 6, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 6, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 6, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 6, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 6, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 6, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 7, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 7, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 7, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 7, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 7, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 7, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 7, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 7, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 7, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 7, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 7, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 7, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 7, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 7, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 7, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 8, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 8, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 8, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 8, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 8, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 8, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 8, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 8, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 8, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 8, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 8, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 8, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 8, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 8, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 8, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 9, 10164, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 9, 11109, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 9, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 9, 2100, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 9, 2541, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 9, 3024, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 9, 3549, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 9, 4116, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 9, 4725, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 9, 5376, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 9, 6069, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 9, 6804, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 9, 7581, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 9, 8400, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8, 9, 9261, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([8500, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([8500, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([8500, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9, 2],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([9180, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9180, 4, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9180, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9180, 4, 19],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9180, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9180, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9180, 4, 30],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9180, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9180, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9180, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9180, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9180, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9261, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9261, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9261, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9261, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9261, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9261, 4, 6],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9261, 4, 7],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9261, 4, 8],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9261, 4, 9],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9382, 4, 1],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9382, 4, 2],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9382, 4, 3],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9382, 4, 4],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9382, 4, 5],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9382, 4, 8],"float32"), axis=1, )
paddle.Tensor.multiply(Tensor([16, 3072],"float32"), Tensor([16, 1],"float32"), )
paddle.Tensor.multiply(Tensor([16, 768],"float32"), Tensor([16, 1],"float32"), )
paddle.Tensor.multiply(Tensor([160, 3072],"float16"), Tensor([160, 1],"float32"), )
paddle.Tensor.multiply(Tensor([160, 3072],"float32"), Tensor([160, 1],"float32"), )
paddle.Tensor.multiply(Tensor([1],"float32"), Tensor([],"float32"), )
paddle.Tensor.multiply(Tensor([2],"float32"), Tensor([],"float32"), )
paddle.Tensor.multiply(Tensor([42],"float32"), Tensor([42],"float32"), )
paddle.Tensor.multiply(Tensor([512, 768],"float16"), Tensor([512, 1],"float32"), )
paddle.Tensor.multiply(Tensor([512, 768],"float32"), Tensor([512, 1],"float32"), )
paddle.Tensor.multiply(Tensor([17157],"float32"), Tensor([],"float32"), )
paddle.Tensor.multiply(Tensor([1861],"float32"), Tensor([],"float32"), )
paddle.Tensor.multiply(Tensor([23619],"float32"), Tensor([],"float32"), )
paddle.Tensor.multiply(Tensor([66244],"float32"), Tensor([],"float32"), )
paddle.Tensor.multiply(Tensor([7953],"float32"), Tensor([],"float32"), )
paddle.Tensor.mod(Tensor([1],"int64"), Tensor([],"int64"), )
paddle.Tensor.neg(Tensor([1],"float32"), )
paddle.Tensor.neg(Tensor([2],"float32"), )
paddle.Tensor.neg(Tensor([17157],"float32"), )
paddle.Tensor.neg(Tensor([1861],"float32"), )
paddle.Tensor.neg(Tensor([23619],"float32"), )
paddle.Tensor.neg(Tensor([66244],"float32"), )
paddle.Tensor.neg(Tensor([7953],"float32"), )
paddle.Tensor.isinf(Tensor([],"float32"), )
paddle.Tensor.isnan(Tensor([1024],"float32"), )
paddle.Tensor.isnan(Tensor([1184],"float32"), )
paddle.Tensor.isnan(Tensor([16384],"float32"), )
paddle.Tensor.isnan(Tensor([168],"float64"), )
paddle.Tensor.isnan(Tensor([1],"float32"), )
paddle.Tensor.isnan(Tensor([2, 3, 4],"float64"), )
paddle.Tensor.isnan(Tensor([2, 3],"float32"), )
paddle.Tensor.isnan(Tensor([2, 3],"float64"), )
paddle.Tensor.isnan(Tensor([20],"float32"), )
paddle.Tensor.isnan(Tensor([2160],"float64"), )
paddle.Tensor.isnan(Tensor([3, 3, 3],"float32"), )
paddle.Tensor.isnan(Tensor([3, 3, 3],"float64"), )
paddle.Tensor.isnan(Tensor([3, 6, 3, 4, 2, 5],"float64"), )
paddle.Tensor.isnan(Tensor([32],"float32"), )
paddle.Tensor.isnan(Tensor([35968],"float32"), )
paddle.Tensor.isnan(Tensor([37],"float32"), )
paddle.Tensor.isnan(Tensor([3],"float32"), )
paddle.Tensor.isnan(Tensor([4, 42],"float64"), )
paddle.Tensor.isnan(Tensor([4, 7, 6],"float64"), )
paddle.Tensor.isnan(Tensor([4, 7],"float32"), )
paddle.Tensor.isnan(Tensor([4, 7],"float64"), )
paddle.Tensor.isnan(Tensor([5, 12],"float64"), )
paddle.Tensor.isnan(Tensor([5, 3, 4],"float64"), )
paddle.Tensor.isnan(Tensor([512],"float32"), )
paddle.Tensor.isnan(Tensor([6],"float32"), )
paddle.Tensor.isnan(Tensor([7, 24],"float64"), )
paddle.Tensor.isnan(Tensor([8],"float32"), )
paddle.Tensor.isnan(Tensor([],"float32"), )
paddle.Tensor.item(Tensor([1, 1, 1, 1],"float32"), )
paddle.Tensor.item(Tensor([1, 1, 1, 1],"float64"), )
paddle.Tensor.item(Tensor([1],"bool"), )
paddle.Tensor.item(Tensor([1],"float32"), )
paddle.Tensor.item(Tensor([1],"float32"), 0, )
paddle.Tensor.item(Tensor([1],"float64"), )
paddle.Tensor.item(Tensor([1],"float64"), 0, )
paddle.Tensor.item(Tensor([1],"int32"), )
paddle.Tensor.item(Tensor([1],"int32"), 0, )
paddle.Tensor.item(Tensor([1],"int64"), )
paddle.Tensor.item(Tensor([1],"int64"), 0, )
paddle.Tensor.item(Tensor([2, 1, 1],"int32"), 0, )
paddle.Tensor.item(Tensor([2, 1, 1],"int64"), 0, )
paddle.Tensor.item(Tensor([3, 3],"float32"), 0, )
paddle.Tensor.item(Tensor([],"bool"), )
paddle.Tensor.item(Tensor([],"float16"), )
paddle.Tensor.item(Tensor([],"float32"), )
paddle.Tensor.item(Tensor([],"float32"), 0, )
paddle.Tensor.item(Tensor([],"float64"), )
paddle.Tensor.item(Tensor([],"int32"), )
paddle.Tensor.item(Tensor([],"int32"), 0, )
paddle.Tensor.item(Tensor([],"int64"), )
paddle.Tensor.item(Tensor([],"int64"), 0, )
paddle.Tensor.item(Tensor([],"uint8"), )
paddle.Tensor.less(Tensor([10, 1024],"float32"), Tensor([10, 1024],"float32"), )
paddle.Tensor.lgamma(Tensor([100, 100, 100],"float64"), )
paddle.Tensor.lgamma(Tensor([2, 3],"float32"), )
paddle.Tensor.lgamma(Tensor([2],"float32"), )
paddle.Tensor.lgamma(Tensor([3],"float32"), )
paddle.Tensor.lgamma(Tensor([4, 5],"float64"), )
paddle.Tensor.lgamma(Tensor([5, 7, 8, 10],"float64"), )
paddle.Tensor.lgamma(Tensor([5, 7, 8],"float64"), )
paddle.Tensor.lgamma(Tensor([],"float32"), )
paddle.Tensor.inverse(Tensor([2, 4, 3, 3],"float32"), )
paddle.Tensor.inverse(Tensor([2, 4, 4],"float32"), )
paddle.Tensor.inverse(Tensor([3, 3],"float32"), )
paddle.Tensor.inverse(Tensor([3, 6, 6],"float64"), )
paddle.Tensor.inverse(Tensor([4, 2, 4, 4],"float64"), )
paddle.Tensor.inverse(Tensor([4, 4],"float64"), )
paddle.Tensor.inverse(Tensor([5, 5],"float32"), )
paddle.Tensor.inverse(Tensor([36, 36],"float32"), )
paddle.Tensor.is_complex(Tensor([1, 100, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 100, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 100, 40],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 100, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 100, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 100, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 12, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 17, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 17, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 2, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 4, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 4, 17],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 4, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 4, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 40, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 40, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 40, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 40, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 6, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 8, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([100, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([100, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([100, 40],"float64"), )
paddle.Tensor.is_complex(Tensor([100, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([100, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([100, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([12, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([16, 16],"float64"), )
paddle.Tensor.is_complex(Tensor([17, 16],"float64"), )
paddle.Tensor.is_complex(Tensor([17, 17],"float64"), )
paddle.Tensor.is_complex(Tensor([17, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([17, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([1],"complex128"), )
paddle.Tensor.is_complex(Tensor([2, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 100, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 100, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 100, 40],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 100, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 100, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 100, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 12, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 17, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 17, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 2, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 4, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 4, 17],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 4, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 4, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 40, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 40, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 40, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 40, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 6, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 8, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3],"complex128"), )
paddle.Tensor.is_complex(Tensor([2, 3],"complex64"), )
paddle.Tensor.is_complex(Tensor([2, 3],"float32"), )
paddle.Tensor.is_complex(Tensor([2, 3],"float64"), )
paddle.Tensor.is_complex(Tensor([21, 21],"float64"), )
paddle.Tensor.is_complex(Tensor([2],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 100, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 100, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 100, 40],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 100, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 100, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 100, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 12, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 17, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 17, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 2, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 2],"int64"), )
paddle.Tensor.is_complex(Tensor([3, 3],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 4, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 4, 17],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 4, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 4, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 40, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 40, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 40, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 40, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 6, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 8, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([3],"complex128"), )
paddle.Tensor.is_complex(Tensor([3],"complex64"), )
paddle.Tensor.is_complex(Tensor([4, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([4, 17],"float64"), )
paddle.Tensor.is_complex(Tensor([4, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([4, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([40, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([40, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([40, 21],"float64"), )
paddle.Tensor.is_complex(Tensor([40, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([40, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([4],"complex64"), )
paddle.Tensor.is_complex(Tensor([4],"float32"), )
paddle.Tensor.is_complex(Tensor([4],"float64"), )
paddle.Tensor.is_complex(Tensor([5, 5],"float64"), )
paddle.Tensor.is_complex(Tensor([6, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([8, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([],"bfloat16"), )
paddle.Tensor.is_complex(Tensor([],"float32"), )
paddle.Tensor.imag(Tensor([1000, 784],"complex64"), )
paddle.Tensor.imag(Tensor([100000, 4],"complex128"), )
paddle.Tensor.imag(Tensor([100000],"complex128"), )
paddle.Tensor.imag(Tensor([16, 1025, 107],"complex64"), )
paddle.Tensor.imag(Tensor([16, 128, 8, 5],"complex64"), )
paddle.Tensor.imag(Tensor([16, 257, 511],"complex64"), )
paddle.Tensor.imag(Tensor([16, 32, 16, 9],"complex64"), )
paddle.Tensor.imag(Tensor([16, 32, 8, 5],"complex64"), )
paddle.Tensor.imag(Tensor([16, 513, 213],"complex64"), )
paddle.Tensor.imag(Tensor([16, 64, 16, 9],"complex64"), )
paddle.Tensor.imag(Tensor([16, 64, 8, 5],"complex64"), )
paddle.Tensor.imag(Tensor([16, 96, 16, 9],"complex64"), )
paddle.Tensor.imag(Tensor([2, 20, 2, 3],"complex128"), )
paddle.Tensor.imag(Tensor([2, 20, 2, 3],"complex64"), )
paddle.Tensor.imag(Tensor([20, 64, 64],"complex64"), )
paddle.Tensor.imag(Tensor([32, 15, 8, 8, 32],"complex64"), )
paddle.Tensor.imag(Tensor([4, 32, 32, 16],"complex64"), )
paddle.Tensor.imag(Tensor([],"complex64"), )
paddle.Tensor.log(Tensor([1, 2],"float32"), )
paddle.Tensor.log(Tensor([10, 1],"float32"), )
paddle.Tensor.log(Tensor([100, 200, 100],"float64"), )
paddle.Tensor.log(Tensor([10000, 4],"float64"), )
paddle.Tensor.log(Tensor([10000, 5, 3],"float64"), )
paddle.Tensor.log(Tensor([10],"float32"), )
paddle.Tensor.log(Tensor([10],"float64"), )
paddle.Tensor.log(Tensor([11, 1],"float32"), )
paddle.Tensor.log(Tensor([1200, 4],"float32"), )
paddle.Tensor.log(Tensor([1800, 4],"float32"), )
paddle.Tensor.log(Tensor([1],"float32"), )
paddle.Tensor.log(Tensor([1],"float64"), )
paddle.Tensor.log(Tensor([2, 1],"float64"), )
paddle.Tensor.log(Tensor([2, 3, 2],"float64"), )
paddle.Tensor.log(Tensor([2, 3, 3],"float64"), )
paddle.Tensor.log(Tensor([2, 3],"float32"), )
paddle.Tensor.log(Tensor([2, 3],"float64"), )
paddle.Tensor.log(Tensor([2, 4],"float64"), )
paddle.Tensor.log(Tensor([2400, 8],"float32"), )
paddle.Tensor.log(Tensor([2],"float32"), )
paddle.Tensor.log(Tensor([2],"float64"), )
paddle.Tensor.log(Tensor([3, 3],"float64"), )
paddle.Tensor.log(Tensor([300, 1],"float32"), )
paddle.Tensor.log(Tensor([300, 4],"float32"), )
paddle.Tensor.log(Tensor([300, 5],"float32"), )
paddle.Tensor.log(Tensor([300, 7],"float32"), )
paddle.Tensor.log(Tensor([300, 8],"float32"), )
paddle.Tensor.log(Tensor([3],"float32"), )
paddle.Tensor.log(Tensor([3],"float64"), )
paddle.Tensor.log(Tensor([42],"float32"), )
paddle.Tensor.log(Tensor([4800, 101],"float32"), )
paddle.Tensor.log(Tensor([4],"float32"), )
paddle.Tensor.log(Tensor([4],"float64"), )
paddle.Tensor.log(Tensor([600, 16],"float32"), )
paddle.Tensor.log(Tensor([600, 2],"float32"), )
paddle.Tensor.log(Tensor([600, 4],"float16"), )
paddle.Tensor.log(Tensor([600, 4],"float32"), )
paddle.Tensor.log(Tensor([6380, 4],"float32"), )
paddle.Tensor.log(Tensor([8, 10],"float64"), )
paddle.Tensor.log(Tensor([8, 1],"float32"), )
paddle.Tensor.log(Tensor([8550, 4],"float32"), )
paddle.Tensor.log(Tensor([9, 1],"float32"), )
paddle.Tensor.log(Tensor([900, 4],"float32"), )
paddle.Tensor.log(Tensor([],"float32"), )
paddle.Tensor.log(Tensor([],"float64"), )
paddle.Tensor.log10(Tensor([80, 499],"float32"), )
paddle.Tensor.log1p(Tensor([10],"float64"), )
paddle.Tensor.log1p(Tensor([1],"float32"), )
paddle.Tensor.log1p(Tensor([1],"float64"), )
paddle.Tensor.log1p(Tensor([2, 3, 2],"float64"), )
paddle.Tensor.log1p(Tensor([2, 3],"float32"), )
paddle.Tensor.log1p(Tensor([2, 3],"float64"), )
paddle.Tensor.log1p(Tensor([3],"float32"), )
paddle.Tensor.log1p(Tensor([3],"float64"), )
paddle.Tensor.log1p(Tensor([],"float32"), )
paddle.Tensor.log1p(Tensor([],"float64"), )
paddle.Tensor.logical_not(Tensor([1024],"bool"), )
paddle.Tensor.logical_not(Tensor([1184],"bool"), )
paddle.Tensor.logical_not(Tensor([13, 9],"float32"), )
paddle.Tensor.logical_not(Tensor([15000],"bool"), )
paddle.Tensor.logical_not(Tensor([1500],"bool"), )
paddle.Tensor.logical_not(Tensor([16384],"bool"), )
paddle.Tensor.logical_not(Tensor([168],"bool"), )
paddle.Tensor.logical_not(Tensor([1],"bool"), )
paddle.Tensor.logical_not(Tensor([2, 3, 4],"bool"), )
paddle.Tensor.logical_not(Tensor([2, 3],"bool"), )
paddle.Tensor.logical_not(Tensor([200],"bool"), )
paddle.Tensor.logical_not(Tensor([20],"bool"), )
paddle.Tensor.logical_not(Tensor([2160],"bool"), )
paddle.Tensor.logical_not(Tensor([3, 3, 3],"bool"), )
paddle.Tensor.logical_not(Tensor([3, 6, 3, 4, 2, 5],"bool"), )
paddle.Tensor.logical_not(Tensor([300],"bool"), )
paddle.Tensor.logical_not(Tensor([32],"bool"), )
paddle.Tensor.logical_not(Tensor([35968],"bool"), )
paddle.Tensor.logical_not(Tensor([3750],"bool"), )
paddle.Tensor.logical_not(Tensor([37],"bool"), )
paddle.Tensor.logical_not(Tensor([3],"bool"), )
paddle.Tensor.logical_not(Tensor([4, 42],"bool"), )
paddle.Tensor.logical_not(Tensor([4, 7, 6],"bool"), )
paddle.Tensor.logical_not(Tensor([4, 7],"bool"), )
paddle.Tensor.logical_not(Tensor([5, 12],"bool"), )
paddle.Tensor.logical_not(Tensor([5, 3, 4],"bool"), )
paddle.Tensor.logical_not(Tensor([512],"bool"), )
paddle.Tensor.logical_not(Tensor([60000],"bool"), )
paddle.Tensor.logical_not(Tensor([6],"bool"), )
paddle.Tensor.logical_not(Tensor([7, 24],"bool"), )
paddle.Tensor.logical_not(Tensor([8],"bool"), )
paddle.nn.functional.avg_pool1d(Tensor([13, 1, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([16, 1, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([16, 2, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 2, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 32],"float32"), 2, None, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=2, stride=2, padding=list[0,], )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float32"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float64"), 1, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float64"), 2, 1, 0, True, True, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float64"), 2, 1, 1, False, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float64"), 3, 4, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([3, 1, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=1, stride=1, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=1, padding=1, exclusive=False, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 40, 54],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 40, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 40, 62],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 42, 64],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 44, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 44, 66],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 46, 62],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 46, 70],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 48, 72],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 50, 76],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 50, 78],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 62, 40],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 64, 42],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 68, 44],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 70, 46],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 74, 48],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 76, 50],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 128, 20, 20],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 2, 4, 4],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 124, 128],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 128, 128],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 128, 128],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 128, 256],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 160, 216],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 160, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 160, 248],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 168, 256],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 176, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 176, 264],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 184, 248],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 184, 280],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 192, 288],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 200, 304],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 200, 312],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 248, 160],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 256, 168],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 272, 176],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 280, 184],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 296, 192],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 304, 200],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 4, 3, 3],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 100, 152],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 100, 156],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 124, 80],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 128, 84],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 136, 88],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 140, 92],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 148, 96],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 152, 100],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 5, 5],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 80, 108],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 80, 120],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 80, 124],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 84, 128],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 88, 120],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 88, 132],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 92, 124],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 92, 140],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 96, 144],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 64, 256, 256],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 8, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([12, 1024, 20, 20],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([12, 1024, 20, 20],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([12, 256, 80, 80],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([12, 256, 80, 80],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([12, 512, 40, 40],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([12, 512, 40, 40],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([128, 1024, 14, 14],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([128, 1024, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([128, 256, 56, 56],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([128, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([128, 512, 28, 28],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([128, 512, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([13, 1, 4, 32],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.avg_pool2d(Tensor([13, 1, 7, 32],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.avg_pool2d(Tensor([16, 1024, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 1024, 4, 4],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 1024, 8, 8],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 256, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 32, 32],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 64, 64],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 256, 128, 128],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 256, 16, 16],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 256, 32, 32],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 512, 16, 16],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 512, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 512, 8, 8],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 64, 64, 64],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1024, 54, 66],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1024, 56, 42],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1024, 60, 44],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1024, 62, 46],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1024, 64, 48],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1024, 64, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1024, 64, 62],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1024, 64, 78],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1024, 68, 50],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1024, 76, 50],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1056, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1152, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 128, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1280, 5, 5],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 192, 25, 25],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 192, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 2048, 5, 5],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 128, 128],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 128, 128],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 128, 256],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 216, 264],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 224, 168],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 240, 176],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 248, 184],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 25, 25],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 256, 192],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 256, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 256, 248],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 256, 312],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 272, 200],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 304, 200],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 288, 25, 25],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], divisor_override=4, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 384, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 108, 132],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 112, 84],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 120, 88],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 124, 92],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 128, 120],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 128, 124],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 128, 156],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 128, 96],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 13, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 136, 100],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 152, 100],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 528, 13, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 640, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 768, 12, 12],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 896, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 128, 8, 50],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 128, 8, 50],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 256, 4, 50],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 256, 4, 50],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 64, 16, 50],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 64, 16, 50],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([3, 1, 40, 44],"float32"), kernel_size=tuple(1,5,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([3, 1, 44, 40],"float32"), kernel_size=tuple(5,1,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([32, 1024, 14, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 512, 28, 28],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 56, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 60, 44],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 60, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 60, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 60, 72],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 60, 82],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 62, 46],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 62, 70],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 62, 84],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 64, 48],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 64, 72],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 66, 50],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 68, 50],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 68, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 68, 58],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 68, 68],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 68, 84],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 70, 48],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 70, 66],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 72, 48],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 1024, 76, 50],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 128, 80, 80],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 128, 128],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 128, 128],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 128, 256],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 128, 256],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 224, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 240, 176],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 240, 224],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 240, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 240, 288],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 240, 328],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 248, 184],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 248, 280],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 248, 336],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 256, 192],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 256, 288],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 264, 200],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 272, 200],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 272, 224],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 272, 232],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 272, 272],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 272, 336],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 280, 192],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 280, 264],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 288, 192],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 304, 200],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 40, 40],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 384, 4, 80],"float32"), list[4,2,], )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 112, 120],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 120, 112],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 120, 120],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 120, 144],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 120, 164],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 120, 88],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 124, 140],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 124, 168],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 124, 92],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 128, 144],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 128, 96],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 132, 100],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 136, 100],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 136, 112],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 136, 116],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 136, 136],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 136, 168],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 140, 132],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 140, 96],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 144, 96],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 152, 100],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 512, 64, 64],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 64, 160, 160],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 64, 256, 256],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 64, 256, 256],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([48, 1024, 14, 14],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([48, 1024, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([48, 256, 56, 56],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([48, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([48, 512, 28, 28],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([48, 512, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 16, 16],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 32, 32],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 4, 4],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 64, 64],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 8, 8],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([6, 1024, 50, 50],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([6, 1024, 50, 50],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([6, 256, 200, 200],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([6, 256, 200, 200],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([6, 512, 100, 100],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([6, 512, 100, 100],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 14, 14],"float16"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 14, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 16, 16],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 16, 16],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 17, 17],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 17, 17],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 104, 28, 28],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 104, 28, 28],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1056, 14, 14],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1056, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 28, 28],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 56, 56],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 64, 64],"float16"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 64, 64],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 64, 64],"float32"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 64, 64],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1280, 8, 8],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1280, 8, 8],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 7, 7],"float16"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 7, 7],"float32"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 8, 8],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 8, 8],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 192, 35, 35],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 192, 35, 35],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 192, 56, 56],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 192, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 2048, 8, 8],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 2048, 8, 8],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 208, 14, 14],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 208, 14, 14],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 256, 14, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 256, 28, 28],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 256, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 256, 32, 32],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 256, 32, 32],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 256, 35, 35],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 256, 35, 35],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 256, 56, 56],"float16"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 256, 64, 64],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 256, 64, 64],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 288, 35, 35],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 288, 35, 35],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 384, 28, 28],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 384, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 384, 35, 35],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 384, 35, 35],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 14, 14],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 16, 16],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 16, 16],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 28, 28],"float16"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 28, 28],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 3, 80],"float16"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 3, 80],"float32"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 32, 32],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 52, 56, 56],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 52, 56, 56],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 64, 56, 56],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 768, 17, 17],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 768, 17, 17],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 1024, 26, 26],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 1024, 30, 30],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 1024, 32, 32],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 1024, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 1024, 34, 34],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 1024, 36, 36],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 1024, 40, 40],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 1024, 40, 40],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 1024, 60, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 128, 120, 120],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 256, 104, 104],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 256, 120, 120],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 256, 128, 128],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 256, 128, 128],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 256, 136, 136],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 256, 144, 144],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 256, 160, 160],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 256, 160, 160],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 256, 240, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 256, 60, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 512, 120, 120],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 512, 3, 80],"float32"), kernel_size=list[2,2,], stride=list[2,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 512, 52, 52],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 512, 60, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 512, 64, 64],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 512, 64, 64],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 512, 68, 68],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 512, 72, 72],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 512, 80, 80],"float16"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 512, 80, 80],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 64, 240, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 32, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 3, 1600, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 40, 40, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 3, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 40, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.batch_norm(Tensor([1, 1024, 256],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 1024, 512],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 128, 1152],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 128, 256],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 128, 512],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 256, 1024],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 256, 2304],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 256, 512],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 256, 64],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 512, 128],"float32"), Tensor([512],"float32"), Tensor([512],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 512, 256],"float32"), Tensor([512],"float32"), Tensor([512],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 64, 256],"float32"), Tensor([64],"float32"), Tensor([64],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 64, 49],"float32"), Tensor([64],"float32"), Tensor([64],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 64, 576],"float32"), Tensor([64],"float32"), Tensor([64],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 64, 64],"float32"), Tensor([64],"float32"), Tensor([64],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-06, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 24, 16, 8],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 8, 16, 32],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 8, 32],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.bilinear(Tensor([1, 3],"float32"), Tensor([1, 3],"float32"), Tensor([6, 3, 3],"float32"), Tensor([1, 6],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float64"), Tensor([3, 2],"float64"), Tensor([4, 1, 2],"float64"), Tensor([1, 4],"float64"), None, )
paddle.nn.functional.bilinear(Tensor([5, 5],"float32"), Tensor([5, 4],"float32"), Tensor([1000, 5, 4],"float32"), Tensor([1, 1000],"float32"), None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 4, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 4, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 4, 4],"float64"), 3, "NCHW", None, )
paddle.audio.functional.get_window("bartlett", 1, )
paddle.audio.functional.get_window("bartlett", 512, )
paddle.audio.functional.get_window("blackman", 1, )
paddle.audio.functional.get_window("blackman", 512, )
paddle.audio.functional.get_window("bohman", 1, )
paddle.audio.functional.get_window("bohman", 512, )
paddle.audio.functional.get_window("cosine", 1, )
paddle.audio.functional.get_window("cosine", 512, )
paddle.audio.functional.get_window("hamming", 1, )
paddle.audio.functional.get_window("hamming", 512, )
paddle.audio.functional.get_window("hann", 1, )
paddle.audio.functional.get_window("hann", 512, )
paddle.audio.functional.get_window("hann", win_length=1024, fftbins=True, )
paddle.audio.functional.get_window("nuttall", 1, )
paddle.audio.functional.get_window("nuttall", 512, )
paddle.audio.functional.get_window("taylor", 1, )
paddle.audio.functional.get_window("triang", 1, )
paddle.audio.functional.get_window(tuple("exponential",None,1,), 1, False, )
paddle.audio.functional.get_window(tuple("exponential",None,1,), 512, False, )
paddle.audio.functional.get_window(tuple("gaussian",7,), 1, False, )
paddle.audio.functional.get_window(tuple("gaussian",7,), 512, False, )
paddle.audio.functional.get_window(tuple("general_gaussian",1,7,), 1, False, )
paddle.audio.functional.get_window(tuple("general_gaussian",1,7,), 512, False, )
paddle.audio.functional.get_window(tuple("kaiser",14.0,), 1, )
paddle.audio.functional.get_window(tuple("kaiser",14.0,), 512, )
paddle.bitwise_invert(Tensor([2, 3, 4, 5],"int32"), )
paddle.bitwise_invert(Tensor([3, 4, 1],"int32"), )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.0, "mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.0, "none", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.0, "none", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.0, "sum", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.0, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.2, "mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.2, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.2, "none", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.2, "none", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.2, "sum", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.2, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10],"float64"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10],"float64"), 0.0, "none", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10],"float64"), 0.0, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10],"float64"), 0.2, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10],"float64"), 0.2, "none", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10],"float64"), 0.2, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([128],"float16"), Tensor([128],"float16"), Tensor([128],"float16"), 0.5, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([128],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), 0.5, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2, 2],"float64"), other=Tensor([2, 2],"float64"), label=Tensor([2, 2],"float64"), margin=0.0, reduction="mean", name=None, )
paddle.nn.functional.gelu(Tensor([1, 1, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 1, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 1, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 1, 32],"float16"), )
paddle.nn.functional.gelu(Tensor([1, 1, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1, 37],"float16"), )
paddle.nn.functional.gelu(Tensor([1, 1, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1, 37],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([1, 1, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 1, 4096],"float32"), True, None, )
paddle.nn.functional.gelu(Tensor([1, 1, 4],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1, 5120],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 1, 8],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1, 8],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([1, 10, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 100, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 101, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 102, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1024, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 1024, 1280],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 1024, 1500],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1024, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1024, 3000],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1024, 3072],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([1, 1024, 4096],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([1, 1024, 640],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 103, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 104, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 105, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 106, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 107, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 108, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 109, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 109, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 11, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 11, 512],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([1, 11, 8],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([1, 110, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 111, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 112, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 113, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 113, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 114, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 115, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1156, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 116, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 117, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 118, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 119, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 12, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 120, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1200, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 121, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 122, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 123, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 124, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 125, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 126, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 127, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 128, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1280, 1500],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1280, 3000],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 129, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1296, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 13, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 13, 4096],"float32"), True, None, )
paddle.nn.functional.gelu(Tensor([1, 130, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 131, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 132, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 133, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 134, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 135, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 136, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 137, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 138, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 139, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 14, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 14, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 140, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 141, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 142, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 143, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 144, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1444, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 145, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 145, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 146, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 147, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 148, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 149, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 15, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 150, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1500, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 1500, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 1500, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 1500, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 1500, 5120],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 151, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 152, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 153, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 154, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 155, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 156, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 157, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 157, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 158, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 15872, 128],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 15872, 256],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 159, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 16, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 16, 14, 14, 1536],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 14, 14, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 14, 15, 1536],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 14, 15, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 14, 16, 1536],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 14, 16, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 14, 17, 1536],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 14, 17, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 14, 18, 1536],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 14, 18, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 14, 19, 1536],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 14, 19, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 15, 14, 1536],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 15, 14, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 16, 14, 1536],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 16, 14, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 18, 14, 1536],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 18, 14, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 28, 28, 768],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 28, 28, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 28, 29, 768],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 28, 29, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 28, 30, 768],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 28, 30, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 28, 32, 768],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 28, 32, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 28, 33, 768],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 28, 33, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 28, 34, 768],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 28, 34, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 28, 36, 768],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 28, 36, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 28, 38, 768],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 28, 38, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 29, 28, 768],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 29, 28, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 30, 28, 768],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 30, 28, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 31, 28, 768],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 31, 28, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 32, 28, 768],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 32, 28, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 35, 28, 768],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 35, 28, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 56, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 56, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 58, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 58, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 59, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 59, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 60, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 60, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 64, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 64, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 65, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 65, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 67, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 67, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 68, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 68, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 71, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 71, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 75, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 56, 75, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 57, 56, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 57, 56, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 59, 56, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 59, 56, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 60, 56, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 60, 56, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 61, 56, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 61, 56, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 62, 56, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 62, 56, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 64, 56, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 64, 56, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 7, 10, 3072],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 7, 10, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 7, 7, 3072],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 7, 7, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 7, 8, 3072],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 7, 8, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 7, 9, 3072],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 7, 9, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 70, 56, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 70, 56, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 8, 7, 3072],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 8, 7, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 9, 7, 3072],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 9, 7, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 160, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1600, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 161, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 162, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 163, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 16384, 128],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16384, 256],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 164, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 165, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 166, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 167, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 168, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 169, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 169, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 17, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 170, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 171, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 172, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1728, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 173, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 174, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 175, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 176, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1764, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 177, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 178, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 179, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 18, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 180, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 181, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 182, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 183, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 184, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 185, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 186, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 187, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 188, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 189, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 19, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 190, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 191, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 192, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 19200, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 193, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1936, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 194, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 195, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 196, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 197, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 198, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 199, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 2, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 2, 2],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 20, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 20, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 20, 37],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([1, 20, 4],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 200, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 201, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 202, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 203, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 204, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 205, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 206, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 207, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 208, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 209, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 21, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 210, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 211, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 2116, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 2116, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 212, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 213, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 214, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 215, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 216, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 217, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 217, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 218, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 219, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 22, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 22, 4],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 220, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 221, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 222, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 223, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 224, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 225, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 226, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 227, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 228, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 229, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 229, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 23, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 230, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 2304, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 2304, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 231, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 232, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 233, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 234, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 235, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 236, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 237, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 238, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 239, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 24, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 240, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 241, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 241, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 242, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 243, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 244, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 245, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 246, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 247, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 248, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 249, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 25, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 250, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 2500, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 256, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 256, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 26, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 261, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 27, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 2704, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 27648, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 28, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 29, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 2916, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 3, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 30, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 300, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 31, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 3136, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 32, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 324, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 33, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 3364, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 34, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 35, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 36, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 3600, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 37, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 38, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 384, 1500],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 384, 3000],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 385, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 39, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 3968, 256],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 3968, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 4, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 40, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 400, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 4096, 256],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 4096, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 4096, 640],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 41, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 42, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 43, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 432, 6144],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 44, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 44, 8],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 45, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 45, 8],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 46, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 46, 8],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 47, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 48, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 4800, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 484, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 49, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 5, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 5, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 50, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 51, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 512, 1500],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 512, 3000],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 52, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 529, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 529, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 53, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 54, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 55, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 56, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 57, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 58, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 59, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 6, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 60, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 61, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 61, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 62, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 63, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 64, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 65, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 65, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 65536, 128],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 66, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 67, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 68, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 69, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 69, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 6912, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 7, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 70, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 71, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 72, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 73, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 73, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 74, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 75, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 76, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 768, 1500],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 768, 3000],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 77, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 77, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 78, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 79, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 8, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 80, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 81, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 82, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 83, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 84, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 85, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 85, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 86, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 87, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 88, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 89, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 9, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 9, 8],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([1, 90, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 91, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 92, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 93, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 94, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 95, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 96, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 97, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 97, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 98, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 99, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 992, 1280],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 992, 640],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 1, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 10, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 100, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 101, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 102, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 103, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 104, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 105, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 105, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 106, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 107, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 108, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 109, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 11, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 110, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 111, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 112, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 113, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 114, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 115, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 116, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 117, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 118, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 119, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 12, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 120, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 121, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 122, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 123, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 124, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 125, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 126, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 127, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 128, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 129, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 129, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 13, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 13, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 130, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 131, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 132, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 133, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 134, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 135, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 136, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 137, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 137, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 138, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 139, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 14, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 140, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 141, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 142, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 143, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 144, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 145, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 146, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 147, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 148, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 149, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 15, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 150, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 151, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 152, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 153, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 154, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 155, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 156, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 157, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 158, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 159, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 16, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 160, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 161, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 162, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 163, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 164, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 165, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 166, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 167, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 168, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 169, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 17, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 17, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 170, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 171, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 172, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 173, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 174, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 175, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 176, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 177, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 178, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 179, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 18, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 180, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 181, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 182, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 183, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 184, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 185, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 19, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 2, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 2, 256],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([10, 20, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 21, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 21, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 22, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 23, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 24, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 25, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 25, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 26, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 27, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 28, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 29, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 29, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 3, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 30, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 31, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 32, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 33, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 33, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 34, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 35, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 36, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 37, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 37, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 38, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 39, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 4, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 40, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 41, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 41, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 42, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 43, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 44, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 45, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 46, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 47, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 48, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 49, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 49, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 5, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 50, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 51, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 52, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 53, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 54, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 55, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 56, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 57, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 57, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 58, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 59, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 6, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 60, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 61, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 62, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 63, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 64, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 65, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 65, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 66, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 67, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 68, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 69, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 7, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 70, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 71, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 72, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 73, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 73, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 74, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 75, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 76, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 77, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 78, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 79, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 8, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 80, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 81, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 81, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 82, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 83, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 84, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 85, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 86, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 87, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 88, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 89, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 89, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 9, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 9, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 90, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 91, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 92, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 93, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 94, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 95, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 96, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 97, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 97, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 98, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([10, 99, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1004, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([1007, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([1008, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([1011, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([1014, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([1024, 16, 512],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([1024, 2, 1024],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([1024, 2, 512],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([1056, 768],"float16"), )
paddle.nn.functional.gelu(Tensor([1056, 768],"float32"), )
paddle.nn.functional.gelu(Tensor([11, 17, 8],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([11, 17],"float32"), False, )
paddle.nn.functional.gelu(Tensor([11, 17],"float32"), True, )
paddle.nn.functional.gelu(Tensor([11, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([114, 4, 256],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([12, 10, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([12, 1024, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([12, 16, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([12, 196, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([12, 2, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([12, 2, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([12, 226, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([12, 256, 256],"float32"), )
paddle.nn.functional.gelu(Tensor([12, 3136, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([12, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([12, 4, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([12, 4, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([12, 49, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([12, 64, 512],"float32"), )
paddle.nn.functional.gelu(Tensor([12, 7, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([12, 7, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([12, 784, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 1024, 7, 7],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 12, 12, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 128, 56, 56],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 1280, 1, 1],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 14, 14, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 14, 14, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 14, 14, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 160, 28, 28],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 196, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 196, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 24, 24, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 256, 28, 28],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 257, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 28, 28, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 28, 28, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 28, 28, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 3136, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 3136, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 320, 14, 14],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 48, 48, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 49, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 49, 6144],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 512, 14, 14],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 56, 56, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 56, 56, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 56, 56, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 640, 7, 7],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 7, 7, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 7, 7, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 7, 7, 6144],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 784, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 784, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 80, 56, 56],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 96, 96, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([12544, 16, 96],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([12544, 16, 96],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 1024, 7, 7],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 12, 12, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 128, 3072],"float16"), )
paddle.nn.functional.gelu(Tensor([128, 128, 3072],"float32"), )
paddle.nn.functional.gelu(Tensor([128, 128, 56, 56],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 1280, 1, 1],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 14, 14, 1536],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 14, 14, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 14, 14, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 14, 14, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 160, 28, 28],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 196, 1024],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 196, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 196, 1280],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 196, 1280],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 196, 1536],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 196, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 196, 2048],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 196, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 197, 3072],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 197, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 197, 768],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 197, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 24, 24, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 256, 28, 28],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 257, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 28, 28, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 28, 28, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 28, 28, 768],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 28, 28, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 3136, 256],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 3136, 256],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 3136, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 3136, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 3136, 512],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 3136, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 3136, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 320, 14, 14],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 48, 48, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 49, 128],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 49, 128],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 49, 2048],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 49, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 49, 3072],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 49, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 49, 320],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 49, 320],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 49, 4096],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 49, 512],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 49, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 49, 6144],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 49, 64],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 49, 64],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 512, 14, 14],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 56, 56, 384],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 56, 56, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 56, 56, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 56, 56, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 640, 7, 7],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 7, 7, 3072],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 7, 7, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 7, 7, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 7, 7, 6144],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 784, 1024],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 784, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 784, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 784, 512],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 784, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 784, 768],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 784, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 80, 56, 56],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 96, 96, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([13, 1, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 1, 4],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 10, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 10, 4],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 1007, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 1024, 4],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 12, 128],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([13, 14, 4],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 2, 16],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 21, 64],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 24, 14],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 3, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 3, 4],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 32, 14],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 32, 255],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 32, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 32, 62],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 4, 4],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 49, 32],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([13, 56, 37],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([13, 64, 1007],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 64, 10],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 64, 3],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 64, 7],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 7, 128],"float16"), )
paddle.nn.functional.gelu(Tensor([13, 7, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 7, 128],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([13, 7, 16],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 7, 16],"float32"), True, None, )
paddle.nn.functional.gelu(Tensor([13, 7, 24],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 7, 32],"float16"), )
paddle.nn.functional.gelu(Tensor([13, 7, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 7, 32],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([13, 7, 37],"float16"), )
paddle.nn.functional.gelu(Tensor([13, 7, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 7, 4],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 7, 64],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 8, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([13, 9, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([130, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([13007, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([13009, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([13016, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([13020, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([14, 1, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([14, 1, 37],"float16"), )
paddle.nn.functional.gelu(Tensor([14, 1, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([14, 1, 37],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([14, 10, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([14, 10, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([14, 10, 37],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([14, 1569, 3072],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([14, 1569, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([14, 209, 1536],"float32"), )
paddle.nn.functional.gelu(Tensor([14, 3, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([14, 3, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([14, 3, 37],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([14, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([14, 7, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([14, 7, 128],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([14, 7, 32],"float16"), )
paddle.nn.functional.gelu(Tensor([14, 7, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([14, 7, 37],"float16"), )
paddle.nn.functional.gelu(Tensor([14, 7, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([14, 7, 37],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([14, 8, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([14, 8, 37],"float16"), )
paddle.nn.functional.gelu(Tensor([14, 8, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([14, 8, 37],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([144, 196, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([144, 3136, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([144, 49, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([144, 784, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([15, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([1544, 768],"float16"), )
paddle.nn.functional.gelu(Tensor([1544, 768],"float32"), )
paddle.nn.functional.gelu(Tensor([16, 1024, 4096],"float16"), True, None, )
paddle.nn.functional.gelu(Tensor([16, 1024, 512],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([16, 12, 12, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([16, 12, 128],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([16, 14, 14, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([16, 16, 64, 64],"float16"), approximate=False, )
paddle.nn.functional.gelu(Tensor([16, 16, 64, 64],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([16, 16, 64, 64],"float32"), approximate=False, )
paddle.nn.functional.gelu(Tensor([16, 16, 64, 64],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([16, 16, 64, 64],"float64"), approximate=False, )
paddle.nn.functional.gelu(Tensor([16, 16, 64, 64],"float64"), approximate=True, )
paddle.nn.functional.gelu(Tensor([16, 196, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([16, 197, 3072],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([16, 197, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([16, 24, 24, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([16, 256, 16, 16],"float32"), )
paddle.nn.functional.gelu(Tensor([16, 257, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([16, 28, 28, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([16, 3136, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([16, 32, 16, 16],"float32"), )
paddle.nn.functional.gelu(Tensor([16, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([16, 400, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([16, 48, 48, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([16, 49, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([16, 56, 56, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([16, 64, 16, 16],"float32"), )
paddle.nn.functional.gelu(Tensor([16, 7, 7, 6144],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([16, 784, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([16, 96, 96, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([17, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([18, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([19, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 1, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 1, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 1, 24576],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 1, 32],"float16"), )
paddle.nn.functional.gelu(Tensor([2, 1, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 1, 37],"float16"), )
paddle.nn.functional.gelu(Tensor([2, 1, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 1, 37],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([2, 1, 4],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 10, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 10, 16],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 10, 24576],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 10, 3072],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 100, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 100, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 101, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 102, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 1024, 1024],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([2, 1024, 1280],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 1024, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 1024, 512],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([2, 1024, 640],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 103, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 104, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 105, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 106, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 107, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 108, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 109, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 11, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 110, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 111, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 112, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 113, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 114, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 115, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 116, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 117, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 118, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 119, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 12, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 120, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 121, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 121, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 121, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 122, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 123, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 124, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 125, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 126, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 127, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 128, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 129, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 129, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 13, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 130, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 131, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 132, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 133, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 134, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 135, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 136, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 137, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 138, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 139, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 14, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 140, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 141, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 142, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 143, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 144, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 144, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 145, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 146, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 147, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 148, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 149, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 15, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 150, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 151, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 152, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 153, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 154, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 155, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 156, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 157, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 158, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 159, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 16, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 160, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 161, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 161, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 162, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 163, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 16384, 128],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 16384, 256],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 16384, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 164, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 165, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 166, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 167, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 168, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 169, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 169, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 17, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 17, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 170, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 171, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 172, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 173, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 174, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 175, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 176, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 177, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 178, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 179, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 18, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 180, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 181, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 181, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 182, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 183, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 184, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 185, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 186, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 187, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 188, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 189, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 19, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 190, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 191, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 192, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 193, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 194, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 195, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 196, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 196, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 197, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 198, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 199, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 2, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 20, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 20, 512],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([2, 200, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 201, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 202, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 203, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 204, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 205, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 206, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 207, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 208, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 209, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 21, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 22, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 225, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 225, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 23, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 2352, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 24, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 25, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 256, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 256, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 256, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 257, 6144],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 26, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 27, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 28, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 289, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 289, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 29, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 3, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 3, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 3, 16],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 3, 3072],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 3, 32],"float16"), )
paddle.nn.functional.gelu(Tensor([2, 3, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 3, 37],"float16"), )
paddle.nn.functional.gelu(Tensor([2, 3, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 3, 37],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([2, 3, 4],"float16"), approximate=False, )
paddle.nn.functional.gelu(Tensor([2, 3, 4],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([2, 3, 4],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 3, 4],"float32"), approximate=False, )
paddle.nn.functional.gelu(Tensor([2, 3, 4],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([2, 3, 4],"float64"), approximate=False, )
paddle.nn.functional.gelu(Tensor([2, 3, 4],"float64"), approximate=True, )
paddle.nn.functional.gelu(Tensor([2, 30, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 31, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 32, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 324, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 33, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 34, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 35, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 36, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 361, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 37, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 37632, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 38, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 39, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 3],"float16"), approximate=False, )
paddle.nn.functional.gelu(Tensor([2, 3],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([2, 3],"float32"), approximate=False, )
paddle.nn.functional.gelu(Tensor([2, 3],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([2, 3],"float64"), approximate=False, )
paddle.nn.functional.gelu(Tensor([2, 3],"float64"), approximate=True, )
paddle.nn.functional.gelu(Tensor([2, 4, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 4, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 40, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 400, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 400, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 4096, 1280],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 4096, 256],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 4096, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 41, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 41, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 42, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 43, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 44, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 441, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 45, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 46, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 47, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 48, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 484, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 49, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 5, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 5, 24576],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 5, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 5, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 5, 8],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 50, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 51, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 52, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 529, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 53, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 54, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 55, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 56, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 57, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 57, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 576, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 58, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 588, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 59, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 6, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 6, 4096],"float16"), )
paddle.nn.functional.gelu(Tensor([2, 60, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 61, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 62, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 63, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 64, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 64, 3072],"float16"), )
paddle.nn.functional.gelu(Tensor([2, 65, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 65536, 256],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 66, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 67, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 68, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 69, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 7, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 7, 16],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 7, 3072],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 7, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 7, 50],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 7, 8],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 70, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 71, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 72, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 73, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 74, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 75, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 76, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 77, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 78, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 79, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 8, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 8, 64],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([2, 80, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 81, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 81, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 82, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 83, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 84, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 85, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 85, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 86, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 87, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 88, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 89, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 9, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 9, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 90, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 91, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 92, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 93, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 94, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 9408, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2, 95, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 96, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 97, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 98, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([2, 99, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([20, 2001, 128],"float32"), approximate=False, )
paddle.nn.functional.gelu(Tensor([20, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([20, 64, 2101],"float32"), approximate=False, )
paddle.nn.functional.gelu(Tensor([2008, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([2009, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([2010, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([2011, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([2016, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([2024, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([2064, 768],"float16"), )
paddle.nn.functional.gelu(Tensor([2064, 768],"float32"), )
paddle.nn.functional.gelu(Tensor([21, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([24, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([256, 128, 256],"float32"), True, None, )
paddle.nn.functional.gelu(Tensor([256, 50, 256],"float32"), True, None, )
paddle.nn.functional.gelu(Tensor([26, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([26, 7, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([28, 144, 6144],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([28, 2304, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([28, 576, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([28, 9216, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([2],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 1, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 10, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 100, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 101, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 102, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 103, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 104, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 105, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 105, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([3, 106, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 107, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 108, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 109, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 11, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 110, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 111, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 112, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 113, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 114, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 115, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 116, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 117, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 118, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 119, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 12, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 12, 128],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([3, 120, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 121, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 122, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 123, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 124, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 125, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 126, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 127, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 128, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 129, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 13, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 130, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 131, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 132, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 133, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 134, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 135, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 136, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 137, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 138, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 139, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 14, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 140, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 141, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 142, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 143, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 144, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 145, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 146, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 147, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 148, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 149, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 15, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 150, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 151, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 152, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 153, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 154, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 155, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 156, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 157, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 158, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 159, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 16, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 160, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 161, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 162, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 163, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 169, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([3, 17, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 18, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 19, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 2, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 20, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 20],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([3, 21, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 21, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([3, 22, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 23, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 24, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 25, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 26, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 27, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 28, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 29, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 3, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 3, 3],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([3, 3, 3],"float64"), False, None, )
paddle.nn.functional.gelu(Tensor([3, 3, 3],"float64"), True, None, )
paddle.nn.functional.gelu(Tensor([3, 30, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 31, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 32, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 33, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 34, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 35, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 36, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 37, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 38, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 39, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 4, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 40, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 41, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 42, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 43, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 44, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 45, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 46, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 47, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 48, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 49, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 5, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 50, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 51, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 52, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 53, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 54, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 55, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 56, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 57, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 58, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 59, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 6, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 60, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 61, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 62, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 63, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 64, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 65, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 66, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 67, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 68, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 69, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 7, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 70, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 71, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 72, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 73, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 74, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 75, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 76, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 77, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 78, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 79, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 8, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 80, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 81, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 82, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 83, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 84, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 85, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 86, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 87, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 88, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 89, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 9, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 9, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([3, 90, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 91, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 92, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 93, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 94, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 95, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 96, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 97, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 98, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 99, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 100, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 101, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 102, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 103, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 104, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 105, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 106, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 108, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 109, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 110, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 111, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 112, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 113, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 113, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 114, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 115, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 116, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 117, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 118, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 119, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 120, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 121, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 121, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 123, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 124, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 125, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 126, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 127, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 128, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 129, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 129, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 13, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 130, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 133, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 134, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 135, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 137, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 138, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 139, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 140, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 141, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 142, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 144, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 145, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 147, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 149, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 150, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 151, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 153, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 154, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 155, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 158, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 161, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 162, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 163, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 164, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 165, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 169, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 169, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 17, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 17, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 170, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 171, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 172, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 173, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 175, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 176, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 181, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 183, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 187, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 189, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 19, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 190, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 191, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 192, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 193, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 194, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 197, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 198, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 20, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 200, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 200, 40],"float16"), approximate=False, )
paddle.nn.functional.gelu(Tensor([30, 200, 40],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([30, 200, 40],"float32"), approximate=False, )
paddle.nn.functional.gelu(Tensor([30, 200, 40],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([30, 203, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 207, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 209, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 21, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 21, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 210, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 211, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 212, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 220, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 222, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 226, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 227, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 23, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 24, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 240, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 241, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 243, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 249, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 25, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 253, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 26, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 264, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 268, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 270, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 274, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 276, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 277, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 28, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 29, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 29, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 293, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 298, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 30, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 302, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 307, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 31, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 32, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 33, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 33, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 336, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 339, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 34, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 35, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 355, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 36, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 369, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 37, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 39, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 41, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 42, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 43, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 44, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 45, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 457, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 46, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 47, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 477, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 48, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 49, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 49, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 498, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 5, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 50, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 52, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 53, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 53, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 54, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 55, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 56, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 57, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 57, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 59, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 61, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 61, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 62, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 63, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 64, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 65, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 66, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 67, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 68, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 69, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 69, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 70, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 71, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 72, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 73, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 73, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 74, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 75, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 76, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 77, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 78, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 79, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 80, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 81, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 81, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 82, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 83, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 84, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 85, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 86, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 87, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 88, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 89, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 9, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 90, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 91, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 92, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 93, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 94, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 95, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 96, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 97, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 97, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([30, 98, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([30, 99, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([300, 4096],"float32"), )
paddle.nn.functional.gelu(Tensor([3007, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([3010, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([3012, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([3016, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([3019, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([31, 98, 130],"float32"), )
paddle.nn.functional.gelu(Tensor([31, 98, 130],"float64"), )
paddle.nn.functional.gelu(Tensor([32, 12, 128],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 128, 4096],"float16"), True, None, )
paddle.nn.functional.gelu(Tensor([32, 1280, 1, 1],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 14, 14, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 14, 14, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 144, 6144],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 15, 15, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 192, 48, 48],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 192, 96, 96],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 197, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 2048, 12, 12],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 2304, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 24, 192, 192],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 28, 28, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 28, 28, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 32, 250, 250],"float32"), )
paddle.nn.functional.gelu(Tensor([32, 384, 24, 24],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 384, 48, 48],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 512, 3072],"float16"), )
paddle.nn.functional.gelu(Tensor([32, 512, 3072],"float32"), )
paddle.nn.functional.gelu(Tensor([32, 56, 56, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 56, 56, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 576, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 7, 7, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 7, 7, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 768, 12, 12],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 768, 24, 24],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 9216, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 96, 96, 96],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([32, 960, 12, 12],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([35, 2, 256],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([39, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 1, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 1, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 1, 24576],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 1, 32],"float16"), )
paddle.nn.functional.gelu(Tensor([4, 1, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 1, 37],"float16"), )
paddle.nn.functional.gelu(Tensor([4, 1, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 1, 37],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([4, 1, 4],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 10, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 100, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 101, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 102, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 1024, 1024],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 1024, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 1024, 7, 7],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 103, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 104, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 105, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 106, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 107, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 108, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 109, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 11, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 110, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 111, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 112, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 113, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 114, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 115, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 116, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 117, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 118, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 119, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 12, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 12, 128],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 120, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 121, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 122, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 123, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 124, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 125, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 126, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 127, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 128, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 128, 16, 80],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 128, 56, 56],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 1280, 1, 1],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 1280, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 129, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 13, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 13, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 130, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 131, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 132, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 133, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 134, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 135, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 136, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 137, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 138, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 139, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 14, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 140, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 141, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 142, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 143, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 144, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 144, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 144, 6144],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 145, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 146, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 147, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 148, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 149, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 15, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 150, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 151, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 152, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 153, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 154, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 155, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 156, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 157, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 158, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 159, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 16, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 160, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 160, 28, 28],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 161, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 162, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 163, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 16384, 256],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 16384, 256],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 164, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 165, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 166, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 167, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 168, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 169, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 17, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 170, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 171, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 172, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 173, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 174, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 175, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 176, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 177, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 178, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 179, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 18, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 180, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 19, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 192, 16, 80],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 196, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 2, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 20, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 20, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 21, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 22, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 23, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 2304, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 2304, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 24, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 25, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 25, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 256, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 256, 28, 28],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 256, 32, 64],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 26, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 27, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 28, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 29, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 3, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 3, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 3, 32],"float16"), )
paddle.nn.functional.gelu(Tensor([4, 3, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 3, 37],"float16"), )
paddle.nn.functional.gelu(Tensor([4, 3, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 3, 37],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([4, 30, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 31, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 3136, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 32, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 32, 256],"float16"), )
paddle.nn.functional.gelu(Tensor([4, 32, 32, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 32, 32, 64],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 320, 14, 14],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 320, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 33, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 34, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 35, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 36, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 37, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 37, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 38, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 384, 8, 80],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 39, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 4, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 40, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 400, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 400, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 4096, 640],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 4096, 640],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 41, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 42, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 43, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 44, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 45, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 46, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 47, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 48, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 48, 32, 160],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 49, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 49, 6144],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 5, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 5, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 5, 24576],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 50, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 51, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 512, 14, 14],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 512, 4096],"float16"), )
paddle.nn.functional.gelu(Tensor([4, 512, 4096],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 52, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 53, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 54, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 55, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 56, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 57, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 576, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 576, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 58, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 59, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 6, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 60, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 61, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 61, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 62, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 63, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 64, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 64, 32, 160],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 64, 32, 64],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 640, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 640, 7, 7],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 65, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 65536, 128],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 65536, 128],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 66, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 67, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 68, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 69, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 7, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 70, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 71, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 72, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 73, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 74, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 75, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 76, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 768, 4, 80],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 77, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 77, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 78, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 784, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 785, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 79, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 8, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 80, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 80, 56, 56],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 81, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 82, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 83, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 84, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 85, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 86, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 87, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 88, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 89, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 9, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 90, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 91, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 92, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 9216, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 9216, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([4, 93, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 94, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 95, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 96, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 97, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 98, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([4, 99, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([40, 60],"float32"), )
paddle.nn.functional.gelu(Tensor([4017, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 1, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 1, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([5, 1, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([5, 1, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([5, 1, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([5, 1, 5120],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([5, 1, 8],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 10, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 100, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 101, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 102, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 103, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 104, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 105, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 106, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 107, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 108, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 109, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 11, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 110, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 111, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 112, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 113, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 114, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 115, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 116, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 117, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 118, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 119, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 12, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 120, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 121, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 122, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 123, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 124, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 125, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 126, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 127, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 128, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 129, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 13, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 130, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 131, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 132, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 133, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 134, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 135, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 136, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 137, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 138, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 139, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 14, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 140, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 141, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 142, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 145, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([5, 15, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 15, 8],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 16, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 17, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 17, 8],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 18, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 19, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 2, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 20, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 20, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 21, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 22, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 23, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 24, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 25, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 26, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 27, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 28, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 29, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 3, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 3, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([5, 3, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([5, 3, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([5, 3, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([5, 3, 5120],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([5, 30, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 31, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 32, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 33, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 33, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([5, 34, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 35, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 36, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 37, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 38, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 39, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 4, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 40, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 41, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 42, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 43, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 44, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 45, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 46, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 47, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 48, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 48, 48, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([5, 49, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 5, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 50, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 51, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 52, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 53, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 54, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 55, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 56, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 57, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 58, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 59, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 6, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 60, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 61, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 62, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 63, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 64, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 65, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 65, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([5, 66, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 67, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 68, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 69, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 7, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 70, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 71, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 72, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 73, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 74, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 75, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 76, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 77, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 78, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 79, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 8, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 80, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 81, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 82, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 83, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 84, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 85, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 86, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 87, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 88, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 89, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 9, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 90, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 91, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 92, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 93, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 94, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 95, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 96, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 97, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 98, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5, 99, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([5017, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([512, 100, 512],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([512, 100, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([512, 200, 256],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([512, 200, 256],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([512, 32, 16, 50],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([512, 32, 16, 50],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([512, 50, 1024],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([512, 50, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([512, 64, 8, 25],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([512, 64, 8, 25],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([52, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([52, 7, 128],"float16"), )
paddle.nn.functional.gelu(Tensor([52, 7, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([52, 7, 37],"float16"), )
paddle.nn.functional.gelu(Tensor([52, 7, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([52, 7, 64],"float32"), )
paddle.nn.functional.gelu(Tensor([520, 768],"float16"), )
paddle.nn.functional.gelu(Tensor([520, 768],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 1, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 1, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 1, 24576],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 1, 32],"float16"), )
paddle.nn.functional.gelu(Tensor([6, 1, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 1, 37],"float16"), )
paddle.nn.functional.gelu(Tensor([6, 1, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 1, 37],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([6, 1, 4],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 10, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 100, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 101, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 102, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 103, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 104, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 105, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 106, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 107, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 108, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 109, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 11, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 110, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 111, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 112, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 113, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 114, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 115, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 116, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 117, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 118, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 119, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 12, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 120, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 121, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 122, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 123, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 124, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 125, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 126, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 127, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 128, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 129, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 13, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 130, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 131, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 132, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 133, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 134, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 135, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 136, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 137, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 138, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 139, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 14, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 140, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 141, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 142, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 143, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 144, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 145, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 146, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 147, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 148, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 149, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 15, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 15, 8],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 150, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 151, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 152, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 153, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 154, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 155, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 156, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 157, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 158, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 159, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 16, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 160, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 161, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 162, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 163, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 164, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 165, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 166, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 167, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 168, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 169, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 17, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 17, 8],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 170, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 171, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 172, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 173, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 174, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 175, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 176, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 177, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 178, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 179, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 18, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 180, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 181, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 182, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 183, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 184, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 185, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 19, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 2, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 20, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 21, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 22, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 23, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 24, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 25, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 25, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([6, 26, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 27, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 28, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 29, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 3, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 3, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 3, 32],"float16"), )
paddle.nn.functional.gelu(Tensor([6, 3, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 3, 37],"float16"), )
paddle.nn.functional.gelu(Tensor([6, 3, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 3, 37],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([6, 30, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 31, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 32, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 33, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 34, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 35, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 36, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 37, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 38, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 39, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 4, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 40, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 41, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 42, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 43, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 44, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 45, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 45, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([6, 46, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 47, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 48, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 49, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 5, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 5, 24576],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 50, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 51, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 52, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 53, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 54, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 55, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 56, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 57, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 57, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([6, 58, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 59, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 6, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 60, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 61, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 62, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 63, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 64, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 65, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 66, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 67, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 68, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 69, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 7, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 7, 16],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 70, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 71, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 72, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 73, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 74, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 75, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 76, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 77, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 78, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 79, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 8, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 80, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 81, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 82, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 83, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 84, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 85, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 86, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 87, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 88, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 89, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 9, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 90, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 91, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 92, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 93, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 94, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 95, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 96, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 97, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 97, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([6, 98, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([6, 99, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([60, 144, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([60, 196, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([60, 196, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([60, 197, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([60, 2304, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([60, 3136, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([60, 3136, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([60, 49, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([60, 49, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([60, 576, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([60, 784, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([60, 784, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([60, 9216, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([6020, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([64, 14, 14, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 144, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 196, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 196, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 197, 1536],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 197, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 197, 3072],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 197, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 2304, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 28, 28, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 3136, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 3136, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 49, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 49, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 56, 56, 384],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 576, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 7, 7, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 784, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 784, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([64, 9216, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([7, 1, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 10, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 10, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 100, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 101, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 102, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 103, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 104, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 105, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 106, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 107, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 108, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 109, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 11, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 11, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 110, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 111, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 112, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 113, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 114, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 115, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 116, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 117, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 118, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 119, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 12, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 120, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 121, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 122, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 123, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 124, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 125, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 126, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 126, 4096],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 127, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 128, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 128, 4096],"float16"), True, None, )
paddle.nn.functional.gelu(Tensor([7, 129, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 13, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 130, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 131, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 132, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 133, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 134, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 135, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 136, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 137, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 138, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 139, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 14, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 14, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 140, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 141, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 142, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 143, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 144, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 145, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 146, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 147, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 148, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 149, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 15, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 150, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 151, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 152, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 153, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 153, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([7, 154, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 155, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 156, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 157, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 158, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 159, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 16, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 160, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 161, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 162, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 163, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 164, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 165, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 165, 4096],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 166, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 167, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 168, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 169, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 17, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 170, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 171, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 172, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 173, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 174, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 175, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 176, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 177, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 178, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 179, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 18, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 180, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 186, 4096],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 19, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 2, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 20, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 2016, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 206, 4096],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 209, 4096],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 21, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 22, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 220, 4096],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 23, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 24, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 25, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 26, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 27, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 28, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 286, 4096],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 29, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 3, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 30, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 31, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 32, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 33, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 34, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 35, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 36, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 37, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 38, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 39, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 4, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 4, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 40, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 41, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 42, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 43, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 435, 4096],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 44, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 45, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 46, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 47, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 48, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 49, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 49, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([7, 5, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 50, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 504, 2048],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 51, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 52, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 53, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 54, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 55, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 56, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 56, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 57, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 58, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 59, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 6, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 60, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 61, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 62, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 63, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 64, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 65, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 66, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 67, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 68, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 69, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 7, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 7, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 70, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 71, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 72, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 73, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 74, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 75, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 76, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 77, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 78, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 785, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([7, 79, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 8, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 80, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 8064, 512],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 81, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 82, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 83, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 84, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 85, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 86, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 87, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 88, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 89, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 9, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 90, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 91, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 92, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 93, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 94, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 95, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 96, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 97, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 98, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([7, 99, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([72, 1024],"float16"), )
paddle.nn.functional.gelu(Tensor([72, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 1, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 10, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 100, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 101, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 102, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 1024, 16384],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([8, 1024, 4096],"float16"), True, None, )
paddle.nn.functional.gelu(Tensor([8, 1024, 8192],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([8, 103, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 104, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 105, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 106, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 107, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 108, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 109, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 11, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 110, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 111, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 112, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 113, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 113, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([8, 114, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 115, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 116, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 117, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 118, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 119, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 12, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 12, 12, 6144],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([8, 120, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 121, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 121, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([8, 122, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 123, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 124, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 125, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 126, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 127, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 128, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 129, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 13, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 130, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 131, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 132, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 133, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 134, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 135, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 136, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 137, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 138, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 139, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 14, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 14, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 140, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 141, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 142, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 143, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 144, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 145, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 146, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 147, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 148, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 149, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 15, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 150, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 151, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 152, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 153, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 154, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 155, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 156, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 157, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 158, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 159, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 16, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 160, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 161, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 162, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 163, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 164, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 165, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 166, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 167, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 168, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 169, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 17, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 170, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 171, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 172, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 173, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 174, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 175, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 176, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 177, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 178, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 179, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 18, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 180, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 181, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 182, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 183, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 184, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 185, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 186, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 187, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 188, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 189, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 19, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 190, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 191, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 192, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 193, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 194, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 195, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 196, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 196, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([8, 197, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 198, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 199, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 2, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 20, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 200, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 201, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 202, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 203, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 204, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 205, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 206, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 207, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 208, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 209, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 21, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 210, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 211, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 212, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 213, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 214, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 215, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 216, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 217, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 218, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 219, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 22, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 220, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 221, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 222, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 223, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 224, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 225, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 226, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 227, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 228, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 229, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 23, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 230, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 231, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 232, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 233, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 234, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 235, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 236, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 237, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 238, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 239, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 24, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 24, 24, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([8, 240, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 241, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 242, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 243, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 244, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 245, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 246, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 247, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 248, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 249, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 25, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 250, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 251, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 252, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 253, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 254, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 255, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 256, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 257, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 258, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 259, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 26, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 260, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 261, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 262, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 263, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 264, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 265, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 266, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 267, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 268, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 269, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 27, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 270, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 271, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 272, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 273, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 274, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 275, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 276, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 277, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 278, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 279, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 28, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 280, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 281, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 282, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 283, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 284, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 285, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 286, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 287, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 288, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 289, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 29, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 290, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 291, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 292, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 293, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 3, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 30, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 31, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 3136, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([8, 32, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 32, 250, 250],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 32, 32, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([8, 33, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 33, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([8, 34, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 35, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 36, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 37, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 38, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 39, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 4, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 40, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 41, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 42, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 43, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 44, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 45, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 46, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 47, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 48, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 48, 48, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([8, 49, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 49, 6144],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([8, 5, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 50, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 51, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 52, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 53, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 54, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 55, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 56, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 57, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 58, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 59, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 6, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 60, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 61, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 62, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 63, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 64, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 65, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 66, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 67, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 68, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 69, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 7, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 70, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 71, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 72, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 73, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 74, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 75, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 76, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 77, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 78, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 784, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([8, 785, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([8, 79, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 8, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 80, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 81, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 82, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 83, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 84, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 85, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 86, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 87, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 88, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 89, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 9, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 90, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 91, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 92, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 93, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 94, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 95, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 96, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 96, 96, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([8, 97, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 98, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([8, 99, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([80, 77, 3072],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([9, 1, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 10, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 100, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 101, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 102, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 103, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 104, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 105, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 106, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 107, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 108, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 109, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 11, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 110, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 111, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 112, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 113, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 114, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 115, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 116, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 117, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 118, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 119, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 12, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 13, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 14, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 15, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 16, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 17, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 18, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 19, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 2, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 20, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 21, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 22, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 23, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 24, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 25, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 26, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 27, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 28, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 29, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 3, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 30, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 31, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 32, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 33, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 34, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 35, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 36, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 37, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 38, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 39, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 4, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 40, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 41, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 42, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 43, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 44, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 45, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 46, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 47, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 48, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 49, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 5, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 50, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 51, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 52, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 53, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 53, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([9, 54, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 55, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 56, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 57, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 58, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 59, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 6, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 60, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 61, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 62, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 63, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 64, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 65, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 66, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 67, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 68, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 69, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 7, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 70, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 71, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 72, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 73, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 74, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 75, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 76, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 77, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 78, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 79, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 8, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 80, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 81, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 82, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 83, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 84, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 85, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 86, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 87, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 88, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 89, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 89, 1024],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([9, 9, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 90, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 91, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 92, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 93, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 94, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 95, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 96, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 97, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 98, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([9, 99, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([91, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([],"float32"), )
paddle.nn.functional.gelu(Tensor([],"float32"), False, )
paddle.nn.functional.gelu(x=Tensor([20, 64, 2101],"float32"), approximate=False, )
paddle.nn.functional.gelu(x=Tensor([3, 3, 3],"float32"), )
paddle.nn.functional.gelu(x=Tensor([3, 3, 3],"float64"), )
paddle.nn.functional.gelu(x=Tensor([3, 3, 3],"float64"), approximate=True, )
paddle.nn.functional.conv1d_transpose(Tensor([1, 128, 112],"float32"), Tensor([128, 64, 8],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 256, 28],"float32"), Tensor([256, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 512, 7],"float32"), Tensor([512, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 64, 448],"float32"), Tensor([64, 32, 8],"float32"), bias=Tensor([32],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 128, 112],"float32"), Tensor([128, 64, 8],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 256, 28],"float32"), Tensor([256, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([2],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 512, 7],"float32"), Tensor([512, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 64, 448],"float32"), Tensor([64, 32, 8],"float32"), bias=Tensor([32],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 3, 16],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([6],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 4, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,], output_padding=1, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 2, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], output_padding=0, groups=1, dilation=2, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 5],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding="SaME", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 5],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding="vALiD", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 8],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[4,4,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 8],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[3,4,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 8, 3],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[3,4,],list[0,0,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NLC", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 128, 128],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 16, 16],"float32"), Tensor([1024, 256, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 2, 2],"float32"), Tensor([1024, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 4, 4],"float32"), Tensor([1024, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 8, 8],"float32"), Tensor([1024, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 3, 4, 4],"float32"), bias=Tensor([3],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 64, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 80, 80],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=Tensor([128],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2, 16, 16],"float32"), Tensor([2, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 128, 128],"float32"), Tensor([2048, 128, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 16, 16],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 32, 32],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 4, 4],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 64, 64],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 8, 8],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 128, 128],"float32"), Tensor([256, 128, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([256, 64, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4, 8, 8],"float32"), Tensor([4, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 16, 16],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 32, 32],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 4, 4],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 64, 64],"float32"), Tensor([4096, 256, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 8, 8],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 1, 1],"float32"), Tensor([512, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 16, 16],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 32, 32],"float32"), Tensor([512, 128, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 32, 32],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 4, 4],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 64, 64],"float32"), Tensor([512, 256, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 8, 8],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([10, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([106, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([106, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([11, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([11, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([110, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([110, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([110, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([112, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([113, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([114, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([116, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([116, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([116, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([117, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([117, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([119, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([12, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([12, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([12, 32, 15, 15],"float32"), Tensor([32, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([120, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([122, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([123, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([123, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([123, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([124, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([124, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([124, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([125, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([125, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([125, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([126, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([127, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([128, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([129, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([13, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([130, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([131, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([131, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([132, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([132, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([132, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([132, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([133, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([133, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([134, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([135, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([135, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([135, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([136, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([136, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([137, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([137, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([138, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([139, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([139, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([14, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([140, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([141, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([141, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([142, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([142, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([143, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([143, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([144, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([144, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([145, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([147, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([147, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([148, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([148, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([148, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([149, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([149, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([15, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([15, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([150, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([150, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([151, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([152, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([152, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([153, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([153, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([154, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([154, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([155, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([155, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([157, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([157, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([157, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([158, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([158, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([158, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([158, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([159, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([159, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([159, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([16, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([16, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([16, 64, 160, 160],"float16"), Tensor([64, 64, 2, 2],"float16"), bias=Tensor([64],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([16, 64, 160, 160],"float32"), Tensor([64, 64, 2, 2],"float32"), bias=Tensor([64],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([16, 64, 320, 320],"float16"), Tensor([64, 1, 2, 2],"float16"), bias=Tensor([1],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([16, 64, 320, 320],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([160, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([160, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([160, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([160, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([161, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([162, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([162, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([162, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([162, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([163, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([164, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([164, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([165, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([166, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([167, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([167, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([167, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([168, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([168, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([168, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([169, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([169, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([169, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([17, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([170, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([171, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([171, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([171, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([171, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([172, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([172, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([172, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([172, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([173, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([173, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([173, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([174, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([174, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([174, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([175, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([175, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([176, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([176, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([176, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([176, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([177, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([178, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([178, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([178, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([179, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([179, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([18, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([180, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([181, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([181, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([181, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([181, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([182, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([182, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([182, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([183, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([183, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([183, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([183, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([184, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([184, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([186, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([186, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([186, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([186, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([187, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([188, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([188, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([189, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([19, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([19, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([190, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([190, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([191, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([191, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([191, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([192, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([192, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([193, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([193, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([194, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([194, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([194, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([195, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([195, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([195, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([195, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([196, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([196, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([196, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([196, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([197, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([197, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([197, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([198, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([198, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([198, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([199, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([199, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([199, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 128, 124, 108],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 192, 2, 2],"float32"), Tensor([192, 192, 2, 2],"float32"), bias=Tensor([192],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 256, 62, 54],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 10, 27, 27],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 3, 2],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 5, 5],"float32"), Tensor([3, 3, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 3],"float64"), Tensor([4, 2, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 64, 248, 216],"float32"), Tensor([64, 128, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 96, 2, 2],"float32"), Tensor([96, 96, 4, 4],"float32"), bias=Tensor([96],"float32"), padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 128, 38, 68],"float32"), Tensor([128, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 256, 19, 34],"float32"), Tensor([256, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 38, 68],"float32"), Tensor([64, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 76, 136],"float32"), Tensor([64, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([200, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([200, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([201, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([201, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([202, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([202, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([202, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([203, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([203, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([203, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([204, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([204, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([204, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([205, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([205, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([205, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([206, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([206, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([206, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([206, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([207, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([207, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([207, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([208, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([208, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([208, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([209, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([209, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([21, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([21, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([210, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([210, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([210, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([211, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([211, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([212, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([212, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([213, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([213, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([213, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([214, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([214, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([215, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([215, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([215, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([215, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([216, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([216, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([216, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([216, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([217, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([217, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([217, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([218, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([218, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([218, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([219, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([219, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([220, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([220, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([220, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([221, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([221, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([222, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([222, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([223, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([223, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([223, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([223, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([224, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([224, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([224, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([225, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([225, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([225, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([226, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([226, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([226, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([227, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([227, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([227, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([228, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([228, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([228, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([229, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([229, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([229, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([230, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([230, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([230, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([230, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([231, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([231, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([232, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([232, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([232, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([233, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([233, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([233, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([233, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([234, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([234, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([234, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([234, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([235, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([235, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([236, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([236, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([237, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([237, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([237, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([237, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([238, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([238, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([238, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([238, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([239, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([239, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([239, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([24, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([24, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([24, 66, 128, 128],"float32"), Tensor([66, 32, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([240, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([240, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([241, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([241, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([241, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([242, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([242, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([242, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([242, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([243, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([243, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([243, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([243, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([244, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([244, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([244, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([245, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([245, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([245, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([245, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([246, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([246, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([247, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([247, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([247, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([247, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([248, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([249, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([249, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([249, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([249, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([25, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([25, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([250, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([250, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([250, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([251, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([251, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([251, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([251, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([252, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([252, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([252, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([252, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([253, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([253, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([253, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([253, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([254, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([254, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([255, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([255, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([256, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([256, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([256, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([257, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([257, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([258, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([258, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([258, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([259, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([259, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([26, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([26, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([260, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([260, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([260, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([260, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([261, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([261, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([261, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([261, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([262, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([262, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([262, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([263, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([263, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([264, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([264, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([264, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([265, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([265, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([265, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([265, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([266, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([266, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([266, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([267, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([267, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([267, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([267, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([268, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([268, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([268, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([269, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([269, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([269, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([269, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([27, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([270, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([270, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([270, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([271, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([271, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([271, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([271, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([272, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([272, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([273, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([273, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([273, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([273, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([274, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([274, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([274, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([275, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([275, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([276, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([276, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([276, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([277, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([277, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([277, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([278, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([278, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([278, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([279, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([280, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([280, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([280, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([280, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([281, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([281, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([281, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([282, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([282, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([282, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([282, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([283, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([283, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([283, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([284, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([284, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([284, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([285, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([285, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([285, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([285, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([286, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([286, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([286, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([286, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([287, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([287, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([288, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([288, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([288, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([289, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([289, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([289, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([289, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([290, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([290, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([290, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([290, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([291, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([291, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([291, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([292, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([292, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([292, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([292, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([293, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([293, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([293, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([294, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([294, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([294, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([294, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([295, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([295, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([295, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([295, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([296, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([296, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([296, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([296, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([297, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([297, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([297, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([297, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([298, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([298, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([298, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([298, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([299, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([299, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([299, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([3, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([300, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([300, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([300, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([300, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([301, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([301, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([301, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([301, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([302, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([302, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([302, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([302, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([303, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([303, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([303, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([304, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([304, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([304, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([305, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([305, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([305, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([306, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([306, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([307, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([307, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([307, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([307, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([308, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([308, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([308, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([309, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([309, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([310, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([310, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([310, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([310, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([311, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([311, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([311, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([311, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([312, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([312, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([312, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([312, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([313, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([313, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([313, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([314, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([314, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([314, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([315, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([315, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([315, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([316, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([316, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([316, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([316, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([317, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([317, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([317, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([317, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([318, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([318, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([318, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([318, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([319, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([319, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([319, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([319, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([320, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([320, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([320, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([321, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([321, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([322, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([322, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([322, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([322, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([323, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([323, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([324, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([324, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([324, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([325, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([325, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([325, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([325, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([326, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([326, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([326, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([327, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([327, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([327, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([327, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([328, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([328, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([328, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([329, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([329, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([329, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([329, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([330, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([330, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([331, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([331, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([331, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([331, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([332, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([332, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([332, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([333, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([333, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([334, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([334, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([335, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([336, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([336, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([336, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([337, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([337, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([337, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([338, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([338, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([338, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([339, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([339, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([339, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([339, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([340, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([340, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([340, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([341, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([341, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([342, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([342, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([342, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([342, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([343, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([343, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([343, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([343, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([344, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([344, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([344, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([345, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([345, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([346, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([346, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([346, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([347, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([347, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([348, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([348, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([348, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([349, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([349, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([350, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([350, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([350, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([350, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([351, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([351, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([352, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([352, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([353, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([353, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([353, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([354, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([354, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([354, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([354, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([355, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([355, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([356, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([356, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([356, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([357, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([358, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([358, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([359, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([359, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([359, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([359, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([360, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([360, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([360, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([360, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([361, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([361, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([362, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([362, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([363, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([364, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([364, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([364, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([365, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([365, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([365, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([366, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([366, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([366, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([366, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([367, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([367, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([367, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([367, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([368, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([368, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([368, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([369, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([369, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([369, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([370, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([371, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([371, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([371, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([372, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([373, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([373, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([374, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([374, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([375, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([375, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([375, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([375, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([376, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([376, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([376, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([376, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([377, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([377, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([377, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([377, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([378, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([378, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([379, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([379, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([379, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([380, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([380, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([381, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([381, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([381, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([381, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([382, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([382, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([382, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([383, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([383, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([383, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([384, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([384, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([384, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([385, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([385, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([385, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([385, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([386, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([386, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([386, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([386, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([387, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([387, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([387, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([388, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([388, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([388, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([389, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([389, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([389, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([390, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([391, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([392, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([392, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([392, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([393, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([393, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([393, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([394, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([394, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([395, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([395, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([396, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([396, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([397, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([398, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([399, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([399, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 1024, 16, 16],"float32"), Tensor([1024, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1024, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 32, 32],"float32"), Tensor([128, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 94, 70],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 3],"float32"), Tensor([3, 5, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 1, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 24, 240, 240],"float32"), Tensor([24, 24, 2, 2],"float32"), bias=Tensor([24],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 24, 480, 480],"float32"), Tensor([24, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 124, 108],"float32"), Tensor([256, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 16, 16],"float32"), Tensor([256, 1, 16, 16],"float32"), bias=None, padding=4, output_padding=0, stride=list[8,8,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 16, 16],"float32"), Tensor([256, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 32, 32],"float32"), Tensor([256, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 47, 35],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 64, 64],"float32"), Tensor([256, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 64, 64],"float32"), Tensor([256, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 2, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 5, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 7],"float32"), Tensor([3, 6, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 4, 3, 3],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 512, 32, 32],"float32"), Tensor([512, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=512, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 160, 160],"float16"), Tensor([64, 64, 2, 2],"float16"), bias=Tensor([64],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 160, 160],"float32"), Tensor([64, 64, 2, 2],"float32"), bias=Tensor([64],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 188, 140],"float32"), Tensor([64, 128, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 240, 240],"float32"), Tensor([64, 64, 2, 2],"float32"), bias=Tensor([64],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 32, 32],"float32"), Tensor([64, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 320, 320],"float16"), Tensor([64, 1, 2, 2],"float16"), bias=Tensor([1],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 320, 320],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 480, 480],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 64, 64],"float32"), Tensor([64, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([400, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([400, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([400, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([400, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([401, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([401, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([401, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([401, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([402, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([402, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([403, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([403, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([404, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([404, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([405, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([405, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([405, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([406, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([406, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([407, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([407, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([408, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([408, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([408, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([409, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([409, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([410, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([410, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([410, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([411, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([411, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([411, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([413, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([413, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([413, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([414, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([414, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([415, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([415, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([415, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([416, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([417, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([417, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([417, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([418, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([418, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([419, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([419, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([419, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([419, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([420, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([421, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([421, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([421, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([422, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([422, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([423, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([423, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([423, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([424, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([424, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([425, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([425, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([426, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([426, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([427, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([427, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([428, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([428, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([428, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([428, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([429, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([429, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([429, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([430, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([430, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([431, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([431, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([431, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([432, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([432, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([433, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([434, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([434, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([434, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([435, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([436, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([437, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([439, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([439, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([439, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([440, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([440, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([441, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([441, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([444, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([445, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([448, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([448, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([448, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([449, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([449, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([450, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([451, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([452, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([452, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([453, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([454, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([455, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([457, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([457, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([461, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([463, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([464, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([467, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([469, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([469, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([469, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([470, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([470, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([472, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([473, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([474, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([474, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([476, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([478, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([482, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([482, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([483, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([484, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([486, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([494, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([495, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([495, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([496, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([498, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([499, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([5, 3, 32, 32],"float32"), Tensor([3, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([502, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([504, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([505, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([510, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([510, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([511, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([512, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([512, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([512, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([512, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([7, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 128, 32, 32],"float16"), Tensor([128, 128, 4, 4],"float16"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 128, 32, 32],"float32"), Tensor([128, 128, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 128, 64, 64],"float16"), Tensor([128, 128, 4, 4],"float16"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 128, 64, 64],"float32"), Tensor([128, 128, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 2048, 16, 16],"float32"), Tensor([2048, 128, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 24, 160, 160],"float16"), Tensor([24, 24, 2, 2],"float16"), bias=Tensor([24],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 24, 160, 160],"float32"), Tensor([24, 24, 2, 2],"float32"), bias=Tensor([24],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 24, 240, 240],"float16"), Tensor([24, 24, 2, 2],"float16"), bias=Tensor([24],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 24, 240, 240],"float32"), Tensor([24, 24, 2, 2],"float32"), bias=Tensor([24],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 24, 320, 320],"float16"), Tensor([24, 1, 2, 2],"float16"), bias=Tensor([1],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 24, 320, 320],"float32"), Tensor([24, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 24, 480, 480],"float16"), Tensor([24, 1, 2, 2],"float16"), bias=Tensor([1],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 24, 480, 480],"float32"), Tensor([24, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 3, 32, 32],"float32"), Tensor([3, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 160, 160],"float16"), Tensor([64, 64, 2, 2],"float16"), bias=Tensor([64],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 160, 160],"float32"), Tensor([64, 64, 2, 2],"float32"), bias=Tensor([64],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 240, 240],"float32"), Tensor([64, 64, 2, 2],"float32"), bias=Tensor([64],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 320, 320],"float16"), Tensor([64, 1, 2, 2],"float16"), bias=Tensor([1],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 320, 320],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 480, 480],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([80, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([9, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([94, 2048, 7, 7],"float16"), Tensor([2048, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([97, 256, 14, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,0,], output_padding=1, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding="vaLiD", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 8, 8, 3],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[1,2,],list[3,4,],list[0,0,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 6, 6, 6],"float32"), Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 8],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([5, 3, 12, 32, 32],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d(Tensor([1, 1024, 3000],"float32"), Tensor([1024, 1024, 3],"float32"), bias=Tensor([1024],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1280, 3000],"float32"), Tensor([1280, 1280, 3],"float32"), bias=Tensor([1280],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 20, 7],"float32"), Tensor([512, 20, 7],"float32"), bias=Tensor([512],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 3, 5],"float32"), Tensor([4, 3, 3],"float32"), bias=Tensor([4],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 1792],"float32"), Tensor([1, 32, 7],"float32"), bias=Tensor([1],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 1792],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 1792],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 1792],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 1792],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 1792],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 1792],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 1792],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 1792],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 1792],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 384, 3000],"float32"), Tensor([384, 384, 3],"float32"), bias=Tensor([384],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 512, 3000],"float32"), Tensor([512, 512, 3],"float32"), bias=Tensor([512],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([64, 64, 7],"float32"), bias=Tensor([64],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([64, 64, 7],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([64, 64, 7],"float32"), bias=Tensor([64],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 768, 3000],"float32"), Tensor([768, 768, 3],"float32"), bias=Tensor([768],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 80, 3000],"float32"), Tensor([1024, 80, 3],"float32"), bias=Tensor([1024],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 80, 3000],"float32"), Tensor([1280, 80, 3],"float32"), bias=Tensor([1280],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 80, 3000],"float32"), Tensor([384, 80, 3],"float32"), bias=Tensor([384],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 80, 3000],"float32"), Tensor([512, 80, 3],"float32"), bias=Tensor([512],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 80, 3000],"float32"), Tensor([768, 80, 3],"float32"), bias=Tensor([768],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 1, 1024],"float32"), Tensor([32, 1, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 20, 2048],"float32"), Tensor([256, 20, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 24, 14],"float32"), Tensor([24, 12, 16],"float32"), bias=Tensor([24],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 256, 2048],"float32"), Tensor([20, 256, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 256, 2048],"float32"), Tensor([256, 256, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 255],"float32"), Tensor([32, 32, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 62],"float32"), Tensor([32, 32, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 7],"float32"), Tensor([32, 16, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 7],"float32"), Tensor([64, 8, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 1007],"float32"), Tensor([64, 1, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 10],"float32"), Tensor([64, 1, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 3],"float32"), Tensor([64, 1, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 7],"float32"), Tensor([32, 64, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 7],"float32"), Tensor([64, 1, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 7, 32],"float32"), Tensor([16, 32, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 7, 32],"float32"), Tensor([32, 1, 3],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([14, 64, 7],"float32"), Tensor([64, 1, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 1, 25500],"float32"), Tensor([64, 1, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([1, 64, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=128, stride=list[1,], dilation=list[128,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=16, stride=list[1,], dilation=list[16,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=2, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=256, stride=list[1,], dilation=list[256,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=32, stride=list[1,], dilation=list[32,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=4, stride=list[1,], dilation=list[4,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=512, stride=list[1,], dilation=list[512,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=64, stride=list[1,], dilation=list[64,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=8, stride=list[1,], dilation=list[8,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([64, 64, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 25500],"float32"), Tensor([128, 80, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 89],"float32"), Tensor([80, 80, 5],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 20, 7],"float32"), Tensor([512, 20, 7],"float32"), bias=Tensor([512],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 256, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 256, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 256, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 256, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 256, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 256, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 256, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 256, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 256, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 2],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([3, 3, 2],"float32"), bias=Tensor([3],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 2],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([3, 3, 2],"float64"), bias=Tensor([3],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([6, 1, 3],"float64"), bias=Tensor([6],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 6],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 6],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 32, 1792],"float32"), Tensor([1, 32, 7],"float32"), bias=Tensor([1],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 32, 1792],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 32, 1792],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 32, 1792],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 32, 1792],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 32, 1792],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 32, 1792],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 32, 1792],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 32, 1792],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 32, 1792],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float32"), Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float64"), Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 64, 448],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 64, 448],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 64, 448],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 64, 448],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 64, 448],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 64, 448],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 64, 448],"float32"), Tensor([64, 64, 7],"float32"), bias=Tensor([64],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 64, 448],"float32"), Tensor([64, 64, 7],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 64, 448],"float32"), Tensor([64, 64, 7],"float32"), bias=Tensor([64],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 16, 3],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([52, 7, 32],"float32"), Tensor([16, 32, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([52, 7, 32],"float32"), Tensor([32, 1, 3],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([8, 256, 100],"float16"), Tensor([1, 256, 1],"float16"), bias=Tensor([1],"float16"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 100],"float16"), Tensor([128, 256, 3],"float16"), bias=Tensor([128],"float16"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 100],"float16"), Tensor([256, 64, 3],"float16"), bias=Tensor([256],"float16"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 100],"float32"), Tensor([1, 256, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 100],"float32"), Tensor([128, 256, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 100],"float32"), Tensor([256, 64, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 400, 100],"float32"), Tensor([256, 100, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([91, 128, 8],"float32"), Tensor([32, 128, 2],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([3, 3, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([3, 3, 2],"float64"), bias=Tensor([3],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([6, 1, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float64"), weight=Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 165],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 261],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 293],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 389],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 421],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 453],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 581],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 613],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 645],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 133, 229],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 165, 421],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 197, 517],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 37, 517],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 37, 549],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 37, 581],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 37, 677],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 10, 26],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 12, 32],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 128],"float32"), Tensor([1024, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 128],"float32"), Tensor([12, 256, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 2, 32],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 2, 34],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 2, 36],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 2, 42],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 256],"float32"), Tensor([24, 128, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 6, 10],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 6, 16],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 6, 18],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 6, 24],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 6, 26],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 6, 28],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 6, 36],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 6, 38],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 6, 40],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 8, 14],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 20],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 20],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 32],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 32],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 36],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 36],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 48],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 48],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 52],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 52],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 56],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 56],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 72],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 72],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 76],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 76],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 80],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 80],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 16, 28],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 16, 28],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 20, 52],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 20, 52],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 24, 64],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 24, 64],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 25, 105],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 25, 113],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 25, 145],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 25, 153],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 25, 161],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 25, 41],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 25, 65],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 25, 73],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 25, 97],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 256],"float32"), Tensor([128, 128, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 256],"float32"), Tensor([3, 128, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 33, 57],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 4, 64],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 4, 64],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 4, 68],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 4, 68],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 4, 72],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 4, 72],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 4, 84],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 4, 84],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 41, 105],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 49, 129],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 9, 129],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 9, 137],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 9, 145],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 9, 169],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 128],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 128],"float32"), Tensor([24, 256, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 16],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 16],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 32, 32],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 32, 32],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 4, 4],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 4, 4],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 64, 64],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 64, 64],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 8, 8],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 8, 8],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 256, 10, 26],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 10, 26],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 12, 32],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 12, 32],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 128],"float32"), Tensor([3, 256, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 13, 21],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 13, 33],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 13, 37],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 13, 49],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 13, 53],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 13, 57],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 13, 73],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 13, 77],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 13, 81],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 17, 29],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 2, 32],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 2, 32],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 2, 34],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 2, 34],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 2, 36],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 2, 36],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 2, 42],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 2, 42],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 21, 53],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 104],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 104],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 104],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 112],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 112],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 112],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 144],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 144],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 144],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 152],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 152],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 152],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 160],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 160],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 160],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 40],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 40],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 40],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 64],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 64],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 64],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 72],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 72],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 72],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 96],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 96],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 24, 96],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 25, 65],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 32, 56],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 32, 56],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 32, 56],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 40, 104],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 40, 104],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 40, 104],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 48, 128],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 48, 128],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 48, 128],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 5, 65],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 5, 69],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 5, 73],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 5, 85],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 10],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 10],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 16],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 16],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 18],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 18],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 24],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 24],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 26],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 26],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 28],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 28],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 36],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 36],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 38],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 38],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 40],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 6, 40],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 8, 128],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 8, 128],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 8, 128],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 8, 136],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 8, 136],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 8, 136],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 8, 144],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 8, 144],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 8, 144],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 8, 14],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 8, 14],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 8, 168],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 8, 168],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 8, 168],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 4096, 16, 16],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 16, 16],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 32, 32],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 32, 32],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 4, 4],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 4, 4],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 64, 64],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 64, 64],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 8, 8],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 8, 8],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 20],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 20],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 20],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 32],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 32],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 32],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 36],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 36],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 36],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 48],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 48],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 48],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 52],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 52],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 52],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 56],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 56],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 56],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 72],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 72],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 72],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 76],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 76],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 76],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 80],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 80],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 12, 80],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 16, 16],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 16, 16],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 16, 28],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 16, 28],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 16, 28],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 20, 52],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 20, 52],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 20, 52],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 24, 64],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 24, 64],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 24, 64],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 256, 256],"float32"), Tensor([12, 128, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 512, 256, 256],"float32"), Tensor([512, 128, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 512, 32, 32],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 32, 32],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 4],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 4],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 64],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 64],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 64],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 68],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 68],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 68],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 72],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 72],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 72],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 84],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 84],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 84],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 64, 64],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 64, 64],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 8, 8],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 8, 8],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 104],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 104],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 104],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 112],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 112],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 112],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 144],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 144],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 144],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 152],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 152],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 152],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 160],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 160],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 160],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 40],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 40],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 40],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 64],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 64],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 64],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 72],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 72],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 72],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 96],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 96],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 24, 96],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 32, 56],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 32, 56],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 32, 56],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 40, 104],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 40, 104],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 40, 104],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 48, 128],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 48, 128],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 48, 128],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 8, 128],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 8, 128],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 8, 128],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 8, 136],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 8, 136],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 8, 136],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 8, 144],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 8, 144],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 8, 144],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 8, 168],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 8, 168],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 64, 8, 168],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 37, 101],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 37, 133],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 37, 165],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 37, 197],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 37, 229],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 37, 261],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 37, 325],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 37, 389],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 37, 69],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 69, 133],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 69, 165],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 69, 197],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 69, 229],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 69, 261],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 69, 293],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 69, 325],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 69, 389],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 69, 421],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 2, 10],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 2, 12],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 2, 14],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 2, 16],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 2, 18],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 2, 20],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 2, 24],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 2, 4],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 2, 6],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 2, 8],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 4, 10],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 4, 12],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 4, 14],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 4, 16],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 4, 18],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 4, 20],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 4, 22],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 4, 24],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 4, 26],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 4, 32],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 4, 34],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1024, 4, 8],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 17, 105],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 17, 129],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 17, 137],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 17, 33],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 17, 41],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 17, 49],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 17, 57],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 17, 65],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 17, 73],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 17, 81],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 17, 89],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 17, 97],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 12],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 12],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 16],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 16],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 20],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 20],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 24],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 24],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 28],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 28],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 32],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 32],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 36],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 36],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 40],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 40],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 48],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 48],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 8],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 4, 8],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 16],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 16],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 20],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 20],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 24],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 24],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 28],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 28],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 32],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 32],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 36],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 36],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 40],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 40],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 44],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 44],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 48],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 48],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 52],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 52],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 64],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 64],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 68],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 8, 68],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 9, 17],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 9, 25],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 9, 33],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 9, 41],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 9, 49],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 9, 57],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 9, 65],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 9, 73],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 9, 81],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 128, 9, 97],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 104],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 104],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 104],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 128],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 128],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 128],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 136],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 136],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 136],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 32],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 32],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 32],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 40],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 40],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 40],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 48],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 48],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 48],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 56],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 56],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 56],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 64],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 64],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 64],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 72],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 72],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 72],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 80],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 80],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 80],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 88],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 88],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 88],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 96],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 96],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 16, 96],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 10],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 10],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 12],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 12],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 14],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 14],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 16],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 16],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 18],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 18],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 20],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 20],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 24],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 24],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 4],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 4],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 6],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 6],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 8],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 2, 8],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 10],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 10],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 12],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 12],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 14],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 14],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 16],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 16],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 18],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 18],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 20],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 20],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 22],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 22],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 24],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 24],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 26],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 26],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 32],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 32],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 34],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 34],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 8],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 4, 8],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 5, 13],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 5, 17],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 5, 21],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 5, 25],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 5, 29],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 5, 33],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 5, 37],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 5, 41],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 5, 49],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 5, 9],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 16],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 16],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 16],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 24],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 24],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 24],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 32],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 32],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 32],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 40],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 40],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 40],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 48],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 48],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 48],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 56],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 56],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 56],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 64],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 64],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 64],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 72],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 72],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 72],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 80],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 80],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 80],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 96],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 96],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 8, 96],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 9, 17],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 9, 21],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 9, 25],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 9, 29],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 9, 33],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 9, 37],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 9, 41],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 9, 45],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 9, 49],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 9, 53],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 9, 65],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 256, 9, 69],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 12],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 12],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 12],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 16],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 16],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 16],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 20],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 20],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 20],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 24],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 24],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 24],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 28],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 28],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 28],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 32],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 32],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 32],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 36],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 36],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 36],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 40],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 40],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 40],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 48],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 48],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 48],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 8],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 8],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 4, 8],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 16],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 16],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 16],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 20],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 20],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 20],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 24],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 24],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 24],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 28],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 28],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 28],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 32],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 32],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 32],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 36],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 36],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 36],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 40],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 40],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 40],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 44],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 44],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 44],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 48],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 48],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 48],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 52],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 52],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 52],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 64],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 64],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 64],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 68],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 68],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 512, 8, 68],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 104],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 104],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 104],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 128],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 128],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 128],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 136],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 136],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 136],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 32],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 32],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 32],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 40],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 40],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 40],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 48],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 48],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 48],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 56],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 56],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 56],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 64],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 64],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 64],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 72],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 72],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 72],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 80],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 80],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 80],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 88],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 88],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 88],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 96],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 96],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 96],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 16],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 16],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 16],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 24],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 24],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 24],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 32],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 32],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 32],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 40],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 40],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 40],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 48],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 48],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 48],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 56],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 56],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 56],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 64],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 64],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 64],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 72],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 72],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 72],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 80],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 80],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 80],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 96],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 96],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 8, 96],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1024, 1, 131, 131],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 258],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 259, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 260, 260],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([12, 1, 11, 11],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([12, 1, 131, 131],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([12, 1, 19, 19],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([12, 1, 259, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([12, 1, 35, 35],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([12, 1, 67, 67],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([128, 1, 259, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([16, 3, 260, 260],"float32"), weight=Tensor([3, 1, 5, 5],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 268, 268],"float32"), weight=Tensor([3, 1, 13, 13],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 284, 284],"float32"), weight=Tensor([3, 1, 29, 29],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([2, 1, 101, 229],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1, 101, 325],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1, 101, 485],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1, 37, 133],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1, 37, 645],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1, 37, 69],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1, 69, 165],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1, 69, 229],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1, 69, 325],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1, 69, 517],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1, 69, 645],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1, 69, 69],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1024, 2, 40],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1024, 2, 4],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1024, 2, 8],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1024, 4, 10],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1024, 4, 14],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1024, 4, 20],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1024, 4, 32],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1024, 4, 40],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1024, 4, 4],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1024, 6, 14],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1024, 6, 20],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 1024, 6, 30],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 12, 28],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 12, 28],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 12, 40],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 12, 40],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 12, 60],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 12, 60],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 17, 129],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 17, 161],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 17, 17],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 17, 41],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 17, 57],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 17, 81],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 25, 121],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 25, 57],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 25, 81],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 4, 16],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 4, 16],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 4, 80],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 4, 80],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 4, 8],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 4, 8],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 8, 20],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 8, 20],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 8, 28],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 8, 28],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 8, 40],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 8, 40],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 8, 64],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 8, 64],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 8, 80],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 8, 80],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 8, 8],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 8, 8],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 9, 161],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 9, 17],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 128, 9, 33],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 4],"float32"), Tensor([384, 192, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 4],"float32"), Tensor([48, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 4],"float32"), Tensor([96, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 24, 8, 8],"float32"), Tensor([24, 24, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 24, 8, 8],"float32"), Tensor([96, 24, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 256, 13, 29],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 13, 41],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 13, 61],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 128],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 128],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 128],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 160],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 160],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 160],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 16],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 16],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 16],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 40],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 40],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 40],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 56],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 56],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 56],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 80],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 80],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 16, 80],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 2, 40],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 2, 40],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 2, 4],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 2, 4],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 2, 8],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 2, 8],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 24, 120],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 24, 120],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 24, 120],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 24, 56],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 24, 56],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 24, 56],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 24, 80],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 24, 80],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 24, 80],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 4, 10],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 4, 10],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 4, 14],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 4, 14],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 4, 20],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 4, 20],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 4, 32],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 4, 32],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 4, 40],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 4, 40],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 4, 4],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 4, 4],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 5, 17],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 5, 81],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 5, 9],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 6, 14],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 6, 14],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 6, 20],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 6, 20],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 6, 30],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 6, 30],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 8, 160],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 8, 160],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 8, 160],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 8, 16],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 8, 16],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 8, 16],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 8, 32],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 8, 32],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 8, 32],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 9, 21],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 9, 29],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 9, 41],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 9, 65],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 9, 81],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 256, 9, 9],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 3, 37, 37],"float32"), Tensor([64, 3, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 384, 2, 2],"float32"), Tensor([96, 384, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 4, 4],"float32"), Tensor([192, 48, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 4, 4],"float32"), Tensor([48, 48, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 9, 9],"float32"), Tensor([48, 48, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 512, 12, 28],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 12, 28],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 12, 28],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 12, 40],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 12, 40],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 12, 40],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 12, 60],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 12, 60],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 12, 60],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 4, 16],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 4, 16],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 4, 16],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 4, 80],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 4, 80],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 4, 80],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 4, 8],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 4, 8],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 4, 8],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 20],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 20],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 20],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 28],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 28],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 28],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 40],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 40],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 40],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 64],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 64],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 64],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 80],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 80],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 80],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 8],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 8],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 512, 8, 8],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 128],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 128],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 128],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 160],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 160],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 160],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 16],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 16],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 16],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 40],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 40],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 40],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 56],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 56],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 56],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 80],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 80],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 16, 80],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 24, 120],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 24, 120],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 24, 120],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 24, 56],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 24, 56],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 24, 56],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 24, 80],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 24, 80],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 24, 80],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 8, 160],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 8, 160],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 8, 160],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 8, 16],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 8, 16],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 8, 16],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 8, 32],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 8, 32],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 8, 32],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([2, 64, 8, 8],"float32"), Tensor([24, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 64, 8, 8],"float32"), Tensor([96, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 96, 2, 2],"float32"), Tensor([384, 96, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 96, 2, 2],"float32"), Tensor([96, 96, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 96, 5, 5],"float32"), Tensor([96, 96, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 96, 8, 8],"float32"), Tensor([192, 96, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 96, 8, 8],"float32"), Tensor([24, 96, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 96, 8, 8],"float32"), Tensor([48, 96, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2048, 1, 11, 11],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([2048, 1, 130, 130],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([2048, 1, 131, 131],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([2048, 1, 132, 132],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([2048, 1, 19, 19],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([2048, 1, 35, 35],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([2048, 1, 67, 67],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([24, 1, 11, 11],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([24, 1, 131, 131],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([24, 1, 19, 19],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([24, 1, 259, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([24, 1, 35, 35],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([24, 1, 67, 67],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([256, 1, 131, 131],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([3, 1, 11, 11],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([3, 1, 131, 131],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([3, 1, 19, 19],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([3, 1, 259, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([3, 1, 35, 35],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([3, 1, 37, 165],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 1, 67, 67],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([3, 1, 69, 37],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 1, 69, 677],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 1024, 2, 10],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 1024, 4, 26],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 1024, 4, 2],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 1024, 4, 42],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 128, 17, 105],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 128, 17, 169],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 128, 17, 9],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 128, 4, 20],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 128, 4, 20],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 128, 8, 4],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 128, 8, 4],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 128, 8, 52],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 128, 8, 52],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 128, 8, 84],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 128, 8, 84],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 128, 9, 41],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 16, 1, 1],"float32"), Tensor([64, 16, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 16, 2, 2],"float32"), Tensor([16, 16, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 16, 4, 4],"float32"), Tensor([32, 16, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 16, 4, 4],"float32"), Tensor([8, 16, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 256, 16, 104],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 16, 104],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 16, 104],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 16, 168],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 16, 168],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 16, 168],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 16, 8],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 16, 8],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 16, 8],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 2, 10],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 2, 10],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 4, 26],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 4, 26],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 4, 2],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 4, 2],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 4, 42],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 4, 42],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 5, 21],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 8, 40],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 8, 40],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 8, 40],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 9, 53],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 9, 5],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 256, 9, 85],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 3, 32, 32],"float32"), Tensor([64, 3, 7, 7],"float32"), None, list[2,2,], 3, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 32, 2, 2],"float32"), Tensor([16, 32, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 32, 2, 2],"float32"), Tensor([64, 32, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 32, 2, 2],"float32"), Tensor([8, 32, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 512, 4, 20],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 512, 4, 20],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 512, 4, 20],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 512, 8, 4],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 512, 8, 4],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 512, 8, 4],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 512, 8, 52],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 512, 8, 52],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 512, 8, 52],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 512, 8, 84],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 512, 8, 84],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 512, 8, 84],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 64, 16, 104],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 64, 16, 104],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 64, 16, 104],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 64, 16, 168],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 64, 16, 168],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 64, 16, 168],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 64, 16, 8],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 64, 16, 8],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 64, 16, 8],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 64, 8, 40],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 64, 8, 40],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 64, 8, 40],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([3, 64, 8, 8],"float32"), Tensor([8, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 8, 2, 2],"float32"), Tensor([32, 8, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 8, 2, 2],"float32"), Tensor([8, 8, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 8, 4, 4],"float32"), Tensor([16, 8, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 8, 4, 4],"float32"), Tensor([8, 8, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 8, 8, 8],"float32"), Tensor([16, 8, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 8, 8, 8],"float32"), Tensor([8, 8, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 8, 8, 8],"float32"), Tensor([8, 8, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 8, 8, 8],"float32"), Tensor([8, 8, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([30, 1, 101, 453],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 101],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 133],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 165],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 197],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 229],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 261],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 293],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 325],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 357],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 37],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 389],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 421],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 453],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 485],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 517],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 549],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 37, 69],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 101],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 133],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 165],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 197],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 229],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 261],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 293],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 325],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 357],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 389],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 421],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 453],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 485],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 517],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 549],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 581],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 613],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 645],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 677],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1, 69, 69],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 10],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 12],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 14],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 16],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 18],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 20],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 22],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 24],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 26],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 28],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 2],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 30],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 32],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 34],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 4],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 6],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 2, 8],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 10],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 12],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 14],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 16],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 18],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 20],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 22],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 24],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 26],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 28],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 30],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 32],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 34],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 36],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 38],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 40],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 42],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 4],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 6],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 4, 8],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 1024, 6, 28],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 12, 56],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 12, 56],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 105],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 113],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 121],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 129],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 137],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 145],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 153],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 161],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 169],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 17],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 25],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 33],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 41],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 49],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 57],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 65],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 73],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 81],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 89],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 97],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 25, 113],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 12],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 12],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 16],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 16],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 20],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 20],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 24],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 24],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 28],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 28],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 32],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 32],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 36],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 36],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 40],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 40],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 44],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 44],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 48],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 48],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 4],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 4],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 52],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 52],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 56],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 56],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 60],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 60],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 64],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 64],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 68],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 68],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 8],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 4, 8],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 12],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 12],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 16],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 16],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 20],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 20],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 24],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 24],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 28],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 28],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 32],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 32],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 36],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 36],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 40],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 40],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 44],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 44],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 48],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 48],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 52],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 52],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 56],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 56],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 60],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 60],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 64],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 64],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 68],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 68],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 72],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 72],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 76],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 76],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 80],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 80],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 84],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 84],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 8],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 8],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 105],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 113],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 121],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 129],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 137],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 17],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 25],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 33],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 41],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 49],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 57],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 65],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 73],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 81],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 89],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 97],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 9, 9],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 13, 57],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 104],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 104],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 104],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 112],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 112],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 112],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 120],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 120],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 120],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 128],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 128],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 128],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 136],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 136],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 136],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 144],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 144],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 144],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 152],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 152],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 152],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 160],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 160],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 160],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 168],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 168],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 168],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 16],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 16],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 16],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 24],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 24],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 24],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 32],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 32],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 32],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 40],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 40],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 40],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 48],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 48],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 48],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 56],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 56],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 56],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 64],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 64],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 64],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 72],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 72],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 72],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 80],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 80],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 80],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 88],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 88],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 88],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 96],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 96],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 96],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 10],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 10],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 12],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 12],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 14],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 14],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 16],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 16],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 18],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 18],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 20],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 20],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 22],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 22],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 24],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 24],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 26],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 26],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 28],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 28],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 2],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 2],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 30],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 30],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 32],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 32],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 34],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 34],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 4],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 4],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 6],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 6],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 8],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 2, 8],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 24, 112],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 24, 112],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 24, 112],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 10],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 10],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 12],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 12],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 14],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 14],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 16],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 16],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 18],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 18],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 20],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 20],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 22],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 22],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 24],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 24],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 26],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 26],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 28],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 28],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 30],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 30],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 32],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 32],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 34],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 34],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 36],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 36],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 38],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 38],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 40],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 40],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 42],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 42],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 4],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 4],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 6],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 6],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 8],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 4, 8],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 13],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 17],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 21],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 25],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 29],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 33],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 37],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 41],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 45],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 49],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 53],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 57],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 5],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 61],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 65],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 69],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 5, 9],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 6, 28],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 6, 28],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 104],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 104],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 104],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 112],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 112],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 112],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 120],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 120],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 120],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 128],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 128],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 128],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 136],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 136],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 136],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 16],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 16],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 16],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 24],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 24],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 24],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 32],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 32],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 32],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 40],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 40],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 40],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 48],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 48],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 48],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 56],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 56],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 56],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 64],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 64],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 64],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 72],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 72],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 72],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 80],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 80],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 80],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 88],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 88],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 88],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 8],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 8],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 8],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 96],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 96],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 96],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 13],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 17],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 21],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 25],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 29],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 33],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 37],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 41],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 45],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 49],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 53],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 57],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 61],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 65],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 69],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 73],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 77],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 81],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 85],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 9, 9],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 12, 56],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 12, 56],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 12, 56],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 12],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 12],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 12],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 16],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 16],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 16],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 20],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 20],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 20],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 24],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 24],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 24],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 28],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 28],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 28],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 32],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 32],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 32],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 36],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 36],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 36],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 40],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 40],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 40],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 44],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 44],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 44],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 48],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 48],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 48],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 4],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 4],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 4],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 52],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 52],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 52],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 56],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 56],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 56],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 60],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 60],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 60],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 64],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 64],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 64],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 68],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 68],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 68],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 8],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 8],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 4, 8],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 12],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 12],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 12],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 16],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 16],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 16],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 20],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 20],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 20],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 24],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 24],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 24],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 28],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 28],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 28],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 32],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 32],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 32],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 36],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 36],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 36],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 40],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 40],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 40],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 44],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 44],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 44],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 48],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 48],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 48],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 52],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 52],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 52],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 56],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 56],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 56],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 60],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 60],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 60],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 64],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 64],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 64],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 68],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 68],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 68],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 72],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 72],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 72],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 76],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 76],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 76],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 80],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 80],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 80],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 84],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 84],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 84],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 8],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 8],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 8],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 104],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 104],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 104],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 112],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 112],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 112],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 120],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 120],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 120],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 128],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 128],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 128],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 136],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 136],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 136],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 144],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 144],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 144],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 152],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 152],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 152],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 160],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 160],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 160],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 168],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 168],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 168],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 16],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 16],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 16],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 24],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 24],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 24],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 32],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 32],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 32],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 40],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 40],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 40],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 48],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 48],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 48],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 56],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 56],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 56],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 64],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 64],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 64],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 72],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 72],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 72],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 80],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 80],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 80],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 88],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 88],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 88],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 96],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 96],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 96],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 24, 112],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 24, 112],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 24, 112],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 104],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 104],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 104],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 112],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 112],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 112],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 120],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 120],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 120],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 128],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 128],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 128],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 136],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 136],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 136],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 16],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 16],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 16],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 24],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 24],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 24],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 32],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 32],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 32],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 40],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 40],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 40],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 48],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 48],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 48],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 56],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 56],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 56],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 64],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 64],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 64],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 72],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 72],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 72],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 80],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 80],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 80],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 88],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 88],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 88],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 8],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 8],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 8],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 96],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 96],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 96],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 1, 37, 101],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 1, 37, 293],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 1, 37, 37],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 1, 37, 485],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 1, 37, 613],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 1, 69, 101],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 1024, 2, 18],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 1024, 2, 2],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 1024, 2, 30],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 1024, 2, 38],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 1024, 2, 6],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 1024, 4, 6],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 17, 25],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 4, 12],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 4, 12],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 4, 36],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 4, 36],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 4, 4],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 4, 4],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 4, 60],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 4, 60],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 4, 76],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 4, 76],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 8, 12],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 8, 12],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 9, 121],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 9, 153],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 9, 25],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 9, 73],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 128, 9, 9],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 256, 16, 24],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 16, 24],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 16, 24],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 2, 18],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 2, 18],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 2, 2],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 2, 2],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 2, 30],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 2, 30],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 2, 38],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 2, 38],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 2, 6],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 2, 6],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 4, 6],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 4, 6],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 5, 13],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 5, 37],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 5, 5],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 5, 61],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 5, 77],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 8, 120],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 8, 120],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 8, 120],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 8, 152],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 8, 152],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 8, 152],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 8, 24],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 8, 24],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 8, 24],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 8, 72],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 8, 72],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 8, 72],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 8, 8],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 8, 8],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 8, 8],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 256, 9, 13],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 16],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 512, 4, 12],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 4, 12],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 4, 12],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 4, 36],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 4, 36],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 4, 36],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 4, 4],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 4, 4],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 4, 4],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 4, 60],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 4, 60],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 4, 60],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 4, 76],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 4, 76],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 4, 76],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 8, 12],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 8, 12],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 512, 8, 12],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([12, 1, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 64, 16, 24],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 16, 24],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 16, 24],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 8, 120],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 8, 120],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 8, 120],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 8, 152],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 8, 152],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 8, 152],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 8, 24],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 8, 24],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 8, 24],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 8, 72],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 8, 72],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 8, 72],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 8, 8],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 8, 8],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4, 64, 8, 8],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4096, 1, 10, 10],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([4096, 1, 11, 11],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([4096, 1, 12, 12],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([4096, 1, 18, 18],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([4096, 1, 19, 19],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([4096, 1, 20, 20],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([4096, 1, 34, 34],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([4096, 1, 35, 35],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([4096, 1, 36, 36],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([4096, 1, 66, 66],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([4096, 1, 67, 67],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([4096, 1, 68, 68],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([5, 1, 69, 133],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 1, 69, 261],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 1024, 4, 16],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 1024, 4, 36],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 1024, 4, 8],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 128, 17, 145],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 128, 17, 33],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 128, 17, 65],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 128, 8, 16],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 128, 8, 16],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 128, 8, 32],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 128, 8, 32],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 128, 8, 72],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 128, 8, 72],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 16, 144],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 16, 144],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 16, 144],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 16, 32],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 16, 32],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 16, 32],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 16, 64],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 16, 64],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 16, 64],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 4, 16],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 4, 16],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 4, 36],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 4, 36],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 4, 8],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 4, 8],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 9, 17],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 9, 33],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 256, 9, 73],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 512, 8, 16],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 512, 8, 16],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 512, 8, 16],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 512, 8, 32],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 512, 8, 32],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 512, 8, 32],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 512, 8, 72],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 512, 8, 72],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 512, 8, 72],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 64, 16, 144],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 64, 16, 144],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 64, 16, 144],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 64, 16, 32],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 64, 16, 32],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 64, 16, 32],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 64, 16, 64],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 64, 16, 64],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([5, 64, 16, 64],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([512, 1, 11, 11],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([512, 1, 19, 19],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([512, 1, 259, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([512, 1, 35, 35],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([512, 1, 67, 67],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([6, 1, 37, 197],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 1, 37, 357],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 1, 37, 453],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 1, 69, 389],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 1024, 2, 12],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 1024, 2, 22],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 1024, 2, 28],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 1024, 4, 24],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 128, 17, 97],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 128, 4, 24],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 128, 4, 24],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 128, 4, 44],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 128, 4, 44],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 128, 4, 56],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 128, 4, 56],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 128, 8, 48],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 128, 8, 48],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 128, 9, 113],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 128, 9, 49],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 128, 9, 89],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 16, 96],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 16, 96],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 16, 96],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 2, 12],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 2, 12],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 2, 22],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 2, 22],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 2, 28],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 2, 28],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 4, 24],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 4, 24],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 5, 25],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 5, 45],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 5, 57],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 8, 112],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 8, 112],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 8, 112],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 8, 48],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 8, 48],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 8, 48],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 8, 88],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 8, 88],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 8, 88],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 256, 9, 49],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 512, 4, 24],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 512, 4, 24],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 512, 4, 24],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 512, 4, 44],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 512, 4, 44],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 512, 4, 44],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 512, 4, 56],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 512, 4, 56],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 512, 4, 56],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 512, 8, 48],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 512, 8, 48],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 512, 8, 48],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 64, 16, 96],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 64, 16, 96],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 64, 16, 96],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 64, 8, 112],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 64, 8, 112],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 64, 8, 112],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 64, 8, 48],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 64, 8, 48],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 64, 8, 48],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 64, 8, 88],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 64, 8, 88],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([6, 64, 8, 88],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([7, 1, 69, 197],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 1024, 4, 12],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 1024, 4, 38],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 128, 17, 153],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 128, 17, 49],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 128, 8, 24],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 128, 8, 24],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 128, 8, 76],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 128, 8, 76],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 256, 16, 152],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 256, 16, 152],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 256, 16, 152],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 256, 16, 48],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 256, 16, 48],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 256, 16, 48],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 256, 4, 12],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 256, 4, 12],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 256, 4, 38],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 256, 4, 38],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 256, 9, 25],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 256, 9, 77],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 512, 8, 24],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 512, 8, 24],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 512, 8, 24],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 512, 8, 76],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 512, 8, 76],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 512, 8, 76],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 64, 16, 152],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 64, 16, 152],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 64, 16, 152],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 64, 16, 48],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 64, 16, 48],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([7, 64, 16, 48],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 1, 37, 261],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 1024, 2, 16],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 1024, 4, 28],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 1024, 4, 30],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 17, 113],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 17, 121],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 255, 255],"float32"), Tensor([256, 128, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 257, 257],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 4, 32],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 4, 32],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 8, 56],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 8, 56],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 8, 60],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 8, 60],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 9, 65],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 127, 127],"float32"), Tensor([512, 256, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 256, 128, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 129, 129],"float32"), Tensor([512, 256, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 256, 16, 112],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 16, 112],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 16, 112],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 16, 120],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 16, 120],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 16, 120],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 2, 16],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 2, 16],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 4, 28],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 4, 28],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 4, 30],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 4, 30],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 5, 33],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 8, 64],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 8, 64],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 8, 64],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 9, 57],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 9, 61],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 512, 15, 15],"float32"), Tensor([512, 512, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 512, 16, 16],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 512, 17, 17],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 512, 31, 31],"float32"), Tensor([512, 512, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 512, 32, 32],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 512, 33, 33],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 512, 4, 32],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 512, 4, 32],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 512, 4, 32],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 512, 63, 63],"float32"), Tensor([512, 512, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 512, 64, 64],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 512, 65, 65],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 512, 7, 7],"float32"), Tensor([512, 512, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 512, 8, 56],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 512, 8, 56],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 512, 8, 56],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 512, 8, 60],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 512, 8, 60],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 512, 8, 60],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 512, 8, 8],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 512, 9, 9],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 513, 4, 4],"float32"), Tensor([512, 513, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 64, 16, 112],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 64, 16, 112],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 64, 16, 112],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 64, 16, 120],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 64, 16, 120],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 64, 16, 120],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 64, 8, 64],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 64, 8, 64],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 64, 8, 64],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 1, 37, 421],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 1, 69, 357],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 1024, 2, 26],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 1024, 4, 22],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 128, 17, 89],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 128, 4, 52],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 128, 4, 52],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 128, 8, 44],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 128, 8, 44],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 128, 9, 105],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 256, 16, 88],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 256, 16, 88],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 256, 16, 88],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 256, 2, 26],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 256, 2, 26],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 256, 4, 22],"float32"), Tensor([1024, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 256, 4, 22],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 256, 5, 53],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 256, 8, 104],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 256, 8, 104],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 256, 8, 104],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 256, 9, 45],"float32"), Tensor([256, 256, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 512, 4, 52],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 512, 4, 52],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 512, 4, 52],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 512, 8, 44],"float32"), Tensor([1024, 512, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 512, 8, 44],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 512, 8, 44],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 64, 16, 88],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 64, 16, 88],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 64, 16, 88],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 64, 8, 104],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 64, 8, 104],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 64, 8, 104],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([3, 3, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 2, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([2, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([3, 3, 2, 2],"float64"), bias=Tensor([3],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 4, 3],"float64"), weight=Tensor([2, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([6, 1, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 2, 2, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([2, 3, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([3, 3, 2, 2, 2],"float64"), bias=Tensor([3],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([6, 1, 3, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float64"), weight=Tensor([2, 3, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.max_pool1d(Tensor([1, 1, 2],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 16],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 16],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 16],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 6],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), 2, None, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float32"), 2, 2, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 1, 1, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, 1, 0, False, True, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, 1, 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, 1, list[1,], False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, 2, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, 2, 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, list[1,], 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 3, 4, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), list[3,], 1, 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([91, 32, 7],"float32"), 7, )
paddle.nn.functional.max_pool1d(x=Tensor([1, 1, 2],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=1, stride=1, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=1, padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=1, padding=list[1,], )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=2, padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=list[1,], padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=list[3,], stride=1, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 128, 40, 40],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 16, 12, 12],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 192, 20, 20],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 192, 20, 20],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 192, 20, 20],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 2, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 20, 220, 220],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 24, 40, 40],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 20, 20],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 20, 27],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 20, 30],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 20, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 21, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 21, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 22, 30],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 22, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 22, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 23, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 23, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 24, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 25, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 25, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 25, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 31, 20],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 32, 21],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 34, 22],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 35, 23],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 37, 24],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 38, 25],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 224, 224],"float32"), kernel_size=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 224, 224],"float32"), kernel_size=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 224, 224],"float32"), kernel_size=3, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 6, 6],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 32, 32],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 32, 32],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 32, 32],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 34, 34],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 34, 34],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 34, 34],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 36, 36],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 36, 36],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 36, 36],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 38, 38],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 38, 38],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 38, 38],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 40, 40],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 40, 40],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 40, 40],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 42, 42],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 42, 42],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 42, 42],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 44, 44],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 44, 44],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 44, 44],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 46, 46],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 46, 46],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 46, 46],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 48, 48],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 48, 48],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 48, 48],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 50, 50],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 50, 50],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 50, 50],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 52, 52],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 52, 52],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 52, 52],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 54, 54],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 54, 54],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 54, 54],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 56, 56],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 56, 56],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 56, 56],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 58, 58],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 58, 58],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 58, 58],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 60, 60],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 60, 60],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 60, 60],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 50, 106, 106],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 512, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 512, 5, 5],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 6, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 128, 128],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 17, 257],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 17, 273],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 17, 289],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 17, 337],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 248, 256],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 256, 256],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 256, 256],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 256, 512],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 288, 399],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 320, 432],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 320, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 320, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 336, 504],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 336, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 336, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 352, 469],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 352, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 352, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 352, 545],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 352, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 354, 288],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 368, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 368, 552],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 368, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 384, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 40, 40],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 400, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 400, 600],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 400, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 400, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 49, 129],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 49, 145],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 49, 193],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 49, 209],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 49, 225],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 49, 289],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 49, 305],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 49, 321],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 49, 81],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 496, 320],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 512, 336],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 512, 512],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 529, 352],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 544, 352],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 553, 368],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 560, 368],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 592, 384],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 608, 400],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 65, 113],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 80, 80],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 81, 209],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 97, 257],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 128, 480, 480],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10, 128, 480, 480],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10, 256, 120, 120],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10, 256, 120, 120],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10, 256, 240, 240],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10, 256, 240, 240],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 17, 113],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 17, 129],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 17, 145],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 17, 161],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 17, 193],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 17, 33],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 17, 49],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 17, 65],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 17, 81],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 17, 97],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 33, 113],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 33, 129],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 33, 145],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 33, 161],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 33, 177],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 33, 193],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 33, 209],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 33, 257],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 33, 273],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 33, 65],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 33, 81],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 33, 97],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([12, 128, 40, 40],"float16"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 128, 40, 40],"float32"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 256, 20, 20],"float16"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 256, 20, 20],"float32"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 512, 10, 10],"float16"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 512, 10, 10],"float16"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([12, 512, 10, 10],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([12, 512, 10, 10],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([12, 512, 10, 10],"float32"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 512, 10, 10],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([12, 512, 10, 10],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([12, 512, 10, 10],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([12, 64, 160, 160],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([12, 64, 160, 160],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([128, 128, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 128, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 20, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 50, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 64, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 96, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 96, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([13, 1, 4, 1],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([13, 1, 7, 1],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([13, 256, 7, 7],"float32"), kernel_size=1, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([13, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([13, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1536, 24, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1536, 24, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 128, 128, 128],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 128, 16, 16],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 128, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 128, 64, 64],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 16, 40, 40],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 256, 16, 16],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 256, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 256, 64, 64],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 256, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 32, 20, 20],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 10, 10],"float16"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 10, 10],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 10, 10],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 10, 10],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 10, 10],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 10, 10],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 11, 11],"float16"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 11, 11],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 11, 11],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 11, 11],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 11, 11],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 11, 11],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 12, 12],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 12, 12],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 12, 12],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 12, 12],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 12, 12],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 13, 13],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 13, 13],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 13, 13],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 13, 13],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 13, 13],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 14, 14],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 14, 14],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 14, 14],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 14, 14],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 14, 14],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 15, 15],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 15, 15],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 15, 15],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 15, 15],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 15, 15],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 16, 16],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 16, 16],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 16, 16],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 16, 16],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 16, 16],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 17, 17],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 17, 17],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 17, 17],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 17, 17],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 17, 17],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 18, 18],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 18, 18],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 18, 18],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 18, 18],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 18, 18],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 19, 19],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 19, 19],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 19, 19],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 19, 19],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 19, 19],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 20, 20],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 20, 20],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 20, 20],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 20, 20],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 21, 21],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 21, 21],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 21, 21],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 21, 21],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 21, 21],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 22, 22],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 22, 22],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 22, 22],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 22, 22],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 22, 22],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 23, 23],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 23, 23],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 23, 23],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 23, 23],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 23, 23],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 24, 24],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 24, 24],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 24, 24],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 24, 24],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 24, 24],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 512, 16, 16],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 512, 20, 20],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 512, 20, 20],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 512, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 512, 4, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 512, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 64, 128, 128],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 64, 224, 224],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 64, 256, 256],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 64, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 64, 64, 64],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 128, 112, 112],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 128, 55, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 10, 10],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 10, 10],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 10, 10],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 11, 11],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 11, 11],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 11, 11],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 12, 12],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 12, 12],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 12, 12],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 13, 13],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 13, 13],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 13, 13],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 14, 14],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 14, 14],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 14, 14],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 15, 15],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 15, 15],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 15, 15],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 16, 16],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 16, 16],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 16, 16],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 17, 17],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 17, 17],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 17, 17],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 18, 18],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 18, 18],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 18, 18],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 19, 19],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 19, 19],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 19, 19],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 20, 20],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 20, 20],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 20, 20],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 21, 21],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 21, 21],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 21, 21],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 22, 22],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 22, 22],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 22, 22],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 23, 23],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 23, 23],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 23, 23],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 24, 24],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 24, 24],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 24, 24],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 27, 27],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 27, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 3, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 52, 52],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 55, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 20, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 24, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 244, 244, 2],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 13, 13],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 27, 27],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 27, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 27, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 28, 21],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 30, 22],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 31, 23],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 32, 24],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 32, 30],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 32, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 32, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 34, 25],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 38, 25],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 54, 54],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 288, 25, 25],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 224, 224],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=1, ceil_mode=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=list[2,2,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[2,2,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,0,0,], return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,2,], padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=tuple(1,2,), padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 32, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, data_format="NHWC", )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 10, 10],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 10, 10],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 10, 10],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 11, 11],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 11, 11],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 11, 11],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 12, 12],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 12, 12],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 12, 12],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 13, 13],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 13, 13],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 13, 13],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 14, 14],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 14, 14],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 14, 14],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 15, 15],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 15, 15],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 15, 15],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 16, 16],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 16, 16],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 16, 16],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 17, 17],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 17, 17],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 17, 17],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 18, 18],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 18, 18],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 18, 18],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 19, 19],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 19, 19],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 19, 19],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 20, 20],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 20, 20],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 20, 20],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 21, 21],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 21, 21],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 21, 21],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 22, 22],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 22, 22],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 22, 22],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 23, 23],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 23, 23],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 23, 23],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 24, 24],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 24, 24],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 384, 24, 24],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 40],"float64"), kernel_size=2, stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 40],"float64"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 40],"float64"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 40],"float64"), kernel_size=tuple(2,4,), stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 480, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 480, 27, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 50, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 26, 26],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 528, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 109, 109],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 17, 17],"float32"), kernel_size=tuple(3,3,), stride=tuple(2,2,), padding=tuple(0,0,), return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 17, 321],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 17, 33],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 17, 65],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 224, 224],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 256, 256],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 256, 256],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 256, 512],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 304, 457],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 304, 457],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 33, 113],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 33, 161],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 33, 257],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 33, 321],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 33, 33],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 33, 81],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 427, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 427, 489],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 432, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 448, 336],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 470, 352],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 470, 504],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 470, 520],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 470, 643],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 480, 336],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 480, 352],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 49, 113],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 49, 161],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 49, 241],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 491, 368],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 491, 511],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 496, 368],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 502, 336],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 512, 384],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 512, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 512, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 512, 498],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 512, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 526, 352],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 528, 352],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 534, 400],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 534, 587],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 544, 400],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 55, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 600, 400],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 608, 400],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 7, 7],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 640, 15, 15],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 640, 15, 15],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 640, 15, 15],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 640, 21, 21],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 640, 21, 21],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 640, 21, 21],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 768, 12, 12],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 16, 64],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 4, 16],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 8, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 832, 13, 13],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 832, 6, 6],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 96, 109, 109],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 96, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([20, 128, 76, 136],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([20, 128, 76, 136],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([20, 256, 38, 68],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([20, 256, 38, 68],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([20, 32, 304, 544],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([20, 32, 304, 544],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([20, 64, 152, 272],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([20, 64, 152, 272],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([23, 64, 224, 224],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([240, 64, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([240, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([256, 112, 112, 64],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.max_pool2d(Tensor([256, 480, 2, 50],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([256, 480, 2, 50],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([256, 512, 2, 50],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([256, 512, 2, 50],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([256, 64, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([256, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([256, 64, 32, 100],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([256, 64, 32, 100],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([3, 64, 128, 128],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([3, 64, 17, 81],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([3, 64, 18, 18],"float32"), kernel_size=tuple(3,3,), stride=tuple(2,2,), padding=tuple(0,0,), return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([3, 64, 33, 17],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([3, 64, 33, 209],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([3, 64, 33, 337],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 113],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 129],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 145],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 161],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 177],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 17],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 193],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 209],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 225],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 241],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 257],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 273],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 33],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 49],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 65],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 81],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 17, 97],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 113],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 129],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 145],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 161],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 177],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 193],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 209],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 225],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 241],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 257],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 273],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 289],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 305],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 321],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 337],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 33],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 49],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 65],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 81],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 33, 97],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([30, 64, 49, 225],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([32, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 64, 224, 224],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([36, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([36, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 128, 320, 320],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 128, 320, 320],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 128, 64, 64],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 10, 10],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 10, 10],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 10, 10],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 11, 11],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 11, 11],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 11, 11],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 12, 12],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 12, 12],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 12, 12],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 13, 13],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 13, 13],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 13, 13],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 14, 14],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 14, 14],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 14, 14],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 15, 15],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 15, 15],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 15, 15],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 16, 16],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 16, 16],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 16, 16],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 17, 17],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 17, 17],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 17, 17],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 18, 18],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 18, 18],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 18, 18],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 19, 19],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 19, 19],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 19, 19],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 20, 20],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 20, 20],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 20, 20],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 21, 21],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 21, 21],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 21, 21],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 22, 22],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 22, 22],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 22, 22],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 23, 23],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 23, 23],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 23, 23],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 24, 24],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 24, 24],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 24, 24],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 3, 3],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 3, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 24, 320, 320],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 21, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 21, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 21, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 22, 30],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 22, 30],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 22, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 22, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 22, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 22, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 22, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 22, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 22, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 22, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 30],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 23, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 30],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 24, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 30],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 30],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 25, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 26, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 26, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 26, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 26, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 26, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 26, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 26, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 26, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 26, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 26, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 26, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 26, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 28],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 28],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 27, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 30],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 28, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 29, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 29, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 29, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 29, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 29, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 29, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 29, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 29, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 29, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 29, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 29, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 22],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 26],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 26],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 28],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 30],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 30],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 30, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 23],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 24],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 24],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 27],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 28],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 28],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 31, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 24],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 27],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 28],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 28],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 30],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 30],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 32, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 24],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 24],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 25],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 26],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 27],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 27],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 33, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 22],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 24],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 25],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 25],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 27],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 27],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 28],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 28],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 29],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 29],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 30],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 30],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 34, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 24],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 24],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 28],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 28],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 30],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 30],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 35, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 24],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 25],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 27],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 27],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 28],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 28],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 29],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 30],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 30],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 36, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 30],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 37, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 25],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 25],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 27],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 28],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 30],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 38, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 39, 28],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 39, 28],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 39, 30],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 39, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 39, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 39, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 39, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 39, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 39, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 39, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 39, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 39, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 39, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 39, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 39, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 40, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 40, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 40, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 40, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 40, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 40, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 40, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 40, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 40, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 40, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 41, 25],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 41, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 41, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 41, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 41, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 41, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 41, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 41, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 41, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 41, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 41, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 41, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 25],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 25],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 30],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 30],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 42, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([4, 32, 256, 256],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 4, 4, 4],"float16"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([4, 48, 160, 160],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 11, 11],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 11, 11],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 11, 11],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 14, 14],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 14, 14],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 14, 14],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 15, 15],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 15, 15],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 15, 15],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 16, 16],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 16, 16],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 16, 16],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 17, 17],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 17, 17],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 17, 17],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 18, 18],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 18, 18],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 18, 18],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 19, 19],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 19, 19],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 19, 19],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 20, 20],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 20, 20],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 20, 20],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 21, 21],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 21, 21],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 21, 21],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 22, 22],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 22, 22],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 22, 22],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 24, 24],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 24, 24],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 480, 24, 24],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 512, 16, 16],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 512, 16, 16],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 512, 16, 16],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 512, 18, 18],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 512, 18, 18],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 512, 18, 18],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 128, 128],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 17, 145],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 17, 17],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 17, 241],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 17, 305],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 17, 49],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 256, 256],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 256, 256],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 256, 256],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 256, 512],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 256, 512],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 320, 320],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 33, 49],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 336, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 336, 503],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 336, 503],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 336, 506],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 336, 506],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 336, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 336, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 352, 470],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 352, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 352, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 352, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 352, 527],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 352, 527],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 352, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 352, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 352, 530],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 352, 530],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 352, 532],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 352, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 352, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 352, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 352, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 352, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 491],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 491],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 499],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 529],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 532],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 532],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 539],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 539],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 552],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 552],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 554],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 554],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 598],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 598],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 667],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 368, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 375, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 375, 667],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 489],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 489],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 505],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 505],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 514],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 527],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 527],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 529],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 529],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 546],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 546],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 552],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 552],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 553],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 553],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 569],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 574],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 574],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 577],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 577],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 579],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 579],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 580],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 580],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 599],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 667],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 384, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 389, 504],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 398, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 398, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 399, 628],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 454],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 470],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 481],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 511],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 511],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 532],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 532],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 534],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 552],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 556],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 565],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 565],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 573],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 573],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 577],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 577],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 578],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 578],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 580],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 580],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 597],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 598],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 598],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 599],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 599],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 600],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 600],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 601],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 601],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 603],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 603],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 604],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 604],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 606],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 606],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 626],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 626],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 642],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 642],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 654],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 654],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 667],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 400, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 406, 649],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 406, 649],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 408, 583],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 416, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 416, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 416, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 416, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 416, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 416, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 416, 599],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 416, 599],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 416, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 416, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 416, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 416, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 416, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 416, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 420, 448],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 420, 448],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 420, 574],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 426, 527],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 426, 527],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 427, 481],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 427, 481],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 427, 502],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 427, 502],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 427, 504],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 427, 546],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 427, 554],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 427, 573],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 427, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 427, 598],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 448],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 448],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 432, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 434, 559],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 434, 559],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 440, 604],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 446, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 446, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 504],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 504],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 505],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 505],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 513],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 527],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 534],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 548],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 548],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 571],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 600],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 600],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 601],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 625],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 625],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 641],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 641],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 448, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 450, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 450, 534],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 455, 524],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 457, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 457, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 464, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 464, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 464, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 464, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 464, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 464, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 464, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 464, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 464, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 464, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 464, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 467, 529],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 469, 577],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 470, 401],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 470, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 470, 491],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 470, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 470, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 470, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 470, 551],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 470, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 470, 577],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 470, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 470, 617],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 470, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 470, 667],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 474, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 478, 614],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 478, 614],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 479, 600],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 479, 600],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 352],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 416],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 416],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 448],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 480],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 534],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 601],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 601],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 603],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 626],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 626],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 480, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 481, 491],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 481, 491],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 481, 552],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 481, 552],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 481, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 481, 667],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 482, 527],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 482, 527],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 482, 529],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 483, 448],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 483, 448],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 483, 552],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 483, 552],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 489, 569],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 384],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 505],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 506],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 506],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 529],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 529],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 532],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 532],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 534],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 552],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 552],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 580],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 600],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 600],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 606],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 642],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 654],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 491, 667],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 493, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 493, 667],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 368],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 384],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 384],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 432],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 448],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 448],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 496, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 499, 448],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 500, 571],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 500, 577],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 500, 577],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 500, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 500, 667],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 503, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 503, 580],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 503, 580],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 504, 470],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 504, 470],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 504, 507],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 504, 507],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 504, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 504, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 504, 600],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 504, 602],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 504, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 504, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 504, 667],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 505, 504],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 505, 504],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 505, 526],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 505, 580],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 505, 580],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 505, 601],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 505, 601],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 505, 658],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 505, 658],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 505, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 505, 667],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 506, 600],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 506, 600],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 507, 594],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 509, 609],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 384],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 432],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 448],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 448],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 470],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 470],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 491],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 491],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 500],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 505],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 512],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 512],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 553],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 553],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 582],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 600],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 626],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 626],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 667],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 512, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 513, 384],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 513, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 514, 600],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 514, 600],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 514, 614],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 514, 614],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 516, 628],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 516, 628],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 519, 605],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 519, 605],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 520, 491],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 520, 491],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 520, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 520, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 524, 516],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 524, 516],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 525, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 525, 534],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 384],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 384],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 400],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 416],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 427],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 427],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 432],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 432],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 491],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 491],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 552],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 554],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 554],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 600],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 600],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 601],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 601],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 649],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 528, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 529, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 529, 540],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 529, 540],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 529, 552],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 529, 577],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 529, 579],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 529, 579],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 529, 639],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 529, 639],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 529, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 529, 667],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 531, 553],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 532, 427],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 532, 427],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 534, 483],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 534, 491],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 534, 504],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 534, 507],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 534, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 534, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 534, 550],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 534, 553],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 534, 579],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 534, 600],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 534, 659],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 535, 455],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 535, 552],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 536, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 536, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 536, 600],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 536, 603],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 536, 603],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 540, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 540, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 352],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 384],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 400],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 400],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 432],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 432],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 448],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 448],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 464],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 464],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 544, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 546, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 546, 534],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 549, 579],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 550, 384],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 550, 384],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 551, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 551, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 552, 448],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 552, 470],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 552, 505],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 552, 505],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 552, 552],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 552, 572],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 552, 572],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 552, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 552, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 552, 600],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 552, 600],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 552, 601],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 552, 601],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 552, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 552, 667],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 553, 448],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 553, 448],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 553, 504],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 553, 554],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 554, 561],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 556, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 557, 506],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 557, 506],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 384],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 384],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 448],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 448],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 560, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 561, 563],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 561, 623],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 565, 525],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 565, 525],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 568, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 568, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 574, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 574, 534],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 574, 654],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 574, 654],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 575, 470],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 575, 470],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 384],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 400],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 427],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 427],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 432],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 432],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 448],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 448],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 464],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 491],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 534],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 535],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 552],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 572],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 576, 704],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 577, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 577, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 577, 577],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 577, 577],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 577, 600],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 577, 601],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 577, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 578, 639],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 578, 639],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 579, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 580, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 580, 534],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 580, 580],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 580, 580],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 586, 499],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 586, 499],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 552],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 592, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 595, 491],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 595, 491],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 598, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 598, 553],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 598, 554],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 598, 554],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 598, 574],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 598, 574],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 598, 598],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 598, 598],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 400],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 400],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 483],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 483],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 505],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 505],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 552],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 554],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 556],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 556],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 574],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 579],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 579],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 600, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 601, 400],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 601, 503],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 601, 503],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 601, 527],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 601, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 601, 534],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 601, 569],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 601, 569],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 601, 574],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 601, 660],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 601, 660],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 601, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 603, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 603, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 603, 601],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 603, 601],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 604, 626],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 607, 569],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 607, 569],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 400],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 400],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 432],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 448],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 608, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 609, 549],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 611, 491],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 611, 491],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 614, 448],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 624, 448],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 624, 448],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 624, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 624, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 624, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 624, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 624, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 624, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 624, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 624, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 624, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 624, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 624, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 624, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 624, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 626, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 629, 534],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 639, 510],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 639, 510],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 640, 448],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 640, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 640, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 640, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 640, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 640, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 640, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 640, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 640, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 640, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 640, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 654, 481],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 654, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 654, 667],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 656, 400],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 656, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 656, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 656, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 656, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 656, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 656, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 656, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 656, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 656, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 656, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 656, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 667, 491],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 667, 509],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 667, 509],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 667, 554],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 667, 554],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 667, 667],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 400],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 400],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 672, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 7, 7],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 7, 7],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 96, 80, 80],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([48, 64, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([48, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([5, 64, 33, 129],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([5, 64, 33, 289],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([5, 64, 33, 65],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([512, 128, 8, 16],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 128, 8, 16],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 24, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 24, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 256, 2, 4],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 256, 2, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 256, 4, 8],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 256, 4, 8],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 32, 32, 64],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 32, 32, 64],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 64, 16, 32],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 64, 16, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([6, 64, 17, 177],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([6, 64, 17, 225],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([6, 64, 17, 97],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([6, 64, 33, 193],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([6, 64, 400, 400],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([6, 64, 400, 400],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([60, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 10, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 10, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 1024, 17, 17],"float16"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 1024, 17, 17],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 1024, 19, 19],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 1024, 19, 19],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 128, 112, 112],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 128, 112, 112],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 128, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 128, 128, 128],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 128, 128, 128],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 128, 150, 150],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 128, 150, 150],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 128, 56, 56],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 128, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 10, 10],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 40, 40],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 86, 39],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 160, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 192, 27, 27],"float16"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 192, 27, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 192, 71, 71],"float16"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 192, 71, 71],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 20, 24, 24],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 20, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 24, 128, 128],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 24, 128, 128],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 24, 144, 144],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 24, 144, 144],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 24, 160, 160],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 24, 160, 160],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 24, 176, 176],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 24, 176, 176],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 24, 192, 192],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 24, 192, 192],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 256, 13, 13],"float16"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 256, 13, 13],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 256, 28, 28],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 256, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 256, 56, 56],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 256, 75, 75],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 256, 75, 75],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 288, 35, 35],"float16"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 288, 35, 35],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 32, 112, 112],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 32, 112, 112],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 32, 20, 20],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 32, 21, 9],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 32, 43, 19],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 384, 35, 35],"float16"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 384, 35, 35],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 50, 8, 8],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 50, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 512, 1, 40],"float16"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([64, 512, 1, 40],"float32"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([64, 512, 14, 14],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 512, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 512, 2, 160],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 512, 2, 160],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 512, 28, 28],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 512, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 6, 28, 28],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 64, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 64, 147, 147],"float16"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 64, 147, 147],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 64, 224, 224],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 64, 224, 224],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 64, 55, 55],"float16"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 64, 55, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 728, 38, 38],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 728, 38, 38],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 768, 17, 17],"float16"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 768, 17, 17],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 8, 172, 79],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 96, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 96, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([7, 64, 33, 305],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([7, 64, 33, 97],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([8, 1024, 40, 40],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 1024, 40, 40],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 128, 14, 14],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 128, 14, 14],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 128, 14, 14],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 128, 320, 320],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 128, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 128, 80, 80],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 128, 80, 80],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 10, 10],"float16"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 10, 10],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 10, 10],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 10, 10],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 10, 10],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 10, 10],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 11, 11],"float16"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 11, 11],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 11, 11],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 11, 11],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 11, 11],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 11, 11],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 12, 12],"float16"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 12, 12],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 12, 12],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 12, 12],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 12, 12],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 12, 12],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 13, 13],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 13, 13],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 13, 13],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 13, 13],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 13, 13],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 14, 14],"float16"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 14, 14],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 14, 14],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 14, 14],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 14, 14],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 14, 14],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 15, 15],"float16"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 15, 15],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 15, 15],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 15, 15],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 15, 15],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 15, 15],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 16, 16],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 16, 16],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 16, 16],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 16, 16],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 16, 16],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 17, 17],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 17, 17],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 17, 17],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 17, 17],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 17, 17],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 18, 18],"float16"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 18, 18],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 18, 18],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 18, 18],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 18, 18],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 18, 18],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 19, 19],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 19, 19],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 19, 19],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 19, 19],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 19, 19],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 20, 20],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 20, 20],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 20, 20],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 20, 20],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 20, 20],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 21, 21],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 21, 21],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 21, 21],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 21, 21],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 21, 21],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 22, 22],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 22, 22],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 22, 22],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 22, 22],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 22, 22],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 23, 23],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 23, 23],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 23, 23],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 23, 23],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 23, 23],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 24, 24],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 24, 24],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 24, 24],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 24, 24],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 24, 24],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 160, 160],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 160, 160],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 20, 20],"float16"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 20, 20],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 20, 20],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 20, 20],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 20, 20],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 20, 20],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 23, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 23, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 23, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 24, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 24, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 24, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 24, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 24, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 25],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 25],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 25],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 25, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 26, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 26, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 26, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 26, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 27, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 27, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 27, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 27, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 27, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 27, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 27, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 27, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 28, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 28, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 28, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 28, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 28, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 28, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 28, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 28, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 28, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 28, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 28, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 28, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 29, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 29, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 30, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 30, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 30, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 30, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 30, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 30, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 30, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 30, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 30, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 30, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 30, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 30, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 30, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 30, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 30, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 31, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 32, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 33, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 33, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 33, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 33, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 33, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 33, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 33, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 33, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 33, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 33, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 33, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 33, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 30],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 30],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 34, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 35, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 36, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 39],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 40],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 40],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 37, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 30],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 31],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 34],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 35],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 39],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 41],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 41],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 38, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 39, 35],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 39, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 39, 37],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 39, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 39, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 40, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 40, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 40, 40],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 40, 40],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 40, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 40, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 41, 34],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 41, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 41, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 41, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 42, 32],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 42, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 42, 33],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 42, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 42, 36],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 42, 36],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 42, 37],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 42, 38],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 42, 38],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 42, 42],"float16"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 42, 42],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 10, 10],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 10, 10],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 10, 10],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 11, 11],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 11, 11],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 11, 11],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 14, 14],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 14, 14],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 14, 14],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 15, 15],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 15, 15],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 15, 15],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 20, 20],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 20, 20],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 20, 20],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 22, 22],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 22, 22],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 288, 22, 22],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 32, 224, 224],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 11, 11],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 11, 11],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 11, 11],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 15, 15],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 15, 15],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 15, 15],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 17, 17],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 17, 17],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 17, 17],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 18, 18],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 18, 18],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 18, 18],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 19, 19],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 19, 19],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 19, 19],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 21, 21],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 21, 21],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 21, 21],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 22, 22],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 22, 22],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 22, 22],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 23, 23],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 23, 23],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 384, 23, 23],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 512, 1, 40],"float32"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([8, 512, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 512, 20, 20],"float16"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 512, 20, 20],"float16"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 512, 20, 20],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 512, 20, 20],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 512, 20, 20],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 512, 80, 80],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 512, 80, 80],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 112, 112],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 160, 160],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 160, 160],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 17, 129],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 208, 208],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 240, 240],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 256, 256],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 256, 256],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 256, 256],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 272, 272],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 288, 288],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 320, 320],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 320, 320],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 33, 225],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 33, 241],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 368, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 368, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 368, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 384, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 384, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 384, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 384, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 384, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 400, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 400, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 400, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 400, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 400, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 400, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 400, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 400, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 400, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 400, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 400, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 400, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 400, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 400, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 400, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 400, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 416, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 416, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 416, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 416, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 416, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 416, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 432, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 432, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 432, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 432, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 432, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 432, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 432, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 432, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 432, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 448, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 448, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 448, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 448, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 448, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 448, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 448, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 448, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 448, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 448, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 448, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 448, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 448, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 448, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 448, 704],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 448, 704],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 464, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 464, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 464, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 464, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 480, 480],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 480, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 480, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 480, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 480, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 480, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 480, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 480, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 480, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 480, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 480, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 480, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 480, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 480, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 480, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 480, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 496, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 704],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 512, 704],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 528, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 528, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 528, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 528, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 528, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 528, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 528, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 528, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 528, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 528, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 528, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 528, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 544, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 560, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 704],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 704],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 592, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 480],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 496],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 560],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 624],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 656],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 656],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 608, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 624, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 624, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 624, 560],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 624, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 624, 592],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 624, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 624, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 624, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 624, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 640, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 640, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 640, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 640, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 640, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 640, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 640, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 640, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 640, 704],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 640, 704],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 656, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 656, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 656, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 656, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 656, 624],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 656, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 656, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 672, 512],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 672, 512],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 672, 528],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 672, 528],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 672, 544],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 672, 544],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 672, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 672, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 672, 592],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 672, 608],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 672, 608],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 672, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 672, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 672, 672],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 672, 672],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 704, 576],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 704, 576],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 704, 640],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 704, 640],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 704, 704],"float16"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 704, 704],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([9, 64, 17, 209],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([9, 64, 33, 177],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([96, 64, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([96, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 2, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], padding=list[1,1,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], ceil_mode=True, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=tuple(1,2,), )
paddle.nn.functional.max_pool2d(x=Tensor([2, 4, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([1, 2, 6, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 6],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 6],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 4, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 4, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 6, 8, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 6, 9, 6, 3],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 4, 4, 4],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 6, 6, 3],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 32, 32, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([2, 6, 7, 9, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NDHWC", name=None, )
paddle.nn.functional.max_pool3d(Tensor([8, 64, 16, 112, 112],"float32"), kernel_size=tuple(3,3,3,), stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), )
paddle.nn.functional.max_pool3d(x=Tensor([2, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 32, 32, 56, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 320, 4, 56, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 64, 4, 112, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 8, 32, 112, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.Tensor.scale(Tensor([1, 16, 1, 100],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 101],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 102],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 103],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 104],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 105],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 106],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 107],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 108],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 109],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 110],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 111],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 112],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 113],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 114],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 115],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 116],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 117],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 118],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 119],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 120],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 121],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 122],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 123],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 124],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 125],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 126],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 127],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 128],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 129],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 130],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 131],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 132],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 133],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 134],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 135],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 136],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 137],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 138],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 139],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 140],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 141],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 142],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 143],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 144],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 145],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 146],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 147],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 148],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 149],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 14],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 150],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 151],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 152],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 153],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 154],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 155],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 156],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 157],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 158],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 159],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 15],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 160],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 161],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 162],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 163],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 164],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 165],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 166],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 167],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 168],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 169],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 16],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 170],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 171],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 172],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 173],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 174],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 175],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 176],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 177],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 178],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 179],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 17],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 180],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 181],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 182],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 183],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 184],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 185],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 186],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 187],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 188],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 189],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 18],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 190],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 191],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 192],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 193],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 194],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 195],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 196],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 197],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 198],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 199],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 19],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 200],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 201],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 202],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 203],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 204],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 205],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 206],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 207],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 208],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 209],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 20],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 210],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 211],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 212],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 21],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 22],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 23],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 24],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 25],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 26],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 27],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 28],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 29],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 30],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 31],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 32],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 33],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 34],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 35],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 36],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 37],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 38],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 39],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 40],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 41],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 42],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 43],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 44],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 45],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 46],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 47],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 48],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 49],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 50],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 51],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 52],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 53],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 54],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 55],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 56],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 57],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 58],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 59],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 60],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 61],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 62],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 63],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 64],"float32"), 0.005208333333333333, )
paddle.Tensor.scale(Tensor([1, 16, 1, 64],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 65],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 66],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 67],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 68],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 69],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 70],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 71],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 72],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 73],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 74],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 75],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 76],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 77],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 78],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 79],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 80],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 81],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 82],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 83],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 84],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 85],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 86],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 87],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 88],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 89],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 90],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 91],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 92],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 93],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 94],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 95],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 96],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 97],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 98],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 99],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1024, 1024],"float16"), 32, )
paddle.Tensor.scale(Tensor([1, 16, 1024, 64],"float16"), 0.00390625, )
paddle.Tensor.scale(Tensor([1, 16, 13, 13],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 13, 64],"float32"), 0.005208333333333333, )
paddle.Tensor.scale(Tensor([10, 20, 1],"float32"), scale=2.0, bias=3.0, )
paddle.Tensor.scale(Tensor([10],"float32"), 0.5, )
paddle.Tensor.scale(Tensor([16, 16, 1024, 1024],"float16"), 24, )
paddle.Tensor.scale(Tensor([16, 16, 1024, 64],"float16"), 0.005208333333333333, )
paddle.Tensor.scale(Tensor([16, 2, 1024, 1024],"float16"), 16, )
paddle.Tensor.scale(Tensor([16, 2, 1024, 64],"float16"), 0.0078125, )
paddle.Tensor.scale(Tensor([192, 64, 5, 5],"float32"), 0.5, )
paddle.Tensor.scale(Tensor([192],"float32"), 0.5, )
paddle.Tensor.scale(Tensor([2, 1, 1024, 1024],"float16"), 4, )
paddle.Tensor.scale(Tensor([2, 1, 1024, 256],"float16"), 0.015625, )
paddle.Tensor.scale(Tensor([2, 2, 1024, 1024],"float16"), 16, )
paddle.Tensor.scale(Tensor([2, 2, 1024, 64],"float16"), 0.0078125, )
paddle.Tensor.scale(Tensor([256, 10],"float32"), 0.5, )
paddle.Tensor.scale(Tensor([256, 256, 3, 3],"float32"), 0.5, )
paddle.Tensor.scale(Tensor([256, 384, 3, 3],"float32"), 0.5, )
paddle.Tensor.scale(Tensor([256],"float32"), 0.5, )
paddle.Tensor.scale(Tensor([32, 16, 128, 128],"float16"), 24, )
paddle.Tensor.scale(Tensor([32, 16, 128, 64],"float16"), 0.005208333333333333, )
paddle.Tensor.scale(Tensor([384, 192, 3, 3],"float32"), 0.5, )
paddle.Tensor.scale(Tensor([384],"float32"), 0.5, )
paddle.Tensor.scale(Tensor([64, 1, 11, 11],"float32"), 0.5, )
paddle.Tensor.scale(Tensor([64],"float32"), 0.5, )
paddle.Tensor.scale(Tensor([7, 16, 128, 128],"float16"), 24, )
paddle.Tensor.scale(Tensor([7, 16, 128, 64],"float16"), 0.005208333333333333, )
paddle.Tensor.scale(Tensor([8, 4, 1024, 1024],"float16"), 0.0078125, )
paddle.Tensor.scale(Tensor([8, 4, 1024, 1024],"float16"), 4, )
paddle.Tensor.scale(Tensor([8, 4, 1024, 256],"float16"), 0.015625, )
paddle.Tensor.scale(Tensor([8, 4, 1024, 512],"float16"), 0.011048543456039804, )
paddle.increment(Tensor([1],"float32"), value=2.0, )
paddle.increment(Tensor([1],"int64"), )
paddle.increment(Tensor([],"float32"), 1.0, )
paddle.increment(Tensor([],"int32"), -1, )
paddle.increment(Tensor([],"int64"), -1, )
paddle.increment(x=Tensor([1],"float32"), )
paddle.increment(x=Tensor([1],"float64"), )
paddle.increment(x=Tensor([1],"float64"), value=2.0, )
paddle.increment(x=Tensor([1],"int32"), )
paddle.increment(x=Tensor([1],"int64"), )
paddle.increment(x=Tensor([1],"int64"), value=1.0, )
paddle.scale(Tensor([1, 128, 32, 32],"float16"), 0.08838834764831843, )
paddle.scale(Tensor([1, 128, 32, 32],"float32"), 0.08838834764831843, )
paddle.scale(Tensor([1, 128, 32, 32],"float32"), 0.17677669529663687, )
paddle.scale(Tensor([1, 16, 32, 32],"float32"), 0.25, )
paddle.scale(Tensor([1, 8, 128, 128],"float32"), 0.25, )
paddle.scale(Tensor([1, 8, 32, 32],"float32"), 0.35355339059327373, )
paddle.scale(Tensor([1024],"float16"), 0.125, )
paddle.scale(Tensor([1024],"float16"), 0.25, )
paddle.scale(Tensor([10],"float64"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([13, 8, 4, 32],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([16, 128, 32, 32],"float32"), 0.08838834764831843, )
paddle.scale(Tensor([16, 32, 20, 20],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([2, 1, 1, 2, 3],"float32"), scale=2.0, )
paddle.scale(Tensor([2, 1, 1, 2, 3],"float64"), scale=2.0, )
paddle.scale(Tensor([2, 1, 2, 3],"float32"), scale=2.0, )
paddle.scale(Tensor([2, 1, 2, 3],"float64"), scale=2.0, )
paddle.scale(Tensor([2, 1],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([2, 256, 128, 128],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([2, 256, 16, 16],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([2, 256, 256, 256],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([2, 25],"float32"), 2.0, 3.0, )
paddle.scale(Tensor([2, 3],"float32"), scale=-1.7580993408473766, )
paddle.scale(Tensor([2, 3],"float32"), scale=0.0, )
paddle.scale(Tensor([2, 3],"float32"), scale=0.886404894665932, )
paddle.scale(Tensor([2, 3],"float32"), scale=1.0, )
paddle.scale(Tensor([2, 3],"float32"), scale=2.0, )
paddle.scale(Tensor([2, 768, 128, 128],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([2, 8, 8],"float32"), scale=0.25, )
paddle.scale(Tensor([2],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([3, 2],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([3, 3, 3, 40, 40],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 3, 40, 40, 3],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 3, 40, 40],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 40, 40, 3],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 40, 40],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([32, 8, 4, 4],"float32"), scale=0.04419417382415922, )
paddle.scale(Tensor([3],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([3],"float64"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([4, 256, 256, 256],"float16"), scale=1.1111111111111112, )
paddle.scale(Tensor([4, 256, 256, 256],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([4, 256, 64, 64],"float16"), scale=1.1111111111111112, )
paddle.scale(Tensor([4, 256, 64, 64],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([4, 512, 47, 156],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([40, 40],"bfloat16"), scale=-1.7580993408473766, )
paddle.scale(Tensor([40, 40],"bfloat16"), scale=0.0, )
paddle.scale(Tensor([40, 40],"bfloat16"), scale=1.0, )
paddle.scale(Tensor([40, 40],"float32"), scale=-1.7580993408473766, )
paddle.scale(Tensor([40, 40],"float32"), scale=0.0, )
paddle.scale(Tensor([40, 40],"float32"), scale=1.0, )
paddle.scale(Tensor([5, 10, 15, 20],"float32"), scale=-1.7580993408473766, )
paddle.scale(Tensor([5, 10, 15, 20],"float32"), scale=0.886404894665932, )
paddle.scale(Tensor([58, 2, 140, 140],"float32"), scale=0.7071067811865476, )
paddle.scale(Tensor([64, 32, 20, 20],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([8, 1024, 7, 7],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([8, 16, 1, 129],"float32"), scale=0.125, )
paddle.scale(Tensor([8, 16, 128, 128],"float16"), scale=0.125, )
paddle.scale(Tensor([8, 16, 128, 128],"float32"), scale=0.125, )
paddle.scale(Tensor([],"complex128"), scale=0.5, )
paddle.scale(Tensor([],"complex64"), scale=0.5, )
paddle.scale(Tensor([],"float16"), scale=0.5, )
paddle.scale(Tensor([],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([],"float32"), scale=-1.7580993408473766, )
paddle.scale(Tensor([],"float32"), scale=0.5, )
paddle.scale(Tensor([],"float32"), scale=0.886404894665932, )
paddle.scale(Tensor([],"float32"), scale=2.0, bias=1.0, )
paddle.scale(Tensor([],"float64"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([],"float64"), scale=0.3333333333333333, )
paddle.scale(Tensor([],"float64"), scale=0.5, )
paddle.scale(x=Tensor([3, 3, 3],"float32"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([3, 3, 3],"float64"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([3, 3, 3],"float64"), scale=2.0, bias=4.0, bias_after_scale=False, act=None, )
paddle.scale(x=Tensor([3, 3, 3],"float64"), scale=2.0, bias=4.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([3, 3, 3],"int32"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([3, 3, 3],"int64"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([32, 4, 512],"float32"), scale=22.627416997969522, )
paddle.scale(x=Tensor([58, 140, 140],"float32"), scale=10000.0, bias=-1.0, bias_after_scale=False, )
paddle.scale(x=Tensor([],"float32"), scale=0.16666666666666666, )
paddle.searchsorted(Tensor([1024],"bfloat16"), Tensor([512],"bfloat16"), )
paddle.searchsorted(Tensor([1024],"float16"), Tensor([512],"float16"), )
paddle.searchsorted(Tensor([1024],"float32"), Tensor([512],"float32"), )
paddle.searchsorted(Tensor([1024],"float64"), Tensor([512],"float64"), )
paddle.searchsorted(Tensor([1024],"int32"), Tensor([512],"int32"), )
paddle.searchsorted(Tensor([1024],"int64"), Tensor([512],"int64"), )
paddle.searchsorted(Tensor([2],"float64"), Tensor([8],"float64"), right=True, )
paddle.searchsorted(Tensor([3],"float32"), Tensor([4],"float32"), right=True, )
paddle.searchsorted(Tensor([3],"float64"), Tensor([4],"float64"), right=True, )
paddle.searchsorted(Tensor([3],"float64"), Tensor([8],"float64"), right=True, )
paddle.searchsorted(Tensor([4],"float64"), Tensor([4],"float64"), right=True, )
paddle.searchsorted(Tensor([4],"float64"), Tensor([8],"float64"), right=True, )
paddle.searchsorted(Tensor([5],"float64"), Tensor([2, 3],"float64"), out_int32=True, )
paddle.searchsorted(Tensor([5],"float64"), Tensor([2, 3],"float64"), right=True, )
paddle.searchsorted(Tensor([5],"float64"), Tensor([8],"float64"), right=True, )
paddle.searchsorted(Tensor([5],"int64"), Tensor([],"float32"), )
paddle.searchsorted(Tensor([6],"float64"), Tensor([8],"float64"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"float32"), values=Tensor([2, 3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"float64"), values=Tensor([2, 3],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"int32"), values=Tensor([2, 3],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"int64"), values=Tensor([2, 3],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([2, 3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([2],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([4, 2],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([2, 3],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([2],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([3],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([4, 2],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int32"), values=Tensor([2, 3],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int32"), values=Tensor([2],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int32"), values=Tensor([3],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int32"), values=Tensor([4, 2],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int64"), values=Tensor([2, 3],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int64"), values=Tensor([2],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int64"), values=Tensor([3],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int64"), values=Tensor([4, 2],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([7],"float32"), values=Tensor([2, 2, 2],"float32"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([7],"float64"), values=Tensor([2, 2, 2],"float64"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([7],"int32"), values=Tensor([2, 2, 2],"int32"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([7],"int64"), values=Tensor([2, 2, 2],"int64"), right=True, )
paddle.shape(Tensor([1, 1, 1, 50],"float16"), )
paddle.shape(Tensor([1, 1, 16],"float32"), )
paddle.shape(Tensor([1, 1, 32],"float16"), )
paddle.shape(Tensor([1, 1, 32],"float32"), )
paddle.shape(Tensor([1, 1, 512],"float32"), )
paddle.shape(Tensor([1, 10, 512],"float32"), )
paddle.shape(Tensor([1, 100, 512],"float32"), )
paddle.shape(Tensor([1, 100],"complex128"), )
paddle.shape(Tensor([1, 100],"float64"), )
paddle.shape(Tensor([1, 101, 512],"float32"), )
paddle.shape(Tensor([1, 102, 512],"float32"), )
paddle.shape(Tensor([1, 103, 512],"float32"), )
paddle.shape(Tensor([1, 104, 512],"float32"), )
paddle.shape(Tensor([1, 105, 512],"float32"), )
paddle.shape(Tensor([1, 106, 512],"float32"), )
paddle.shape(Tensor([1, 107, 512],"float32"), )
paddle.shape(Tensor([1, 108, 512],"float32"), )
paddle.shape(Tensor([1, 109, 512],"float32"), )
paddle.shape(Tensor([1, 11, 512],"float32"), )
paddle.shape(Tensor([1, 110, 512],"float32"), )
paddle.shape(Tensor([1, 111, 512],"float32"), )
paddle.shape(Tensor([1, 112, 512],"float32"), )
paddle.shape(Tensor([1, 113, 512],"float32"), )
paddle.shape(Tensor([1, 114, 512],"float32"), )
paddle.shape(Tensor([1, 115, 512],"float32"), )
paddle.shape(Tensor([1, 116, 512],"float32"), )
paddle.shape(Tensor([1, 117, 512],"float32"), )
paddle.shape(Tensor([1, 118, 512],"float32"), )
paddle.shape(Tensor([1, 119, 512],"float32"), )
paddle.shape(Tensor([1, 12, 512],"float32"), )
paddle.shape(Tensor([1, 120, 512],"float32"), )
paddle.shape(Tensor([1, 121, 512],"float32"), )
paddle.shape(Tensor([1, 122, 512],"float32"), )
paddle.shape(Tensor([1, 123, 512],"float32"), )
paddle.shape(Tensor([1, 124, 512],"float32"), )
paddle.shape(Tensor([1, 125, 512],"float32"), )
paddle.shape(Tensor([1, 126, 512],"float32"), )
paddle.shape(Tensor([1, 127, 512],"float32"), )
paddle.shape(Tensor([1, 128, 128, 128],"float32"), )
paddle.shape(Tensor([1, 128, 256, 256],"float32"), )
paddle.shape(Tensor([1, 128, 512],"float32"), )
paddle.shape(Tensor([1, 129, 512],"float32"), )
paddle.shape(Tensor([1, 13, 512],"float32"), )
paddle.shape(Tensor([1, 130, 512],"float32"), )
paddle.shape(Tensor([1, 131, 512],"float32"), )
paddle.shape(Tensor([1, 132, 512],"float32"), )
paddle.shape(Tensor([1, 133, 512],"float32"), )
paddle.shape(Tensor([1, 134, 512],"float32"), )
paddle.shape(Tensor([1, 135, 512],"float32"), )
paddle.shape(Tensor([1, 136, 512],"float32"), )
paddle.shape(Tensor([1, 137, 512],"float32"), )
paddle.shape(Tensor([1, 138, 512],"float32"), )
paddle.shape(Tensor([1, 139, 512],"float32"), )
paddle.shape(Tensor([1, 14, 512],"float32"), )
paddle.shape(Tensor([1, 140, 512],"float32"), )
paddle.shape(Tensor([1, 141, 512],"float32"), )
paddle.shape(Tensor([1, 142, 512],"float32"), )
paddle.shape(Tensor([1, 143, 512],"float32"), )
paddle.shape(Tensor([1, 144, 512],"float32"), )
paddle.shape(Tensor([1, 145, 512],"float32"), )
paddle.shape(Tensor([1, 146, 512],"float32"), )
paddle.shape(Tensor([1, 147, 512],"float32"), )
paddle.shape(Tensor([1, 148, 512],"float32"), )
paddle.shape(Tensor([1, 149, 512],"float32"), )
paddle.shape(Tensor([1, 15, 512],"float32"), )
paddle.shape(Tensor([1, 150, 512],"float32"), )
paddle.shape(Tensor([1, 151, 512],"float32"), )
paddle.shape(Tensor([1, 152, 512],"float32"), )
paddle.shape(Tensor([1, 153, 512],"float32"), )
paddle.shape(Tensor([1, 154, 512],"float32"), )
paddle.shape(Tensor([1, 155, 512],"float32"), )
paddle.shape(Tensor([1, 156, 512],"float32"), )
paddle.shape(Tensor([1, 157, 512],"float32"), )
paddle.shape(Tensor([1, 158, 512],"float32"), )
paddle.shape(Tensor([1, 159, 512],"float32"), )
paddle.shape(Tensor([1, 16, 512],"float32"), )
paddle.shape(Tensor([1, 160, 10, 10],"float32"), )
paddle.shape(Tensor([1, 160, 11, 11],"float32"), )
paddle.shape(Tensor([1, 160, 18, 18],"float32"), )
paddle.shape(Tensor([1, 160, 19, 19],"float32"), )
paddle.shape(Tensor([1, 160, 20, 20],"float32"), )
paddle.shape(Tensor([1, 160, 21, 21],"float32"), )
paddle.shape(Tensor([1, 160, 22, 22],"float32"), )
paddle.shape(Tensor([1, 160, 36, 36],"float32"), )
paddle.shape(Tensor([1, 160, 38, 38],"float32"), )
paddle.shape(Tensor([1, 160, 40, 40],"float32"), )
paddle.shape(Tensor([1, 160, 42, 42],"float32"), )
paddle.shape(Tensor([1, 160, 44, 44],"float32"), )
paddle.shape(Tensor([1, 160, 512],"float32"), )
paddle.shape(Tensor([1, 160, 72, 72],"float32"), )
paddle.shape(Tensor([1, 160, 76, 76],"float32"), )
paddle.shape(Tensor([1, 160, 80, 80],"float32"), )
paddle.shape(Tensor([1, 160, 84, 84],"float32"), )
paddle.shape(Tensor([1, 160, 88, 88],"float32"), )
paddle.shape(Tensor([1, 160, 9, 9],"float32"), )
paddle.shape(Tensor([1, 161, 512],"float32"), )
paddle.shape(Tensor([1, 162, 512],"float32"), )
paddle.shape(Tensor([1, 163, 512],"float32"), )
paddle.shape(Tensor([1, 164, 512],"float32"), )
paddle.shape(Tensor([1, 165, 512],"float32"), )
paddle.shape(Tensor([1, 166, 512],"float32"), )
paddle.shape(Tensor([1, 167, 512],"float32"), )
paddle.shape(Tensor([1, 168, 512],"float32"), )
paddle.shape(Tensor([1, 169, 512],"float32"), )
paddle.shape(Tensor([1, 17, 512],"float32"), )
paddle.shape(Tensor([1, 170, 512],"float32"), )
paddle.shape(Tensor([1, 171, 512],"float32"), )
paddle.shape(Tensor([1, 172, 512],"float32"), )
paddle.shape(Tensor([1, 173, 512],"float32"), )
paddle.shape(Tensor([1, 174, 512],"float32"), )
paddle.shape(Tensor([1, 175, 512],"float32"), )
paddle.shape(Tensor([1, 176, 512],"float32"), )
paddle.shape(Tensor([1, 177, 512],"float32"), )
paddle.shape(Tensor([1, 178, 512],"float32"), )
paddle.shape(Tensor([1, 179, 512],"float32"), )
paddle.shape(Tensor([1, 18, 512],"float32"), )
paddle.shape(Tensor([1, 180, 512],"float32"), )
paddle.shape(Tensor([1, 181, 512],"float32"), )
paddle.shape(Tensor([1, 182, 512],"float32"), )
paddle.shape(Tensor([1, 183, 512],"float32"), )
paddle.shape(Tensor([1, 184, 512],"float32"), )
paddle.shape(Tensor([1, 185, 512],"float32"), )
paddle.shape(Tensor([1, 186, 512],"float32"), )
paddle.shape(Tensor([1, 187, 512],"float32"), )
paddle.shape(Tensor([1, 188, 512],"float32"), )
paddle.shape(Tensor([1, 189, 512],"float32"), )
paddle.shape(Tensor([1, 19, 512],"float32"), )
paddle.shape(Tensor([1, 190, 512],"float32"), )
paddle.shape(Tensor([1, 191, 512],"float32"), )
paddle.shape(Tensor([1, 192, 4],"float32"), )
paddle.shape(Tensor([1, 192, 512],"float32"), )
paddle.shape(Tensor([1, 193, 512],"float32"), )
paddle.shape(Tensor([1, 194, 512],"float32"), )
paddle.shape(Tensor([1, 195, 512],"float32"), )
paddle.shape(Tensor([1, 196, 4],"float32"), )
paddle.shape(Tensor([1, 196, 512],"float32"), )
paddle.shape(Tensor([1, 197, 512],"float32"), )
paddle.shape(Tensor([1, 198, 512],"float32"), )
paddle.shape(Tensor([1, 199, 512],"float32"), )
paddle.shape(Tensor([1, 2, 3],"float32"), )
paddle.shape(Tensor([1, 2, 512],"float32"), )
paddle.shape(Tensor([1, 2, 8, 8],"float32"), )
paddle.shape(Tensor([1, 20, 32],"float32"), )
paddle.shape(Tensor([1, 20, 512],"float32"), )
paddle.shape(Tensor([1, 200, 4],"float32"), )
paddle.shape(Tensor([1, 200, 512],"float32"), )
paddle.shape(Tensor([1, 201, 512],"float32"), )
paddle.shape(Tensor([1, 202, 512],"float32"), )
paddle.shape(Tensor([1, 203, 512],"float32"), )
paddle.shape(Tensor([1, 204, 512],"float32"), )
paddle.shape(Tensor([1, 2048],"int64"), )
paddle.shape(Tensor([1, 205, 512],"float32"), )
paddle.shape(Tensor([1, 206, 512],"float32"), )
paddle.shape(Tensor([1, 207, 512],"float32"), )
paddle.shape(Tensor([1, 208, 512],"float32"), )
paddle.shape(Tensor([1, 209, 512],"float32"), )
paddle.shape(Tensor([1, 21, 512],"float32"), )
paddle.shape(Tensor([1, 210, 512],"float32"), )
paddle.shape(Tensor([1, 211, 512],"float32"), )
paddle.shape(Tensor([1, 212, 512],"float32"), )
paddle.shape(Tensor([1, 213, 512],"float32"), )
paddle.shape(Tensor([1, 214, 512],"float32"), )
paddle.shape(Tensor([1, 215, 512],"float32"), )
paddle.shape(Tensor([1, 21504, 88],"float32"), )
paddle.shape(Tensor([1, 216, 512],"float32"), )
paddle.shape(Tensor([1, 217, 512],"float32"), )
paddle.shape(Tensor([1, 218, 512],"float32"), )
paddle.shape(Tensor([1, 219, 512],"float32"), )
paddle.shape(Tensor([1, 22, 512],"float32"), )
paddle.shape(Tensor([1, 220, 512],"float32"), )
paddle.shape(Tensor([1, 221, 512],"float32"), )
paddle.shape(Tensor([1, 222, 512],"float32"), )
paddle.shape(Tensor([1, 223, 512],"float32"), )
paddle.shape(Tensor([1, 224, 512],"float32"), )
paddle.shape(Tensor([1, 225, 512],"float32"), )
paddle.shape(Tensor([1, 226, 512],"float32"), )
paddle.shape(Tensor([1, 227, 512],"float32"), )
paddle.shape(Tensor([1, 228, 512],"float32"), )
paddle.shape(Tensor([1, 229, 512],"float32"), )
paddle.shape(Tensor([1, 23, 512],"float32"), )
paddle.shape(Tensor([1, 230, 512],"float32"), )
paddle.shape(Tensor([1, 231, 512],"float32"), )
paddle.shape(Tensor([1, 232, 512],"float32"), )
paddle.shape(Tensor([1, 233, 512],"float32"), )
paddle.shape(Tensor([1, 234, 512],"float32"), )
paddle.shape(Tensor([1, 235, 512],"float32"), )
paddle.shape(Tensor([1, 236, 512],"float32"), )
paddle.shape(Tensor([1, 237, 512],"float32"), )
paddle.shape(Tensor([1, 238, 512],"float32"), )
paddle.shape(Tensor([1, 239, 512],"float32"), )
paddle.shape(Tensor([1, 24, 512],"float32"), )
paddle.shape(Tensor([1, 240, 512],"float32"), )
paddle.shape(Tensor([1, 241, 512],"float32"), )
paddle.shape(Tensor([1, 242, 512],"float32"), )
paddle.shape(Tensor([1, 24276, 88],"float32"), )
paddle.shape(Tensor([1, 243, 512],"float32"), )
paddle.shape(Tensor([1, 244, 512],"float32"), )
paddle.shape(Tensor([1, 245, 512],"float32"), )
paddle.shape(Tensor([1, 246, 512],"float32"), )
paddle.shape(Tensor([1, 247, 512],"float32"), )
paddle.shape(Tensor([1, 248, 512],"float32"), )
paddle.shape(Tensor([1, 249, 512],"float32"), )
paddle.shape(Tensor([1, 25, 512],"float32"), )
paddle.shape(Tensor([1, 250, 512],"float32"), )
paddle.shape(Tensor([1, 256, 10, 8],"float32"), )
paddle.shape(Tensor([1, 256, 12, 9],"float32"), )
paddle.shape(Tensor([1, 256, 144, 200],"float32"), )
paddle.shape(Tensor([1, 256, 18, 25],"float32"), )
paddle.shape(Tensor([1, 256, 192, 144],"float32"), )
paddle.shape(Tensor([1, 256, 20, 15],"float32"), )
paddle.shape(Tensor([1, 256, 23, 18],"float32"), )
paddle.shape(Tensor([1, 256, 24, 18],"float32"), )
paddle.shape(Tensor([1, 256, 36, 50],"float32"), )
paddle.shape(Tensor([1, 256, 40, 30],"float32"), )
paddle.shape(Tensor([1, 256, 45, 36],"float32"), )
paddle.shape(Tensor([1, 256, 48, 36],"float32"), )
paddle.shape(Tensor([1, 256, 72, 100],"float32"), )
paddle.shape(Tensor([1, 256, 80, 60],"float32"), )
paddle.shape(Tensor([1, 256, 89, 72],"float32"), )
paddle.shape(Tensor([1, 256, 9, 13],"float32"), )
paddle.shape(Tensor([1, 256, 96, 72],"float32"), )
paddle.shape(Tensor([1, 26, 512],"float32"), )
paddle.shape(Tensor([1, 261, 512],"float32"), )
paddle.shape(Tensor([1, 27, 512],"float32"), )
paddle.shape(Tensor([1, 27216, 88],"float32"), )
paddle.shape(Tensor([1, 28, 512],"float32"), )
paddle.shape(Tensor([1, 29, 512],"float32"), )
paddle.shape(Tensor([1, 3, 512],"float32"), )
paddle.shape(Tensor([1, 30, 512],"float32"), )
paddle.shape(Tensor([1, 30324, 88],"float32"), )
paddle.shape(Tensor([1, 31, 512],"float32"), )
paddle.shape(Tensor([1, 32, 512],"float32"), )
paddle.shape(Tensor([1, 33, 512],"float32"), )
paddle.shape(Tensor([1, 33600, 88],"float32"), )
paddle.shape(Tensor([1, 34, 512],"float32"), )
paddle.shape(Tensor([1, 35, 512],"float32"), )
paddle.shape(Tensor([1, 36, 512],"float32"), )
paddle.shape(Tensor([1, 37, 512],"float32"), )
paddle.shape(Tensor([1, 37044, 88],"float32"), )
paddle.shape(Tensor([1, 38, 512],"float32"), )
paddle.shape(Tensor([1, 385, 512],"float32"), )
paddle.shape(Tensor([1, 39, 512],"float32"), )
paddle.shape(Tensor([1, 3],"float32"), )
paddle.shape(Tensor([1, 4, 512],"float32"), )
paddle.shape(Tensor([1, 4, 8, 8],"float32"), )
paddle.shape(Tensor([1, 40, 512],"float32"), )
paddle.shape(Tensor([1, 40656, 88],"float32"), )
paddle.shape(Tensor([1, 41, 512],"float32"), )
paddle.shape(Tensor([1, 42, 512],"float32"), )
paddle.shape(Tensor([1, 43, 512],"float32"), )
paddle.shape(Tensor([1, 44, 512],"float32"), )
paddle.shape(Tensor([1, 44436, 88],"float32"), )
paddle.shape(Tensor([1, 45, 512],"float32"), )
paddle.shape(Tensor([1, 46, 512],"float32"), )
paddle.shape(Tensor([1, 47, 512],"float32"), )
paddle.shape(Tensor([1, 48, 512],"float32"), )
paddle.shape(Tensor([1, 48384, 88],"float32"), )
paddle.shape(Tensor([1, 49, 512],"float32"), )
paddle.shape(Tensor([1, 4],"float32"), )
paddle.shape(Tensor([1, 5, 32],"float32"), )
paddle.shape(Tensor([1, 5, 512],"float32"), )
paddle.shape(Tensor([1, 50, 512],"float32"), )
paddle.shape(Tensor([1, 51, 512],"float32"), )
paddle.shape(Tensor([1, 52, 512],"float32"), )
paddle.shape(Tensor([1, 52500, 88],"float32"), )
paddle.shape(Tensor([1, 53, 512],"float32"), )
paddle.shape(Tensor([1, 54, 512],"float32"), )
paddle.shape(Tensor([1, 55, 512],"float32"), )
paddle.shape(Tensor([1, 56, 512],"float32"), )
paddle.shape(Tensor([1, 56784, 88],"float32"), )
paddle.shape(Tensor([1, 57, 512],"float32"), )
paddle.shape(Tensor([1, 58, 512],"float32"), )
paddle.shape(Tensor([1, 59, 512],"float32"), )
paddle.shape(Tensor([1, 6, 512],"float32"), )
paddle.shape(Tensor([1, 60, 512],"float32"), )
paddle.shape(Tensor([1, 61, 512],"float32"), )
paddle.shape(Tensor([1, 61236, 88],"float32"), )
paddle.shape(Tensor([1, 62, 512],"float32"), )
paddle.shape(Tensor([1, 63, 512],"float32"), )
paddle.shape(Tensor([1, 64, 512],"float32"), )
paddle.shape(Tensor([1, 65, 512],"float32"), )
paddle.shape(Tensor([1, 65856, 88],"float32"), )
paddle.shape(Tensor([1, 66, 512],"float32"), )
paddle.shape(Tensor([1, 67, 512],"float32"), )
paddle.shape(Tensor([1, 68, 512],"float32"), )
paddle.shape(Tensor([1, 69, 512],"float32"), )
paddle.shape(Tensor([1, 7, 512],"float32"), )
paddle.shape(Tensor([1, 70, 512],"float32"), )
paddle.shape(Tensor([1, 70644, 88],"float32"), )
paddle.shape(Tensor([1, 71, 512],"float32"), )
paddle.shape(Tensor([1, 72, 512],"float32"), )
paddle.shape(Tensor([1, 73, 512],"float32"), )
paddle.shape(Tensor([1, 74, 512],"float32"), )
paddle.shape(Tensor([1, 75, 512],"float32"), )
paddle.shape(Tensor([1, 75600, 88],"float32"), )
paddle.shape(Tensor([1, 76, 512],"float32"), )
paddle.shape(Tensor([1, 77, 512],"float32"), )
paddle.shape(Tensor([1, 78, 512],"float32"), )
paddle.shape(Tensor([1, 79, 512],"float32"), )
paddle.shape(Tensor([1, 8, 512],"float32"), )
paddle.shape(Tensor([1, 80, 512],"float32"), )
paddle.shape(Tensor([1, 81, 512],"float32"), )
paddle.shape(Tensor([1, 82, 512],"float32"), )
paddle.shape(Tensor([1, 83, 512],"float32"), )
paddle.shape(Tensor([1, 84, 512],"float32"), )
paddle.shape(Tensor([1, 8400, 68],"float32"), )
paddle.shape(Tensor([1, 85, 512],"float32"), )
paddle.shape(Tensor([1, 86, 512],"float32"), )
paddle.shape(Tensor([1, 87, 512],"float32"), )
paddle.shape(Tensor([1, 88, 512],"float32"), )
paddle.shape(Tensor([1, 89, 512],"float32"), )
paddle.shape(Tensor([1, 9, 512],"float32"), )
paddle.shape(Tensor([1, 90, 512],"float32"), )
paddle.shape(Tensor([1, 91, 512],"float32"), )
paddle.shape(Tensor([1, 92, 512],"float32"), )
paddle.shape(Tensor([1, 93, 512],"float32"), )
paddle.shape(Tensor([1, 94, 512],"float32"), )
paddle.shape(Tensor([1, 95, 512],"float32"), )
paddle.shape(Tensor([1, 96, 13, 13],"float32"), )
paddle.shape(Tensor([1, 96, 14, 14],"float32"), )
paddle.shape(Tensor([1, 96, 15, 15],"float32"), )
paddle.shape(Tensor([1, 96, 16, 16],"float32"), )
paddle.shape(Tensor([1, 96, 17, 17],"float32"), )
paddle.shape(Tensor([1, 96, 26, 26],"float32"), )
paddle.shape(Tensor([1, 96, 28, 28],"float32"), )
paddle.shape(Tensor([1, 96, 30, 30],"float32"), )
paddle.shape(Tensor([1, 96, 32, 32],"float32"), )
paddle.shape(Tensor([1, 96, 34, 34],"float32"), )
paddle.shape(Tensor([1, 96, 512],"float32"), )
paddle.shape(Tensor([1, 96, 52, 52],"float32"), )
paddle.shape(Tensor([1, 96, 56, 56],"float32"), )
paddle.shape(Tensor([1, 96, 60, 60],"float32"), )
paddle.shape(Tensor([1, 96, 64, 64],"float32"), )
paddle.shape(Tensor([1, 96, 68, 68],"float32"), )
paddle.shape(Tensor([1, 96, 7, 7],"float32"), )
paddle.shape(Tensor([1, 96, 8, 8],"float32"), )
paddle.shape(Tensor([1, 96, 9, 9],"float32"), )
paddle.shape(Tensor([1, 97, 512],"float32"), )
paddle.shape(Tensor([1, 98, 512],"float32"), )
paddle.shape(Tensor([1, 99, 512],"float32"), )
paddle.shape(Tensor([10, 1, 512],"float32"), )
paddle.shape(Tensor([10, 10, 10],"float64"), )
paddle.shape(Tensor([10, 10, 1],"float64"), )
paddle.shape(Tensor([10, 10, 512],"float32"), )
paddle.shape(Tensor([10, 100, 512],"float32"), )
paddle.shape(Tensor([10, 101, 512],"float32"), )
paddle.shape(Tensor([10, 102, 512],"float32"), )
paddle.shape(Tensor([10, 103, 512],"float32"), )
paddle.shape(Tensor([10, 104, 512],"float32"), )
paddle.shape(Tensor([10, 105, 512],"float32"), )
paddle.shape(Tensor([10, 106, 512],"float32"), )
paddle.shape(Tensor([10, 107, 512],"float32"), )
paddle.shape(Tensor([10, 108, 512],"float32"), )
paddle.shape(Tensor([10, 109, 512],"float32"), )
paddle.shape(Tensor([10, 10],"float32"), )
paddle.shape(Tensor([10, 11, 512],"float32"), )
paddle.shape(Tensor([10, 110, 512],"float32"), )
paddle.shape(Tensor([10, 111, 512],"float32"), )
paddle.shape(Tensor([10, 112, 512],"float32"), )
paddle.shape(Tensor([10, 113, 512],"float32"), )
paddle.shape(Tensor([10, 114, 512],"float32"), )
paddle.shape(Tensor([10, 115, 512],"float32"), )
paddle.shape(Tensor([10, 116, 512],"float32"), )
paddle.shape(Tensor([10, 117, 512],"float32"), )
paddle.shape(Tensor([10, 118, 512],"float32"), )
paddle.shape(Tensor([10, 119, 512],"float32"), )
paddle.shape(Tensor([10, 12, 512],"float32"), )
paddle.shape(Tensor([10, 120, 512],"float32"), )
paddle.shape(Tensor([10, 121, 512],"float32"), )
paddle.shape(Tensor([10, 122, 512],"float32"), )
paddle.shape(Tensor([10, 123, 512],"float32"), )
paddle.shape(Tensor([10, 124, 512],"float32"), )
paddle.shape(Tensor([10, 125, 512],"float32"), )
paddle.shape(Tensor([10, 126, 512],"float32"), )
paddle.shape(Tensor([10, 127, 512],"float32"), )
paddle.shape(Tensor([10, 128, 512],"float32"), )
paddle.shape(Tensor([10, 129, 512],"float32"), )
paddle.shape(Tensor([10, 12],"bool"), )
paddle.shape(Tensor([10, 12],"float16"), )
paddle.shape(Tensor([10, 12],"float32"), )
paddle.shape(Tensor([10, 12],"float64"), )
paddle.shape(Tensor([10, 12],"int32"), )
paddle.shape(Tensor([10, 12],"int64"), )
paddle.shape(Tensor([10, 13, 512],"float32"), )
paddle.shape(Tensor([10, 130, 512],"float32"), )
paddle.shape(Tensor([10, 131, 512],"float32"), )
paddle.shape(Tensor([10, 132, 512],"float32"), )
paddle.shape(Tensor([10, 133, 512],"float32"), )
paddle.shape(Tensor([10, 134, 512],"float32"), )
paddle.shape(Tensor([10, 135, 512],"float32"), )
paddle.shape(Tensor([10, 136, 512],"float32"), )
paddle.shape(Tensor([10, 137, 512],"float32"), )
paddle.shape(Tensor([10, 138, 512],"float32"), )
paddle.shape(Tensor([10, 139, 512],"float32"), )
paddle.shape(Tensor([10, 14, 512],"float32"), )
paddle.shape(Tensor([10, 140, 512],"float32"), )
paddle.shape(Tensor([10, 141, 512],"float32"), )
paddle.shape(Tensor([10, 142, 512],"float32"), )
paddle.shape(Tensor([10, 143, 512],"float32"), )
paddle.shape(Tensor([10, 144, 512],"float32"), )
paddle.shape(Tensor([10, 145, 512],"float32"), )
paddle.shape(Tensor([10, 146, 512],"float32"), )
paddle.shape(Tensor([10, 147, 512],"float32"), )
paddle.shape(Tensor([10, 148, 512],"float32"), )
paddle.shape(Tensor([10, 149, 512],"float32"), )
paddle.shape(Tensor([10, 15, 512],"float32"), )
paddle.shape(Tensor([10, 150, 512],"float32"), )
paddle.shape(Tensor([10, 151, 512],"float32"), )
paddle.shape(Tensor([10, 152, 512],"float32"), )
paddle.shape(Tensor([10, 153, 512],"float32"), )
paddle.shape(Tensor([10, 154, 512],"float32"), )
paddle.shape(Tensor([10, 155, 512],"float32"), )
paddle.shape(Tensor([10, 156, 512],"float32"), )
paddle.shape(Tensor([10, 157, 512],"float32"), )
paddle.shape(Tensor([10, 158, 512],"float32"), )
paddle.shape(Tensor([10, 159, 512],"float32"), )
paddle.shape(Tensor([10, 16, 512],"float32"), )
paddle.shape(Tensor([10, 160, 512],"float32"), )
paddle.shape(Tensor([10, 161, 512],"float32"), )
paddle.shape(Tensor([10, 162, 512],"float32"), )
paddle.shape(Tensor([10, 163, 512],"float32"), )
paddle.shape(Tensor([10, 164, 512],"float32"), )
paddle.shape(Tensor([10, 165, 512],"float32"), )
paddle.shape(Tensor([10, 166, 512],"float32"), )
paddle.shape(Tensor([10, 167, 512],"float32"), )
paddle.shape(Tensor([10, 168, 512],"float32"), )
paddle.shape(Tensor([10, 169, 512],"float32"), )
paddle.shape(Tensor([10, 16],"float32"), )
paddle.shape(Tensor([10, 17, 512],"float32"), )
paddle.shape(Tensor([10, 170, 512],"float32"), )
paddle.shape(Tensor([10, 171, 512],"float32"), )
paddle.shape(Tensor([10, 172, 512],"float32"), )
paddle.shape(Tensor([10, 173, 512],"float32"), )
paddle.shape(Tensor([10, 174, 512],"float32"), )
paddle.shape(Tensor([10, 175, 512],"float32"), )
paddle.shape(Tensor([10, 176, 512],"float32"), )
paddle.shape(Tensor([10, 177, 512],"float32"), )
paddle.shape(Tensor([10, 178, 512],"float32"), )
paddle.shape(Tensor([10, 179, 512],"float32"), )
paddle.shape(Tensor([10, 18, 512],"float32"), )
paddle.shape(Tensor([10, 180, 512],"float32"), )
paddle.shape(Tensor([10, 181, 512],"float32"), )
paddle.shape(Tensor([10, 182, 512],"float32"), )
paddle.shape(Tensor([10, 183, 512],"float32"), )
paddle.shape(Tensor([10, 184, 512],"float32"), )
paddle.shape(Tensor([10, 185, 512],"float32"), )
paddle.shape(Tensor([10, 19, 512],"float32"), )
paddle.shape(Tensor([10, 2, 512],"float32"), )
paddle.shape(Tensor([10, 20, 512],"float32"), )
paddle.shape(Tensor([10, 20],"float64"), )
paddle.shape(Tensor([10, 21, 512],"float32"), )
paddle.shape(Tensor([10, 22, 512],"float32"), )
paddle.shape(Tensor([10, 23, 512],"float32"), )
paddle.shape(Tensor([10, 24, 512],"float32"), )
paddle.shape(Tensor([10, 25, 512],"float32"), )
paddle.shape(Tensor([10, 26, 512],"float32"), )
paddle.shape(Tensor([10, 27, 512],"float32"), )
paddle.shape(Tensor([10, 28, 512],"float32"), )
paddle.shape(Tensor([10, 29, 512],"float32"), )
paddle.shape(Tensor([10, 3, 512],"float32"), )
paddle.shape(Tensor([10, 30, 512],"float32"), )
paddle.shape(Tensor([10, 31, 512],"float32"), )
paddle.shape(Tensor([10, 32, 512],"float32"), )
paddle.shape(Tensor([10, 33, 512],"float32"), )
paddle.shape(Tensor([10, 34, 512],"float32"), )
paddle.shape(Tensor([10, 35, 512],"float32"), )
paddle.shape(Tensor([10, 36, 512],"float32"), )
paddle.shape(Tensor([10, 37, 512],"float32"), )
paddle.shape(Tensor([10, 38, 512],"float32"), )
paddle.shape(Tensor([10, 39, 512],"float32"), )
paddle.shape(Tensor([10, 4, 512],"float32"), )
paddle.shape(Tensor([10, 40, 512],"float32"), )
paddle.shape(Tensor([10, 41, 512],"float32"), )
paddle.shape(Tensor([10, 42, 512],"float32"), )
paddle.shape(Tensor([10, 43, 512],"float32"), )
paddle.shape(Tensor([10, 44, 512],"float32"), )
paddle.shape(Tensor([10, 45, 512],"float32"), )
paddle.shape(Tensor([10, 46, 512],"float32"), )
paddle.shape(Tensor([10, 47, 512],"float32"), )
paddle.shape(Tensor([10, 48, 512],"float32"), )
paddle.shape(Tensor([10, 49, 512],"float32"), )
paddle.shape(Tensor([10, 4],"float32"), )
paddle.shape(Tensor([10, 5, 512],"float32"), )
paddle.shape(Tensor([10, 50, 512],"float32"), )
paddle.shape(Tensor([10, 51, 512],"float32"), )
paddle.shape(Tensor([10, 52, 512],"float32"), )
paddle.shape(Tensor([10, 53, 512],"float32"), )
paddle.shape(Tensor([10, 54, 512],"float32"), )
paddle.shape(Tensor([10, 55, 512],"float32"), )
paddle.shape(Tensor([10, 56, 512],"float32"), )
paddle.shape(Tensor([10, 57, 512],"float32"), )
paddle.shape(Tensor([10, 58, 512],"float32"), )
paddle.shape(Tensor([10, 59, 512],"float32"), )
paddle.shape(Tensor([10, 6, 512],"float32"), )
paddle.shape(Tensor([10, 60, 512],"float32"), )
paddle.shape(Tensor([10, 61, 512],"float32"), )
paddle.shape(Tensor([10, 62, 512],"float32"), )
paddle.shape(Tensor([10, 63, 512],"float32"), )
paddle.shape(Tensor([10, 64, 512],"float32"), )
paddle.shape(Tensor([10, 65, 512],"float32"), )
paddle.shape(Tensor([10, 66, 512],"float32"), )
paddle.shape(Tensor([10, 67, 512],"float32"), )
paddle.shape(Tensor([10, 68, 512],"float32"), )
paddle.shape(Tensor([10, 69, 512],"float32"), )
paddle.shape(Tensor([10, 7, 512],"float32"), )
paddle.shape(Tensor([10, 70, 512],"float32"), )
paddle.shape(Tensor([10, 71, 512],"float32"), )
paddle.shape(Tensor([10, 72, 512],"float32"), )
paddle.shape(Tensor([10, 73, 512],"float32"), )
paddle.shape(Tensor([10, 74, 512],"float32"), )
paddle.shape(Tensor([10, 75, 512],"float32"), )
paddle.shape(Tensor([10, 76, 512],"float32"), )
paddle.shape(Tensor([10, 77, 512],"float32"), )
paddle.shape(Tensor([10, 78, 512],"float32"), )
paddle.shape(Tensor([10, 79, 512],"float32"), )
paddle.shape(Tensor([10, 8, 512],"float32"), )
paddle.shape(Tensor([10, 8, 5],"float64"), )
paddle.shape(Tensor([10, 80, 512],"float32"), )
paddle.shape(Tensor([10, 81, 512],"float32"), )
paddle.shape(Tensor([10, 82, 512],"float32"), )
paddle.shape(Tensor([10, 83, 512],"float32"), )
paddle.shape(Tensor([10, 84, 512],"float32"), )
paddle.shape(Tensor([10, 85, 512],"float32"), )
paddle.shape(Tensor([10, 86, 512],"float32"), )
paddle.shape(Tensor([10, 87, 512],"float32"), )
paddle.shape(Tensor([10, 88, 512],"float32"), )
paddle.shape(Tensor([10, 89, 512],"float32"), )
paddle.shape(Tensor([10, 9, 512],"float32"), )
paddle.shape(Tensor([10, 90, 512],"float32"), )
paddle.shape(Tensor([10, 91, 512],"float32"), )
paddle.shape(Tensor([10, 92, 512],"float32"), )
paddle.shape(Tensor([10, 93, 512],"float32"), )
paddle.shape(Tensor([10, 94, 512],"float32"), )
paddle.shape(Tensor([10, 95, 512],"float32"), )
paddle.shape(Tensor([10, 96, 512],"float32"), )
paddle.shape(Tensor([10, 97, 512],"float32"), )
paddle.shape(Tensor([10, 98, 512],"float32"), )
paddle.shape(Tensor([10, 99, 512],"float32"), )
paddle.shape(Tensor([100, 1],"float64"), )
paddle.shape(Tensor([100, 20],"float64"), )
paddle.shape(Tensor([100, 4],"float32"), )
paddle.shape(Tensor([1000, 2],"float64"), )
paddle.shape(Tensor([1000, 4],"float32"), )
paddle.shape(Tensor([1001, 4],"float32"), )
paddle.shape(Tensor([1003, 4],"float32"), )
paddle.shape(Tensor([1007, 4],"float32"), )
paddle.shape(Tensor([1008, 4],"float32"), )
paddle.shape(Tensor([100],"complex64"), )
paddle.shape(Tensor([100],"float64"), )
paddle.shape(Tensor([101, 4],"float32"), )
paddle.shape(Tensor([1010, 4],"float32"), )
paddle.shape(Tensor([1011, 4],"float32"), )
paddle.shape(Tensor([1017, 4],"float32"), )
paddle.shape(Tensor([1018, 4],"float32"), )
paddle.shape(Tensor([102, 4],"float32"), )
paddle.shape(Tensor([1020, 4],"float32"), )
paddle.shape(Tensor([1021, 4],"float32"), )
paddle.shape(Tensor([1022, 4],"float32"), )
paddle.shape(Tensor([1024, 4],"float32"), )
paddle.shape(Tensor([1026, 4],"float32"), )
paddle.shape(Tensor([1028, 4],"float32"), )
paddle.shape(Tensor([1029, 4],"float32"), )
paddle.shape(Tensor([103, 4],"float32"), )
paddle.shape(Tensor([1030, 4],"float32"), )
paddle.shape(Tensor([1031, 4],"float32"), )
paddle.shape(Tensor([1033, 4],"float32"), )
paddle.shape(Tensor([1036, 4],"float32"), )
paddle.shape(Tensor([1039, 4],"float32"), )
paddle.shape(Tensor([104, 4],"float32"), )
paddle.shape(Tensor([1042, 4],"float32"), )
paddle.shape(Tensor([1043, 4],"float32"), )
paddle.shape(Tensor([1044, 4],"float32"), )
paddle.shape(Tensor([105, 4],"float32"), )
paddle.shape(Tensor([1050, 4],"float32"), )
paddle.shape(Tensor([1053, 4],"float32"), )
paddle.shape(Tensor([1054, 4],"float32"), )
paddle.shape(Tensor([1055, 4],"float32"), )
paddle.shape(Tensor([1056, 4],"float32"), )
paddle.shape(Tensor([1057, 4],"float32"), )
paddle.shape(Tensor([1059, 4],"float32"), )
paddle.shape(Tensor([106, 4],"float32"), )
paddle.shape(Tensor([1062, 4],"float32"), )
paddle.shape(Tensor([1063, 4],"float32"), )
paddle.shape(Tensor([1064, 4],"float32"), )
paddle.shape(Tensor([1067, 4],"float32"), )
paddle.shape(Tensor([107, 4],"float32"), )
paddle.shape(Tensor([1070, 4],"float32"), )
paddle.shape(Tensor([1071, 4],"float32"), )
paddle.shape(Tensor([1073, 4],"float32"), )
paddle.shape(Tensor([1075, 4],"float32"), )
paddle.shape(Tensor([1076, 4],"float32"), )
paddle.shape(Tensor([1077, 4],"float32"), )
paddle.shape(Tensor([1078, 4],"float32"), )
paddle.shape(Tensor([107],"int64"), )
paddle.shape(Tensor([108, 4],"float32"), )
paddle.shape(Tensor([1080, 4],"float32"), )
paddle.shape(Tensor([1081, 4],"float32"), )
paddle.shape(Tensor([1082, 4],"float32"), )
paddle.shape(Tensor([1083, 4],"float32"), )
paddle.shape(Tensor([1084, 4],"float32"), )
paddle.shape(Tensor([1086, 4],"float32"), )
paddle.shape(Tensor([1089, 4],"float32"), )
paddle.shape(Tensor([109, 4],"float32"), )
paddle.shape(Tensor([1092, 4],"float32"), )
paddle.shape(Tensor([1093, 4],"float32"), )
paddle.shape(Tensor([1097, 4],"float32"), )
paddle.shape(Tensor([1098, 4],"float32"), )
paddle.shape(Tensor([1099, 4],"float32"), )
paddle.shape(Tensor([10],"float32"), )
paddle.shape(Tensor([10],"float64"), )
paddle.shape(Tensor([11, 4],"float32"), )
paddle.shape(Tensor([110, 4],"float32"), )
paddle.shape(Tensor([1100, 4],"float32"), )
paddle.shape(Tensor([1101, 4],"float32"), )
paddle.shape(Tensor([1102, 4],"float32"), )
paddle.shape(Tensor([1104, 4],"float32"), )
paddle.shape(Tensor([110484, 4],"float32"), )
paddle.shape(Tensor([1105, 4],"float32"), )
paddle.shape(Tensor([1106, 4],"float32"), )
paddle.shape(Tensor([1107, 4],"float32"), )
paddle.shape(Tensor([1108, 4],"float32"), )
paddle.shape(Tensor([1109, 4],"float32"), )
paddle.shape(Tensor([111, 4],"float32"), )
paddle.shape(Tensor([1110, 4],"float32"), )
paddle.shape(Tensor([1111, 4],"float32"), )
paddle.shape(Tensor([1112, 4],"float32"), )
paddle.shape(Tensor([1113, 4],"float32"), )
paddle.shape(Tensor([1114, 4],"float32"), )
paddle.shape(Tensor([1116, 4],"float32"), )
paddle.shape(Tensor([1117, 4],"float32"), )
paddle.shape(Tensor([1118, 4],"float32"), )
paddle.shape(Tensor([1119, 4],"float32"), )
paddle.shape(Tensor([112, 4],"float32"), )
paddle.shape(Tensor([1121, 4],"float32"), )
paddle.shape(Tensor([1122, 4],"float32"), )
paddle.shape(Tensor([1124, 4],"float32"), )
paddle.shape(Tensor([1125, 4],"float32"), )
paddle.shape(Tensor([1127, 4],"float32"), )
paddle.shape(Tensor([1128, 4],"float32"), )
paddle.shape(Tensor([113, 4],"float32"), )
paddle.shape(Tensor([1130, 4],"float32"), )
paddle.shape(Tensor([1135, 4],"float32"), )
paddle.shape(Tensor([1136, 4],"float32"), )
paddle.shape(Tensor([1137, 4],"float32"), )
paddle.shape(Tensor([1138, 4],"float32"), )
paddle.shape(Tensor([1139, 4],"float32"), )
paddle.shape(Tensor([114, 4],"float32"), )
paddle.shape(Tensor([1140, 4],"float32"), )
paddle.shape(Tensor([1141, 4],"float32"), )
paddle.shape(Tensor([1143, 4],"float32"), )
paddle.shape(Tensor([1145, 4],"float32"), )
paddle.shape(Tensor([1146, 4],"float32"), )
paddle.shape(Tensor([1147, 4],"float32"), )
paddle.shape(Tensor([1148, 4],"float32"), )
paddle.shape(Tensor([1149, 4],"float32"), )
paddle.shape(Tensor([115, 4],"float32"), )
paddle.shape(Tensor([1151, 4],"float32"), )
paddle.shape(Tensor([1152, 4],"float32"), )
paddle.shape(Tensor([1153, 4],"float32"), )
paddle.shape(Tensor([1154, 4],"float32"), )
paddle.shape(Tensor([1155, 4],"float32"), )
paddle.shape(Tensor([1156, 4],"float32"), )
paddle.shape(Tensor([1157, 4],"float32"), )
paddle.shape(Tensor([1158, 4],"float32"), )
paddle.shape(Tensor([116, 4],"float32"), )
paddle.shape(Tensor([1160, 4],"float32"), )
paddle.shape(Tensor([1162, 4],"float32"), )
paddle.shape(Tensor([1163, 4],"float32"), )
paddle.shape(Tensor([1164, 4],"float32"), )
paddle.shape(Tensor([1168, 4],"float32"), )
paddle.shape(Tensor([1169, 4],"float32"), )
paddle.shape(Tensor([117, 4],"float32"), )
paddle.shape(Tensor([1171, 4],"float32"), )
paddle.shape(Tensor([1174, 4],"float32"), )
paddle.shape(Tensor([1175, 4],"float32"), )
paddle.shape(Tensor([1176, 4],"float32"), )
paddle.shape(Tensor([1177, 4],"float32"), )
paddle.shape(Tensor([1178, 4],"float32"), )
paddle.shape(Tensor([1179, 4],"float32"), )
paddle.shape(Tensor([118, 4],"float32"), )
paddle.shape(Tensor([1180, 4],"float32"), )
paddle.shape(Tensor([1181, 4],"float32"), )
paddle.shape(Tensor([1183, 4],"float32"), )
paddle.shape(Tensor([1185, 4],"float32"), )
paddle.shape(Tensor([1186, 4],"float32"), )
paddle.shape(Tensor([1187, 4],"float32"), )
paddle.shape(Tensor([1188, 4],"float32"), )
paddle.shape(Tensor([1189, 4],"float32"), )
paddle.shape(Tensor([119, 4],"float32"), )
paddle.shape(Tensor([1190, 4],"float32"), )
paddle.shape(Tensor([1191, 4],"float32"), )
paddle.shape(Tensor([1192, 4],"float32"), )
paddle.shape(Tensor([1193, 4],"float32"), )
paddle.shape(Tensor([1196, 4],"float32"), )
paddle.shape(Tensor([1197, 4],"float32"), )
paddle.shape(Tensor([1198, 4],"float32"), )
paddle.shape(Tensor([1199, 4],"float32"), )
paddle.shape(Tensor([12, 24, 19, 34],"float16"), )
paddle.shape(Tensor([12, 24, 19, 34],"float32"), )
paddle.shape(Tensor([12, 24, 38, 68],"float16"), )
paddle.shape(Tensor([12, 24, 38, 68],"float32"), )
paddle.shape(Tensor([12, 24, 76, 136],"float16"), )
paddle.shape(Tensor([12, 24, 76, 136],"float32"), )
paddle.shape(Tensor([12, 4],"float32"), )
paddle.shape(Tensor([120, 4],"float32"), )
paddle.shape(Tensor([1200, 4],"float32"), )
paddle.shape(Tensor([1201, 4],"float32"), )
paddle.shape(Tensor([1202, 4],"float32"), )
paddle.shape(Tensor([1204, 4],"float32"), )
paddle.shape(Tensor([1205, 4],"float32"), )
paddle.shape(Tensor([1206, 4],"float32"), )
paddle.shape(Tensor([1207, 4],"float32"), )
paddle.shape(Tensor([1208, 4],"float32"), )
paddle.shape(Tensor([1209, 4],"float32"), )
paddle.shape(Tensor([121, 4],"float32"), )
paddle.shape(Tensor([1210, 4],"float32"), )
paddle.shape(Tensor([1211, 4],"float32"), )
paddle.shape(Tensor([1212, 4],"float32"), )
paddle.shape(Tensor([1213, 4],"float32"), )
paddle.shape(Tensor([1216, 4],"float32"), )
paddle.shape(Tensor([1217, 4],"float32"), )
paddle.shape(Tensor([1218, 4],"float32"), )
paddle.shape(Tensor([1219, 4],"float32"), )
paddle.shape(Tensor([122, 4],"float32"), )
paddle.shape(Tensor([1220, 4],"float32"), )
paddle.shape(Tensor([1221, 4],"float32"), )
paddle.shape(Tensor([1222, 4],"float32"), )
paddle.shape(Tensor([1224, 4],"float32"), )
paddle.shape(Tensor([1227, 4],"float32"), )
paddle.shape(Tensor([122760, 4],"float32"), )
paddle.shape(Tensor([1229, 4],"float32"), )
paddle.shape(Tensor([123, 4],"float32"), )
paddle.shape(Tensor([1231, 4],"float32"), )
paddle.shape(Tensor([1232, 4],"float32"), )
paddle.shape(Tensor([1234, 4],"float32"), )
paddle.shape(Tensor([1235, 4],"float32"), )
paddle.shape(Tensor([1236, 4],"float32"), )
paddle.shape(Tensor([1237, 4],"float32"), )
paddle.shape(Tensor([1238, 4],"float32"), )
paddle.shape(Tensor([1239, 4],"float32"), )
paddle.shape(Tensor([124, 4],"float32"), )
paddle.shape(Tensor([1241, 4],"float32"), )
paddle.shape(Tensor([1242, 4],"float32"), )
paddle.shape(Tensor([1243, 4],"float32"), )
paddle.shape(Tensor([1244, 4],"float32"), )
paddle.shape(Tensor([1247, 4],"float32"), )
paddle.shape(Tensor([1248, 4],"float32"), )
paddle.shape(Tensor([1249, 4],"float32"), )
paddle.shape(Tensor([125, 4],"float32"), )
paddle.shape(Tensor([1250, 4],"float32"), )
paddle.shape(Tensor([1252, 4],"float32"), )
paddle.shape(Tensor([1253, 4],"float32"), )
paddle.shape(Tensor([1254, 4],"float32"), )
paddle.shape(Tensor([1255, 4],"float32"), )
paddle.shape(Tensor([1256, 4],"float32"), )
paddle.shape(Tensor([1258, 4],"float32"), )
paddle.shape(Tensor([126, 4],"float32"), )
paddle.shape(Tensor([1261, 4],"float32"), )
paddle.shape(Tensor([1265, 4],"float32"), )
paddle.shape(Tensor([1266, 4],"float32"), )
paddle.shape(Tensor([1267, 4],"float32"), )
paddle.shape(Tensor([1268, 4],"float32"), )
paddle.shape(Tensor([1269, 4],"float32"), )
paddle.shape(Tensor([127, 4],"float32"), )
paddle.shape(Tensor([1273, 4],"float32"), )
paddle.shape(Tensor([1274, 4],"float32"), )
paddle.shape(Tensor([1277, 4],"float32"), )
paddle.shape(Tensor([1278, 4],"float32"), )
paddle.shape(Tensor([1279, 4],"float32"), )
paddle.shape(Tensor([128, 4],"float32"), )
paddle.shape(Tensor([1281, 4],"float32"), )
paddle.shape(Tensor([1282, 4],"float32"), )
paddle.shape(Tensor([1283, 4],"float32"), )
paddle.shape(Tensor([1284, 4],"float32"), )
paddle.shape(Tensor([1285, 4],"float32"), )
paddle.shape(Tensor([1286, 4],"float32"), )
paddle.shape(Tensor([1290, 4],"float32"), )
paddle.shape(Tensor([1291, 4],"float32"), )
paddle.shape(Tensor([1294, 4],"float32"), )
paddle.shape(Tensor([1295, 4],"float32"), )
paddle.shape(Tensor([1296, 4],"float32"), )
paddle.shape(Tensor([1298, 4],"float32"), )
paddle.shape(Tensor([13, 4],"float32"), )
paddle.shape(Tensor([13, 7, 16],"float32"), )
paddle.shape(Tensor([13, 7, 32],"float32"), )
paddle.shape(Tensor([1300, 4],"float32"), )
paddle.shape(Tensor([1301, 4],"float32"), )
paddle.shape(Tensor([1302, 4],"float32"), )
paddle.shape(Tensor([1303, 4],"float32"), )
paddle.shape(Tensor([1304, 4],"float32"), )
paddle.shape(Tensor([1305, 4],"float32"), )
paddle.shape(Tensor([1306, 4],"float32"), )
paddle.shape(Tensor([1307, 4],"float32"), )
paddle.shape(Tensor([1309, 4],"float32"), )
paddle.shape(Tensor([1310, 4],"float32"), )
paddle.shape(Tensor([1311, 4],"float32"), )
paddle.shape(Tensor([1313, 4],"float32"), )
paddle.shape(Tensor([1314, 4],"float32"), )
paddle.shape(Tensor([1315, 4],"float32"), )
paddle.shape(Tensor([1316, 4],"float32"), )
paddle.shape(Tensor([1317, 4],"float32"), )
paddle.shape(Tensor([1319, 4],"float32"), )
paddle.shape(Tensor([1320, 4],"float32"), )
paddle.shape(Tensor([1322, 4],"float32"), )
paddle.shape(Tensor([1323, 4],"float32"), )
paddle.shape(Tensor([1324, 4],"float32"), )
paddle.shape(Tensor([1325, 4],"float32"), )
paddle.shape(Tensor([1329, 4],"float32"), )
paddle.shape(Tensor([1331, 4],"float32"), )
paddle.shape(Tensor([1332, 4],"float32"), )
paddle.shape(Tensor([1334, 4],"float32"), )
paddle.shape(Tensor([1337, 4],"float32"), )
paddle.shape(Tensor([1339, 4],"float32"), )
paddle.shape(Tensor([1340, 4],"float32"), )
paddle.shape(Tensor([1341, 4],"float32"), )
paddle.shape(Tensor([1342, 4],"float32"), )
paddle.shape(Tensor([1343, 4],"float32"), )
paddle.shape(Tensor([1344, 4],"float32"), )
paddle.shape(Tensor([1345, 4],"float32"), )
paddle.shape(Tensor([1346, 4],"float32"), )
paddle.shape(Tensor([1348, 4],"float32"), )
paddle.shape(Tensor([1350, 4],"float32"), )
paddle.shape(Tensor([135036, 4],"float32"), )
paddle.shape(Tensor([1353, 4],"float32"), )
paddle.shape(Tensor([1354, 4],"float32"), )
paddle.shape(Tensor([1355, 4],"float32"), )
paddle.shape(Tensor([1356, 4],"float32"), )
paddle.shape(Tensor([1360, 4],"float32"), )
paddle.shape(Tensor([1361, 4],"float32"), )
paddle.shape(Tensor([1362, 4],"float32"), )
paddle.shape(Tensor([1363, 4],"float32"), )
paddle.shape(Tensor([1366, 4],"float32"), )
paddle.shape(Tensor([1372, 4],"float32"), )
paddle.shape(Tensor([1373, 4],"float32"), )
paddle.shape(Tensor([1374, 4],"float32"), )
paddle.shape(Tensor([1375, 4],"float32"), )
paddle.shape(Tensor([1376, 4],"float32"), )
paddle.shape(Tensor([1377, 4],"float32"), )
paddle.shape(Tensor([1378, 4],"float32"), )
paddle.shape(Tensor([1379, 4],"float32"), )
paddle.shape(Tensor([1381, 4],"float32"), )
paddle.shape(Tensor([1383, 4],"float32"), )
paddle.shape(Tensor([1384, 4],"float32"), )
paddle.shape(Tensor([1385, 4],"float32"), )
paddle.shape(Tensor([1386, 4],"float32"), )
paddle.shape(Tensor([1387, 4],"float32"), )
paddle.shape(Tensor([1390, 4],"float32"), )
paddle.shape(Tensor([1392, 4],"float32"), )
paddle.shape(Tensor([1394, 4],"float32"), )
paddle.shape(Tensor([1395, 4],"float32"), )
paddle.shape(Tensor([1396, 4],"float32"), )
paddle.shape(Tensor([1398, 4],"float32"), )
paddle.shape(Tensor([1399, 4],"float32"), )
paddle.shape(Tensor([14, 209, 384],"float32"), )
paddle.shape(Tensor([14, 4, 7, 8],"float32"), )
paddle.shape(Tensor([14, 4],"float32"), )
paddle.shape(Tensor([14, 7, 32],"float16"), )
paddle.shape(Tensor([14, 7, 32],"float32"), )
paddle.shape(Tensor([14, 8, 32],"float16"), )
paddle.shape(Tensor([14, 8, 32],"float32"), )
paddle.shape(Tensor([140, 188, 1, 1, 2, 6],"float32"), )
paddle.shape(Tensor([140, 188, 1, 1, 3],"float32"), )
paddle.shape(Tensor([1400, 4],"float32"), )
paddle.shape(Tensor([1401, 4],"float32"), )
paddle.shape(Tensor([1405, 4],"float32"), )
paddle.shape(Tensor([1406, 4],"float32"), )
paddle.shape(Tensor([1407, 4],"float32"), )
paddle.shape(Tensor([1409, 4],"float32"), )
paddle.shape(Tensor([1410, 4],"float32"), )
paddle.shape(Tensor([1411, 4],"float32"), )
paddle.shape(Tensor([1412, 4],"float32"), )
paddle.shape(Tensor([1413, 4],"float32"), )
paddle.shape(Tensor([1414, 4],"float32"), )
paddle.shape(Tensor([1415, 4],"float32"), )
paddle.shape(Tensor([1416, 4],"float32"), )
paddle.shape(Tensor([1417, 4],"float32"), )
paddle.shape(Tensor([1418, 4],"float32"), )
paddle.shape(Tensor([1419, 4],"float32"), )
paddle.shape(Tensor([1420, 4],"float32"), )
paddle.shape(Tensor([1421, 4],"float32"), )
paddle.shape(Tensor([1422, 4],"float32"), )
paddle.shape(Tensor([1423, 4],"float32"), )
paddle.shape(Tensor([1426, 4],"float32"), )
paddle.shape(Tensor([1427, 4],"float32"), )
paddle.shape(Tensor([1428, 4],"float32"), )
paddle.shape(Tensor([1429, 4],"float32"), )
paddle.shape(Tensor([1433, 4],"float32"), )
paddle.shape(Tensor([1436, 4],"float32"), )
paddle.shape(Tensor([1437, 4],"float32"), )
paddle.shape(Tensor([1440, 4],"float32"), )
paddle.shape(Tensor([1441, 4],"float32"), )
paddle.shape(Tensor([1443, 4],"float32"), )
paddle.shape(Tensor([1444, 4],"float32"), )
paddle.shape(Tensor([1445, 4],"float32"), )
paddle.shape(Tensor([1448, 4],"float32"), )
paddle.shape(Tensor([1449, 4],"float32"), )
paddle.shape(Tensor([1451, 4],"float32"), )
paddle.shape(Tensor([1452, 4],"float32"), )
paddle.shape(Tensor([1453, 4],"float32"), )
paddle.shape(Tensor([1455, 4],"float32"), )
paddle.shape(Tensor([1457, 4],"float32"), )
paddle.shape(Tensor([1458, 4],"float32"), )
paddle.shape(Tensor([1459, 4],"float32"), )
paddle.shape(Tensor([1461, 4],"float32"), )
paddle.shape(Tensor([1462, 4],"float32"), )
paddle.shape(Tensor([1465, 4],"float32"), )
paddle.shape(Tensor([1467, 4],"float32"), )
paddle.shape(Tensor([1468, 4],"float32"), )
paddle.shape(Tensor([1471, 4],"float32"), )
paddle.shape(Tensor([1472, 4],"float32"), )
paddle.shape(Tensor([1473, 4],"float32"), )
paddle.shape(Tensor([1475, 4],"float32"), )
paddle.shape(Tensor([1481, 4],"float32"), )
paddle.shape(Tensor([1482, 4],"float32"), )
paddle.shape(Tensor([1484, 4],"float32"), )
paddle.shape(Tensor([1485, 4],"float32"), )
paddle.shape(Tensor([1486, 4],"float32"), )
paddle.shape(Tensor([1488, 4],"float32"), )
paddle.shape(Tensor([1490, 4],"float32"), )
paddle.shape(Tensor([1492, 4],"float32"), )
paddle.shape(Tensor([1493, 4],"float32"), )
paddle.shape(Tensor([1494, 4],"float32"), )
paddle.shape(Tensor([1495, 4],"float32"), )
paddle.shape(Tensor([1496, 4],"float32"), )
paddle.shape(Tensor([1497, 4],"float32"), )
paddle.shape(Tensor([1499, 4],"float32"), )
paddle.shape(Tensor([15, 20],"float64"), )
paddle.shape(Tensor([15, 4],"float32"), )
paddle.shape(Tensor([15, 8, 1],"float64"), )
paddle.shape(Tensor([150, 1],"float64"), )
paddle.shape(Tensor([1500, 4],"float32"), )
paddle.shape(Tensor([1501, 4],"float32"), )
paddle.shape(Tensor([1502, 4],"float32"), )
paddle.shape(Tensor([1503, 4],"float32"), )
paddle.shape(Tensor([1504, 4],"float32"), )
paddle.shape(Tensor([1505, 4],"float32"), )
paddle.shape(Tensor([1506, 4],"float32"), )
paddle.shape(Tensor([1508, 4],"float32"), )
paddle.shape(Tensor([1510, 4],"float32"), )
paddle.shape(Tensor([1514, 4],"float32"), )
paddle.shape(Tensor([1515, 4],"float32"), )
paddle.shape(Tensor([1517, 4],"float32"), )
paddle.shape(Tensor([1520, 4],"float32"), )
paddle.shape(Tensor([1521, 4],"float32"), )
paddle.shape(Tensor([1523, 4],"float32"), )
paddle.shape(Tensor([1524, 4],"float32"), )
paddle.shape(Tensor([1525, 4],"float32"), )
paddle.shape(Tensor([1526, 4],"float32"), )
paddle.shape(Tensor([1527, 4],"float32"), )
paddle.shape(Tensor([1528, 4],"float32"), )
paddle.shape(Tensor([1529, 4],"float32"), )
paddle.shape(Tensor([1532, 4],"float32"), )
paddle.shape(Tensor([1533, 4],"float32"), )
paddle.shape(Tensor([1535, 4],"float32"), )
paddle.shape(Tensor([1536, 4],"float32"), )
paddle.shape(Tensor([1537, 4],"float32"), )
paddle.shape(Tensor([1538, 4],"float32"), )
paddle.shape(Tensor([1539, 4],"float32"), )
paddle.shape(Tensor([1540, 4],"float32"), )
paddle.shape(Tensor([1541, 4],"float32"), )
paddle.shape(Tensor([1543, 4],"float32"), )
paddle.shape(Tensor([1545, 4],"float32"), )
paddle.shape(Tensor([1546, 4],"float32"), )
paddle.shape(Tensor([1547, 4],"float32"), )
paddle.shape(Tensor([1548, 4],"float32"), )
paddle.shape(Tensor([15488, 80],"float16"), )
paddle.shape(Tensor([15488, 80],"float32"), )
paddle.shape(Tensor([1549, 4],"float32"), )
paddle.shape(Tensor([1550, 4],"float32"), )
paddle.shape(Tensor([1551, 4],"float32"), )
paddle.shape(Tensor([1552, 4],"float32"), )
paddle.shape(Tensor([1553, 4],"float32"), )
paddle.shape(Tensor([1556, 4],"float32"), )
paddle.shape(Tensor([1557, 4],"float32"), )
paddle.shape(Tensor([1560, 4],"float32"), )
paddle.shape(Tensor([1561, 4],"float32"), )
paddle.shape(Tensor([1564, 4],"float32"), )
paddle.shape(Tensor([1565, 4],"float32"), )
paddle.shape(Tensor([1566, 4],"float32"), )
paddle.shape(Tensor([1568, 4],"float32"), )
paddle.shape(Tensor([1569, 4],"float32"), )
paddle.shape(Tensor([1570, 4],"float32"), )
paddle.shape(Tensor([1571, 4],"float32"), )
paddle.shape(Tensor([1574, 4],"float32"), )
paddle.shape(Tensor([1575, 4],"float32"), )
paddle.shape(Tensor([1578, 4],"float32"), )
paddle.shape(Tensor([1579, 4],"float32"), )
paddle.shape(Tensor([1581, 4],"float32"), )
paddle.shape(Tensor([1583, 4],"float32"), )
paddle.shape(Tensor([1584, 4],"float32"), )
paddle.shape(Tensor([1585, 4],"float32"), )
paddle.shape(Tensor([1587, 4],"float32"), )
paddle.shape(Tensor([1588, 4],"float32"), )
paddle.shape(Tensor([1590, 4],"float32"), )
paddle.shape(Tensor([1594, 4],"float32"), )
paddle.shape(Tensor([1599, 4],"float32"), )
paddle.shape(Tensor([15],"int64"), )
paddle.shape(Tensor([16, 10164, 68],"float32"), )
paddle.shape(Tensor([16, 11109, 68],"float32"), )
paddle.shape(Tensor([16, 12096, 68],"float32"), )
paddle.shape(Tensor([16, 128, 10, 6],"complex64"), )
paddle.shape(Tensor([16, 176, 4],"float32"), )
paddle.shape(Tensor([16, 2100, 68],"float32"), )
paddle.shape(Tensor([16, 2541, 68],"float32"), )
paddle.shape(Tensor([16, 3024, 68],"float32"), )
paddle.shape(Tensor([16, 32, 16, 9],"complex64"), )
paddle.shape(Tensor([16, 32, 19, 10],"complex64"), )
paddle.shape(Tensor([16, 32, 20, 11],"complex64"), )
paddle.shape(Tensor([16, 3549, 68],"float32"), )
paddle.shape(Tensor([16, 4116, 68],"float32"), )
paddle.shape(Tensor([16, 4725, 68],"float32"), )
paddle.shape(Tensor([16, 4],"float32"), )
paddle.shape(Tensor([16, 5376, 68],"float32"), )
paddle.shape(Tensor([16, 6069, 68],"float32"), )
paddle.shape(Tensor([16, 64, 10, 6],"complex64"), )
paddle.shape(Tensor([16, 64, 19, 10],"complex64"), )
paddle.shape(Tensor([16, 6804, 68],"float32"), )
paddle.shape(Tensor([16, 7581, 68],"float32"), )
paddle.shape(Tensor([16, 8400, 68],"float32"), )
paddle.shape(Tensor([16, 9261, 68],"float32"), )
paddle.shape(Tensor([16, 96, 10, 10],"float32"), )
paddle.shape(Tensor([16, 96, 12, 12],"float32"), )
paddle.shape(Tensor([16, 96, 20, 11],"complex64"), )
paddle.shape(Tensor([16, 96, 20, 20],"float32"), )
paddle.shape(Tensor([16, 96, 24, 24],"float32"), )
paddle.shape(Tensor([16, 96, 40, 40],"float32"), )
paddle.shape(Tensor([16, 96, 48, 48],"float32"), )
paddle.shape(Tensor([16, 96, 5, 5],"float32"), )
paddle.shape(Tensor([16, 96, 6, 6],"float32"), )
paddle.shape(Tensor([160, 1],"float32"), )
paddle.shape(Tensor([1600, 4],"float32"), )
paddle.shape(Tensor([1603, 4],"float32"), )
paddle.shape(Tensor([1604, 4],"float32"), )
paddle.shape(Tensor([1619, 4],"float32"), )
paddle.shape(Tensor([1620, 4],"float32"), )
paddle.shape(Tensor([1623, 4],"float32"), )
paddle.shape(Tensor([1627, 4],"float32"), )
paddle.shape(Tensor([1628, 4],"float32"), )
paddle.shape(Tensor([1632, 4],"float32"), )
paddle.shape(Tensor([1633, 4],"float32"), )
paddle.shape(Tensor([1634, 4],"float32"), )
paddle.shape(Tensor([1635, 4],"float32"), )
paddle.shape(Tensor([1638, 4],"float32"), )
paddle.shape(Tensor([1639, 4],"float32"), )
paddle.shape(Tensor([1640, 4],"float32"), )
paddle.shape(Tensor([1643, 4],"float32"), )
paddle.shape(Tensor([1644, 4],"float32"), )
paddle.shape(Tensor([1646, 4],"float32"), )
paddle.shape(Tensor([1649, 4],"float32"), )
paddle.shape(Tensor([1651, 4],"float32"), )
paddle.shape(Tensor([1652, 4],"float32"), )
paddle.shape(Tensor([1653, 4],"float32"), )
paddle.shape(Tensor([1654, 4],"float32"), )
paddle.shape(Tensor([1655, 4],"float32"), )
paddle.shape(Tensor([1656, 4],"float32"), )
paddle.shape(Tensor([1659, 4],"float32"), )
paddle.shape(Tensor([1660, 4],"float32"), )
paddle.shape(Tensor([1661, 4],"float32"), )
paddle.shape(Tensor([1663, 4],"float32"), )
paddle.shape(Tensor([1664, 4],"float32"), )
paddle.shape(Tensor([1665, 4],"float32"), )
paddle.shape(Tensor([1666, 4],"float32"), )
paddle.shape(Tensor([1668, 4],"float32"), )
paddle.shape(Tensor([1669, 4],"float32"), )
paddle.shape(Tensor([1675, 4],"float32"), )
paddle.shape(Tensor([1676, 4],"float32"), )
paddle.shape(Tensor([1677, 4],"float32"), )
paddle.shape(Tensor([1678, 4],"float32"), )
paddle.shape(Tensor([1679, 4],"float32"), )
paddle.shape(Tensor([1680, 4],"float32"), )
paddle.shape(Tensor([1686, 4],"float32"), )
paddle.shape(Tensor([1687, 4],"float32"), )
paddle.shape(Tensor([1688, 4],"float32"), )
paddle.shape(Tensor([1689, 4],"float32"), )
paddle.shape(Tensor([1690, 4],"float32"), )
paddle.shape(Tensor([1691, 4],"float32"), )
paddle.shape(Tensor([1692, 4],"float32"), )
paddle.shape(Tensor([1693, 4],"float32"), )
paddle.shape(Tensor([1695, 4],"float32"), )
paddle.shape(Tensor([1696, 4],"float32"), )
paddle.shape(Tensor([1697, 4],"float32"), )
paddle.shape(Tensor([1699, 4],"float32"), )
paddle.shape(Tensor([17, 4],"float32"), )
paddle.shape(Tensor([1700, 4],"float32"), )
paddle.shape(Tensor([1701, 4],"float32"), )
paddle.shape(Tensor([1702, 4],"float32"), )
paddle.shape(Tensor([1703, 4],"float32"), )
paddle.shape(Tensor([1704, 4],"float32"), )
paddle.shape(Tensor([1706, 4],"float32"), )
paddle.shape(Tensor([1707, 4],"float32"), )
paddle.shape(Tensor([1708, 4],"float32"), )
paddle.shape(Tensor([1709, 4],"float32"), )
paddle.shape(Tensor([1710, 4],"float32"), )
paddle.shape(Tensor([1711, 4],"float32"), )
paddle.shape(Tensor([1715, 4],"float32"), )
paddle.shape(Tensor([1716, 4],"float32"), )
paddle.shape(Tensor([1722, 4],"float32"), )
paddle.shape(Tensor([1723, 4],"float32"), )
paddle.shape(Tensor([1725, 4],"float32"), )
paddle.shape(Tensor([1726, 4],"float32"), )
paddle.shape(Tensor([1727, 4],"float32"), )
paddle.shape(Tensor([1728, 4],"float32"), )
paddle.shape(Tensor([1729, 4],"float32"), )
paddle.shape(Tensor([1730, 4],"float32"), )
paddle.shape(Tensor([1734, 4],"float32"), )
paddle.shape(Tensor([1735, 4],"float32"), )
paddle.shape(Tensor([1736, 4],"float32"), )
paddle.shape(Tensor([1737, 4],"float32"), )
paddle.shape(Tensor([1741, 4],"float32"), )
paddle.shape(Tensor([1742, 4],"float32"), )
paddle.shape(Tensor([1743, 4],"float32"), )
paddle.shape(Tensor([1744, 4],"float32"), )
paddle.shape(Tensor([1745, 4],"float32"), )
paddle.shape(Tensor([1746, 4],"float32"), )
paddle.shape(Tensor([1748, 4],"float32"), )
paddle.shape(Tensor([1750, 4],"float32"), )
paddle.shape(Tensor([1757, 4],"float32"), )
paddle.shape(Tensor([1759, 4],"float32"), )
paddle.shape(Tensor([1763, 4],"float32"), )
paddle.shape(Tensor([1765, 4],"float32"), )
paddle.shape(Tensor([1766, 4],"float32"), )
paddle.shape(Tensor([1772, 4],"float32"), )
paddle.shape(Tensor([1773, 4],"float32"), )
paddle.shape(Tensor([1774, 4],"float32"), )
paddle.shape(Tensor([1776, 4],"float32"), )
paddle.shape(Tensor([1777, 4],"float32"), )
paddle.shape(Tensor([1778, 4],"float32"), )
paddle.shape(Tensor([1780, 4],"float32"), )
paddle.shape(Tensor([1781, 4],"float32"), )
paddle.shape(Tensor([1782, 4],"float32"), )
paddle.shape(Tensor([1783, 4],"float32"), )
paddle.shape(Tensor([1784, 4],"float32"), )
paddle.shape(Tensor([1786, 4],"float32"), )
paddle.shape(Tensor([1787, 4],"float32"), )
paddle.shape(Tensor([1788, 4],"float32"), )
paddle.shape(Tensor([1789, 4],"float32"), )
paddle.shape(Tensor([1791, 4],"float32"), )
paddle.shape(Tensor([1792, 4],"float32"), )
paddle.shape(Tensor([1794, 4],"float32"), )
paddle.shape(Tensor([1796, 4],"float32"), )
paddle.shape(Tensor([1797, 4],"float32"), )
paddle.shape(Tensor([1798, 4],"float32"), )
paddle.shape(Tensor([1799, 4],"float32"), )
paddle.shape(Tensor([18, 4],"float32"), )
paddle.shape(Tensor([1800, 4],"float32"), )
paddle.shape(Tensor([1802, 4],"float32"), )
paddle.shape(Tensor([1803, 4],"float32"), )
paddle.shape(Tensor([1804, 4],"float32"), )
paddle.shape(Tensor([1806, 4],"float32"), )
paddle.shape(Tensor([1806],"float32"), )
paddle.shape(Tensor([1807, 4],"float32"), )
paddle.shape(Tensor([1808, 4],"float32"), )
paddle.shape(Tensor([1809, 4],"float32"), )
paddle.shape(Tensor([1810, 4],"float32"), )
paddle.shape(Tensor([1810],"float32"), )
paddle.shape(Tensor([1813, 4],"float32"), )
paddle.shape(Tensor([1814, 4],"float32"), )
paddle.shape(Tensor([1815, 4],"float32"), )
paddle.shape(Tensor([1816, 4],"float32"), )
paddle.shape(Tensor([1817, 4],"float32"), )
paddle.shape(Tensor([1821, 4],"float32"), )
paddle.shape(Tensor([1822, 4],"float32"), )
paddle.shape(Tensor([1823, 4],"float32"), )
paddle.shape(Tensor([1824, 4],"float32"), )
paddle.shape(Tensor([1825, 4],"float32"), )
paddle.shape(Tensor([1826, 4],"float32"), )
paddle.shape(Tensor([1827, 4],"float32"), )
paddle.shape(Tensor([1828, 4],"float32"), )
paddle.shape(Tensor([182],"int64"), )
paddle.shape(Tensor([1830, 4],"float32"), )
paddle.shape(Tensor([1833, 4],"float32"), )
paddle.shape(Tensor([1834, 4],"float32"), )
paddle.shape(Tensor([1836, 4],"float32"), )
paddle.shape(Tensor([1837, 4],"float32"), )
paddle.shape(Tensor([1838, 4],"float32"), )
paddle.shape(Tensor([1840, 4],"float32"), )
paddle.shape(Tensor([1842, 4],"float32"), )
paddle.shape(Tensor([1843, 4],"float32"), )
paddle.shape(Tensor([1845, 4],"float32"), )
paddle.shape(Tensor([1848, 4],"float32"), )
paddle.shape(Tensor([1855, 4],"float32"), )
paddle.shape(Tensor([1856],"float32"), )
paddle.shape(Tensor([1859, 4],"float32"), )
paddle.shape(Tensor([1861, 4],"float32"), )
paddle.shape(Tensor([1862, 4],"float32"), )
paddle.shape(Tensor([1862],"float32"), )
paddle.shape(Tensor([1864, 4],"float32"), )
paddle.shape(Tensor([1866, 4],"float32"), )
paddle.shape(Tensor([1867, 4],"float32"), )
paddle.shape(Tensor([1869, 4],"float32"), )
paddle.shape(Tensor([1870, 4],"float32"), )
paddle.shape(Tensor([1874, 4],"float32"), )
paddle.shape(Tensor([1875, 4],"float32"), )
paddle.shape(Tensor([1876, 4],"float32"), )
paddle.shape(Tensor([1877, 4],"float32"), )
paddle.shape(Tensor([1879, 4],"float32"), )
paddle.shape(Tensor([1880, 4],"float32"), )
paddle.shape(Tensor([1883, 4],"float32"), )
paddle.shape(Tensor([1884, 4],"float32"), )
paddle.shape(Tensor([1889, 4],"float32"), )
paddle.shape(Tensor([1890, 4],"float32"), )
paddle.shape(Tensor([1891, 4],"float32"), )
paddle.shape(Tensor([1893, 4],"float32"), )
paddle.shape(Tensor([1894, 4],"float32"), )
paddle.shape(Tensor([1898, 4],"float32"), )
paddle.shape(Tensor([1899, 4],"float32"), )
paddle.shape(Tensor([19, 4],"float32"), )
paddle.shape(Tensor([1900, 4],"float32"), )
paddle.shape(Tensor([1901, 4],"float32"), )
paddle.shape(Tensor([1901],"float32"), )
paddle.shape(Tensor([1902, 4],"float32"), )
paddle.shape(Tensor([1904, 4],"float32"), )
paddle.shape(Tensor([1905, 4],"float32"), )
paddle.shape(Tensor([1906, 4],"float32"), )
paddle.shape(Tensor([190960, 80],"float16"), )
paddle.shape(Tensor([190960, 80],"float32"), )
paddle.shape(Tensor([1913, 4],"float32"), )
paddle.shape(Tensor([1916, 4],"float32"), )
paddle.shape(Tensor([1917],"float32"), )
paddle.shape(Tensor([1918, 4],"float32"), )
paddle.shape(Tensor([1918],"float32"), )
paddle.shape(Tensor([1919, 4],"float32"), )
paddle.shape(Tensor([1922, 4],"float32"), )
paddle.shape(Tensor([1923, 4],"float32"), )
paddle.shape(Tensor([1924, 4],"float32"), )
paddle.shape(Tensor([1925, 4],"float32"), )
paddle.shape(Tensor([1926, 4],"float32"), )
paddle.shape(Tensor([1927, 4],"float32"), )
paddle.shape(Tensor([1928, 4],"float32"), )
paddle.shape(Tensor([1929, 4],"float32"), )
paddle.shape(Tensor([1930, 4],"float32"), )
paddle.shape(Tensor([1931, 4],"float32"), )
paddle.shape(Tensor([1932, 4],"float32"), )
paddle.shape(Tensor([1932],"float32"), )
paddle.shape(Tensor([1933, 4],"float32"), )
paddle.shape(Tensor([1934, 4],"float32"), )
paddle.shape(Tensor([1935, 4],"float32"), )
paddle.shape(Tensor([1936, 4],"float32"), )
paddle.shape(Tensor([1938, 4],"float32"), )
paddle.shape(Tensor([1938],"float32"), )
paddle.shape(Tensor([1939, 4],"float32"), )
paddle.shape(Tensor([1940, 4],"float32"), )
paddle.shape(Tensor([1942],"float32"), )
paddle.shape(Tensor([1948, 4],"float32"), )
paddle.shape(Tensor([1949, 4],"float32"), )
paddle.shape(Tensor([1949],"float32"), )
paddle.shape(Tensor([1951, 4],"float32"), )
paddle.shape(Tensor([1952, 4],"float32"), )
paddle.shape(Tensor([1954, 4],"float32"), )
paddle.shape(Tensor([1954],"float32"), )
paddle.shape(Tensor([1955, 4],"float32"), )
paddle.shape(Tensor([1956, 4],"float32"), )
paddle.shape(Tensor([1956],"float32"), )
paddle.shape(Tensor([1957, 4],"float32"), )
paddle.shape(Tensor([1958, 4],"float32"), )
paddle.shape(Tensor([1959, 4],"float32"), )
paddle.shape(Tensor([1961, 4],"float32"), )
paddle.shape(Tensor([1961],"float32"), )
paddle.shape(Tensor([1965, 4],"float32"), )
paddle.shape(Tensor([1966],"float32"), )
paddle.shape(Tensor([1967, 4],"float32"), )
paddle.shape(Tensor([1967],"float32"), )
paddle.shape(Tensor([1968, 4],"float32"), )
paddle.shape(Tensor([1969, 4],"float32"), )
paddle.shape(Tensor([1970, 4],"float32"), )
paddle.shape(Tensor([1971, 4],"float32"), )
paddle.shape(Tensor([1972, 4],"float32"), )
paddle.shape(Tensor([1973, 4],"float32"), )
paddle.shape(Tensor([1975, 4],"float32"), )
paddle.shape(Tensor([1976, 4],"float32"), )
paddle.shape(Tensor([1979, 4],"float32"), )
paddle.shape(Tensor([197],"int64"), )
paddle.shape(Tensor([1983, 4],"float32"), )
paddle.shape(Tensor([1985, 4],"float32"), )
paddle.shape(Tensor([1986, 4],"float32"), )
paddle.shape(Tensor([1987, 4],"float32"), )
paddle.shape(Tensor([1988, 4],"float32"), )
paddle.shape(Tensor([1989, 4],"float32"), )
paddle.shape(Tensor([1990, 4],"float32"), )
paddle.shape(Tensor([1990],"float32"), )
paddle.shape(Tensor([1992, 4],"float32"), )
paddle.shape(Tensor([1995],"float32"), )
paddle.shape(Tensor([1998, 4],"float32"), )
paddle.shape(Tensor([199],"int64"), )
paddle.shape(Tensor([2, 1, 1, 32768],"float16"), )
paddle.shape(Tensor([2, 1, 1, 4096],"float16"), )
paddle.shape(Tensor([2, 1, 512],"float32"), )
paddle.shape(Tensor([2, 1, 8, 8],"float32"), )
paddle.shape(Tensor([2, 10, 512],"float32"), )
paddle.shape(Tensor([2, 100, 512],"float32"), )
paddle.shape(Tensor([2, 101, 512],"float32"), )
paddle.shape(Tensor([2, 10164, 40],"float32"), )
paddle.shape(Tensor([2, 10164, 68],"float32"), )
paddle.shape(Tensor([2, 102, 512],"float32"), )
paddle.shape(Tensor([2, 103, 512],"float32"), )
paddle.shape(Tensor([2, 104, 512],"float32"), )
paddle.shape(Tensor([2, 105, 512],"float32"), )
paddle.shape(Tensor([2, 105344],"int64"), )
paddle.shape(Tensor([2, 106, 512],"float32"), )
paddle.shape(Tensor([2, 107, 512],"float32"), )
paddle.shape(Tensor([2, 108, 512],"float32"), )
paddle.shape(Tensor([2, 109, 512],"float32"), )
paddle.shape(Tensor([2, 11, 512],"float32"), )
paddle.shape(Tensor([2, 110, 512],"float32"), )
paddle.shape(Tensor([2, 111, 512],"float32"), )
paddle.shape(Tensor([2, 11109, 40],"float32"), )
paddle.shape(Tensor([2, 11109, 68],"float32"), )
paddle.shape(Tensor([2, 112, 512],"float32"), )
paddle.shape(Tensor([2, 113, 512],"float32"), )
paddle.shape(Tensor([2, 114, 512],"float32"), )
paddle.shape(Tensor([2, 115, 512],"float32"), )
paddle.shape(Tensor([2, 116, 512],"float32"), )
paddle.shape(Tensor([2, 117, 512],"float32"), )
paddle.shape(Tensor([2, 118, 512],"float32"), )
paddle.shape(Tensor([2, 119, 512],"float32"), )
paddle.shape(Tensor([2, 12, 512],"float32"), )
paddle.shape(Tensor([2, 120, 512],"float32"), )
paddle.shape(Tensor([2, 12096, 40],"float32"), )
paddle.shape(Tensor([2, 12096, 68],"float32"), )
paddle.shape(Tensor([2, 121, 512],"float32"), )
paddle.shape(Tensor([2, 122, 512],"float32"), )
paddle.shape(Tensor([2, 123, 512],"float32"), )
paddle.shape(Tensor([2, 124, 512],"float32"), )
paddle.shape(Tensor([2, 1240],"int64"), )
paddle.shape(Tensor([2, 125, 512],"float32"), )
paddle.shape(Tensor([2, 126, 512],"float32"), )
paddle.shape(Tensor([2, 127, 512],"float32"), )
paddle.shape(Tensor([2, 128, 512],"float32"), )
paddle.shape(Tensor([2, 129, 512],"float32"), )
paddle.shape(Tensor([2, 13, 512],"float32"), )
paddle.shape(Tensor([2, 130, 512],"float32"), )
paddle.shape(Tensor([2, 131, 512],"float32"), )
paddle.shape(Tensor([2, 132, 512],"float32"), )
paddle.shape(Tensor([2, 133, 512],"float32"), )
paddle.shape(Tensor([2, 134, 512],"float32"), )
paddle.shape(Tensor([2, 135, 512],"float32"), )
paddle.shape(Tensor([2, 136, 512],"float32"), )
paddle.shape(Tensor([2, 137, 512],"float32"), )
paddle.shape(Tensor([2, 138, 512],"float32"), )
paddle.shape(Tensor([2, 139, 512],"float32"), )
paddle.shape(Tensor([2, 14, 512],"float32"), )
paddle.shape(Tensor([2, 140, 512],"float32"), )
paddle.shape(Tensor([2, 141, 512],"float32"), )
paddle.shape(Tensor([2, 142, 512],"float32"), )
paddle.shape(Tensor([2, 143, 512],"float32"), )
paddle.shape(Tensor([2, 144, 512],"float32"), )
paddle.shape(Tensor([2, 145, 512],"float32"), )
paddle.shape(Tensor([2, 146, 512],"float32"), )
paddle.shape(Tensor([2, 147, 512],"float32"), )
paddle.shape(Tensor([2, 148, 512],"float32"), )
paddle.shape(Tensor([2, 149, 512],"float32"), )
paddle.shape(Tensor([2, 15, 512],"float32"), )
paddle.shape(Tensor([2, 150, 512],"float32"), )
paddle.shape(Tensor([2, 151, 512],"float32"), )
paddle.shape(Tensor([2, 152, 512],"float32"), )
paddle.shape(Tensor([2, 153, 512],"float32"), )
paddle.shape(Tensor([2, 154, 512],"float32"), )
paddle.shape(Tensor([2, 155, 512],"float32"), )
paddle.shape(Tensor([2, 156, 512],"float32"), )
paddle.shape(Tensor([2, 157, 512],"float32"), )
paddle.shape(Tensor([2, 158, 512],"float32"), )
paddle.shape(Tensor([2, 159, 512],"float32"), )
paddle.shape(Tensor([2, 16, 512],"float32"), )
paddle.shape(Tensor([2, 160, 10, 10],"float32"), )
paddle.shape(Tensor([2, 160, 11, 11],"float32"), )
paddle.shape(Tensor([2, 160, 18, 18],"float32"), )
paddle.shape(Tensor([2, 160, 19, 19],"float32"), )
paddle.shape(Tensor([2, 160, 20, 20],"float32"), )
paddle.shape(Tensor([2, 160, 21, 21],"float32"), )
paddle.shape(Tensor([2, 160, 22, 22],"float32"), )
paddle.shape(Tensor([2, 160, 36, 36],"float32"), )
paddle.shape(Tensor([2, 160, 38, 38],"float32"), )
paddle.shape(Tensor([2, 160, 40, 40],"float32"), )
paddle.shape(Tensor([2, 160, 42, 42],"float32"), )
paddle.shape(Tensor([2, 160, 44, 44],"float32"), )
paddle.shape(Tensor([2, 160, 512],"float32"), )
paddle.shape(Tensor([2, 160, 72, 72],"float32"), )
paddle.shape(Tensor([2, 160, 76, 76],"float32"), )
paddle.shape(Tensor([2, 160, 80, 80],"float32"), )
paddle.shape(Tensor([2, 160, 84, 84],"float32"), )
paddle.shape(Tensor([2, 160, 88, 88],"float32"), )
paddle.shape(Tensor([2, 160, 9, 9],"float32"), )
paddle.shape(Tensor([2, 161, 512],"float32"), )
paddle.shape(Tensor([2, 162, 512],"float32"), )
paddle.shape(Tensor([2, 163, 512],"float32"), )
paddle.shape(Tensor([2, 164, 512],"float32"), )
paddle.shape(Tensor([2, 165, 512],"float32"), )
paddle.shape(Tensor([2, 166, 512],"float32"), )
paddle.shape(Tensor([2, 167, 512],"float32"), )
paddle.shape(Tensor([2, 168, 512],"float32"), )
paddle.shape(Tensor([2, 169, 512],"float32"), )
paddle.shape(Tensor([2, 17, 512],"float32"), )
paddle.shape(Tensor([2, 170, 512],"float32"), )
paddle.shape(Tensor([2, 171, 512],"float32"), )
paddle.shape(Tensor([2, 172, 512],"float32"), )
paddle.shape(Tensor([2, 173, 512],"float32"), )
paddle.shape(Tensor([2, 174, 512],"float32"), )
paddle.shape(Tensor([2, 175, 512],"float32"), )
paddle.shape(Tensor([2, 176, 512],"float32"), )
paddle.shape(Tensor([2, 177, 512],"float32"), )
paddle.shape(Tensor([2, 178, 512],"float32"), )
paddle.shape(Tensor([2, 179, 512],"float32"), )
paddle.shape(Tensor([2, 18, 512],"float32"), )
paddle.shape(Tensor([2, 180, 512],"float32"), )
paddle.shape(Tensor([2, 181, 512],"float32"), )
paddle.shape(Tensor([2, 182, 512],"float32"), )
paddle.shape(Tensor([2, 183, 512],"float32"), )
paddle.shape(Tensor([2, 184, 512],"float32"), )
paddle.shape(Tensor([2, 185, 512],"float32"), )
paddle.shape(Tensor([2, 186, 512],"float32"), )
paddle.shape(Tensor([2, 187, 512],"float32"), )
paddle.shape(Tensor([2, 188, 512],"float32"), )
paddle.shape(Tensor([2, 189, 512],"float32"), )
paddle.shape(Tensor([2, 19, 512],"float32"), )
paddle.shape(Tensor([2, 190, 512],"float32"), )
paddle.shape(Tensor([2, 191, 512],"float32"), )
paddle.shape(Tensor([2, 192, 4],"float32"), )
paddle.shape(Tensor([2, 192, 512],"float32"), )
paddle.shape(Tensor([2, 193, 512],"float32"), )
paddle.shape(Tensor([2, 194, 512],"float32"), )
paddle.shape(Tensor([2, 195, 512],"float32"), )
paddle.shape(Tensor([2, 19528],"int64"), )
paddle.shape(Tensor([2, 196, 512],"float32"), )
paddle.shape(Tensor([2, 197, 512],"float32"), )
paddle.shape(Tensor([2, 198, 4],"float32"), )
paddle.shape(Tensor([2, 198, 512],"float32"), )
paddle.shape(Tensor([2, 199, 512],"float32"), )
paddle.shape(Tensor([2, 2, 1, 64],"float16"), )
paddle.shape(Tensor([2, 2, 4, 5],"float32"), )
paddle.shape(Tensor([2, 2, 512],"float32"), )
paddle.shape(Tensor([2, 2, 64, 64],"float16"), )
paddle.shape(Tensor([2, 2, 8, 16],"float32"), )
paddle.shape(Tensor([2, 20, 512],"float32"), )
paddle.shape(Tensor([2, 200, 4],"float32"), )
paddle.shape(Tensor([2, 200, 512],"float32"), )
paddle.shape(Tensor([2, 201, 512],"float32"), )
paddle.shape(Tensor([2, 202, 512],"float32"), )
paddle.shape(Tensor([2, 203, 512],"float32"), )
paddle.shape(Tensor([2, 204, 512],"float32"), )
paddle.shape(Tensor([2, 205, 512],"float32"), )
paddle.shape(Tensor([2, 206, 512],"float32"), )
paddle.shape(Tensor([2, 207, 512],"float32"), )
paddle.shape(Tensor([2, 208, 512],"float32"), )
paddle.shape(Tensor([2, 209, 512],"float32"), )
paddle.shape(Tensor([2, 21, 512],"float32"), )
paddle.shape(Tensor([2, 2100, 40],"float32"), )
paddle.shape(Tensor([2, 2100, 68],"float32"), )
paddle.shape(Tensor([2, 22, 512],"float32"), )
paddle.shape(Tensor([2, 23, 512],"float32"), )
paddle.shape(Tensor([2, 24, 512],"float32"), )
paddle.shape(Tensor([2, 25, 512],"float32"), )
paddle.shape(Tensor([2, 2541, 40],"float32"), )
paddle.shape(Tensor([2, 2541, 68],"float32"), )
paddle.shape(Tensor([2, 256, 10, 15],"float16"), )
paddle.shape(Tensor([2, 256, 10, 15],"float32"), )
paddle.shape(Tensor([2, 256, 19, 29],"float16"), )
paddle.shape(Tensor([2, 256, 19, 29],"float32"), )
paddle.shape(Tensor([2, 256, 38, 58],"float16"), )
paddle.shape(Tensor([2, 256, 38, 58],"float32"), )
paddle.shape(Tensor([2, 256, 76, 115],"float16"), )
paddle.shape(Tensor([2, 256, 76, 115],"float32"), )
paddle.shape(Tensor([2, 26, 512],"float32"), )
paddle.shape(Tensor([2, 26336],"int64"), )
paddle.shape(Tensor([2, 27, 512],"float32"), )
paddle.shape(Tensor([2, 28, 512],"float32"), )
paddle.shape(Tensor([2, 29, 512],"float32"), )
paddle.shape(Tensor([2, 2],"float32"), )
paddle.shape(Tensor([2, 2],"int64"), )
paddle.shape(Tensor([2, 3, 100, 100],"float32"), )
paddle.shape(Tensor([2, 3, 16],"float32"), )
paddle.shape(Tensor([2, 3, 17],"float64"), )
paddle.shape(Tensor([2, 3, 24],"float32"), )
paddle.shape(Tensor([2, 3, 32],"float16"), )
paddle.shape(Tensor([2, 3, 32],"float32"), )
paddle.shape(Tensor([2, 3, 4, 10],"float64"), )
paddle.shape(Tensor([2, 3, 4, 5],"float64"), )
paddle.shape(Tensor([2, 3, 4],"float32"), )
paddle.shape(Tensor([2, 3, 5, 5, 2, 1, 2, 2, 2],"float64"), )
paddle.shape(Tensor([2, 3, 512],"float32"), )
paddle.shape(Tensor([2, 30, 512],"float32"), )
paddle.shape(Tensor([2, 3024, 40],"float32"), )
paddle.shape(Tensor([2, 3024, 68],"float32"), )
paddle.shape(Tensor([2, 31, 512],"float32"), )
paddle.shape(Tensor([2, 32, 512],"float32"), )
paddle.shape(Tensor([2, 33, 512],"float32"), )
paddle.shape(Tensor([2, 34, 512],"float32"), )
paddle.shape(Tensor([2, 35, 512],"float32"), )
paddle.shape(Tensor([2, 3549, 40],"float32"), )
paddle.shape(Tensor([2, 3549, 68],"float32"), )
paddle.shape(Tensor([2, 36, 512],"float32"), )
paddle.shape(Tensor([2, 37, 512],"float32"), )
paddle.shape(Tensor([2, 38, 512],"float32"), )
paddle.shape(Tensor([2, 39, 512],"float32"), )
paddle.shape(Tensor([2, 3],"complex128"), )
paddle.shape(Tensor([2, 3],"float32"), )
paddle.shape(Tensor([2, 4, 2],"float64"), )
paddle.shape(Tensor([2, 4, 512],"float32"), )
paddle.shape(Tensor([2, 4, 5],"float32"), )
paddle.shape(Tensor([2, 4, 8, 8],"float32"), )
paddle.shape(Tensor([2, 40, 512],"float32"), )
paddle.shape(Tensor([2, 41, 512],"float32"), )
paddle.shape(Tensor([2, 4116, 40],"float32"), )
paddle.shape(Tensor([2, 4116, 68],"float32"), )
paddle.shape(Tensor([2, 42, 512],"float32"), )
paddle.shape(Tensor([2, 43, 512],"float32"), )
paddle.shape(Tensor([2, 44, 512],"float32"), )
paddle.shape(Tensor([2, 45, 512],"float32"), )
paddle.shape(Tensor([2, 46, 512],"float32"), )
paddle.shape(Tensor([2, 47, 512],"float32"), )
paddle.shape(Tensor([2, 4725, 40],"float32"), )
paddle.shape(Tensor([2, 4725, 68],"float32"), )
paddle.shape(Tensor([2, 48, 512],"float32"), )
paddle.shape(Tensor([2, 49, 512],"float32"), )
paddle.shape(Tensor([2, 4936],"int64"), )
paddle.shape(Tensor([2, 4],"float32"), )
paddle.shape(Tensor([2, 5, 16, 256],"float32"), )
paddle.shape(Tensor([2, 5, 512],"float32"), )
paddle.shape(Tensor([2, 50, 512],"float32"), )
paddle.shape(Tensor([2, 51, 512],"float32"), )
paddle.shape(Tensor([2, 5168],"int64"), )
paddle.shape(Tensor([2, 52, 512],"float32"), )
paddle.shape(Tensor([2, 53, 512],"float32"), )
paddle.shape(Tensor([2, 5376, 40],"float32"), )
paddle.shape(Tensor([2, 5376, 68],"float32"), )
paddle.shape(Tensor([2, 54, 512],"float32"), )
paddle.shape(Tensor([2, 55, 512],"float32"), )
paddle.shape(Tensor([2, 56, 512],"float32"), )
paddle.shape(Tensor([2, 57, 512],"float32"), )
paddle.shape(Tensor([2, 58, 512],"float32"), )
paddle.shape(Tensor([2, 58584],"int64"), )
paddle.shape(Tensor([2, 59, 512],"float32"), )
paddle.shape(Tensor([2, 5],"float64"), )
paddle.shape(Tensor([2, 6, 1024],"float16"), )
paddle.shape(Tensor([2, 6, 16, 256],"float32"), )
paddle.shape(Tensor([2, 6, 512],"float32"), )
paddle.shape(Tensor([2, 60, 512],"float32"), )
paddle.shape(Tensor([2, 6069, 40],"float32"), )
paddle.shape(Tensor([2, 6069, 68],"float32"), )
paddle.shape(Tensor([2, 61, 512],"float32"), )
paddle.shape(Tensor([2, 62, 512],"float32"), )
paddle.shape(Tensor([2, 63, 512],"float32"), )
paddle.shape(Tensor([2, 64, 512],"float32"), )
paddle.shape(Tensor([2, 65, 512],"float32"), )
paddle.shape(Tensor([2, 66, 512],"float32"), )
paddle.shape(Tensor([2, 67, 512],"float32"), )
paddle.shape(Tensor([2, 68, 512],"float32"), )
paddle.shape(Tensor([2, 6804, 40],"float32"), )
paddle.shape(Tensor([2, 6804, 68],"float32"), )
paddle.shape(Tensor([2, 69, 512],"float32"), )
paddle.shape(Tensor([2, 7, 36],"float32"), )
paddle.shape(Tensor([2, 7, 512],"float32"), )
paddle.shape(Tensor([2, 7, 8],"float32"), )
paddle.shape(Tensor([2, 70, 512],"float32"), )
paddle.shape(Tensor([2, 71, 512],"float32"), )
paddle.shape(Tensor([2, 72, 512],"float32"), )
paddle.shape(Tensor([2, 73, 512],"float32"), )
paddle.shape(Tensor([2, 74, 512],"float32"), )
paddle.shape(Tensor([2, 75, 512],"float32"), )
paddle.shape(Tensor([2, 7581, 40],"float32"), )
paddle.shape(Tensor([2, 7581, 68],"float32"), )
paddle.shape(Tensor([2, 76, 512],"float32"), )
paddle.shape(Tensor([2, 77, 512],"float32"), )
paddle.shape(Tensor([2, 78, 512],"float32"), )
paddle.shape(Tensor([2, 78112],"int64"), )
paddle.shape(Tensor([2, 79, 512],"float32"), )
paddle.shape(Tensor([2, 8, 1, 64],"float16"), )
paddle.shape(Tensor([2, 8, 512],"float32"), )
paddle.shape(Tensor([2, 8, 64, 64],"float16"), )
paddle.shape(Tensor([2, 80, 512],"float32"), )
paddle.shape(Tensor([2, 81, 512],"float32"), )
paddle.shape(Tensor([2, 82, 512],"float32"), )
paddle.shape(Tensor([2, 83, 512],"float32"), )
paddle.shape(Tensor([2, 84, 512],"float32"), )
paddle.shape(Tensor([2, 8400, 40],"float32"), )
paddle.shape(Tensor([2, 8400, 68],"float32"), )
paddle.shape(Tensor([2, 85, 512],"float32"), )
paddle.shape(Tensor([2, 86, 512],"float32"), )
paddle.shape(Tensor([2, 87, 512],"float32"), )
paddle.shape(Tensor([2, 88, 512],"float32"), )
paddle.shape(Tensor([2, 89, 512],"float32"), )
paddle.shape(Tensor([2, 9, 512],"float32"), )
paddle.shape(Tensor([2, 90, 512],"float32"), )
paddle.shape(Tensor([2, 91, 512],"float32"), )
paddle.shape(Tensor([2, 92, 512],"float32"), )
paddle.shape(Tensor([2, 9261, 40],"float32"), )
paddle.shape(Tensor([2, 9261, 68],"float32"), )
paddle.shape(Tensor([2, 93, 512],"float32"), )
paddle.shape(Tensor([2, 94, 512],"float32"), )
paddle.shape(Tensor([2, 95, 512],"float32"), )
paddle.shape(Tensor([2, 96, 13, 13],"float32"), )
paddle.shape(Tensor([2, 96, 14, 14],"float32"), )
paddle.shape(Tensor([2, 96, 15, 15],"float32"), )
paddle.shape(Tensor([2, 96, 16, 16],"float32"), )
paddle.shape(Tensor([2, 96, 17, 17],"float32"), )
paddle.shape(Tensor([2, 96, 26, 26],"float32"), )
paddle.shape(Tensor([2, 96, 28, 28],"float32"), )
paddle.shape(Tensor([2, 96, 30, 30],"float32"), )
paddle.shape(Tensor([2, 96, 32, 32],"float32"), )
paddle.shape(Tensor([2, 96, 34, 34],"float32"), )
paddle.shape(Tensor([2, 96, 512],"float32"), )
paddle.shape(Tensor([2, 96, 52, 52],"float32"), )
paddle.shape(Tensor([2, 96, 56, 56],"float32"), )
paddle.shape(Tensor([2, 96, 60, 60],"float32"), )
paddle.shape(Tensor([2, 96, 64, 64],"float32"), )
paddle.shape(Tensor([2, 96, 68, 68],"float32"), )
paddle.shape(Tensor([2, 96, 7, 7],"float32"), )
paddle.shape(Tensor([2, 96, 8, 8],"float32"), )
paddle.shape(Tensor([2, 96, 9, 9],"float32"), )
paddle.shape(Tensor([2, 97, 512],"float32"), )
paddle.shape(Tensor([2, 98, 512],"float32"), )
paddle.shape(Tensor([2, 99, 512],"float32"), )
paddle.shape(Tensor([20, 4],"float32"), )
paddle.shape(Tensor([2000, 4],"float32"), )
paddle.shape(Tensor([2012],"float32"), )
paddle.shape(Tensor([2014],"float32"), )
paddle.shape(Tensor([2015],"float32"), )
paddle.shape(Tensor([2017],"float32"), )
paddle.shape(Tensor([2029],"float32"), )
paddle.shape(Tensor([2030],"float32"), )
paddle.shape(Tensor([2031],"float32"), )
paddle.shape(Tensor([2038],"float32"), )
paddle.shape(Tensor([2039],"float32"), )
paddle.shape(Tensor([2040],"float32"), )
paddle.shape(Tensor([2041],"float32"), )
paddle.shape(Tensor([2042],"float32"), )
paddle.shape(Tensor([2046],"float32"), )
paddle.shape(Tensor([2047],"float32"), )
paddle.shape(Tensor([2049],"float32"), )
paddle.shape(Tensor([2050],"float32"), )
paddle.shape(Tensor([2054],"float32"), )
paddle.shape(Tensor([2057],"float32"), )
paddle.shape(Tensor([2058],"float32"), )
paddle.shape(Tensor([2059],"float32"), )
paddle.shape(Tensor([2061],"float32"), )
paddle.shape(Tensor([2062],"float32"), )
paddle.shape(Tensor([2063],"float32"), )
paddle.shape(Tensor([2065],"float32"), )
paddle.shape(Tensor([2067],"float32"), )
paddle.shape(Tensor([2069],"float32"), )
paddle.shape(Tensor([2070],"float32"), )
paddle.shape(Tensor([2072],"float32"), )
paddle.shape(Tensor([2073],"float32"), )
paddle.shape(Tensor([2074],"float32"), )
paddle.shape(Tensor([2078],"float32"), )
paddle.shape(Tensor([2084],"float32"), )
paddle.shape(Tensor([2085],"float32"), )
paddle.shape(Tensor([2087],"float32"), )
paddle.shape(Tensor([2089],"float32"), )
paddle.shape(Tensor([2092],"float32"), )
paddle.shape(Tensor([2093],"float32"), )
paddle.shape(Tensor([2094],"float32"), )
paddle.shape(Tensor([2097],"float32"), )
paddle.shape(Tensor([21, 4],"float32"), )
paddle.shape(Tensor([210056, 80],"float16"), )
paddle.shape(Tensor([210056, 80],"float32"), )
paddle.shape(Tensor([2101],"float32"), )
paddle.shape(Tensor([2106],"float32"), )
paddle.shape(Tensor([2107],"float32"), )
paddle.shape(Tensor([2111],"float32"), )
paddle.shape(Tensor([2112],"float32"), )
paddle.shape(Tensor([2114],"float32"), )
paddle.shape(Tensor([2116],"float32"), )
paddle.shape(Tensor([2118],"float32"), )
paddle.shape(Tensor([2121],"float32"), )
paddle.shape(Tensor([2122],"float32"), )
paddle.shape(Tensor([2123],"float32"), )
paddle.shape(Tensor([2124],"float32"), )
paddle.shape(Tensor([2126],"float32"), )
paddle.shape(Tensor([2128],"float32"), )
paddle.shape(Tensor([2129],"float32"), )
paddle.shape(Tensor([2130],"float32"), )
paddle.shape(Tensor([2131],"float32"), )
paddle.shape(Tensor([2135],"float32"), )
paddle.shape(Tensor([2137],"float32"), )
paddle.shape(Tensor([2138],"float32"), )
paddle.shape(Tensor([2140],"float32"), )
paddle.shape(Tensor([2143],"float32"), )
paddle.shape(Tensor([2144],"float32"), )
paddle.shape(Tensor([2145],"float32"), )
paddle.shape(Tensor([2147],"float32"), )
paddle.shape(Tensor([2148],"float32"), )
paddle.shape(Tensor([2149],"float32"), )
paddle.shape(Tensor([2150],"float32"), )
paddle.shape(Tensor([2152],"float32"), )
paddle.shape(Tensor([2153],"float32"), )
paddle.shape(Tensor([2155],"float32"), )
paddle.shape(Tensor([2157],"float32"), )
paddle.shape(Tensor([2160],"float32"), )
paddle.shape(Tensor([2161],"float32"), )
paddle.shape(Tensor([2162],"float32"), )
paddle.shape(Tensor([2163],"float32"), )
paddle.shape(Tensor([2166],"float32"), )
paddle.shape(Tensor([2168],"float32"), )
paddle.shape(Tensor([2169],"float32"), )
paddle.shape(Tensor([2170],"float32"), )
paddle.shape(Tensor([2173],"float32"), )
paddle.shape(Tensor([2174],"float32"), )
paddle.shape(Tensor([2176],"float32"), )
paddle.shape(Tensor([2177],"float32"), )
paddle.shape(Tensor([2178],"float32"), )
paddle.shape(Tensor([2180],"float32"), )
paddle.shape(Tensor([2181],"float32"), )
paddle.shape(Tensor([218240, 80],"float16"), )
paddle.shape(Tensor([218240, 80],"float32"), )
paddle.shape(Tensor([2182],"float32"), )
paddle.shape(Tensor([2183],"float32"), )
paddle.shape(Tensor([2184],"float32"), )
paddle.shape(Tensor([2185],"float32"), )
paddle.shape(Tensor([2186],"float32"), )
paddle.shape(Tensor([2187],"float32"), )
paddle.shape(Tensor([2188],"float32"), )
paddle.shape(Tensor([2189],"float32"), )
paddle.shape(Tensor([2190],"float32"), )
paddle.shape(Tensor([2191],"float32"), )
paddle.shape(Tensor([2192],"float32"), )
paddle.shape(Tensor([2193],"float32"), )
paddle.shape(Tensor([2194],"float32"), )
paddle.shape(Tensor([2195],"float32"), )
paddle.shape(Tensor([2196],"float32"), )
paddle.shape(Tensor([2197],"float32"), )
paddle.shape(Tensor([2198],"float32"), )
paddle.shape(Tensor([2199],"float32"), )
paddle.shape(Tensor([22, 4],"float32"), )
paddle.shape(Tensor([2200],"float32"), )
paddle.shape(Tensor([2202],"float32"), )
paddle.shape(Tensor([2205],"float32"), )
paddle.shape(Tensor([2206],"float32"), )
paddle.shape(Tensor([2207],"float32"), )
paddle.shape(Tensor([2208],"float32"), )
paddle.shape(Tensor([220968, 80],"float16"), )
paddle.shape(Tensor([2209],"float32"), )
paddle.shape(Tensor([2210],"float32"), )
paddle.shape(Tensor([2211],"float32"), )
paddle.shape(Tensor([2212],"float32"), )
paddle.shape(Tensor([2214],"float32"), )
paddle.shape(Tensor([2215],"float32"), )
paddle.shape(Tensor([2216],"float32"), )
paddle.shape(Tensor([2217],"float32"), )
paddle.shape(Tensor([2219],"float32"), )
paddle.shape(Tensor([2221],"float32"), )
paddle.shape(Tensor([2222],"float32"), )
paddle.shape(Tensor([2223],"float32"), )
paddle.shape(Tensor([2224],"float32"), )
paddle.shape(Tensor([2225],"float32"), )
paddle.shape(Tensor([2226],"float32"), )
paddle.shape(Tensor([2227],"float32"), )
paddle.shape(Tensor([2228],"float32"), )
paddle.shape(Tensor([2229],"float32"), )
paddle.shape(Tensor([2230],"float32"), )
paddle.shape(Tensor([2231],"float32"), )
paddle.shape(Tensor([2232],"float32"), )
paddle.shape(Tensor([2233],"float32"), )
paddle.shape(Tensor([2234],"float32"), )
paddle.shape(Tensor([2235],"float32"), )
paddle.shape(Tensor([2236],"float32"), )
paddle.shape(Tensor([2237],"float32"), )
paddle.shape(Tensor([2238],"float32"), )
paddle.shape(Tensor([2239],"float32"), )
paddle.shape(Tensor([2240],"float32"), )
paddle.shape(Tensor([2241],"float32"), )
paddle.shape(Tensor([2242],"float32"), )
paddle.shape(Tensor([2243],"float32"), )
paddle.shape(Tensor([2244],"float32"), )
paddle.shape(Tensor([2245],"float32"), )
paddle.shape(Tensor([2246],"float32"), )
paddle.shape(Tensor([2247],"float32"), )
paddle.shape(Tensor([2249],"float32"), )
paddle.shape(Tensor([2250],"float32"), )
paddle.shape(Tensor([2251],"float32"), )
paddle.shape(Tensor([2252],"float32"), )
paddle.shape(Tensor([2253],"float32"), )
paddle.shape(Tensor([2254],"float32"), )
paddle.shape(Tensor([2255],"float32"), )
paddle.shape(Tensor([2256],"float32"), )
paddle.shape(Tensor([2257],"float32"), )
paddle.shape(Tensor([2258],"float32"), )
paddle.shape(Tensor([2259],"float32"), )
paddle.shape(Tensor([2260],"float32"), )
paddle.shape(Tensor([2261],"float32"), )
paddle.shape(Tensor([2262],"float32"), )
paddle.shape(Tensor([2263],"float32"), )
paddle.shape(Tensor([2264],"float32"), )
paddle.shape(Tensor([2265],"float32"), )
paddle.shape(Tensor([2266],"float32"), )
paddle.shape(Tensor([2267],"float32"), )
paddle.shape(Tensor([2268],"float32"), )
paddle.shape(Tensor([2269],"float32"), )
paddle.shape(Tensor([2270],"float32"), )
paddle.shape(Tensor([2271],"float32"), )
paddle.shape(Tensor([2272],"float32"), )
paddle.shape(Tensor([2273],"float32"), )
paddle.shape(Tensor([2274],"float32"), )
paddle.shape(Tensor([2275],"float32"), )
paddle.shape(Tensor([2276],"float32"), )
paddle.shape(Tensor([2277],"float32"), )
paddle.shape(Tensor([2278],"float32"), )
paddle.shape(Tensor([2279],"float32"), )
paddle.shape(Tensor([2280],"float32"), )
paddle.shape(Tensor([2281],"float32"), )
paddle.shape(Tensor([2282],"float32"), )
paddle.shape(Tensor([2283],"float32"), )
paddle.shape(Tensor([2284],"float32"), )
paddle.shape(Tensor([2285],"float32"), )
paddle.shape(Tensor([2286],"float32"), )
paddle.shape(Tensor([2287],"float32"), )
paddle.shape(Tensor([2288],"float32"), )
paddle.shape(Tensor([2289],"float32"), )
paddle.shape(Tensor([2290],"float32"), )
paddle.shape(Tensor([2291],"float32"), )
paddle.shape(Tensor([2292],"float32"), )
paddle.shape(Tensor([2293],"float32"), )
paddle.shape(Tensor([2294],"float32"), )
paddle.shape(Tensor([2295],"float32"), )
paddle.shape(Tensor([2296],"float32"), )
paddle.shape(Tensor([2297],"float32"), )
paddle.shape(Tensor([2298],"float32"), )
paddle.shape(Tensor([2299],"float32"), )
paddle.shape(Tensor([23, 4],"float32"), )
paddle.shape(Tensor([2300],"float32"), )
paddle.shape(Tensor([2301],"float32"), )
paddle.shape(Tensor([2302],"float32"), )
paddle.shape(Tensor([2303],"float32"), )
paddle.shape(Tensor([2304],"float32"), )
paddle.shape(Tensor([2305],"float32"), )
paddle.shape(Tensor([2306],"float32"), )
paddle.shape(Tensor([2307],"float32"), )
paddle.shape(Tensor([2308],"float32"), )
paddle.shape(Tensor([2309],"float32"), )
paddle.shape(Tensor([2310],"float32"), )
paddle.shape(Tensor([2311],"float32"), )
paddle.shape(Tensor([2312],"float32"), )
paddle.shape(Tensor([2313],"float32"), )
paddle.shape(Tensor([2314],"float32"), )
paddle.shape(Tensor([2315],"float32"), )
paddle.shape(Tensor([2316],"float32"), )
paddle.shape(Tensor([2317],"float32"), )
paddle.shape(Tensor([2318],"float32"), )
paddle.shape(Tensor([2319],"float32"), )
paddle.shape(Tensor([2320],"float32"), )
paddle.shape(Tensor([2321],"float32"), )
paddle.shape(Tensor([2322],"float32"), )
paddle.shape(Tensor([2323],"float32"), )
paddle.shape(Tensor([2324],"float32"), )
paddle.shape(Tensor([2325],"float32"), )
paddle.shape(Tensor([2326],"float32"), )
paddle.shape(Tensor([2327],"float32"), )
paddle.shape(Tensor([2328],"float32"), )
paddle.shape(Tensor([2329],"float32"), )
paddle.shape(Tensor([2330],"float32"), )
paddle.shape(Tensor([2331],"float32"), )
paddle.shape(Tensor([2332],"float32"), )
paddle.shape(Tensor([2333],"float32"), )
paddle.shape(Tensor([2334],"float32"), )
paddle.shape(Tensor([2335],"float32"), )
paddle.shape(Tensor([2336],"float32"), )
paddle.shape(Tensor([2337],"float32"), )
paddle.shape(Tensor([2338],"float32"), )
paddle.shape(Tensor([2339],"float32"), )
paddle.shape(Tensor([2340],"float32"), )
paddle.shape(Tensor([2341],"float32"), )
paddle.shape(Tensor([2342],"float32"), )
paddle.shape(Tensor([2343],"float32"), )
paddle.shape(Tensor([2344],"float32"), )
paddle.shape(Tensor([2345],"float32"), )
paddle.shape(Tensor([2346],"float32"), )
paddle.shape(Tensor([2347],"float32"), )
paddle.shape(Tensor([2348],"float32"), )
paddle.shape(Tensor([2349],"float32"), )
paddle.shape(Tensor([2350],"float32"), )
paddle.shape(Tensor([2351],"float32"), )
paddle.shape(Tensor([2352],"float32"), )
paddle.shape(Tensor([2353],"float32"), )
paddle.shape(Tensor([2354],"float32"), )
paddle.shape(Tensor([2355],"float32"), )
paddle.shape(Tensor([2356],"float32"), )
paddle.shape(Tensor([2357],"float32"), )
paddle.shape(Tensor([2358],"float32"), )
paddle.shape(Tensor([2359],"float32"), )
paddle.shape(Tensor([2360],"float32"), )
paddle.shape(Tensor([2361],"float32"), )
paddle.shape(Tensor([2362],"float32"), )
paddle.shape(Tensor([2363],"float32"), )
paddle.shape(Tensor([2364],"float32"), )
paddle.shape(Tensor([2365],"float32"), )
paddle.shape(Tensor([2366],"float32"), )
paddle.shape(Tensor([2367],"float32"), )
paddle.shape(Tensor([2368],"float32"), )
paddle.shape(Tensor([2369],"float32"), )
paddle.shape(Tensor([2370],"float32"), )
paddle.shape(Tensor([2371],"float32"), )
paddle.shape(Tensor([2372],"float32"), )
paddle.shape(Tensor([2373],"float32"), )
paddle.shape(Tensor([2374],"float32"), )
paddle.shape(Tensor([2375],"float32"), )
paddle.shape(Tensor([2376],"float32"), )
paddle.shape(Tensor([2377],"float32"), )
paddle.shape(Tensor([2378],"float32"), )
paddle.shape(Tensor([2379],"float32"), )
paddle.shape(Tensor([2380],"float32"), )
paddle.shape(Tensor([2381],"float32"), )
paddle.shape(Tensor([2382],"float32"), )
paddle.shape(Tensor([2383],"float32"), )
paddle.shape(Tensor([2384],"float32"), )
paddle.shape(Tensor([2385],"float32"), )
paddle.shape(Tensor([2386],"float32"), )
paddle.shape(Tensor([2387],"float32"), )
paddle.shape(Tensor([2388],"float32"), )
paddle.shape(Tensor([2389],"float32"), )
paddle.shape(Tensor([2390],"float32"), )
paddle.shape(Tensor([2391],"float32"), )
paddle.shape(Tensor([2392],"float32"), )
paddle.shape(Tensor([2393],"float32"), )
paddle.shape(Tensor([2394],"float32"), )
paddle.shape(Tensor([2395],"float32"), )
paddle.shape(Tensor([2396],"float32"), )
paddle.shape(Tensor([2397],"float32"), )
paddle.shape(Tensor([2398],"float32"), )
paddle.shape(Tensor([2399],"float32"), )
paddle.shape(Tensor([24, 4],"float32"), )
paddle.shape(Tensor([240064, 80],"float16"), )
paddle.shape(Tensor([240064, 80],"float32"), )
paddle.shape(Tensor([2400],"float32"), )
paddle.shape(Tensor([2401],"float32"), )
paddle.shape(Tensor([2402],"float32"), )
paddle.shape(Tensor([2403],"float32"), )
paddle.shape(Tensor([2404],"float32"), )
paddle.shape(Tensor([2405],"float32"), )
paddle.shape(Tensor([2406],"float32"), )
paddle.shape(Tensor([2407],"float32"), )
paddle.shape(Tensor([2408],"float32"), )
paddle.shape(Tensor([2409],"float32"), )
paddle.shape(Tensor([2410],"float32"), )
paddle.shape(Tensor([2411],"float32"), )
paddle.shape(Tensor([2412],"float32"), )
paddle.shape(Tensor([2413],"float32"), )
paddle.shape(Tensor([2414],"float32"), )
paddle.shape(Tensor([2415],"float32"), )
paddle.shape(Tensor([2416],"float32"), )
paddle.shape(Tensor([2417],"float32"), )
paddle.shape(Tensor([2418],"float32"), )
paddle.shape(Tensor([2419],"float32"), )
paddle.shape(Tensor([2420],"float32"), )
paddle.shape(Tensor([2421],"float32"), )
paddle.shape(Tensor([2422],"float32"), )
paddle.shape(Tensor([2423],"float32"), )
paddle.shape(Tensor([2424],"float32"), )
paddle.shape(Tensor([2425],"float32"), )
paddle.shape(Tensor([2426],"float32"), )
paddle.shape(Tensor([2427],"float32"), )
paddle.shape(Tensor([2428],"float32"), )
paddle.shape(Tensor([2429],"float32"), )
paddle.shape(Tensor([2430],"float32"), )
paddle.shape(Tensor([2431],"float32"), )
paddle.shape(Tensor([2432],"float32"), )
paddle.shape(Tensor([2433],"float32"), )
paddle.shape(Tensor([2434],"float32"), )
paddle.shape(Tensor([2435],"float32"), )
paddle.shape(Tensor([2436],"float32"), )
paddle.shape(Tensor([2437],"float32"), )
paddle.shape(Tensor([2438],"float32"), )
paddle.shape(Tensor([2439],"float32"), )
paddle.shape(Tensor([2440],"float32"), )
paddle.shape(Tensor([2441],"float32"), )
paddle.shape(Tensor([2442],"float32"), )
paddle.shape(Tensor([2443],"float32"), )
paddle.shape(Tensor([2444],"float32"), )
paddle.shape(Tensor([2445],"float32"), )
paddle.shape(Tensor([2446],"float32"), )
paddle.shape(Tensor([2447],"float32"), )
paddle.shape(Tensor([2448],"float32"), )
paddle.shape(Tensor([2449],"float32"), )
paddle.shape(Tensor([2450],"float32"), )
paddle.shape(Tensor([2451],"float32"), )
paddle.shape(Tensor([2452],"float32"), )
paddle.shape(Tensor([2453],"float32"), )
paddle.shape(Tensor([2454],"float32"), )
paddle.shape(Tensor([245520, 80],"float16"), )
paddle.shape(Tensor([245520, 80],"float32"), )
paddle.shape(Tensor([2455],"float32"), )
paddle.shape(Tensor([2456],"float32"), )
paddle.shape(Tensor([2457],"float32"), )
paddle.shape(Tensor([2458],"float32"), )
paddle.shape(Tensor([2459],"float32"), )
paddle.shape(Tensor([2460],"float32"), )
paddle.shape(Tensor([2461],"float32"), )
paddle.shape(Tensor([2462],"float32"), )
paddle.shape(Tensor([2463],"float32"), )
paddle.shape(Tensor([2464],"float32"), )
paddle.shape(Tensor([2465],"float32"), )
paddle.shape(Tensor([2466],"float32"), )
paddle.shape(Tensor([2467],"float32"), )
paddle.shape(Tensor([2468],"float32"), )
paddle.shape(Tensor([2469],"float32"), )
paddle.shape(Tensor([2470],"float32"), )
paddle.shape(Tensor([2471],"float32"), )
paddle.shape(Tensor([2472],"float32"), )
paddle.shape(Tensor([2473],"float32"), )
paddle.shape(Tensor([2474],"float32"), )
paddle.shape(Tensor([2475],"float32"), )
paddle.shape(Tensor([2476],"float32"), )
paddle.shape(Tensor([2477],"float32"), )
paddle.shape(Tensor([2478],"float32"), )
paddle.shape(Tensor([2479],"float32"), )
paddle.shape(Tensor([2480],"float32"), )
paddle.shape(Tensor([2481],"float32"), )
paddle.shape(Tensor([2482],"float32"), )
paddle.shape(Tensor([2483],"float32"), )
paddle.shape(Tensor([2484],"float32"), )
paddle.shape(Tensor([2485],"float32"), )
paddle.shape(Tensor([2486],"float32"), )
paddle.shape(Tensor([2487],"float32"), )
paddle.shape(Tensor([2488],"float32"), )
paddle.shape(Tensor([2489],"float32"), )
paddle.shape(Tensor([2490],"float32"), )
paddle.shape(Tensor([2491],"float32"), )
paddle.shape(Tensor([2492],"float32"), )
paddle.shape(Tensor([2493],"float32"), )
paddle.shape(Tensor([2494],"float32"), )
paddle.shape(Tensor([2495],"float32"), )
paddle.shape(Tensor([2496],"float32"), )
paddle.shape(Tensor([2497],"float32"), )
paddle.shape(Tensor([2498],"float32"), )
paddle.shape(Tensor([2499],"float32"), )
paddle.shape(Tensor([25, 4],"float32"), )
paddle.shape(Tensor([2500],"float32"), )
paddle.shape(Tensor([2501],"float32"), )
paddle.shape(Tensor([2502],"float32"), )
paddle.shape(Tensor([2503],"float32"), )
paddle.shape(Tensor([2504],"float32"), )
paddle.shape(Tensor([2505],"float32"), )
paddle.shape(Tensor([2506],"float32"), )
paddle.shape(Tensor([2507],"float32"), )
paddle.shape(Tensor([2508],"float32"), )
paddle.shape(Tensor([2509],"float32"), )
paddle.shape(Tensor([2510],"float32"), )
paddle.shape(Tensor([2511],"float32"), )
paddle.shape(Tensor([2512],"float32"), )
paddle.shape(Tensor([2513],"float32"), )
paddle.shape(Tensor([2514],"float32"), )
paddle.shape(Tensor([2515],"float32"), )
paddle.shape(Tensor([2516],"float32"), )
paddle.shape(Tensor([2517],"float32"), )
paddle.shape(Tensor([2518],"float32"), )
paddle.shape(Tensor([2519],"float32"), )
paddle.shape(Tensor([2520],"float32"), )
paddle.shape(Tensor([2521],"float32"), )
paddle.shape(Tensor([2522],"float32"), )
paddle.shape(Tensor([2523],"float32"), )
paddle.shape(Tensor([2524],"float32"), )
paddle.shape(Tensor([2525],"float32"), )
paddle.shape(Tensor([2526],"float32"), )
paddle.shape(Tensor([2527],"float32"), )
paddle.shape(Tensor([2528],"float32"), )
paddle.shape(Tensor([2529],"float32"), )
paddle.shape(Tensor([2530],"float32"), )
paddle.shape(Tensor([2531],"float32"), )
paddle.shape(Tensor([2532],"float32"), )
paddle.shape(Tensor([2533],"float32"), )
paddle.shape(Tensor([2534],"float32"), )
paddle.shape(Tensor([2535],"float32"), )
paddle.shape(Tensor([2536],"float32"), )
paddle.shape(Tensor([2537],"float32"), )
paddle.shape(Tensor([2538],"float32"), )
paddle.shape(Tensor([2539],"float32"), )
paddle.shape(Tensor([2540],"float32"), )
paddle.shape(Tensor([2541],"float32"), )
paddle.shape(Tensor([2542],"float32"), )
paddle.shape(Tensor([2543],"float32"), )
paddle.shape(Tensor([2544],"float32"), )
paddle.shape(Tensor([2545],"float32"), )
paddle.shape(Tensor([2546],"float32"), )
paddle.shape(Tensor([2547],"float32"), )
paddle.shape(Tensor([2548],"float32"), )
paddle.shape(Tensor([2549],"float32"), )
paddle.shape(Tensor([2550],"float32"), )
paddle.shape(Tensor([2551],"float32"), )
paddle.shape(Tensor([2552],"float32"), )
paddle.shape(Tensor([2553],"float32"), )
paddle.shape(Tensor([2554],"float32"), )
paddle.shape(Tensor([2555],"float32"), )
paddle.shape(Tensor([2556],"float32"), )
paddle.shape(Tensor([2557],"float32"), )
paddle.shape(Tensor([2558],"float32"), )
paddle.shape(Tensor([2559],"float32"), )
paddle.shape(Tensor([2560],"float32"), )
paddle.shape(Tensor([2561],"float32"), )
paddle.shape(Tensor([2562],"float32"), )
paddle.shape(Tensor([2563],"float32"), )
paddle.shape(Tensor([2564],"float32"), )
paddle.shape(Tensor([2565],"float32"), )
paddle.shape(Tensor([2566],"float32"), )
paddle.shape(Tensor([2567],"float32"), )
paddle.shape(Tensor([2568],"float32"), )
paddle.shape(Tensor([2569],"float32"), )
paddle.shape(Tensor([2570],"float32"), )
paddle.shape(Tensor([2571],"float32"), )
paddle.shape(Tensor([2572],"float32"), )
paddle.shape(Tensor([2573],"float32"), )
paddle.shape(Tensor([2574],"float32"), )
paddle.shape(Tensor([2575],"float32"), )
paddle.shape(Tensor([2576],"float32"), )
paddle.shape(Tensor([2577],"float32"), )
paddle.shape(Tensor([2578],"float32"), )
paddle.shape(Tensor([2579],"float32"), )
paddle.shape(Tensor([2580],"float32"), )
paddle.shape(Tensor([2581],"float32"), )
paddle.shape(Tensor([2582],"float32"), )
paddle.shape(Tensor([2583],"float32"), )
paddle.shape(Tensor([2584],"float32"), )
paddle.shape(Tensor([2585],"float32"), )
paddle.shape(Tensor([2586],"float32"), )
paddle.shape(Tensor([2587],"float32"), )
paddle.shape(Tensor([2588],"float32"), )
paddle.shape(Tensor([2589],"float32"), )
paddle.shape(Tensor([2590],"float32"), )
paddle.shape(Tensor([2591],"float32"), )
paddle.shape(Tensor([2592],"float32"), )
paddle.shape(Tensor([2593],"float32"), )
paddle.shape(Tensor([2594],"float32"), )
paddle.shape(Tensor([2595],"float32"), )
paddle.shape(Tensor([2596],"float32"), )
paddle.shape(Tensor([2597],"float32"), )
paddle.shape(Tensor([2598],"float32"), )
paddle.shape(Tensor([2599],"float32"), )
paddle.shape(Tensor([25],"int64"), )
paddle.shape(Tensor([26, 4],"float32"), )
paddle.shape(Tensor([2600],"float32"), )
paddle.shape(Tensor([2601],"float32"), )
paddle.shape(Tensor([2602],"float32"), )
paddle.shape(Tensor([2603],"float32"), )
paddle.shape(Tensor([2604],"float32"), )
paddle.shape(Tensor([2605],"float32"), )
paddle.shape(Tensor([2606],"float32"), )
paddle.shape(Tensor([2607],"float32"), )
paddle.shape(Tensor([2608],"float32"), )
paddle.shape(Tensor([2609],"float32"), )
paddle.shape(Tensor([2610],"float32"), )
paddle.shape(Tensor([2611],"float32"), )
paddle.shape(Tensor([2612],"float32"), )
paddle.shape(Tensor([2613],"float32"), )
paddle.shape(Tensor([2614],"float32"), )
paddle.shape(Tensor([2615],"float32"), )
paddle.shape(Tensor([2616],"float32"), )
paddle.shape(Tensor([2617],"float32"), )
paddle.shape(Tensor([2618],"float32"), )
paddle.shape(Tensor([2619],"float32"), )
paddle.shape(Tensor([2620],"float32"), )
paddle.shape(Tensor([2621],"float32"), )
paddle.shape(Tensor([2622],"float32"), )
paddle.shape(Tensor([2623],"float32"), )
paddle.shape(Tensor([2624],"float32"), )
paddle.shape(Tensor([2625],"float32"), )
paddle.shape(Tensor([2626],"float32"), )
paddle.shape(Tensor([2627],"float32"), )
paddle.shape(Tensor([2628],"float32"), )
paddle.shape(Tensor([2629],"float32"), )
paddle.shape(Tensor([2630],"float32"), )
paddle.shape(Tensor([2631],"float32"), )
paddle.shape(Tensor([2632],"float32"), )
paddle.shape(Tensor([2633],"float32"), )
paddle.shape(Tensor([2634],"float32"), )
paddle.shape(Tensor([2635],"float32"), )
paddle.shape(Tensor([2636],"float32"), )
paddle.shape(Tensor([2637],"float32"), )
paddle.shape(Tensor([2638],"float32"), )
paddle.shape(Tensor([2639],"float32"), )
paddle.shape(Tensor([2640],"float32"), )
paddle.shape(Tensor([2641],"float32"), )
paddle.shape(Tensor([2642],"float32"), )
paddle.shape(Tensor([2643],"float32"), )
paddle.shape(Tensor([2644],"float32"), )
paddle.shape(Tensor([2645],"float32"), )
paddle.shape(Tensor([2646],"float32"), )
paddle.shape(Tensor([2647],"float32"), )
paddle.shape(Tensor([2648],"float32"), )
paddle.shape(Tensor([2649],"float32"), )
paddle.shape(Tensor([2650],"float32"), )
paddle.shape(Tensor([2651],"float32"), )
paddle.shape(Tensor([2652],"float32"), )
paddle.shape(Tensor([2653],"float32"), )
paddle.shape(Tensor([2654],"float32"), )
paddle.shape(Tensor([2655],"float32"), )
paddle.shape(Tensor([2656],"float32"), )
paddle.shape(Tensor([2657],"float32"), )
paddle.shape(Tensor([2658],"float32"), )
paddle.shape(Tensor([2659],"float32"), )
paddle.shape(Tensor([2660],"float32"), )
paddle.shape(Tensor([2661],"float32"), )
paddle.shape(Tensor([2662],"float32"), )
paddle.shape(Tensor([2663],"float32"), )
paddle.shape(Tensor([2664],"float32"), )
paddle.shape(Tensor([2665],"float32"), )
paddle.shape(Tensor([2666],"float32"), )
paddle.shape(Tensor([2667],"float32"), )
paddle.shape(Tensor([2668],"float32"), )
paddle.shape(Tensor([2669],"float32"), )
paddle.shape(Tensor([2670],"float32"), )
paddle.shape(Tensor([2671],"float32"), )
paddle.shape(Tensor([2672],"float32"), )
paddle.shape(Tensor([2673],"float32"), )
paddle.shape(Tensor([2674],"float32"), )
paddle.shape(Tensor([2675],"float32"), )
paddle.shape(Tensor([2676],"float32"), )
paddle.shape(Tensor([2677],"float32"), )
paddle.shape(Tensor([2678],"float32"), )
paddle.shape(Tensor([2679],"float32"), )
paddle.shape(Tensor([2680],"float32"), )
paddle.shape(Tensor([2681],"float32"), )
paddle.shape(Tensor([2682],"float32"), )
paddle.shape(Tensor([2683],"float32"), )
paddle.shape(Tensor([2684],"float32"), )
paddle.shape(Tensor([2685],"float32"), )
paddle.shape(Tensor([2686],"float32"), )
paddle.shape(Tensor([2687],"float32"), )
paddle.shape(Tensor([2688],"float32"), )
paddle.shape(Tensor([2689],"float32"), )
paddle.shape(Tensor([2690],"float32"), )
paddle.shape(Tensor([2691],"float32"), )
paddle.shape(Tensor([2692],"float32"), )
paddle.shape(Tensor([2693],"float32"), )
paddle.shape(Tensor([2694],"float32"), )
paddle.shape(Tensor([2695],"float32"), )
paddle.shape(Tensor([2696],"float32"), )
paddle.shape(Tensor([2697],"float32"), )
paddle.shape(Tensor([2698],"float32"), )
paddle.shape(Tensor([2699],"float32"), )
paddle.shape(Tensor([27, 4],"float32"), )
paddle.shape(Tensor([270072, 80],"float16"), )
paddle.shape(Tensor([270072, 80],"float32"), )
paddle.shape(Tensor([2700],"float32"), )
paddle.shape(Tensor([2701],"float32"), )
paddle.shape(Tensor([2702],"float32"), )
paddle.shape(Tensor([2703],"float32"), )
paddle.shape(Tensor([2704],"float32"), )
paddle.shape(Tensor([2705],"float32"), )
paddle.shape(Tensor([2706],"float32"), )
paddle.shape(Tensor([2707],"float32"), )
paddle.shape(Tensor([2708],"float32"), )
paddle.shape(Tensor([2709],"float32"), )
paddle.shape(Tensor([2710],"float32"), )
paddle.shape(Tensor([2711],"float32"), )
paddle.shape(Tensor([2712],"float32"), )
paddle.shape(Tensor([2713],"float32"), )
paddle.shape(Tensor([2714],"float32"), )
paddle.shape(Tensor([2715],"float32"), )
paddle.shape(Tensor([2716],"float32"), )
paddle.shape(Tensor([2717],"float32"), )
paddle.shape(Tensor([2718],"float32"), )
paddle.shape(Tensor([2719],"float32"), )
paddle.shape(Tensor([2720],"float32"), )
paddle.shape(Tensor([2721],"float32"), )
paddle.shape(Tensor([2722],"float32"), )
paddle.shape(Tensor([2723],"float32"), )
paddle.shape(Tensor([2724],"float32"), )
paddle.shape(Tensor([2725],"float32"), )
paddle.shape(Tensor([2726],"float32"), )
paddle.shape(Tensor([2727],"float32"), )
paddle.shape(Tensor([272800, 80],"float16"), )
paddle.shape(Tensor([272800, 80],"float32"), )
paddle.shape(Tensor([2728],"float32"), )
paddle.shape(Tensor([2729],"float32"), )
paddle.shape(Tensor([2730],"float32"), )
paddle.shape(Tensor([2731],"float32"), )
paddle.shape(Tensor([2732],"float32"), )
paddle.shape(Tensor([2733],"float32"), )
paddle.shape(Tensor([2734],"float32"), )
paddle.shape(Tensor([2735],"float32"), )
paddle.shape(Tensor([2736],"float32"), )
paddle.shape(Tensor([2737],"float32"), )
paddle.shape(Tensor([2738],"float32"), )
paddle.shape(Tensor([2739],"float32"), )
paddle.shape(Tensor([2740],"float32"), )
paddle.shape(Tensor([2741],"float32"), )
paddle.shape(Tensor([2742],"float32"), )
paddle.shape(Tensor([2743],"float32"), )
paddle.shape(Tensor([2744],"float32"), )
paddle.shape(Tensor([2745],"float32"), )
paddle.shape(Tensor([2746],"float32"), )
paddle.shape(Tensor([2747],"float32"), )
paddle.shape(Tensor([2748],"float32"), )
paddle.shape(Tensor([2749],"float32"), )
paddle.shape(Tensor([2750],"float32"), )
paddle.shape(Tensor([2751],"float32"), )
paddle.shape(Tensor([2752],"float32"), )
paddle.shape(Tensor([2753],"float32"), )
paddle.shape(Tensor([2754],"float32"), )
paddle.shape(Tensor([2755],"float32"), )
paddle.shape(Tensor([2756],"float32"), )
paddle.shape(Tensor([2757],"float32"), )
paddle.shape(Tensor([2758],"float32"), )
paddle.shape(Tensor([2759],"float32"), )
paddle.shape(Tensor([2760],"float32"), )
paddle.shape(Tensor([2761],"float32"), )
paddle.shape(Tensor([2762],"float32"), )
paddle.shape(Tensor([2763],"float32"), )
paddle.shape(Tensor([27648, 4],"float32"), )
paddle.shape(Tensor([2764],"float32"), )
paddle.shape(Tensor([2765],"float32"), )
paddle.shape(Tensor([2766],"float32"), )
paddle.shape(Tensor([2767],"float32"), )
paddle.shape(Tensor([2768],"float32"), )
paddle.shape(Tensor([2769],"float32"), )
paddle.shape(Tensor([2770],"float32"), )
paddle.shape(Tensor([2771],"float32"), )
paddle.shape(Tensor([2772],"float32"), )
paddle.shape(Tensor([2773],"float32"), )
paddle.shape(Tensor([2774],"float32"), )
paddle.shape(Tensor([2775],"float32"), )
paddle.shape(Tensor([2776],"float32"), )
paddle.shape(Tensor([2777],"float32"), )
paddle.shape(Tensor([2778],"float32"), )
paddle.shape(Tensor([2779],"float32"), )
paddle.shape(Tensor([2780],"float32"), )
paddle.shape(Tensor([2781],"float32"), )
paddle.shape(Tensor([2782],"float32"), )
paddle.shape(Tensor([2783],"float32"), )
paddle.shape(Tensor([2784],"float32"), )
paddle.shape(Tensor([2785],"float32"), )
paddle.shape(Tensor([2786],"float32"), )
paddle.shape(Tensor([2787],"float32"), )
paddle.shape(Tensor([2788],"float32"), )
paddle.shape(Tensor([2789],"float32"), )
paddle.shape(Tensor([2790],"float32"), )
paddle.shape(Tensor([2791],"float32"), )
paddle.shape(Tensor([2792],"float32"), )
paddle.shape(Tensor([2793],"float32"), )
paddle.shape(Tensor([2794],"float32"), )
paddle.shape(Tensor([2795],"float32"), )
paddle.shape(Tensor([2796],"float32"), )
paddle.shape(Tensor([2797],"float32"), )
paddle.shape(Tensor([2798],"float32"), )
paddle.shape(Tensor([2799],"float32"), )
paddle.shape(Tensor([28, 4],"float32"), )
paddle.shape(Tensor([2800],"float32"), )
paddle.shape(Tensor([2801],"float32"), )
paddle.shape(Tensor([2802],"float32"), )
paddle.shape(Tensor([2803],"float32"), )
paddle.shape(Tensor([2804],"float32"), )
paddle.shape(Tensor([2805],"float32"), )
paddle.shape(Tensor([2806],"float32"), )
paddle.shape(Tensor([2807],"float32"), )
paddle.shape(Tensor([2808],"float32"), )
paddle.shape(Tensor([2809],"float32"), )
paddle.shape(Tensor([2810],"float32"), )
paddle.shape(Tensor([2811],"float32"), )
paddle.shape(Tensor([2812],"float32"), )
paddle.shape(Tensor([2813],"float32"), )
paddle.shape(Tensor([2814],"float32"), )
paddle.shape(Tensor([2815],"float32"), )
paddle.shape(Tensor([2816],"float32"), )
paddle.shape(Tensor([2817],"float32"), )
paddle.shape(Tensor([2818],"float32"), )
paddle.shape(Tensor([2819],"float32"), )
paddle.shape(Tensor([2820],"float32"), )
paddle.shape(Tensor([2821],"float32"), )
paddle.shape(Tensor([2822],"float32"), )
paddle.shape(Tensor([2823],"float32"), )
paddle.shape(Tensor([2824],"float32"), )
paddle.shape(Tensor([2825],"float32"), )
paddle.shape(Tensor([2826],"float32"), )
paddle.shape(Tensor([2827],"float32"), )
paddle.shape(Tensor([2828],"float32"), )
paddle.shape(Tensor([2829],"float32"), )
paddle.shape(Tensor([2830],"float32"), )
paddle.shape(Tensor([2831],"float32"), )
paddle.shape(Tensor([2832],"float32"), )
paddle.shape(Tensor([2833],"float32"), )
paddle.shape(Tensor([2834],"float32"), )
paddle.shape(Tensor([2835],"float32"), )
paddle.shape(Tensor([2836],"float32"), )
paddle.shape(Tensor([2837],"float32"), )
paddle.shape(Tensor([2838],"float32"), )
paddle.shape(Tensor([2839],"float32"), )
paddle.shape(Tensor([2840],"float32"), )
paddle.shape(Tensor([2841],"float32"), )
paddle.shape(Tensor([2842],"float32"), )
paddle.shape(Tensor([2843],"float32"), )
paddle.shape(Tensor([2844],"float32"), )
paddle.shape(Tensor([2845],"float32"), )
paddle.shape(Tensor([2846],"float32"), )
paddle.shape(Tensor([2847],"float32"), )
paddle.shape(Tensor([2848],"float32"), )
paddle.shape(Tensor([2849],"float32"), )
paddle.shape(Tensor([2850],"float32"), )
paddle.shape(Tensor([2851],"float32"), )
paddle.shape(Tensor([2852],"float32"), )
paddle.shape(Tensor([2853],"float32"), )
paddle.shape(Tensor([2854],"float32"), )
paddle.shape(Tensor([2855],"float32"), )
paddle.shape(Tensor([2856],"float32"), )
paddle.shape(Tensor([2857],"float32"), )
paddle.shape(Tensor([2858],"float32"), )
paddle.shape(Tensor([2859],"float32"), )
paddle.shape(Tensor([2860],"float32"), )
paddle.shape(Tensor([2861],"float32"), )
paddle.shape(Tensor([2862],"float32"), )
paddle.shape(Tensor([2863],"float32"), )
paddle.shape(Tensor([2864],"float32"), )
paddle.shape(Tensor([2865],"float32"), )
paddle.shape(Tensor([2866],"float32"), )
paddle.shape(Tensor([2867],"float32"), )
paddle.shape(Tensor([2868],"float32"), )
paddle.shape(Tensor([2869],"float32"), )
paddle.shape(Tensor([2870],"float32"), )
paddle.shape(Tensor([2871],"float32"), )
paddle.shape(Tensor([2872],"float32"), )
paddle.shape(Tensor([2873],"float32"), )
paddle.shape(Tensor([2874],"float32"), )
paddle.shape(Tensor([2875],"float32"), )
paddle.shape(Tensor([2876],"float32"), )
paddle.shape(Tensor([2877],"float32"), )
paddle.shape(Tensor([2878],"float32"), )
paddle.shape(Tensor([2879],"float32"), )
paddle.shape(Tensor([28800, 4],"float32"), )
paddle.shape(Tensor([2880],"float32"), )
paddle.shape(Tensor([2881],"float32"), )
paddle.shape(Tensor([2882],"float32"), )
paddle.shape(Tensor([2883],"float32"), )
paddle.shape(Tensor([2884],"float32"), )
paddle.shape(Tensor([2885],"float32"), )
paddle.shape(Tensor([2886],"float32"), )
paddle.shape(Tensor([2887],"float32"), )
paddle.shape(Tensor([2888],"float32"), )
paddle.shape(Tensor([2889],"float32"), )
paddle.shape(Tensor([2890],"float32"), )
paddle.shape(Tensor([2891],"float32"), )
paddle.shape(Tensor([2892],"float32"), )
paddle.shape(Tensor([2893],"float32"), )
paddle.shape(Tensor([2894],"float32"), )
paddle.shape(Tensor([2895],"float32"), )
paddle.shape(Tensor([2896],"float32"), )
paddle.shape(Tensor([2897],"float32"), )
paddle.shape(Tensor([2898],"float32"), )
paddle.shape(Tensor([2899],"float32"), )
paddle.shape(Tensor([28],"int64"), )
paddle.shape(Tensor([29, 4],"float32"), )
paddle.shape(Tensor([2900],"float32"), )
paddle.shape(Tensor([2901],"float32"), )
paddle.shape(Tensor([2902],"float32"), )
paddle.shape(Tensor([2903],"float32"), )
paddle.shape(Tensor([2904],"float32"), )
paddle.shape(Tensor([2905],"float32"), )
paddle.shape(Tensor([2906],"float32"), )
paddle.shape(Tensor([2907],"float32"), )
paddle.shape(Tensor([2908],"float32"), )
paddle.shape(Tensor([2909],"float32"), )
paddle.shape(Tensor([2910],"float32"), )
paddle.shape(Tensor([2911],"float32"), )
paddle.shape(Tensor([2912],"float32"), )
paddle.shape(Tensor([2913],"float32"), )
paddle.shape(Tensor([2914],"float32"), )
paddle.shape(Tensor([2915],"float32"), )
paddle.shape(Tensor([2916],"float32"), )
paddle.shape(Tensor([2917],"float32"), )
paddle.shape(Tensor([2918],"float32"), )
paddle.shape(Tensor([2919],"float32"), )
paddle.shape(Tensor([2920],"float32"), )
paddle.shape(Tensor([2921],"float32"), )
paddle.shape(Tensor([2922],"float32"), )
paddle.shape(Tensor([2923],"float32"), )
paddle.shape(Tensor([2924],"float32"), )
paddle.shape(Tensor([2925],"float32"), )
paddle.shape(Tensor([2926],"float32"), )
paddle.shape(Tensor([2927],"float32"), )
paddle.shape(Tensor([2928],"float32"), )
paddle.shape(Tensor([2929],"float32"), )
paddle.shape(Tensor([2930],"float32"), )
paddle.shape(Tensor([2931],"float32"), )
paddle.shape(Tensor([2932],"float32"), )
paddle.shape(Tensor([2933],"float32"), )
paddle.shape(Tensor([2934],"float32"), )
paddle.shape(Tensor([2935],"float32"), )
paddle.shape(Tensor([2936],"float32"), )
paddle.shape(Tensor([2937],"float32"), )
paddle.shape(Tensor([2938],"float32"), )
paddle.shape(Tensor([2939],"float32"), )
paddle.shape(Tensor([2940],"float32"), )
paddle.shape(Tensor([2941],"float32"), )
paddle.shape(Tensor([2942],"float32"), )
paddle.shape(Tensor([2943],"float32"), )
paddle.shape(Tensor([2944],"float32"), )
paddle.shape(Tensor([2945],"float32"), )
paddle.shape(Tensor([2946],"float32"), )
paddle.shape(Tensor([2947],"float32"), )
paddle.shape(Tensor([2948],"float32"), )
paddle.shape(Tensor([2949],"float32"), )
paddle.shape(Tensor([2950],"float32"), )
paddle.shape(Tensor([2951],"float32"), )
paddle.shape(Tensor([2952],"float32"), )
paddle.shape(Tensor([2953],"float32"), )
paddle.shape(Tensor([2954],"float32"), )
paddle.shape(Tensor([2955],"float32"), )
paddle.shape(Tensor([2956],"float32"), )
paddle.shape(Tensor([2957],"float32"), )
paddle.shape(Tensor([2958],"float32"), )
paddle.shape(Tensor([2959],"float32"), )
paddle.shape(Tensor([2960],"float32"), )
paddle.shape(Tensor([2961],"float32"), )
paddle.shape(Tensor([2962],"float32"), )
paddle.shape(Tensor([2963],"float32"), )
paddle.shape(Tensor([2964],"float32"), )
paddle.shape(Tensor([2965],"float32"), )
paddle.shape(Tensor([2966],"float32"), )
paddle.shape(Tensor([2967],"float32"), )
paddle.shape(Tensor([2968],"float32"), )
paddle.shape(Tensor([2969],"float32"), )
paddle.shape(Tensor([2970],"float32"), )
paddle.shape(Tensor([2971],"float32"), )
paddle.shape(Tensor([2972],"float32"), )
paddle.shape(Tensor([2973],"float32"), )
paddle.shape(Tensor([2974],"float32"), )
paddle.shape(Tensor([2975],"float32"), )
paddle.shape(Tensor([2976],"float32"), )
paddle.shape(Tensor([2977],"float32"), )
paddle.shape(Tensor([2978],"float32"), )
paddle.shape(Tensor([2979],"float32"), )
paddle.shape(Tensor([2980],"float32"), )
paddle.shape(Tensor([2981],"float32"), )
paddle.shape(Tensor([2982],"float32"), )
paddle.shape(Tensor([2983],"float32"), )
paddle.shape(Tensor([2984],"float32"), )
paddle.shape(Tensor([2985],"float32"), )
paddle.shape(Tensor([2986],"float32"), )
paddle.shape(Tensor([2987],"float32"), )
paddle.shape(Tensor([2988],"float32"), )
paddle.shape(Tensor([2989],"float32"), )
paddle.shape(Tensor([2990],"float32"), )
paddle.shape(Tensor([2991],"float32"), )
paddle.shape(Tensor([2992],"float32"), )
paddle.shape(Tensor([2993],"float32"), )
paddle.shape(Tensor([2994],"float32"), )
paddle.shape(Tensor([2995],"float32"), )
paddle.shape(Tensor([2996],"float32"), )
paddle.shape(Tensor([2997],"float32"), )
paddle.shape(Tensor([2998],"float32"), )
paddle.shape(Tensor([2999],"float32"), )
paddle.shape(Tensor([2],"float64"), )
paddle.shape(Tensor([3, 0],"float64"), )
paddle.shape(Tensor([3, 1, 512],"float32"), )
paddle.shape(Tensor([3, 10, 512],"float32"), )
paddle.shape(Tensor([3, 100, 512],"float32"), )
paddle.shape(Tensor([3, 101, 512],"float32"), )
paddle.shape(Tensor([3, 102, 512],"float32"), )
paddle.shape(Tensor([3, 103, 512],"float32"), )
paddle.shape(Tensor([3, 104, 512],"float32"), )
paddle.shape(Tensor([3, 105, 512],"float32"), )
paddle.shape(Tensor([3, 106, 512],"float32"), )
paddle.shape(Tensor([3, 107, 512],"float32"), )
paddle.shape(Tensor([3, 108, 512],"float32"), )
paddle.shape(Tensor([3, 109, 512],"float32"), )
paddle.shape(Tensor([3, 11, 512],"float32"), )
paddle.shape(Tensor([3, 110, 512],"float32"), )
paddle.shape(Tensor([3, 111, 512],"float32"), )
paddle.shape(Tensor([3, 112, 512],"float32"), )
paddle.shape(Tensor([3, 113, 512],"float32"), )
paddle.shape(Tensor([3, 114, 512],"float32"), )
paddle.shape(Tensor([3, 115, 512],"float32"), )
paddle.shape(Tensor([3, 116, 512],"float32"), )
paddle.shape(Tensor([3, 117, 512],"float32"), )
paddle.shape(Tensor([3, 118, 512],"float32"), )
paddle.shape(Tensor([3, 119, 512],"float32"), )
paddle.shape(Tensor([3, 12, 512],"float32"), )
paddle.shape(Tensor([3, 120, 512],"float32"), )
paddle.shape(Tensor([3, 121, 512],"float32"), )
paddle.shape(Tensor([3, 122, 512],"float32"), )
paddle.shape(Tensor([3, 123, 512],"float32"), )
paddle.shape(Tensor([3, 124, 512],"float32"), )
paddle.shape(Tensor([3, 125, 512],"float32"), )
paddle.shape(Tensor([3, 126, 512],"float32"), )
paddle.shape(Tensor([3, 127, 512],"float32"), )
paddle.shape(Tensor([3, 128, 512],"float32"), )
paddle.shape(Tensor([3, 129, 512],"float32"), )
paddle.shape(Tensor([3, 13, 512],"float32"), )
paddle.shape(Tensor([3, 130, 512],"float32"), )
paddle.shape(Tensor([3, 131, 512],"float32"), )
paddle.shape(Tensor([3, 132, 512],"float32"), )
paddle.shape(Tensor([3, 133, 512],"float32"), )
paddle.shape(Tensor([3, 134, 512],"float32"), )
paddle.shape(Tensor([3, 135, 512],"float32"), )
paddle.shape(Tensor([3, 136, 512],"float32"), )
paddle.shape(Tensor([3, 137, 512],"float32"), )
paddle.shape(Tensor([3, 138, 512],"float32"), )
paddle.shape(Tensor([3, 139, 512],"float32"), )
paddle.shape(Tensor([3, 14, 512],"float32"), )
paddle.shape(Tensor([3, 140, 512],"float32"), )
paddle.shape(Tensor([3, 141, 512],"float32"), )
paddle.shape(Tensor([3, 142, 512],"float32"), )
paddle.shape(Tensor([3, 143, 512],"float32"), )
paddle.shape(Tensor([3, 144, 512],"float32"), )
paddle.shape(Tensor([3, 145, 512],"float32"), )
paddle.shape(Tensor([3, 146, 512],"float32"), )
paddle.shape(Tensor([3, 147, 512],"float32"), )
paddle.shape(Tensor([3, 148, 512],"float32"), )
paddle.shape(Tensor([3, 149, 512],"float32"), )
paddle.shape(Tensor([3, 15, 512],"float32"), )
paddle.shape(Tensor([3, 150, 512],"float32"), )
paddle.shape(Tensor([3, 151, 512],"float32"), )
paddle.shape(Tensor([3, 152, 512],"float32"), )
paddle.shape(Tensor([3, 153, 512],"float32"), )
paddle.shape(Tensor([3, 154, 512],"float32"), )
paddle.shape(Tensor([3, 155, 512],"float32"), )
paddle.shape(Tensor([3, 156, 512],"float32"), )
paddle.shape(Tensor([3, 157, 512],"float32"), )
paddle.shape(Tensor([3, 158, 512],"float32"), )
paddle.shape(Tensor([3, 159, 512],"float32"), )
paddle.shape(Tensor([3, 16, 512],"float32"), )
paddle.shape(Tensor([3, 160, 512],"float32"), )
paddle.shape(Tensor([3, 161, 512],"float32"), )
paddle.shape(Tensor([3, 162, 512],"float32"), )
paddle.shape(Tensor([3, 163, 512],"float32"), )
paddle.shape(Tensor([3, 169, 512],"float32"), )
paddle.shape(Tensor([3, 17, 512],"float32"), )
paddle.shape(Tensor([3, 18, 512],"float32"), )
paddle.shape(Tensor([3, 19, 512],"float32"), )
paddle.shape(Tensor([3, 2, 512],"float32"), )
paddle.shape(Tensor([3, 20, 512],"float32"), )
paddle.shape(Tensor([3, 21, 512],"float32"), )
paddle.shape(Tensor([3, 22, 512],"float32"), )
paddle.shape(Tensor([3, 23, 512],"float32"), )
paddle.shape(Tensor([3, 24, 512],"float32"), )
paddle.shape(Tensor([3, 25, 512],"float32"), )
paddle.shape(Tensor([3, 26, 512],"float32"), )
paddle.shape(Tensor([3, 27, 512],"float32"), )
paddle.shape(Tensor([3, 28, 512],"float32"), )
paddle.shape(Tensor([3, 29, 512],"float32"), )
paddle.shape(Tensor([3, 3, 1],"float32"), )
paddle.shape(Tensor([3, 3, 512],"float32"), )
paddle.shape(Tensor([3, 30, 512],"float32"), )
paddle.shape(Tensor([3, 31, 512],"float32"), )
paddle.shape(Tensor([3, 32, 512],"float32"), )
paddle.shape(Tensor([3, 33, 512],"float32"), )
paddle.shape(Tensor([3, 34, 512],"float32"), )
paddle.shape(Tensor([3, 35, 512],"float32"), )
paddle.shape(Tensor([3, 36, 512],"float32"), )
paddle.shape(Tensor([3, 37, 512],"float32"), )
paddle.shape(Tensor([3, 38, 512],"float32"), )
paddle.shape(Tensor([3, 39, 512],"float32"), )
paddle.shape(Tensor([3, 3],"float16"), )
paddle.shape(Tensor([3, 3],"float32"), )
paddle.shape(Tensor([3, 3],"int64"), )
paddle.shape(Tensor([3, 4, 512],"float32"), )
paddle.shape(Tensor([3, 40, 512],"float32"), )
paddle.shape(Tensor([3, 41, 512],"float32"), )
paddle.shape(Tensor([3, 42, 512],"float32"), )
paddle.shape(Tensor([3, 43, 512],"float32"), )
paddle.shape(Tensor([3, 44, 512],"float32"), )
paddle.shape(Tensor([3, 45, 512],"float32"), )
paddle.shape(Tensor([3, 46, 512],"float32"), )
paddle.shape(Tensor([3, 47, 512],"float32"), )
paddle.shape(Tensor([3, 48, 512],"float32"), )
paddle.shape(Tensor([3, 49, 512],"float32"), )
paddle.shape(Tensor([3, 4],"float32"), )
paddle.shape(Tensor([3, 5, 512],"float32"), )
paddle.shape(Tensor([3, 50, 512],"float32"), )
paddle.shape(Tensor([3, 51, 512],"float32"), )
paddle.shape(Tensor([3, 52, 512],"float32"), )
paddle.shape(Tensor([3, 53, 512],"float32"), )
paddle.shape(Tensor([3, 54, 512],"float32"), )
paddle.shape(Tensor([3, 55, 512],"float32"), )
paddle.shape(Tensor([3, 56, 512],"float32"), )
paddle.shape(Tensor([3, 57, 512],"float32"), )
paddle.shape(Tensor([3, 58, 512],"float32"), )
paddle.shape(Tensor([3, 59, 512],"float32"), )
paddle.shape(Tensor([3, 6, 512],"float32"), )
paddle.shape(Tensor([3, 60, 512],"float32"), )
paddle.shape(Tensor([3, 61, 512],"float32"), )
paddle.shape(Tensor([3, 62, 512],"float32"), )
paddle.shape(Tensor([3, 63, 512],"float32"), )
paddle.shape(Tensor([3, 64, 512],"float32"), )
paddle.shape(Tensor([3, 65, 512],"float32"), )
paddle.shape(Tensor([3, 66, 512],"float32"), )
paddle.shape(Tensor([3, 67, 512],"float32"), )
paddle.shape(Tensor([3, 68, 512],"float32"), )
paddle.shape(Tensor([3, 69, 512],"float32"), )
paddle.shape(Tensor([3, 7, 512],"float32"), )
paddle.shape(Tensor([3, 70, 512],"float32"), )
paddle.shape(Tensor([3, 71, 512],"float32"), )
paddle.shape(Tensor([3, 72, 512],"float32"), )
paddle.shape(Tensor([3, 73, 512],"float32"), )
paddle.shape(Tensor([3, 74, 512],"float32"), )
paddle.shape(Tensor([3, 75, 512],"float32"), )
paddle.shape(Tensor([3, 76, 512],"float32"), )
paddle.shape(Tensor([3, 77, 512],"float32"), )
paddle.shape(Tensor([3, 78, 512],"float32"), )
paddle.shape(Tensor([3, 79, 512],"float32"), )
paddle.shape(Tensor([3, 8, 512],"float32"), )
paddle.shape(Tensor([3, 80, 512],"float32"), )
paddle.shape(Tensor([3, 81, 512],"float32"), )
paddle.shape(Tensor([3, 82, 512],"float32"), )
paddle.shape(Tensor([3, 83, 512],"float32"), )
paddle.shape(Tensor([3, 84, 512],"float32"), )
paddle.shape(Tensor([3, 85, 512],"float32"), )
paddle.shape(Tensor([3, 86, 512],"float32"), )
paddle.shape(Tensor([3, 87, 512],"float32"), )
paddle.shape(Tensor([3, 88, 512],"float32"), )
paddle.shape(Tensor([3, 89, 512],"float32"), )
paddle.shape(Tensor([3, 9, 512],"float32"), )
paddle.shape(Tensor([3, 90, 512],"float32"), )
paddle.shape(Tensor([3, 91, 512],"float32"), )
paddle.shape(Tensor([3, 92, 512],"float32"), )
paddle.shape(Tensor([3, 93, 512],"float32"), )
paddle.shape(Tensor([3, 94, 512],"float32"), )
paddle.shape(Tensor([3, 95, 512],"float32"), )
paddle.shape(Tensor([3, 96, 512],"float32"), )
paddle.shape(Tensor([3, 97, 512],"float32"), )
paddle.shape(Tensor([3, 98, 512],"float32"), )
paddle.shape(Tensor([3, 99, 512],"float32"), )
paddle.shape(Tensor([30, 4],"float32"), )
paddle.shape(Tensor([300, 4],"float32"), )
paddle.shape(Tensor([300080, 80],"float16"), )
paddle.shape(Tensor([300080, 80],"float32"), )
paddle.shape(Tensor([3000],"float32"), )
paddle.shape(Tensor([3001],"float32"), )
paddle.shape(Tensor([3002],"float32"), )
paddle.shape(Tensor([3003],"float32"), )
paddle.shape(Tensor([3004],"float32"), )
paddle.shape(Tensor([3005],"float32"), )
paddle.shape(Tensor([3006],"float32"), )
paddle.shape(Tensor([3007],"float32"), )
paddle.shape(Tensor([3008],"float32"), )
paddle.shape(Tensor([3009],"float32"), )
paddle.shape(Tensor([3010],"float32"), )
paddle.shape(Tensor([3011],"float32"), )
paddle.shape(Tensor([3012],"float32"), )
paddle.shape(Tensor([3013],"float32"), )
paddle.shape(Tensor([3014],"float32"), )
paddle.shape(Tensor([3015],"float32"), )
paddle.shape(Tensor([3016],"float32"), )
paddle.shape(Tensor([3017],"float32"), )
paddle.shape(Tensor([3018],"float32"), )
paddle.shape(Tensor([3019],"float32"), )
paddle.shape(Tensor([3020],"float32"), )
paddle.shape(Tensor([3021],"float32"), )
paddle.shape(Tensor([3022],"float32"), )
paddle.shape(Tensor([3023],"float32"), )
paddle.shape(Tensor([3024],"float32"), )
paddle.shape(Tensor([3025],"float32"), )
paddle.shape(Tensor([3026],"float32"), )
paddle.shape(Tensor([3027],"float32"), )
paddle.shape(Tensor([3028],"float32"), )
paddle.shape(Tensor([3030],"float32"), )
paddle.shape(Tensor([3031],"float32"), )
paddle.shape(Tensor([3032],"float32"), )
paddle.shape(Tensor([3033],"float32"), )
paddle.shape(Tensor([3034],"float32"), )
paddle.shape(Tensor([3035],"float32"), )
paddle.shape(Tensor([3036],"float32"), )
paddle.shape(Tensor([3037],"float32"), )
paddle.shape(Tensor([3038],"float32"), )
paddle.shape(Tensor([3039],"float32"), )
paddle.shape(Tensor([3040],"float32"), )
paddle.shape(Tensor([3042],"float32"), )
paddle.shape(Tensor([3043],"float32"), )
paddle.shape(Tensor([3044],"float32"), )
paddle.shape(Tensor([3045],"float32"), )
paddle.shape(Tensor([3046],"float32"), )
paddle.shape(Tensor([3047],"float32"), )
paddle.shape(Tensor([3048],"float32"), )
paddle.shape(Tensor([3049],"float32"), )
paddle.shape(Tensor([3050],"float32"), )
paddle.shape(Tensor([3051],"float32"), )
paddle.shape(Tensor([3052],"float32"), )
paddle.shape(Tensor([3053],"float32"), )
paddle.shape(Tensor([3054],"float32"), )
paddle.shape(Tensor([3055],"float32"), )
paddle.shape(Tensor([3056],"float32"), )
paddle.shape(Tensor([3057],"float32"), )
paddle.shape(Tensor([3058],"float32"), )
paddle.shape(Tensor([3059],"float32"), )
paddle.shape(Tensor([3060],"float32"), )
paddle.shape(Tensor([3061],"float32"), )
paddle.shape(Tensor([3062],"float32"), )
paddle.shape(Tensor([3063],"float32"), )
paddle.shape(Tensor([3064],"float32"), )
paddle.shape(Tensor([3065],"float32"), )
paddle.shape(Tensor([3066],"float32"), )
paddle.shape(Tensor([3067],"float32"), )
paddle.shape(Tensor([3068],"float32"), )
paddle.shape(Tensor([3069],"float32"), )
paddle.shape(Tensor([3070],"float32"), )
paddle.shape(Tensor([3071],"float32"), )
paddle.shape(Tensor([3072],"float32"), )
paddle.shape(Tensor([3073],"float32"), )
paddle.shape(Tensor([3074],"float32"), )
paddle.shape(Tensor([3075],"float32"), )
paddle.shape(Tensor([3076],"float32"), )
paddle.shape(Tensor([3077],"float32"), )
paddle.shape(Tensor([3078],"float32"), )
paddle.shape(Tensor([3079],"float32"), )
paddle.shape(Tensor([3080],"float32"), )
paddle.shape(Tensor([3081],"float32"), )
paddle.shape(Tensor([3082],"float32"), )
paddle.shape(Tensor([3083],"float32"), )
paddle.shape(Tensor([3084],"float32"), )
paddle.shape(Tensor([3085],"float32"), )
paddle.shape(Tensor([3086],"float32"), )
paddle.shape(Tensor([3087],"float32"), )
paddle.shape(Tensor([3088],"float32"), )
paddle.shape(Tensor([3089],"float32"), )
paddle.shape(Tensor([3090],"float32"), )
paddle.shape(Tensor([3092],"float32"), )
paddle.shape(Tensor([3093],"float32"), )
paddle.shape(Tensor([3095],"float32"), )
paddle.shape(Tensor([3096],"float32"), )
paddle.shape(Tensor([3097],"float32"), )
paddle.shape(Tensor([3098],"float32"), )
paddle.shape(Tensor([3099],"float32"), )
paddle.shape(Tensor([31, 4],"float32"), )
paddle.shape(Tensor([3100],"float32"), )
paddle.shape(Tensor([3101],"float32"), )
paddle.shape(Tensor([3102],"float32"), )
paddle.shape(Tensor([3103],"float32"), )
paddle.shape(Tensor([3104],"float32"), )
paddle.shape(Tensor([3105],"float32"), )
paddle.shape(Tensor([3106],"float32"), )
paddle.shape(Tensor([3107],"float32"), )
paddle.shape(Tensor([3108],"float32"), )
paddle.shape(Tensor([3110],"float32"), )
paddle.shape(Tensor([3111],"float32"), )
paddle.shape(Tensor([3113],"float32"), )
paddle.shape(Tensor([3114],"float32"), )
paddle.shape(Tensor([3115],"float32"), )
paddle.shape(Tensor([3116],"float32"), )
paddle.shape(Tensor([3117],"float32"), )
paddle.shape(Tensor([3118],"float32"), )
paddle.shape(Tensor([3119],"float32"), )
paddle.shape(Tensor([3121],"float32"), )
paddle.shape(Tensor([3122],"float32"), )
paddle.shape(Tensor([3123],"float32"), )
paddle.shape(Tensor([3124],"float32"), )
paddle.shape(Tensor([3125],"float32"), )
paddle.shape(Tensor([3126],"float32"), )
paddle.shape(Tensor([3128],"float32"), )
paddle.shape(Tensor([3129],"float32"), )
paddle.shape(Tensor([3130],"float32"), )
paddle.shape(Tensor([3131],"float32"), )
paddle.shape(Tensor([3132],"float32"), )
paddle.shape(Tensor([3133],"float32"), )
paddle.shape(Tensor([3134],"float32"), )
paddle.shape(Tensor([3135],"float32"), )
paddle.shape(Tensor([3136],"float32"), )
paddle.shape(Tensor([3138],"float32"), )
paddle.shape(Tensor([3141],"float32"), )
paddle.shape(Tensor([3142],"float32"), )
paddle.shape(Tensor([3144],"float32"), )
paddle.shape(Tensor([3145],"float32"), )
paddle.shape(Tensor([3146],"float32"), )
paddle.shape(Tensor([3149],"float32"), )
paddle.shape(Tensor([3150],"float32"), )
paddle.shape(Tensor([3151],"float32"), )
paddle.shape(Tensor([3152],"float32"), )
paddle.shape(Tensor([3153],"float32"), )
paddle.shape(Tensor([3154],"float32"), )
paddle.shape(Tensor([3156],"float32"), )
paddle.shape(Tensor([3159],"float32"), )
paddle.shape(Tensor([3161],"float32"), )
paddle.shape(Tensor([3162],"float32"), )
paddle.shape(Tensor([3163],"float32"), )
paddle.shape(Tensor([3164],"float32"), )
paddle.shape(Tensor([3165],"float32"), )
paddle.shape(Tensor([3166],"float32"), )
paddle.shape(Tensor([3167],"float32"), )
paddle.shape(Tensor([3169],"float32"), )
paddle.shape(Tensor([3170],"float32"), )
paddle.shape(Tensor([3171],"float32"), )
paddle.shape(Tensor([3172],"float32"), )
paddle.shape(Tensor([3174],"float32"), )
paddle.shape(Tensor([3175],"float32"), )
paddle.shape(Tensor([3176],"float32"), )
paddle.shape(Tensor([3177],"float32"), )
paddle.shape(Tensor([3178],"float32"), )
paddle.shape(Tensor([3179],"float32"), )
paddle.shape(Tensor([3180],"float32"), )
paddle.shape(Tensor([3181],"float32"), )
paddle.shape(Tensor([3182],"float32"), )
paddle.shape(Tensor([3183],"float32"), )
paddle.shape(Tensor([3184],"float32"), )
paddle.shape(Tensor([3188],"float32"), )
paddle.shape(Tensor([3191],"float32"), )
paddle.shape(Tensor([3193],"float32"), )
paddle.shape(Tensor([3195],"float32"), )
paddle.shape(Tensor([3198],"float32"), )
paddle.shape(Tensor([3199],"float32"), )
paddle.shape(Tensor([32, 32, 32],"float32"), )
paddle.shape(Tensor([32, 4],"float32"), )
paddle.shape(Tensor([3201],"float32"), )
paddle.shape(Tensor([3203],"float32"), )
paddle.shape(Tensor([3204],"float32"), )
paddle.shape(Tensor([3205],"float32"), )
paddle.shape(Tensor([3206],"float32"), )
paddle.shape(Tensor([3207],"float32"), )
paddle.shape(Tensor([3208],"float32"), )
paddle.shape(Tensor([3209],"float32"), )
paddle.shape(Tensor([3211],"float32"), )
paddle.shape(Tensor([3215],"float32"), )
paddle.shape(Tensor([3217],"float32"), )
paddle.shape(Tensor([3219],"float32"), )
paddle.shape(Tensor([3220],"float32"), )
paddle.shape(Tensor([3221],"float32"), )
paddle.shape(Tensor([3223],"float32"), )
paddle.shape(Tensor([3225],"float32"), )
paddle.shape(Tensor([3226],"float32"), )
paddle.shape(Tensor([3227],"float32"), )
paddle.shape(Tensor([3229],"float32"), )
paddle.shape(Tensor([3236],"float32"), )
paddle.shape(Tensor([3237],"float32"), )
paddle.shape(Tensor([3243],"float32"), )
paddle.shape(Tensor([3244],"float32"), )
paddle.shape(Tensor([3247],"float32"), )
paddle.shape(Tensor([3248],"float32"), )
paddle.shape(Tensor([3256],"float32"), )
paddle.shape(Tensor([3266],"float32"), )
paddle.shape(Tensor([3269],"float32"), )
paddle.shape(Tensor([3270],"float32"), )
paddle.shape(Tensor([3273],"float32"), )
paddle.shape(Tensor([3282],"float32"), )
paddle.shape(Tensor([3283],"float32"), )
paddle.shape(Tensor([3286],"float32"), )
paddle.shape(Tensor([3288],"float32"), )
paddle.shape(Tensor([3289],"float32"), )
paddle.shape(Tensor([3293],"float32"), )
paddle.shape(Tensor([3294],"float32"), )
paddle.shape(Tensor([3295],"float32"), )
paddle.shape(Tensor([3298],"float32"), )
paddle.shape(Tensor([32],"float32"), )
paddle.shape(Tensor([33, 4],"float32"), )
paddle.shape(Tensor([330088, 80],"float16"), )
paddle.shape(Tensor([330088, 80],"float32"), )
paddle.shape(Tensor([3300],"float32"), )
paddle.shape(Tensor([3303],"float32"), )
paddle.shape(Tensor([3304],"float32"), )
paddle.shape(Tensor([3306],"float32"), )
paddle.shape(Tensor([3355],"float32"), )
paddle.shape(Tensor([3358],"float32"), )
paddle.shape(Tensor([3363],"float32"), )
paddle.shape(Tensor([3382],"float32"), )
paddle.shape(Tensor([3384],"float32"), )
paddle.shape(Tensor([3391],"float32"), )
paddle.shape(Tensor([34, 4],"float32"), )
paddle.shape(Tensor([3415],"float32"), )
paddle.shape(Tensor([3416],"float32"), )
paddle.shape(Tensor([3431],"float32"), )
paddle.shape(Tensor([3440],"float32"), )
paddle.shape(Tensor([3443],"float32"), )
paddle.shape(Tensor([35, 4],"float32"), )
paddle.shape(Tensor([3510],"float32"), )
paddle.shape(Tensor([3512],"float32"), )
paddle.shape(Tensor([3528],"float32"), )
paddle.shape(Tensor([3532],"float32"), )
paddle.shape(Tensor([36, 4],"float32"), )
paddle.shape(Tensor([3604],"float32"), )
paddle.shape(Tensor([3612],"float32"), )
paddle.shape(Tensor([37, 4],"float32"), )
paddle.shape(Tensor([374],"int64"), )
paddle.shape(Tensor([376, 4],"float32"), )
paddle.shape(Tensor([378],"int32"), )
paddle.shape(Tensor([38, 4],"float32"), )
paddle.shape(Tensor([380, 4],"float32"), )
paddle.shape(Tensor([381],"int32"), )
paddle.shape(Tensor([383, 4],"float32"), )
paddle.shape(Tensor([385],"int32"), )
paddle.shape(Tensor([3872, 2],"float32"), )
paddle.shape(Tensor([39, 4],"float32"), )
paddle.shape(Tensor([391, 4],"float32"), )
paddle.shape(Tensor([393],"int32"), )
paddle.shape(Tensor([3],"float32"), )
paddle.shape(Tensor([3],"float64"), )
paddle.shape(Tensor([3],"int64"), )
paddle.shape(Tensor([4, 1, 16],"float32"), )
paddle.shape(Tensor([4, 1, 512],"float32"), )
paddle.shape(Tensor([4, 10, 512],"float32"), )
paddle.shape(Tensor([4, 100, 512],"float32"), )
paddle.shape(Tensor([4, 101, 512],"float32"), )
paddle.shape(Tensor([4, 10164, 68],"float32"), )
paddle.shape(Tensor([4, 102, 512],"float32"), )
paddle.shape(Tensor([4, 103, 512],"float32"), )
paddle.shape(Tensor([4, 104, 512],"float32"), )
paddle.shape(Tensor([4, 105, 512],"float32"), )
paddle.shape(Tensor([4, 106, 512],"float32"), )
paddle.shape(Tensor([4, 107, 512],"float32"), )
paddle.shape(Tensor([4, 108, 512],"float32"), )
paddle.shape(Tensor([4, 109, 512],"float32"), )
paddle.shape(Tensor([4, 11, 512],"float32"), )
paddle.shape(Tensor([4, 11, 8],"float32"), )
paddle.shape(Tensor([4, 110, 512],"float32"), )
paddle.shape(Tensor([4, 111, 512],"float32"), )
paddle.shape(Tensor([4, 11109, 68],"float32"), )
paddle.shape(Tensor([4, 112, 512],"float32"), )
paddle.shape(Tensor([4, 113, 512],"float32"), )
paddle.shape(Tensor([4, 114, 512],"float32"), )
paddle.shape(Tensor([4, 115, 512],"float32"), )
paddle.shape(Tensor([4, 116, 512],"float32"), )
paddle.shape(Tensor([4, 117, 512],"float32"), )
paddle.shape(Tensor([4, 118, 512],"float32"), )
paddle.shape(Tensor([4, 119, 512],"float32"), )
paddle.shape(Tensor([4, 12, 512],"float32"), )
paddle.shape(Tensor([4, 120, 512],"float32"), )
paddle.shape(Tensor([4, 12096, 68],"float32"), )
paddle.shape(Tensor([4, 121, 512],"float32"), )
paddle.shape(Tensor([4, 122, 512],"float32"), )
paddle.shape(Tensor([4, 123, 512],"float32"), )
paddle.shape(Tensor([4, 124, 512],"float32"), )
paddle.shape(Tensor([4, 125, 512],"float32"), )
paddle.shape(Tensor([4, 126, 512],"float32"), )
paddle.shape(Tensor([4, 127, 512],"float32"), )
paddle.shape(Tensor([4, 128, 11, 11],"float32"), )
paddle.shape(Tensor([4, 128, 12, 12],"float32"), )
paddle.shape(Tensor([4, 128, 128, 128],"float16"), )
paddle.shape(Tensor([4, 128, 128, 128],"float32"), )
paddle.shape(Tensor([4, 128, 13, 13],"float32"), )
paddle.shape(Tensor([4, 128, 14, 14],"float32"), )
paddle.shape(Tensor([4, 128, 15, 15],"float32"), )
paddle.shape(Tensor([4, 128, 16, 80],"float32"), )
paddle.shape(Tensor([4, 128, 22, 22],"float32"), )
paddle.shape(Tensor([4, 128, 24, 24],"float32"), )
paddle.shape(Tensor([4, 128, 256, 256],"float16"), )
paddle.shape(Tensor([4, 128, 256, 256],"float32"), )
paddle.shape(Tensor([4, 128, 26, 26],"float32"), )
paddle.shape(Tensor([4, 128, 28, 28],"float32"), )
paddle.shape(Tensor([4, 128, 30, 30],"float32"), )
paddle.shape(Tensor([4, 128, 38, 38],"float32"), )
paddle.shape(Tensor([4, 128, 44, 44],"float32"), )
paddle.shape(Tensor([4, 128, 48, 48],"float32"), )
paddle.shape(Tensor([4, 128, 512],"float32"), )
paddle.shape(Tensor([4, 128, 52, 52],"float32"), )
paddle.shape(Tensor([4, 128, 56, 56],"float32"), )
paddle.shape(Tensor([4, 128, 6, 6],"float32"), )
paddle.shape(Tensor([4, 128, 60, 60],"float32"), )
paddle.shape(Tensor([4, 128, 7, 7],"float32"), )
paddle.shape(Tensor([4, 128, 8, 8],"float32"), )
paddle.shape(Tensor([4, 1280, 128],"float32"), )
paddle.shape(Tensor([4, 129, 512],"float32"), )
paddle.shape(Tensor([4, 13, 512],"float32"), )
paddle.shape(Tensor([4, 130, 512],"float32"), )
paddle.shape(Tensor([4, 131, 512],"float32"), )
paddle.shape(Tensor([4, 132, 512],"float32"), )
paddle.shape(Tensor([4, 133, 512],"float32"), )
paddle.shape(Tensor([4, 134, 512],"float32"), )
paddle.shape(Tensor([4, 135, 512],"float32"), )
paddle.shape(Tensor([4, 136, 512],"float32"), )
paddle.shape(Tensor([4, 137, 512],"float32"), )
paddle.shape(Tensor([4, 138, 512],"float32"), )
paddle.shape(Tensor([4, 139, 512],"float32"), )
paddle.shape(Tensor([4, 14, 512],"float32"), )
paddle.shape(Tensor([4, 140, 512],"float32"), )
paddle.shape(Tensor([4, 141, 512],"float32"), )
paddle.shape(Tensor([4, 142, 512],"float32"), )
paddle.shape(Tensor([4, 143, 512],"float32"), )
paddle.shape(Tensor([4, 144, 12, 39],"float32"), )
paddle.shape(Tensor([4, 144, 512],"float32"), )
paddle.shape(Tensor([4, 145, 512],"float32"), )
paddle.shape(Tensor([4, 146, 512],"float32"), )
paddle.shape(Tensor([4, 147, 512],"float32"), )
paddle.shape(Tensor([4, 148, 512],"float32"), )
paddle.shape(Tensor([4, 149, 512],"float32"), )
paddle.shape(Tensor([4, 15, 512],"float32"), )
paddle.shape(Tensor([4, 150, 512],"float32"), )
paddle.shape(Tensor([4, 151, 512],"float32"), )
paddle.shape(Tensor([4, 152, 512],"float32"), )
paddle.shape(Tensor([4, 153, 512],"float32"), )
paddle.shape(Tensor([4, 154, 512],"float32"), )
paddle.shape(Tensor([4, 155, 512],"float32"), )
paddle.shape(Tensor([4, 156, 512],"float32"), )
paddle.shape(Tensor([4, 157, 512],"float32"), )
paddle.shape(Tensor([4, 158, 512],"float32"), )
paddle.shape(Tensor([4, 159, 512],"float32"), )
paddle.shape(Tensor([4, 16, 512],"float32"), )
paddle.shape(Tensor([4, 160, 512],"float32"), )
paddle.shape(Tensor([4, 1600, 376, 280],"float32"), )
paddle.shape(Tensor([4, 161, 512],"float32"), )
paddle.shape(Tensor([4, 162, 512],"float32"), )
paddle.shape(Tensor([4, 163, 512],"float32"), )
paddle.shape(Tensor([4, 164, 512],"float32"), )
paddle.shape(Tensor([4, 165, 512],"float32"), )
paddle.shape(Tensor([4, 166, 512],"float32"), )
paddle.shape(Tensor([4, 167, 512],"float32"), )
paddle.shape(Tensor([4, 168, 512],"float32"), )
paddle.shape(Tensor([4, 169, 512],"float32"), )
paddle.shape(Tensor([4, 16],"float32"), )
paddle.shape(Tensor([4, 17, 512],"float32"), )
paddle.shape(Tensor([4, 170, 512],"float32"), )
paddle.shape(Tensor([4, 171, 512],"float32"), )
paddle.shape(Tensor([4, 172, 512],"float32"), )
paddle.shape(Tensor([4, 173, 512],"float32"), )
paddle.shape(Tensor([4, 174, 512],"float32"), )
paddle.shape(Tensor([4, 175, 512],"float32"), )
paddle.shape(Tensor([4, 176, 512],"float32"), )
paddle.shape(Tensor([4, 177, 512],"float32"), )
paddle.shape(Tensor([4, 178, 512],"float32"), )
paddle.shape(Tensor([4, 179, 512],"float32"), )
paddle.shape(Tensor([4, 18, 512],"float32"), )
paddle.shape(Tensor([4, 18, 94, 311],"float32"), )
paddle.shape(Tensor([4, 180, 512],"float32"), )
paddle.shape(Tensor([4, 19, 512],"float32"), )
paddle.shape(Tensor([4, 1],"float16"), )
paddle.shape(Tensor([4, 1],"float32"), )
paddle.shape(Tensor([4, 2, 512],"float32"), )
paddle.shape(Tensor([4, 20, 512],"float32"), )
paddle.shape(Tensor([4, 200, 4],"float32"), )
paddle.shape(Tensor([4, 21, 512],"float32"), )
paddle.shape(Tensor([4, 2100, 68],"float32"), )
paddle.shape(Tensor([4, 22, 512],"float32"), )
paddle.shape(Tensor([4, 23, 512],"float32"), )
paddle.shape(Tensor([4, 24, 512],"float32"), )
paddle.shape(Tensor([4, 25, 512],"float32"), )
paddle.shape(Tensor([4, 2541, 68],"float32"), )
paddle.shape(Tensor([4, 256, 19, 19],"float32"), )
paddle.shape(Tensor([4, 256, 8, 80],"float32"), )
paddle.shape(Tensor([4, 256, 94, 311],"float32"), )
paddle.shape(Tensor([4, 26, 512],"float32"), )
paddle.shape(Tensor([4, 27, 512],"float32"), )
paddle.shape(Tensor([4, 28, 512],"float32"), )
paddle.shape(Tensor([4, 280, 376, 25, 3],"bool"), )
paddle.shape(Tensor([4, 280, 376, 25, 3],"float32"), )
paddle.shape(Tensor([4, 29, 512],"float32"), )
paddle.shape(Tensor([4, 3, 16],"float32"), )
paddle.shape(Tensor([4, 3, 2],"float32"), )
paddle.shape(Tensor([4, 3, 32],"float16"), )
paddle.shape(Tensor([4, 3, 32],"float32"), )
paddle.shape(Tensor([4, 3, 375, 1242],"float32"), )
paddle.shape(Tensor([4, 3, 512],"float32"), )
paddle.shape(Tensor([4, 3, 8],"float32"), )
paddle.shape(Tensor([4, 30, 512],"float32"), )
paddle.shape(Tensor([4, 3024, 68],"float32"), )
paddle.shape(Tensor([4, 31, 512],"float32"), )
paddle.shape(Tensor([4, 32, 512],"float32"), )
paddle.shape(Tensor([4, 320, 384],"float32"), )
paddle.shape(Tensor([4, 32],"float32"), )
paddle.shape(Tensor([4, 33, 512],"float32"), )
paddle.shape(Tensor([4, 34, 512],"float32"), )
paddle.shape(Tensor([4, 35, 512],"float32"), )
paddle.shape(Tensor([4, 3549, 68],"float32"), )
paddle.shape(Tensor([4, 36, 47, 156],"float32"), )
paddle.shape(Tensor([4, 36, 512],"float32"), )
paddle.shape(Tensor([4, 37, 512],"float32"), )
paddle.shape(Tensor([4, 38, 512],"float32"), )
paddle.shape(Tensor([4, 39, 512],"float32"), )
paddle.shape(Tensor([4, 4, 4],"float32"), )
paddle.shape(Tensor([4, 4, 512],"float32"), )
paddle.shape(Tensor([4, 40, 512],"float32"), )
paddle.shape(Tensor([4, 41, 512],"float32"), )
paddle.shape(Tensor([4, 4116, 68],"float32"), )
paddle.shape(Tensor([4, 42, 512],"float32"), )
paddle.shape(Tensor([4, 43, 512],"float32"), )
paddle.shape(Tensor([4, 44, 512],"float32"), )
paddle.shape(Tensor([4, 45, 512],"float32"), )
paddle.shape(Tensor([4, 46, 512],"float32"), )
paddle.shape(Tensor([4, 47, 512],"float32"), )
paddle.shape(Tensor([4, 4725, 68],"float32"), )
paddle.shape(Tensor([4, 48, 512],"float32"), )
paddle.shape(Tensor([4, 49, 512],"float32"), )
paddle.shape(Tensor([4, 4],"float32"), )
paddle.shape(Tensor([4, 5, 16, 256],"float32"), )
paddle.shape(Tensor([4, 5, 4, 4],"complex128"), )
paddle.shape(Tensor([4, 5, 4, 4],"float64"), )
paddle.shape(Tensor([4, 5, 4],"float64"), )
paddle.shape(Tensor([4, 5, 512],"float32"), )
paddle.shape(Tensor([4, 50, 512],"float32"), )
paddle.shape(Tensor([4, 51, 512],"float32"), )
paddle.shape(Tensor([4, 512, 47, 156],"float32"), )
paddle.shape(Tensor([4, 52, 512],"float32"), )
paddle.shape(Tensor([4, 53, 512],"float32"), )
paddle.shape(Tensor([4, 5376, 68],"float32"), )
paddle.shape(Tensor([4, 54, 512],"float32"), )
paddle.shape(Tensor([4, 55, 512],"float32"), )
paddle.shape(Tensor([4, 56, 512],"float32"), )
paddle.shape(Tensor([4, 57, 512],"float32"), )
paddle.shape(Tensor([4, 58, 512],"float32"), )
paddle.shape(Tensor([4, 59, 512],"float32"), )
paddle.shape(Tensor([4, 5],"float32"), )
paddle.shape(Tensor([4, 6, 16, 256],"float32"), )
paddle.shape(Tensor([4, 6, 16],"float32"), )
paddle.shape(Tensor([4, 6, 512],"float32"), )
paddle.shape(Tensor([4, 60, 512],"float32"), )
paddle.shape(Tensor([4, 6069, 68],"float32"), )
paddle.shape(Tensor([4, 61, 512],"float32"), )
paddle.shape(Tensor([4, 62, 512],"float32"), )
paddle.shape(Tensor([4, 63, 512],"float32"), )
paddle.shape(Tensor([4, 64, 512],"float32"), )
paddle.shape(Tensor([4, 640, 256],"float32"), )
paddle.shape(Tensor([4, 65, 512],"float32"), )
paddle.shape(Tensor([4, 66, 512],"float32"), )
paddle.shape(Tensor([4, 67, 512],"float32"), )
paddle.shape(Tensor([4, 68, 512],"float32"), )
paddle.shape(Tensor([4, 6804, 68],"float32"), )
paddle.shape(Tensor([4, 69, 512],"float32"), )
paddle.shape(Tensor([4, 7, 512],"float32"), )
paddle.shape(Tensor([4, 70, 512],"float32"), )
paddle.shape(Tensor([4, 71, 512],"float32"), )
paddle.shape(Tensor([4, 72, 24, 78],"float32"), )
paddle.shape(Tensor([4, 72, 512],"float32"), )
paddle.shape(Tensor([4, 73, 512],"float32"), )
paddle.shape(Tensor([4, 74, 512],"float32"), )
paddle.shape(Tensor([4, 75, 512],"float32"), )
paddle.shape(Tensor([4, 7581, 68],"float32"), )
paddle.shape(Tensor([4, 76, 512],"float32"), )
paddle.shape(Tensor([4, 77, 512],"float32"), )
paddle.shape(Tensor([4, 78, 512],"float32"), )
paddle.shape(Tensor([4, 79, 512],"float32"), )
paddle.shape(Tensor([4, 8, 512],"float32"), )
paddle.shape(Tensor([4, 80, 512],"float32"), )
paddle.shape(Tensor([4, 81, 512],"float32"), )
paddle.shape(Tensor([4, 82, 512],"float32"), )
paddle.shape(Tensor([4, 83, 512],"float32"), )
paddle.shape(Tensor([4, 84, 512],"float32"), )
paddle.shape(Tensor([4, 8400, 68],"float32"), )
paddle.shape(Tensor([4, 85, 512],"float32"), )
paddle.shape(Tensor([4, 86, 512],"float32"), )
paddle.shape(Tensor([4, 87, 512],"float32"), )
paddle.shape(Tensor([4, 88, 512],"float32"), )
paddle.shape(Tensor([4, 89, 512],"float32"), )
paddle.shape(Tensor([4, 9, 512],"float32"), )
paddle.shape(Tensor([4, 90, 512],"float32"), )
paddle.shape(Tensor([4, 91, 512],"float32"), )
paddle.shape(Tensor([4, 92, 512],"float32"), )
paddle.shape(Tensor([4, 9261, 68],"float32"), )
paddle.shape(Tensor([4, 93, 512],"float32"), )
paddle.shape(Tensor([4, 94, 512],"float32"), )
paddle.shape(Tensor([4, 95, 512],"float32"), )
paddle.shape(Tensor([4, 96, 11, 11],"float32"), )
paddle.shape(Tensor([4, 96, 12, 12],"float32"), )
paddle.shape(Tensor([4, 96, 13, 13],"float32"), )
paddle.shape(Tensor([4, 96, 14, 14],"float32"), )
paddle.shape(Tensor([4, 96, 15, 15],"float32"), )
paddle.shape(Tensor([4, 96, 22, 22],"float32"), )
paddle.shape(Tensor([4, 96, 24, 24],"float32"), )
paddle.shape(Tensor([4, 96, 26, 26],"float32"), )
paddle.shape(Tensor([4, 96, 28, 28],"float32"), )
paddle.shape(Tensor([4, 96, 30, 30],"float32"), )
paddle.shape(Tensor([4, 96, 44, 44],"float32"), )
paddle.shape(Tensor([4, 96, 48, 48],"float32"), )
paddle.shape(Tensor([4, 96, 512],"float32"), )
paddle.shape(Tensor([4, 96, 52, 52],"float32"), )
paddle.shape(Tensor([4, 96, 56, 56],"float32"), )
paddle.shape(Tensor([4, 96, 6, 6],"float32"), )
paddle.shape(Tensor([4, 96, 60, 60],"float32"), )
paddle.shape(Tensor([4, 96, 7, 7],"float32"), )
paddle.shape(Tensor([4, 96, 8, 8],"float32"), )
paddle.shape(Tensor([4, 97, 512],"float32"), )
paddle.shape(Tensor([4, 98, 512],"float32"), )
paddle.shape(Tensor([4, 99, 512],"float32"), )
paddle.shape(Tensor([40, 4],"float32"), )
paddle.shape(Tensor([409, 4],"float32"), )
paddle.shape(Tensor([41, 4],"float32"), )
paddle.shape(Tensor([411, 4],"float32"), )
paddle.shape(Tensor([411],"int32"), )
paddle.shape(Tensor([412, 4],"float32"), )
paddle.shape(Tensor([414, 4],"float32"), )
paddle.shape(Tensor([414],"int32"), )
paddle.shape(Tensor([42, 4],"float32"), )
paddle.shape(Tensor([421120, 25, 3],"float32"), )
paddle.shape(Tensor([43, 4],"float32"), )
paddle.shape(Tensor([432, 4],"float32"), )
paddle.shape(Tensor([43],"int64"), )
paddle.shape(Tensor([44, 4],"float32"), )
paddle.shape(Tensor([449, 4],"float32"), )
paddle.shape(Tensor([45, 4],"float32"), )
paddle.shape(Tensor([450, 4],"float32"), )
paddle.shape(Tensor([452],"int32"), )
paddle.shape(Tensor([456, 4],"float32"), )
paddle.shape(Tensor([458],"int32"), )
paddle.shape(Tensor([45],"int64"), )
paddle.shape(Tensor([46, 4],"float32"), )
paddle.shape(Tensor([465, 4],"float32"), )
paddle.shape(Tensor([467],"int32"), )
paddle.shape(Tensor([47, 4],"float32"), )
paddle.shape(Tensor([475, 4],"float32"), )
paddle.shape(Tensor([476],"int32"), )
paddle.shape(Tensor([478, 4],"float32"), )
paddle.shape(Tensor([48, 4],"float32"), )
paddle.shape(Tensor([4800, 4],"float32"), )
paddle.shape(Tensor([480],"int32"), )
paddle.shape(Tensor([485, 4],"float32"), )
paddle.shape(Tensor([486, 4],"float32"), )
paddle.shape(Tensor([486],"int32"), )
paddle.shape(Tensor([487],"int32"), )
paddle.shape(Tensor([488, 4],"float32"), )
paddle.shape(Tensor([489],"int32"), )
paddle.shape(Tensor([49, 4],"float32"), )
paddle.shape(Tensor([498, 4],"float32"), )
paddle.shape(Tensor([49],"int64"), )
paddle.shape(Tensor([4],"float32"), )
paddle.shape(Tensor([5, 1, 512],"float32"), )
paddle.shape(Tensor([5, 10, 512],"float32"), )
paddle.shape(Tensor([5, 100, 512],"float32"), )
paddle.shape(Tensor([5, 101, 512],"float32"), )
paddle.shape(Tensor([5, 102, 512],"float32"), )
paddle.shape(Tensor([5, 103, 512],"float32"), )
paddle.shape(Tensor([5, 104, 512],"float32"), )
paddle.shape(Tensor([5, 105, 512],"float32"), )
paddle.shape(Tensor([5, 106, 512],"float32"), )
paddle.shape(Tensor([5, 107, 512],"float32"), )
paddle.shape(Tensor([5, 108, 512],"float32"), )
paddle.shape(Tensor([5, 109, 512],"float32"), )
paddle.shape(Tensor([5, 11, 512],"float32"), )
paddle.shape(Tensor([5, 110, 512],"float32"), )
paddle.shape(Tensor([5, 111, 512],"float32"), )
paddle.shape(Tensor([5, 112, 512],"float32"), )
paddle.shape(Tensor([5, 113, 512],"float32"), )
paddle.shape(Tensor([5, 114, 512],"float32"), )
paddle.shape(Tensor([5, 115, 512],"float32"), )
paddle.shape(Tensor([5, 116, 512],"float32"), )
paddle.shape(Tensor([5, 117, 512],"float32"), )
paddle.shape(Tensor([5, 118, 512],"float32"), )
paddle.shape(Tensor([5, 119, 512],"float32"), )
paddle.shape(Tensor([5, 12, 512],"float32"), )
paddle.shape(Tensor([5, 120, 512],"float32"), )
paddle.shape(Tensor([5, 121, 512],"float32"), )
paddle.shape(Tensor([5, 122, 512],"float32"), )
paddle.shape(Tensor([5, 123, 512],"float32"), )
paddle.shape(Tensor([5, 124, 512],"float32"), )
paddle.shape(Tensor([5, 125, 512],"float32"), )
paddle.shape(Tensor([5, 126, 512],"float32"), )
paddle.shape(Tensor([5, 127, 512],"float32"), )
paddle.shape(Tensor([5, 128, 512],"float32"), )
paddle.shape(Tensor([5, 129, 512],"float32"), )
paddle.shape(Tensor([5, 13, 512],"float32"), )
paddle.shape(Tensor([5, 130, 512],"float32"), )
paddle.shape(Tensor([5, 131, 512],"float32"), )
paddle.shape(Tensor([5, 132, 512],"float32"), )
paddle.shape(Tensor([5, 133, 512],"float32"), )
paddle.shape(Tensor([5, 134, 512],"float32"), )
paddle.shape(Tensor([5, 135, 512],"float32"), )
paddle.shape(Tensor([5, 136, 512],"float32"), )
paddle.shape(Tensor([5, 137, 512],"float32"), )
paddle.shape(Tensor([5, 138, 512],"float32"), )
paddle.shape(Tensor([5, 139, 512],"float32"), )
paddle.shape(Tensor([5, 14, 512],"float32"), )
paddle.shape(Tensor([5, 140, 512],"float32"), )
paddle.shape(Tensor([5, 141, 512],"float32"), )
paddle.shape(Tensor([5, 142, 512],"float32"), )
paddle.shape(Tensor([5, 145, 512],"float32"), )
paddle.shape(Tensor([5, 15, 512],"float32"), )
paddle.shape(Tensor([5, 15, 8],"float32"), )
paddle.shape(Tensor([5, 16, 512],"float32"), )
paddle.shape(Tensor([5, 17, 512],"float32"), )
paddle.shape(Tensor([5, 17, 8],"float32"), )
paddle.shape(Tensor([5, 18, 512],"float32"), )
paddle.shape(Tensor([5, 19, 512],"float32"), )
paddle.shape(Tensor([5, 2, 512],"float32"), )
paddle.shape(Tensor([5, 20, 32],"float32"), )
paddle.shape(Tensor([5, 20, 512],"float32"), )
paddle.shape(Tensor([5, 21, 512],"float32"), )
paddle.shape(Tensor([5, 22, 512],"float32"), )
paddle.shape(Tensor([5, 23, 512],"float32"), )
paddle.shape(Tensor([5, 24, 512],"float32"), )
paddle.shape(Tensor([5, 25, 512],"float32"), )
paddle.shape(Tensor([5, 26, 512],"float32"), )
paddle.shape(Tensor([5, 27, 512],"float32"), )
paddle.shape(Tensor([5, 28, 512],"float32"), )
paddle.shape(Tensor([5, 29, 512],"float32"), )
paddle.shape(Tensor([5, 2],"float32"), )
paddle.shape(Tensor([5, 2],"float64"), )
paddle.shape(Tensor([5, 3, 512],"float32"), )
paddle.shape(Tensor([5, 30, 512],"float32"), )
paddle.shape(Tensor([5, 31, 512],"float32"), )
paddle.shape(Tensor([5, 32, 512],"float32"), )
paddle.shape(Tensor([5, 33, 512],"float32"), )
paddle.shape(Tensor([5, 34, 512],"float32"), )
paddle.shape(Tensor([5, 35, 512],"float32"), )
paddle.shape(Tensor([5, 36, 512],"float32"), )
paddle.shape(Tensor([5, 37, 512],"float32"), )
paddle.shape(Tensor([5, 38, 512],"float32"), )
paddle.shape(Tensor([5, 39, 512],"float32"), )
paddle.shape(Tensor([5, 4, 512],"float32"), )
paddle.shape(Tensor([5, 40, 512],"float32"), )
paddle.shape(Tensor([5, 41, 512],"float32"), )
paddle.shape(Tensor([5, 42, 512],"float32"), )
paddle.shape(Tensor([5, 43, 512],"float32"), )
paddle.shape(Tensor([5, 44, 512],"float32"), )
paddle.shape(Tensor([5, 45, 512],"float32"), )
paddle.shape(Tensor([5, 46, 512],"float32"), )
paddle.shape(Tensor([5, 47, 512],"float32"), )
paddle.shape(Tensor([5, 48, 512],"float32"), )
paddle.shape(Tensor([5, 49, 512],"float32"), )
paddle.shape(Tensor([5, 4],"float32"), )
paddle.shape(Tensor([5, 5, 512],"float32"), )
paddle.shape(Tensor([5, 50, 512],"float32"), )
paddle.shape(Tensor([5, 51, 512],"float32"), )
paddle.shape(Tensor([5, 52, 512],"float32"), )
paddle.shape(Tensor([5, 53, 512],"float32"), )
paddle.shape(Tensor([5, 54, 512],"float32"), )
paddle.shape(Tensor([5, 55, 512],"float32"), )
paddle.shape(Tensor([5, 56, 512],"float32"), )
paddle.shape(Tensor([5, 57, 512],"float32"), )
paddle.shape(Tensor([5, 58, 512],"float32"), )
paddle.shape(Tensor([5, 59, 512],"float32"), )
paddle.shape(Tensor([5, 6, 512],"float32"), )
paddle.shape(Tensor([5, 60, 512],"float32"), )
paddle.shape(Tensor([5, 61, 512],"float32"), )
paddle.shape(Tensor([5, 62, 512],"float32"), )
paddle.shape(Tensor([5, 63, 512],"float32"), )
paddle.shape(Tensor([5, 64, 512],"float32"), )
paddle.shape(Tensor([5, 65, 512],"float32"), )
paddle.shape(Tensor([5, 66, 512],"float32"), )
paddle.shape(Tensor([5, 67, 512],"float32"), )
paddle.shape(Tensor([5, 68, 512],"float32"), )
paddle.shape(Tensor([5, 69, 512],"float32"), )
paddle.shape(Tensor([5, 7, 512],"float32"), )
paddle.shape(Tensor([5, 70, 512],"float32"), )
paddle.shape(Tensor([5, 71, 512],"float32"), )
paddle.shape(Tensor([5, 72, 512],"float32"), )
paddle.shape(Tensor([5, 73, 512],"float32"), )
paddle.shape(Tensor([5, 74, 512],"float32"), )
paddle.shape(Tensor([5, 75, 512],"float32"), )
paddle.shape(Tensor([5, 76, 512],"float32"), )
paddle.shape(Tensor([5, 77, 512],"float32"), )
paddle.shape(Tensor([5, 78, 512],"float32"), )
paddle.shape(Tensor([5, 79, 512],"float32"), )
paddle.shape(Tensor([5, 7],"int32"), )
paddle.shape(Tensor([5, 8, 15],"float32"), )
paddle.shape(Tensor([5, 8, 512],"float32"), )
paddle.shape(Tensor([5, 80, 512],"float32"), )
paddle.shape(Tensor([5, 81, 512],"float32"), )
paddle.shape(Tensor([5, 82, 512],"float32"), )
paddle.shape(Tensor([5, 83, 512],"float32"), )
paddle.shape(Tensor([5, 84, 512],"float32"), )
paddle.shape(Tensor([5, 85, 512],"float32"), )
paddle.shape(Tensor([5, 86, 512],"float32"), )
paddle.shape(Tensor([5, 87, 512],"float32"), )
paddle.shape(Tensor([5, 88, 512],"float32"), )
paddle.shape(Tensor([5, 89, 512],"float32"), )
paddle.shape(Tensor([5, 9, 512],"float32"), )
paddle.shape(Tensor([5, 90, 512],"float32"), )
paddle.shape(Tensor([5, 91, 512],"float32"), )
paddle.shape(Tensor([5, 92, 512],"float32"), )
paddle.shape(Tensor([5, 93, 512],"float32"), )
paddle.shape(Tensor([5, 94, 512],"float32"), )
paddle.shape(Tensor([5, 95, 512],"float32"), )
paddle.shape(Tensor([5, 96, 512],"float32"), )
paddle.shape(Tensor([5, 97, 512],"float32"), )
paddle.shape(Tensor([5, 98, 512],"float32"), )
paddle.shape(Tensor([5, 99, 512],"float32"), )
paddle.shape(Tensor([50, 4],"float32"), )
paddle.shape(Tensor([500, 4],"float32"), )
paddle.shape(Tensor([500],"int32"), )
paddle.shape(Tensor([501, 4],"float32"), )
paddle.shape(Tensor([501],"int32"), )
paddle.shape(Tensor([502, 4],"float32"), )
paddle.shape(Tensor([502],"int32"), )
paddle.shape(Tensor([504, 4],"float32"), )
paddle.shape(Tensor([505, 4],"float32"), )
paddle.shape(Tensor([505],"int32"), )
paddle.shape(Tensor([507, 4],"float32"), )
paddle.shape(Tensor([508],"int32"), )
paddle.shape(Tensor([509],"int32"), )
paddle.shape(Tensor([50],"int64"), )
paddle.shape(Tensor([51, 4],"float32"), )
paddle.shape(Tensor([510, 4],"float32"), )
paddle.shape(Tensor([511, 4],"float32"), )
paddle.shape(Tensor([511],"int32"), )
paddle.shape(Tensor([512, 4],"float32"), )
paddle.shape(Tensor([512],"int32"), )
paddle.shape(Tensor([512],"int64"), )
paddle.shape(Tensor([515, 4],"float32"), )
paddle.shape(Tensor([518, 4],"float32"), )
paddle.shape(Tensor([51],"int64"), )
paddle.shape(Tensor([52, 4],"float32"), )
paddle.shape(Tensor([524, 4],"float32"), )
paddle.shape(Tensor([526, 4],"float32"), )
paddle.shape(Tensor([528, 4],"float32"), )
paddle.shape(Tensor([53, 4],"float32"), )
paddle.shape(Tensor([531, 4],"float32"), )
paddle.shape(Tensor([532, 4],"float32"), )
paddle.shape(Tensor([536, 4],"float32"), )
paddle.shape(Tensor([539, 4],"float32"), )
paddle.shape(Tensor([54, 4],"float32"), )
paddle.shape(Tensor([540, 4],"float32"), )
paddle.shape(Tensor([541, 4],"float32"), )
paddle.shape(Tensor([546, 4],"float32"), )
paddle.shape(Tensor([54],"int64"), )
paddle.shape(Tensor([55, 4],"float32"), )
paddle.shape(Tensor([558, 4],"float32"), )
paddle.shape(Tensor([559, 4],"float32"), )
paddle.shape(Tensor([56, 4],"float32"), )
paddle.shape(Tensor([562, 4],"float32"), )
paddle.shape(Tensor([565, 4],"float32"), )
paddle.shape(Tensor([567, 4],"float32"), )
paddle.shape(Tensor([57, 4],"float32"), )
paddle.shape(Tensor([570, 4],"float32"), )
paddle.shape(Tensor([571, 4],"float32"), )
paddle.shape(Tensor([58, 4],"float32"), )
paddle.shape(Tensor([580, 4],"float32"), )
paddle.shape(Tensor([581, 4],"float32"), )
paddle.shape(Tensor([582, 4],"float32"), )
paddle.shape(Tensor([584, 4],"float32"), )
paddle.shape(Tensor([586, 4],"float32"), )
paddle.shape(Tensor([587, 4],"float32"), )
paddle.shape(Tensor([588, 4],"float32"), )
paddle.shape(Tensor([59, 4],"float32"), )
paddle.shape(Tensor([591, 4],"float32"), )
paddle.shape(Tensor([596, 4],"float32"), )
paddle.shape(Tensor([5979],"float32"), )
paddle.shape(Tensor([598, 4],"float32"), )
paddle.shape(Tensor([599, 4],"float32"), )
paddle.shape(Tensor([5993],"float32"), )
paddle.shape(Tensor([5],"float32"), )
paddle.shape(Tensor([5],"float64"), )
paddle.shape(Tensor([6, 1, 512],"float32"), )
paddle.shape(Tensor([6, 10, 512],"float32"), )
paddle.shape(Tensor([6, 100, 512],"float32"), )
paddle.shape(Tensor([6, 101, 512],"float32"), )
paddle.shape(Tensor([6, 102, 512],"float32"), )
paddle.shape(Tensor([6, 103, 512],"float32"), )
paddle.shape(Tensor([6, 104, 512],"float32"), )
paddle.shape(Tensor([6, 105, 512],"float32"), )
paddle.shape(Tensor([6, 106, 512],"float32"), )
paddle.shape(Tensor([6, 107, 512],"float32"), )
paddle.shape(Tensor([6, 108, 512],"float32"), )
paddle.shape(Tensor([6, 109, 512],"float32"), )
paddle.shape(Tensor([6, 11, 512],"float32"), )
paddle.shape(Tensor([6, 110, 512],"float32"), )
paddle.shape(Tensor([6, 111, 512],"float32"), )
paddle.shape(Tensor([6, 112, 512],"float32"), )
paddle.shape(Tensor([6, 113, 512],"float32"), )
paddle.shape(Tensor([6, 114, 512],"float32"), )
paddle.shape(Tensor([6, 115, 512],"float32"), )
paddle.shape(Tensor([6, 116, 512],"float32"), )
paddle.shape(Tensor([6, 117, 512],"float32"), )
paddle.shape(Tensor([6, 118, 512],"float32"), )
paddle.shape(Tensor([6, 119, 512],"float32"), )
paddle.shape(Tensor([6, 12, 512],"float32"), )
paddle.shape(Tensor([6, 120, 512],"float32"), )
paddle.shape(Tensor([6, 121, 512],"float32"), )
paddle.shape(Tensor([6, 122, 512],"float32"), )
paddle.shape(Tensor([6, 123, 512],"float32"), )
paddle.shape(Tensor([6, 124, 512],"float32"), )
paddle.shape(Tensor([6, 125, 512],"float32"), )
paddle.shape(Tensor([6, 126, 512],"float32"), )
paddle.shape(Tensor([6, 127, 512],"float32"), )
paddle.shape(Tensor([6, 128, 512],"float32"), )
paddle.shape(Tensor([6, 129, 512],"float32"), )
paddle.shape(Tensor([6, 13, 512],"float32"), )
paddle.shape(Tensor([6, 130, 512],"float32"), )
paddle.shape(Tensor([6, 131, 512],"float32"), )
paddle.shape(Tensor([6, 132, 512],"float32"), )
paddle.shape(Tensor([6, 133, 512],"float32"), )
paddle.shape(Tensor([6, 134, 512],"float32"), )
paddle.shape(Tensor([6, 135, 512],"float32"), )
paddle.shape(Tensor([6, 136, 512],"float32"), )
paddle.shape(Tensor([6, 137, 512],"float32"), )
paddle.shape(Tensor([6, 138, 512],"float32"), )
paddle.shape(Tensor([6, 139, 512],"float32"), )
paddle.shape(Tensor([6, 14, 512],"float32"), )
paddle.shape(Tensor([6, 140, 512],"float32"), )
paddle.shape(Tensor([6, 141, 512],"float32"), )
paddle.shape(Tensor([6, 142, 512],"float32"), )
paddle.shape(Tensor([6, 143, 512],"float32"), )
paddle.shape(Tensor([6, 144, 512],"float32"), )
paddle.shape(Tensor([6, 145, 512],"float32"), )
paddle.shape(Tensor([6, 146, 512],"float32"), )
paddle.shape(Tensor([6, 147, 512],"float32"), )
paddle.shape(Tensor([6, 148, 512],"float32"), )
paddle.shape(Tensor([6, 149, 512],"float32"), )
paddle.shape(Tensor([6, 15, 512],"float32"), )
paddle.shape(Tensor([6, 150, 512],"float32"), )
paddle.shape(Tensor([6, 151, 512],"float32"), )
paddle.shape(Tensor([6, 152, 512],"float32"), )
paddle.shape(Tensor([6, 153, 512],"float32"), )
paddle.shape(Tensor([6, 154, 512],"float32"), )
paddle.shape(Tensor([6, 155, 512],"float32"), )
paddle.shape(Tensor([6, 156, 512],"float32"), )
paddle.shape(Tensor([6, 157, 512],"float32"), )
paddle.shape(Tensor([6, 158, 512],"float32"), )
paddle.shape(Tensor([6, 159, 512],"float32"), )
paddle.shape(Tensor([6, 16, 512],"float32"), )
paddle.shape(Tensor([6, 160, 512],"float32"), )
paddle.shape(Tensor([6, 161, 512],"float32"), )
paddle.shape(Tensor([6, 162, 512],"float32"), )
paddle.shape(Tensor([6, 163, 512],"float32"), )
paddle.shape(Tensor([6, 164, 512],"float32"), )
paddle.shape(Tensor([6, 165, 512],"float32"), )
paddle.shape(Tensor([6, 166, 512],"float32"), )
paddle.shape(Tensor([6, 167, 512],"float32"), )
paddle.shape(Tensor([6, 168, 512],"float32"), )
paddle.shape(Tensor([6, 169, 512],"float32"), )
paddle.shape(Tensor([6, 17, 512],"float32"), )
paddle.shape(Tensor([6, 170, 512],"float32"), )
paddle.shape(Tensor([6, 171, 512],"float32"), )
paddle.shape(Tensor([6, 172, 512],"float32"), )
paddle.shape(Tensor([6, 173, 512],"float32"), )
paddle.shape(Tensor([6, 174, 512],"float32"), )
paddle.shape(Tensor([6, 175, 512],"float32"), )
paddle.shape(Tensor([6, 176, 512],"float32"), )
paddle.shape(Tensor([6, 177, 512],"float32"), )
paddle.shape(Tensor([6, 178, 512],"float32"), )
paddle.shape(Tensor([6, 179, 512],"float32"), )
paddle.shape(Tensor([6, 18, 512],"float32"), )
paddle.shape(Tensor([6, 180, 512],"float32"), )
paddle.shape(Tensor([6, 181, 512],"float32"), )
paddle.shape(Tensor([6, 182, 512],"float32"), )
paddle.shape(Tensor([6, 183, 512],"float32"), )
paddle.shape(Tensor([6, 184, 512],"float32"), )
paddle.shape(Tensor([6, 185, 512],"float32"), )
paddle.shape(Tensor([6, 19, 512],"float32"), )
paddle.shape(Tensor([6, 2, 512],"float32"), )
paddle.shape(Tensor([6, 20, 512],"float32"), )
paddle.shape(Tensor([6, 21, 512],"float32"), )
paddle.shape(Tensor([6, 22, 512],"float32"), )
paddle.shape(Tensor([6, 23, 512],"float32"), )
paddle.shape(Tensor([6, 24, 512],"float32"), )
paddle.shape(Tensor([6, 25, 512],"float32"), )
paddle.shape(Tensor([6, 26, 512],"float32"), )
paddle.shape(Tensor([6, 27, 512],"float32"), )
paddle.shape(Tensor([6, 28, 512],"float32"), )
paddle.shape(Tensor([6, 29, 512],"float32"), )
paddle.shape(Tensor([6, 3, 16],"float32"), )
paddle.shape(Tensor([6, 3, 32],"float16"), )
paddle.shape(Tensor([6, 3, 32],"float32"), )
paddle.shape(Tensor([6, 3, 512],"float32"), )
paddle.shape(Tensor([6, 30, 512],"float32"), )
paddle.shape(Tensor([6, 31, 512],"float32"), )
paddle.shape(Tensor([6, 32, 512],"float32"), )
paddle.shape(Tensor([6, 33, 512],"float32"), )
paddle.shape(Tensor([6, 34, 512],"float32"), )
paddle.shape(Tensor([6, 35, 512],"float32"), )
paddle.shape(Tensor([6, 36, 512],"float32"), )
paddle.shape(Tensor([6, 37, 512],"float32"), )
paddle.shape(Tensor([6, 38, 512],"float32"), )
paddle.shape(Tensor([6, 39, 512],"float32"), )
paddle.shape(Tensor([6, 4, 512],"float32"), )
paddle.shape(Tensor([6, 40, 512],"float32"), )
paddle.shape(Tensor([6, 41, 512],"float32"), )
paddle.shape(Tensor([6, 42, 512],"float32"), )
paddle.shape(Tensor([6, 43, 512],"float32"), )
paddle.shape(Tensor([6, 44, 512],"float32"), )
paddle.shape(Tensor([6, 45, 512],"float32"), )
paddle.shape(Tensor([6, 46, 512],"float32"), )
paddle.shape(Tensor([6, 47, 512],"float32"), )
paddle.shape(Tensor([6, 48, 512],"float32"), )
paddle.shape(Tensor([6, 49, 512],"float32"), )
paddle.shape(Tensor([6, 4],"float32"), )
paddle.shape(Tensor([6, 5, 16, 256],"float32"), )
paddle.shape(Tensor([6, 5, 512],"float32"), )
paddle.shape(Tensor([6, 50, 512],"float32"), )
paddle.shape(Tensor([6, 51, 512],"float32"), )
paddle.shape(Tensor([6, 52, 512],"float32"), )
paddle.shape(Tensor([6, 53, 512],"float32"), )
paddle.shape(Tensor([6, 54, 512],"float32"), )
paddle.shape(Tensor([6, 55, 512],"float32"), )
paddle.shape(Tensor([6, 56, 512],"float32"), )
paddle.shape(Tensor([6, 57, 512],"float32"), )
paddle.shape(Tensor([6, 58, 512],"float32"), )
paddle.shape(Tensor([6, 59, 512],"float32"), )
paddle.shape(Tensor([6, 6, 16, 256],"float32"), )
paddle.shape(Tensor([6, 6, 512],"float32"), )
paddle.shape(Tensor([6, 60, 512],"float32"), )
paddle.shape(Tensor([6, 61, 512],"float32"), )
paddle.shape(Tensor([6, 62, 512],"float32"), )
paddle.shape(Tensor([6, 63, 512],"float32"), )
paddle.shape(Tensor([6, 64, 512],"float32"), )
paddle.shape(Tensor([6, 65, 512],"float32"), )
paddle.shape(Tensor([6, 66, 512],"float32"), )
paddle.shape(Tensor([6, 67, 512],"float32"), )
paddle.shape(Tensor([6, 68, 512],"float32"), )
paddle.shape(Tensor([6, 69, 512],"float32"), )
paddle.shape(Tensor([6, 7, 512],"float32"), )
paddle.shape(Tensor([6, 70, 512],"float32"), )
paddle.shape(Tensor([6, 71, 512],"float32"), )
paddle.shape(Tensor([6, 72, 512],"float32"), )
paddle.shape(Tensor([6, 73, 512],"float32"), )
paddle.shape(Tensor([6, 74, 512],"float32"), )
paddle.shape(Tensor([6, 75, 512],"float32"), )
paddle.shape(Tensor([6, 76, 512],"float32"), )
paddle.shape(Tensor([6, 77, 512],"float32"), )
paddle.shape(Tensor([6, 78, 512],"float32"), )
paddle.shape(Tensor([6, 79, 512],"float32"), )
paddle.shape(Tensor([6, 8, 512],"float32"), )
paddle.shape(Tensor([6, 80, 512],"float32"), )
paddle.shape(Tensor([6, 81, 512],"float32"), )
paddle.shape(Tensor([6, 82, 512],"float32"), )
paddle.shape(Tensor([6, 83, 512],"float32"), )
paddle.shape(Tensor([6, 84, 512],"float32"), )
paddle.shape(Tensor([6, 85, 512],"float32"), )
paddle.shape(Tensor([6, 86, 512],"float32"), )
paddle.shape(Tensor([6, 87, 512],"float32"), )
paddle.shape(Tensor([6, 88, 512],"float32"), )
paddle.shape(Tensor([6, 89, 512],"float32"), )
paddle.shape(Tensor([6, 9, 512],"float32"), )
paddle.shape(Tensor([6, 90, 512],"float32"), )
paddle.shape(Tensor([6, 91, 512],"float32"), )
paddle.shape(Tensor([6, 92, 512],"float32"), )
paddle.shape(Tensor([6, 93, 512],"float32"), )
paddle.shape(Tensor([6, 94, 512],"float32"), )
paddle.shape(Tensor([6, 95, 512],"float32"), )
paddle.shape(Tensor([6, 96, 512],"float32"), )
paddle.shape(Tensor([6, 97, 512],"float32"), )
paddle.shape(Tensor([6, 98, 512],"float32"), )
paddle.shape(Tensor([6, 99, 512],"float32"), )
paddle.shape(Tensor([60, 4],"float32"), )
paddle.shape(Tensor([602, 4],"float32"), )
paddle.shape(Tensor([603, 4],"float32"), )
paddle.shape(Tensor([605, 4],"float32"), )
paddle.shape(Tensor([606, 4],"float32"), )
paddle.shape(Tensor([607, 4],"float32"), )
paddle.shape(Tensor([61, 4],"float32"), )
paddle.shape(Tensor([614, 4],"float32"), )
paddle.shape(Tensor([615, 4],"float32"), )
paddle.shape(Tensor([616, 4],"float32"), )
paddle.shape(Tensor([617, 4],"float32"), )
paddle.shape(Tensor([61],"int64"), )
paddle.shape(Tensor([62, 4],"float32"), )
paddle.shape(Tensor([620, 4],"float32"), )
paddle.shape(Tensor([624, 4],"float32"), )
paddle.shape(Tensor([625, 4],"float32"), )
paddle.shape(Tensor([627, 4],"float32"), )
paddle.shape(Tensor([628, 4],"float32"), )
paddle.shape(Tensor([63, 4],"float32"), )
paddle.shape(Tensor([630, 4],"float32"), )
paddle.shape(Tensor([631, 4],"float32"), )
paddle.shape(Tensor([634, 4],"float32"), )
paddle.shape(Tensor([637, 4],"float32"), )
paddle.shape(Tensor([638, 4],"float32"), )
paddle.shape(Tensor([6380, 4],"float32"), )
paddle.shape(Tensor([64, 26, 1, 40, 1],"float16"), )
paddle.shape(Tensor([64, 26, 1, 40, 1],"float32"), )
paddle.shape(Tensor([64, 40, 512],"float32"), )
paddle.shape(Tensor([64, 4],"float32"), )
paddle.shape(Tensor([64, 96, 10, 10],"float16"), )
paddle.shape(Tensor([64, 96, 10, 10],"float32"), )
paddle.shape(Tensor([64, 96, 11, 11],"float16"), )
paddle.shape(Tensor([64, 96, 11, 11],"float32"), )
paddle.shape(Tensor([64, 96, 12, 12],"float16"), )
paddle.shape(Tensor([64, 96, 12, 12],"float32"), )
paddle.shape(Tensor([64, 96, 16, 16],"float16"), )
paddle.shape(Tensor([64, 96, 16, 16],"float32"), )
paddle.shape(Tensor([64, 96, 18, 18],"float16"), )
paddle.shape(Tensor([64, 96, 18, 18],"float32"), )
paddle.shape(Tensor([64, 96, 20, 20],"float16"), )
paddle.shape(Tensor([64, 96, 20, 20],"float32"), )
paddle.shape(Tensor([64, 96, 22, 22],"float16"), )
paddle.shape(Tensor([64, 96, 22, 22],"float32"), )
paddle.shape(Tensor([64, 96, 24, 24],"float16"), )
paddle.shape(Tensor([64, 96, 24, 24],"float32"), )
paddle.shape(Tensor([64, 96, 32, 32],"float16"), )
paddle.shape(Tensor([64, 96, 32, 32],"float32"), )
paddle.shape(Tensor([64, 96, 36, 36],"float16"), )
paddle.shape(Tensor([64, 96, 36, 36],"float32"), )
paddle.shape(Tensor([64, 96, 4, 4],"float16"), )
paddle.shape(Tensor([64, 96, 4, 4],"float32"), )
paddle.shape(Tensor([64, 96, 40, 40],"float16"), )
paddle.shape(Tensor([64, 96, 40, 40],"float32"), )
paddle.shape(Tensor([64, 96, 44, 44],"float16"), )
paddle.shape(Tensor([64, 96, 44, 44],"float32"), )
paddle.shape(Tensor([64, 96, 48, 48],"float16"), )
paddle.shape(Tensor([64, 96, 48, 48],"float32"), )
paddle.shape(Tensor([64, 96, 5, 5],"float16"), )
paddle.shape(Tensor([64, 96, 5, 5],"float32"), )
paddle.shape(Tensor([64, 96, 6, 6],"float16"), )
paddle.shape(Tensor([64, 96, 6, 6],"float32"), )
paddle.shape(Tensor([64, 96, 8, 8],"float16"), )
paddle.shape(Tensor([64, 96, 8, 8],"float32"), )
paddle.shape(Tensor([64, 96, 9, 9],"float16"), )
paddle.shape(Tensor([64, 96, 9, 9],"float32"), )
paddle.shape(Tensor([640, 4],"float32"), )
paddle.shape(Tensor([6408, 4],"float32"), )
paddle.shape(Tensor([641, 4],"float32"), )
paddle.shape(Tensor([644, 4],"float32"), )
paddle.shape(Tensor([646, 4],"float32"), )
paddle.shape(Tensor([647, 4],"float32"), )
paddle.shape(Tensor([648, 4],"float32"), )
paddle.shape(Tensor([649, 4],"float32"), )
paddle.shape(Tensor([65, 4],"float32"), )
paddle.shape(Tensor([652, 4],"float32"), )
paddle.shape(Tensor([655, 4],"float32"), )
paddle.shape(Tensor([656, 4],"float32"), )
paddle.shape(Tensor([658, 4],"float32"), )
paddle.shape(Tensor([65],"int64"), )
paddle.shape(Tensor([66, 4],"float32"), )
paddle.shape(Tensor([660, 4],"float32"), )
paddle.shape(Tensor([661, 4],"float32"), )
paddle.shape(Tensor([662, 4],"float32"), )
paddle.shape(Tensor([664, 4],"float32"), )
paddle.shape(Tensor([666, 4],"float32"), )
paddle.shape(Tensor([667, 4],"float32"), )
paddle.shape(Tensor([669, 4],"float32"), )
paddle.shape(Tensor([67, 4],"float32"), )
paddle.shape(Tensor([670, 4],"float32"), )
paddle.shape(Tensor([674, 4],"float32"), )
paddle.shape(Tensor([675, 4],"float32"), )
paddle.shape(Tensor([676, 4],"float32"), )
paddle.shape(Tensor([677, 4],"float32"), )
paddle.shape(Tensor([678, 4],"float32"), )
paddle.shape(Tensor([68, 4],"float32"), )
paddle.shape(Tensor([680, 4],"float32"), )
paddle.shape(Tensor([681, 4],"float32"), )
paddle.shape(Tensor([685, 4],"float32"), )
paddle.shape(Tensor([686, 4],"float32"), )
paddle.shape(Tensor([687, 4],"float32"), )
paddle.shape(Tensor([688, 4],"float32"), )
paddle.shape(Tensor([69, 4],"float32"), )
paddle.shape(Tensor([691, 4],"float32"), )
paddle.shape(Tensor([6912, 4],"float32"), )
paddle.shape(Tensor([692, 4],"float32"), )
paddle.shape(Tensor([693, 4],"float32"), )
paddle.shape(Tensor([695, 4],"float32"), )
paddle.shape(Tensor([696, 4],"float32"), )
paddle.shape(Tensor([697, 4],"float32"), )
paddle.shape(Tensor([698, 4],"float32"), )
paddle.shape(Tensor([699, 4],"float32"), )
paddle.shape(Tensor([7, 1, 512],"float32"), )
paddle.shape(Tensor([7, 10, 512],"float32"), )
paddle.shape(Tensor([7, 100, 512],"float32"), )
paddle.shape(Tensor([7, 101, 512],"float32"), )
paddle.shape(Tensor([7, 102, 512],"float32"), )
paddle.shape(Tensor([7, 103, 512],"float32"), )
paddle.shape(Tensor([7, 104, 512],"float32"), )
paddle.shape(Tensor([7, 105, 512],"float32"), )
paddle.shape(Tensor([7, 106, 512],"float32"), )
paddle.shape(Tensor([7, 107, 512],"float32"), )
paddle.shape(Tensor([7, 108, 512],"float32"), )
paddle.shape(Tensor([7, 109, 512],"float32"), )
paddle.shape(Tensor([7, 11, 512],"float32"), )
paddle.shape(Tensor([7, 110, 512],"float32"), )
paddle.shape(Tensor([7, 111, 512],"float32"), )
paddle.shape(Tensor([7, 112, 512],"float32"), )
paddle.shape(Tensor([7, 113, 512],"float32"), )
paddle.shape(Tensor([7, 114, 512],"float32"), )
paddle.shape(Tensor([7, 115, 512],"float32"), )
paddle.shape(Tensor([7, 116, 512],"float32"), )
paddle.shape(Tensor([7, 117, 512],"float32"), )
paddle.shape(Tensor([7, 118, 512],"float32"), )
paddle.shape(Tensor([7, 119, 512],"float32"), )
paddle.shape(Tensor([7, 12, 512],"float32"), )
paddle.shape(Tensor([7, 120, 512],"float32"), )
paddle.shape(Tensor([7, 121, 512],"float32"), )
paddle.shape(Tensor([7, 122, 512],"float32"), )
paddle.shape(Tensor([7, 123, 512],"float32"), )
paddle.shape(Tensor([7, 124, 512],"float32"), )
paddle.shape(Tensor([7, 125, 512],"float32"), )
paddle.shape(Tensor([7, 126, 1024],"float32"), )
paddle.shape(Tensor([7, 126, 512],"float32"), )
paddle.shape(Tensor([7, 127, 512],"float32"), )
paddle.shape(Tensor([7, 128, 512],"float32"), )
paddle.shape(Tensor([7, 129, 512],"float32"), )
paddle.shape(Tensor([7, 13, 512],"float32"), )
paddle.shape(Tensor([7, 130, 512],"float32"), )
paddle.shape(Tensor([7, 131, 512],"float32"), )
paddle.shape(Tensor([7, 132, 512],"float32"), )
paddle.shape(Tensor([7, 133, 512],"float32"), )
paddle.shape(Tensor([7, 134, 512],"float32"), )
paddle.shape(Tensor([7, 135, 512],"float32"), )
paddle.shape(Tensor([7, 136, 512],"float32"), )
paddle.shape(Tensor([7, 137, 512],"float32"), )
paddle.shape(Tensor([7, 138, 512],"float32"), )
paddle.shape(Tensor([7, 139, 512],"float32"), )
paddle.shape(Tensor([7, 14, 512],"float32"), )
paddle.shape(Tensor([7, 140, 512],"float32"), )
paddle.shape(Tensor([7, 141, 512],"float32"), )
paddle.shape(Tensor([7, 142, 512],"float32"), )
paddle.shape(Tensor([7, 143, 512],"float32"), )
paddle.shape(Tensor([7, 144, 512],"float32"), )
paddle.shape(Tensor([7, 145, 512],"float32"), )
paddle.shape(Tensor([7, 146, 512],"float32"), )
paddle.shape(Tensor([7, 147, 512],"float32"), )
paddle.shape(Tensor([7, 148, 512],"float32"), )
paddle.shape(Tensor([7, 149, 512],"float32"), )
paddle.shape(Tensor([7, 15, 512],"float32"), )
paddle.shape(Tensor([7, 150, 512],"float32"), )
paddle.shape(Tensor([7, 151, 512],"float32"), )
paddle.shape(Tensor([7, 152, 512],"float32"), )
paddle.shape(Tensor([7, 153, 512],"float32"), )
paddle.shape(Tensor([7, 154, 512],"float32"), )
paddle.shape(Tensor([7, 155, 512],"float32"), )
paddle.shape(Tensor([7, 156, 512],"float32"), )
paddle.shape(Tensor([7, 157, 512],"float32"), )
paddle.shape(Tensor([7, 158, 512],"float32"), )
paddle.shape(Tensor([7, 159, 512],"float32"), )
paddle.shape(Tensor([7, 16, 512],"float32"), )
paddle.shape(Tensor([7, 160, 512],"float32"), )
paddle.shape(Tensor([7, 161, 512],"float32"), )
paddle.shape(Tensor([7, 162, 512],"float32"), )
paddle.shape(Tensor([7, 163, 512],"float32"), )
paddle.shape(Tensor([7, 164, 512],"float32"), )
paddle.shape(Tensor([7, 165, 1024],"float32"), )
paddle.shape(Tensor([7, 165, 512],"float32"), )
paddle.shape(Tensor([7, 166, 512],"float32"), )
paddle.shape(Tensor([7, 167, 512],"float32"), )
paddle.shape(Tensor([7, 168, 512],"float32"), )
paddle.shape(Tensor([7, 169, 512],"float32"), )
paddle.shape(Tensor([7, 17, 512],"float32"), )
paddle.shape(Tensor([7, 170, 512],"float32"), )
paddle.shape(Tensor([7, 171, 512],"float32"), )
paddle.shape(Tensor([7, 172, 512],"float32"), )
paddle.shape(Tensor([7, 173, 512],"float32"), )
paddle.shape(Tensor([7, 174, 512],"float32"), )
paddle.shape(Tensor([7, 175, 512],"float32"), )
paddle.shape(Tensor([7, 176, 512],"float32"), )
paddle.shape(Tensor([7, 177, 512],"float32"), )
paddle.shape(Tensor([7, 178, 512],"float32"), )
paddle.shape(Tensor([7, 179, 512],"float32"), )
paddle.shape(Tensor([7, 18, 512],"float32"), )
paddle.shape(Tensor([7, 180, 512],"float32"), )
paddle.shape(Tensor([7, 186, 1024],"float32"), )
paddle.shape(Tensor([7, 19, 512],"float32"), )
paddle.shape(Tensor([7, 2, 512],"float32"), )
paddle.shape(Tensor([7, 20, 512],"float32"), )
paddle.shape(Tensor([7, 206, 1024],"float32"), )
paddle.shape(Tensor([7, 209, 1024],"float32"), )
paddle.shape(Tensor([7, 21, 512],"float32"), )
paddle.shape(Tensor([7, 22, 512],"float32"), )
paddle.shape(Tensor([7, 220, 1024],"float32"), )
paddle.shape(Tensor([7, 23, 512],"float32"), )
paddle.shape(Tensor([7, 24, 512],"float32"), )
paddle.shape(Tensor([7, 25, 512],"float32"), )
paddle.shape(Tensor([7, 26, 512],"float32"), )
paddle.shape(Tensor([7, 27, 512],"float32"), )
paddle.shape(Tensor([7, 28, 512],"float32"), )
paddle.shape(Tensor([7, 286, 1024],"float32"), )
paddle.shape(Tensor([7, 29, 512],"float32"), )
paddle.shape(Tensor([7, 3, 512],"float32"), )
paddle.shape(Tensor([7, 30, 512],"float32"), )
paddle.shape(Tensor([7, 31, 512],"float32"), )
paddle.shape(Tensor([7, 32, 512],"float32"), )
paddle.shape(Tensor([7, 33, 512],"float32"), )
paddle.shape(Tensor([7, 34, 512],"float32"), )
paddle.shape(Tensor([7, 35, 512],"float32"), )
paddle.shape(Tensor([7, 36, 512],"float32"), )
paddle.shape(Tensor([7, 37, 512],"float32"), )
paddle.shape(Tensor([7, 38, 512],"float32"), )
paddle.shape(Tensor([7, 39, 512],"float32"), )
paddle.shape(Tensor([7, 4, 512],"float32"), )
paddle.shape(Tensor([7, 40, 512],"float32"), )
paddle.shape(Tensor([7, 41, 512],"float32"), )
paddle.shape(Tensor([7, 42, 512],"float32"), )
paddle.shape(Tensor([7, 43, 512],"float32"), )
paddle.shape(Tensor([7, 435, 1024],"float32"), )
paddle.shape(Tensor([7, 44, 512],"float32"), )
paddle.shape(Tensor([7, 45, 512],"float32"), )
paddle.shape(Tensor([7, 46, 512],"float32"), )
paddle.shape(Tensor([7, 47, 512],"float32"), )
paddle.shape(Tensor([7, 48, 512],"float32"), )
paddle.shape(Tensor([7, 49, 512],"float32"), )
paddle.shape(Tensor([7, 4],"float32"), )
paddle.shape(Tensor([7, 5, 512],"float32"), )
paddle.shape(Tensor([7, 50, 512],"float32"), )
paddle.shape(Tensor([7, 51, 512],"float32"), )
paddle.shape(Tensor([7, 52, 512],"float32"), )
paddle.shape(Tensor([7, 53, 512],"float32"), )
paddle.shape(Tensor([7, 54, 512],"float32"), )
paddle.shape(Tensor([7, 55, 512],"float32"), )
paddle.shape(Tensor([7, 56, 512],"float32"), )
paddle.shape(Tensor([7, 57, 512],"float32"), )
paddle.shape(Tensor([7, 58, 512],"float32"), )
paddle.shape(Tensor([7, 59, 512],"float32"), )
paddle.shape(Tensor([7, 6, 512],"float32"), )
paddle.shape(Tensor([7, 60, 512],"float32"), )
paddle.shape(Tensor([7, 61, 512],"float32"), )
paddle.shape(Tensor([7, 62, 512],"float32"), )
paddle.shape(Tensor([7, 63, 512],"float32"), )
paddle.shape(Tensor([7, 64, 512],"float32"), )
paddle.shape(Tensor([7, 65, 512],"float32"), )
paddle.shape(Tensor([7, 66, 512],"float32"), )
paddle.shape(Tensor([7, 67, 512],"float32"), )
paddle.shape(Tensor([7, 68, 512],"float32"), )
paddle.shape(Tensor([7, 69, 512],"float32"), )
paddle.shape(Tensor([7, 7, 512],"float32"), )
paddle.shape(Tensor([7, 70, 512],"float32"), )
paddle.shape(Tensor([7, 71, 512],"float32"), )
paddle.shape(Tensor([7, 72, 512],"float32"), )
paddle.shape(Tensor([7, 73, 512],"float32"), )
paddle.shape(Tensor([7, 74, 512],"float32"), )
paddle.shape(Tensor([7, 75, 512],"float32"), )
paddle.shape(Tensor([7, 76, 512],"float32"), )
paddle.shape(Tensor([7, 77, 512],"float32"), )
paddle.shape(Tensor([7, 78, 512],"float32"), )
paddle.shape(Tensor([7, 79, 512],"float32"), )
paddle.shape(Tensor([7, 8, 512],"float32"), )
paddle.shape(Tensor([7, 80, 512],"float32"), )
paddle.shape(Tensor([7, 81, 512],"float32"), )
paddle.shape(Tensor([7, 82, 512],"float32"), )
paddle.shape(Tensor([7, 83, 512],"float32"), )
paddle.shape(Tensor([7, 84, 512],"float32"), )
paddle.shape(Tensor([7, 85, 512],"float32"), )
paddle.shape(Tensor([7, 86, 512],"float32"), )
paddle.shape(Tensor([7, 87, 512],"float32"), )
paddle.shape(Tensor([7, 88, 512],"float32"), )
paddle.shape(Tensor([7, 89, 512],"float32"), )
paddle.shape(Tensor([7, 9, 512],"float32"), )
paddle.shape(Tensor([7, 90, 512],"float32"), )
paddle.shape(Tensor([7, 91, 512],"float32"), )
paddle.shape(Tensor([7, 92, 512],"float32"), )
paddle.shape(Tensor([7, 93, 512],"float32"), )
paddle.shape(Tensor([7, 94, 512],"float32"), )
paddle.shape(Tensor([7, 95, 512],"float32"), )
paddle.shape(Tensor([7, 96, 512],"float32"), )
paddle.shape(Tensor([7, 97, 512],"float32"), )
paddle.shape(Tensor([7, 98, 512],"float32"), )
paddle.shape(Tensor([7, 99, 512],"float32"), )
paddle.shape(Tensor([70, 4],"float32"), )
paddle.shape(Tensor([700, 4],"float32"), )
paddle.shape(Tensor([701, 4],"float32"), )
paddle.shape(Tensor([703, 4],"float32"), )
paddle.shape(Tensor([704, 4],"float32"), )
paddle.shape(Tensor([705, 4],"float32"), )
paddle.shape(Tensor([706, 4],"float32"), )
paddle.shape(Tensor([707, 4],"float32"), )
paddle.shape(Tensor([708, 4],"float32"), )
paddle.shape(Tensor([709, 4],"float32"), )
paddle.shape(Tensor([71, 4],"float32"), )
paddle.shape(Tensor([710, 4],"float32"), )
paddle.shape(Tensor([711, 4],"float32"), )
paddle.shape(Tensor([7143],"float32"), )
paddle.shape(Tensor([717, 4],"float32"), )
paddle.shape(Tensor([72, 4],"float32"), )
paddle.shape(Tensor([7200, 4],"float32"), )
paddle.shape(Tensor([721, 4],"float32"), )
paddle.shape(Tensor([722, 4],"float32"), )
paddle.shape(Tensor([726, 4],"float32"), )
paddle.shape(Tensor([728, 4],"float32"), )
paddle.shape(Tensor([729, 4],"float32"), )
paddle.shape(Tensor([73, 4],"float32"), )
paddle.shape(Tensor([730, 4],"float32"), )
paddle.shape(Tensor([731, 4],"float32"), )
paddle.shape(Tensor([733, 4],"float32"), )
paddle.shape(Tensor([734, 4],"float32"), )
paddle.shape(Tensor([736, 4],"float32"), )
paddle.shape(Tensor([74, 4],"float32"), )
paddle.shape(Tensor([7406],"float32"), )
paddle.shape(Tensor([741, 4],"float32"), )
paddle.shape(Tensor([742, 4],"float32"), )
paddle.shape(Tensor([743, 4],"float32"), )
paddle.shape(Tensor([745, 4],"float32"), )
paddle.shape(Tensor([746, 4],"float32"), )
paddle.shape(Tensor([747, 4],"float32"), )
paddle.shape(Tensor([748, 4],"float32"), )
paddle.shape(Tensor([75, 4],"float32"), )
paddle.shape(Tensor([750, 4],"float32"), )
paddle.shape(Tensor([751, 4],"float32"), )
paddle.shape(Tensor([752, 4],"float32"), )
paddle.shape(Tensor([753, 4],"float32"), )
paddle.shape(Tensor([754, 4],"float32"), )
paddle.shape(Tensor([755, 4],"float32"), )
paddle.shape(Tensor([757, 4],"float32"), )
paddle.shape(Tensor([759, 4],"float32"), )
paddle.shape(Tensor([76, 4],"float32"), )
paddle.shape(Tensor([760, 4],"float32"), )
paddle.shape(Tensor([761, 4],"float32"), )
paddle.shape(Tensor([762, 4],"float32"), )
paddle.shape(Tensor([763, 4],"float32"), )
paddle.shape(Tensor([766, 4],"float32"), )
paddle.shape(Tensor([768, 4],"float32"), )
paddle.shape(Tensor([769, 4],"float32"), )
paddle.shape(Tensor([77, 4],"float32"), )
paddle.shape(Tensor([770, 4],"float32"), )
paddle.shape(Tensor([771, 4],"float32"), )
paddle.shape(Tensor([772, 4],"float32"), )
paddle.shape(Tensor([774, 4],"float32"), )
paddle.shape(Tensor([775, 4],"float32"), )
paddle.shape(Tensor([776, 4],"float32"), )
paddle.shape(Tensor([777, 4],"float32"), )
paddle.shape(Tensor([78, 4],"float32"), )
paddle.shape(Tensor([780, 4],"float32"), )
paddle.shape(Tensor([781, 4],"float32"), )
paddle.shape(Tensor([783, 4],"float32"), )
paddle.shape(Tensor([784, 4],"float32"), )
paddle.shape(Tensor([786, 4],"float32"), )
paddle.shape(Tensor([787, 4],"float32"), )
paddle.shape(Tensor([788, 4],"float32"), )
paddle.shape(Tensor([79, 4],"float32"), )
paddle.shape(Tensor([790, 4],"float32"), )
paddle.shape(Tensor([791, 4],"float32"), )
paddle.shape(Tensor([792, 4],"float32"), )
paddle.shape(Tensor([795, 4],"float32"), )
paddle.shape(Tensor([797, 4],"float32"), )
paddle.shape(Tensor([799, 4],"float32"), )
paddle.shape(Tensor([7],"float64"), )
paddle.shape(Tensor([8, 1, 512],"float32"), )
paddle.shape(Tensor([8, 10, 512],"float32"), )
paddle.shape(Tensor([8, 100, 512],"float32"), )
paddle.shape(Tensor([8, 101, 512],"float32"), )
paddle.shape(Tensor([8, 10164, 68],"float16"), )
paddle.shape(Tensor([8, 10164, 68],"float32"), )
paddle.shape(Tensor([8, 102, 512],"float32"), )
paddle.shape(Tensor([8, 103, 512],"float32"), )
paddle.shape(Tensor([8, 104, 512],"float32"), )
paddle.shape(Tensor([8, 105, 512],"float32"), )
paddle.shape(Tensor([8, 106, 512],"float32"), )
paddle.shape(Tensor([8, 107, 512],"float32"), )
paddle.shape(Tensor([8, 108, 512],"float32"), )
paddle.shape(Tensor([8, 109, 512],"float32"), )
paddle.shape(Tensor([8, 11, 512],"float32"), )
paddle.shape(Tensor([8, 110, 512],"float32"), )
paddle.shape(Tensor([8, 111, 512],"float32"), )
paddle.shape(Tensor([8, 11109, 68],"float16"), )
paddle.shape(Tensor([8, 11109, 68],"float32"), )
paddle.shape(Tensor([8, 112, 512],"float32"), )
paddle.shape(Tensor([8, 113, 512],"float32"), )
paddle.shape(Tensor([8, 114, 512],"float32"), )
paddle.shape(Tensor([8, 115, 512],"float32"), )
paddle.shape(Tensor([8, 116, 512],"float32"), )
paddle.shape(Tensor([8, 117, 512],"float32"), )
paddle.shape(Tensor([8, 118, 512],"float32"), )
paddle.shape(Tensor([8, 119, 512],"float32"), )
paddle.shape(Tensor([8, 12, 512],"float32"), )
paddle.shape(Tensor([8, 120, 512],"float32"), )
paddle.shape(Tensor([8, 12096, 68],"float16"), )
paddle.shape(Tensor([8, 12096, 68],"float32"), )
paddle.shape(Tensor([8, 121, 512],"float32"), )
paddle.shape(Tensor([8, 122, 512],"float32"), )
paddle.shape(Tensor([8, 123, 512],"float32"), )
paddle.shape(Tensor([8, 124, 512],"float32"), )
paddle.shape(Tensor([8, 125, 512],"float32"), )
paddle.shape(Tensor([8, 126, 512],"float32"), )
paddle.shape(Tensor([8, 127, 512],"float32"), )
paddle.shape(Tensor([8, 128, 512],"float32"), )
paddle.shape(Tensor([8, 129, 512],"float32"), )
paddle.shape(Tensor([8, 12],"int64"), )
paddle.shape(Tensor([8, 13, 512],"float32"), )
paddle.shape(Tensor([8, 130, 512],"float32"), )
paddle.shape(Tensor([8, 131, 512],"float32"), )
paddle.shape(Tensor([8, 132, 512],"float32"), )
paddle.shape(Tensor([8, 133, 512],"float32"), )
paddle.shape(Tensor([8, 134, 512],"float32"), )
paddle.shape(Tensor([8, 135, 512],"float32"), )
paddle.shape(Tensor([8, 136, 512],"float32"), )
paddle.shape(Tensor([8, 137, 512],"float32"), )
paddle.shape(Tensor([8, 138, 512],"float32"), )
paddle.shape(Tensor([8, 139, 512],"float32"), )
paddle.shape(Tensor([8, 14, 512],"float32"), )
paddle.shape(Tensor([8, 140, 512],"float32"), )
paddle.shape(Tensor([8, 141, 512],"float32"), )
paddle.shape(Tensor([8, 142, 512],"float32"), )
paddle.shape(Tensor([8, 143, 512],"float32"), )
paddle.shape(Tensor([8, 144, 512],"float32"), )
paddle.shape(Tensor([8, 145, 512],"float32"), )
paddle.shape(Tensor([8, 146, 512],"float32"), )
paddle.shape(Tensor([8, 147, 512],"float32"), )
paddle.shape(Tensor([8, 148, 512],"float32"), )
paddle.shape(Tensor([8, 149, 512],"float32"), )
paddle.shape(Tensor([8, 15, 512],"float32"), )
paddle.shape(Tensor([8, 150, 512],"float32"), )
paddle.shape(Tensor([8, 151, 512],"float32"), )
paddle.shape(Tensor([8, 152, 512],"float32"), )
paddle.shape(Tensor([8, 153, 512],"float32"), )
paddle.shape(Tensor([8, 154, 512],"float32"), )
paddle.shape(Tensor([8, 155, 512],"float32"), )
paddle.shape(Tensor([8, 156, 512],"float32"), )
paddle.shape(Tensor([8, 157, 512],"float32"), )
paddle.shape(Tensor([8, 158, 512],"float32"), )
paddle.shape(Tensor([8, 159, 512],"float32"), )
paddle.shape(Tensor([8, 16, 512],"float32"), )
paddle.shape(Tensor([8, 160, 10, 10],"float32"), )
paddle.shape(Tensor([8, 160, 11, 11],"float32"), )
paddle.shape(Tensor([8, 160, 18, 18],"float32"), )
paddle.shape(Tensor([8, 160, 19, 19],"float32"), )
paddle.shape(Tensor([8, 160, 20, 20],"float32"), )
paddle.shape(Tensor([8, 160, 21, 21],"float32"), )
paddle.shape(Tensor([8, 160, 22, 22],"float32"), )
paddle.shape(Tensor([8, 160, 36, 36],"float32"), )
paddle.shape(Tensor([8, 160, 38, 38],"float32"), )
paddle.shape(Tensor([8, 160, 40, 40],"float32"), )
paddle.shape(Tensor([8, 160, 42, 42],"float32"), )
paddle.shape(Tensor([8, 160, 44, 44],"float32"), )
paddle.shape(Tensor([8, 160, 512],"float32"), )
paddle.shape(Tensor([8, 160, 72, 72],"float32"), )
paddle.shape(Tensor([8, 160, 76, 76],"float32"), )
paddle.shape(Tensor([8, 160, 80, 80],"float32"), )
paddle.shape(Tensor([8, 160, 84, 84],"float32"), )
paddle.shape(Tensor([8, 160, 88, 88],"float32"), )
paddle.shape(Tensor([8, 160, 9, 9],"float32"), )
paddle.shape(Tensor([8, 161, 512],"float32"), )
paddle.shape(Tensor([8, 162, 512],"float32"), )
paddle.shape(Tensor([8, 163, 512],"float32"), )
paddle.shape(Tensor([8, 164, 512],"float32"), )
paddle.shape(Tensor([8, 165, 512],"float32"), )
paddle.shape(Tensor([8, 166, 512],"float32"), )
paddle.shape(Tensor([8, 167, 512],"float32"), )
paddle.shape(Tensor([8, 168, 512],"float32"), )
paddle.shape(Tensor([8, 169, 512],"float32"), )
paddle.shape(Tensor([8, 17, 512],"float32"), )
paddle.shape(Tensor([8, 170, 512],"float32"), )
paddle.shape(Tensor([8, 171, 512],"float32"), )
paddle.shape(Tensor([8, 172, 512],"float32"), )
paddle.shape(Tensor([8, 173, 512],"float32"), )
paddle.shape(Tensor([8, 174, 512],"float32"), )
paddle.shape(Tensor([8, 175, 512],"float32"), )
paddle.shape(Tensor([8, 176, 512],"float32"), )
paddle.shape(Tensor([8, 177, 512],"float32"), )
paddle.shape(Tensor([8, 178, 512],"float32"), )
paddle.shape(Tensor([8, 179, 512],"float32"), )
paddle.shape(Tensor([8, 18, 512],"float32"), )
paddle.shape(Tensor([8, 180, 512],"float32"), )
paddle.shape(Tensor([8, 181, 512],"float32"), )
paddle.shape(Tensor([8, 182, 512],"float32"), )
paddle.shape(Tensor([8, 183, 512],"float32"), )
paddle.shape(Tensor([8, 184, 512],"float32"), )
paddle.shape(Tensor([8, 185, 512],"float32"), )
paddle.shape(Tensor([8, 186, 512],"float32"), )
paddle.shape(Tensor([8, 187, 512],"float32"), )
paddle.shape(Tensor([8, 188, 512],"float32"), )
paddle.shape(Tensor([8, 189, 512],"float32"), )
paddle.shape(Tensor([8, 19, 512],"float32"), )
paddle.shape(Tensor([8, 190, 512],"float32"), )
paddle.shape(Tensor([8, 191, 512],"float32"), )
paddle.shape(Tensor([8, 192, 512],"float32"), )
paddle.shape(Tensor([8, 193, 512],"float32"), )
paddle.shape(Tensor([8, 194, 512],"float32"), )
paddle.shape(Tensor([8, 195, 512],"float32"), )
paddle.shape(Tensor([8, 196, 512],"float32"), )
paddle.shape(Tensor([8, 197, 512],"float32"), )
paddle.shape(Tensor([8, 198, 512],"float32"), )
paddle.shape(Tensor([8, 199, 512],"float32"), )
paddle.shape(Tensor([8, 2, 512],"float32"), )
paddle.shape(Tensor([8, 20, 512],"float32"), )
paddle.shape(Tensor([8, 200, 4],"float32"), )
paddle.shape(Tensor([8, 200, 512],"float32"), )
paddle.shape(Tensor([8, 201, 512],"float32"), )
paddle.shape(Tensor([8, 202, 512],"float32"), )
paddle.shape(Tensor([8, 203, 512],"float32"), )
paddle.shape(Tensor([8, 204, 512],"float32"), )
paddle.shape(Tensor([8, 205, 512],"float32"), )
paddle.shape(Tensor([8, 206, 512],"float32"), )
paddle.shape(Tensor([8, 207, 512],"float32"), )
paddle.shape(Tensor([8, 208, 512],"float32"), )
paddle.shape(Tensor([8, 209, 512],"float32"), )
paddle.shape(Tensor([8, 21, 512],"float32"), )
paddle.shape(Tensor([8, 210, 512],"float32"), )
paddle.shape(Tensor([8, 2100, 68],"float16"), )
paddle.shape(Tensor([8, 2100, 68],"float32"), )
paddle.shape(Tensor([8, 211, 512],"float32"), )
paddle.shape(Tensor([8, 212, 512],"float32"), )
paddle.shape(Tensor([8, 213, 512],"float32"), )
paddle.shape(Tensor([8, 214, 512],"float32"), )
paddle.shape(Tensor([8, 215, 512],"float32"), )
paddle.shape(Tensor([8, 216, 512],"float32"), )
paddle.shape(Tensor([8, 217, 512],"float32"), )
paddle.shape(Tensor([8, 218, 512],"float32"), )
paddle.shape(Tensor([8, 219, 512],"float32"), )
paddle.shape(Tensor([8, 22, 512],"float32"), )
paddle.shape(Tensor([8, 220, 512],"float32"), )
paddle.shape(Tensor([8, 221, 512],"float32"), )
paddle.shape(Tensor([8, 222, 512],"float32"), )
paddle.shape(Tensor([8, 223, 512],"float32"), )
paddle.shape(Tensor([8, 224, 512],"float32"), )
paddle.shape(Tensor([8, 225, 512],"float32"), )
paddle.shape(Tensor([8, 226, 512],"float32"), )
paddle.shape(Tensor([8, 227, 512],"float32"), )
paddle.shape(Tensor([8, 228, 512],"float32"), )
paddle.shape(Tensor([8, 229, 512],"float32"), )
paddle.shape(Tensor([8, 23, 512],"float32"), )
paddle.shape(Tensor([8, 230, 512],"float32"), )
paddle.shape(Tensor([8, 231, 512],"float32"), )
paddle.shape(Tensor([8, 232, 512],"float32"), )
paddle.shape(Tensor([8, 233, 512],"float32"), )
paddle.shape(Tensor([8, 234, 512],"float32"), )
paddle.shape(Tensor([8, 235, 512],"float32"), )
paddle.shape(Tensor([8, 236, 512],"float32"), )
paddle.shape(Tensor([8, 237, 512],"float32"), )
paddle.shape(Tensor([8, 238, 512],"float32"), )
paddle.shape(Tensor([8, 239, 512],"float32"), )
paddle.shape(Tensor([8, 24, 512],"float32"), )
paddle.shape(Tensor([8, 240, 512],"float32"), )
paddle.shape(Tensor([8, 241, 512],"float32"), )
paddle.shape(Tensor([8, 242, 512],"float32"), )
paddle.shape(Tensor([8, 243, 512],"float32"), )
paddle.shape(Tensor([8, 244, 512],"float32"), )
paddle.shape(Tensor([8, 245, 512],"float32"), )
paddle.shape(Tensor([8, 246, 512],"float32"), )
paddle.shape(Tensor([8, 247, 512],"float32"), )
paddle.shape(Tensor([8, 248, 512],"float32"), )
paddle.shape(Tensor([8, 249, 512],"float32"), )
paddle.shape(Tensor([8, 25, 512],"float32"), )
paddle.shape(Tensor([8, 250, 512],"float32"), )
paddle.shape(Tensor([8, 251, 512],"float32"), )
paddle.shape(Tensor([8, 252, 512],"float32"), )
paddle.shape(Tensor([8, 253, 512],"float32"), )
paddle.shape(Tensor([8, 254, 512],"float32"), )
paddle.shape(Tensor([8, 2541, 68],"float16"), )
paddle.shape(Tensor([8, 2541, 68],"float32"), )
paddle.shape(Tensor([8, 255, 512],"float32"), )
paddle.shape(Tensor([8, 256, 512],"float32"), )
paddle.shape(Tensor([8, 257, 512],"float32"), )
paddle.shape(Tensor([8, 258, 512],"float32"), )
paddle.shape(Tensor([8, 259, 512],"float32"), )
paddle.shape(Tensor([8, 26, 1, 40, 1],"float32"), )
paddle.shape(Tensor([8, 26, 512],"float32"), )
paddle.shape(Tensor([8, 260, 512],"float32"), )
paddle.shape(Tensor([8, 261, 512],"float32"), )
paddle.shape(Tensor([8, 262, 512],"float32"), )
paddle.shape(Tensor([8, 263, 512],"float32"), )
paddle.shape(Tensor([8, 264, 512],"float32"), )
paddle.shape(Tensor([8, 265, 512],"float32"), )
paddle.shape(Tensor([8, 266, 512],"float32"), )
paddle.shape(Tensor([8, 267, 512],"float32"), )
paddle.shape(Tensor([8, 268, 512],"float32"), )
paddle.shape(Tensor([8, 269, 512],"float32"), )
paddle.shape(Tensor([8, 27, 512],"float32"), )
paddle.shape(Tensor([8, 270, 512],"float32"), )
paddle.shape(Tensor([8, 271, 512],"float32"), )
paddle.shape(Tensor([8, 272, 512],"float32"), )
paddle.shape(Tensor([8, 273, 512],"float32"), )
paddle.shape(Tensor([8, 274, 512],"float32"), )
paddle.shape(Tensor([8, 275, 512],"float32"), )
paddle.shape(Tensor([8, 276, 512],"float32"), )
paddle.shape(Tensor([8, 277, 512],"float32"), )
paddle.shape(Tensor([8, 278, 512],"float32"), )
paddle.shape(Tensor([8, 279, 512],"float32"), )
paddle.shape(Tensor([8, 28, 512],"float32"), )
paddle.shape(Tensor([8, 280, 512],"float32"), )
paddle.shape(Tensor([8, 281, 512],"float32"), )
paddle.shape(Tensor([8, 282, 512],"float32"), )
paddle.shape(Tensor([8, 283, 512],"float32"), )
paddle.shape(Tensor([8, 284, 512],"float32"), )
paddle.shape(Tensor([8, 285, 512],"float32"), )
paddle.shape(Tensor([8, 286, 512],"float32"), )
paddle.shape(Tensor([8, 287, 512],"float32"), )
paddle.shape(Tensor([8, 288, 512],"float32"), )
paddle.shape(Tensor([8, 289, 512],"float32"), )
paddle.shape(Tensor([8, 29, 512],"float32"), )
paddle.shape(Tensor([8, 290, 512],"float32"), )
paddle.shape(Tensor([8, 291, 512],"float32"), )
paddle.shape(Tensor([8, 292, 512],"float32"), )
paddle.shape(Tensor([8, 293, 512],"float32"), )
paddle.shape(Tensor([8, 3, 512],"float32"), )
paddle.shape(Tensor([8, 30, 512],"float32"), )
paddle.shape(Tensor([8, 3024, 68],"float16"), )
paddle.shape(Tensor([8, 3024, 68],"float32"), )
paddle.shape(Tensor([8, 31, 512],"float32"), )
paddle.shape(Tensor([8, 32, 512],"float32"), )
paddle.shape(Tensor([8, 32],"float64"), )
paddle.shape(Tensor([8, 33, 512],"float32"), )
paddle.shape(Tensor([8, 34, 512],"float32"), )
paddle.shape(Tensor([8, 35, 512],"float32"), )
paddle.shape(Tensor([8, 3549, 68],"float16"), )
paddle.shape(Tensor([8, 3549, 68],"float32"), )
paddle.shape(Tensor([8, 36, 512],"float32"), )
paddle.shape(Tensor([8, 37, 512],"float32"), )
paddle.shape(Tensor([8, 38, 512],"float32"), )
paddle.shape(Tensor([8, 39, 512],"float32"), )
paddle.shape(Tensor([8, 4, 512],"float32"), )
paddle.shape(Tensor([8, 40, 512],"float32"), )
paddle.shape(Tensor([8, 41, 512],"float32"), )
paddle.shape(Tensor([8, 4116, 68],"float16"), )
paddle.shape(Tensor([8, 4116, 68],"float32"), )
paddle.shape(Tensor([8, 42, 512],"float32"), )
paddle.shape(Tensor([8, 43, 512],"float32"), )
paddle.shape(Tensor([8, 44, 512],"float32"), )
paddle.shape(Tensor([8, 45, 512],"float32"), )
paddle.shape(Tensor([8, 46, 512],"float32"), )
paddle.shape(Tensor([8, 47, 512],"float32"), )
paddle.shape(Tensor([8, 4725, 68],"float16"), )
paddle.shape(Tensor([8, 4725, 68],"float32"), )
paddle.shape(Tensor([8, 48, 512],"float32"), )
paddle.shape(Tensor([8, 49, 512],"float32"), )
paddle.shape(Tensor([8, 4],"float32"), )
paddle.shape(Tensor([8, 5, 512],"float32"), )
paddle.shape(Tensor([8, 50, 512],"float32"), )
paddle.shape(Tensor([8, 51, 512],"float32"), )
paddle.shape(Tensor([8, 52, 512],"float32"), )
paddle.shape(Tensor([8, 53, 512],"float32"), )
paddle.shape(Tensor([8, 5376, 68],"float16"), )
paddle.shape(Tensor([8, 5376, 68],"float32"), )
paddle.shape(Tensor([8, 54, 512],"float32"), )
paddle.shape(Tensor([8, 55, 512],"float32"), )
paddle.shape(Tensor([8, 56, 512],"float32"), )
paddle.shape(Tensor([8, 57, 512],"float32"), )
paddle.shape(Tensor([8, 58, 512],"float32"), )
paddle.shape(Tensor([8, 59, 512],"float32"), )
paddle.shape(Tensor([8, 6, 512],"float32"), )
paddle.shape(Tensor([8, 60, 512],"float32"), )
paddle.shape(Tensor([8, 6069, 68],"float16"), )
paddle.shape(Tensor([8, 6069, 68],"float32"), )
paddle.shape(Tensor([8, 61, 512],"float32"), )
paddle.shape(Tensor([8, 62, 512],"float32"), )
paddle.shape(Tensor([8, 63, 512],"float32"), )
paddle.shape(Tensor([8, 64, 512],"float32"), )
paddle.shape(Tensor([8, 65, 512],"float32"), )
paddle.shape(Tensor([8, 66, 512],"float32"), )
paddle.shape(Tensor([8, 67, 512],"float32"), )
paddle.shape(Tensor([8, 68, 512],"float32"), )
paddle.shape(Tensor([8, 6804, 68],"float16"), )
paddle.shape(Tensor([8, 6804, 68],"float32"), )
paddle.shape(Tensor([8, 69, 512],"float32"), )
paddle.shape(Tensor([8, 7, 512],"float32"), )
paddle.shape(Tensor([8, 70, 512],"float32"), )
paddle.shape(Tensor([8, 71, 512],"float32"), )
paddle.shape(Tensor([8, 72, 512],"float32"), )
paddle.shape(Tensor([8, 73, 512],"float32"), )
paddle.shape(Tensor([8, 74, 512],"float32"), )
paddle.shape(Tensor([8, 75, 512],"float32"), )
paddle.shape(Tensor([8, 7581, 68],"float16"), )
paddle.shape(Tensor([8, 7581, 68],"float32"), )
paddle.shape(Tensor([8, 76, 512],"float32"), )
paddle.shape(Tensor([8, 77, 512],"float32"), )
paddle.shape(Tensor([8, 78, 512],"float32"), )
paddle.shape(Tensor([8, 79, 512],"float32"), )
paddle.shape(Tensor([8, 8, 512],"float32"), )
paddle.shape(Tensor([8, 80, 512],"float32"), )
paddle.shape(Tensor([8, 81, 512],"float32"), )
paddle.shape(Tensor([8, 82, 512],"float32"), )
paddle.shape(Tensor([8, 83, 512],"float32"), )
paddle.shape(Tensor([8, 84, 512],"float32"), )
paddle.shape(Tensor([8, 8400, 68],"float16"), )
paddle.shape(Tensor([8, 8400, 68],"float32"), )
paddle.shape(Tensor([8, 85, 512],"float32"), )
paddle.shape(Tensor([8, 86, 512],"float32"), )
paddle.shape(Tensor([8, 87, 512],"float32"), )
paddle.shape(Tensor([8, 88, 512],"float32"), )
paddle.shape(Tensor([8, 89, 512],"float32"), )
paddle.shape(Tensor([8, 9, 512],"float32"), )
paddle.shape(Tensor([8, 90, 512],"float32"), )
paddle.shape(Tensor([8, 91, 512],"float32"), )
paddle.shape(Tensor([8, 92, 512],"float32"), )
paddle.shape(Tensor([8, 9261, 68],"float16"), )
paddle.shape(Tensor([8, 9261, 68],"float32"), )
paddle.shape(Tensor([8, 93, 512],"float32"), )
paddle.shape(Tensor([8, 94, 512],"float32"), )
paddle.shape(Tensor([8, 95, 512],"float32"), )
paddle.shape(Tensor([8, 96, 512],"float32"), )
paddle.shape(Tensor([8, 97, 512],"float32"), )
paddle.shape(Tensor([8, 98, 512],"float32"), )
paddle.shape(Tensor([8, 99, 512],"float32"), )
paddle.shape(Tensor([80, 4],"float32"), )
paddle.shape(Tensor([800, 4],"float32"), )
paddle.shape(Tensor([800],"float16"), )
paddle.shape(Tensor([800],"float32"), )
paddle.shape(Tensor([802, 4],"float32"), )
paddle.shape(Tensor([803, 4],"float32"), )
paddle.shape(Tensor([804, 4],"float32"), )
paddle.shape(Tensor([805, 4],"float32"), )
paddle.shape(Tensor([806, 4],"float32"), )
paddle.shape(Tensor([807, 4],"float32"), )
paddle.shape(Tensor([809, 4],"float32"), )
paddle.shape(Tensor([81, 4],"float32"), )
paddle.shape(Tensor([810, 4],"float32"), )
paddle.shape(Tensor([811, 4],"float32"), )
paddle.shape(Tensor([812, 4],"float32"), )
paddle.shape(Tensor([814, 4],"float32"), )
paddle.shape(Tensor([815, 4],"float32"), )
paddle.shape(Tensor([816, 4],"float32"), )
paddle.shape(Tensor([817, 4],"float32"), )
paddle.shape(Tensor([818, 4],"float32"), )
paddle.shape(Tensor([819, 4],"float32"), )
paddle.shape(Tensor([82, 4],"float32"), )
paddle.shape(Tensor([821, 4],"float32"), )
paddle.shape(Tensor([822, 4],"float32"), )
paddle.shape(Tensor([823, 4],"float32"), )
paddle.shape(Tensor([824, 4],"float32"), )
paddle.shape(Tensor([826, 4],"float32"), )
paddle.shape(Tensor([827, 4],"float32"), )
paddle.shape(Tensor([83, 4],"float32"), )
paddle.shape(Tensor([830, 4],"float32"), )
paddle.shape(Tensor([831, 4],"float32"), )
paddle.shape(Tensor([832, 4],"float32"), )
paddle.shape(Tensor([833, 4],"float32"), )
paddle.shape(Tensor([834, 4],"float32"), )
paddle.shape(Tensor([835, 4],"float32"), )
paddle.shape(Tensor([836, 4],"float32"), )
paddle.shape(Tensor([837, 4],"float32"), )
paddle.shape(Tensor([838, 4],"float32"), )
paddle.shape(Tensor([839, 4],"float32"), )
paddle.shape(Tensor([84, 4],"float32"), )
paddle.shape(Tensor([840, 4],"float32"), )
paddle.shape(Tensor([841, 4],"float32"), )
paddle.shape(Tensor([842, 4],"float32"), )
paddle.shape(Tensor([849, 4],"float32"), )
paddle.shape(Tensor([85, 4],"float32"), )
paddle.shape(Tensor([852, 4],"float32"), )
paddle.shape(Tensor([853, 4],"float32"), )
paddle.shape(Tensor([854, 4],"float32"), )
paddle.shape(Tensor([855, 4],"float32"), )
paddle.shape(Tensor([8550, 4],"float32"), )
paddle.shape(Tensor([857, 4],"float32"), )
paddle.shape(Tensor([859, 4],"float32"), )
paddle.shape(Tensor([85932, 4],"float32"), )
paddle.shape(Tensor([86, 4],"float32"), )
paddle.shape(Tensor([860, 4],"float32"), )
paddle.shape(Tensor([861, 4],"float32"), )
paddle.shape(Tensor([862, 4],"float32"), )
paddle.shape(Tensor([865, 4],"float32"), )
paddle.shape(Tensor([866, 4],"float32"), )
paddle.shape(Tensor([87, 4],"float32"), )
paddle.shape(Tensor([872, 4],"float32"), )
paddle.shape(Tensor([873, 4],"float32"), )
paddle.shape(Tensor([875, 4],"float32"), )
paddle.shape(Tensor([876, 4],"float32"), )
paddle.shape(Tensor([877, 4],"float32"), )
paddle.shape(Tensor([878, 4],"float32"), )
paddle.shape(Tensor([879, 4],"float32"), )
paddle.shape(Tensor([88, 4],"float32"), )
paddle.shape(Tensor([880, 4],"float32"), )
paddle.shape(Tensor([882, 4],"float32"), )
paddle.shape(Tensor([883, 4],"float32"), )
paddle.shape(Tensor([885, 4],"float32"), )
paddle.shape(Tensor([886, 4],"float32"), )
paddle.shape(Tensor([889, 4],"float32"), )
paddle.shape(Tensor([88],"int64"), )
paddle.shape(Tensor([89, 4],"float32"), )
paddle.shape(Tensor([890, 4],"float32"), )
paddle.shape(Tensor([891, 4],"float32"), )
paddle.shape(Tensor([893, 4],"float32"), )
paddle.shape(Tensor([895, 4],"float32"), )
paddle.shape(Tensor([896, 4],"float32"), )
paddle.shape(Tensor([899, 4],"float32"), )
paddle.shape(Tensor([9, 1, 512],"float32"), )
paddle.shape(Tensor([9, 10, 512],"float32"), )
paddle.shape(Tensor([9, 100, 512],"float32"), )
paddle.shape(Tensor([9, 101, 512],"float32"), )
paddle.shape(Tensor([9, 102, 512],"float32"), )
paddle.shape(Tensor([9, 103, 512],"float32"), )
paddle.shape(Tensor([9, 104, 512],"float32"), )
paddle.shape(Tensor([9, 105, 512],"float32"), )
paddle.shape(Tensor([9, 106, 512],"float32"), )
paddle.shape(Tensor([9, 107, 512],"float32"), )
paddle.shape(Tensor([9, 108, 512],"float32"), )
paddle.shape(Tensor([9, 109, 512],"float32"), )
paddle.shape(Tensor([9, 11, 512],"float32"), )
paddle.shape(Tensor([9, 110, 512],"float32"), )
paddle.shape(Tensor([9, 111, 512],"float32"), )
paddle.shape(Tensor([9, 112, 512],"float32"), )
paddle.shape(Tensor([9, 113, 512],"float32"), )
paddle.shape(Tensor([9, 114, 512],"float32"), )
paddle.shape(Tensor([9, 115, 512],"float32"), )
paddle.shape(Tensor([9, 116, 512],"float32"), )
paddle.shape(Tensor([9, 117, 512],"float32"), )
paddle.shape(Tensor([9, 118, 512],"float32"), )
paddle.shape(Tensor([9, 119, 512],"float32"), )
paddle.shape(Tensor([9, 12, 512],"float32"), )
paddle.shape(Tensor([9, 13, 512],"float32"), )
paddle.shape(Tensor([9, 14, 512],"float32"), )
paddle.shape(Tensor([9, 15, 512],"float32"), )
paddle.shape(Tensor([9, 16, 512],"float32"), )
paddle.shape(Tensor([9, 17, 512],"float32"), )
paddle.shape(Tensor([9, 18, 512],"float32"), )
paddle.shape(Tensor([9, 19, 512],"float32"), )
paddle.shape(Tensor([9, 2, 512],"float32"), )
paddle.shape(Tensor([9, 20, 512],"float32"), )
paddle.shape(Tensor([9, 21, 512],"float32"), )
paddle.shape(Tensor([9, 22, 512],"float32"), )
paddle.shape(Tensor([9, 23, 512],"float32"), )
paddle.shape(Tensor([9, 24, 512],"float32"), )
paddle.shape(Tensor([9, 25, 512],"float32"), )
paddle.shape(Tensor([9, 26, 512],"float32"), )
paddle.shape(Tensor([9, 27, 512],"float32"), )
paddle.shape(Tensor([9, 28, 512],"float32"), )
paddle.shape(Tensor([9, 29, 512],"float32"), )
paddle.shape(Tensor([9, 3, 512],"float32"), )
paddle.shape(Tensor([9, 30, 512],"float32"), )
paddle.shape(Tensor([9, 31, 512],"float32"), )
paddle.shape(Tensor([9, 32, 512],"float32"), )
paddle.shape(Tensor([9, 33, 512],"float32"), )
paddle.shape(Tensor([9, 34, 512],"float32"), )
paddle.shape(Tensor([9, 35, 512],"float32"), )
paddle.shape(Tensor([9, 36, 512],"float32"), )
paddle.shape(Tensor([9, 37, 512],"float32"), )
paddle.shape(Tensor([9, 38, 512],"float32"), )
paddle.shape(Tensor([9, 39, 512],"float32"), )
paddle.shape(Tensor([9, 4, 512],"float32"), )
paddle.shape(Tensor([9, 40, 512],"float32"), )
paddle.shape(Tensor([9, 41, 512],"float32"), )
paddle.shape(Tensor([9, 42, 512],"float32"), )
paddle.shape(Tensor([9, 43, 512],"float32"), )
paddle.shape(Tensor([9, 44, 512],"float32"), )
paddle.shape(Tensor([9, 45, 512],"float32"), )
paddle.shape(Tensor([9, 46, 512],"float32"), )
paddle.shape(Tensor([9, 47, 512],"float32"), )
paddle.shape(Tensor([9, 48, 512],"float32"), )
paddle.shape(Tensor([9, 49, 512],"float32"), )
paddle.shape(Tensor([9, 4],"float32"), )
paddle.shape(Tensor([9, 5, 512],"float32"), )
paddle.shape(Tensor([9, 50, 512],"float32"), )
paddle.shape(Tensor([9, 51, 512],"float32"), )
paddle.shape(Tensor([9, 52, 512],"float32"), )
paddle.shape(Tensor([9, 53, 512],"float32"), )
paddle.shape(Tensor([9, 54, 512],"float32"), )
paddle.shape(Tensor([9, 55, 512],"float32"), )
paddle.shape(Tensor([9, 56, 512],"float32"), )
paddle.shape(Tensor([9, 57, 512],"float32"), )
paddle.shape(Tensor([9, 58, 512],"float32"), )
paddle.shape(Tensor([9, 59, 512],"float32"), )
paddle.shape(Tensor([9, 6, 512],"float32"), )
paddle.shape(Tensor([9, 60, 512],"float32"), )
paddle.shape(Tensor([9, 61, 512],"float32"), )
paddle.shape(Tensor([9, 62, 512],"float32"), )
paddle.shape(Tensor([9, 63, 512],"float32"), )
paddle.shape(Tensor([9, 64, 512],"float32"), )
paddle.shape(Tensor([9, 65, 512],"float32"), )
paddle.shape(Tensor([9, 66, 512],"float32"), )
paddle.shape(Tensor([9, 67, 512],"float32"), )
paddle.shape(Tensor([9, 68, 512],"float32"), )
paddle.shape(Tensor([9, 69, 512],"float32"), )
paddle.shape(Tensor([9, 7, 512],"float32"), )
paddle.shape(Tensor([9, 70, 512],"float32"), )
paddle.shape(Tensor([9, 71, 512],"float32"), )
paddle.shape(Tensor([9, 72, 512],"float32"), )
paddle.shape(Tensor([9, 73, 512],"float32"), )
paddle.shape(Tensor([9, 74, 512],"float32"), )
paddle.shape(Tensor([9, 75, 512],"float32"), )
paddle.shape(Tensor([9, 76, 512],"float32"), )
paddle.shape(Tensor([9, 77, 512],"float32"), )
paddle.shape(Tensor([9, 78, 512],"float32"), )
paddle.shape(Tensor([9, 79, 512],"float32"), )
paddle.shape(Tensor([9, 8, 512],"float32"), )
paddle.shape(Tensor([9, 80, 512],"float32"), )
paddle.shape(Tensor([9, 81, 512],"float32"), )
paddle.shape(Tensor([9, 82, 512],"float32"), )
paddle.shape(Tensor([9, 83, 512],"float32"), )
paddle.shape(Tensor([9, 84, 512],"float32"), )
paddle.shape(Tensor([9, 85, 512],"float32"), )
paddle.shape(Tensor([9, 86, 512],"float32"), )
paddle.shape(Tensor([9, 87, 512],"float32"), )
paddle.shape(Tensor([9, 88, 512],"float32"), )
paddle.shape(Tensor([9, 89, 512],"float32"), )
paddle.shape(Tensor([9, 9, 512],"float32"), )
paddle.shape(Tensor([9, 90, 512],"float32"), )
paddle.shape(Tensor([9, 91, 512],"float32"), )
paddle.shape(Tensor([9, 92, 512],"float32"), )
paddle.shape(Tensor([9, 93, 512],"float32"), )
paddle.shape(Tensor([9, 94, 512],"float32"), )
paddle.shape(Tensor([9, 95, 512],"float32"), )
paddle.shape(Tensor([9, 96, 512],"float32"), )
paddle.shape(Tensor([9, 97, 512],"float32"), )
paddle.shape(Tensor([9, 98, 512],"float32"), )
paddle.shape(Tensor([9, 99, 512],"float32"), )
paddle.shape(Tensor([90, 4],"float32"), )
paddle.shape(Tensor([901, 4],"float32"), )
paddle.shape(Tensor([902, 4],"float32"), )
paddle.shape(Tensor([903, 4],"float32"), )
paddle.shape(Tensor([904, 4],"float32"), )
paddle.shape(Tensor([905, 4],"float32"), )
paddle.shape(Tensor([906, 4],"float32"), )
paddle.shape(Tensor([907, 4],"float32"), )
paddle.shape(Tensor([908, 4],"float32"), )
paddle.shape(Tensor([91, 4],"float32"), )
paddle.shape(Tensor([912, 4],"float32"), )
paddle.shape(Tensor([913, 4],"float32"), )
paddle.shape(Tensor([915, 4],"float32"), )
paddle.shape(Tensor([918, 4],"float32"), )
paddle.shape(Tensor([919, 4],"float32"), )
paddle.shape(Tensor([92, 4],"float32"), )
paddle.shape(Tensor([921, 4],"float32"), )
paddle.shape(Tensor([922, 4],"float32"), )
paddle.shape(Tensor([924, 4],"float32"), )
paddle.shape(Tensor([925, 4],"float32"), )
paddle.shape(Tensor([926, 4],"float32"), )
paddle.shape(Tensor([927, 4],"float32"), )
paddle.shape(Tensor([93, 4],"float32"), )
paddle.shape(Tensor([930, 4],"float32"), )
paddle.shape(Tensor([931, 4],"float32"), )
paddle.shape(Tensor([932, 4],"float32"), )
paddle.shape(Tensor([934, 4],"float32"), )
paddle.shape(Tensor([935, 4],"float32"), )
paddle.shape(Tensor([936, 4],"float32"), )
paddle.shape(Tensor([938, 4],"float32"), )
paddle.shape(Tensor([94, 4],"float32"), )
paddle.shape(Tensor([941, 4],"float32"), )
paddle.shape(Tensor([942, 4],"float32"), )
paddle.shape(Tensor([943, 4],"float32"), )
paddle.shape(Tensor([944, 4],"float32"), )
paddle.shape(Tensor([946, 4],"float32"), )
paddle.shape(Tensor([949, 4],"float32"), )
paddle.shape(Tensor([95, 4],"float32"), )
paddle.shape(Tensor([954, 4],"float32"), )
paddle.shape(Tensor([95480, 4],"float32"), )
paddle.shape(Tensor([955, 4],"float32"), )
paddle.shape(Tensor([956, 4],"float32"), )
paddle.shape(Tensor([957, 4],"float32"), )
paddle.shape(Tensor([959, 4],"float32"), )
paddle.shape(Tensor([96, 4],"float32"), )
paddle.shape(Tensor([960, 4],"float32"), )
paddle.shape(Tensor([961, 4],"float32"), )
paddle.shape(Tensor([962, 4],"float32"), )
paddle.shape(Tensor([963, 4],"float32"), )
paddle.shape(Tensor([964, 4],"float32"), )
paddle.shape(Tensor([967, 4],"float32"), )
paddle.shape(Tensor([97, 4],"float32"), )
paddle.shape(Tensor([970, 4],"float32"), )
paddle.shape(Tensor([972, 4],"float32"), )
paddle.shape(Tensor([975, 4],"float32"), )
paddle.shape(Tensor([976, 4],"float32"), )
paddle.shape(Tensor([977, 4],"float32"), )
paddle.shape(Tensor([979, 4],"float32"), )
paddle.shape(Tensor([98, 4],"float32"), )
paddle.shape(Tensor([980, 4],"float32"), )
paddle.shape(Tensor([981, 4],"float32"), )
paddle.shape(Tensor([982, 4],"float32"), )
paddle.shape(Tensor([984, 4],"float32"), )
paddle.shape(Tensor([985, 4],"float32"), )
paddle.shape(Tensor([987, 4],"float32"), )
paddle.shape(Tensor([988, 4],"float32"), )
paddle.shape(Tensor([989, 4],"float32"), )
paddle.shape(Tensor([99, 4],"float32"), )
paddle.shape(Tensor([991, 4],"float32"), )
paddle.shape(Tensor([996, 4],"float32"), )
paddle.shape(Tensor([99],"int64"), )
paddle.shape(Tensor([],"float32"), )
paddle.shape(Tensor([],"int64"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([100],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([104],"float32"), Tensor([104],"float32"), )
paddle.meshgrid(Tensor([104],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([104],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([104],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([104],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([104],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([104],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([104],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([108],"float32"), Tensor([108],"float32"), )
paddle.meshgrid(Tensor([108],"float32"), Tensor([112],"float32"), )
paddle.meshgrid(Tensor([108],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([108],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([108],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([108],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([108],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([108],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([108],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([108],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([108],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([108],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([10],"float32"), Tensor([10],"float32"), )
paddle.meshgrid(Tensor([10],"float32"), Tensor([14],"float32"), )
paddle.meshgrid(Tensor([10],"float32"), Tensor([15],"float32"), )
paddle.meshgrid(Tensor([10],"float32"), Tensor([16],"float32"), )
paddle.meshgrid(Tensor([10],"float32"), Tensor([8],"float32"), )
paddle.meshgrid(Tensor([10],"int32"), Tensor([8],"int32"), )
paddle.meshgrid(Tensor([10],"int64"), Tensor([15],"int64"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([112],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([116],"float32"), Tensor([116],"float32"), )
paddle.meshgrid(Tensor([116],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([116],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([116],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([116],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([116],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([116],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([11],"float32"), Tensor([11],"float32"), )
paddle.meshgrid(Tensor([11],"float32"), Tensor([15],"float32"), )
paddle.meshgrid(Tensor([11],"float32"), Tensor([16],"float32"), )
paddle.meshgrid(Tensor([11],"float32"), Tensor([17],"float32"), )
paddle.meshgrid(Tensor([11],"float32"), Tensor([18],"float32"), )
paddle.meshgrid(Tensor([11],"float32"), Tensor([19],"float32"), )
paddle.meshgrid(Tensor([11],"float32"), Tensor([21],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([104],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([112],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([88],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([108],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([112],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([92],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([96],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([108],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([112],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([96],"float32"), )
paddle.meshgrid(Tensor([12],"float32"), Tensor([12],"float32"), )
paddle.meshgrid(Tensor([12],"float32"), Tensor([15],"float32"), )
paddle.meshgrid(Tensor([12],"float32"), Tensor([16],"float32"), )
paddle.meshgrid(Tensor([12],"float32"), Tensor([17],"float32"), )
paddle.meshgrid(Tensor([12],"float32"), Tensor([18],"float32"), )
paddle.meshgrid(Tensor([12],"float32"), Tensor([19],"float32"), )
paddle.meshgrid(Tensor([12],"float32"), Tensor([20],"float32"), )
paddle.meshgrid(Tensor([12],"float32"), Tensor([21],"float32"), )
paddle.meshgrid(Tensor([12],"float32"), Tensor([9],"float32"), )
paddle.meshgrid(Tensor([12],"int32"), Tensor([9],"int32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([100],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([104],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([108],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([96],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([100],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([108],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([112],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([116],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([88],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([96],"float32"), )
paddle.meshgrid(Tensor([13],"float32"), Tensor([10],"float32"), )
paddle.meshgrid(Tensor([13],"float32"), Tensor([13],"float32"), )
paddle.meshgrid(Tensor([13],"float32"), Tensor([15],"float32"), )
paddle.meshgrid(Tensor([13],"float32"), Tensor([16],"float32"), )
paddle.meshgrid(Tensor([13],"float32"), Tensor([17],"float32"), )
paddle.meshgrid(Tensor([13],"float32"), Tensor([18],"float32"), )
paddle.meshgrid(Tensor([13],"float32"), Tensor([19],"float32"), )
paddle.meshgrid(Tensor([13],"float32"), Tensor([20],"float32"), )
paddle.meshgrid(Tensor([13],"float32"), Tensor([21],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([112],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([92],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([96],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([100],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([108],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([112],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([116],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([200],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([96],"float32"), )
paddle.meshgrid(Tensor([144],"int32"), Tensor([200],"int32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([96],"float32"), )
paddle.meshgrid(Tensor([14],"float32"), Tensor([11],"float32"), )
paddle.meshgrid(Tensor([14],"float32"), Tensor([14],"float32"), )
paddle.meshgrid(Tensor([14],"float32"), Tensor([15],"float32"), )
paddle.meshgrid(Tensor([14],"float32"), Tensor([16],"float32"), )
paddle.meshgrid(Tensor([14],"float32"), Tensor([17],"float32"), )
paddle.meshgrid(Tensor([14],"float32"), Tensor([18],"float32"), )
paddle.meshgrid(Tensor([14],"float32"), Tensor([19],"float32"), )
paddle.meshgrid(Tensor([14],"float32"), Tensor([20],"float32"), )
paddle.meshgrid(Tensor([14],"float32"), Tensor([21],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([100],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([112],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([156],"float32"), Tensor([112],"float32"), )
paddle.meshgrid(Tensor([156],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([156],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([156],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([156],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([156],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([15],"float32"), Tensor([11],"float32"), )
paddle.meshgrid(Tensor([15],"float32"), Tensor([13],"float32"), )
paddle.meshgrid(Tensor([15],"float32"), Tensor([14],"float32"), )
paddle.meshgrid(Tensor([15],"float32"), Tensor([15],"float32"), )
paddle.meshgrid(Tensor([15],"float32"), Tensor([16],"float32"), )
paddle.meshgrid(Tensor([15],"float32"), Tensor([17],"float32"), )
paddle.meshgrid(Tensor([15],"float32"), Tensor([18],"float32"), )
paddle.meshgrid(Tensor([15],"float32"), Tensor([19],"float32"), )
paddle.meshgrid(Tensor([15],"float32"), Tensor([20],"float32"), )
paddle.meshgrid(Tensor([15],"float32"), Tensor([21],"float32"), )
paddle.meshgrid(Tensor([160],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([160],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([160],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([160],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([160],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([160],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([160],"float32"), Tensor([216],"float32"), )
paddle.meshgrid(Tensor([160],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([160],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([164],"float32"), Tensor([100],"float32"), )
paddle.meshgrid(Tensor([164],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([164],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([164],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([164],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([164],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([164],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([168],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([168],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([168],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([168],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([168],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([168],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([168],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([168],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([168],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([168],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([168],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([168],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([16],"float32"), Tensor([10],"float32"), )
paddle.meshgrid(Tensor([16],"float32"), Tensor([11],"float32"), )
paddle.meshgrid(Tensor([16],"float32"), Tensor([12],"float32"), )
paddle.meshgrid(Tensor([16],"float32"), Tensor([14],"float32"), )
paddle.meshgrid(Tensor([16],"float32"), Tensor([15],"float32"), )
paddle.meshgrid(Tensor([16],"float32"), Tensor([16],"float32"), )
paddle.meshgrid(Tensor([16],"float32"), Tensor([16],"float32"), indexing="ij", )
paddle.meshgrid(Tensor([16],"float32"), Tensor([17],"float32"), )
paddle.meshgrid(Tensor([16],"float32"), Tensor([18],"float32"), )
paddle.meshgrid(Tensor([16],"float32"), Tensor([19],"float32"), )
paddle.meshgrid(Tensor([16],"float32"), Tensor([20],"float32"), )
paddle.meshgrid(Tensor([16],"float32"), Tensor([21],"float32"), )
paddle.meshgrid(Tensor([16],"int64"), Tensor([16],"int64"), )
paddle.meshgrid(Tensor([176],"float32"), Tensor([176],"float32"), )
paddle.meshgrid(Tensor([176],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([176],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([176],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([176],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([176],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([176],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([176],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([17],"float32"), Tensor([11],"float32"), )
paddle.meshgrid(Tensor([17],"float32"), Tensor([12],"float32"), )
paddle.meshgrid(Tensor([17],"float32"), Tensor([13],"float32"), )
paddle.meshgrid(Tensor([17],"float32"), Tensor([14],"float32"), )
paddle.meshgrid(Tensor([17],"float32"), Tensor([15],"float32"), )
paddle.meshgrid(Tensor([17],"float32"), Tensor([16],"float32"), )
paddle.meshgrid(Tensor([17],"float32"), Tensor([17],"float32"), )
paddle.meshgrid(Tensor([17],"float32"), Tensor([18],"float32"), )
paddle.meshgrid(Tensor([17],"float32"), Tensor([19],"float32"), )
paddle.meshgrid(Tensor([17],"float32"), Tensor([20],"float32"), )
paddle.meshgrid(Tensor([17],"float32"), Tensor([21],"float32"), )
paddle.meshgrid(Tensor([184],"float32"), Tensor([184],"float32"), )
paddle.meshgrid(Tensor([184],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([184],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([184],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([184],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([184],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([184],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([184],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([184],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([184],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(Tensor([184],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([184],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([184],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([18],"float32"), Tensor([12],"float32"), )
paddle.meshgrid(Tensor([18],"float32"), Tensor([13],"float32"), )
paddle.meshgrid(Tensor([18],"float32"), Tensor([14],"float32"), )
paddle.meshgrid(Tensor([18],"float32"), Tensor([15],"float32"), )
paddle.meshgrid(Tensor([18],"float32"), Tensor([16],"float32"), )
paddle.meshgrid(Tensor([18],"float32"), Tensor([17],"float32"), )
paddle.meshgrid(Tensor([18],"float32"), Tensor([18],"float32"), )
paddle.meshgrid(Tensor([18],"float32"), Tensor([19],"float32"), )
paddle.meshgrid(Tensor([18],"float32"), Tensor([20],"float32"), )
paddle.meshgrid(Tensor([18],"float32"), Tensor([21],"float32"), )
paddle.meshgrid(Tensor([18],"float32"), Tensor([25],"float32"), )
paddle.meshgrid(Tensor([18],"int32"), Tensor([25],"int32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([192],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([192],"int32"), Tensor([144],"int32"), )
paddle.meshgrid(Tensor([19],"float32"), Tensor([12],"float32"), )
paddle.meshgrid(Tensor([19],"float32"), Tensor([13],"float32"), )
paddle.meshgrid(Tensor([19],"float32"), Tensor([14],"float32"), )
paddle.meshgrid(Tensor([19],"float32"), Tensor([15],"float32"), )
paddle.meshgrid(Tensor([19],"float32"), Tensor([16],"float32"), )
paddle.meshgrid(Tensor([19],"float32"), Tensor([17],"float32"), )
paddle.meshgrid(Tensor([19],"float32"), Tensor([18],"float32"), )
paddle.meshgrid(Tensor([19],"float32"), Tensor([19],"float32"), )
paddle.meshgrid(Tensor([19],"float32"), Tensor([20],"float32"), )
paddle.meshgrid(Tensor([19],"float32"), Tensor([21],"float32"), )
paddle.meshgrid(Tensor([19],"float32"), Tensor([29],"float32"), )
paddle.meshgrid(Tensor([19],"int64"), Tensor([29],"int64"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([200],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([208],"float32"), Tensor([208],"float32"), )
paddle.meshgrid(Tensor([208],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([208],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([208],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([208],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([208],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([208],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([20],"float32"), Tensor([14],"float32"), )
paddle.meshgrid(Tensor([20],"float32"), Tensor([15],"float32"), )
paddle.meshgrid(Tensor([20],"float32"), Tensor([16],"float32"), )
paddle.meshgrid(Tensor([20],"float32"), Tensor([17],"float32"), )
paddle.meshgrid(Tensor([20],"float32"), Tensor([18],"float32"), )
paddle.meshgrid(Tensor([20],"float32"), Tensor([19],"float32"), )
paddle.meshgrid(Tensor([20],"float32"), Tensor([20],"float32"), )
paddle.meshgrid(Tensor([20],"float32"), Tensor([21],"float32"), )
paddle.meshgrid(Tensor([20],"float32"), Tensor([27],"float32"), )
paddle.meshgrid(Tensor([20],"float32"), Tensor([30],"float32"), )
paddle.meshgrid(Tensor([20],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([20],"int32"), Tensor([15],"int32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([216],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([224],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([248],"float32"), Tensor([1],"float32"), Tensor([2],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([21],"float32"), Tensor([13],"float32"), )
paddle.meshgrid(Tensor([21],"float32"), Tensor([15],"float32"), )
paddle.meshgrid(Tensor([21],"float32"), Tensor([16],"float32"), )
paddle.meshgrid(Tensor([21],"float32"), Tensor([17],"float32"), )
paddle.meshgrid(Tensor([21],"float32"), Tensor([18],"float32"), )
paddle.meshgrid(Tensor([21],"float32"), Tensor([19],"float32"), )
paddle.meshgrid(Tensor([21],"float32"), Tensor([21],"float32"), )
paddle.meshgrid(Tensor([21],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([21],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([21],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([224],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([22],"float32"), Tensor([22],"float32"), )
paddle.meshgrid(Tensor([22],"float32"), Tensor([30],"float32"), )
paddle.meshgrid(Tensor([22],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([22],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([22],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([22],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([22],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([22],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([232],"float32"), Tensor([232],"float32"), )
paddle.meshgrid(Tensor([232],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([232],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([232],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([232],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([232],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([232],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([23],"float32"), Tensor([18],"float32"), )
paddle.meshgrid(Tensor([23],"float32"), Tensor([23],"float32"), )
paddle.meshgrid(Tensor([23],"float32"), Tensor([30],"float32"), )
paddle.meshgrid(Tensor([23],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([23],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([23],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([23],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([23],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([23],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([23],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([23],"float32"), Tensor([39],"float32"), )
paddle.meshgrid(Tensor([23],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([23],"float32"), Tensor([41],"float32"), )
paddle.meshgrid(Tensor([23],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([23],"int32"), Tensor([18],"int32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([176],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([208],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([224],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([241],"float32"), Tensor([241],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([184],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([192],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([216],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([224],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([24],"float32"), Tensor([18],"float32"), )
paddle.meshgrid(Tensor([24],"float32"), Tensor([24],"float32"), )
paddle.meshgrid(Tensor([24],"float32"), Tensor([30],"float32"), )
paddle.meshgrid(Tensor([24],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([24],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([24],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([24],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([24],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([24],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([24],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([24],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([24],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([24],"float32"), Tensor([41],"float32"), )
paddle.meshgrid(Tensor([24],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([24],"int32"), Tensor([18],"int32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([192],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([216],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([224],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([25],"float32"), Tensor([19],"float32"), )
paddle.meshgrid(Tensor([25],"float32"), Tensor([25],"float32"), )
paddle.meshgrid(Tensor([25],"float32"), Tensor([30],"float32"), )
paddle.meshgrid(Tensor([25],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([25],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([25],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([25],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([25],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([25],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([25],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([25],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([25],"float32"), Tensor([39],"float32"), )
paddle.meshgrid(Tensor([25],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([25],"float32"), Tensor([41],"float32"), )
paddle.meshgrid(Tensor([25],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([192],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([200],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([208],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([216],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([26],"float32"), Tensor([20],"float32"), )
paddle.meshgrid(Tensor([26],"float32"), Tensor([26],"float32"), )
paddle.meshgrid(Tensor([26],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([26],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([26],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([26],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([26],"float32"), Tensor([41],"float32"), )
paddle.meshgrid(Tensor([26],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([176],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([192],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([200],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([216],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([224],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([232],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([27],"float32"), Tensor([28],"float32"), )
paddle.meshgrid(Tensor([27],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([27],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([27],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([27],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([27],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([27],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([27],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([27],"float32"), Tensor([39],"float32"), )
paddle.meshgrid(Tensor([27],"float32"), Tensor([41],"float32"), )
paddle.meshgrid(Tensor([27],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([184],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([192],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([224],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([192],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([200],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([216],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([224],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([232],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([28],"float32"), Tensor([21],"float32"), )
paddle.meshgrid(Tensor([28],"float32"), Tensor([28],"float32"), )
paddle.meshgrid(Tensor([28],"float32"), Tensor([30],"float32"), )
paddle.meshgrid(Tensor([28],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([28],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([28],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([28],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([28],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([28],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([28],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([28],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([28],"float32"), Tensor([39],"float32"), )
paddle.meshgrid(Tensor([28],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([28],"float32"), Tensor([41],"float32"), )
paddle.meshgrid(Tensor([28],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([296],"float32"), Tensor([192],"float32"), )
paddle.meshgrid(Tensor([296],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([296],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([296],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([296],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([296],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([296],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([296],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([296],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([296],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(Tensor([296],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([296],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([296],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([29],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([29],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([29],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([29],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([29],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([29],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([2],"float32"), Tensor([4],"float32"), )
paddle.meshgrid(Tensor([2],"float32"), Tensor([4],"float32"), Tensor([6],"float32"), )
paddle.meshgrid(Tensor([2],"float64"), Tensor([4],"float64"), )
paddle.meshgrid(Tensor([2],"float64"), Tensor([4],"float64"), Tensor([6],"float64"), )
paddle.meshgrid(Tensor([2],"int32"), Tensor([4],"int32"), )
paddle.meshgrid(Tensor([2],"int32"), Tensor([4],"int32"), Tensor([6],"int32"), )
paddle.meshgrid(Tensor([2],"int64"), Tensor([2],"int64"), )
paddle.meshgrid(Tensor([2],"int64"), Tensor([4],"int64"), )
paddle.meshgrid(Tensor([2],"int64"), Tensor([4],"int64"), Tensor([6],"int64"), )
paddle.meshgrid(Tensor([300],"float32"), Tensor([],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([200],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([224],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([30],"float32"), Tensor([22],"float32"), )
paddle.meshgrid(Tensor([30],"float32"), Tensor([26],"float32"), )
paddle.meshgrid(Tensor([30],"float32"), Tensor([28],"float32"), )
paddle.meshgrid(Tensor([30],"float32"), Tensor([30],"float32"), )
paddle.meshgrid(Tensor([30],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([30],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([30],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([30],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([30],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([30],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([30],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([30],"float32"), Tensor([39],"float32"), )
paddle.meshgrid(Tensor([30],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([30],"float32"), Tensor([41],"float32"), )
paddle.meshgrid(Tensor([30],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([312],"float32"), Tensor([224],"float32"), )
paddle.meshgrid(Tensor([312],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([312],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([312],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([312],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([312],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([20],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([23],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([24],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([27],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([28],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([39],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([41],"float32"), )
paddle.meshgrid(Tensor([31],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([320],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([320],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([320],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([320],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([320],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([328],"float32"), Tensor([200],"float32"), )
paddle.meshgrid(Tensor([328],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([328],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([328],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([328],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([328],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([328],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([21],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([24],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([27],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([28],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([30],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([32],"float32"), indexing="ij", )
paddle.meshgrid(Tensor([32],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([39],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([41],"float32"), )
paddle.meshgrid(Tensor([32],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([32],"int64"), Tensor([32],"int64"), )
paddle.meshgrid(Tensor([336],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([336],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([336],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([336],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([336],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([336],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([336],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([336],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([336],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([33],"float32"), Tensor([24],"float32"), )
paddle.meshgrid(Tensor([33],"float32"), Tensor([25],"float32"), )
paddle.meshgrid(Tensor([33],"float32"), Tensor([26],"float32"), )
paddle.meshgrid(Tensor([33],"float32"), Tensor([27],"float32"), )
paddle.meshgrid(Tensor([33],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([33],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([33],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([33],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([33],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([33],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([33],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([33],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([33],"float32"), Tensor([39],"float32"), )
paddle.meshgrid(Tensor([33],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([33],"float32"), Tensor([41],"float32"), )
paddle.meshgrid(Tensor([33],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([22],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([24],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([25],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([27],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([28],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([29],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([30],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([39],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([41],"float32"), )
paddle.meshgrid(Tensor([34],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([35],"float32"), Tensor([23],"float32"), )
paddle.meshgrid(Tensor([35],"float32"), Tensor([24],"float32"), )
paddle.meshgrid(Tensor([35],"float32"), Tensor([28],"float32"), )
paddle.meshgrid(Tensor([35],"float32"), Tensor([30],"float32"), )
paddle.meshgrid(Tensor([35],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([35],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([35],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([35],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([35],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([35],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([35],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([35],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([35],"float32"), Tensor([39],"float32"), )
paddle.meshgrid(Tensor([35],"float32"), Tensor([41],"float32"), )
paddle.meshgrid(Tensor([35],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([24],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([25],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([27],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([28],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([29],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([30],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([39],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([41],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([36],"float32"), Tensor([50],"float32"), )
paddle.meshgrid(Tensor([36],"int32"), Tensor([50],"int32"), )
paddle.meshgrid(Tensor([37],"float32"), Tensor([24],"float32"), )
paddle.meshgrid(Tensor([37],"float32"), Tensor([30],"float32"), )
paddle.meshgrid(Tensor([37],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([37],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([37],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([37],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([37],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([37],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([37],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([37],"float32"), Tensor([39],"float32"), )
paddle.meshgrid(Tensor([37],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([37],"float32"), Tensor([41],"float32"), )
paddle.meshgrid(Tensor([37],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([38],"float32"), Tensor([25],"float32"), )
paddle.meshgrid(Tensor([38],"float32"), Tensor([28],"float32"), )
paddle.meshgrid(Tensor([38],"float32"), Tensor([30],"float32"), )
paddle.meshgrid(Tensor([38],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([38],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([38],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([38],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([38],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([38],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([38],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([38],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([38],"float32"), Tensor([39],"float32"), )
paddle.meshgrid(Tensor([38],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([38],"float32"), Tensor([41],"float32"), )
paddle.meshgrid(Tensor([38],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([38],"float32"), Tensor([58],"float32"), )
paddle.meshgrid(Tensor([38],"int64"), Tensor([58],"int64"), )
paddle.meshgrid(Tensor([39],"float32"), Tensor([28],"float32"), )
paddle.meshgrid(Tensor([39],"float32"), Tensor([30],"float32"), )
paddle.meshgrid(Tensor([39],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([39],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([39],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([39],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([4098],"float32"), Tensor([4098],"float32"), )
paddle.meshgrid(Tensor([40],"float32"), Tensor([30],"float32"), )
paddle.meshgrid(Tensor([40],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([40],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([40],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([40],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([40],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([40],"float32"), Tensor([54],"float32"), )
paddle.meshgrid(Tensor([40],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([40],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([40],"int32"), Tensor([30],"int32"), )
paddle.meshgrid(Tensor([41],"float32"), Tensor([25],"float32"), )
paddle.meshgrid(Tensor([41],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([41],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([41],"float32"), Tensor([34],"float32"), )
paddle.meshgrid(Tensor([41],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([41],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([41],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([42],"float32"), Tensor([30],"float32"), )
paddle.meshgrid(Tensor([42],"float32"), Tensor([31],"float32"), )
paddle.meshgrid(Tensor([42],"float32"), Tensor([32],"float32"), )
paddle.meshgrid(Tensor([42],"float32"), Tensor([33],"float32"), )
paddle.meshgrid(Tensor([42],"float32"), Tensor([35],"float32"), )
paddle.meshgrid(Tensor([42],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([42],"float32"), Tensor([37],"float32"), )
paddle.meshgrid(Tensor([42],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([42],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([42],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([42],"float32"), Tensor([63],"float32"), )
paddle.meshgrid(Tensor([42],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([42],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([44],"float32"), Tensor([44],"float32"), )
paddle.meshgrid(Tensor([44],"float32"), Tensor([59],"float32"), )
paddle.meshgrid(Tensor([44],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([44],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([44],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([44],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([44],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([44],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([44],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([44],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([44],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([45],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([45],"int32"), Tensor([36],"int32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([46],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([63],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([47],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([36],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([65],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([48],"int32"), Tensor([36],"int32"), )
paddle.meshgrid(Tensor([49],"float32"), Tensor([63],"float32"), )
paddle.meshgrid(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.meshgrid(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([38],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([50],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([59],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([61],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([71],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([79],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([81],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([51],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(Tensor([51],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([52],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([52],"float32"), Tensor([52],"float32"), )
paddle.meshgrid(Tensor([52],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([52],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([52],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([52],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([52],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([52],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([52],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([53],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([53],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([54],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([61],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([63],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([55],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([55],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([63],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([65],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([79],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([81],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([57],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([57],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([58],"float32"), Tensor([58],"float32"), )
paddle.meshgrid(Tensor([58],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([58],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([58],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([58],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([58],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([58],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([44],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([51],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([63],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([65],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([81],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([5],"float32"), Tensor([4],"float32"), )
paddle.meshgrid(Tensor([5],"float32"), Tensor([5],"float32"), )
paddle.meshgrid(Tensor([5],"float32"), Tensor([7],"float32"), )
paddle.meshgrid(Tensor([5],"int32"), Tensor([4],"int32"), )
paddle.meshgrid(Tensor([5],"int32"), Tensor([7],"int32"), )
paddle.meshgrid(Tensor([5],"int64"), Tensor([5],"int64"), indexing="ij", )
paddle.meshgrid(Tensor([60],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([44],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([52],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([77],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([79],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([61],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([61],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([61],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([61],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([61],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([61],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([46],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([54],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([81],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([63],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([63],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([63],"float32"), Tensor([59],"float32"), )
paddle.meshgrid(Tensor([63],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([63],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([63],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(Tensor([63],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([63],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([63],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([63],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([54],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([59],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([63],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([77],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([79],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([83],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([64],"int64"), Tensor([64],"int64"), )
paddle.meshgrid(Tensor([65],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(Tensor([65],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([65],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([65],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([65],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([65],"float32"), Tensor([77],"float32"), )
paddle.meshgrid(Tensor([65],"float32"), Tensor([79],"float32"), )
paddle.meshgrid(Tensor([65],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([44],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([50],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([52],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([54],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([65],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([44],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([50],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([54],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([57],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([61],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([63],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([83],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([44],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([50],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([54],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([58],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([69],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(Tensor([69],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([69],"float32"), Tensor([59],"float32"), )
paddle.meshgrid(Tensor([69],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([69],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([69],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([69],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([69],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(Tensor([69],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([69],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([69],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([6],"float32"), Tensor([5],"float32"), )
paddle.meshgrid(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.meshgrid(Tensor([6],"int32"), Tensor([5],"int32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([46],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([63],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([71],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([71],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([71],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([71],"float32"), Tensor([71],"float32"), )
paddle.meshgrid(Tensor([71],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([100],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([50],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([54],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([58],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([59],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([72],"int32"), Tensor([100],"int32"), )
paddle.meshgrid(Tensor([73],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([73],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([73],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([73],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([73],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(Tensor([73],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([73],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([73],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([73],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([63],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([50],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([61],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([115],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([50],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([63],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([79],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([83],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([76],"int64"), Tensor([115],"int64"), )
paddle.meshgrid(Tensor([77],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([77],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([77],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([78],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([78],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([78],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([78],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([78],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([78],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([79],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([79],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([7],"float32"), Tensor([7],"float32"), )
paddle.meshgrid(Tensor([80],"float32"), Tensor([108],"float32"), )
paddle.meshgrid(Tensor([80],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([80],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([80],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([80],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([80],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([80],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([80],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([80],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([80],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([80],"int32"), Tensor([60],"int32"), )
paddle.meshgrid(Tensor([82],"float32"), Tensor([50],"float32"), )
paddle.meshgrid(Tensor([82],"float32"), Tensor([61],"float32"), )
paddle.meshgrid(Tensor([82],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([82],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([82],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([82],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([82],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([82],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([84],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([84],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([84],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([84],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([84],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([84],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([84],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([84],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([84],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([84],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([84],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([84],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([88],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([88],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([88],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([88],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([88],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([88],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([88],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([88],"float32"), Tensor([88],"float32"), )
paddle.meshgrid(Tensor([89],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([89],"int32"), Tensor([72],"int32"), )
paddle.meshgrid(Tensor([8],"float32"), Tensor([8],"float32"), )
paddle.meshgrid(Tensor([8],"int64"), Tensor([7],"int64"), Tensor([7],"int64"), )
paddle.meshgrid(Tensor([8],"int64"), Tensor([8],"int64"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([92],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([96],"float32"), )
paddle.meshgrid(Tensor([96],"int32"), Tensor([72],"int32"), )
paddle.meshgrid(Tensor([9],"float32"), Tensor([13],"float32"), )
paddle.meshgrid(Tensor([9],"float32"), Tensor([9],"float32"), )
paddle.meshgrid(Tensor([9],"int32"), Tensor([13],"int32"), )
paddle.meshgrid(list[Tensor([100],"float32"),Tensor([136],"float32"),], )
paddle.meshgrid(list[Tensor([100],"float32"),Tensor([140],"float32"),], )
paddle.meshgrid(list[Tensor([100],"float32"),Tensor([144],"float32"),], )
paddle.meshgrid(list[Tensor([100],"float32"),Tensor([148],"float32"),], )
paddle.meshgrid(list[Tensor([100],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([100],"float32"),Tensor([156],"float32"),], )
paddle.meshgrid(list[Tensor([100],"float32"),Tensor([160],"float32"),], )
paddle.meshgrid(list[Tensor([100],"float32"),Tensor([164],"float32"),], )
paddle.meshgrid(list[Tensor([100],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(list[Tensor([104],"float32"),Tensor([136],"float32"),], )
paddle.meshgrid(list[Tensor([104],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([104],"float32"),Tensor([164],"float32"),], )
paddle.meshgrid(list[Tensor([104],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(list[Tensor([108],"float32"),Tensor([148],"float32"),], )
paddle.meshgrid(list[Tensor([108],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([108],"float32"),Tensor([156],"float32"),], )
paddle.meshgrid(list[Tensor([10],"float64"),Tensor([10],"float64"),Tensor([10],"float64"),Tensor([10],"float64"),Tensor([10],"float64"),], )
paddle.meshgrid(list[Tensor([10],"int64"),Tensor([10],"int64"),Tensor([10],"int64"),Tensor([10],"int64"),Tensor([10],"int64"),], )
paddle.meshgrid(list[Tensor([10],"int64"),Tensor([10],"int64"),], )
paddle.meshgrid(list[Tensor([112],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([116],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([116],"float32"),Tensor([160],"float32"),], )
paddle.meshgrid(list[Tensor([11],"int64"),Tensor([11],"int64"),], )
paddle.meshgrid(list[Tensor([120],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([124],"float32"),Tensor([136],"float32"),], )
paddle.meshgrid(list[Tensor([124],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([124],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(list[Tensor([128],"float32"),Tensor([136],"float32"),], )
paddle.meshgrid(list[Tensor([128],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([128],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(list[Tensor([12],"int64"),Tensor([12],"int64"),], )
paddle.meshgrid(list[Tensor([132],"float32"),Tensor([144],"float32"),], )
paddle.meshgrid(list[Tensor([132],"float32"),Tensor([148],"float32"),], )
paddle.meshgrid(list[Tensor([132],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([132],"float32"),Tensor([160],"float32"),], )
paddle.meshgrid(list[Tensor([132],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(list[Tensor([136],"float32"),Tensor([100],"float32"),], )
paddle.meshgrid(list[Tensor([136],"float32"),Tensor([108],"float32"),], )
paddle.meshgrid(list[Tensor([136],"float32"),Tensor([136],"float32"),], )
paddle.meshgrid(list[Tensor([136],"float32"),Tensor([140],"float32"),], )
paddle.meshgrid(list[Tensor([136],"float32"),Tensor([148],"float32"),], )
paddle.meshgrid(list[Tensor([136],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([136],"float32"),Tensor([156],"float32"),], )
paddle.meshgrid(list[Tensor([136],"float32"),Tensor([160],"float32"),], )
paddle.meshgrid(list[Tensor([136],"float32"),Tensor([164],"float32"),], )
paddle.meshgrid(list[Tensor([136],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(list[Tensor([13],"float32"),Tensor([13],"float32"),], )
paddle.meshgrid(list[Tensor([13],"int64"),Tensor([13],"int64"),], )
paddle.meshgrid(list[Tensor([140],"float32"),Tensor([136],"float32"),], )
paddle.meshgrid(list[Tensor([140],"float32"),Tensor([140],"float32"),], )
paddle.meshgrid(list[Tensor([140],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([140],"float32"),Tensor([156],"float32"),], )
paddle.meshgrid(list[Tensor([140],"float32"),Tensor([164],"float32"),], )
paddle.meshgrid(list[Tensor([140],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(list[Tensor([140],"float32"),Tensor([188],"float32"),Tensor([1],"float32"),], )
paddle.meshgrid(list[Tensor([144],"float32"),Tensor([136],"float32"),], )
paddle.meshgrid(list[Tensor([144],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([144],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(list[Tensor([148],"float32"),Tensor([136],"float32"),], )
paddle.meshgrid(list[Tensor([148],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([148],"float32"),Tensor([164],"float32"),], )
paddle.meshgrid(list[Tensor([148],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(list[Tensor([14],"int64"),Tensor([14],"int64"),], )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([100],"float32"),], )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([108],"float32"),], )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([132],"float32"),], )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([136],"float32"),], )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([140],"float32"),], )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([144],"float32"),], )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([148],"float32"),], )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([156],"float32"),], )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([160],"float32"),], )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([164],"float32"),], )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(list[Tensor([156],"float32"),Tensor([136],"float32"),], )
paddle.meshgrid(list[Tensor([156],"float32"),Tensor([148],"float32"),], )
paddle.meshgrid(list[Tensor([156],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([156],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(list[Tensor([15],"int64"),Tensor([15],"int64"),], )
paddle.meshgrid(list[Tensor([160],"float32"),Tensor([136],"float32"),], )
paddle.meshgrid(list[Tensor([160],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([160],"float32"),Tensor([160],"float32"),], )
paddle.meshgrid(list[Tensor([164],"float32"),Tensor([100],"float32"),], )
paddle.meshgrid(list[Tensor([164],"float32"),Tensor([136],"float32"),], )
paddle.meshgrid(list[Tensor([164],"float32"),Tensor([148],"float32"),], )
paddle.meshgrid(list[Tensor([164],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([168],"float32"),Tensor([100],"float32"),], )
paddle.meshgrid(list[Tensor([168],"float32"),Tensor([136],"float32"),], )
paddle.meshgrid(list[Tensor([168],"float32"),Tensor([140],"float32"),], )
paddle.meshgrid(list[Tensor([168],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([168],"float32"),Tensor([156],"float32"),], )
paddle.meshgrid(list[Tensor([168],"float32"),Tensor([160],"float32"),], )
paddle.meshgrid(list[Tensor([168],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(list[Tensor([16],"int64"),Tensor([16],"int64"),], )
paddle.meshgrid(list[Tensor([17],"int64"),Tensor([17],"int64"),], )
paddle.meshgrid(list[Tensor([18],"int64"),Tensor([18],"int64"),], )
paddle.meshgrid(list[Tensor([19],"int64"),Tensor([19],"int64"),], )
paddle.meshgrid(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.meshgrid(list[Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.meshgrid(list[Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.meshgrid(list[Tensor([20],"int64"),Tensor([20],"int64"),], )
paddle.meshgrid(list[Tensor([22],"int64"),Tensor([22],"int64"),], )
paddle.meshgrid(list[Tensor([24],"int64"),Tensor([24],"int64"),], )
paddle.meshgrid(list[Tensor([25],"float32"),Tensor([34],"float32"),], )
paddle.meshgrid(list[Tensor([25],"float32"),Tensor([35],"float32"),], )
paddle.meshgrid(list[Tensor([25],"float32"),Tensor([36],"float32"),], )
paddle.meshgrid(list[Tensor([25],"float32"),Tensor([37],"float32"),], )
paddle.meshgrid(list[Tensor([25],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([25],"float32"),Tensor([39],"float32"),], )
paddle.meshgrid(list[Tensor([25],"float32"),Tensor([40],"float32"),], )
paddle.meshgrid(list[Tensor([25],"float32"),Tensor([41],"float32"),], )
paddle.meshgrid(list[Tensor([25],"float32"),Tensor([42],"float32"),], )
paddle.meshgrid(list[Tensor([26],"float32"),Tensor([34],"float32"),], )
paddle.meshgrid(list[Tensor([26],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([26],"float32"),Tensor([41],"float32"),], )
paddle.meshgrid(list[Tensor([26],"float32"),Tensor([42],"float32"),], )
paddle.meshgrid(list[Tensor([26],"int64"),Tensor([26],"int64"),], )
paddle.meshgrid(list[Tensor([27],"float32"),Tensor([37],"float32"),], )
paddle.meshgrid(list[Tensor([27],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([27],"float32"),Tensor([39],"float32"),], )
paddle.meshgrid(list[Tensor([280],"float32"),Tensor([376],"float32"),Tensor([25],"float32"),], )
paddle.meshgrid(list[Tensor([28],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([28],"int64"),Tensor([28],"int64"),], )
paddle.meshgrid(list[Tensor([29],"float32"),Tensor([29],"float32"),], )
paddle.meshgrid(list[Tensor([29],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([29],"float32"),Tensor([40],"float32"),], )
paddle.meshgrid(list[Tensor([2],"complex128"),Tensor([1],"complex128"),Tensor([3],"complex128"),], )
paddle.meshgrid(list[Tensor([2],"float16"),Tensor([2],"float16"),Tensor([1],"float16"),], )
paddle.meshgrid(list[Tensor([2],"float64"),Tensor([4],"float64"),Tensor([3],"float64"),], )
paddle.meshgrid(list[Tensor([2],"int64"),Tensor([2],"int64"),Tensor([1],"int64"),Tensor([0],"int64"),], )
paddle.meshgrid(list[Tensor([2],"int64"),Tensor([2],"int64"),Tensor([1],"int64"),], )
paddle.meshgrid(list[Tensor([30],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([30],"int64"),Tensor([30],"int64"),], )
paddle.meshgrid(list[Tensor([31],"float32"),Tensor([34],"float32"),], )
paddle.meshgrid(list[Tensor([31],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([31],"float32"),Tensor([42],"float32"),], )
paddle.meshgrid(list[Tensor([32],"float32"),Tensor([34],"float32"),], )
paddle.meshgrid(list[Tensor([32],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([32],"float32"),Tensor([42],"float32"),], )
paddle.meshgrid(list[Tensor([32],"int64"),Tensor([32],"int64"),], )
paddle.meshgrid(list[Tensor([33],"float32"),Tensor([36],"float32"),], )
paddle.meshgrid(list[Tensor([33],"float32"),Tensor([37],"float32"),], )
paddle.meshgrid(list[Tensor([33],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([33],"float32"),Tensor([40],"float32"),], )
paddle.meshgrid(list[Tensor([33],"float32"),Tensor([42],"float32"),], )
paddle.meshgrid(list[Tensor([34],"float32"),Tensor([25],"float32"),], )
paddle.meshgrid(list[Tensor([34],"float32"),Tensor([27],"float32"),], )
paddle.meshgrid(list[Tensor([34],"float32"),Tensor([34],"float32"),], )
paddle.meshgrid(list[Tensor([34],"float32"),Tensor([35],"float32"),], )
paddle.meshgrid(list[Tensor([34],"float32"),Tensor([37],"float32"),], )
paddle.meshgrid(list[Tensor([34],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([34],"float32"),Tensor([39],"float32"),], )
paddle.meshgrid(list[Tensor([34],"float32"),Tensor([40],"float32"),], )
paddle.meshgrid(list[Tensor([34],"float32"),Tensor([41],"float32"),], )
paddle.meshgrid(list[Tensor([34],"float32"),Tensor([42],"float32"),], )
paddle.meshgrid(list[Tensor([34],"int64"),Tensor([34],"int64"),], )
paddle.meshgrid(list[Tensor([35],"float32"),Tensor([34],"float32"),], )
paddle.meshgrid(list[Tensor([35],"float32"),Tensor([35],"float32"),], )
paddle.meshgrid(list[Tensor([35],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([35],"float32"),Tensor([39],"float32"),], )
paddle.meshgrid(list[Tensor([35],"float32"),Tensor([41],"float32"),], )
paddle.meshgrid(list[Tensor([35],"float32"),Tensor([42],"float32"),], )
paddle.meshgrid(list[Tensor([36],"float32"),Tensor([34],"float32"),], )
paddle.meshgrid(list[Tensor([36],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([36],"float32"),Tensor([42],"float32"),], )
paddle.meshgrid(list[Tensor([36],"int64"),Tensor([36],"int64"),], )
paddle.meshgrid(list[Tensor([37],"float32"),Tensor([34],"float32"),], )
paddle.meshgrid(list[Tensor([37],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([37],"float32"),Tensor([41],"float32"),], )
paddle.meshgrid(list[Tensor([37],"float32"),Tensor([42],"float32"),], )
paddle.meshgrid(list[Tensor([38],"float32"),Tensor([25],"float32"),], )
paddle.meshgrid(list[Tensor([38],"float32"),Tensor([27],"float32"),], )
paddle.meshgrid(list[Tensor([38],"float32"),Tensor([33],"float32"),], )
paddle.meshgrid(list[Tensor([38],"float32"),Tensor([34],"float32"),], )
paddle.meshgrid(list[Tensor([38],"float32"),Tensor([35],"float32"),], )
paddle.meshgrid(list[Tensor([38],"float32"),Tensor([36],"float32"),], )
paddle.meshgrid(list[Tensor([38],"float32"),Tensor([37],"float32"),], )
paddle.meshgrid(list[Tensor([38],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([38],"float32"),Tensor([39],"float32"),], )
paddle.meshgrid(list[Tensor([38],"float32"),Tensor([40],"float32"),], )
paddle.meshgrid(list[Tensor([38],"float32"),Tensor([41],"float32"),], )
paddle.meshgrid(list[Tensor([38],"float32"),Tensor([42],"float32"),], )
paddle.meshgrid(list[Tensor([38],"int64"),Tensor([38],"int64"),], )
paddle.meshgrid(list[Tensor([39],"float32"),Tensor([34],"float32"),], )
paddle.meshgrid(list[Tensor([39],"float32"),Tensor([37],"float32"),], )
paddle.meshgrid(list[Tensor([39],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([39],"float32"),Tensor([42],"float32"),], )
paddle.meshgrid(list[Tensor([3],"complex128"),Tensor([5],"complex128"),Tensor([5],"complex128"),], )
paddle.meshgrid(list[Tensor([3],"float64"),Tensor([5],"float64"),Tensor([3],"float64"),], )
paddle.meshgrid(list[Tensor([3],"int32"),Tensor([5],"int32"),Tensor([3],"int32"),Tensor([0],"int32"),], )
paddle.meshgrid(list[Tensor([3],"int32"),Tensor([5],"int32"),Tensor([3],"int32"),], )
paddle.meshgrid(list[Tensor([40],"float32"),Tensor([34],"float32"),], )
paddle.meshgrid(list[Tensor([40],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([40],"float32"),Tensor([40],"float32"),], )
paddle.meshgrid(list[Tensor([40],"int64"),Tensor([40],"int64"),], )
paddle.meshgrid(list[Tensor([41],"float32"),Tensor([25],"float32"),], )
paddle.meshgrid(list[Tensor([41],"float32"),Tensor([34],"float32"),], )
paddle.meshgrid(list[Tensor([41],"float32"),Tensor([37],"float32"),], )
paddle.meshgrid(list[Tensor([41],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([42],"float32"),Tensor([25],"float32"),], )
paddle.meshgrid(list[Tensor([42],"float32"),Tensor([34],"float32"),], )
paddle.meshgrid(list[Tensor([42],"float32"),Tensor([35],"float32"),], )
paddle.meshgrid(list[Tensor([42],"float32"),Tensor([38],"float32"),], )
paddle.meshgrid(list[Tensor([42],"float32"),Tensor([39],"float32"),], )
paddle.meshgrid(list[Tensor([42],"float32"),Tensor([40],"float32"),], )
paddle.meshgrid(list[Tensor([42],"float32"),Tensor([42],"float32"),], )
paddle.meshgrid(list[Tensor([44],"int64"),Tensor([44],"int64"),], )
paddle.meshgrid(list[Tensor([48],"int64"),Tensor([48],"int64"),], )
paddle.meshgrid(list[Tensor([4],"float16"),Tensor([3],"float16"),Tensor([5],"float16"),], )
paddle.meshgrid(list[Tensor([4],"float32"),Tensor([2],"float32"),Tensor([1],"float32"),], )
paddle.meshgrid(list[Tensor([4],"int32"),Tensor([4],"int32"),Tensor([5],"int32"),Tensor([0],"int32"),], )
paddle.meshgrid(list[Tensor([4],"int32"),Tensor([4],"int32"),Tensor([5],"int32"),], )
paddle.meshgrid(list[Tensor([4],"int64"),Tensor([4],"int64"),], indexing="ij", )
paddle.meshgrid(list[Tensor([50],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(list[Tensor([50],"float32"),Tensor([70],"float32"),], )
paddle.meshgrid(list[Tensor([50],"float32"),Tensor([72],"float32"),], )
paddle.meshgrid(list[Tensor([50],"float32"),Tensor([74],"float32"),], )
paddle.meshgrid(list[Tensor([50],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([50],"float32"),Tensor([78],"float32"),], )
paddle.meshgrid(list[Tensor([50],"float32"),Tensor([80],"float32"),], )
paddle.meshgrid(list[Tensor([50],"float32"),Tensor([82],"float32"),], )
paddle.meshgrid(list[Tensor([50],"float32"),Tensor([84],"float32"),], )
paddle.meshgrid(list[Tensor([52],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(list[Tensor([52],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([52],"float32"),Tensor([82],"float32"),], )
paddle.meshgrid(list[Tensor([52],"float32"),Tensor([84],"float32"),], )
paddle.meshgrid(list[Tensor([52],"int64"),Tensor([52],"int64"),], )
paddle.meshgrid(list[Tensor([54],"float32"),Tensor([74],"float32"),], )
paddle.meshgrid(list[Tensor([54],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([54],"float32"),Tensor([78],"float32"),], )
paddle.meshgrid(list[Tensor([56],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([56],"int64"),Tensor([56],"int64"),], )
paddle.meshgrid(list[Tensor([58],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([58],"float32"),Tensor([80],"float32"),], )
paddle.meshgrid(list[Tensor([5],"complex64"),Tensor([2],"complex64"),Tensor([5],"complex64"),], )
paddle.meshgrid(list[Tensor([5],"complex64"),Tensor([4],"complex64"),Tensor([3],"complex64"),], )
paddle.meshgrid(list[Tensor([5],"float32"),Tensor([5],"float32"),], )
paddle.meshgrid(list[Tensor([5],"int64"),Tensor([4],"int64"),Tensor([4],"int64"),Tensor([0],"int64"),], )
paddle.meshgrid(list[Tensor([5],"int64"),Tensor([4],"int64"),Tensor([4],"int64"),], )
paddle.meshgrid(list[Tensor([60],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([60],"int64"),Tensor([60],"int64"),], )
paddle.meshgrid(list[Tensor([62],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(list[Tensor([62],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([62],"float32"),Tensor([84],"float32"),], )
paddle.meshgrid(list[Tensor([64],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(list[Tensor([64],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([64],"float32"),Tensor([84],"float32"),], )
paddle.meshgrid(list[Tensor([64],"int64"),Tensor([64],"int64"),], )
paddle.meshgrid(list[Tensor([66],"float32"),Tensor([72],"float32"),], )
paddle.meshgrid(list[Tensor([66],"float32"),Tensor([74],"float32"),], )
paddle.meshgrid(list[Tensor([66],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([66],"float32"),Tensor([80],"float32"),], )
paddle.meshgrid(list[Tensor([66],"float32"),Tensor([84],"float32"),], )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([50],"float32"),], )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([54],"float32"),], )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([70],"float32"),], )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([74],"float32"),], )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([78],"float32"),], )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([80],"float32"),], )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([82],"float32"),], )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([84],"float32"),], )
paddle.meshgrid(list[Tensor([68],"int64"),Tensor([68],"int64"),], )
paddle.meshgrid(list[Tensor([70],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(list[Tensor([70],"float32"),Tensor([70],"float32"),], )
paddle.meshgrid(list[Tensor([70],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([70],"float32"),Tensor([78],"float32"),], )
paddle.meshgrid(list[Tensor([70],"float32"),Tensor([82],"float32"),], )
paddle.meshgrid(list[Tensor([70],"float32"),Tensor([84],"float32"),], )
paddle.meshgrid(list[Tensor([72],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(list[Tensor([72],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([72],"float32"),Tensor([84],"float32"),], )
paddle.meshgrid(list[Tensor([72],"int64"),Tensor([72],"int64"),], )
paddle.meshgrid(list[Tensor([74],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(list[Tensor([74],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([74],"float32"),Tensor([82],"float32"),], )
paddle.meshgrid(list[Tensor([74],"float32"),Tensor([84],"float32"),], )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([50],"float32"),], )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([54],"float32"),], )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([66],"float32"),], )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([70],"float32"),], )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([72],"float32"),], )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([74],"float32"),], )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([78],"float32"),], )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([80],"float32"),], )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([82],"float32"),], )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([84],"float32"),], )
paddle.meshgrid(list[Tensor([76],"int64"),Tensor([76],"int64"),], )
paddle.meshgrid(list[Tensor([78],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(list[Tensor([78],"float32"),Tensor([74],"float32"),], )
paddle.meshgrid(list[Tensor([78],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([78],"float32"),Tensor([84],"float32"),], )
paddle.meshgrid(list[Tensor([7],"int64"),Tensor([7],"int64"),], )
paddle.meshgrid(list[Tensor([80],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(list[Tensor([80],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([80],"float32"),Tensor([80],"float32"),], )
paddle.meshgrid(list[Tensor([82],"float32"),Tensor([50],"float32"),], )
paddle.meshgrid(list[Tensor([82],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(list[Tensor([82],"float32"),Tensor([74],"float32"),], )
paddle.meshgrid(list[Tensor([82],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([84],"float32"),Tensor([50],"float32"),], )
paddle.meshgrid(list[Tensor([84],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(list[Tensor([84],"float32"),Tensor([70],"float32"),], )
paddle.meshgrid(list[Tensor([84],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([84],"float32"),Tensor([78],"float32"),], )
paddle.meshgrid(list[Tensor([84],"float32"),Tensor([80],"float32"),], )
paddle.meshgrid(list[Tensor([84],"float32"),Tensor([84],"float32"),], )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float16"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float16"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), 7.0, 2, None, 1, True, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), math.inf, 2, None, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), norm_type=4, kernel_size=3, stride=2, padding=list[1,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), norm_type=math.inf, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float64"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float64"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 3],"float32"), 7.0, 2, None, 1, False, "NLC", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 3],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, data_format="NLC", )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float16"), 2, kernel_size=3, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float16"), norm_type=2.0, kernel_size=3, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), -math.inf, kernel_size=2, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), math.inf, kernel_size=list[2,4,], stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=-math.inf, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=2.0, kernel_size=2, stride=1, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=2.0, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=math.inf, kernel_size=list[2,4,], stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float64"), 2, kernel_size=5, stride=3, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float64"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 32, 3],"float32"), 2, kernel_size=2, stride=2, ceil_mode=False, data_format="NHWC", )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 32, 3],"float32"), norm_type=2.0, kernel_size=2, stride=list[2,2,], padding=0, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"int64"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 11, 11],"float32"), Tensor([2, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 11, 11],"float64"), Tensor([2, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 10],"float32"), Tensor([2, 4, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 10],"float64"), Tensor([2, 4, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 20],"float32"), Tensor([2, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 20],"float32"), Tensor([2, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=tuple(2,4,40,40,), name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 20],"float64"), Tensor([2, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 20],"float64"), Tensor([2, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=tuple(2,4,40,40,), name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 21, 21],"float32"), Tensor([2, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 21, 21],"float64"), Tensor([2, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 19],"float32"), Tensor([64, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 32, 10, 4],"float32"), Tensor([64, 32, 10, 4],"int32"), 2, 2, output_size=list[64,32,21,9,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 9],"float32"), Tensor([64, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 39],"float32"), Tensor([64, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float32"), Tensor([1, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"int64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 19, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 2, 2],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 21, 21],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 22, 22],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 120, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 120, 64, 128],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 32],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1280, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 144, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 16, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 10, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 16, 32],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 18, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 19, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 21, 21],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 36, 36],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 38, 38],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 42, 42],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 72, 72],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 76, 76],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 80, 80],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 84, 84],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 88, 88],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 9, 9],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 128, 128],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 136, 136],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 144, 144],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 15, 15],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 152, 152],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 16, 16],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 160, 160],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 168, 168],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 17, 17],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 176, 176],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 184, 184],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 192, 192],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 200, 200],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 208, 208],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 216, 216],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 224, 224],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 232, 232],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 240, 240],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 192, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 62, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 64, 128],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 64, 64],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 64, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 240, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 256, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 288, 3, 3],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 100, 100],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 104, 104],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 108, 108],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 112, 112],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 116, 116],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 120, 120],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 15, 15],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 16, 16],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 17, 17],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 64, 64],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 68, 68],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 72, 72],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 76, 76],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 80, 80],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 84, 84],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 88, 88],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 92, 92],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 384, 96, 96],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 480, 32, 64],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 128],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 19, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 21, 21],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 22, 22],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 3, 3],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 3, 3],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 576, 3, 3],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 672, 16, 32],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 672, 32, 64],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 72, 64, 128],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 768, 32, 32],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 768, 34, 34],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 768, 36, 36],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 768, 38, 38],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 768, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 768, 42, 42],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 768, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 768, 46, 46],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 768, 48, 48],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 768, 50, 50],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 768, 52, 52],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 768, 54, 54],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 768, 56, 56],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 768, 58, 58],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 768, 60, 60],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 13, 13],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 14, 14],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 15, 15],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 16, 16],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 17, 17],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 26, 26],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 28, 28],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 30, 30],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 32, 32],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 34, 34],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 52, 52],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 56, 56],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 60, 60],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 64, 64],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 68, 68],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 7, 7],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 8, 8],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 80, 80],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 9, 9],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 960, 16, 32],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([10, 512, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 120, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 120, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 144, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 144, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 16, 56, 56],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 16, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 2048, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 240, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 240, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 256, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 288, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 288, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 512, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 576, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 576, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 96, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 96, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([124, 1024, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([124, 192, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([124, 256, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([124, 320, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([124, 512, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([124, 768, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 4, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 4, 80],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 4, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1152, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1152, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 120, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1200, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 28, 28],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 28, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1280, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1280, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 144, 28, 28],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 144, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 144, 56, 56],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 144, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 152, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 168, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 192, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1920, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 2048, 7, 7],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 2048, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 2048, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 224, 56, 56],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 224, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 232, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 232, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 24, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 240, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 240, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 240, 28, 28],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 240, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 256, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 256, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 256, 16, 160],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 256, 16, 160],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 256, 56, 56],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 256, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 256, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 2560, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 32, 112, 112],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 32, 112, 112],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 14, 14],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 14, 14],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 336, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 336, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 360, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 384, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 40, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 448, 28, 28],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 448, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 480, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 480, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 480, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 504, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 504, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 16, 80],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 16, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 28, 28],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 7, 7],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 7, 7],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 56, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 600, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 64, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 64, 56, 56],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 64, 56, 56],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 640, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 640, 8, 8],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 640, 8, 8],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 672, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 672, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 672, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 672, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 72, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 720, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 768, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 768, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 768, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 768, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 768, 8, 80],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 768, 8, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 840, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 840, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 88, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 96, 56, 56],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 96, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 960, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 960, 8, 8],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 256, 56, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1536, 1024, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1536, 1024, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([154, 1024, 9, 9],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([154, 1024, 9, 9],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([154, 192, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([154, 256, 18, 18],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([154, 256, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([154, 384, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([154, 512, 18, 18],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([154, 512, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([154, 768, 9, 9],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 1024, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 10, 10],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 40, 40],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 44, 44],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 48, 48],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 48, 48],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 52, 52],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 52, 52],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 56, 56],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 56, 56],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 60, 60],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 60, 60],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 64, 64],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 64, 64],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 68, 68],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 68, 68],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 72, 72],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 72, 72],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 76, 76],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 76, 76],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 80, 80],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 80, 80],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 84, 84],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 84, 84],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 88, 88],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 88, 88],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 92, 92],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 92, 92],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 96, 96],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 192, 96, 96],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 2048, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 2048, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 240, 40, 40],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 240, 40, 40],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 256, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 256, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 336, 20, 20],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 336, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 336, 40, 40],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 336, 40, 40],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 10, 10],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 20, 20],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 22, 22],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 24, 24],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 24, 24],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 26, 26],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 26, 26],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 28, 28],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 28, 28],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 30, 30],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 30, 30],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 32, 32],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 32, 32],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 34, 34],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 34, 34],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 36, 36],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 36, 36],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 38, 38],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 38, 38],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 40, 40],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 42, 42],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 42, 42],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 44, 44],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 46, 46],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 46, 46],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 48, 48],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 384, 48, 48],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 40, 80, 80],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 40, 80, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 480, 20, 20],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 480, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 512, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 512, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 64, 80, 80],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 64, 80, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 10, 10],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 10, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 11, 11],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 12, 12],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 12, 12],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 13, 13],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 13, 13],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 14, 14],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 14, 14],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 15, 15],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 15, 15],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 16, 16],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 16, 16],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 17, 17],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 17, 17],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 18, 18],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 18, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 19, 19],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 19, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 20, 20],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 21, 21],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 21, 21],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 22, 22],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 23, 23],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 23, 23],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 24, 24],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 768, 24, 24],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 96, 10, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 96, 12, 12],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 96, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 96, 24, 24],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 96, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 96, 48, 48],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 96, 5, 5],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 96, 6, 6],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1914, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1917, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([192, 240, 8, 80],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([192, 480, 4, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([192, 480, 8, 80],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1921, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1929, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1934, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1947, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1950, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1950, 2048, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1000, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1000, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1024, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1024, 19, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1024, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1024, 21, 21],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1024, 22, 22],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1024, 6, 6],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1024, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 120, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 120, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1280, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1280, 19, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1280, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1280, 21, 21],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1280, 22, 22],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1280, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 144, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 16, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 10, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 18, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 19, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 21, 21],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 36, 36],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 38, 38],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 42, 42],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 72, 72],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 76, 76],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 80, 80],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 84, 84],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 88, 88],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 160, 9, 9],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1664, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 15, 15],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 16, 16],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 17, 17],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 24, 24],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 26, 26],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 28, 28],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 30, 30],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 32, 32],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 34, 34],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 36, 36],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 38, 38],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 42, 42],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 46, 46],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 48, 48],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 52, 52],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 56, 56],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 60, 60],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 64, 64],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 68, 68],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 72, 72],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 76, 76],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 80, 80],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 84, 84],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 88, 88],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 92, 92],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 192, 96, 96],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1920, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 64, 128],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 64, 64],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 64, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2208, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 240, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2688, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 288, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 4],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 4],"float64"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 4],"float64"), output_size=list[1,1,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 4],"float64"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 4],"float64"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 4],"float64"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 10, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 12, 12],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 13, 13],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 14, 14],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 15, 15],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 15, 15],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 16, 16],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 16, 16],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 17, 17],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 17, 17],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 18, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 19, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 2, 2],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 21, 21],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 23, 23],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 24, 24],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 26, 26],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 28, 28],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 30, 30],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 32, 32],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 34, 34],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 36, 36],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 38, 38],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 42, 42],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 46, 46],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 384, 48, 48],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 3],"float64"), output_size=3, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 3],"float64"), output_size=Tensor([2],"int32"), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 3],"float64"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 3],"float64"), output_size=tuple(3,3,), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 480, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 19, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 21, 21],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 22, 22],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 7],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 576, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 640, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 640, 19, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 640, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 640, 21, 21],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 640, 22, 22],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 672, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 672, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 72, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 768, 10, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 768, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 768, 12, 12],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 768, 13, 13],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 768, 14, 14],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 768, 15, 15],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 768, 16, 16],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 768, 17, 17],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 768, 18, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 768, 19, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 768, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 768, 21, 21],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 768, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 768, 23, 23],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 768, 24, 24],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 13, 13],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 14, 14],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 15, 15],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 16, 16],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 17, 17],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 26, 26],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 28, 28],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 30, 30],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 32, 32],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 34, 34],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 48, 48],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 52, 52],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 56, 56],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 60, 60],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 64, 64],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 68, 68],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 7, 7],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 72, 72],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 76, 76],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 8, 8],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 80, 80],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 84, 84],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 88, 88],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 9, 9],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 92, 92],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 96, 96],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 960, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([20, 192, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2003, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2012, 2048, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2016, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2022, 2048, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2023, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2025, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2036, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2036, 2048, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2037, 2048, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2038, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2041, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2044, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2045, 2048, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2047, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2048, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2048, 2048, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([24, 256, 16, 16],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([24, 256, 24, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([24, 256, 25, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([24, 256, 26, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([24, 512, 16, 16],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([24, 512, 24, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([24, 512, 25, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([24, 512, 26, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([240, 2048, 7, 7],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([240, 2048, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 104, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 112, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 120, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 128, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 1280, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 1280, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 144, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 144, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 152, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 16, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 176, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 184, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 192, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 200, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 2048, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 2048, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 216, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 24, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 240, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 240, 4, 50],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 240, 4, 50],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 256, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 288, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 304, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 32, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 336, 2, 50],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 336, 2, 50],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 336, 4, 50],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 336, 4, 50],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 360, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 384, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 40, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 40, 4, 50],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 40, 4, 50],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 432, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 48, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 480, 2, 50],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 480, 2, 50],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 512, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 576, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 64, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 64, 4, 50],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 64, 4, 50],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 64, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 640, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 640, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 7, 7, 2048],"float16"), output_size=1, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 72, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 720, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 8, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 88, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 88, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 96, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([3, 2048, 8, 8],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([3, 64, 1, 1],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 1024, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 128, 5, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 2048, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 256, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 384, 11, 11],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 384, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 384, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 384, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 384, 15, 15],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 512, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 64, 5, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 768, 11, 11],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 768, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 768, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 768, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 768, 15, 15],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32, 960, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1024, 20, 20],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1024, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1024, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1024, 4, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1024, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1152, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 120, 64, 128],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 120, 64, 128],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 12, 12],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 13, 13],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 14, 14],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 15, 15],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 24, 24],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 26, 26],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 28, 28],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 30, 30],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 32],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 32],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 32],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 32],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 32],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 48, 48],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 52, 52],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 56, 56],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 6, 6],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 60, 60],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 64, 64],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 64, 64],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 7, 7],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 8, 8],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1280, 22, 22],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1280, 24, 24],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1280, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1280, 30, 30],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1280, 34, 34],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1280, 36, 36],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1280, 40, 40],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1280, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1536, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 16, 256, 256],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 16, 256, 256],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 32],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 32],"float16"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 32],"float16"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 32],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 176, 11, 11],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 176, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 176, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 176, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 176, 15, 15],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 192, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 192, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 192, 24, 24],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 192, 26, 26],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 192, 28, 28],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 192, 30, 30],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 192, 32, 32],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 192, 34, 34],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 192, 36, 36],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 192, 38, 38],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 192, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 192, 42, 42],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 192, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 192, 46, 46],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 192, 48, 48],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 2048, 64, 128],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 2048, 64, 128],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 2048, 64, 64],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 2048, 64, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 24, 120, 120],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 24, 240, 240],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 24, 30, 30],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 24, 60, 60],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 240, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 240, 56, 56],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 240, 60, 60],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 240, 64, 64],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 240, 64, 64],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 240, 64, 64],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 240, 68, 68],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 240, 72, 72],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 240, 76, 76],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 240, 8, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 240, 80, 80],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 240, 84, 84],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 240, 88, 88],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 240, 96, 96],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 256, 16, 160],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 256, 160, 160],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 256, 160, 160],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 256, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 320, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 10, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 11, 11],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 12, 12],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 13, 13],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 14, 14],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 15, 15],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 15, 15],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 16, 16],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 17, 17],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 18, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 19, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 21, 21],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 23, 23],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 24, 24],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 32, 32],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 384, 32, 32],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 28, 28],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 30, 30],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 32, 32],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 32, 64],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 32, 64],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 34, 34],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 36, 36],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 38, 38],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 42, 42],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 48, 48],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 8, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 128],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 128],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 128],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 128],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 128],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 16, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 80, 80],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 80, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 640, 22, 22],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 640, 24, 24],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 640, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 640, 30, 30],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 640, 34, 34],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 640, 36, 36],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 640, 40, 40],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 672, 16, 32],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 672, 16, 32],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 672, 32, 64],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 672, 32, 64],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 72, 64, 128],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 72, 64, 128],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 768, 11, 11],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 768, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 768, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 768, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 768, 15, 15],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 768, 16, 16],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 768, 16, 16],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 768, 40, 40],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 768, 40, 40],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 768, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 768, 8, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 88, 11, 11],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 88, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 88, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 88, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 88, 15, 15],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 12, 12],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 120, 120],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 13, 13],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 14, 14],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 15, 15],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 24, 24],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 240, 240],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 26, 26],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 28, 28],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 30, 30],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 30, 30],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 48, 48],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 52, 52],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 56, 56],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 6, 6],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 60, 60],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 60, 60],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 64, 64],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 68, 68],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 7, 7],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 72, 72],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 76, 76],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 8, 8],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 80, 80],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 84, 84],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 88, 88],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 92, 92],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 96, 96, 96],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 960, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 960, 14, 14],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 960, 15, 15],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 960, 16, 16],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 960, 16, 32],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 960, 16, 32],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 960, 17, 17],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 960, 18, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 960, 19, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 960, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 960, 21, 21],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 960, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 960, 24, 24],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([40, 2048, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([48, 1280, 11, 11],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([48, 1280, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([48, 1280, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([48, 1280, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([48, 1280, 15, 15],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([48, 2048, 7, 7],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([48, 2048, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([48, 640, 11, 11],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([48, 640, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([48, 640, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([48, 640, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([48, 640, 15, 15],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 1024, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 1024, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 116, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 116, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 120, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 120, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 120, 28, 28],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 120, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 1248, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 1248, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 128, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 128, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 144, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 144, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 144, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 144, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 156, 28, 28],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 156, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 16, 56, 56],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 16, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 176, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 176, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 192, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 192, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 2048, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 232, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 232, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 232, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 232, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 240, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 240, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 2, 25],"float16"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 2, 25],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 288, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 288, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 384, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 384, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 464, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 464, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 48, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 48, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 512, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 512, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 576, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 576, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 60, 28, 28],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 60, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 624, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 624, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 64, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 64, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 64, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 64, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 72, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 72, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 768, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 768, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 8, 56, 56],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 8, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 872, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 872, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 872, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 872, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 88, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 88, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 92, 28, 28],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 92, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 96, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 96, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([60, 1152, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([60, 1536, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([60, 2048, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([60, 240, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([60, 256, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([60, 336, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([60, 336, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([60, 40, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([60, 480, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([60, 512, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([60, 64, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 1024, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 1024, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 1024, 8, 8],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 1024, 8, 8],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 1044, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 1044, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 1152, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 120, 16, 16],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 120, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 120, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 120, 22, 22],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 120, 24, 24],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 128, 32, 32],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 128, 32, 32],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 128, 64, 64],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 128, 64, 64],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 1280, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 1280, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 1536, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 1536, 8, 8],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 1536, 8, 8],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 1584, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 1584, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 192, 10, 10],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 192, 10, 10],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 192, 11, 11],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 192, 11, 11],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 192, 12, 12],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 192, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 192, 8, 8],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 192, 8, 8],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 192, 9, 9],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 192, 9, 9],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 2048, 10, 10],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 2048, 10, 10],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 2048, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 2048, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 2048, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 2048, 8, 8],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 2048, 8, 8],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 2208, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 2208, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 224, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 228, 28, 28],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 228, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 240, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 240, 28, 28],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 240, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 256, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 256, 16, 16],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 256, 16, 16],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 256, 2, 160],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 256, 2, 160],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 256, 3, 160],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 256, 3, 160],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 256, 32, 32],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 256, 32, 32],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 256, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 256, 6, 8],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 256, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 256, 8, 6],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 2560, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 2560, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 300, 28, 28],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 300, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 320, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 336, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 336, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 336, 28, 28],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 336, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 336, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 366, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 366, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 384, 10, 10],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 384, 10, 10],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 384, 11, 11],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 384, 11, 11],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 384, 12, 12],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 384, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 384, 8, 8],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 384, 8, 8],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 384, 9, 9],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 384, 9, 9],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 40, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 432, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 432, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 44, 32, 32],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 44, 36, 36],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 44, 40, 40],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 44, 44, 44],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 44, 48, 48],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 448, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 48, 16, 16],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 48, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 48, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 48, 22, 22],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 48, 24, 24],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 48, 32, 32],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 48, 36, 36],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 48, 40, 40],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 48, 44, 44],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 48, 48, 48],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 480, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 480, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 480, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 504, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 504, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 16, 16],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 16, 16],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 2, 160],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 2, 160],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 3, 80],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 3, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 6, 8],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 8, 6],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 8, 8],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 8, 8],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 570, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 570, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 624, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 624, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 636, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 636, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 64, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 64, 64, 64],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 64, 64, 64],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 640, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 702, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 702, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 768, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 768, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 768, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 832, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 832, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 840, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 840, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 906, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 906, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 10, 10],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 10, 10],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 10, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 11, 11],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 11, 11],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 12, 12],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 12, 12],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 16, 16],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 16, 16],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 16, 16],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 18, 18],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 18, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 20, 20],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 22, 22],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 22, 22],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 24, 24],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 24, 24],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 24, 24],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 32, 32],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 32, 32],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 36, 36],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 36, 36],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 4, 4],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 4, 4],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 40, 40],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 44, 44],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 48, 48],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 48, 48],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 5, 5],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 5, 5],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 6, 6],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 6, 6],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 8, 8],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 8, 8],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 8, 8],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 9, 9],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 9, 9],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 96, 9, 9],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 960, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 960, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 960, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 972, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 972, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([640, 120, 28, 28],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([640, 120, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([640, 480, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([640, 480, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([640, 672, 14, 14],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([640, 672, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([640, 672, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([640, 672, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([640, 72, 28, 28],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([640, 72, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([640, 960, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([640, 960, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([77, 1280, 9, 9],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([77, 320, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([77, 640, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 1024, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 1024, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 1024, 19, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 1024, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 1024, 21, 21],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 1024, 22, 22],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 120, 44, 44],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 120, 52, 52],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 120, 64, 64],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 120, 72, 72],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 120, 76, 76],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 144, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 144, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 144, 56, 56],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 144, 60, 60],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 144, 80, 80],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 144, 88, 88],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 10, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 18, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 19, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 21, 21],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 36, 36],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 38, 38],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 42, 42],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 72, 72],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 76, 76],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 80, 80],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 84, 84],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 88, 88],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 160, 9, 9],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 20, 20],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 20, 20],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 22, 22],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 24, 24],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 24, 24],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 26, 26],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 26, 26],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 28, 28],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 28, 28],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 30, 30],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 30, 30],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 32, 32],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 32, 32],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 34, 34],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 34, 34],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 36, 36],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 36, 36],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 38, 38],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 38, 38],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 40, 40],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 42, 42],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 42, 42],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 44, 44],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 46, 46],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 46, 46],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 48, 48],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 48, 48],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 68, 68],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 72, 72],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 76, 76],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 84, 84],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 88, 88],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 192, 92, 92],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 2048, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 2048, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 24, 120, 120],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 24, 160, 160],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 24, 160, 160],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 24, 20, 20],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 24, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 24, 240, 240],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 24, 30, 30],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 24, 40, 40],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 24, 40, 40],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 24, 60, 60],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 24, 80, 80],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 24, 80, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 256, 160, 160],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 256, 3, 160],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 256, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 288, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 288, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 288, 28, 28],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 288, 30, 30],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 288, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 288, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 10, 10],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 10, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 11, 11],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 12, 12],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 12, 12],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 13, 13],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 13, 13],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 14, 14],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 14, 14],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 15, 15],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 15, 15],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 16, 16],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 16, 16],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 17, 17],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 17, 17],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 18, 18],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 18, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 19, 19],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 19, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 20, 20],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 20, 20],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 21, 21],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 21, 21],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 22, 22],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 23, 23],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 23, 23],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 24, 24],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 24, 24],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 34, 34],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 36, 36],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 38, 38],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 42, 42],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 384, 46, 46],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 480, 22, 22],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 480, 26, 26],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 480, 32, 32],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 480, 36, 36],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 480, 38, 38],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 512, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 512, 19, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 512, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 512, 21, 21],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 512, 22, 22],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 512, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 512, 3, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 512, 80, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 576, 10, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 576, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 576, 14, 14],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 576, 15, 15],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 576, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 576, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 672, 11, 11],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 672, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 672, 16, 16],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 672, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 672, 19, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 672, 22, 22],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 672, 26, 26],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 672, 32, 32],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 672, 36, 36],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 672, 38, 38],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 72, 44, 44],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 72, 52, 52],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 72, 64, 64],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 72, 72, 72],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 72, 76, 76],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 768, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 768, 17, 17],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 768, 18, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 768, 19, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 768, 21, 21],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 768, 22, 22],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 768, 23, 23],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 768, 40, 40],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 120, 120],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 160, 160],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 160, 160],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 20, 20],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 240, 240],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 30, 30],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 40, 40],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 40, 40],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 40, 40],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 40, 40],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 44, 44],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 44, 44],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 48, 48],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 48, 48],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 52, 52],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 52, 52],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 56, 56],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 56, 56],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 60, 60],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 60, 60],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 60, 60],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 64, 64],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 64, 64],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 68, 68],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 68, 68],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 72, 72],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 72, 72],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 76, 76],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 76, 76],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 80, 80],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 80, 80],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 80, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 80, 80],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 84, 84],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 84, 84],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 88, 88],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 88, 88],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 92, 92],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 92, 92],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 96, 96],"float16"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 96, 96, 96],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 960, 11, 11],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 960, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 960, 16, 16],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 960, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 960, 19, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([90, 256, 11, 11],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([90, 256, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([90, 256, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([90, 256, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([90, 256, 15, 15],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([90, 512, 11, 11],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([90, 512, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([90, 512, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([90, 512, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([90, 512, 15, 15],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([96, 2048, 7, 7],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([96, 2048, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([96, 240, 8, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([96, 480, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([96, 480, 8, 80],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 4],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), output_size=list[1,1,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 4, 3],"float64"), output_size=3, data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 4, 3],"float64"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 4, 3],"float64"), output_size=tuple(3,3,), data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 10],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 7],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 8],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 8],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 9],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 8, 7],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 8, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 9, 7],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 9, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=Tensor([3],"int64"), )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.incubate.segment_max(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_mean(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_min(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_sum(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.max(Tensor([1, 1, 192],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([1, 1, 32, 32],"float32"), )
paddle.max(Tensor([1, 120],"float32"), )
paddle.max(Tensor([1, 16, 12, 12],"float32"), )
paddle.max(Tensor([1, 1],"int32"), )
paddle.max(Tensor([1, 257, 192],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([1, 32, 8],"float32"), axis=list[0,], )
paddle.max(Tensor([1, 32, 8],"float32"), axis=list[2,], )
paddle.max(Tensor([1, 576],"float32"), )
paddle.max(Tensor([1, 6, 16, 16],"float32"), )
paddle.max(Tensor([1, 6, 32, 32],"float32"), )
paddle.max(Tensor([1, 84],"float32"), )
paddle.max(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.max(Tensor([10, 20],"float64"), axis=-1, keepdim=True, )
paddle.max(Tensor([10, 4, 60],"int32"), axis=1, )
paddle.max(Tensor([10, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.max(Tensor([100],"int64"), )
paddle.max(Tensor([1024],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([11008, 64],"float16"), axis=tuple(0,), )
paddle.max(Tensor([115],"float64"), )
paddle.max(Tensor([120, 84],"float32"), )
paddle.max(Tensor([128, 1, 128],"float32"), axis=2, )
paddle.max(Tensor([128, 124],"float16"), axis=1, keepdim=True, )
paddle.max(Tensor([128, 124],"float32"), axis=1, keepdim=True, )
paddle.max(Tensor([128, 128],"float32"), )
paddle.max(Tensor([128, 128],"int32"), axis=0, )
paddle.max(Tensor([128, 512],"int32"), axis=0, )
paddle.max(Tensor([13, 3, 3],"float32"), 2, )
paddle.max(Tensor([13, 3],"float32"), 1, )
paddle.max(Tensor([13, 4, 2],"float32"), )
paddle.max(Tensor([14, 64, 16],"float32"), )
paddle.max(Tensor([14, 64, 4],"float32"), )
paddle.max(Tensor([14, 7, 32],"float32"), )
paddle.max(Tensor([14, 7, 99],"float32"), )
paddle.max(Tensor([145],"float64"), )
paddle.max(Tensor([149],"float32"), )
paddle.max(Tensor([16, 32, 64],"float32"), axis=0, )
paddle.max(Tensor([16, 6, 5, 5],"float32"), )
paddle.max(Tensor([192, 1024],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([192, 192],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([192, 3, 14, 14],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([192, 512],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([192],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([1],"float64"), )
paddle.max(Tensor([1],"int32"), )
paddle.max(Tensor([2, 1, 2],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([2, 128],"int32"), axis=0, )
paddle.max(Tensor([2, 18432],"float16"), axis=1, )
paddle.max(Tensor([2, 19328],"float16"), axis=1, )
paddle.max(Tensor([2, 19456],"float16"), axis=1, )
paddle.max(Tensor([2, 1],"int32"), )
paddle.max(Tensor([2, 2, 2, 2, 2, 2, 2],"float32"), axis=-1, )
paddle.max(Tensor([2, 2, 2, 2, 2, 2, 2],"float32"), axis=6, )
paddle.max(Tensor([2, 2, 2],"int32"), tuple(0,1,), False, )
paddle.max(Tensor([2, 2, 64, 64],"float16"), axis=list[0,2,3,], )
paddle.max(Tensor([2, 22144],"float16"), axis=1, )
paddle.max(Tensor([2, 245],"float32"), axis=0, )
paddle.max(Tensor([2, 2],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([2, 2],"float32"), axis=tuple(-2,-1,), )
paddle.max(Tensor([2, 3170304],"float16"), axis=1, )
paddle.max(Tensor([2, 3324416],"float16"), axis=1, )
paddle.max(Tensor([2, 3346432],"float16"), axis=1, )
paddle.max(Tensor([2, 3808768],"float16"), axis=1, )
paddle.max(Tensor([2, 3],"float32"), )
paddle.max(Tensor([2, 3],"float32"), axis=Tensor([],"int64"), )
paddle.max(Tensor([2, 4, 60],"int32"), axis=1, )
paddle.max(Tensor([2, 4],"float64"), 0, False, )
paddle.max(Tensor([2, 4],"float64"), 1, True, )
paddle.max(Tensor([2, 4],"float64"), None, False, )
paddle.max(Tensor([2, 512],"int32"), axis=0, )
paddle.max(Tensor([2, 6],"float32"), axis=0, )
paddle.max(Tensor([2, 8, 64, 64],"float16"), axis=list[0,2,3,], )
paddle.max(Tensor([20, 4, 60],"int32"), axis=1, )
paddle.max(Tensor([2],"float32"), )
paddle.max(Tensor([2],"float64"), axis=0, )
paddle.max(Tensor([2],"int32"), )
paddle.max(Tensor([3, 128, 96],"int32"), axis=list[2,], keepdim=False, )
paddle.max(Tensor([3, 2, 5],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([3, 5],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([3, 5],"float32"), axis=None, )
paddle.max(Tensor([3, 5],"float32"), keepdim=True, )
paddle.max(Tensor([3, 5],"float64"), axis=-1, keepdim=True, )
paddle.max(Tensor([30, 200, 40],"float32"), )
paddle.max(Tensor([30, 200, 40],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.max(Tensor([30, 200, 40],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.max(Tensor([30, 200, 40],"float32"), axis=list[0,1,], keepdim=False, )
paddle.max(Tensor([30, 200, 40],"float32"), keepdim=False, )
paddle.max(Tensor([30, 200, 40],"float32"), keepdim=True, )
paddle.max(Tensor([30, 4, 60],"int32"), axis=1, )
paddle.max(Tensor([30],"float32"), keepdim=True, )
paddle.max(Tensor([32, 128],"float32"), axis=-1, )
paddle.max(Tensor([32, 32, 128],"float32"), axis=-1, )
paddle.max(Tensor([32, 64, 128],"float32"), axis=0, )
paddle.max(Tensor([32],"float32"), axis=list[0,], keepdim=False, )
paddle.max(Tensor([3],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([3],"float64"), axis=-1, keepdim=True, )
paddle.max(Tensor([3],"int32"), )
paddle.max(Tensor([4, 256, 16, 16],"float16"), axis=2, keepdim=True, )
paddle.max(Tensor([4, 256, 16, 16],"float16"), axis=3, keepdim=True, )
paddle.max(Tensor([4, 2],"float64"), axis=0, )
paddle.max(Tensor([4, 2],"int32"), axis=0, )
paddle.max(Tensor([4, 4, 60],"int32"), axis=1, )
paddle.max(Tensor([416, 50, 7, 256],"float32"), axis=1, )
paddle.max(Tensor([5, 3],"float32"), )
paddle.max(Tensor([5, 5],"float64"), axis=1, )
paddle.max(Tensor([50364],"float32"), )
paddle.max(Tensor([512, 192],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([512, 50, 7, 256],"float32"), axis=1, )
paddle.max(Tensor([512],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([52, 50, 7, 256],"float32"), axis=1, )
paddle.max(Tensor([576, 120],"float32"), )
paddle.max(Tensor([5],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([5],"float32"), axis=0, )
paddle.max(Tensor([6, 1, 3, 3],"float32"), )
paddle.max(Tensor([6, 4, 60],"int32"), axis=1, )
paddle.max(Tensor([60],"int64"), )
paddle.max(Tensor([64, 1, 28, 28],"float32"), )
paddle.max(Tensor([64, 11008],"float16"), axis=tuple(0,), )
paddle.max(Tensor([64, 128, 96],"float32"), axis=list[0,1,], )
paddle.max(Tensor([64, 128, 96],"float32"), axis=list[2,], )
paddle.max(Tensor([64, 64],"float16"), axis=tuple(0,), )
paddle.max(Tensor([6],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([79],"float64"), )
paddle.max(Tensor([8, 1024, 1024],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([8, 16, 32],"float32"), axis=list[0,1,2,], keepdim=False, )
paddle.max(Tensor([8, 2],"float64"), axis=0, )
paddle.max(Tensor([8, 4],"float64"), axis=0, )
paddle.max(Tensor([84, 10],"float32"), )
paddle.max(Tensor([92],"float64"), )
paddle.max(Tensor([],"float32"), )
paddle.max(Tensor([],"float32"), 0, )
paddle.max(Tensor([],"float32"), axis=-1, )
paddle.max(Tensor([],"float32"), axis=0, )
paddle.max(Tensor([],"float32"), axis=None, )
paddle.max(Tensor([],"float32"), axis=list[], )
paddle.max(Tensor([],"float64"), )
paddle.max(Tensor([],"float64"), None, False, )
paddle.max(Tensor([],"int32"), )
paddle.max(x=Tensor([2, 2],"float32"), axis=list[-2,1,], keepdim=False, )
paddle.max(x=Tensor([2, 3],"float32"), )
paddle.max(x=Tensor([2, 3],"float32"), axis=-2, )
paddle.max(x=Tensor([2, 3],"float32"), axis=0, keepdim=True, )
paddle.max(x=Tensor([2, 3],"float32"), axis=1, )
paddle.max(x=Tensor([2, 3],"float32"), axis=Tensor([1],"int64"), )
paddle.min(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.min(Tensor([10, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.min(Tensor([128, 4],"float16"), axis=1, keepdim=True, )
paddle.min(Tensor([128, 4],"float32"), axis=1, keepdim=True, )
paddle.min(Tensor([16, 32],"float32"), list[0,], )
paddle.min(Tensor([16, 32],"float32"), list[1,], )
paddle.min(Tensor([1],"int64"), )
paddle.min(Tensor([2, 2, 2],"int32"), tuple(0,1,), False, )
paddle.min(Tensor([2, 245],"float32"), axis=0, )
paddle.min(Tensor([2, 3],"float32"), )
paddle.min(Tensor([2, 4],"float64"), 0, False, )
paddle.min(Tensor([2, 4],"float64"), 1, True, )
paddle.min(Tensor([2, 4],"float64"), None, False, )
paddle.min(Tensor([2],"float64"), axis=0, )
paddle.min(Tensor([2],"float64"), axis=tuple(0,), )
paddle.min(Tensor([2],"int64"), )
paddle.min(Tensor([3, 5],"float32"), axis=None, )
paddle.min(Tensor([3, 5],"float32"), keepdim=True, )
paddle.min(Tensor([4, 2],"float64"), axis=0, )
paddle.min(Tensor([5],"float32"), axis=0, )
paddle.min(Tensor([64, 1, 28, 28],"float32"), )
paddle.min(Tensor([8, 2],"float64"), axis=0, )
paddle.min(Tensor([8, 4],"float64"), axis=0, )
paddle.min(Tensor([],"float32"), axis=-1, )
paddle.min(Tensor([],"float32"), axis=0, )
paddle.min(Tensor([],"float32"), axis=None, )
paddle.min(Tensor([],"float32"), axis=list[], )
paddle.min(Tensor([],"float64"), None, False, )
paddle.min(x=Tensor([2, 2],"float32"), axis=list[-2,1,], keepdim=False, )
paddle.min(x=Tensor([2, 3],"float32"), )
paddle.min(x=Tensor([2, 3],"float32"), axis=-2, )
paddle.min(x=Tensor([2, 3],"float32"), axis=0, keepdim=True, )
paddle.min(x=Tensor([2, 3],"float32"), axis=1, )
paddle.min(x=Tensor([2, 3],"float32"), axis=Tensor([1],"int32"), )
paddle.mean(Tensor([1, 1, 1, 1, 3],"float64"), )
paddle.mean(Tensor([1, 1, 1, 1],"float64"), )
paddle.mean(Tensor([1, 1, 1, 4, 3],"float64"), )
paddle.mean(Tensor([1, 1, 1, 4, 7],"float64"), )
paddle.mean(Tensor([1, 1, 100],"float32"), )
paddle.mean(Tensor([1, 1, 16, 16],"float32"), )
paddle.mean(Tensor([1, 1, 16, 16],"float64"), )
paddle.mean(Tensor([1, 1, 16, 8, 4],"float32"), )
paddle.mean(Tensor([1, 1, 17, 9, 5],"float16"), )
paddle.mean(Tensor([1, 1, 17, 9, 5],"float32"), )
paddle.mean(Tensor([1, 1, 19, 84],"float32"), )
paddle.mean(Tensor([1, 1, 1],"float64"), )
paddle.mean(Tensor([1, 1, 276, 49],"float32"), )
paddle.mean(Tensor([1, 1, 2],"float64"), )
paddle.mean(Tensor([1, 1, 3, 3, 3],"float32"), )
paddle.mean(Tensor([1, 1, 3, 3, 3],"float64"), )
paddle.mean(Tensor([1, 1, 3, 3, 5],"float64"), )
paddle.mean(Tensor([1, 1, 3, 3],"float32"), )
paddle.mean(Tensor([1, 1, 3, 3],"float64"), )
paddle.mean(Tensor([1, 1, 3, 4, 3],"float64"), )
paddle.mean(Tensor([1, 1, 3, 4, 4],"float64"), )
paddle.mean(Tensor([1, 1, 3, 6, 3],"float64"), )
paddle.mean(Tensor([1, 1, 30, 30],"float32"), )
paddle.mean(Tensor([1, 1, 3],"float64"), )
paddle.mean(Tensor([1, 1, 4, 4],"float32"), )
paddle.mean(Tensor([1, 1, 4, 4],"float64"), )
paddle.mean(Tensor([1, 1, 4],"float32"), )
paddle.mean(Tensor([1, 1, 4],"float64"), )
paddle.mean(Tensor([1, 1, 5, 4],"float64"), )
paddle.mean(Tensor([1, 1, 5],"float32"), )
paddle.mean(Tensor([1, 1, 6, 6, 6],"float32"), )
paddle.mean(Tensor([1, 1, 6, 6, 6],"float64"), )
paddle.mean(Tensor([1, 1, 6, 6],"float32"), )
paddle.mean(Tensor([1, 1, 6, 6],"float64"), )
paddle.mean(Tensor([1, 1, 64, 32],"float16"), )
paddle.mean(Tensor([1, 1, 64, 32],"float64"), )
paddle.mean(Tensor([1, 1, 65, 129],"float16"), )
paddle.mean(Tensor([1, 1, 65, 129],"float64"), )
paddle.mean(Tensor([1, 1, 6],"float32"), )
paddle.mean(Tensor([1, 1, 7],"float32"), )
paddle.mean(Tensor([1, 1, 8, 10, 12],"float64"), )
paddle.mean(Tensor([1, 1, 8, 16],"float32"), )
paddle.mean(Tensor([1, 1, 8, 8, 4],"float32"), )
paddle.mean(Tensor([1, 1, 8],"float32"), )
paddle.mean(Tensor([1, 10, 100],"float16"), )
paddle.mean(Tensor([1, 10, 10],"float16"), )
paddle.mean(Tensor([1, 10, 10],"float64"), )
paddle.mean(Tensor([1, 100, 1],"float64"), )
paddle.mean(Tensor([1, 100, 2, 2, 2, 2],"float16"), )
paddle.mean(Tensor([1, 100, 2, 2, 2, 2],"float64"), )
paddle.mean(Tensor([1, 11, 32000],"float32"), )
paddle.mean(Tensor([1, 120],"float64"), )
paddle.mean(Tensor([1, 1],"float32"), )
paddle.mean(Tensor([1, 1],"float32"), name=None, )
paddle.mean(Tensor([1, 2, 1, 1, 5],"float64"), )
paddle.mean(Tensor([1, 2, 1, 3],"float64"), )
paddle.mean(Tensor([1, 2, 10],"float32"), )
paddle.mean(Tensor([1, 2, 12, 12],"float64"), )
paddle.mean(Tensor([1, 2, 2, 2, 2, 100],"float16"), )
paddle.mean(Tensor([1, 2, 2, 2, 2, 100],"float64"), )
paddle.mean(Tensor([1, 2, 2, 3],"float64"), )
paddle.mean(Tensor([1, 2, 2],"float32"), )
paddle.mean(Tensor([1, 2, 2],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 2],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 4, 3, 3],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 5, 6],"float16"), )
paddle.mean(Tensor([1, 2, 3, 4, 5, 6],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4],"float32"), )
paddle.mean(Tensor([1, 2, 3, 4],"float64"), )
paddle.mean(Tensor([1, 2, 3],"float32"), )
paddle.mean(Tensor([1, 2, 3],"float64"), )
paddle.mean(Tensor([1, 2, 4, 4, 4],"float32"), )
paddle.mean(Tensor([1, 2, 4, 4, 4],"float64"), )
paddle.mean(Tensor([1, 2, 4, 4],"float64"), )
paddle.mean(Tensor([1, 2, 4],"float32"), )
paddle.mean(Tensor([1, 2, 5],"float32"), )
paddle.mean(Tensor([1, 2, 5],"float64"), )
paddle.mean(Tensor([1, 2, 6, 6],"float32"), )
paddle.mean(Tensor([1, 2, 6, 7],"float64"), )
paddle.mean(Tensor([1, 2, 6],"float32"), )
paddle.mean(Tensor([1, 2, 6],"float64"), )
paddle.mean(Tensor([1, 2, 7],"float32"), )
paddle.mean(Tensor([1, 2, 7],"float64"), )
paddle.mean(Tensor([1, 200, 3],"float16"), )
paddle.mean(Tensor([1, 200, 3],"float64"), )
paddle.mean(Tensor([1, 28, 28],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([1, 2],"float32"), )
paddle.mean(Tensor([1, 2],"float64"), )
paddle.mean(Tensor([1, 3, 1, 1, 1],"float16"), )
paddle.mean(Tensor([1, 3, 1, 1, 1],"float64"), )
paddle.mean(Tensor([1, 3, 100],"float16"), )
paddle.mean(Tensor([1, 3, 100],"float64"), )
paddle.mean(Tensor([1, 3, 2, 2, 3],"float64"), )
paddle.mean(Tensor([1, 3, 256, 256],"float32"), )
paddle.mean(Tensor([1, 3, 2],"float32"), )
paddle.mean(Tensor([1, 3, 2],"float64"), )
paddle.mean(Tensor([1, 3, 3, 3, 3],"float64"), )
paddle.mean(Tensor([1, 3, 3, 4, 2],"float64"), )
paddle.mean(Tensor([1, 3, 3, 5],"float32"), )
paddle.mean(Tensor([1, 3, 32, 32],"float32"), )
paddle.mean(Tensor([1, 3, 3],"float64"), )
paddle.mean(Tensor([1, 3, 4, 1, 1],"float64"), )
paddle.mean(Tensor([1, 3, 4, 2, 2],"float64"), )
paddle.mean(Tensor([1, 3, 4, 5, 3],"float64"), )
paddle.mean(Tensor([1, 3, 5, 1],"float64"), )
paddle.mean(Tensor([1, 3, 5, 5, 5],"float16"), )
paddle.mean(Tensor([1, 3, 5, 5, 5],"float64"), )
paddle.mean(Tensor([1, 3, 50],"float16"), )
paddle.mean(Tensor([1, 3, 50],"float64"), )
paddle.mean(Tensor([1, 3, 6, 3, 3],"float16"), )
paddle.mean(Tensor([1, 3, 6, 3, 3],"float64"), )
paddle.mean(Tensor([1, 3, 6, 3, 4],"float64"), )
paddle.mean(Tensor([1, 3, 6, 8, 3],"float16"), )
paddle.mean(Tensor([1, 3, 6, 8, 3],"float64"), )
paddle.mean(Tensor([1, 3, 6, 8, 4],"float64"), )
paddle.mean(Tensor([1, 3, 7, 7, 7],"float64"), )
paddle.mean(Tensor([1, 3, 7, 9, 11],"float64"), )
paddle.mean(Tensor([1, 3, 8, 10, 12],"float64"), )
paddle.mean(Tensor([1, 3, 8, 3, 2],"float64"), )
paddle.mean(Tensor([1, 3, 8, 7, 6],"float16"), )
paddle.mean(Tensor([1, 3, 8, 7, 6],"float64"), )
paddle.mean(Tensor([1, 3],"float32"), )
paddle.mean(Tensor([1, 3],"float64"), )
paddle.mean(Tensor([1, 4, 3, 2, 100],"float16"), )
paddle.mean(Tensor([1, 4, 3],"float64"), )
paddle.mean(Tensor([1, 4, 4, 100],"float16"), )
paddle.mean(Tensor([1, 4, 4, 8],"float64"), )
paddle.mean(Tensor([1, 4],"float16"), )
paddle.mean(Tensor([1, 4],"float32"), )
paddle.mean(Tensor([1, 4],"float32"), axis=Tensor([],"int64"), )
paddle.mean(Tensor([1, 5, 2, 1, 3],"float64"), )
paddle.mean(Tensor([1, 5, 2, 2, 7],"float64"), )
paddle.mean(Tensor([1, 5, 2],"float64"), )
paddle.mean(Tensor([1, 5, 3],"float64"), )
paddle.mean(Tensor([1, 5, 5, 5, 3],"float64"), )
paddle.mean(Tensor([1, 5, 5],"float64"), )
paddle.mean(Tensor([1, 5, 6, 4],"float64"), )
paddle.mean(Tensor([1, 50, 15],"float64"), )
paddle.mean(Tensor([1, 50, 3],"float64"), )
paddle.mean(Tensor([1, 512],"float32"), 1, keepdim=True, )
paddle.mean(Tensor([1, 5],"float16"), )
paddle.mean(Tensor([1, 6, 7, 4, 3],"float64"), )
paddle.mean(Tensor([1, 6, 7, 5, 3],"float64"), )
paddle.mean(Tensor([1, 64, 64, 64],"float32"), )
paddle.mean(Tensor([1, 6],"float64"), )
paddle.mean(Tensor([1, 7, 3, 2, 3],"float64"), )
paddle.mean(Tensor([1, 7, 3, 3, 3],"float64"), )
paddle.mean(Tensor([1, 7, 7, 7, 3],"float64"), )
paddle.mean(Tensor([1, 7, 8, 6, 3],"float64"), )
paddle.mean(Tensor([1, 7],"float32"), )
paddle.mean(Tensor([1, 7],"float64"), )
paddle.mean(Tensor([1, 8, 2],"float64"), )
paddle.mean(Tensor([1, 8, 4, 3],"float64"), )
paddle.mean(Tensor([1, 8, 4, 4],"float64"), )
paddle.mean(Tensor([1, 8, 5, 5],"float64"), )
paddle.mean(Tensor([1, 8, 6, 6],"float64"), )
paddle.mean(Tensor([1, 8, 8],"float32"), )
paddle.mean(Tensor([1, 8, 8],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([10, 1, 4, 3],"float64"), )
paddle.mean(Tensor([10, 10, 10],"float16"), )
paddle.mean(Tensor([10, 10, 10],"float32"), )
paddle.mean(Tensor([10, 10, 10],"float64"), )
paddle.mean(Tensor([10, 10, 20],"float64"), )
paddle.mean(Tensor([10, 10, 5],"float64"), name=None, )
paddle.mean(Tensor([10, 10],"complex128"), )
paddle.mean(Tensor([10, 10],"complex64"), )
paddle.mean(Tensor([10, 10],"float16"), )
paddle.mean(Tensor([10, 10],"float32"), )
paddle.mean(Tensor([10, 10],"float32"), keepdim=True, )
paddle.mean(Tensor([10, 10],"float32"), name=None, )
paddle.mean(Tensor([10, 10],"float64"), )
paddle.mean(Tensor([10, 12],"float32"), )
paddle.mean(Tensor([10, 12],"float64"), )
paddle.mean(Tensor([10, 16, 4, 4],"float32"), )
paddle.mean(Tensor([10, 16],"float32"), )
paddle.mean(Tensor([10, 1],"float32"), )
paddle.mean(Tensor([10, 2, 3, 2],"float32"), )
paddle.mean(Tensor([10, 2, 30, 30],"float32"), )
paddle.mean(Tensor([10, 2, 4, 1],"float64"), )
paddle.mean(Tensor([10, 2, 4],"float32"), )
paddle.mean(Tensor([10, 2, 4],"float64"), )
paddle.mean(Tensor([10, 2, 5],"float32"), )
paddle.mean(Tensor([10, 20],"float64"), )
paddle.mean(Tensor([10, 2],"bfloat16"), )
paddle.mean(Tensor([10, 2],"float16"), )
paddle.mean(Tensor([10, 2],"float32"), )
paddle.mean(Tensor([10, 2],"float32"), name=None, )
paddle.mean(Tensor([10, 2],"float64"), )
paddle.mean(Tensor([10, 3, 10],"float64"), )
paddle.mean(Tensor([10, 3, 3, 3],"float64"), )
paddle.mean(Tensor([10, 3, 32, 32],"float32"), )
paddle.mean(Tensor([10, 3, 3],"float64"), )
paddle.mean(Tensor([10, 3, 5, 5],"float64"), )
paddle.mean(Tensor([10, 3, 5],"float16"), )
paddle.mean(Tensor([10, 3, 5],"float64"), )
paddle.mean(Tensor([10, 4],"float32"), )
paddle.mean(Tensor([10, 5, 12],"float64"), )
paddle.mean(Tensor([10, 5, 5],"float64"), )
paddle.mean(Tensor([10, 5],"float32"), )
paddle.mean(Tensor([10, 5],"float64"), )
paddle.mean(Tensor([10, 60],"float32"), axis=0, )
paddle.mean(Tensor([10, 8, 5],"float64"), )
paddle.mean(Tensor([100, 1, 1],"float64"), )
paddle.mean(Tensor([100, 100],"float16"), )
paddle.mean(Tensor([100, 100],"float32"), )
paddle.mean(Tensor([100, 1],"float16"), )
paddle.mean(Tensor([100, 1],"float32"), )
paddle.mean(Tensor([100, 1],"float64"), )
paddle.mean(Tensor([100, 2, 3, 3],"float32"), )
paddle.mean(Tensor([100, 2, 3, 3],"float64"), )
paddle.mean(Tensor([100, 200],"float32"), )
paddle.mean(Tensor([100, 200],"float64"), )
paddle.mean(Tensor([100, 20],"float64"), )
paddle.mean(Tensor([100, 300],"complex128"), )
paddle.mean(Tensor([100, 300],"complex64"), )
paddle.mean(Tensor([100, 300],"float16"), )
paddle.mean(Tensor([100, 300],"float64"), )
paddle.mean(Tensor([100, 376, 1],"float32"), name=None, )
paddle.mean(Tensor([100, 4, 3, 3],"float32"), )
paddle.mean(Tensor([100, 4, 3, 3],"float64"), )
paddle.mean(Tensor([100, 4],"float32"), )
paddle.mean(Tensor([100],"float32"), )
paddle.mean(Tensor([100],"float64"), )
paddle.mean(Tensor([101, 3],"float16"), )
paddle.mean(Tensor([101, 3],"float64"), )
paddle.mean(Tensor([1014, 4],"float32"), )
paddle.mean(Tensor([1024, 4],"float32"), )
paddle.mean(Tensor([102400, 1],"float32"), )
paddle.mean(Tensor([1025, 4],"float32"), )
paddle.mean(Tensor([1028, 4],"float32"), )
paddle.mean(Tensor([1029, 4],"float32"), )
paddle.mean(Tensor([1033, 4],"float32"), )
paddle.mean(Tensor([1041, 4],"float32"), )
paddle.mean(Tensor([1049, 4],"float32"), )
paddle.mean(Tensor([1052, 4],"float32"), )
paddle.mean(Tensor([106, 4],"float32"), )
paddle.mean(Tensor([1060, 4],"float32"), )
paddle.mean(Tensor([1064, 4],"float32"), )
paddle.mean(Tensor([1071, 4],"float32"), )
paddle.mean(Tensor([1083, 4],"float32"), )
paddle.mean(Tensor([1084, 4],"float32"), )
paddle.mean(Tensor([1092, 4],"float32"), )
paddle.mean(Tensor([1099, 4],"float32"), )
paddle.mean(Tensor([10],"float16"), axis=0, )
paddle.mean(Tensor([10],"float32"), )
paddle.mean(Tensor([10],"float32"), axis=0, )
paddle.mean(Tensor([10],"float32"), name=None, )
paddle.mean(Tensor([10],"float64"), )
paddle.mean(Tensor([11, 50272],"float32"), )
paddle.mean(Tensor([11, 50304],"float32"), )
paddle.mean(Tensor([11, 512],"float32"), )
paddle.mean(Tensor([110, 4],"float32"), )
paddle.mean(Tensor([1107, 4],"float32"), )
paddle.mean(Tensor([1110, 4],"float32"), )
paddle.mean(Tensor([1111, 4],"float32"), )
paddle.mean(Tensor([1114, 4],"float32"), )
paddle.mean(Tensor([1121, 4],"float32"), )
paddle.mean(Tensor([1124, 4],"float32"), )
paddle.mean(Tensor([1128, 4],"float32"), )
paddle.mean(Tensor([1137, 4],"float32"), )
paddle.mean(Tensor([1143, 4],"float32"), )
paddle.mean(Tensor([1148, 4],"float32"), )
paddle.mean(Tensor([1149, 4],"float32"), )
paddle.mean(Tensor([1150, 4],"float32"), )
paddle.mean(Tensor([1154, 4],"float32"), )
paddle.mean(Tensor([1155, 4],"float32"), )
paddle.mean(Tensor([1156, 4],"float32"), )
paddle.mean(Tensor([1157, 4],"float32"), )
paddle.mean(Tensor([1162, 4],"float32"), )
paddle.mean(Tensor([11661, 3],"float32"), name=None, )
paddle.mean(Tensor([1168, 4],"float32"), )
paddle.mean(Tensor([117, 4],"float32"), )
paddle.mean(Tensor([1172, 4],"float32"), )
paddle.mean(Tensor([118, 4],"float32"), )
paddle.mean(Tensor([1185, 4],"float32"), )
paddle.mean(Tensor([1190, 4],"float32"), )
paddle.mean(Tensor([1196, 4],"float32"), )
paddle.mean(Tensor([11],"float16"), axis=0, )
paddle.mean(Tensor([11],"float32"), axis=0, )
paddle.mean(Tensor([12, 1, 10, 1],"float64"), )
paddle.mean(Tensor([12, 10],"complex128"), )
paddle.mean(Tensor([12, 10],"complex64"), )
paddle.mean(Tensor([12, 10],"float16"), )
paddle.mean(Tensor([12, 10],"float32"), )
paddle.mean(Tensor([12, 10],"float64"), )
paddle.mean(Tensor([12, 12],"float64"), )
paddle.mean(Tensor([12, 14],"complex128"), )
paddle.mean(Tensor([12, 14],"complex64"), )
paddle.mean(Tensor([12, 14],"float16"), )
paddle.mean(Tensor([12, 18],"complex128"), )
paddle.mean(Tensor([12, 26],"float64"), )
paddle.mean(Tensor([12, 4],"float32"), )
paddle.mean(Tensor([12, 5, 2],"float64"), )
paddle.mean(Tensor([12, 5, 4],"float64"), )
paddle.mean(Tensor([12, 8, 2],"float64"), )
paddle.mean(Tensor([12, 8, 4],"float64"), )
paddle.mean(Tensor([12, 8, 8],"float32"), )
paddle.mean(Tensor([120, 4],"float32"), )
paddle.mean(Tensor([1200, 1],"float32"), )
paddle.mean(Tensor([1205, 4],"float32"), )
paddle.mean(Tensor([1208, 4],"float32"), )
paddle.mean(Tensor([120],"float64"), )
paddle.mean(Tensor([121, 4],"float32"), )
paddle.mean(Tensor([1212, 4],"float32"), )
paddle.mean(Tensor([1220, 4],"float32"), )
paddle.mean(Tensor([1224, 4],"float32"), )
paddle.mean(Tensor([124, 240],"float32"), )
paddle.mean(Tensor([1240, 4],"float32"), )
paddle.mean(Tensor([1242, 1],"float32"), )
paddle.mean(Tensor([1243, 4],"float32"), )
paddle.mean(Tensor([1244, 4],"float32"), )
paddle.mean(Tensor([125, 4],"float32"), )
paddle.mean(Tensor([1265, 4],"float32"), )
paddle.mean(Tensor([1266, 4],"float32"), )
paddle.mean(Tensor([128, 10],"float32"), )
paddle.mean(Tensor([128, 1],"float32"), )
paddle.mean(Tensor([128, 49, 512],"float32"), axis=1, )
paddle.mean(Tensor([1280, 4],"float32"), )
paddle.mean(Tensor([1280],"float64"), )
paddle.mean(Tensor([1284, 4],"float32"), )
paddle.mean(Tensor([1285, 4],"float32"), )
paddle.mean(Tensor([1286, 4],"float32"), )
paddle.mean(Tensor([1288, 4],"float32"), )
paddle.mean(Tensor([1289, 4],"float32"), )
paddle.mean(Tensor([129, 4],"float32"), )
paddle.mean(Tensor([1290, 4],"float32"), )
paddle.mean(Tensor([1291, 1],"float32"), )
paddle.mean(Tensor([12],"float16"), axis=0, )
paddle.mean(Tensor([12],"float32"), )
paddle.mean(Tensor([12],"float32"), axis=0, )
paddle.mean(Tensor([12],"float64"), )
paddle.mean(Tensor([13, 2, 16, 4, 16],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([13, 7, 32],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([130, 4],"float32"), )
paddle.mean(Tensor([1305, 4],"float32"), )
paddle.mean(Tensor([1310, 4],"float32"), )
paddle.mean(Tensor([1312, 4],"float32"), )
paddle.mean(Tensor([1320, 4],"float32"), )
paddle.mean(Tensor([1321, 4],"float32"), )
paddle.mean(Tensor([1324, 4],"float32"), )
paddle.mean(Tensor([133, 4],"float32"), )
paddle.mean(Tensor([134, 4],"float32"), )
paddle.mean(Tensor([1342, 4],"float32"), )
paddle.mean(Tensor([1345, 4],"float32"), )
paddle.mean(Tensor([1346, 4],"float32"), )
paddle.mean(Tensor([1355, 4],"float32"), )
paddle.mean(Tensor([1358, 4],"float32"), )
paddle.mean(Tensor([1361, 4],"float32"), )
paddle.mean(Tensor([1369, 4],"float32"), )
paddle.mean(Tensor([1374, 4],"float32"), )
paddle.mean(Tensor([1380, 4],"float32"), )
paddle.mean(Tensor([1385, 4],"float32"), )
paddle.mean(Tensor([1387, 4],"float32"), )
paddle.mean(Tensor([1391, 4],"float32"), )
paddle.mean(Tensor([13],"float16"), axis=0, )
paddle.mean(Tensor([13],"float32"), axis=0, )
paddle.mean(Tensor([14, 170],"float64"), )
paddle.mean(Tensor([14, 2],"float64"), )
paddle.mean(Tensor([14, 45],"float64"), )
paddle.mean(Tensor([14, 4],"float32"), )
paddle.mean(Tensor([14, 8, 768],"float16"), axis=1, keepdim=True, )
paddle.mean(Tensor([14, 8, 768],"float32"), axis=1, keepdim=True, )
paddle.mean(Tensor([1402, 4],"float32"), )
paddle.mean(Tensor([1403, 4],"float32"), )
paddle.mean(Tensor([1404, 4],"float32"), )
paddle.mean(Tensor([1410, 4],"float32"), )
paddle.mean(Tensor([1413, 4],"float32"), )
paddle.mean(Tensor([1436, 4],"float32"), )
paddle.mean(Tensor([1439, 4],"float32"), )
paddle.mean(Tensor([1455, 4],"float32"), )
paddle.mean(Tensor([1458, 4],"float32"), )
paddle.mean(Tensor([146, 4],"float32"), )
paddle.mean(Tensor([1465, 4],"float32"), )
paddle.mean(Tensor([1469, 4],"float32"), )
paddle.mean(Tensor([147, 4],"float32"), )
paddle.mean(Tensor([1471, 4],"float32"), )
paddle.mean(Tensor([1472, 4],"float32"), )
paddle.mean(Tensor([1473, 4],"float32"), )
paddle.mean(Tensor([1480, 4],"float32"), )
paddle.mean(Tensor([1482, 4],"float32"), )
paddle.mean(Tensor([1486, 4],"float32"), )
paddle.mean(Tensor([1490, 4],"float32"), )
paddle.mean(Tensor([1495, 4],"float32"), )
paddle.mean(Tensor([1498, 4],"float32"), )
paddle.mean(Tensor([1499, 4],"float32"), )
paddle.mean(Tensor([14],"float16"), axis=0, )
paddle.mean(Tensor([14],"float32"), axis=0, )
paddle.mean(Tensor([14],"float64"), )
paddle.mean(Tensor([15, 10, 10],"float64"), )
paddle.mean(Tensor([15, 20, 5, 5],"float32"), )
paddle.mean(Tensor([15, 20],"float64"), )
paddle.mean(Tensor([15, 5],"float64"), )
paddle.mean(Tensor([150, 4],"float32"), )
paddle.mean(Tensor([1511, 4],"float32"), )
paddle.mean(Tensor([1515, 4],"float32"), )
paddle.mean(Tensor([1520, 4],"float32"), )
paddle.mean(Tensor([1523, 4],"float32"), )
paddle.mean(Tensor([1526, 4],"float32"), )
paddle.mean(Tensor([1530, 4],"float32"), )
paddle.mean(Tensor([1541, 4],"float32"), )
paddle.mean(Tensor([1553, 4],"float32"), )
paddle.mean(Tensor([15548, 3],"float32"), name=None, )
paddle.mean(Tensor([1555, 4],"float32"), )
paddle.mean(Tensor([1558, 4],"float32"), )
paddle.mean(Tensor([1560, 4],"float32"), )
paddle.mean(Tensor([1561, 4],"float32"), )
paddle.mean(Tensor([1568, 4],"float32"), )
paddle.mean(Tensor([1569, 4],"float32"), )
paddle.mean(Tensor([1572, 4],"float32"), )
paddle.mean(Tensor([1580, 4],"float32"), )
paddle.mean(Tensor([1582, 4],"float32"), )
paddle.mean(Tensor([1588, 4],"float32"), )
paddle.mean(Tensor([159, 4],"float32"), )
paddle.mean(Tensor([1595, 4],"float32"), )
paddle.mean(Tensor([15],"float16"), axis=0, )
paddle.mean(Tensor([15],"float32"), axis=0, )
paddle.mean(Tensor([16, 1, 20],"float32"), )
paddle.mean(Tensor([16, 16, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([16, 18],"float64"), )
paddle.mean(Tensor([16, 20],"float32"), )
paddle.mean(Tensor([16, 256],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([16, 256],"float64"), axis=-1, keepdim=True, )
paddle.mean(Tensor([16, 3, 2048],"float16"), axis=1, )
paddle.mean(Tensor([16, 3, 2048],"float32"), axis=1, )
paddle.mean(Tensor([16, 3072],"float32"), )
paddle.mean(Tensor([16, 32, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([16, 3],"float32"), )
paddle.mean(Tensor([16, 5],"float32"), )
paddle.mean(Tensor([16, 768],"float32"), )
paddle.mean(Tensor([16, 8, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([16, 8, 2048],"float16"), axis=1, )
paddle.mean(Tensor([16, 8, 2048],"float32"), axis=1, )
paddle.mean(Tensor([16, 96, 1],"float32"), name=None, )
paddle.mean(Tensor([16, 96, 2],"float32"), axis=-1, )
paddle.mean(Tensor([16, 96, 2],"float32"), name=None, )
paddle.mean(Tensor([160, 3072],"float32"), )
paddle.mean(Tensor([1600, 4],"float32"), )
paddle.mean(Tensor([1602, 4],"float32"), )
paddle.mean(Tensor([16032],"float32"), )
paddle.mean(Tensor([1609, 4],"float32"), )
paddle.mean(Tensor([1616, 4],"float32"), )
paddle.mean(Tensor([1625, 4],"float32"), )
paddle.mean(Tensor([1630, 4],"float32"), )
paddle.mean(Tensor([1631, 4],"float32"), )
paddle.mean(Tensor([164, 4],"float32"), )
paddle.mean(Tensor([1640, 4],"float32"), )
paddle.mean(Tensor([1645, 4],"float32"), )
paddle.mean(Tensor([1647, 4],"float32"), )
paddle.mean(Tensor([1649, 4],"float32"), )
paddle.mean(Tensor([165, 4],"float32"), )
paddle.mean(Tensor([1652, 4],"float32"), )
paddle.mean(Tensor([1655, 4],"float32"), )
paddle.mean(Tensor([1659, 4],"float32"), )
paddle.mean(Tensor([1664, 4],"float32"), )
paddle.mean(Tensor([1669, 4],"float32"), )
paddle.mean(Tensor([167, 4],"float32"), )
paddle.mean(Tensor([16800, 1],"float32"), )
paddle.mean(Tensor([16800, 2],"float32"), )
paddle.mean(Tensor([1681, 4],"float32"), )
paddle.mean(Tensor([1690, 4],"float32"), )
paddle.mean(Tensor([1696, 4],"float32"), )
paddle.mean(Tensor([16],"float16"), axis=0, )
paddle.mean(Tensor([16],"float32"), )
paddle.mean(Tensor([16],"float32"), axis=0, )
paddle.mean(Tensor([16],"float64"), )
paddle.mean(Tensor([17, 376, 1],"float32"), name=None, )
paddle.mean(Tensor([17, 5, 7, 2],"float32"), )
paddle.mean(Tensor([1700, 4],"float32"), )
paddle.mean(Tensor([1712, 4],"float32"), )
paddle.mean(Tensor([1713, 4],"float32"), )
paddle.mean(Tensor([1716, 4],"float32"), )
paddle.mean(Tensor([1718, 4],"float32"), )
paddle.mean(Tensor([1719, 4],"float32"), )
paddle.mean(Tensor([172, 4],"float32"), )
paddle.mean(Tensor([1729, 4],"float32"), )
paddle.mean(Tensor([17320, 1],"float32"), )
paddle.mean(Tensor([1739, 4],"float32"), )
paddle.mean(Tensor([1748, 4],"float32"), )
paddle.mean(Tensor([175, 4],"float32"), )
paddle.mean(Tensor([1754, 4],"float32"), )
paddle.mean(Tensor([1762, 4],"float32"), )
paddle.mean(Tensor([1766, 4],"float32"), )
paddle.mean(Tensor([1771, 4],"float32"), )
paddle.mean(Tensor([1773, 4],"float32"), )
paddle.mean(Tensor([1775, 4],"float32"), )
paddle.mean(Tensor([1782, 4],"float32"), )
paddle.mean(Tensor([1791, 4],"float32"), )
paddle.mean(Tensor([1796, 4],"float32"), )
paddle.mean(Tensor([17],"float16"), axis=0, )
paddle.mean(Tensor([17],"float32"), axis=0, )
paddle.mean(Tensor([1800, 1],"float32"), )
paddle.mean(Tensor([1802, 4],"float32"), )
paddle.mean(Tensor([1812, 4],"float32"), )
paddle.mean(Tensor([1817, 4],"float32"), )
paddle.mean(Tensor([1818, 4],"float32"), )
paddle.mean(Tensor([1820, 4],"float32"), )
paddle.mean(Tensor([18211, 1],"float32"), )
paddle.mean(Tensor([1823, 4],"float32"), )
paddle.mean(Tensor([1826, 4],"float32"), )
paddle.mean(Tensor([1832, 4],"float32"), )
paddle.mean(Tensor([1835, 4],"float32"), )
paddle.mean(Tensor([1837, 4],"float32"), )
paddle.mean(Tensor([1845, 4],"float32"), )
paddle.mean(Tensor([1848, 4],"float32"), )
paddle.mean(Tensor([185, 4],"float32"), )
paddle.mean(Tensor([1850, 4],"float32"), )
paddle.mean(Tensor([1853, 4],"float32"), )
paddle.mean(Tensor([1854, 4],"float32"), )
paddle.mean(Tensor([186, 4],"float32"), )
paddle.mean(Tensor([1860, 4],"float32"), )
paddle.mean(Tensor([1861, 4],"float32"), )
paddle.mean(Tensor([1864, 4],"float32"), )
paddle.mean(Tensor([1866, 4],"float32"), )
paddle.mean(Tensor([1872, 4],"float32"), )
paddle.mean(Tensor([1876, 4],"float32"), )
paddle.mean(Tensor([1877, 4],"float32"), )
paddle.mean(Tensor([1884, 4],"float32"), )
paddle.mean(Tensor([1887, 4],"float32"), )
paddle.mean(Tensor([189, 4],"float32"), )
paddle.mean(Tensor([1894, 4],"float32"), )
paddle.mean(Tensor([1895, 4],"float32"), )
paddle.mean(Tensor([18],"float32"), )
paddle.mean(Tensor([18],"float64"), )
paddle.mean(Tensor([1902, 4],"float32"), )
paddle.mean(Tensor([1907, 4],"float32"), )
paddle.mean(Tensor([1913, 4],"float32"), )
paddle.mean(Tensor([1914, 50],"float32"), )
paddle.mean(Tensor([1919, 4],"float32"), )
paddle.mean(Tensor([192, 48, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([192, 96, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([1921, 4],"float32"), )
paddle.mean(Tensor([1926, 4],"float32"), )
paddle.mean(Tensor([1928, 4],"float32"), )
paddle.mean(Tensor([1934, 4],"float32"), )
paddle.mean(Tensor([1935, 4],"float32"), )
paddle.mean(Tensor([1938, 4],"float32"), )
paddle.mean(Tensor([1946, 4],"float32"), )
paddle.mean(Tensor([1947, 4],"float32"), )
paddle.mean(Tensor([1965, 4],"float32"), )
paddle.mean(Tensor([1970, 4],"float32"), )
paddle.mean(Tensor([1989, 4],"float32"), )
paddle.mean(Tensor([1992, 4],"float32"), )
paddle.mean(Tensor([1],"float32"), )
paddle.mean(Tensor([1],"float32"), name=None, )
paddle.mean(Tensor([1],"float64"), )
paddle.mean(Tensor([2, 1, 1, 1, 1],"float16"), )
paddle.mean(Tensor([2, 1, 1, 1, 1],"float32"), )
paddle.mean(Tensor([2, 1, 1, 1, 1],"float64"), )
paddle.mean(Tensor([2, 1, 1, 1, 2],"float32"), )
paddle.mean(Tensor([2, 1, 1, 1, 2],"float64"), )
paddle.mean(Tensor([2, 1, 1, 1],"float32"), )
paddle.mean(Tensor([2, 1, 1, 1],"float64"), )
paddle.mean(Tensor([2, 1, 1, 2, 4],"float32"), )
paddle.mean(Tensor([2, 1, 1, 2, 4],"float64"), )
paddle.mean(Tensor([2, 1, 1, 2],"float32"), )
paddle.mean(Tensor([2, 1, 1, 2],"float64"), )
paddle.mean(Tensor([2, 1, 1, 3],"float16"), )
paddle.mean(Tensor([2, 1, 1, 3],"float32"), )
paddle.mean(Tensor([2, 1, 1, 3],"float64"), )
paddle.mean(Tensor([2, 1, 1, 4],"float32"), )
paddle.mean(Tensor([2, 1, 1, 4],"float64"), )
paddle.mean(Tensor([2, 1, 10],"float32"), )
paddle.mean(Tensor([2, 1, 12, 12],"float64"), )
paddle.mean(Tensor([2, 1, 1],"float32"), )
paddle.mean(Tensor([2, 1, 1],"float64"), )
paddle.mean(Tensor([2, 1, 2, 2, 2],"float32"), )
paddle.mean(Tensor([2, 1, 2, 2, 2],"float64"), )
paddle.mean(Tensor([2, 1, 2, 2, 4],"float32"), )
paddle.mean(Tensor([2, 1, 2, 2, 4],"float64"), )
paddle.mean(Tensor([2, 1, 2, 2],"float32"), )
paddle.mean(Tensor([2, 1, 2, 2],"float64"), )
paddle.mean(Tensor([2, 1, 2, 3],"float32"), )
paddle.mean(Tensor([2, 1, 2, 4, 2],"float32"), )
paddle.mean(Tensor([2, 1, 2, 4, 2],"float64"), )
paddle.mean(Tensor([2, 1, 2, 4],"float32"), )
paddle.mean(Tensor([2, 1, 2, 4],"float64"), )
paddle.mean(Tensor([2, 1, 2],"float32"), )
paddle.mean(Tensor([2, 1, 2],"float64"), )
paddle.mean(Tensor([2, 1, 3, 3, 3],"float32"), )
paddle.mean(Tensor([2, 1, 3, 3, 3],"float64"), )
paddle.mean(Tensor([2, 1, 3, 3],"float32"), )
paddle.mean(Tensor([2, 1, 3, 3],"float64"), )
paddle.mean(Tensor([2, 1, 3],"float32"), )
paddle.mean(Tensor([2, 1, 3],"float64"), )
paddle.mean(Tensor([2, 1, 4, 4],"float32"), )
paddle.mean(Tensor([2, 1, 4, 4],"float64"), )
paddle.mean(Tensor([2, 1, 4, 6, 4],"float32"), )
paddle.mean(Tensor([2, 1, 4, 6, 4],"float64"), )
paddle.mean(Tensor([2, 1, 4, 6],"float32"), )
paddle.mean(Tensor([2, 1, 4, 6],"float64"), )
paddle.mean(Tensor([2, 1, 4],"float32"), )
paddle.mean(Tensor([2, 1, 4],"float64"), )
paddle.mean(Tensor([2, 1, 5],"float32"), )
paddle.mean(Tensor([2, 1, 6, 6],"float32"), )
paddle.mean(Tensor([2, 1, 6, 6],"float64"), )
paddle.mean(Tensor([2, 1, 6],"float32"), )
paddle.mean(Tensor([2, 1, 8, 8],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([2, 1, 8, 8],"float64"), )
paddle.mean(Tensor([2, 1, 9, 5],"float64"), )
paddle.mean(Tensor([2, 10, 10],"float32"), )
paddle.mean(Tensor([2, 10, 10],"float32"), name=None, )
paddle.mean(Tensor([2, 10, 10],"float64"), )
paddle.mean(Tensor([2, 10, 12],"float64"), )
paddle.mean(Tensor([2, 10, 4],"float32"), )
paddle.mean(Tensor([2, 10, 4],"float64"), )
paddle.mean(Tensor([2, 10, 5],"float64"), )
paddle.mean(Tensor([2, 100, 3, 2, 2],"float16"), )
paddle.mean(Tensor([2, 100, 3, 2, 2],"float64"), )
paddle.mean(Tensor([2, 100, 3, 4],"float64"), )
paddle.mean(Tensor([2, 100, 3, 5],"float16"), )
paddle.mean(Tensor([2, 100, 3, 5],"float64"), )
paddle.mean(Tensor([2, 100, 3],"float16"), )
paddle.mean(Tensor([2, 100, 3],"float64"), )
paddle.mean(Tensor([2, 100, 4, 5],"float32"), )
paddle.mean(Tensor([2, 100, 4, 5],"float64"), )
paddle.mean(Tensor([2, 100, 4],"float32"), )
paddle.mean(Tensor([2, 100],"float32"), )
paddle.mean(Tensor([2, 1024, 1024],"float32"), )
paddle.mean(Tensor([2, 11, 4],"float32"), )
paddle.mean(Tensor([2, 11, 4],"float64"), )
paddle.mean(Tensor([2, 12, 10],"float64"), )
paddle.mean(Tensor([2, 12, 12, 10],"float64"), )
paddle.mean(Tensor([2, 12, 12, 1],"float64"), )
paddle.mean(Tensor([2, 12, 12],"float64"), )
paddle.mean(Tensor([2, 12, 4],"float32"), )
paddle.mean(Tensor([2, 12, 4],"float64"), )
paddle.mean(Tensor([2, 12],"float32"), )
paddle.mean(Tensor([2, 13, 13, 2],"float64"), )
paddle.mean(Tensor([2, 13, 2, 2],"float64"), )
paddle.mean(Tensor([2, 13, 4],"float32"), )
paddle.mean(Tensor([2, 13, 4],"float64"), )
paddle.mean(Tensor([2, 14, 12, 2],"float64"), )
paddle.mean(Tensor([2, 14, 2, 2],"float64"), )
paddle.mean(Tensor([2, 14, 22, 2],"float64"), )
paddle.mean(Tensor([2, 14, 4],"float32"), )
paddle.mean(Tensor([2, 14, 4],"float64"), )
paddle.mean(Tensor([2, 14, 5, 1, 1, 2, 1, 1, 2],"float32"), )
paddle.mean(Tensor([2, 15, 4],"float32"), )
paddle.mean(Tensor([2, 15, 4],"float64"), )
paddle.mean(Tensor([2, 1501, 1],"float32"), name=None, )
paddle.mean(Tensor([2, 16, 1280],"float32"), axis=1, )
paddle.mean(Tensor([2, 16, 4],"float32"), )
paddle.mean(Tensor([2, 16, 4],"float64"), )
paddle.mean(Tensor([2, 17, 17, 2],"float64"), )
paddle.mean(Tensor([2, 17, 28, 2],"float64"), )
paddle.mean(Tensor([2, 17, 39, 2],"float64"), )
paddle.mean(Tensor([2, 17, 4],"float32"), )
paddle.mean(Tensor([2, 17, 4],"float64"), )
paddle.mean(Tensor([2, 17, 6, 2],"float64"), )
paddle.mean(Tensor([2, 18, 18, 2],"float64"), )
paddle.mean(Tensor([2, 18, 4],"float32"), )
paddle.mean(Tensor([2, 18, 4],"float64"), )
paddle.mean(Tensor([2, 18, 6, 2],"float64"), )
paddle.mean(Tensor([2, 19, 4],"float32"), )
paddle.mean(Tensor([2, 19, 4],"float64"), )
paddle.mean(Tensor([2, 1],"float32"), )
paddle.mean(Tensor([2, 1],"float32"), name=None, )
paddle.mean(Tensor([2, 1],"float64"), )
paddle.mean(Tensor([2, 2, 1, 1],"float32"), )
paddle.mean(Tensor([2, 2, 10, 11],"float64"), )
paddle.mean(Tensor([2, 2, 10],"float32"), )
paddle.mean(Tensor([2, 2, 12, 2],"float64"), )
paddle.mean(Tensor([2, 2, 13, 13],"float32"), )
paddle.mean(Tensor([2, 2, 13, 13],"float64"), )
paddle.mean(Tensor([2, 2, 13, 24],"float32"), )
paddle.mean(Tensor([2, 2, 13, 24],"float64"), )
paddle.mean(Tensor([2, 2, 13, 2],"float32"), )
paddle.mean(Tensor([2, 2, 13, 2],"float64"), )
paddle.mean(Tensor([2, 2, 18, 18],"float32"), )
paddle.mean(Tensor([2, 2, 18, 18],"float64"), )
paddle.mean(Tensor([2, 2, 18, 30],"float32"), )
paddle.mean(Tensor([2, 2, 18, 30],"float64"), )
paddle.mean(Tensor([2, 2, 18, 42],"float32"), )
paddle.mean(Tensor([2, 2, 18, 42],"float64"), )
paddle.mean(Tensor([2, 2, 18, 54],"float32"), )
paddle.mean(Tensor([2, 2, 18, 54],"float64"), )
paddle.mean(Tensor([2, 2, 18, 6],"float32"), )
paddle.mean(Tensor([2, 2, 18, 6],"float64"), )
paddle.mean(Tensor([2, 2, 1],"float32"), )
paddle.mean(Tensor([2, 2, 1],"float64"), )
paddle.mean(Tensor([2, 2, 2, 13],"float32"), )
paddle.mean(Tensor([2, 2, 2, 13],"float64"), )
paddle.mean(Tensor([2, 2, 2, 2, 2],"float32"), )
paddle.mean(Tensor([2, 2, 2, 2, 2],"float64"), )
paddle.mean(Tensor([2, 2, 2, 2, 3],"float32"), )
paddle.mean(Tensor([2, 2, 2, 2, 3],"float64"), )
paddle.mean(Tensor([2, 2, 2, 24],"float32"), )
paddle.mean(Tensor([2, 2, 2, 24],"float64"), )
paddle.mean(Tensor([2, 2, 2, 2],"float32"), )
paddle.mean(Tensor([2, 2, 2, 2],"float64"), )
paddle.mean(Tensor([2, 2, 2, 3],"float32"), )
paddle.mean(Tensor([2, 2, 2, 3],"float64"), )
paddle.mean(Tensor([2, 2, 22, 2],"float64"), )
paddle.mean(Tensor([2, 2, 24, 13],"float32"), )
paddle.mean(Tensor([2, 2, 24, 13],"float64"), )
paddle.mean(Tensor([2, 2, 24, 24],"float32"), )
paddle.mean(Tensor([2, 2, 24, 24],"float64"), )
paddle.mean(Tensor([2, 2, 24, 2],"float32"), )
paddle.mean(Tensor([2, 2, 24, 2],"float64"), )
paddle.mean(Tensor([2, 2, 2],"float32"), )
paddle.mean(Tensor([2, 2, 2],"float64"), )
paddle.mean(Tensor([2, 2, 3, 2],"float32"), )
paddle.mean(Tensor([2, 2, 3, 3],"float32"), )
paddle.mean(Tensor([2, 2, 30, 18],"float32"), )
paddle.mean(Tensor([2, 2, 30, 18],"float64"), )
paddle.mean(Tensor([2, 2, 30, 30],"float32"), )
paddle.mean(Tensor([2, 2, 30, 30],"float64"), )
paddle.mean(Tensor([2, 2, 30, 42],"float32"), )
paddle.mean(Tensor([2, 2, 30, 42],"float64"), )
paddle.mean(Tensor([2, 2, 30, 54],"float32"), )
paddle.mean(Tensor([2, 2, 30, 54],"float64"), )
paddle.mean(Tensor([2, 2, 30, 6],"float32"), )
paddle.mean(Tensor([2, 2, 30, 6],"float64"), )
paddle.mean(Tensor([2, 2, 32, 8],"float64"), )
paddle.mean(Tensor([2, 2, 3],"float32"), )
paddle.mean(Tensor([2, 2, 3],"float64"), )
paddle.mean(Tensor([2, 2, 4, 2, 3],"float32"), )
paddle.mean(Tensor([2, 2, 4, 2, 3],"float64"), )
paddle.mean(Tensor([2, 2, 4, 3],"float32"), )
paddle.mean(Tensor([2, 2, 4, 3],"float64"), )
paddle.mean(Tensor([2, 2, 4, 4, 4],"float32"), )
paddle.mean(Tensor([2, 2, 4, 4, 4],"float64"), )
paddle.mean(Tensor([2, 2, 4],"float32"), )
paddle.mean(Tensor([2, 2, 4],"float64"), )
paddle.mean(Tensor([2, 2, 5],"float64"), )
paddle.mean(Tensor([2, 2, 6, 18],"float32"), )
paddle.mean(Tensor([2, 2, 6, 18],"float64"), )
paddle.mean(Tensor([2, 2, 6, 30],"float32"), )
paddle.mean(Tensor([2, 2, 6, 30],"float64"), )
paddle.mean(Tensor([2, 2, 6, 42],"float32"), )
paddle.mean(Tensor([2, 2, 6, 42],"float64"), )
paddle.mean(Tensor([2, 2, 6, 54],"float32"), )
paddle.mean(Tensor([2, 2, 6, 54],"float64"), )
paddle.mean(Tensor([2, 2, 6, 6],"float32"), )
paddle.mean(Tensor([2, 2, 6, 6],"float64"), )
paddle.mean(Tensor([2, 2, 60, 30],"float64"), )
paddle.mean(Tensor([2, 2, 7],"float64"), )
paddle.mean(Tensor([2, 2, 9, 10, 11],"float64"), )
paddle.mean(Tensor([2, 2, 9, 10],"float64"), )
paddle.mean(Tensor([2, 20, 20, 3],"float16"), )
paddle.mean(Tensor([2, 20, 25],"float32"), )
paddle.mean(Tensor([2, 20, 4],"float32"), )
paddle.mean(Tensor([2, 20, 4],"float64"), )
paddle.mean(Tensor([2, 21, 4],"float32"), )
paddle.mean(Tensor([2, 21, 4],"float64"), )
paddle.mean(Tensor([2, 22, 4],"float32"), )
paddle.mean(Tensor([2, 22, 4],"float64"), )
paddle.mean(Tensor([2, 23, 4],"float32"), )
paddle.mean(Tensor([2, 23, 4],"float64"), )
paddle.mean(Tensor([2, 24, 30],"float64"), )
paddle.mean(Tensor([2, 24, 4],"float32"), )
paddle.mean(Tensor([2, 24, 4],"float64"), )
paddle.mean(Tensor([2, 24, 99],"float64"), )
paddle.mean(Tensor([2, 25, 4],"float32"), )
paddle.mean(Tensor([2, 25, 4],"float64"), )
paddle.mean(Tensor([2, 26, 12, 2],"float64"), )
paddle.mean(Tensor([2, 26, 2, 2],"float64"), )
paddle.mean(Tensor([2, 26, 22, 2],"float64"), )
paddle.mean(Tensor([2, 26, 4],"float32"), )
paddle.mean(Tensor([2, 26, 4],"float64"), )
paddle.mean(Tensor([2, 27, 100],"float64"), )
paddle.mean(Tensor([2, 27, 4],"float32"), )
paddle.mean(Tensor([2, 27, 4],"float64"), )
paddle.mean(Tensor([2, 27, 64],"float32"), )
paddle.mean(Tensor([2, 27, 64],"float64"), )
paddle.mean(Tensor([2, 28, 17, 2],"float64"), )
paddle.mean(Tensor([2, 28, 28, 2],"float64"), )
paddle.mean(Tensor([2, 28, 39, 2],"float64"), )
paddle.mean(Tensor([2, 28, 4],"float32"), )
paddle.mean(Tensor([2, 28, 4],"float64"), )
paddle.mean(Tensor([2, 28, 6, 2],"float64"), )
paddle.mean(Tensor([2, 29, 4],"float32"), )
paddle.mean(Tensor([2, 29, 4],"float64"), )
paddle.mean(Tensor([2, 2],"float16"), )
paddle.mean(Tensor([2, 2],"float32"), )
paddle.mean(Tensor([2, 2],"float64"), )
paddle.mean(Tensor([2, 3, 1, 1, 1],"float64"), )
paddle.mean(Tensor([2, 3, 1, 1],"float16"), )
paddle.mean(Tensor([2, 3, 1, 1],"float32"), )
paddle.mean(Tensor([2, 3, 1, 1],"float64"), )
paddle.mean(Tensor([2, 3, 1, 3, 2],"float64"), )
paddle.mean(Tensor([2, 3, 1, 3],"float64"), )
paddle.mean(Tensor([2, 3, 1, 4],"float64"), )
paddle.mean(Tensor([2, 3, 10, 10],"float64"), )
paddle.mean(Tensor([2, 3, 10, 14, 18],"float32"), )
paddle.mean(Tensor([2, 3, 10, 5],"complex128"), )
paddle.mean(Tensor([2, 3, 10, 5],"complex64"), )
paddle.mean(Tensor([2, 3, 10, 5],"float64"), )
paddle.mean(Tensor([2, 3, 100],"float64"), )
paddle.mean(Tensor([2, 3, 12, 12, 12],"float16"), )
paddle.mean(Tensor([2, 3, 12, 12, 12],"float32"), )
paddle.mean(Tensor([2, 3, 12, 12],"float32"), )
paddle.mean(Tensor([2, 3, 12, 12],"float64"), )
paddle.mean(Tensor([2, 3, 12, 13],"float64"), )
paddle.mean(Tensor([2, 3, 12, 20],"float64"), )
paddle.mean(Tensor([2, 3, 12, 3, 2],"complex128"), )
paddle.mean(Tensor([2, 3, 12, 3, 2],"complex64"), )
paddle.mean(Tensor([2, 3, 12, 3, 2],"float64"), )
paddle.mean(Tensor([2, 3, 12, 30],"float64"), )
paddle.mean(Tensor([2, 3, 16, 16, 8],"float32"), )
paddle.mean(Tensor([2, 3, 16, 16],"float32"), )
paddle.mean(Tensor([2, 3, 16, 16],"float64"), )
paddle.mean(Tensor([2, 3, 16, 4, 10],"float32"), )
paddle.mean(Tensor([2, 3, 2, 2, 100],"float64"), )
paddle.mean(Tensor([2, 3, 2, 2, 2],"float64"), )
paddle.mean(Tensor([2, 3, 2, 2],"float32"), )
paddle.mean(Tensor([2, 3, 2, 2],"float64"), )
paddle.mean(Tensor([2, 3, 2, 3, 3],"float32"), )
paddle.mean(Tensor([2, 3, 2, 3, 3],"float64"), )
paddle.mean(Tensor([2, 3, 2, 3, 6],"float64"), )
paddle.mean(Tensor([2, 3, 2, 3],"float64"), )
paddle.mean(Tensor([2, 3, 2, 4, 2],"float32"), )
paddle.mean(Tensor([2, 3, 2, 4, 2],"float64"), )
paddle.mean(Tensor([2, 3, 2, 4],"float32"), )
paddle.mean(Tensor([2, 3, 2, 4],"float64"), )
paddle.mean(Tensor([2, 3, 2, 6],"float64"), )
paddle.mean(Tensor([2, 3, 20],"float32"), )
paddle.mean(Tensor([2, 3, 20],"float64"), )
paddle.mean(Tensor([2, 3, 256, 256],"float64"), )
paddle.mean(Tensor([2, 3, 2],"float32"), )
paddle.mean(Tensor([2, 3, 2],"float64"), )
paddle.mean(Tensor([2, 3, 3, 3, 32],"float64"), )
paddle.mean(Tensor([2, 3, 3, 3, 3],"float16"), )
paddle.mean(Tensor([2, 3, 3, 3, 3],"float32"), )
paddle.mean(Tensor([2, 3, 3, 3, 3],"float64"), )
paddle.mean(Tensor([2, 3, 3, 3, 6],"float64"), )
paddle.mean(Tensor([2, 3, 3, 3],"float16"), )
paddle.mean(Tensor([2, 3, 3, 3],"float32"), )
paddle.mean(Tensor([2, 3, 3, 3],"float64"), )
paddle.mean(Tensor([2, 3, 3, 4, 3, 4, 3, 4],"float64"), )
paddle.mean(Tensor([2, 3, 3, 4, 8],"float64"), )
paddle.mean(Tensor([2, 3, 3, 4],"float64"), )
paddle.mean(Tensor([2, 3, 3, 5, 8],"float64"), )
paddle.mean(Tensor([2, 3, 30, 15],"float64"), )
paddle.mean(Tensor([2, 3, 30, 20, 25],"float32"), )
paddle.mean(Tensor([2, 3, 30, 30],"float64"), )
paddle.mean(Tensor([2, 3, 30, 50],"float64"), )
paddle.mean(Tensor([2, 3, 32, 32],"float32"), )
paddle.mean(Tensor([2, 3, 32, 32],"float64"), )
paddle.mean(Tensor([2, 3, 32, 64],"float64"), )
paddle.mean(Tensor([2, 3, 3],"float32"), )
paddle.mean(Tensor([2, 3, 3],"float64"), )
paddle.mean(Tensor([2, 3, 4, 1],"float64"), )
paddle.mean(Tensor([2, 3, 4, 3],"float64"), )
paddle.mean(Tensor([2, 3, 4, 4, 2, 3, 4, 4],"float64"), )
paddle.mean(Tensor([2, 3, 4, 4, 3, 4, 4, 4],"float64"), )
paddle.mean(Tensor([2, 3, 4, 4, 4],"float64"), )
paddle.mean(Tensor([2, 3, 4, 4],"float64"), )
paddle.mean(Tensor([2, 3, 4, 5, 2],"float64"), )
paddle.mean(Tensor([2, 3, 4, 50],"float64"), )
paddle.mean(Tensor([2, 3, 4, 5],"float16"), )
paddle.mean(Tensor([2, 3, 4, 5],"float64"), )
paddle.mean(Tensor([2, 3, 4],"float16"), )
paddle.mean(Tensor([2, 3, 4],"float32"), )
paddle.mean(Tensor([2, 3, 4],"float64"), )
paddle.mean(Tensor([2, 3, 5, 100],"float64"), )
paddle.mean(Tensor([2, 3, 5, 5],"float16"), )
paddle.mean(Tensor([2, 3, 5, 5],"float32"), )
paddle.mean(Tensor([2, 3, 5, 5],"float64"), )
paddle.mean(Tensor([2, 3, 5, 7, 9],"float32"), )
paddle.mean(Tensor([2, 3, 5],"float64"), )
paddle.mean(Tensor([2, 3, 6, 3, 2],"float64"), )
paddle.mean(Tensor([2, 3, 6, 6, 6],"float32"), )
paddle.mean(Tensor([2, 3, 6, 6, 6],"float64"), )
paddle.mean(Tensor([2, 3, 7, 10, 13],"float32"), )
paddle.mean(Tensor([2, 3, 7, 7],"float16"), )
paddle.mean(Tensor([2, 3, 7, 7],"float32"), )
paddle.mean(Tensor([2, 3, 7, 7],"float64"), )
paddle.mean(Tensor([2, 3, 7],"float64"), )
paddle.mean(Tensor([2, 3, 8, 5],"float64"), )
paddle.mean(Tensor([2, 3, 8, 7],"float64"), )
paddle.mean(Tensor([2, 3, 8],"float64"), )
paddle.mean(Tensor([2, 3, 9],"float64"), )
paddle.mean(Tensor([2, 30, 4],"float32"), )
paddle.mean(Tensor([2, 30, 4],"float64"), )
paddle.mean(Tensor([2, 300, 2048],"float32"), axis=list[1,2,], )
paddle.mean(Tensor([2, 31, 4],"float32"), )
paddle.mean(Tensor([2, 31, 4],"float64"), )
paddle.mean(Tensor([2, 32, 4],"float32"), )
paddle.mean(Tensor([2, 32, 4],"float64"), )
paddle.mean(Tensor([2, 33, 4],"float32"), )
paddle.mean(Tensor([2, 33, 4],"float64"), )
paddle.mean(Tensor([2, 34, 4],"float32"), )
paddle.mean(Tensor([2, 34, 4],"float64"), )
paddle.mean(Tensor([2, 35, 4],"float32"), )
paddle.mean(Tensor([2, 35, 4],"float64"), )
paddle.mean(Tensor([2, 36, 4],"float32"), )
paddle.mean(Tensor([2, 36, 4],"float64"), )
paddle.mean(Tensor([2, 37, 4],"float32"), )
paddle.mean(Tensor([2, 37, 4],"float64"), )
paddle.mean(Tensor([2, 38, 4],"float32"), )
paddle.mean(Tensor([2, 38, 4],"float64"), )
paddle.mean(Tensor([2, 39, 17, 2],"float64"), )
paddle.mean(Tensor([2, 39, 28, 2],"float64"), )
paddle.mean(Tensor([2, 39, 39, 2],"float64"), )
paddle.mean(Tensor([2, 39, 4],"float32"), )
paddle.mean(Tensor([2, 39, 4],"float64"), )
paddle.mean(Tensor([2, 39, 6, 2],"float64"), )
paddle.mean(Tensor([2, 3],"float16"), )
paddle.mean(Tensor([2, 3],"float32"), )
paddle.mean(Tensor([2, 3],"float32"), axis=list[0,], )
paddle.mean(Tensor([2, 3],"float64"), )
paddle.mean(Tensor([2, 4, 14, 16],"float64"), )
paddle.mean(Tensor([2, 4, 2, 2, 2],"float32"), )
paddle.mean(Tensor([2, 4, 2, 2, 2],"float64"), )
paddle.mean(Tensor([2, 4, 2, 3, 10],"complex128"), )
paddle.mean(Tensor([2, 4, 2, 3, 10],"complex64"), )
paddle.mean(Tensor([2, 4, 2, 3, 10],"float64"), )
paddle.mean(Tensor([2, 4, 2, 3, 4],"float64"), )
paddle.mean(Tensor([2, 4, 3, 3],"float64"), )
paddle.mean(Tensor([2, 4, 3],"float32"), )
paddle.mean(Tensor([2, 4, 3],"float64"), )
paddle.mean(Tensor([2, 4, 4, 4, 3],"float32"), )
paddle.mean(Tensor([2, 4, 4, 4, 3],"float64"), )
paddle.mean(Tensor([2, 4, 4, 4],"float32"), )
paddle.mean(Tensor([2, 4, 4, 4],"float64"), )
paddle.mean(Tensor([2, 4, 4, 9],"float64"), )
paddle.mean(Tensor([2, 4, 4],"float16"), )
paddle.mean(Tensor([2, 4, 4],"float64"), )
paddle.mean(Tensor([2, 4, 5],"float16"), )
paddle.mean(Tensor([2, 4, 5],"float32"), )
paddle.mean(Tensor([2, 4, 5],"float64"), )
paddle.mean(Tensor([2, 4, 6, 3],"float32"), )
paddle.mean(Tensor([2, 4, 6, 3],"float64"), )
paddle.mean(Tensor([2, 4, 6, 6, 6],"float32"), )
paddle.mean(Tensor([2, 4, 6, 6, 6],"float64"), )
paddle.mean(Tensor([2, 4, 64],"complex128"), )
paddle.mean(Tensor([2, 4, 64],"complex64"), )
paddle.mean(Tensor([2, 4, 64],"float32"), )
paddle.mean(Tensor([2, 4, 64],"float64"), )
paddle.mean(Tensor([2, 40, 4],"float32"), )
paddle.mean(Tensor([2, 40, 4],"float64"), )
paddle.mean(Tensor([2, 40, 5, 5],"float32"), )
paddle.mean(Tensor([2, 41, 4],"float32"), )
paddle.mean(Tensor([2, 41, 4],"float64"), )
paddle.mean(Tensor([2, 42, 4],"float32"), )
paddle.mean(Tensor([2, 42, 4],"float64"), )
paddle.mean(Tensor([2, 43, 4],"float32"), )
paddle.mean(Tensor([2, 43, 4],"float64"), )
paddle.mean(Tensor([2, 44, 4],"float32"), )
paddle.mean(Tensor([2, 44, 4],"float64"), )
paddle.mean(Tensor([2, 45, 4],"float32"), )
paddle.mean(Tensor([2, 45, 4],"float64"), )
paddle.mean(Tensor([2, 46, 4],"float32"), )
paddle.mean(Tensor([2, 46, 4],"float64"), )
paddle.mean(Tensor([2, 47, 4],"float32"), )
paddle.mean(Tensor([2, 47, 4],"float64"), )
paddle.mean(Tensor([2, 48, 4],"float32"), )
paddle.mean(Tensor([2, 48, 4],"float64"), )
paddle.mean(Tensor([2, 49, 4],"float32"), )
paddle.mean(Tensor([2, 49, 4],"float64"), )
paddle.mean(Tensor([2, 4],"float16"), )
paddle.mean(Tensor([2, 4],"float32"), )
paddle.mean(Tensor([2, 4],"float64"), )
paddle.mean(Tensor([2, 5, 2],"float64"), )
paddle.mean(Tensor([2, 5, 3, 1, 1, 1, 4, 2],"float64"), )
paddle.mean(Tensor([2, 5, 3, 3, 2, 5],"float64"), )
paddle.mean(Tensor([2, 5, 3, 3],"float64"), )
paddle.mean(Tensor([2, 5, 3, 4, 2],"float16"), )
paddle.mean(Tensor([2, 5, 3, 4, 2],"float64"), )
paddle.mean(Tensor([2, 5, 4],"float32"), )
paddle.mean(Tensor([2, 5, 4],"float64"), )
paddle.mean(Tensor([2, 5, 5, 3],"float16"), )
paddle.mean(Tensor([2, 5, 5, 3],"float32"), )
paddle.mean(Tensor([2, 5, 5, 3],"float64"), )
paddle.mean(Tensor([2, 5, 5, 5, 6],"float32"), )
paddle.mean(Tensor([2, 50, 4],"float32"), )
paddle.mean(Tensor([2, 50, 4],"float64"), )
paddle.mean(Tensor([2, 51, 4],"float32"), )
paddle.mean(Tensor([2, 51, 4],"float64"), )
paddle.mean(Tensor([2, 512, 1024],"float32"), )
paddle.mean(Tensor([2, 512, 512],"float32"), )
paddle.mean(Tensor([2, 52, 4],"float32"), )
paddle.mean(Tensor([2, 52, 4],"float64"), )
paddle.mean(Tensor([2, 53, 4],"float32"), )
paddle.mean(Tensor([2, 53, 4],"float64"), )
paddle.mean(Tensor([2, 54, 4],"float32"), )
paddle.mean(Tensor([2, 54, 4],"float64"), )
paddle.mean(Tensor([2, 55, 4],"float32"), )
paddle.mean(Tensor([2, 55, 4],"float64"), )
paddle.mean(Tensor([2, 56, 4],"float32"), )
paddle.mean(Tensor([2, 56, 4],"float64"), )
paddle.mean(Tensor([2, 57, 4],"float32"), )
paddle.mean(Tensor([2, 57, 4],"float64"), )
paddle.mean(Tensor([2, 58, 4],"float32"), )
paddle.mean(Tensor([2, 58, 4],"float64"), )
paddle.mean(Tensor([2, 59, 4],"float32"), )
paddle.mean(Tensor([2, 59, 4],"float64"), )
paddle.mean(Tensor([2, 5],"float32"), )
paddle.mean(Tensor([2, 5],"float64"), )
paddle.mean(Tensor([2, 6, 1, 1, 1],"float32"), )
paddle.mean(Tensor([2, 6, 1, 1, 1],"float64"), )
paddle.mean(Tensor([2, 6, 1, 1],"float32"), )
paddle.mean(Tensor([2, 6, 1, 1],"float64"), )
paddle.mean(Tensor([2, 6, 16, 17, 4],"float64"), )
paddle.mean(Tensor([2, 6, 17, 2],"float64"), )
paddle.mean(Tensor([2, 6, 18, 2],"float64"), )
paddle.mean(Tensor([2, 6, 1],"float32"), )
paddle.mean(Tensor([2, 6, 1],"float64"), )
paddle.mean(Tensor([2, 6, 2, 8],"float32"), )
paddle.mean(Tensor([2, 6, 2, 8],"float64"), )
paddle.mean(Tensor([2, 6, 28, 2],"float64"), )
paddle.mean(Tensor([2, 6, 3, 3],"float64"), )
paddle.mean(Tensor([2, 6, 3, 4, 4, 2],"float32"), )
paddle.mean(Tensor([2, 6, 39, 2],"float64"), )
paddle.mean(Tensor([2, 6, 4, 4],"float64"), )
paddle.mean(Tensor([2, 6, 4],"float32"), )
paddle.mean(Tensor([2, 6, 4],"float64"), )
paddle.mean(Tensor([2, 6, 5, 5],"float32"), )
paddle.mean(Tensor([2, 6, 6, 2],"float64"), )
paddle.mean(Tensor([2, 6, 6, 3],"float32"), )
paddle.mean(Tensor([2, 6, 6, 3],"float64"), )
paddle.mean(Tensor([2, 6, 6, 4, 6],"float32"), )
paddle.mean(Tensor([2, 6, 6, 6, 3],"float64"), )
paddle.mean(Tensor([2, 6, 6, 6],"float32"), )
paddle.mean(Tensor([2, 6, 7, 7, 7],"float32"), )
paddle.mean(Tensor([2, 6, 7, 7],"float64"), )
paddle.mean(Tensor([2, 60, 4],"float32"), )
paddle.mean(Tensor([2, 60, 4],"float64"), )
paddle.mean(Tensor([2, 60],"float32"), axis=0, )
paddle.mean(Tensor([2, 60],"float64"), )
paddle.mean(Tensor([2, 61, 4],"float32"), )
paddle.mean(Tensor([2, 61, 4],"float64"), )
paddle.mean(Tensor([2, 62, 4],"float32"), )
paddle.mean(Tensor([2, 62, 4],"float64"), )
paddle.mean(Tensor([2, 63, 4],"float32"), )
paddle.mean(Tensor([2, 63, 4],"float64"), )
paddle.mean(Tensor([2, 64, 4],"float32"), )
paddle.mean(Tensor([2, 64, 4],"float64"), )
paddle.mean(Tensor([2, 65, 4],"float32"), )
paddle.mean(Tensor([2, 65, 4],"float64"), )
paddle.mean(Tensor([2, 66, 4],"float32"), )
paddle.mean(Tensor([2, 66, 4],"float64"), )
paddle.mean(Tensor([2, 67, 4],"float32"), )
paddle.mean(Tensor([2, 67, 4],"float64"), )
paddle.mean(Tensor([2, 68, 4],"float32"), )
paddle.mean(Tensor([2, 68, 4],"float64"), )
paddle.mean(Tensor([2, 69, 4],"float32"), )
paddle.mean(Tensor([2, 69, 4],"float64"), )
paddle.mean(Tensor([2, 6],"float32"), )
paddle.mean(Tensor([2, 6],"float64"), )
paddle.mean(Tensor([2, 7, 4],"float32"), )
paddle.mean(Tensor([2, 7, 4],"float64"), )
paddle.mean(Tensor([2, 7, 7, 3],"float16"), )
paddle.mean(Tensor([2, 7, 7, 3],"float32"), )
paddle.mean(Tensor([2, 7, 7, 3],"float64"), )
paddle.mean(Tensor([2, 7, 7, 7, 6],"float32"), )
paddle.mean(Tensor([2, 70, 4],"float32"), )
paddle.mean(Tensor([2, 70, 4],"float64"), )
paddle.mean(Tensor([2, 71, 4],"float32"), )
paddle.mean(Tensor([2, 71, 4],"float64"), )
paddle.mean(Tensor([2, 72, 4],"float32"), )
paddle.mean(Tensor([2, 72, 4],"float64"), )
paddle.mean(Tensor([2, 73, 4],"float32"), )
paddle.mean(Tensor([2, 73, 4],"float64"), )
paddle.mean(Tensor([2, 74, 4],"float32"), )
paddle.mean(Tensor([2, 74, 4],"float64"), )
paddle.mean(Tensor([2, 75, 4],"float32"), )
paddle.mean(Tensor([2, 75, 4],"float64"), )
paddle.mean(Tensor([2, 76, 4],"float32"), )
paddle.mean(Tensor([2, 76, 4],"float64"), )
paddle.mean(Tensor([2, 77, 4],"float32"), )
paddle.mean(Tensor([2, 77, 4],"float64"), )
paddle.mean(Tensor([2, 78, 4],"float32"), )
paddle.mean(Tensor([2, 78, 4],"float64"), )
paddle.mean(Tensor([2, 79, 4],"float32"), )
paddle.mean(Tensor([2, 79, 4],"float64"), )
paddle.mean(Tensor([2, 7],"float64"), )
paddle.mean(Tensor([2, 8, 1280],"float32"), axis=1, )
paddle.mean(Tensor([2, 8, 2048],"float32"), axis=1, )
paddle.mean(Tensor([2, 8, 2],"float64"), )
paddle.mean(Tensor([2, 8, 4, 4],"float32"), )
paddle.mean(Tensor([2, 8, 4],"float32"), )
paddle.mean(Tensor([2, 8, 4],"float64"), )
paddle.mean(Tensor([2, 80, 4],"float32"), )
paddle.mean(Tensor([2, 80, 4],"float64"), )
paddle.mean(Tensor([2, 80],"float64"), )
paddle.mean(Tensor([2, 81, 4],"float32"), )
paddle.mean(Tensor([2, 81, 4],"float64"), )
paddle.mean(Tensor([2, 82, 4],"float32"), )
paddle.mean(Tensor([2, 82, 4],"float64"), )
paddle.mean(Tensor([2, 83, 4],"float32"), )
paddle.mean(Tensor([2, 83, 4],"float64"), )
paddle.mean(Tensor([2, 84, 4],"float32"), )
paddle.mean(Tensor([2, 84, 4],"float64"), )
paddle.mean(Tensor([2, 85, 4],"float32"), )
paddle.mean(Tensor([2, 85, 4],"float64"), )
paddle.mean(Tensor([2, 86, 4],"float32"), )
paddle.mean(Tensor([2, 86, 4],"float64"), )
paddle.mean(Tensor([2, 87, 4],"float32"), )
paddle.mean(Tensor([2, 87, 4],"float64"), )
paddle.mean(Tensor([2, 88, 4],"float32"), )
paddle.mean(Tensor([2, 88, 4],"float64"), )
paddle.mean(Tensor([2, 89, 4],"float32"), )
paddle.mean(Tensor([2, 89, 4],"float64"), )
paddle.mean(Tensor([2, 8],"float64"), )
paddle.mean(Tensor([2, 9, 4, 4],"float16"), )
paddle.mean(Tensor([2, 9, 4, 4],"float64"), )
paddle.mean(Tensor([2, 9, 4],"float32"), )
paddle.mean(Tensor([2, 9, 4],"float64"), )
paddle.mean(Tensor([2, 9, 5, 1],"float64"), )
paddle.mean(Tensor([2, 9, 9, 9, 6],"float32"), )
paddle.mean(Tensor([2, 96, 2],"float32"), axis=-1, )
paddle.mean(Tensor([2, 96, 2],"float32"), name=None, )
paddle.mean(Tensor([20, 1],"float64"), )
paddle.mean(Tensor([20, 2, 2],"float64"), )
paddle.mean(Tensor([20, 2, 5, 7, 3],"float32"), )
paddle.mean(Tensor([20, 3, 3],"float64"), )
paddle.mean(Tensor([20, 30],"float16"), )
paddle.mean(Tensor([20, 30],"float32"), )
paddle.mean(Tensor([20, 30],"float64"), )
paddle.mean(Tensor([20, 4],"float32"), )
paddle.mean(Tensor([20, 5, 7, 2],"float32"), )
paddle.mean(Tensor([20, 60],"float32"), axis=0, )
paddle.mean(Tensor([200, 1],"float32"), )
paddle.mean(Tensor([200, 50],"float32"), )
paddle.mean(Tensor([2005, 4],"float32"), )
paddle.mean(Tensor([201, 4],"float32"), )
paddle.mean(Tensor([2021, 4],"float32"), )
paddle.mean(Tensor([2022, 4],"float32"), )
paddle.mean(Tensor([2025, 4],"float32"), )
paddle.mean(Tensor([2043, 4],"float32"), )
paddle.mean(Tensor([2046, 4],"float32"), )
paddle.mean(Tensor([2059, 4],"float32"), )
paddle.mean(Tensor([2077, 4],"float32"), )
paddle.mean(Tensor([2102, 4],"float32"), )
paddle.mean(Tensor([2117, 4],"float32"), )
paddle.mean(Tensor([2119, 4],"float32"), )
paddle.mean(Tensor([2129, 4],"float32"), )
paddle.mean(Tensor([213, 4],"float32"), )
paddle.mean(Tensor([2132, 4],"float32"), )
paddle.mean(Tensor([216, 4],"float32"), )
paddle.mean(Tensor([2162, 4],"float32"), )
paddle.mean(Tensor([2178, 4],"float32"), )
paddle.mean(Tensor([2181, 4],"float32"), )
paddle.mean(Tensor([2187, 4],"float32"), )
paddle.mean(Tensor([2196, 4],"float32"), )
paddle.mean(Tensor([22, 14],"float64"), )
paddle.mean(Tensor([22, 4],"float32"), )
paddle.mean(Tensor([2214, 4],"float32"), )
paddle.mean(Tensor([2215, 4],"float32"), )
paddle.mean(Tensor([2219, 4],"float32"), )
paddle.mean(Tensor([2246, 4],"float32"), )
paddle.mean(Tensor([2252, 4],"float32"), )
paddle.mean(Tensor([2253, 4],"float32"), )
paddle.mean(Tensor([2262, 4],"float32"), )
paddle.mean(Tensor([2279, 4],"float32"), )
paddle.mean(Tensor([227],"float32"), )
paddle.mean(Tensor([228, 4],"float32"), )
paddle.mean(Tensor([2286, 4],"float32"), )
paddle.mean(Tensor([2288, 4],"float32"), )
paddle.mean(Tensor([230, 4],"float32"), )
paddle.mean(Tensor([2315, 4],"float32"), )
paddle.mean(Tensor([2330, 4],"float32"), )
paddle.mean(Tensor([2343, 4],"float32"), )
paddle.mean(Tensor([2346, 4],"float32"), )
paddle.mean(Tensor([2347, 4],"float32"), )
paddle.mean(Tensor([2353, 4],"float32"), )
paddle.mean(Tensor([2354, 4],"float32"), )
paddle.mean(Tensor([2365, 4],"float32"), )
paddle.mean(Tensor([2396, 4],"float32"), )
paddle.mean(Tensor([24, 24, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([24, 24],"float64"), )
paddle.mean(Tensor([24, 64, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([24, 96, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([241, 4],"float32"), )
paddle.mean(Tensor([242, 4],"float32"), )
paddle.mean(Tensor([2425, 4],"float32"), )
paddle.mean(Tensor([2429, 4],"float32"), )
paddle.mean(Tensor([25, 2, 5, 6, 3],"float32"), )
paddle.mean(Tensor([25, 5, 6, 2],"float32"), )
paddle.mean(Tensor([2507, 4],"float32"), )
paddle.mean(Tensor([252, 4],"float32"), )
paddle.mean(Tensor([253, 15],"float64"), )
paddle.mean(Tensor([25600, 1],"float32"), )
paddle.mean(Tensor([2562, 4],"float32"), )
paddle.mean(Tensor([256],"float32"), )
paddle.mean(Tensor([26, 7, 32],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([2618, 4],"float32"), )
paddle.mean(Tensor([26182, 16],"float32"), axis=0, )
paddle.mean(Tensor([26182, 2, 16],"float32"), axis=0, )
paddle.mean(Tensor([26736, 3],"float32"), name=None, )
paddle.mean(Tensor([27],"float64"), )
paddle.mean(Tensor([2865, 4],"float32"), )
paddle.mean(Tensor([2885, 1],"float32"), )
paddle.mean(Tensor([28],"float32"), )
paddle.mean(Tensor([29, 4],"float32"), )
paddle.mean(Tensor([295],"float32"), )
paddle.mean(Tensor([297, 4],"float32"), )
paddle.mean(Tensor([298, 4],"float32"), )
paddle.mean(Tensor([2],"float16"), )
paddle.mean(Tensor([2],"float32"), )
paddle.mean(Tensor([2],"float64"), )
paddle.mean(Tensor([3, 1, 2],"float64"), )
paddle.mean(Tensor([3, 10, 10],"float16"), )
paddle.mean(Tensor([3, 10, 10],"float64"), )
paddle.mean(Tensor([3, 10, 12],"float64"), )
paddle.mean(Tensor([3, 10, 3, 3],"float32"), )
paddle.mean(Tensor([3, 10, 3, 3],"float64"), )
paddle.mean(Tensor([3, 10, 5, 5],"float64"), )
paddle.mean(Tensor([3, 10, 8],"complex128"), )
paddle.mean(Tensor([3, 10, 8],"complex64"), )
paddle.mean(Tensor([3, 10, 8],"float64"), )
paddle.mean(Tensor([3, 10000],"float64"), )
paddle.mean(Tensor([3, 10],"float32"), )
paddle.mean(Tensor([3, 1],"float32"), )
paddle.mean(Tensor([3, 1],"float64"), )
paddle.mean(Tensor([3, 2, 1, 2],"float64"), )
paddle.mean(Tensor([3, 2, 1, 4],"float64"), )
paddle.mean(Tensor([3, 2, 12, 12],"float64"), )
paddle.mean(Tensor([3, 2, 12, 4, 4],"float32"), )
paddle.mean(Tensor([3, 2, 1],"float64"), )
paddle.mean(Tensor([3, 2, 2, 4, 5, 2],"float16"), )
paddle.mean(Tensor([3, 2, 2, 4, 5, 2],"float64"), )
paddle.mean(Tensor([3, 2, 2],"float32"), )
paddle.mean(Tensor([3, 2, 2],"float64"), )
paddle.mean(Tensor([3, 2, 3, 1, 5, 1, 2],"float64"), )
paddle.mean(Tensor([3, 2, 3, 3],"float64"), )
paddle.mean(Tensor([3, 2, 32, 16, 8],"float16"), )
paddle.mean(Tensor([3, 2, 32, 16, 8],"float32"), )
paddle.mean(Tensor([3, 2, 32, 32],"float64"), )
paddle.mean(Tensor([3, 2, 33, 19, 7],"float32"), )
paddle.mean(Tensor([3, 2, 3],"float32"), )
paddle.mean(Tensor([3, 2, 3],"float64"), )
paddle.mean(Tensor([3, 2, 4, 4],"float64"), )
paddle.mean(Tensor([3, 2, 4, 6],"float32"), )
paddle.mean(Tensor([3, 2, 5, 10],"float16"), )
paddle.mean(Tensor([3, 2, 5, 10],"float64"), )
paddle.mean(Tensor([3, 2, 6, 4],"float64"), )
paddle.mean(Tensor([3, 2, 64, 32],"float64"), )
paddle.mean(Tensor([3, 2, 66, 40],"float64"), )
paddle.mean(Tensor([3, 2, 6],"float64"), )
paddle.mean(Tensor([3, 2, 8, 66, 40],"float64"), )
paddle.mean(Tensor([3, 20, 1],"float16"), )
paddle.mean(Tensor([3, 20, 1],"float32"), )
paddle.mean(Tensor([3, 20],"float16"), )
paddle.mean(Tensor([3, 20],"float32"), )
paddle.mean(Tensor([3, 2],"float32"), )
paddle.mean(Tensor([3, 2],"float64"), )
paddle.mean(Tensor([3, 3, 10, 10],"float32"), )
paddle.mean(Tensor([3, 3, 10, 10],"float32"), name=None, )
paddle.mean(Tensor([3, 3, 10, 8],"float16"), )
paddle.mean(Tensor([3, 3, 10, 8],"float64"), )
paddle.mean(Tensor([3, 3, 11, 11, 11],"float16"), )
paddle.mean(Tensor([3, 3, 11, 11, 11],"float32"), )
paddle.mean(Tensor([3, 3, 11, 11],"float16"), )
paddle.mean(Tensor([3, 3, 11, 11],"float64"), )
paddle.mean(Tensor([3, 3, 12, 12],"float16"), )
paddle.mean(Tensor([3, 3, 12, 12],"float64"), )
paddle.mean(Tensor([3, 3, 2, 5],"float64"), )
paddle.mean(Tensor([3, 3, 20],"float64"), )
paddle.mean(Tensor([3, 3, 2],"float64"), )
paddle.mean(Tensor([3, 3, 3],"float32"), )
paddle.mean(Tensor([3, 3, 3],"float64"), )
paddle.mean(Tensor([3, 3, 5],"float32"), )
paddle.mean(Tensor([3, 3, 5],"float64"), )
paddle.mean(Tensor([3, 3, 6, 3, 2, 5],"float64"), )
paddle.mean(Tensor([3, 3, 6, 4],"float16"), )
paddle.mean(Tensor([3, 3, 6, 4],"float64"), )
paddle.mean(Tensor([3, 3, 8, 12],"float64"), )
paddle.mean(Tensor([3, 30],"float64"), )
paddle.mean(Tensor([3, 3],"float32"), )
paddle.mean(Tensor([3, 3],"float64"), )
paddle.mean(Tensor([3, 3],"float64"), name=None, )
paddle.mean(Tensor([3, 4, 10],"float64"), )
paddle.mean(Tensor([3, 4, 3, 4, 3, 4],"float64"), )
paddle.mean(Tensor([3, 4, 4],"float32"), )
paddle.mean(Tensor([3, 4, 4],"float64"), )
paddle.mean(Tensor([3, 4, 5, 6, 7],"float32"), )
paddle.mean(Tensor([3, 4, 5, 6],"float32"), )
paddle.mean(Tensor([3, 4, 5, 6],"float64"), )
paddle.mean(Tensor([3, 4, 5],"float32"), )
paddle.mean(Tensor([3, 4, 5],"float64"), )
paddle.mean(Tensor([3, 4, 64, 64],"float32"), )
paddle.mean(Tensor([3, 40],"float64"), )
paddle.mean(Tensor([3, 4],"float32"), )
paddle.mean(Tensor([3, 4],"float64"), )
paddle.mean(Tensor([3, 5, 2],"float64"), )
paddle.mean(Tensor([3, 5, 47],"float64"), )
paddle.mean(Tensor([3, 5],"float32"), axis=None, )
paddle.mean(Tensor([3, 5],"float32"), keepdim=True, )
paddle.mean(Tensor([3, 5],"float64"), )
paddle.mean(Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.mean(Tensor([3, 6, 3, 4, 2],"float64"), )
paddle.mean(Tensor([3, 6, 4],"float64"), )
paddle.mean(Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.mean(Tensor([3, 6, 6],"float64"), )
paddle.mean(Tensor([3, 7],"float64"), )
paddle.mean(Tensor([3, 8, 2, 4],"float32"), )
paddle.mean(Tensor([3, 8],"float32"), )
paddle.mean(Tensor([3, 96, 1],"float32"), name=None, )
paddle.mean(Tensor([30, 10, 64],"float32"), )
paddle.mean(Tensor([30, 15],"float32"), )
paddle.mean(Tensor([30, 1],"float64"), )
paddle.mean(Tensor([30, 200, 40],"float32"), axis=-1, keepdim=False, )
paddle.mean(Tensor([30, 200, 40],"float32"), axis=1, keepdim=False, )
paddle.mean(Tensor([30, 200, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.mean(Tensor([30, 60],"float32"), axis=0, )
paddle.mean(Tensor([30, 8, 400],"float16"), axis=1, )
paddle.mean(Tensor([30, 8, 400],"float32"), axis=1, )
paddle.mean(Tensor([30000],"float64"), )
paddle.mean(Tensor([309, 4],"float32"), )
paddle.mean(Tensor([30],"float64"), )
paddle.mean(Tensor([313, 4],"float32"), )
paddle.mean(Tensor([31],"float64"), )
paddle.mean(Tensor([32, 10],"float32"), )
paddle.mean(Tensor([32, 16, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([32, 1],"float32"), )
paddle.mean(Tensor([32, 1],"float64"), )
paddle.mean(Tensor([32, 3, 2048],"float16"), axis=1, )
paddle.mean(Tensor([32, 3, 2048],"float32"), axis=1, )
paddle.mean(Tensor([32, 32],"float32"), )
paddle.mean(Tensor([32, 32],"float64"), )
paddle.mean(Tensor([32, 501, 4],"float32"), name=None, )
paddle.mean(Tensor([32, 8, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([320, 4],"float32"), )
paddle.mean(Tensor([320],"float64"), )
paddle.mean(Tensor([32],"float32"), )
paddle.mean(Tensor([32],"float64"), )
paddle.mean(Tensor([33, 4],"float32"), )
paddle.mean(Tensor([334],"float32"), )
paddle.mean(Tensor([336, 4],"float32"), )
paddle.mean(Tensor([339, 4],"float32"), )
paddle.mean(Tensor([345],"float32"), )
paddle.mean(Tensor([3548, 12, 170, 1],"float32"), name=None, )
paddle.mean(Tensor([36, 16],"float64"), )
paddle.mean(Tensor([37, 4],"float32"), )
paddle.mean(Tensor([384, 192, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([384, 96, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([39, 1],"float32"), )
paddle.mean(Tensor([39, 4],"float32"), )
paddle.mean(Tensor([39],"float32"), )
paddle.mean(Tensor([3],"float16"), axis=0, )
paddle.mean(Tensor([3],"float32"), )
paddle.mean(Tensor([3],"float32"), axis=0, )
paddle.mean(Tensor([3],"float64"), )
paddle.mean(Tensor([4, 1, 1, 1, 1],"float16"), )
paddle.mean(Tensor([4, 1, 1, 1, 1],"float64"), )
paddle.mean(Tensor([4, 1, 1, 1],"float16"), )
paddle.mean(Tensor([4, 1, 1, 1],"float64"), )
paddle.mean(Tensor([4, 1, 1024, 1024],"float32"), )
paddle.mean(Tensor([4, 1, 12, 12],"float64"), )
paddle.mean(Tensor([4, 1, 2, 2, 2],"float16"), )
paddle.mean(Tensor([4, 1, 2, 2, 2],"float32"), )
paddle.mean(Tensor([4, 1, 2, 2],"float16"), )
paddle.mean(Tensor([4, 1, 2, 2],"float64"), )
paddle.mean(Tensor([4, 1, 3, 3],"float64"), )
paddle.mean(Tensor([4, 1, 4],"float32"), )
paddle.mean(Tensor([4, 1, 512, 1024],"float32"), )
paddle.mean(Tensor([4, 10, 10, 10],"float16"), )
paddle.mean(Tensor([4, 10, 10, 7],"float64"), )
paddle.mean(Tensor([4, 10, 64],"float64"), )
paddle.mean(Tensor([4, 100, 16],"float32"), )
paddle.mean(Tensor([4, 100, 4, 4],"float16"), )
paddle.mean(Tensor([4, 100, 4, 4],"float32"), )
paddle.mean(Tensor([4, 100],"float32"), )
paddle.mean(Tensor([4, 1024, 1024],"float32"), )
paddle.mean(Tensor([4, 10],"float32"), )
paddle.mean(Tensor([4, 10],"float32"), axis=-1, )
paddle.mean(Tensor([4, 12, 4],"float64"), )
paddle.mean(Tensor([4, 14, 2],"float64"), )
paddle.mean(Tensor([4, 15, 3, 256, 256],"float32"), )
paddle.mean(Tensor([4, 16],"float32"), )
paddle.mean(Tensor([4, 1],"float32"), )
paddle.mean(Tensor([4, 1],"float64"), )
paddle.mean(Tensor([4, 2, 1, 512, 4, 4],"float32"), 0, True, None, )
paddle.mean(Tensor([4, 2, 2],"float64"), )
paddle.mean(Tensor([4, 2, 4],"float64"), )
paddle.mean(Tensor([4, 2, 8, 7],"float64"), )
paddle.mean(Tensor([4, 256, 16, 16],"float16"), -2, )
paddle.mean(Tensor([4, 256, 16, 16],"float32"), -2, )
paddle.mean(Tensor([4, 2],"float64"), )
paddle.mean(Tensor([4, 3, 1],"float16"), )
paddle.mean(Tensor([4, 3, 1],"float64"), )
paddle.mean(Tensor([4, 3, 2, 1],"float64"), )
paddle.mean(Tensor([4, 3, 2, 5],"float64"), )
paddle.mean(Tensor([4, 3, 2],"float32"), )
paddle.mean(Tensor([4, 3, 2],"float64"), )
paddle.mean(Tensor([4, 3, 2],"float64"), name=None, )
paddle.mean(Tensor([4, 3, 3, 4],"float64"), name=None, )
paddle.mean(Tensor([4, 3, 3],"float64"), name=None, )
paddle.mean(Tensor([4, 3, 6, 3, 4, 5],"float64"), )
paddle.mean(Tensor([4, 31],"float64"), )
paddle.mean(Tensor([4, 384, 8, 8],"float16"), -2, )
paddle.mean(Tensor([4, 384, 8, 8],"float32"), -2, )
paddle.mean(Tensor([4, 3],"float32"), )
paddle.mean(Tensor([4, 3],"float32"), axis=list[0,], )
paddle.mean(Tensor([4, 3],"float64"), )
paddle.mean(Tensor([4, 3],"float64"), axis=list[0,], )
paddle.mean(Tensor([4, 4, 2, 2],"float16"), )
paddle.mean(Tensor([4, 4, 2, 2],"float32"), )
paddle.mean(Tensor([4, 4, 3, 3],"float64"), )
paddle.mean(Tensor([4, 4, 4, 4, 5],"float64"), )
paddle.mean(Tensor([4, 4, 4, 4],"float64"), )
paddle.mean(Tensor([4, 4, 4],"float64"), )
paddle.mean(Tensor([4, 4, 6, 3],"float16"), )
paddle.mean(Tensor([4, 4, 6, 3],"float64"), )
paddle.mean(Tensor([4, 4],"float32"), )
paddle.mean(Tensor([4, 4],"float64"), )
paddle.mean(Tensor([4, 5, 10, 10],"float32"), )
paddle.mean(Tensor([4, 5, 10, 10],"float64"), )
paddle.mean(Tensor([4, 5, 100, 50],"float64"), )
paddle.mean(Tensor([4, 5, 22, 28],"float64"), )
paddle.mean(Tensor([4, 5, 2],"float64"), )
paddle.mean(Tensor([4, 5, 4, 3],"float64"), )
paddle.mean(Tensor([4, 5, 4, 5],"float64"), )
paddle.mean(Tensor([4, 5, 4],"float64"), )
paddle.mean(Tensor([4, 5, 6, 7],"float64"), )
paddle.mean(Tensor([4, 5, 6],"float64"), )
paddle.mean(Tensor([4, 5, 7, 23],"float64"), )
paddle.mean(Tensor([4, 512, 1024],"float32"), )
paddle.mean(Tensor([4, 512, 512],"float32"), )
paddle.mean(Tensor([4, 512],"float32"), 1, keepdim=True, )
paddle.mean(Tensor([4, 5],"float32"), )
paddle.mean(Tensor([4, 5],"float64"), )
paddle.mean(Tensor([4, 6, 1, 8],"float32"), )
paddle.mean(Tensor([4, 6, 1, 8],"float64"), )
paddle.mean(Tensor([4, 6, 2, 4],"float32"), )
paddle.mean(Tensor([4, 6, 2, 4],"float64"), )
paddle.mean(Tensor([4, 6, 4, 4],"float32"), )
paddle.mean(Tensor([4, 60],"float32"), axis=0, )
paddle.mean(Tensor([4, 64],"float32"), axis=-1, )
paddle.mean(Tensor([4, 6],"float32"), )
paddle.mean(Tensor([4, 8, 16, 1],"float64"), )
paddle.mean(Tensor([4, 8, 16],"float64"), )
paddle.mean(Tensor([4, 8, 4],"complex128"), )
paddle.mean(Tensor([4, 8],"float64"), )
paddle.mean(Tensor([4, 9, 12, 12],"float64"), )
paddle.mean(Tensor([4, 9, 7, 7],"float64"), )
paddle.mean(Tensor([40, 1],"float32"), )
paddle.mean(Tensor([40, 2],"float64"), )
paddle.mean(Tensor([40, 4],"float32"), )
paddle.mean(Tensor([400],"float32"), )
paddle.mean(Tensor([403, 4],"float32"), )
paddle.mean(Tensor([428, 4],"float32"), )
paddle.mean(Tensor([434, 4],"float32"), )
paddle.mean(Tensor([47, 5, 3],"float64"), )
paddle.mean(Tensor([48, 192, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([48, 48, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([48, 4],"float32"), )
paddle.mean(Tensor([48, 96, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([4800, 1],"float32"), )
paddle.mean(Tensor([4800, 2],"float32"), )
paddle.mean(Tensor([4],"float16"), axis=0, )
paddle.mean(Tensor([4],"float32"), )
paddle.mean(Tensor([4],"float32"), axis=0, )
paddle.mean(Tensor([4],"float64"), )
paddle.mean(Tensor([5, 1, 10],"float64"), )
paddle.mean(Tensor([5, 1, 1],"float64"), )
paddle.mean(Tensor([5, 1, 20],"float32"), )
paddle.mean(Tensor([5, 10, 6],"float64"), )
paddle.mean(Tensor([5, 10],"float32"), )
paddle.mean(Tensor([5, 15],"complex128"), )
paddle.mean(Tensor([5, 15],"complex64"), )
paddle.mean(Tensor([5, 15],"float64"), )
paddle.mean(Tensor([5, 170],"float64"), )
paddle.mean(Tensor([5, 1],"complex128"), )
paddle.mean(Tensor([5, 1],"complex64"), )
paddle.mean(Tensor([5, 1],"float16"), )
paddle.mean(Tensor([5, 1],"float32"), )
paddle.mean(Tensor([5, 1],"float64"), )
paddle.mean(Tensor([5, 2, 10, 2],"complex128"), )
paddle.mean(Tensor([5, 2, 10, 2],"complex64"), )
paddle.mean(Tensor([5, 2, 10, 2],"float64"), )
paddle.mean(Tensor([5, 2, 10],"float32"), )
paddle.mean(Tensor([5, 20],"float64"), )
paddle.mean(Tensor([5, 2],"float32"), )
paddle.mean(Tensor([5, 2],"float64"), )
paddle.mean(Tensor([5, 2],"float64"), axis=1, )
paddle.mean(Tensor([5, 2],"float64"), name=None, )
paddle.mean(Tensor([5, 3, 2, 1, 4],"float64"), )
paddle.mean(Tensor([5, 3, 2, 5],"float64"), )
paddle.mean(Tensor([5, 3],"float32"), )
paddle.mean(Tensor([5, 40],"complex128"), )
paddle.mean(Tensor([5, 40],"complex64"), )
paddle.mean(Tensor([5, 40],"float64"), )
paddle.mean(Tensor([5, 4],"float32"), )
paddle.mean(Tensor([5, 5, 1],"float16"), )
paddle.mean(Tensor([5, 5, 1],"float64"), )
paddle.mean(Tensor([5, 5, 5],"float32"), )
paddle.mean(Tensor([5, 5],"float16"), )
paddle.mean(Tensor([5, 5],"float32"), )
paddle.mean(Tensor([5, 5],"float64"), )
paddle.mean(Tensor([5, 5],"float64"), name=None, )
paddle.mean(Tensor([5, 6, 1],"float32"), )
paddle.mean(Tensor([5, 6, 2],"float16"), )
paddle.mean(Tensor([5, 6, 2],"float64"), )
paddle.mean(Tensor([5, 6, 4, 4],"float32"), )
paddle.mean(Tensor([5, 8],"float64"), )
paddle.mean(Tensor([50, 1501, 1],"float32"), name=None, )
paddle.mean(Tensor([50, 7],"float64"), )
paddle.mean(Tensor([5000, 1],"float32"), )
paddle.mean(Tensor([512, 768],"float32"), )
paddle.mean(Tensor([518, 4],"float32"), )
paddle.mean(Tensor([52, 4],"float32"), )
paddle.mean(Tensor([52, 7, 32],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([532, 4],"float32"), )
paddle.mean(Tensor([558, 4],"float32"), )
paddle.mean(Tensor([569, 4],"float32"), )
paddle.mean(Tensor([56],"float32"), )
paddle.mean(Tensor([58, 1],"float32"), )
paddle.mean(Tensor([58],"float16"), )
paddle.mean(Tensor([58],"float64"), )
paddle.mean(Tensor([59, 4],"float32"), )
paddle.mean(Tensor([598, 4],"float32"), )
paddle.mean(Tensor([5],"float16"), axis=0, )
paddle.mean(Tensor([5],"float32"), )
paddle.mean(Tensor([5],"float32"), axis=0, )
paddle.mean(Tensor([5],"float64"), )
paddle.mean(Tensor([5],"float64"), name=None, )
paddle.mean(Tensor([6, 10, 12],"complex128"), )
paddle.mean(Tensor([6, 10, 12],"complex64"), )
paddle.mean(Tensor([6, 10, 12],"float64"), )
paddle.mean(Tensor([6, 10],"float16"), )
paddle.mean(Tensor([6, 10],"float64"), )
paddle.mean(Tensor([6, 2, 60, 10],"float64"), )
paddle.mean(Tensor([6, 2],"float64"), )
paddle.mean(Tensor([6, 3, 2, 2],"float64"), )
paddle.mean(Tensor([6, 3],"float32"), axis=list[0,], )
paddle.mean(Tensor([6, 4, 2, 2],"float16"), )
paddle.mean(Tensor([6, 4, 2, 2],"float64"), )
paddle.mean(Tensor([6, 4, 2, 3],"float16"), )
paddle.mean(Tensor([6, 4, 2, 3],"float64"), )
paddle.mean(Tensor([6, 4, 4, 4],"float16"), )
paddle.mean(Tensor([6, 4, 4, 4],"float64"), )
paddle.mean(Tensor([6, 4],"float32"), )
paddle.mean(Tensor([6, 5, 5, 4],"float64"), )
paddle.mean(Tensor([6, 6, 6, 6],"float64"), )
paddle.mean(Tensor([6, 6, 6],"float64"), )
paddle.mean(Tensor([6, 60],"float32"), axis=0, )
paddle.mean(Tensor([6, 6],"float32"), )
paddle.mean(Tensor([6, 6],"float64"), )
paddle.mean(Tensor([6, 9],"float32"), )
paddle.mean(Tensor([6, 9],"float32"), axis=1, )
paddle.mean(Tensor([6, 9],"float64"), )
paddle.mean(Tensor([62, 4],"float32"), )
paddle.mean(Tensor([626, 4],"float32"), )
paddle.mean(Tensor([6284, 1],"float32"), )
paddle.mean(Tensor([64, 10],"float32"), )
paddle.mean(Tensor([64, 16, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([64, 1],"float16"), )
paddle.mean(Tensor([64, 1],"float32"), )
paddle.mean(Tensor([64, 20],"float64"), )
paddle.mean(Tensor([64, 3, 7, 7],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([64, 32, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([64, 3],"float32"), )
paddle.mean(Tensor([64, 512, 1, 40],"float32"), )
paddle.mean(Tensor([64, 512, 1, 80],"float32"), )
paddle.mean(Tensor([642, 4],"float32"), )
paddle.mean(Tensor([64],"float64"), )
paddle.mean(Tensor([658, 4],"float32"), )
paddle.mean(Tensor([666, 4],"float32"), )
paddle.mean(Tensor([671, 4],"float32"), )
paddle.mean(Tensor([68, 376, 1],"float32"), name=None, )
paddle.mean(Tensor([681, 4],"float32"), )
paddle.mean(Tensor([699, 4],"float32"), )
paddle.mean(Tensor([6],"float16"), axis=0, )
paddle.mean(Tensor([6],"float32"), )
paddle.mean(Tensor([6],"float32"), axis=0, )
paddle.mean(Tensor([6],"float64"), )
paddle.mean(Tensor([7, 15],"float16"), )
paddle.mean(Tensor([7, 15],"float64"), )
paddle.mean(Tensor([7, 20],"float32"), )
paddle.mean(Tensor([7, 50000],"float32"), )
paddle.mean(Tensor([705, 4],"float32"), )
paddle.mean(Tensor([71, 4],"float32"), )
paddle.mean(Tensor([712, 4],"float32"), )
paddle.mean(Tensor([714, 4],"float32"), )
paddle.mean(Tensor([719, 4],"float32"), )
paddle.mean(Tensor([72, 72],"float64"), )
paddle.mean(Tensor([734, 4],"float32"), )
paddle.mean(Tensor([75, 4],"float32"), )
paddle.mean(Tensor([750, 4],"float32"), )
paddle.mean(Tensor([754, 4],"float32"), )
paddle.mean(Tensor([78, 4],"float32"), )
paddle.mean(Tensor([780, 4],"float32"), )
paddle.mean(Tensor([787, 4],"float32"), )
paddle.mean(Tensor([7],"float16"), axis=0, )
paddle.mean(Tensor([7],"float32"), axis=0, )
paddle.mean(Tensor([8, 1, 128, 128],"float32"), )
paddle.mean(Tensor([8, 1, 512, 512],"float32"), name=None, )
paddle.mean(Tensor([8, 12],"float32"), axis=list[0,], )
paddle.mean(Tensor([8, 1501, 1],"float32"), name=None, )
paddle.mean(Tensor([8, 16, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([8, 16, 1280],"float32"), axis=1, )
paddle.mean(Tensor([8, 16, 64],"float32"), )
paddle.mean(Tensor([8, 16, 7, 7],"float32"), )
paddle.mean(Tensor([8, 24],"float64"), )
paddle.mean(Tensor([8, 2],"float32"), )
paddle.mean(Tensor([8, 3, 2, 3],"float64"), )
paddle.mean(Tensor([8, 32, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([8, 4, 4],"float32"), )
paddle.mean(Tensor([8, 4, 4],"float64"), )
paddle.mean(Tensor([8, 4],"float64"), )
paddle.mean(Tensor([8, 512],"float32"), 1, keepdim=True, )
paddle.mean(Tensor([8, 5],"float64"), )
paddle.mean(Tensor([8, 64, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([8, 6],"float32"), axis=1, )
paddle.mean(Tensor([8, 8, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([8, 8, 1280],"float32"), axis=1, )
paddle.mean(Tensor([8, 8, 16, 16],"float32"), )
paddle.mean(Tensor([8, 8, 16, 16],"float64"), )
paddle.mean(Tensor([8, 8, 2048],"float32"), axis=1, )
paddle.mean(Tensor([8, 8, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([8, 960, 960],"float32"), axis=list[1,2,], )
paddle.mean(Tensor([80, 2],"float64"), )
paddle.mean(Tensor([80, 96],"float64"), )
paddle.mean(Tensor([800],"float16"), )
paddle.mean(Tensor([800],"float32"), )
paddle.mean(Tensor([829, 4],"float32"), )
paddle.mean(Tensor([82],"float32"), )
paddle.mean(Tensor([841, 4],"float32"), )
paddle.mean(Tensor([845, 4],"float32"), )
paddle.mean(Tensor([879, 4],"float32"), )
paddle.mean(Tensor([87],"float32"), )
paddle.mean(Tensor([88, 4],"float32"), )
paddle.mean(Tensor([8],"float16"), axis=0, )
paddle.mean(Tensor([8],"float32"), axis=0, )
paddle.mean(Tensor([8],"float32"), name=None, )
paddle.mean(Tensor([8],"float64"), )
paddle.mean(Tensor([9, 2, 2, 3],"float64"), )
paddle.mean(Tensor([9, 20],"float16"), )
paddle.mean(Tensor([9, 20],"float32"), )
paddle.mean(Tensor([9, 20],"float64"), )
paddle.mean(Tensor([908, 4],"float32"), )
paddle.mean(Tensor([91],"float32"), )
paddle.mean(Tensor([94, 4],"float32"), )
paddle.mean(Tensor([941, 4],"float32"), )
paddle.mean(Tensor([946, 4],"float32"), )
paddle.mean(Tensor([948, 4],"float32"), )
paddle.mean(Tensor([96, 192, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([96, 24, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([96, 384, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([96, 64, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([96, 96, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([964, 4],"float32"), )
paddle.mean(Tensor([966, 4],"float32"), )
paddle.mean(Tensor([967, 4],"float32"), )
paddle.mean(Tensor([97, 4],"float32"), )
paddle.mean(Tensor([976, 4],"float32"), )
paddle.mean(Tensor([990, 4],"float32"), )
paddle.mean(Tensor([995, 4],"float32"), )
paddle.mean(Tensor([9],"float16"), axis=0, )
paddle.mean(Tensor([9],"float32"), axis=0, )
paddle.mean(Tensor([9],"float64"), )
paddle.mean(Tensor([],"float16"), )
paddle.mean(Tensor([],"float32"), )
paddle.mean(Tensor([],"float32"), axis=-1, )
paddle.mean(Tensor([],"float32"), axis=0, )
paddle.mean(Tensor([],"float32"), axis=None, )
paddle.mean(Tensor([],"float32"), axis=list[], )
paddle.mean(Tensor([],"float64"), )
paddle.mean(x=Tensor([1, 1],"float32"), )
paddle.mean(x=Tensor([1, 4],"float32"), )
paddle.mean(x=Tensor([1, 4],"float64"), )
paddle.mean(x=Tensor([1, 4],"float64"), axis=-2, )
paddle.mean(x=Tensor([1, 4],"float64"), axis=-2, keepdim=False, )
paddle.mean(x=Tensor([1, 4],"float64"), axis=1, )
paddle.mean(x=Tensor([1, 4],"float64"), axis=1, keepdim=True, )
paddle.mean(x=Tensor([13, 96, 1],"float32"), axis=tuple(1,), keepdim=True, )
paddle.mean(x=Tensor([16, 96, 1],"float32"), axis=tuple(1,), keepdim=True, )
paddle.mean(x=Tensor([16, 96, 2],"float32"), axis=-1, )
paddle.mean(x=Tensor([16, 96, 2],"float32"), axis=tuple(1,), keepdim=True, )
paddle.mean(x=Tensor([2, 1, 3],"float64"), axis=Tensor([2],"int64"), )
paddle.mean(x=Tensor([2, 1, 3],"float64"), axis=list[0,1,2,], )
paddle.mean(x=Tensor([2, 1, 3],"float64"), axis=list[0,1,2,], keepdim=False, )
paddle.mean(x=Tensor([2, 1, 3],"float64"), axis=list[0,1,], )
paddle.mean(x=Tensor([2, 1, 3],"float64"), axis=list[0,2,], keepdim=True, )
paddle.mean(x=Tensor([2, 1, 3],"float64"), axis=tuple(0,1,2,), keepdim=False, )
paddle.mean(x=Tensor([2, 1, 3],"float64"), axis=tuple(0,2,), keepdim=True, )
paddle.mean(x=Tensor([2, 102],"float16"), )
paddle.mean(x=Tensor([2, 102],"float32"), )
paddle.mean(x=Tensor([2, 96, 2],"float32"), axis=-1, )
paddle.mean(x=Tensor([2, 96, 2],"float32"), axis=tuple(1,), keepdim=True, )
paddle.mean(x=Tensor([3, 96, 1],"float32"), axis=tuple(1,), keepdim=True, )
paddle.mean(x=Tensor([4, 1],"float32"), )
paddle.mean(x=Tensor([8, 1],"float16"), )
paddle.mean(x=Tensor([8, 1],"float32"), )
paddle.mean(x=Tensor([],"float32"), )
paddle.sum(Tensor([0, 0, 0],"float32"), 1, )
paddle.sum(Tensor([0, 0],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([0, 0],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 0],"float32"), keepdim=True, )
paddle.sum(Tensor([1, 1, 1],"float32"), 1, )
paddle.sum(Tensor([1, 1, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 1, 45],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 1, 54],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 10, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 1000],"float32"), axis=1, )
paddle.sum(Tensor([1, 100],"float32"), 1, )
paddle.sum(Tensor([1, 1024, 1024],"int64"), )
paddle.sum(Tensor([1, 1024, 1],"float32"), )
paddle.sum(Tensor([1, 10],"float32"), 1, )
paddle.sum(Tensor([1, 11, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 12, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 128, 32, 32],"float32"), 1, )
paddle.sum(Tensor([1, 128, 32, 32],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([1, 12],"float32"), 1, )
paddle.sum(Tensor([1, 13, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 13],"float32"), 1, )
paddle.sum(Tensor([1, 14, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 14, 5, 14],"int64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 14, 5, 14],"int64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.sum(Tensor([1, 144],"float32"), 1, )
paddle.sum(Tensor([1, 15],"float32"), 1, )
paddle.sum(Tensor([1, 16, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 16],"int64"), axis=0, )
paddle.sum(Tensor([1, 18],"float32"), 1, )
paddle.sum(Tensor([1, 192],"float32"), 1, )
paddle.sum(Tensor([1, 196608],"float32"), axis=1, )
paddle.sum(Tensor([1, 1],"float32"), )
paddle.sum(Tensor([1, 1],"float32"), axis=-1, )
paddle.sum(Tensor([1, 1],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([1, 1],"int32"), )
paddle.sum(Tensor([1, 1],"int64"), )
paddle.sum(Tensor([1, 2, 2],"float32"), axis=-1, )
paddle.sum(Tensor([1, 2, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 200],"float32"), 1, )
paddle.sum(Tensor([1, 20],"float32"), 1, )
paddle.sum(Tensor([1, 22],"int64"), axis=1, )
paddle.sum(Tensor([1, 23],"float32"), 1, )
paddle.sum(Tensor([1, 24],"float32"), 1, )
paddle.sum(Tensor([1, 25, 1, 2],"float32"), axis=-1, )
paddle.sum(Tensor([1, 25, 21504, 2],"float32"), axis=-1, )
paddle.sum(Tensor([1, 256, 16, 16],"float32"), 1, )
paddle.sum(Tensor([1, 256, 16, 16],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([1, 25],"float32"), 1, )
paddle.sum(Tensor([1, 2],"float32"), axis=-1, )
paddle.sum(Tensor([1, 2],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([1, 3, 3, 5],"float32"), )
paddle.sum(Tensor([1, 3, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 3, 4, 10],"float32"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 10],"float64"), 2, keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 10],"float64"), list[1,2,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 10],"float64"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 10],"float64"), tuple(1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([1, 3072],"float32"), axis=1, )
paddle.sum(Tensor([1, 30],"float32"), 1, )
paddle.sum(Tensor([1, 36],"float32"), 1, )
paddle.sum(Tensor([1, 3],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([1, 3],"float32"), axis=0, )
paddle.sum(Tensor([1, 3],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([1, 3],"float64"), axis=list[1,], )
paddle.sum(Tensor([1, 4, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 4096, 1],"float32"), )
paddle.sum(Tensor([1, 40],"float32"), 1, )
paddle.sum(Tensor([1, 45],"float32"), 1, )
paddle.sum(Tensor([1, 48],"float32"), 1, )
paddle.sum(Tensor([1, 496, 512],"int64"), )
paddle.sum(Tensor([1, 5, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 50],"float32"), 1, )
paddle.sum(Tensor([1, 512, 512],"int64"), )
paddle.sum(Tensor([1, 58, 1],"float32"), )
paddle.sum(Tensor([1, 6, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 60],"float32"), 1, )
paddle.sum(Tensor([1, 64, 64, 64],"float32"), 1, )
paddle.sum(Tensor([1, 64, 64, 64],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([1, 7, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 72],"float32"), 1, )
paddle.sum(Tensor([1, 8, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 800, 1037],"int64"), )
paddle.sum(Tensor([1, 800, 1067],"int64"), )
paddle.sum(Tensor([1, 800, 1073],"int64"), )
paddle.sum(Tensor([1, 800, 1074],"int64"), )
paddle.sum(Tensor([1, 800, 1081],"int64"), )
paddle.sum(Tensor([1, 800, 1090],"int64"), )
paddle.sum(Tensor([1, 800, 1119],"int64"), )
paddle.sum(Tensor([1, 800, 1124],"int64"), )
paddle.sum(Tensor([1, 800, 1133],"int64"), )
paddle.sum(Tensor([1, 800, 1150],"int64"), )
paddle.sum(Tensor([1, 800, 1158],"int64"), )
paddle.sum(Tensor([1, 800, 1165],"int64"), )
paddle.sum(Tensor([1, 800, 1166],"int64"), )
paddle.sum(Tensor([1, 800, 1188],"int64"), )
paddle.sum(Tensor([1, 800, 1197],"int64"), )
paddle.sum(Tensor([1, 800, 1198],"int64"), )
paddle.sum(Tensor([1, 800, 1200],"int64"), )
paddle.sum(Tensor([1, 800, 1202],"int64"), )
paddle.sum(Tensor([1, 800, 1203],"int64"), )
paddle.sum(Tensor([1, 800, 1207],"int64"), )
paddle.sum(Tensor([1, 800, 1208],"int64"), )
paddle.sum(Tensor([1, 800, 1211],"int64"), )
paddle.sum(Tensor([1, 800, 1231],"int64"), )
paddle.sum(Tensor([1, 800, 1234],"int64"), )
paddle.sum(Tensor([1, 800, 1249],"int64"), )
paddle.sum(Tensor([1, 800, 1261],"int64"), )
paddle.sum(Tensor([1, 800, 1313],"int64"), )
paddle.sum(Tensor([1, 800, 1347],"int64"), )
paddle.sum(Tensor([1, 800, 1376],"int64"), )
paddle.sum(Tensor([1, 800, 1422],"int64"), )
paddle.sum(Tensor([1, 800, 1423],"int64"), )
paddle.sum(Tensor([1, 800, 1424],"int64"), )
paddle.sum(Tensor([1, 800, 1426],"int64"), )
paddle.sum(Tensor([1, 800, 1440],"int64"), )
paddle.sum(Tensor([1, 800, 1488],"int64"), )
paddle.sum(Tensor([1, 800, 1520],"int64"), )
paddle.sum(Tensor([1, 800, 1590],"int64"), )
paddle.sum(Tensor([1, 800, 3051],"int64"), )
paddle.sum(Tensor([1, 800, 531],"int64"), )
paddle.sum(Tensor([1, 800, 533],"int64"), )
paddle.sum(Tensor([1, 800, 534],"int64"), )
paddle.sum(Tensor([1, 800, 536],"int64"), )
paddle.sum(Tensor([1, 800, 600],"int64"), )
paddle.sum(Tensor([1, 800, 639],"int64"), )
paddle.sum(Tensor([1, 800, 640],"int64"), )
paddle.sum(Tensor([1, 800, 645],"int64"), )
paddle.sum(Tensor([1, 800, 800],"int64"), )
paddle.sum(Tensor([1, 800, 849],"int64"), )
paddle.sum(Tensor([1, 800, 871],"int64"), )
paddle.sum(Tensor([1, 800, 896],"int64"), )
paddle.sum(Tensor([1, 80],"float32"), 1, )
paddle.sum(Tensor([1, 89],"float32"), 1, )
paddle.sum(Tensor([1, 8],"float32"), 1, )
paddle.sum(Tensor([1, 9, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 96],"float32"), 1, )
paddle.sum(Tensor([1, 9],"float32"), 1, )
paddle.sum(Tensor([10, 10, 5],"float64"), name=None, )
paddle.sum(Tensor([10, 10],"float32"), )
paddle.sum(Tensor([10, 10],"float32"), axis=list[], keepdim=False, )
paddle.sum(Tensor([10, 10],"float32"), name=None, )
paddle.sum(Tensor([10, 1],"float32"), )
paddle.sum(Tensor([10, 20, 2],"float32"), axis=-1, )
paddle.sum(Tensor([10, 20, 2],"float64"), axis=-1, )
paddle.sum(Tensor([10, 20],"float64"), axis=-1, )
paddle.sum(Tensor([10, 20],"float64"), axis=-1, keepdim=True, )
paddle.sum(Tensor([10, 2],"float32"), )
paddle.sum(Tensor([10, 2],"float32"), name=None, )
paddle.sum(Tensor([10, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.sum(Tensor([10, 5],"int64"), )
paddle.sum(Tensor([10, 60],"int64"), axis=0, )
paddle.sum(Tensor([100, 1, 1],"float32"), None, None, False, None, )
paddle.sum(Tensor([100, 1, 1],"float64"), None, None, False, None, )
paddle.sum(Tensor([100, 102144],"float16"), axis=1, )
paddle.sum(Tensor([100, 102144],"float32"), axis=1, )
paddle.sum(Tensor([100, 104832],"float16"), axis=1, )
paddle.sum(Tensor([100, 104832],"float32"), axis=1, )
paddle.sum(Tensor([100, 1],"float32"), )
paddle.sum(Tensor([100, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 200],"float32"), )
paddle.sum(Tensor([100, 208, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 208, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 256, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 256, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 264, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 264, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 272, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 288, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 2],"float32"), axis=1, )
paddle.sum(Tensor([100, 304, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 312, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 324],"float32"), axis=1, )
paddle.sum(Tensor([100, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 336, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 380],"float32"), axis=1, )
paddle.sum(Tensor([100, 45],"float32"), axis=1, )
paddle.sum(Tensor([100, 5776],"float32"), axis=1, )
paddle.sum(Tensor([100, 60800],"float16"), axis=1, )
paddle.sum(Tensor([100, 60800],"float32"), axis=1, )
paddle.sum(Tensor([100, 62400],"float16"), axis=1, )
paddle.sum(Tensor([100, 62400],"float32"), axis=1, )
paddle.sum(Tensor([100, 63232],"float16"), axis=1, )
paddle.sum(Tensor([100, 63232],"float32"), axis=1, )
paddle.sum(Tensor([100, 67200],"float16"), axis=1, )
paddle.sum(Tensor([100, 67200],"float32"), axis=1, )
paddle.sum(Tensor([100, 69888],"float16"), axis=1, )
paddle.sum(Tensor([100, 69888],"float32"), axis=1, )
paddle.sum(Tensor([100, 76032],"float16"), axis=1, )
paddle.sum(Tensor([100, 76032],"float32"), axis=1, )
paddle.sum(Tensor([100, 77824],"float16"), axis=1, )
paddle.sum(Tensor([100, 77824],"float32"), axis=1, )
paddle.sum(Tensor([100, 78144],"float16"), axis=1, )
paddle.sum(Tensor([100, 78144],"float32"), axis=1, )
paddle.sum(Tensor([100, 82688],"float16"), axis=1, )
paddle.sum(Tensor([100, 82688],"float32"), axis=1, )
paddle.sum(Tensor([100, 84864],"float16"), axis=1, )
paddle.sum(Tensor([100, 84864],"float32"), axis=1, )
paddle.sum(Tensor([100, 86016],"float16"), axis=1, )
paddle.sum(Tensor([100, 86016],"float32"), axis=1, )
paddle.sum(Tensor([100, 87552],"float16"), axis=1, )
paddle.sum(Tensor([100, 87552],"float32"), axis=1, )
paddle.sum(Tensor([100, 89216],"float16"), axis=1, )
paddle.sum(Tensor([100, 89216],"float32"), axis=1, )
paddle.sum(Tensor([100, 89984],"float16"), axis=1, )
paddle.sum(Tensor([100, 89984],"float32"), axis=1, )
paddle.sum(Tensor([100, 91392],"float16"), axis=1, )
paddle.sum(Tensor([100, 91392],"float32"), axis=1, )
paddle.sum(Tensor([100, 92416],"float16"), axis=1, )
paddle.sum(Tensor([100, 92416],"float32"), axis=1, )
paddle.sum(Tensor([1000, 1000],"float16"), )
paddle.sum(Tensor([1000, 1000],"float32"), )
paddle.sum(Tensor([1000, 100],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([1000, 10],"float16"), )
paddle.sum(Tensor([1000, 10],"float32"), )
paddle.sum(Tensor([1000, 400],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([1000, 784],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([10000, 1],"float32"), name=None, )
paddle.sum(Tensor([10000, 2, 3],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([10000, 2, 3],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([100000, 4],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([1000000, 4],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([10000],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([1000110],"float32"), )
paddle.sum(Tensor([1000],"float16"), )
paddle.sum(Tensor([1000],"float32"), )
paddle.sum(Tensor([1001, 1],"float32"), )
paddle.sum(Tensor([1001088],"float32"), )
paddle.sum(Tensor([1001730],"float32"), )
paddle.sum(Tensor([1002, 1],"float32"), )
paddle.sum(Tensor([1003547],"float32"), )
paddle.sum(Tensor([1005783],"float32"), )
paddle.sum(Tensor([1009453],"float32"), )
paddle.sum(Tensor([100],"float32"), )
paddle.sum(Tensor([101, 1],"float32"), )
paddle.sum(Tensor([101, 1],"float32"), name=None, )
paddle.sum(Tensor([101, 1],"int32"), )
paddle.sum(Tensor([1010, 1],"float32"), )
paddle.sum(Tensor([1010616],"float32"), )
paddle.sum(Tensor([1010673],"float32"), )
paddle.sum(Tensor([1011, 1],"float32"), )
paddle.sum(Tensor([1011072],"float32"), )
paddle.sum(Tensor([1013482],"float32"), )
paddle.sum(Tensor([1014002],"float32"), )
paddle.sum(Tensor([1014563],"float32"), )
paddle.sum(Tensor([1014705],"float32"), )
paddle.sum(Tensor([1015607],"float32"), )
paddle.sum(Tensor([1016, 1],"float32"), )
paddle.sum(Tensor([1017, 1],"float32"), )
paddle.sum(Tensor([1017677],"float32"), )
paddle.sum(Tensor([1019733],"float32"), )
paddle.sum(Tensor([102, 1],"float32"), )
paddle.sum(Tensor([102, 1],"int32"), )
paddle.sum(Tensor([1022957],"float32"), )
paddle.sum(Tensor([1024, 1000],"float16"), axis=-1, )
paddle.sum(Tensor([1024, 1000],"float32"), axis=-1, )
paddle.sum(Tensor([1024, 1024, 8],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([1024, 1024, 8],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([1024, 1024],"float16"), )
paddle.sum(Tensor([1024, 1024],"float32"), )
paddle.sum(Tensor([1024, 10],"float16"), )
paddle.sum(Tensor([1024, 10],"float32"), )
paddle.sum(Tensor([1024, 2],"float16"), )
paddle.sum(Tensor([1024, 2],"float32"), )
paddle.sum(Tensor([1024, 512],"bool"), )
paddle.sum(Tensor([1024],"float16"), )
paddle.sum(Tensor([1024],"float32"), )
paddle.sum(Tensor([1025, 1],"float32"), )
paddle.sum(Tensor([1025789],"float32"), )
paddle.sum(Tensor([1025994],"float32"), )
paddle.sum(Tensor([1026, 1],"float32"), )
paddle.sum(Tensor([1029329],"float32"), )
paddle.sum(Tensor([103, 1],"float32"), )
paddle.sum(Tensor([1030, 1],"float32"), )
paddle.sum(Tensor([1031, 1],"float32"), )
paddle.sum(Tensor([1034011],"float32"), )
paddle.sum(Tensor([1037889],"float32"), )
paddle.sum(Tensor([1038765],"float32"), )
paddle.sum(Tensor([1038],"float32"), )
paddle.sum(Tensor([104, 102144],"float16"), axis=1, )
paddle.sum(Tensor([104, 102144],"float32"), axis=1, )
paddle.sum(Tensor([104, 128],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([104, 1],"float32"), )
paddle.sum(Tensor([104, 1],"int32"), )
paddle.sum(Tensor([104, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 256, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 264, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 272, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 28, 1],"float32"), )
paddle.sum(Tensor([104, 280, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 288, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 288, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 29, 1],"float32"), )
paddle.sum(Tensor([104, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 30, 1],"float32"), )
paddle.sum(Tensor([104, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 304, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 304, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 31, 1],"float32"), )
paddle.sum(Tensor([104, 32, 1],"float32"), )
paddle.sum(Tensor([104, 328, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 328, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 33, 1],"float32"), )
paddle.sum(Tensor([104, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([104, 34, 1],"float32"), )
paddle.sum(Tensor([104, 35, 1],"float32"), )
paddle.sum(Tensor([104, 36, 1],"float32"), )
paddle.sum(Tensor([104, 37, 1],"float32"), )
paddle.sum(Tensor([104, 38, 1],"float32"), )
paddle.sum(Tensor([104, 39, 1],"float32"), )
paddle.sum(Tensor([104, 40, 1],"float32"), )
paddle.sum(Tensor([104, 41, 1],"float32"), )
paddle.sum(Tensor([104, 42, 1],"float32"), )
paddle.sum(Tensor([104, 43, 1],"float32"), )
paddle.sum(Tensor([104, 44, 1],"float32"), )
paddle.sum(Tensor([104, 45, 1],"float32"), )
paddle.sum(Tensor([104, 46, 1],"float32"), )
paddle.sum(Tensor([104, 47, 1],"float32"), )
paddle.sum(Tensor([104, 48, 1],"float32"), )
paddle.sum(Tensor([104, 49, 1],"float32"), )
paddle.sum(Tensor([104, 54400],"float16"), axis=1, )
paddle.sum(Tensor([104, 54400],"float32"), axis=1, )
paddle.sum(Tensor([104, 60800],"float16"), axis=1, )
paddle.sum(Tensor([104, 60800],"float32"), axis=1, )
paddle.sum(Tensor([104, 65600],"float16"), axis=1, )
paddle.sum(Tensor([104, 65600],"float32"), axis=1, )
paddle.sum(Tensor([104, 67200],"float16"), axis=1, )
paddle.sum(Tensor([104, 67200],"float32"), axis=1, )
paddle.sum(Tensor([104, 73984],"float16"), axis=1, )
paddle.sum(Tensor([104, 73984],"float32"), axis=1, )
paddle.sum(Tensor([104, 76160],"float16"), axis=1, )
paddle.sum(Tensor([104, 76160],"float32"), axis=1, )
paddle.sum(Tensor([104, 78336],"float16"), axis=1, )
paddle.sum(Tensor([104, 78336],"float32"), axis=1, )
paddle.sum(Tensor([104, 82688],"float16"), axis=1, )
paddle.sum(Tensor([104, 82688],"float32"), axis=1, )
paddle.sum(Tensor([104, 84480],"float16"), axis=1, )
paddle.sum(Tensor([104, 84480],"float32"), axis=1, )
paddle.sum(Tensor([104, 84864],"float16"), axis=1, )
paddle.sum(Tensor([104, 84864],"float32"), axis=1, )
paddle.sum(Tensor([104, 86016],"float16"), axis=1, )
paddle.sum(Tensor([104, 86016],"float32"), axis=1, )
paddle.sum(Tensor([104, 87360],"float16"), axis=1, )
paddle.sum(Tensor([104, 87360],"float32"), axis=1, )
paddle.sum(Tensor([104, 87552],"float16"), axis=1, )
paddle.sum(Tensor([104, 87552],"float32"), axis=1, )
paddle.sum(Tensor([104, 89984],"float16"), axis=1, )
paddle.sum(Tensor([104, 89984],"float32"), axis=1, )
paddle.sum(Tensor([104, 91392],"float16"), axis=1, )
paddle.sum(Tensor([104, 91392],"float32"), axis=1, )
paddle.sum(Tensor([104, 92416],"float16"), axis=1, )
paddle.sum(Tensor([104, 92416],"float32"), axis=1, )
paddle.sum(Tensor([104, 97088],"float16"), axis=1, )
paddle.sum(Tensor([104, 97088],"float32"), axis=1, )
paddle.sum(Tensor([1040, 1],"int32"), )
paddle.sum(Tensor([1044, 1],"float32"), )
paddle.sum(Tensor([1048576],"float16"), )
paddle.sum(Tensor([104],"float32"), )
paddle.sum(Tensor([105, 1],"float32"), )
paddle.sum(Tensor([105, 1],"int32"), )
paddle.sum(Tensor([106, 1],"float32"), )
paddle.sum(Tensor([107, 1],"float32"), )
paddle.sum(Tensor([108, 102144],"float16"), axis=1, )
paddle.sum(Tensor([108, 102144],"float32"), axis=1, )
paddle.sum(Tensor([108, 1],"float32"), )
paddle.sum(Tensor([108, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 200, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 232, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 272, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 280, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 304, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 304, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([108, 54400],"float16"), axis=1, )
paddle.sum(Tensor([108, 54400],"float32"), axis=1, )
paddle.sum(Tensor([108, 57600],"float16"), axis=1, )
paddle.sum(Tensor([108, 57600],"float32"), axis=1, )
paddle.sum(Tensor([108, 60800],"float16"), axis=1, )
paddle.sum(Tensor([108, 60800],"float32"), axis=1, )
paddle.sum(Tensor([108, 62400],"float16"), axis=1, )
paddle.sum(Tensor([108, 62400],"float32"), axis=1, )
paddle.sum(Tensor([108, 67200],"float16"), axis=1, )
paddle.sum(Tensor([108, 67200],"float32"), axis=1, )
paddle.sum(Tensor([108, 70528],"float16"), axis=1, )
paddle.sum(Tensor([108, 70528],"float32"), axis=1, )
paddle.sum(Tensor([108, 73984],"float16"), axis=1, )
paddle.sum(Tensor([108, 73984],"float32"), axis=1, )
paddle.sum(Tensor([108, 82688],"float16"), axis=1, )
paddle.sum(Tensor([108, 82688],"float32"), axis=1, )
paddle.sum(Tensor([108, 85120],"float16"), axis=1, )
paddle.sum(Tensor([108, 85120],"float32"), axis=1, )
paddle.sum(Tensor([108, 87040],"float16"), axis=1, )
paddle.sum(Tensor([108, 87040],"float32"), axis=1, )
paddle.sum(Tensor([108, 89984],"float16"), axis=1, )
paddle.sum(Tensor([108, 89984],"float32"), axis=1, )
paddle.sum(Tensor([108, 91392],"float16"), axis=1, )
paddle.sum(Tensor([108, 91392],"float32"), axis=1, )
paddle.sum(Tensor([108, 91840],"float16"), axis=1, )
paddle.sum(Tensor([108, 91840],"float32"), axis=1, )
paddle.sum(Tensor([108, 92416],"float16"), axis=1, )
paddle.sum(Tensor([108, 92416],"float32"), axis=1, )
paddle.sum(Tensor([108, 94848],"float16"), axis=1, )
paddle.sum(Tensor([108, 94848],"float32"), axis=1, )
paddle.sum(Tensor([108],"float32"), )
paddle.sum(Tensor([109, 1],"float32"), )
paddle.sum(Tensor([10],"float16"), )
paddle.sum(Tensor([10],"float32"), )
paddle.sum(Tensor([11, 1],"float32"), )
paddle.sum(Tensor([110, 1],"float32"), )
paddle.sum(Tensor([11008, 768],"bool"), )
paddle.sum(Tensor([110484, 1],"float32"), )
paddle.sum(Tensor([110484],"float32"), )
paddle.sum(Tensor([1105, 1],"float32"), )
paddle.sum(Tensor([111, 1],"float32"), )
paddle.sum(Tensor([1112, 1],"float32"), )
paddle.sum(Tensor([1113, 1],"float32"), )
paddle.sum(Tensor([112, 102144],"float16"), axis=1, )
paddle.sum(Tensor([112, 102144],"float32"), axis=1, )
paddle.sum(Tensor([112, 1],"float32"), )
paddle.sum(Tensor([112, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([112, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([112, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([112, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([112, 208, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([112, 216, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([112, 26, 1],"float32"), )
paddle.sum(Tensor([112, 27, 1],"float32"), )
paddle.sum(Tensor([112, 272, 216],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([112, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([112, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([112, 272, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([112, 28, 1],"float32"), )
paddle.sum(Tensor([112, 280, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([112, 29, 1],"float32"), )
paddle.sum(Tensor([112, 30, 1],"float32"), )
paddle.sum(Tensor([112, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([112, 304, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([112, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([112, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([112, 31, 1],"float32"), )
paddle.sum(Tensor([112, 32, 1],"float32"), )
paddle.sum(Tensor([112, 33, 1],"float32"), )
paddle.sum(Tensor([112, 34, 1],"float32"), )
paddle.sum(Tensor([112, 35, 1],"float32"), )
paddle.sum(Tensor([112, 36, 1],"float32"), )
paddle.sum(Tensor([112, 37, 1],"float32"), )
paddle.sum(Tensor([112, 38, 1],"float32"), )
paddle.sum(Tensor([112, 39, 1],"float32"), )
paddle.sum(Tensor([112, 40, 1],"float32"), )
paddle.sum(Tensor([112, 41, 1],"float32"), )
paddle.sum(Tensor([112, 42, 1],"float32"), )
paddle.sum(Tensor([112, 43, 1],"float32"), )
paddle.sum(Tensor([112, 44, 1],"float32"), )
paddle.sum(Tensor([112, 45, 1],"float32"), )
paddle.sum(Tensor([112, 54400],"float16"), axis=1, )
paddle.sum(Tensor([112, 54400],"float32"), axis=1, )
paddle.sum(Tensor([112, 58752],"float16"), axis=1, )
paddle.sum(Tensor([112, 58752],"float32"), axis=1, )
paddle.sum(Tensor([112, 60800],"float16"), axis=1, )
paddle.sum(Tensor([112, 60800],"float32"), axis=1, )
paddle.sum(Tensor([112, 62400],"float16"), axis=1, )
paddle.sum(Tensor([112, 62400],"float32"), axis=1, )
paddle.sum(Tensor([112, 63232],"float16"), axis=1, )
paddle.sum(Tensor([112, 63232],"float32"), axis=1, )
paddle.sum(Tensor([112, 65664],"float16"), axis=1, )
paddle.sum(Tensor([112, 65664],"float32"), axis=1, )
paddle.sum(Tensor([112, 67200],"float16"), axis=1, )
paddle.sum(Tensor([112, 67200],"float32"), axis=1, )
paddle.sum(Tensor([112, 73984],"float16"), axis=1, )
paddle.sum(Tensor([112, 73984],"float32"), axis=1, )
paddle.sum(Tensor([112, 76160],"float16"), axis=1, )
paddle.sum(Tensor([112, 76160],"float32"), axis=1, )
paddle.sum(Tensor([112, 82688],"float16"), axis=1, )
paddle.sum(Tensor([112, 82688],"float32"), axis=1, )
paddle.sum(Tensor([112, 85120],"float16"), axis=1, )
paddle.sum(Tensor([112, 85120],"float32"), axis=1, )
paddle.sum(Tensor([112, 87040],"float16"), axis=1, )
paddle.sum(Tensor([112, 87040],"float32"), axis=1, )
paddle.sum(Tensor([112, 92416],"float16"), axis=1, )
paddle.sum(Tensor([112, 92416],"float32"), axis=1, )
paddle.sum(Tensor([1122, 1],"float32"), )
paddle.sum(Tensor([1124, 32],"float32"), )
paddle.sum(Tensor([112],"float32"), )
paddle.sum(Tensor([113, 1],"float32"), )
paddle.sum(Tensor([1130, 1],"float32"), )
paddle.sum(Tensor([1131, 1],"float32"), )
paddle.sum(Tensor([114, 1],"float32"), )
paddle.sum(Tensor([1144, 1],"float32"), )
paddle.sum(Tensor([1146, 1],"float32"), )
paddle.sum(Tensor([115, 1],"float32"), )
paddle.sum(Tensor([1156, 1],"float32"), )
paddle.sum(Tensor([1157, 1],"float32"), )
paddle.sum(Tensor([116, 102144],"float16"), axis=1, )
paddle.sum(Tensor([116, 102144],"float32"), axis=1, )
paddle.sum(Tensor([116, 1],"float32"), )
paddle.sum(Tensor([116, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([116, 200, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([116, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([116, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([116, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([116, 232, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([116, 240, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([116, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([116, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([116, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([116, 288, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([116, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([116, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([116, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([116, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([116, 312, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([116, 54400],"float16"), axis=1, )
paddle.sum(Tensor([116, 54400],"float32"), axis=1, )
paddle.sum(Tensor([116, 59200],"float16"), axis=1, )
paddle.sum(Tensor([116, 59200],"float32"), axis=1, )
paddle.sum(Tensor([116, 60800],"float16"), axis=1, )
paddle.sum(Tensor([116, 60800],"float32"), axis=1, )
paddle.sum(Tensor([116, 62400],"float16"), axis=1, )
paddle.sum(Tensor([116, 62400],"float32"), axis=1, )
paddle.sum(Tensor([116, 67200],"float16"), axis=1, )
paddle.sum(Tensor([116, 67200],"float32"), axis=1, )
paddle.sum(Tensor([116, 70528],"float16"), axis=1, )
paddle.sum(Tensor([116, 70528],"float32"), axis=1, )
paddle.sum(Tensor([116, 72960],"float16"), axis=1, )
paddle.sum(Tensor([116, 72960],"float32"), axis=1, )
paddle.sum(Tensor([116, 73984],"float16"), axis=1, )
paddle.sum(Tensor([116, 73984],"float32"), axis=1, )
paddle.sum(Tensor([116, 82688],"float16"), axis=1, )
paddle.sum(Tensor([116, 82688],"float32"), axis=1, )
paddle.sum(Tensor([116, 84864],"float16"), axis=1, )
paddle.sum(Tensor([116, 84864],"float32"), axis=1, )
paddle.sum(Tensor([116, 87552],"float16"), axis=1, )
paddle.sum(Tensor([116, 87552],"float32"), axis=1, )
paddle.sum(Tensor([116, 91392],"float16"), axis=1, )
paddle.sum(Tensor([116, 91392],"float32"), axis=1, )
paddle.sum(Tensor([116, 92416],"float16"), axis=1, )
paddle.sum(Tensor([116, 92416],"float32"), axis=1, )
paddle.sum(Tensor([116, 94848],"float16"), axis=1, )
paddle.sum(Tensor([116, 94848],"float32"), axis=1, )
paddle.sum(Tensor([116, 97280],"float16"), axis=1, )
paddle.sum(Tensor([116, 97280],"float32"), axis=1, )
paddle.sum(Tensor([11661, 3],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([116],"float32"), )
paddle.sum(Tensor([117, 1],"float32"), )
paddle.sum(Tensor([118, 1],"float32"), )
paddle.sum(Tensor([119, 1],"float32"), )
paddle.sum(Tensor([1190, 1],"float32"), )
paddle.sum(Tensor([1194, 1],"float32"), )
paddle.sum(Tensor([11],"float32"), )
paddle.sum(Tensor([12, 10, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 102144],"float16"), axis=1, )
paddle.sum(Tensor([12, 102144],"float32"), axis=1, )
paddle.sum(Tensor([12, 102],"float32"), axis=-1, )
paddle.sum(Tensor([12, 112896],"float16"), axis=1, )
paddle.sum(Tensor([12, 112896],"float32"), axis=1, )
paddle.sum(Tensor([12, 13, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 18, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 1],"float32"), )
paddle.sum(Tensor([12, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([12, 208, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([12, 23, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 24, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 25, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 26, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([12, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([12, 272, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([12, 28, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 280, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([12, 29, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([12, 30, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([12, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([12, 304, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([12, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([12, 31, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 32, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 33, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 336, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([12, 34, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 35, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 36, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 40, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 41, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 42, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 43, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 44, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 45, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 46, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 47, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 48, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 49, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 5, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 50, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 52, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 56576],"float16"), axis=1, )
paddle.sum(Tensor([12, 56576],"float32"), axis=1, )
paddle.sum(Tensor([12, 5],"int64"), )
paddle.sum(Tensor([12, 6, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 60800],"float16"), axis=1, )
paddle.sum(Tensor([12, 60800],"float32"), axis=1, )
paddle.sum(Tensor([12, 7, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 73984],"float16"), axis=1, )
paddle.sum(Tensor([12, 73984],"float32"), axis=1, )
paddle.sum(Tensor([12, 76160],"float16"), axis=1, )
paddle.sum(Tensor([12, 76160],"float32"), axis=1, )
paddle.sum(Tensor([12, 8, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 82688],"float16"), axis=1, )
paddle.sum(Tensor([12, 82688],"float32"), axis=1, )
paddle.sum(Tensor([12, 87040],"float16"), axis=1, )
paddle.sum(Tensor([12, 87040],"float32"), axis=1, )
paddle.sum(Tensor([12, 89984],"float16"), axis=1, )
paddle.sum(Tensor([12, 89984],"float32"), axis=1, )
paddle.sum(Tensor([12, 92416],"float16"), axis=1, )
paddle.sum(Tensor([12, 92416],"float32"), axis=1, )
paddle.sum(Tensor([12, 99712],"float16"), axis=1, )
paddle.sum(Tensor([12, 99712],"float32"), axis=1, )
paddle.sum(Tensor([120, 102144],"float16"), axis=1, )
paddle.sum(Tensor([120, 102144],"float32"), axis=1, )
paddle.sum(Tensor([120, 104832],"float16"), axis=1, )
paddle.sum(Tensor([120, 104832],"float32"), axis=1, )
paddle.sum(Tensor([120, 107520],"float16"), axis=1, )
paddle.sum(Tensor([120, 107520],"float32"), axis=1, )
paddle.sum(Tensor([120, 1],"float32"), )
paddle.sum(Tensor([120, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 200, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 216, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 24, 1],"float32"), )
paddle.sum(Tensor([120, 248, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 25, 1],"float32"), )
paddle.sum(Tensor([120, 256, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 256, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 26, 1],"float32"), )
paddle.sum(Tensor([120, 264, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 27, 1],"float32"), )
paddle.sum(Tensor([120, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 28, 1],"float32"), )
paddle.sum(Tensor([120, 29, 1],"float32"), )
paddle.sum(Tensor([120, 30, 1],"float32"), )
paddle.sum(Tensor([120, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 31, 1],"float32"), )
paddle.sum(Tensor([120, 312, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 312, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 32, 1],"float32"), )
paddle.sum(Tensor([120, 33, 1],"float32"), )
paddle.sum(Tensor([120, 336, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([120, 34, 1],"float32"), )
paddle.sum(Tensor([120, 35, 1],"float32"), )
paddle.sum(Tensor([120, 36, 1],"float32"), )
paddle.sum(Tensor([120, 37, 1],"float32"), )
paddle.sum(Tensor([120, 38, 1],"float32"), )
paddle.sum(Tensor([120, 39, 1],"float32"), )
paddle.sum(Tensor([120, 40, 1],"float32"), )
paddle.sum(Tensor([120, 41, 1],"float32"), )
paddle.sum(Tensor([120, 42, 1],"float32"), )
paddle.sum(Tensor([120, 54400],"float16"), axis=1, )
paddle.sum(Tensor([120, 54400],"float32"), axis=1, )
paddle.sum(Tensor([120, 57600],"float16"), axis=1, )
paddle.sum(Tensor([120, 57600],"float32"), axis=1, )
paddle.sum(Tensor([120, 60800],"float16"), axis=1, )
paddle.sum(Tensor([120, 60800],"float32"), axis=1, )
paddle.sum(Tensor([120, 62400],"float16"), axis=1, )
paddle.sum(Tensor([120, 62400],"float32"), axis=1, )
paddle.sum(Tensor([120, 64000],"float16"), axis=1, )
paddle.sum(Tensor([120, 64000],"float32"), axis=1, )
paddle.sum(Tensor([120, 67200],"float16"), axis=1, )
paddle.sum(Tensor([120, 67200],"float32"), axis=1, )
paddle.sum(Tensor([120, 67392],"float16"), axis=1, )
paddle.sum(Tensor([120, 67392],"float32"), axis=1, )
paddle.sum(Tensor([120, 67456],"float16"), axis=1, )
paddle.sum(Tensor([120, 67456],"float32"), axis=1, )
paddle.sum(Tensor([120, 73984],"float16"), axis=1, )
paddle.sum(Tensor([120, 73984],"float32"), axis=1, )
paddle.sum(Tensor([120, 77824],"float16"), axis=1, )
paddle.sum(Tensor([120, 77824],"float32"), axis=1, )
paddle.sum(Tensor([120, 82688],"float16"), axis=1, )
paddle.sum(Tensor([120, 82688],"float32"), axis=1, )
paddle.sum(Tensor([120, 84864],"float16"), axis=1, )
paddle.sum(Tensor([120, 84864],"float32"), axis=1, )
paddle.sum(Tensor([120, 86016],"float16"), axis=1, )
paddle.sum(Tensor([120, 86016],"float32"), axis=1, )
paddle.sum(Tensor([120, 88704],"float16"), axis=1, )
paddle.sum(Tensor([120, 88704],"float32"), axis=1, )
paddle.sum(Tensor([120, 91392],"float16"), axis=1, )
paddle.sum(Tensor([120, 91392],"float32"), axis=1, )
paddle.sum(Tensor([120, 92416],"float16"), axis=1, )
paddle.sum(Tensor([120, 92416],"float32"), axis=1, )
paddle.sum(Tensor([120, 94848],"float16"), axis=1, )
paddle.sum(Tensor([120, 94848],"float32"), axis=1, )
paddle.sum(Tensor([120, 97280],"float16"), axis=1, )
paddle.sum(Tensor([120, 97280],"float32"), axis=1, )
paddle.sum(Tensor([120],"float32"), )
paddle.sum(Tensor([121, 1],"float32"), )
paddle.sum(Tensor([1211, 1],"float32"), )
paddle.sum(Tensor([122, 1],"float32"), )
paddle.sum(Tensor([122760, 1],"float32"), )
paddle.sum(Tensor([122760],"float32"), )
paddle.sum(Tensor([12288],"float16"), )
paddle.sum(Tensor([123, 1],"float32"), )
paddle.sum(Tensor([123, 1],"int32"), )
paddle.sum(Tensor([124, 102144],"float16"), axis=1, )
paddle.sum(Tensor([124, 102144],"float32"), axis=1, )
paddle.sum(Tensor([124, 102],"float32"), axis=-1, )
paddle.sum(Tensor([124, 1],"float32"), )
paddle.sum(Tensor([124, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([124, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([124, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([124, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([124, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([124, 256, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([124, 256, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([124, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([124, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([124, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([124, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([124, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([124, 304, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([124, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([124, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([124, 54400],"float16"), axis=1, )
paddle.sum(Tensor([124, 54400],"float32"), axis=1, )
paddle.sum(Tensor([124, 60800],"float16"), axis=1, )
paddle.sum(Tensor([124, 60800],"float32"), axis=1, )
paddle.sum(Tensor([124, 62400],"float16"), axis=1, )
paddle.sum(Tensor([124, 62400],"float32"), axis=1, )
paddle.sum(Tensor([124, 64000],"float16"), axis=1, )
paddle.sum(Tensor([124, 64000],"float32"), axis=1, )
paddle.sum(Tensor([124, 67200],"float16"), axis=1, )
paddle.sum(Tensor([124, 67200],"float32"), axis=1, )
paddle.sum(Tensor([124, 73984],"float16"), axis=1, )
paddle.sum(Tensor([124, 73984],"float32"), axis=1, )
paddle.sum(Tensor([124, 77824],"float16"), axis=1, )
paddle.sum(Tensor([124, 77824],"float32"), axis=1, )
paddle.sum(Tensor([124, 82688],"float16"), axis=1, )
paddle.sum(Tensor([124, 82688],"float32"), axis=1, )
paddle.sum(Tensor([124, 84864],"float16"), axis=1, )
paddle.sum(Tensor([124, 84864],"float32"), axis=1, )
paddle.sum(Tensor([124, 86016],"float16"), axis=1, )
paddle.sum(Tensor([124, 86016],"float32"), axis=1, )
paddle.sum(Tensor([124, 89984],"float16"), axis=1, )
paddle.sum(Tensor([124, 89984],"float32"), axis=1, )
paddle.sum(Tensor([124, 91392],"float16"), axis=1, )
paddle.sum(Tensor([124, 91392],"float32"), axis=1, )
paddle.sum(Tensor([124, 92416],"float16"), axis=1, )
paddle.sum(Tensor([124, 92416],"float32"), axis=1, )
paddle.sum(Tensor([124],"float32"), )
paddle.sum(Tensor([125, 1],"float32"), )
paddle.sum(Tensor([12582912],"float16"), )
paddle.sum(Tensor([126, 1],"float32"), )
paddle.sum(Tensor([1262, 1],"float32"), )
paddle.sum(Tensor([127, 1],"float32"), )
paddle.sum(Tensor([1273, 1],"float32"), )
paddle.sum(Tensor([128, 1000],"float16"), axis=-1, )
paddle.sum(Tensor([128, 1000],"float32"), axis=-1, )
paddle.sum(Tensor([128, 102144],"float16"), axis=1, )
paddle.sum(Tensor([128, 102144],"float32"), axis=1, )
paddle.sum(Tensor([128, 102],"float32"), axis=-1, )
paddle.sum(Tensor([128, 104832],"float16"), axis=1, )
paddle.sum(Tensor([128, 104832],"float32"), axis=1, )
paddle.sum(Tensor([128, 128],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([128, 159],"float32"), axis=-1, )
paddle.sum(Tensor([128, 192612],"float16"), axis=-1, )
paddle.sum(Tensor([128, 192612],"float32"), axis=-1, )
paddle.sum(Tensor([128, 1],"float32"), )
paddle.sum(Tensor([128, 200, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([128, 200, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([128, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([128, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([128, 23, 1],"float32"), )
paddle.sum(Tensor([128, 24, 1],"float32"), )
paddle.sum(Tensor([128, 25, 1],"float32"), )
paddle.sum(Tensor([128, 26, 1],"float32"), )
paddle.sum(Tensor([128, 264, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([128, 27, 1],"float32"), )
paddle.sum(Tensor([128, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([128, 272, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([128, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([128, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([128, 28, 1],"float32"), )
paddle.sum(Tensor([128, 280, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([128, 29, 1],"float32"), )
paddle.sum(Tensor([128, 2],"float32"), axis=-1, )
paddle.sum(Tensor([128, 30, 1],"float32"), )
paddle.sum(Tensor([128, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([128, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([128, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([128, 31, 1],"float32"), )
paddle.sum(Tensor([128, 312, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([128, 32, 1],"float32"), )
paddle.sum(Tensor([128, 32, 32],"float32"), axis=0, )
paddle.sum(Tensor([128, 33, 1],"float32"), )
paddle.sum(Tensor([128, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([128, 336, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([128, 34, 1],"float32"), )
paddle.sum(Tensor([128, 35, 1],"float32"), )
paddle.sum(Tensor([128, 36, 1],"float32"), )
paddle.sum(Tensor([128, 37, 1],"float32"), )
paddle.sum(Tensor([128, 38, 1],"float32"), )
paddle.sum(Tensor([128, 39, 1],"float32"), )
paddle.sum(Tensor([128, 40, 1],"float32"), )
paddle.sum(Tensor([128, 57600],"float16"), axis=1, )
paddle.sum(Tensor([128, 57600],"float32"), axis=1, )
paddle.sum(Tensor([128, 59200],"float16"), axis=1, )
paddle.sum(Tensor([128, 59200],"float32"), axis=1, )
paddle.sum(Tensor([128, 60800],"float16"), axis=1, )
paddle.sum(Tensor([128, 60800],"float32"), axis=1, )
paddle.sum(Tensor([128, 67200],"float16"), axis=1, )
paddle.sum(Tensor([128, 67200],"float32"), axis=1, )
paddle.sum(Tensor([128, 73984],"float16"), axis=1, )
paddle.sum(Tensor([128, 73984],"float32"), axis=1, )
paddle.sum(Tensor([128, 76160],"float16"), axis=1, )
paddle.sum(Tensor([128, 76160],"float32"), axis=1, )
paddle.sum(Tensor([128, 80256],"float16"), axis=1, )
paddle.sum(Tensor([128, 80256],"float32"), axis=1, )
paddle.sum(Tensor([128, 82688],"float16"), axis=1, )
paddle.sum(Tensor([128, 82688],"float32"), axis=1, )
paddle.sum(Tensor([128, 91392],"float16"), axis=1, )
paddle.sum(Tensor([128, 91392],"float32"), axis=1, )
paddle.sum(Tensor([128, 92416],"float16"), axis=1, )
paddle.sum(Tensor([128, 92416],"float32"), axis=1, )
paddle.sum(Tensor([128, 93431],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([128, 94080],"float16"), axis=1, )
paddle.sum(Tensor([128, 94080],"float32"), axis=1, )
paddle.sum(Tensor([128512, 1],"float32"), name=None, )
paddle.sum(Tensor([128],"float32"), )
paddle.sum(Tensor([129, 1],"float32"), )
paddle.sum(Tensor([1297, 1],"float32"), )
paddle.sum(Tensor([1298, 1],"float32"), )
paddle.sum(Tensor([12988, 32, 3],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([12],"float16"), axis=0, keepdim=True, )
paddle.sum(Tensor([12],"float32"), )
paddle.sum(Tensor([12],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([12],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([13, 13],"float32"), )
paddle.sum(Tensor([13, 1],"float32"), )
paddle.sum(Tensor([13, 2, 4, 16, 16],"float32"), axis=2, )
paddle.sum(Tensor([13, 2, 7, 32],"float32"), axis=-2, )
paddle.sum(Tensor([13, 3, 3],"float32"), 2, )
paddle.sum(Tensor([13, 3],"float32"), 1, )
paddle.sum(Tensor([13, 4, 2, 2],"float32"), axis=-2, )
paddle.sum(Tensor([13, 6],"float32"), 1, )
paddle.sum(Tensor([13, 7, 1],"float32"), )
paddle.sum(Tensor([13, 7],"bool"), axis=-1, )
paddle.sum(Tensor([13, 7],"float32"), 1, )
paddle.sum(Tensor([13, 7],"int32"), axis=1, dtype="int64", )
paddle.sum(Tensor([13, 7],"int64"), axis=1, )
paddle.sum(Tensor([13, 96, 1],"float32"), tuple(1,), keepdim=True, name=None, )
paddle.sum(Tensor([130, 1],"float32"), )
paddle.sum(Tensor([1309, 1],"float32"), )
paddle.sum(Tensor([131, 1],"float32"), )
paddle.sum(Tensor([1312, 1],"float32"), )
paddle.sum(Tensor([132, 102144],"float16"), axis=1, )
paddle.sum(Tensor([132, 102144],"float32"), axis=1, )
paddle.sum(Tensor([132, 1],"float32"), )
paddle.sum(Tensor([132, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([132, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([132, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([132, 256, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([132, 264, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([132, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([132, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([132, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([132, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([132, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([132, 304, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([132, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([132, 312, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([132, 54400],"float16"), axis=1, )
paddle.sum(Tensor([132, 54400],"float32"), axis=1, )
paddle.sum(Tensor([132, 60800],"float16"), axis=1, )
paddle.sum(Tensor([132, 60800],"float32"), axis=1, )
paddle.sum(Tensor([132, 67200],"float16"), axis=1, )
paddle.sum(Tensor([132, 67200],"float32"), axis=1, )
paddle.sum(Tensor([132, 69632],"float16"), axis=1, )
paddle.sum(Tensor([132, 69632],"float32"), axis=1, )
paddle.sum(Tensor([132, 73984],"float16"), axis=1, )
paddle.sum(Tensor([132, 73984],"float32"), axis=1, )
paddle.sum(Tensor([132, 76032],"float16"), axis=1, )
paddle.sum(Tensor([132, 76032],"float32"), axis=1, )
paddle.sum(Tensor([132, 82688],"float16"), axis=1, )
paddle.sum(Tensor([132, 82688],"float32"), axis=1, )
paddle.sum(Tensor([132, 84864],"float16"), axis=1, )
paddle.sum(Tensor([132, 84864],"float32"), axis=1, )
paddle.sum(Tensor([132, 91392],"float16"), axis=1, )
paddle.sum(Tensor([132, 91392],"float32"), axis=1, )
paddle.sum(Tensor([132, 92416],"float16"), axis=1, )
paddle.sum(Tensor([132, 92416],"float32"), axis=1, )
paddle.sum(Tensor([132, 99712],"float16"), axis=1, )
paddle.sum(Tensor([132, 99712],"float32"), axis=1, )
paddle.sum(Tensor([1321, 1],"float32"), )
paddle.sum(Tensor([132],"float32"), )
paddle.sum(Tensor([133, 1],"float32"), )
paddle.sum(Tensor([1339, 1],"float32"), )
paddle.sum(Tensor([134, 1],"float32"), )
paddle.sum(Tensor([1349, 1],"float32"), )
paddle.sum(Tensor([135, 1],"float32"), )
paddle.sum(Tensor([135036, 1],"float32"), )
paddle.sum(Tensor([135036],"float32"), )
paddle.sum(Tensor([1359, 1],"float32"), )
paddle.sum(Tensor([136, 102144],"float16"), axis=1, )
paddle.sum(Tensor([136, 102144],"float32"), axis=1, )
paddle.sum(Tensor([136, 112896],"float16"), axis=1, )
paddle.sum(Tensor([136, 112896],"float32"), axis=1, )
paddle.sum(Tensor([136, 1],"float32"), )
paddle.sum(Tensor([136, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([136, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([136, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([136, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([136, 21, 1],"float32"), )
paddle.sum(Tensor([136, 22, 1],"float32"), )
paddle.sum(Tensor([136, 23, 1],"float32"), )
paddle.sum(Tensor([136, 24, 1],"float32"), )
paddle.sum(Tensor([136, 248, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([136, 25, 1],"float32"), )
paddle.sum(Tensor([136, 256, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([136, 26, 1],"float32"), )
paddle.sum(Tensor([136, 264, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([136, 27, 1],"float32"), )
paddle.sum(Tensor([136, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([136, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([136, 28, 1],"float32"), )
paddle.sum(Tensor([136, 29, 1],"float32"), )
paddle.sum(Tensor([136, 30, 1],"float32"), )
paddle.sum(Tensor([136, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([136, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([136, 31, 1],"float32"), )
paddle.sum(Tensor([136, 32, 1],"float32"), )
paddle.sum(Tensor([136, 328, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([136, 33, 1],"float32"), )
paddle.sum(Tensor([136, 336, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([136, 34, 1],"float32"), )
paddle.sum(Tensor([136, 35, 1],"float32"), )
paddle.sum(Tensor([136, 36, 1],"float32"), )
paddle.sum(Tensor([136, 37, 1],"float32"), )
paddle.sum(Tensor([136, 54400],"float16"), axis=1, )
paddle.sum(Tensor([136, 54400],"float32"), axis=1, )
paddle.sum(Tensor([136, 60800],"float16"), axis=1, )
paddle.sum(Tensor([136, 60800],"float32"), axis=1, )
paddle.sum(Tensor([136, 62400],"float16"), axis=1, )
paddle.sum(Tensor([136, 62400],"float32"), axis=1, )
paddle.sum(Tensor([136, 65600],"float16"), axis=1, )
paddle.sum(Tensor([136, 65600],"float32"), axis=1, )
paddle.sum(Tensor([136, 67200],"float16"), axis=1, )
paddle.sum(Tensor([136, 67200],"float32"), axis=1, )
paddle.sum(Tensor([136, 73984],"float16"), axis=1, )
paddle.sum(Tensor([136, 73984],"float32"), axis=1, )
paddle.sum(Tensor([136, 75392],"float16"), axis=1, )
paddle.sum(Tensor([136, 75392],"float32"), axis=1, )
paddle.sum(Tensor([136, 77824],"float16"), axis=1, )
paddle.sum(Tensor([136, 77824],"float32"), axis=1, )
paddle.sum(Tensor([136, 80256],"float16"), axis=1, )
paddle.sum(Tensor([136, 80256],"float32"), axis=1, )
paddle.sum(Tensor([136, 82688],"float16"), axis=1, )
paddle.sum(Tensor([136, 82688],"float32"), axis=1, )
paddle.sum(Tensor([136, 92416],"float16"), axis=1, )
paddle.sum(Tensor([136, 92416],"float32"), axis=1, )
paddle.sum(Tensor([136],"float32"), )
paddle.sum(Tensor([137, 1],"float32"), )
paddle.sum(Tensor([138, 1],"float32"), )
paddle.sum(Tensor([1382, 1],"float32"), )
paddle.sum(Tensor([139, 1],"float32"), )
paddle.sum(Tensor([1393, 1],"float32"), )
paddle.sum(Tensor([14, 1],"float32"), )
paddle.sum(Tensor([140, 1],"float32"), )
paddle.sum(Tensor([140, 200, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([140, 200, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([140, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([140, 208, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([140, 248, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([140, 264, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([140, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([140, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([140, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([140, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([140, 56000],"float16"), axis=1, )
paddle.sum(Tensor([140, 56000],"float32"), axis=1, )
paddle.sum(Tensor([140, 57600],"float16"), axis=1, )
paddle.sum(Tensor([140, 57600],"float32"), axis=1, )
paddle.sum(Tensor([140, 60800],"float16"), axis=1, )
paddle.sum(Tensor([140, 60800],"float32"), axis=1, )
paddle.sum(Tensor([140, 68224],"float16"), axis=1, )
paddle.sum(Tensor([140, 68224],"float32"), axis=1, )
paddle.sum(Tensor([140, 76032],"float16"), axis=1, )
paddle.sum(Tensor([140, 76032],"float32"), axis=1, )
paddle.sum(Tensor([140, 82688],"float16"), axis=1, )
paddle.sum(Tensor([140, 82688],"float32"), axis=1, )
paddle.sum(Tensor([140, 83328],"float16"), axis=1, )
paddle.sum(Tensor([140, 83328],"float32"), axis=1, )
paddle.sum(Tensor([140, 91392],"float16"), axis=1, )
paddle.sum(Tensor([140, 91392],"float32"), axis=1, )
paddle.sum(Tensor([140, 92416],"float16"), axis=1, )
paddle.sum(Tensor([140, 92416],"float32"), axis=1, )
paddle.sum(Tensor([1401, 1],"float32"), )
paddle.sum(Tensor([1404, 1],"float32"), )
paddle.sum(Tensor([1405, 1],"float32"), )
paddle.sum(Tensor([1407, 1],"float32"), )
paddle.sum(Tensor([140],"float32"), )
paddle.sum(Tensor([141, 1],"float32"), )
paddle.sum(Tensor([1410, 1],"float32"), )
paddle.sum(Tensor([1417, 1],"float32"), )
paddle.sum(Tensor([142, 1],"float32"), )
paddle.sum(Tensor([1422, 1],"float32"), )
paddle.sum(Tensor([1429, 1],"float32"), )
paddle.sum(Tensor([143, 1],"float32"), )
paddle.sum(Tensor([1431, 1],"float32"), )
paddle.sum(Tensor([144, 1000],"float32"), axis=-1, )
paddle.sum(Tensor([144, 102144],"float16"), axis=1, )
paddle.sum(Tensor([144, 102144],"float32"), axis=1, )
paddle.sum(Tensor([144, 112896],"float16"), axis=1, )
paddle.sum(Tensor([144, 112896],"float32"), axis=1, )
paddle.sum(Tensor([144, 1],"float32"), )
paddle.sum(Tensor([144, 1],"int32"), )
paddle.sum(Tensor([144, 20, 1],"float32"), )
paddle.sum(Tensor([144, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([144, 200, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([144, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([144, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([144, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([144, 21, 1],"float32"), )
paddle.sum(Tensor([144, 22, 1],"float32"), )
paddle.sum(Tensor([144, 23, 1],"float32"), )
paddle.sum(Tensor([144, 24, 1],"float32"), )
paddle.sum(Tensor([144, 25, 1],"float32"), )
paddle.sum(Tensor([144, 26, 1],"float32"), )
paddle.sum(Tensor([144, 264, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([144, 27, 1],"float32"), )
paddle.sum(Tensor([144, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([144, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([144, 272, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([144, 28, 1],"float32"), )
paddle.sum(Tensor([144, 29, 1],"float32"), )
paddle.sum(Tensor([144, 30, 1],"float32"), )
paddle.sum(Tensor([144, 304, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([144, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([144, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([144, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([144, 31, 1],"float32"), )
paddle.sum(Tensor([144, 32, 1],"float32"), )
paddle.sum(Tensor([144, 33, 1],"float32"), )
paddle.sum(Tensor([144, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([144, 336, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([144, 34, 1],"float32"), )
paddle.sum(Tensor([144, 35, 1],"float32"), )
paddle.sum(Tensor([144, 54400],"float16"), axis=1, )
paddle.sum(Tensor([144, 54400],"float32"), axis=1, )
paddle.sum(Tensor([144, 57600],"float16"), axis=1, )
paddle.sum(Tensor([144, 57600],"float32"), axis=1, )
paddle.sum(Tensor([144, 60800],"float16"), axis=1, )
paddle.sum(Tensor([144, 60800],"float32"), axis=1, )
paddle.sum(Tensor([144, 64000],"float16"), axis=1, )
paddle.sum(Tensor([144, 64000],"float32"), axis=1, )
paddle.sum(Tensor([144, 67200],"float16"), axis=1, )
paddle.sum(Tensor([144, 67200],"float32"), axis=1, )
paddle.sum(Tensor([144, 73984],"float16"), axis=1, )
paddle.sum(Tensor([144, 73984],"float32"), axis=1, )
paddle.sum(Tensor([144, 82688],"float16"), axis=1, )
paddle.sum(Tensor([144, 82688],"float32"), axis=1, )
paddle.sum(Tensor([144, 88704],"float16"), axis=1, )
paddle.sum(Tensor([144, 88704],"float32"), axis=1, )
paddle.sum(Tensor([144, 89216],"float16"), axis=1, )
paddle.sum(Tensor([144, 89216],"float32"), axis=1, )
paddle.sum(Tensor([144, 91392],"float16"), axis=1, )
paddle.sum(Tensor([144, 91392],"float32"), axis=1, )
paddle.sum(Tensor([144, 92416],"float16"), axis=1, )
paddle.sum(Tensor([144, 92416],"float32"), axis=1, )
paddle.sum(Tensor([1443, 1],"float32"), )
paddle.sum(Tensor([1444, 1024],"float32"), 1, keepdim=False, name=None, )
paddle.sum(Tensor([1448, 1],"float32"), )
paddle.sum(Tensor([144],"float32"), )
paddle.sum(Tensor([145, 1],"float32"), )
paddle.sum(Tensor([1450, 1],"float32"), )
paddle.sum(Tensor([1454, 1],"float32"), )
paddle.sum(Tensor([1455, 1],"float32"), )
paddle.sum(Tensor([146, 1],"float32"), )
paddle.sum(Tensor([147, 1],"float32"), )
paddle.sum(Tensor([1471, 1],"float32"), )
paddle.sum(Tensor([1472, 1],"float32"), )
paddle.sum(Tensor([148, 102144],"float16"), axis=1, )
paddle.sum(Tensor([148, 102144],"float32"), axis=1, )
paddle.sum(Tensor([148, 1],"float32"), )
paddle.sum(Tensor([148, 200, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([148, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([148, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([148, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([148, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([148, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([148, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([148, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([148, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([148, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([148, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([148, 59200],"float16"), axis=1, )
paddle.sum(Tensor([148, 59200],"float32"), axis=1, )
paddle.sum(Tensor([148, 60800],"float16"), axis=1, )
paddle.sum(Tensor([148, 60800],"float32"), axis=1, )
paddle.sum(Tensor([148, 67200],"float16"), axis=1, )
paddle.sum(Tensor([148, 67200],"float32"), axis=1, )
paddle.sum(Tensor([148, 73984],"float16"), axis=1, )
paddle.sum(Tensor([148, 73984],"float32"), axis=1, )
paddle.sum(Tensor([148, 82688],"float16"), axis=1, )
paddle.sum(Tensor([148, 82688],"float32"), axis=1, )
paddle.sum(Tensor([148, 91392],"float16"), axis=1, )
paddle.sum(Tensor([148, 91392],"float32"), axis=1, )
paddle.sum(Tensor([148, 92416],"float16"), axis=1, )
paddle.sum(Tensor([148, 92416],"float32"), axis=1, )
paddle.sum(Tensor([148, 94848],"float16"), axis=1, )
paddle.sum(Tensor([148, 94848],"float32"), axis=1, )
paddle.sum(Tensor([1481, 1],"float32"), )
paddle.sum(Tensor([1482, 1],"float32"), )
paddle.sum(Tensor([1486, 1],"float32"), )
paddle.sum(Tensor([1487, 1],"float32"), )
paddle.sum(Tensor([148],"float32"), )
paddle.sum(Tensor([149, 1],"float32"), )
paddle.sum(Tensor([1491, 1],"float32"), )
paddle.sum(Tensor([1499, 1],"float32"), )
paddle.sum(Tensor([15, 1],"float32"), )
paddle.sum(Tensor([15, 244, 1],"float32"), )
paddle.sum(Tensor([150, 1],"float32"), )
paddle.sum(Tensor([1500, 1],"float32"), )
paddle.sum(Tensor([1501],"float32"), axis=-1, )
paddle.sum(Tensor([1503, 1],"float32"), )
paddle.sum(Tensor([1505, 1],"float32"), )
paddle.sum(Tensor([1508, 1],"float32"), )
paddle.sum(Tensor([151, 1],"float32"), )
paddle.sum(Tensor([1515, 1],"float32"), )
paddle.sum(Tensor([152, 102144],"float16"), axis=1, )
paddle.sum(Tensor([152, 102144],"float32"), axis=1, )
paddle.sum(Tensor([152, 107520],"float16"), axis=1, )
paddle.sum(Tensor([152, 107520],"float32"), axis=1, )
paddle.sum(Tensor([152, 19, 1],"float32"), )
paddle.sum(Tensor([152, 1],"float32"), )
paddle.sum(Tensor([152, 20, 1],"float32"), )
paddle.sum(Tensor([152, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([152, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([152, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([152, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([152, 21, 1],"float32"), )
paddle.sum(Tensor([152, 22, 1],"float32"), )
paddle.sum(Tensor([152, 23, 1],"float32"), )
paddle.sum(Tensor([152, 24, 1],"float32"), )
paddle.sum(Tensor([152, 248, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([152, 25, 1],"float32"), )
paddle.sum(Tensor([152, 256, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([152, 26, 1],"float32"), )
paddle.sum(Tensor([152, 27, 1],"float32"), )
paddle.sum(Tensor([152, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([152, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([152, 28, 1],"float32"), )
paddle.sum(Tensor([152, 29, 1],"float32"), )
paddle.sum(Tensor([152, 30, 1],"float32"), )
paddle.sum(Tensor([152, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([152, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([152, 31, 1],"float32"), )
paddle.sum(Tensor([152, 32, 1],"float32"), )
paddle.sum(Tensor([152, 33, 1],"float32"), )
paddle.sum(Tensor([152, 336, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([152, 54400],"float16"), axis=1, )
paddle.sum(Tensor([152, 54400],"float32"), axis=1, )
paddle.sum(Tensor([152, 60800],"float16"), axis=1, )
paddle.sum(Tensor([152, 60800],"float32"), axis=1, )
paddle.sum(Tensor([152, 62400],"float16"), axis=1, )
paddle.sum(Tensor([152, 62400],"float32"), axis=1, )
paddle.sum(Tensor([152, 67200],"float16"), axis=1, )
paddle.sum(Tensor([152, 67200],"float32"), axis=1, )
paddle.sum(Tensor([152, 75392],"float16"), axis=1, )
paddle.sum(Tensor([152, 75392],"float32"), axis=1, )
paddle.sum(Tensor([152, 77824],"float16"), axis=1, )
paddle.sum(Tensor([152, 77824],"float32"), axis=1, )
paddle.sum(Tensor([152, 82688],"float16"), axis=1, )
paddle.sum(Tensor([152, 82688],"float32"), axis=1, )
paddle.sum(Tensor([152, 91392],"float16"), axis=1, )
paddle.sum(Tensor([152, 91392],"float32"), axis=1, )
paddle.sum(Tensor([152, 92416],"float16"), axis=1, )
paddle.sum(Tensor([152, 92416],"float32"), axis=1, )
paddle.sum(Tensor([1520, 1],"float32"), )
paddle.sum(Tensor([1524, 1],"float32"), )
paddle.sum(Tensor([1525, 1],"float32"), )
paddle.sum(Tensor([1526, 1],"float32"), )
paddle.sum(Tensor([1527, 1],"float32"), )
paddle.sum(Tensor([152],"float32"), )
paddle.sum(Tensor([153, 1],"float32"), )
paddle.sum(Tensor([1530, 1],"float32"), )
paddle.sum(Tensor([1537, 1],"float32"), )
paddle.sum(Tensor([1539, 1],"float32"), )
paddle.sum(Tensor([154, 1000],"float16"), axis=-1, )
paddle.sum(Tensor([154, 1000],"float32"), axis=-1, )
paddle.sum(Tensor([154, 102],"float32"), axis=-1, )
paddle.sum(Tensor([154, 1],"float32"), )
paddle.sum(Tensor([1544, 1],"float32"), )
paddle.sum(Tensor([1548, 1],"float32"), )
paddle.sum(Tensor([155, 1],"float32"), )
paddle.sum(Tensor([1550, 1],"float32"), )
paddle.sum(Tensor([1552, 1],"float32"), )
paddle.sum(Tensor([1553, 1],"float32"), )
paddle.sum(Tensor([15548, 3],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([1555, 1],"float32"), )
paddle.sum(Tensor([1556, 1],"float32"), )
paddle.sum(Tensor([1556],"float32"), )
paddle.sum(Tensor([1559, 1],"float32"), )
paddle.sum(Tensor([156, 102144],"float16"), axis=1, )
paddle.sum(Tensor([156, 102144],"float32"), axis=1, )
paddle.sum(Tensor([156, 1],"float32"), )
paddle.sum(Tensor([156, 200, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([156, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([156, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([156, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([156, 208, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([156, 232, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([156, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([156, 272, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([156, 304, 264],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([156, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([156, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([156, 56000],"float16"), axis=1, )
paddle.sum(Tensor([156, 56000],"float32"), axis=1, )
paddle.sum(Tensor([156, 60800],"float16"), axis=1, )
paddle.sum(Tensor([156, 60800],"float32"), axis=1, )
paddle.sum(Tensor([156, 62400],"float16"), axis=1, )
paddle.sum(Tensor([156, 62400],"float32"), axis=1, )
paddle.sum(Tensor([156, 67200],"float16"), axis=1, )
paddle.sum(Tensor([156, 67200],"float32"), axis=1, )
paddle.sum(Tensor([156, 68224],"float16"), axis=1, )
paddle.sum(Tensor([156, 68224],"float32"), axis=1, )
paddle.sum(Tensor([156, 74240],"float16"), axis=1, )
paddle.sum(Tensor([156, 74240],"float32"), axis=1, )
paddle.sum(Tensor([156, 80256],"float16"), axis=1, )
paddle.sum(Tensor([156, 80256],"float32"), axis=1, )
paddle.sum(Tensor([156, 82688],"float16"), axis=1, )
paddle.sum(Tensor([156, 82688],"float32"), axis=1, )
paddle.sum(Tensor([156, 89216],"float16"), axis=1, )
paddle.sum(Tensor([156, 89216],"float32"), axis=1, )
paddle.sum(Tensor([156, 92416],"float16"), axis=1, )
paddle.sum(Tensor([156, 92416],"float32"), axis=1, )
paddle.sum(Tensor([1561, 1],"float32"), )
paddle.sum(Tensor([1562, 1],"float32"), )
paddle.sum(Tensor([1563, 1],"float32"), )
paddle.sum(Tensor([1567, 1],"float32"), )
paddle.sum(Tensor([1568, 1],"float32"), )
paddle.sum(Tensor([1569, 1],"float32"), )
paddle.sum(Tensor([156],"float32"), )
paddle.sum(Tensor([157, 1],"float32"), )
paddle.sum(Tensor([1574, 1],"float32"), )
paddle.sum(Tensor([158, 1],"float32"), )
paddle.sum(Tensor([1580, 1],"float32"), )
paddle.sum(Tensor([1584, 1],"float32"), )
paddle.sum(Tensor([1585, 1],"float32"), )
paddle.sum(Tensor([159, 1],"float32"), )
paddle.sum(Tensor([1590, 1],"float32"), )
paddle.sum(Tensor([1596, 1],"float32"), )
paddle.sum(Tensor([1597, 1],"float32"), )
paddle.sum(Tensor([1598, 1],"float32"), )
paddle.sum(Tensor([15],"float32"), )
paddle.sum(Tensor([15],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([16, 10, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 1000],"float16"), axis=-1, )
paddle.sum(Tensor([16, 1000],"float32"), axis=-1, )
paddle.sum(Tensor([16, 102144],"float16"), axis=1, )
paddle.sum(Tensor([16, 102144],"float32"), axis=1, )
paddle.sum(Tensor([16, 102400],"float16"), axis=1, )
paddle.sum(Tensor([16, 102400],"float32"), axis=1, )
paddle.sum(Tensor([16, 1024],"float32"), )
paddle.sum(Tensor([16, 102],"float32"), axis=-1, )
paddle.sum(Tensor([16, 109, 1],"float32"), )
paddle.sum(Tensor([16, 11, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 112896],"float16"), axis=1, )
paddle.sum(Tensor([16, 112896],"float32"), axis=1, )
paddle.sum(Tensor([16, 12, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 13, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 14, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 149, 1],"float32"), )
paddle.sum(Tensor([16, 15, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 16, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 16, 3, 3],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([16, 17, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 171, 1],"float32"), )
paddle.sum(Tensor([16, 173, 1],"float32"), )
paddle.sum(Tensor([16, 174, 1],"float32"), )
paddle.sum(Tensor([16, 176, 1],"float32"), )
paddle.sum(Tensor([16, 178, 1],"float32"), )
paddle.sum(Tensor([16, 18, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 182, 1],"float32"), )
paddle.sum(Tensor([16, 19, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 1],"float32"), )
paddle.sum(Tensor([16, 1],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([16, 2, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 20, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 200, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 205, 1],"float32"), )
paddle.sum(Tensor([16, 208, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 21, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 217, 1],"float32"), )
paddle.sum(Tensor([16, 22, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 227, 1],"float32"), )
paddle.sum(Tensor([16, 23, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 232, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 24, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 25, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 256, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 256],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 256],"float64"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 26, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 264, 1],"float32"), )
paddle.sum(Tensor([16, 264, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 27, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 272, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 272, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 272, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 28, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 280, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 288, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 288, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 29, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 296, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 3, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 30, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 304, 264],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 304, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 304, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 31, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 32, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([16, 32, 128],"float32"), axis=0, )
paddle.sum(Tensor([16, 32, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 32, 64],"float32"), axis=0, )
paddle.sum(Tensor([16, 320, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 328, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 32],"float32"), )
paddle.sum(Tensor([16, 33, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 336, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([16, 34, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 35, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 36, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 37, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 38, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 39, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 40, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 42, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 43, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 45, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 48, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 49, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 4],"float32"), axis=-1, )
paddle.sum(Tensor([16, 5, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 5, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 50, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 512],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([16, 52, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 54, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 54400],"float16"), axis=1, )
paddle.sum(Tensor([16, 54400],"float32"), axis=1, )
paddle.sum(Tensor([16, 55, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 6, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 60800],"float16"), axis=1, )
paddle.sum(Tensor([16, 60800],"float32"), axis=1, )
paddle.sum(Tensor([16, 62400],"float16"), axis=1, )
paddle.sum(Tensor([16, 62400],"float32"), axis=1, )
paddle.sum(Tensor([16, 640, 640],"float32"), )
paddle.sum(Tensor([16, 64000],"float16"), axis=1, )
paddle.sum(Tensor([16, 64000],"float32"), axis=1, )
paddle.sum(Tensor([16, 65600],"float16"), axis=1, )
paddle.sum(Tensor([16, 65600],"float32"), axis=1, )
paddle.sum(Tensor([16, 67200],"float16"), axis=1, )
paddle.sum(Tensor([16, 67200],"float32"), axis=1, )
paddle.sum(Tensor([16, 69888],"float16"), axis=1, )
paddle.sum(Tensor([16, 69888],"float32"), axis=1, )
paddle.sum(Tensor([16, 7, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 70528],"float16"), axis=1, )
paddle.sum(Tensor([16, 70528],"float32"), axis=1, )
paddle.sum(Tensor([16, 73984],"float16"), axis=1, )
paddle.sum(Tensor([16, 73984],"float32"), axis=1, )
paddle.sum(Tensor([16, 76160],"float16"), axis=1, )
paddle.sum(Tensor([16, 76160],"float32"), axis=1, )
paddle.sum(Tensor([16, 77, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 77824],"float16"), axis=1, )
paddle.sum(Tensor([16, 77824],"float32"), axis=1, )
paddle.sum(Tensor([16, 8, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([16, 8, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 80256],"float16"), axis=1, )
paddle.sum(Tensor([16, 80256],"float32"), axis=1, )
paddle.sum(Tensor([16, 80512],"float16"), axis=1, )
paddle.sum(Tensor([16, 80512],"float32"), axis=1, )
paddle.sum(Tensor([16, 82688],"float16"), axis=1, )
paddle.sum(Tensor([16, 82688],"float32"), axis=1, )
paddle.sum(Tensor([16, 84864],"float16"), axis=1, )
paddle.sum(Tensor([16, 84864],"float32"), axis=1, )
paddle.sum(Tensor([16, 85120],"float16"), axis=1, )
paddle.sum(Tensor([16, 85120],"float32"), axis=1, )
paddle.sum(Tensor([16, 87552],"float16"), axis=1, )
paddle.sum(Tensor([16, 87552],"float32"), axis=1, )
paddle.sum(Tensor([16, 89216],"float16"), axis=1, )
paddle.sum(Tensor([16, 89216],"float32"), axis=1, )
paddle.sum(Tensor([16, 89984],"float16"), axis=1, )
paddle.sum(Tensor([16, 89984],"float32"), axis=1, )
paddle.sum(Tensor([16, 9, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 91392],"float16"), axis=1, )
paddle.sum(Tensor([16, 91392],"float32"), axis=1, )
paddle.sum(Tensor([16, 92416],"float16"), axis=1, )
paddle.sum(Tensor([16, 92416],"float32"), axis=1, )
paddle.sum(Tensor([16, 94848],"float16"), axis=1, )
paddle.sum(Tensor([16, 94848],"float32"), axis=1, )
paddle.sum(Tensor([16, 96, 1],"float32"), tuple(1,), keepdim=True, name=None, )
paddle.sum(Tensor([16, 96, 2],"float32"), tuple(1,), keepdim=True, name=None, )
paddle.sum(Tensor([16, 96768],"float16"), axis=1, )
paddle.sum(Tensor([16, 96768],"float32"), axis=1, )
paddle.sum(Tensor([16, 99712],"float16"), axis=1, )
paddle.sum(Tensor([16, 99712],"float32"), axis=1, )
paddle.sum(Tensor([160, 102144],"float16"), axis=1, )
paddle.sum(Tensor([160, 102144],"float32"), axis=1, )
paddle.sum(Tensor([160, 17, 1],"float32"), )
paddle.sum(Tensor([160, 19, 1],"float32"), )
paddle.sum(Tensor([160, 1],"float32"), )
paddle.sum(Tensor([160, 20, 1],"float32"), )
paddle.sum(Tensor([160, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([160, 200, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([160, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([160, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([160, 21, 1],"float32"), )
paddle.sum(Tensor([160, 22, 1],"float32"), )
paddle.sum(Tensor([160, 23, 1],"float32"), )
paddle.sum(Tensor([160, 24, 1],"float32"), )
paddle.sum(Tensor([160, 240, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([160, 25, 1],"float32"), )
paddle.sum(Tensor([160, 26, 1],"float32"), )
paddle.sum(Tensor([160, 27, 1],"float32"), )
paddle.sum(Tensor([160, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([160, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([160, 28, 1],"float32"), )
paddle.sum(Tensor([160, 29, 1],"float32"), )
paddle.sum(Tensor([160, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([160, 30, 1],"float32"), )
paddle.sum(Tensor([160, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([160, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([160, 31, 1],"float32"), )
paddle.sum(Tensor([160, 312, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([160, 32, 1],"float32"), )
paddle.sum(Tensor([160, 54400],"float16"), axis=1, )
paddle.sum(Tensor([160, 54400],"float32"), axis=1, )
paddle.sum(Tensor([160, 56000],"float16"), axis=1, )
paddle.sum(Tensor([160, 56000],"float32"), axis=1, )
paddle.sum(Tensor([160, 60800],"float16"), axis=1, )
paddle.sum(Tensor([160, 60800],"float32"), axis=1, )
paddle.sum(Tensor([160, 67200],"float16"), axis=1, )
paddle.sum(Tensor([160, 67200],"float32"), axis=1, )
paddle.sum(Tensor([160, 72960],"float16"), axis=1, )
paddle.sum(Tensor([160, 72960],"float32"), axis=1, )
paddle.sum(Tensor([160, 82688],"float16"), axis=1, )
paddle.sum(Tensor([160, 82688],"float32"), axis=1, )
paddle.sum(Tensor([160, 84864],"float16"), axis=1, )
paddle.sum(Tensor([160, 84864],"float32"), axis=1, )
paddle.sum(Tensor([160, 89984],"float16"), axis=1, )
paddle.sum(Tensor([160, 89984],"float32"), axis=1, )
paddle.sum(Tensor([160, 91392],"float16"), axis=1, )
paddle.sum(Tensor([160, 91392],"float32"), axis=1, )
paddle.sum(Tensor([160, 92416],"float16"), axis=1, )
paddle.sum(Tensor([160, 92416],"float32"), axis=1, )
paddle.sum(Tensor([1600, 1],"float32"), )
paddle.sum(Tensor([1602, 1],"float32"), )
paddle.sum(Tensor([1603, 1],"float32"), )
paddle.sum(Tensor([1605, 1],"float32"), )
paddle.sum(Tensor([1606, 1],"float32"), )
paddle.sum(Tensor([1607, 1],"float32"), )
paddle.sum(Tensor([1608, 1],"float32"), )
paddle.sum(Tensor([1609, 1],"float32"), )
paddle.sum(Tensor([160],"float32"), )
paddle.sum(Tensor([161, 1],"float32"), )
paddle.sum(Tensor([1610, 1],"float32"), )
paddle.sum(Tensor([1617, 1],"float32"), )
paddle.sum(Tensor([1619, 1],"float32"), )
paddle.sum(Tensor([162, 1],"float32"), )
paddle.sum(Tensor([1624, 1],"float32"), )
paddle.sum(Tensor([1625, 1],"float32"), )
paddle.sum(Tensor([1627, 1],"float32"), )
paddle.sum(Tensor([1628, 1],"float32"), )
paddle.sum(Tensor([163, 1],"float32"), )
paddle.sum(Tensor([1633, 1],"float32"), )
paddle.sum(Tensor([1635, 1],"float32"), )
paddle.sum(Tensor([1637, 1],"float32"), )
paddle.sum(Tensor([16384],"float16"), )
paddle.sum(Tensor([16384],"float32"), )
paddle.sum(Tensor([164, 112896],"float16"), axis=1, )
paddle.sum(Tensor([164, 112896],"float32"), axis=1, )
paddle.sum(Tensor([164, 1],"float32"), )
paddle.sum(Tensor([164, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([164, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([164, 216, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([164, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([164, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([164, 280, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([164, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([164, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([164, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([164, 336, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([164, 60800],"float16"), axis=1, )
paddle.sum(Tensor([164, 60800],"float32"), axis=1, )
paddle.sum(Tensor([164, 65664],"float16"), axis=1, )
paddle.sum(Tensor([164, 65664],"float32"), axis=1, )
paddle.sum(Tensor([164, 67200],"float16"), axis=1, )
paddle.sum(Tensor([164, 67200],"float32"), axis=1, )
paddle.sum(Tensor([164, 73984],"float16"), axis=1, )
paddle.sum(Tensor([164, 73984],"float32"), axis=1, )
paddle.sum(Tensor([164, 82688],"float16"), axis=1, )
paddle.sum(Tensor([164, 82688],"float32"), axis=1, )
paddle.sum(Tensor([164, 87360],"float16"), axis=1, )
paddle.sum(Tensor([164, 87360],"float32"), axis=1, )
paddle.sum(Tensor([164, 89984],"float16"), axis=1, )
paddle.sum(Tensor([164, 89984],"float32"), axis=1, )
paddle.sum(Tensor([164, 92416],"float16"), axis=1, )
paddle.sum(Tensor([164, 92416],"float32"), axis=1, )
paddle.sum(Tensor([1641, 1],"float32"), )
paddle.sum(Tensor([1642, 1],"float32"), )
paddle.sum(Tensor([1644, 1],"float32"), )
paddle.sum(Tensor([1646, 1],"float32"), )
paddle.sum(Tensor([1648, 1],"float32"), )
paddle.sum(Tensor([1649, 1],"float32"), )
paddle.sum(Tensor([164],"float32"), )
paddle.sum(Tensor([165, 1],"float32"), )
paddle.sum(Tensor([1656, 1],"float32"), )
paddle.sum(Tensor([166, 1],"float32"), )
paddle.sum(Tensor([1663, 1],"float32"), )
paddle.sum(Tensor([1666, 1],"float32"), )
paddle.sum(Tensor([167, 1],"float32"), )
paddle.sum(Tensor([1671, 1],"float32"), )
paddle.sum(Tensor([1673, 1],"float32"), )
paddle.sum(Tensor([1675, 1],"float32"), )
paddle.sum(Tensor([1677, 1],"float32"), )
paddle.sum(Tensor([16777216],"float16"), )
paddle.sum(Tensor([168, 102144],"float16"), axis=1, )
paddle.sum(Tensor([168, 102144],"float32"), axis=1, )
paddle.sum(Tensor([168, 17, 1],"float32"), )
paddle.sum(Tensor([168, 18, 1],"float32"), )
paddle.sum(Tensor([168, 19, 1],"float32"), )
paddle.sum(Tensor([168, 1],"float32"), )
paddle.sum(Tensor([168, 20, 1],"float32"), )
paddle.sum(Tensor([168, 200, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([168, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([168, 21, 1],"float32"), )
paddle.sum(Tensor([168, 22, 1],"float32"), )
paddle.sum(Tensor([168, 23, 1],"float32"), )
paddle.sum(Tensor([168, 24, 1],"float32"), )
paddle.sum(Tensor([168, 25, 1],"float32"), )
paddle.sum(Tensor([168, 26, 1],"float32"), )
paddle.sum(Tensor([168, 27, 1],"float32"), )
paddle.sum(Tensor([168, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([168, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([168, 28, 1],"float32"), )
paddle.sum(Tensor([168, 29, 1],"float32"), )
paddle.sum(Tensor([168, 30, 1],"float32"), )
paddle.sum(Tensor([168, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([168, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([168, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([168, 57600],"float16"), axis=1, )
paddle.sum(Tensor([168, 57600],"float32"), axis=1, )
paddle.sum(Tensor([168, 60800],"float16"), axis=1, )
paddle.sum(Tensor([168, 60800],"float32"), axis=1, )
paddle.sum(Tensor([168, 73984],"float16"), axis=1, )
paddle.sum(Tensor([168, 73984],"float32"), axis=1, )
paddle.sum(Tensor([168, 82688],"float16"), axis=1, )
paddle.sum(Tensor([168, 82688],"float32"), axis=1, )
paddle.sum(Tensor([168, 92416],"float16"), axis=1, )
paddle.sum(Tensor([168, 92416],"float32"), axis=1, )
paddle.sum(Tensor([168, 97280],"float16"), axis=1, )
paddle.sum(Tensor([168, 97280],"float32"), axis=1, )
paddle.sum(Tensor([1680, 1],"float32"), )
paddle.sum(Tensor([1686, 1],"float32"), )
paddle.sum(Tensor([1687, 1],"float32"), )
paddle.sum(Tensor([168],"float32"), )
paddle.sum(Tensor([169, 1],"float32"), )
paddle.sum(Tensor([1693, 1],"float32"), )
paddle.sum(Tensor([1694, 1],"float32"), )
paddle.sum(Tensor([1697],"float32"), )
paddle.sum(Tensor([1699, 1],"float32"), )
paddle.sum(Tensor([16],"float32"), )
paddle.sum(Tensor([17, 1],"float32"), )
paddle.sum(Tensor([170, 1],"float32"), )
paddle.sum(Tensor([1700, 1],"float32"), )
paddle.sum(Tensor([1703, 1],"float32"), )
paddle.sum(Tensor([1705, 1],"float32"), )
paddle.sum(Tensor([170628, 20, 3],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([1707, 1],"float32"), )
paddle.sum(Tensor([1708, 1],"float32"), )
paddle.sum(Tensor([1709, 1],"float32"), )
paddle.sum(Tensor([171, 1],"float32"), )
paddle.sum(Tensor([1710, 1],"float32"), )
paddle.sum(Tensor([17152, 1],"float32"), name=None, )
paddle.sum(Tensor([1716, 1],"float32"), )
paddle.sum(Tensor([1717, 1],"float32"), )
paddle.sum(Tensor([1718, 1],"float32"), )
paddle.sum(Tensor([1719, 1],"float32"), )
paddle.sum(Tensor([172, 102144],"float16"), axis=1, )
paddle.sum(Tensor([172, 102144],"float32"), axis=1, )
paddle.sum(Tensor([172, 1],"float32"), )
paddle.sum(Tensor([172, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([172, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([172, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([172, 256, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([172, 272, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([172, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([172, 304, 264],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([172, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([172, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([172, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([172, 54400],"float16"), axis=1, )
paddle.sum(Tensor([172, 54400],"float32"), axis=1, )
paddle.sum(Tensor([172, 60800],"float16"), axis=1, )
paddle.sum(Tensor([172, 60800],"float32"), axis=1, )
paddle.sum(Tensor([172, 67200],"float16"), axis=1, )
paddle.sum(Tensor([172, 67200],"float32"), axis=1, )
paddle.sum(Tensor([172, 77824],"float16"), axis=1, )
paddle.sum(Tensor([172, 77824],"float32"), axis=1, )
paddle.sum(Tensor([172, 80256],"float16"), axis=1, )
paddle.sum(Tensor([172, 80256],"float32"), axis=1, )
paddle.sum(Tensor([172, 80512],"float16"), axis=1, )
paddle.sum(Tensor([172, 80512],"float32"), axis=1, )
paddle.sum(Tensor([172, 82688],"float16"), axis=1, )
paddle.sum(Tensor([172, 82688],"float32"), axis=1, )
paddle.sum(Tensor([172, 92416],"float16"), axis=1, )
paddle.sum(Tensor([172, 92416],"float32"), axis=1, )
paddle.sum(Tensor([1724, 1],"float32"), )
paddle.sum(Tensor([1726, 1],"float32"), )
paddle.sum(Tensor([1728, 1],"float32"), )
paddle.sum(Tensor([1729, 1],"float32"), )
paddle.sum(Tensor([172],"float32"), )
paddle.sum(Tensor([173, 1],"float32"), )
paddle.sum(Tensor([1732, 1],"float32"), )
paddle.sum(Tensor([1734, 1],"float32"), )
paddle.sum(Tensor([1736, 1],"float32"), )
paddle.sum(Tensor([1739, 1],"float32"), )
paddle.sum(Tensor([174, 1],"float32"), )
paddle.sum(Tensor([1740, 1],"float32"), )
paddle.sum(Tensor([1741, 1],"float32"), )
paddle.sum(Tensor([1745, 1],"float32"), )
paddle.sum(Tensor([1746, 1],"float32"), )
paddle.sum(Tensor([1749, 1],"float32"), )
paddle.sum(Tensor([175, 1],"float32"), )
paddle.sum(Tensor([1751, 1],"float32"), )
paddle.sum(Tensor([1752, 1],"float32"), )
paddle.sum(Tensor([1755, 1],"float32"), )
paddle.sum(Tensor([1756, 1],"float32"), )
paddle.sum(Tensor([1757, 1],"float32"), )
paddle.sum(Tensor([1758, 1],"float32"), )
paddle.sum(Tensor([176, 16, 1],"float32"), )
paddle.sum(Tensor([176, 17, 1],"float32"), )
paddle.sum(Tensor([176, 18, 1],"float32"), )
paddle.sum(Tensor([176, 19, 1],"float32"), )
paddle.sum(Tensor([176, 1],"float32"), )
paddle.sum(Tensor([176, 20, 1],"float32"), )
paddle.sum(Tensor([176, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([176, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([176, 21, 1],"float32"), )
paddle.sum(Tensor([176, 22, 1],"float32"), )
paddle.sum(Tensor([176, 23, 1],"float32"), )
paddle.sum(Tensor([176, 232, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([176, 24, 1],"float32"), )
paddle.sum(Tensor([176, 248, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([176, 25, 1],"float32"), )
paddle.sum(Tensor([176, 256, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([176, 26, 1],"float32"), )
paddle.sum(Tensor([176, 27, 1],"float32"), )
paddle.sum(Tensor([176, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([176, 28, 1],"float32"), )
paddle.sum(Tensor([176, 29, 1],"float32"), )
paddle.sum(Tensor([176, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([176, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([176, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([176, 304, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([176, 60800],"float16"), axis=1, )
paddle.sum(Tensor([176, 60800],"float32"), axis=1, )
paddle.sum(Tensor([176, 62400],"float16"), axis=1, )
paddle.sum(Tensor([176, 62400],"float32"), axis=1, )
paddle.sum(Tensor([176, 69632],"float16"), axis=1, )
paddle.sum(Tensor([176, 69632],"float32"), axis=1, )
paddle.sum(Tensor([176, 74240],"float16"), axis=1, )
paddle.sum(Tensor([176, 74240],"float32"), axis=1, )
paddle.sum(Tensor([176, 82688],"float16"), axis=1, )
paddle.sum(Tensor([176, 82688],"float32"), axis=1, )
paddle.sum(Tensor([176, 83328],"float16"), axis=1, )
paddle.sum(Tensor([176, 83328],"float32"), axis=1, )
paddle.sum(Tensor([176, 92416],"float16"), axis=1, )
paddle.sum(Tensor([176, 92416],"float32"), axis=1, )
paddle.sum(Tensor([176, 94848],"float16"), axis=1, )
paddle.sum(Tensor([176, 94848],"float32"), axis=1, )
paddle.sum(Tensor([176, 99712],"float16"), axis=1, )
paddle.sum(Tensor([176, 99712],"float32"), axis=1, )
paddle.sum(Tensor([1761, 1],"float32"), )
paddle.sum(Tensor([1763, 1],"float32"), )
paddle.sum(Tensor([1766, 1],"float32"), )
paddle.sum(Tensor([1767, 1],"float32"), )
paddle.sum(Tensor([176],"float32"), )
paddle.sum(Tensor([177, 1],"float32"), )
paddle.sum(Tensor([1770, 1],"float32"), )
paddle.sum(Tensor([1772, 1],"float32"), )
paddle.sum(Tensor([1774, 1],"float32"), )
paddle.sum(Tensor([1775, 1],"float32"), )
paddle.sum(Tensor([1776, 1],"float32"), )
paddle.sum(Tensor([178, 1],"float32"), )
paddle.sum(Tensor([1780, 1],"float32"), )
paddle.sum(Tensor([1782, 1],"float32"), )
paddle.sum(Tensor([1783, 1],"float32"), )
paddle.sum(Tensor([1785, 1],"float32"), )
paddle.sum(Tensor([1787, 1],"float32"), )
paddle.sum(Tensor([1789, 1],"float32"), )
paddle.sum(Tensor([179, 1],"float32"), )
paddle.sum(Tensor([1793, 1],"float32"), )
paddle.sum(Tensor([1795, 1],"float32"), )
paddle.sum(Tensor([18, 18],"float32"), 0, )
paddle.sum(Tensor([18, 18],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([18, 1],"float32"), )
paddle.sum(Tensor([18, 6],"float32"), 1, )
paddle.sum(Tensor([180, 102144],"float16"), axis=1, )
paddle.sum(Tensor([180, 102144],"float32"), axis=1, )
paddle.sum(Tensor([180, 1],"float32"), )
paddle.sum(Tensor([180, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([180, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([180, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([180, 248, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([180, 264, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([180, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([180, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([180, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([180, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([180, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([180, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([180, 54400],"float16"), axis=1, )
paddle.sum(Tensor([180, 54400],"float32"), axis=1, )
paddle.sum(Tensor([180, 60800],"float16"), axis=1, )
paddle.sum(Tensor([180, 60800],"float32"), axis=1, )
paddle.sum(Tensor([180, 64000],"float16"), axis=1, )
paddle.sum(Tensor([180, 64000],"float32"), axis=1, )
paddle.sum(Tensor([180, 80256],"float16"), axis=1, )
paddle.sum(Tensor([180, 80256],"float32"), axis=1, )
paddle.sum(Tensor([180, 82688],"float16"), axis=1, )
paddle.sum(Tensor([180, 82688],"float32"), axis=1, )
paddle.sum(Tensor([180, 83328],"float16"), axis=1, )
paddle.sum(Tensor([180, 83328],"float32"), axis=1, )
paddle.sum(Tensor([180, 91392],"float16"), axis=1, )
paddle.sum(Tensor([180, 91392],"float32"), axis=1, )
paddle.sum(Tensor([180, 92416],"float16"), axis=1, )
paddle.sum(Tensor([180, 92416],"float32"), axis=1, )
paddle.sum(Tensor([1801, 1],"float32"), )
paddle.sum(Tensor([1805, 1],"float32"), )
paddle.sum(Tensor([180],"float32"), )
paddle.sum(Tensor([181, 1],"float32"), )
paddle.sum(Tensor([1813, 1],"float32"), )
paddle.sum(Tensor([1814, 1],"float32"), )
paddle.sum(Tensor([182, 16],"float32"), axis=0, )
paddle.sum(Tensor([182, 1],"float32"), )
paddle.sum(Tensor([182, 2, 16],"float32"), axis=0, )
paddle.sum(Tensor([1820, 1],"float32"), )
paddle.sum(Tensor([1821, 1],"float32"), )
paddle.sum(Tensor([1823, 1],"float32"), )
paddle.sum(Tensor([1824, 1],"float32"), )
paddle.sum(Tensor([1827, 1],"float32"), )
paddle.sum(Tensor([1828, 1],"float32"), )
paddle.sum(Tensor([1829, 1],"float32"), )
paddle.sum(Tensor([183, 1],"float32"), )
paddle.sum(Tensor([1830, 1],"float32"), )
paddle.sum(Tensor([1832, 1],"float32"), )
paddle.sum(Tensor([1833, 1],"float32"), )
paddle.sum(Tensor([1839, 1],"float32"), )
paddle.sum(Tensor([184, 16, 1],"float32"), )
paddle.sum(Tensor([184, 17, 1],"float32"), )
paddle.sum(Tensor([184, 18, 1],"float32"), )
paddle.sum(Tensor([184, 19, 1],"float32"), )
paddle.sum(Tensor([184, 1],"float32"), )
paddle.sum(Tensor([184, 20, 1],"float32"), )
paddle.sum(Tensor([184, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([184, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([184, 200, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([184, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([184, 21, 1],"float32"), )
paddle.sum(Tensor([184, 22, 1],"float32"), )
paddle.sum(Tensor([184, 23, 1],"float32"), )
paddle.sum(Tensor([184, 24, 1],"float32"), )
paddle.sum(Tensor([184, 25, 1],"float32"), )
paddle.sum(Tensor([184, 26, 1],"float32"), )
paddle.sum(Tensor([184, 27, 1],"float32"), )
paddle.sum(Tensor([184, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([184, 296, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([184, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([184, 54400],"float16"), axis=1, )
paddle.sum(Tensor([184, 54400],"float32"), axis=1, )
paddle.sum(Tensor([184, 60800],"float16"), axis=1, )
paddle.sum(Tensor([184, 60800],"float32"), axis=1, )
paddle.sum(Tensor([184, 65600],"float16"), axis=1, )
paddle.sum(Tensor([184, 65600],"float32"), axis=1, )
paddle.sum(Tensor([184, 67200],"float16"), axis=1, )
paddle.sum(Tensor([184, 67200],"float32"), axis=1, )
paddle.sum(Tensor([184, 82688],"float16"), axis=1, )
paddle.sum(Tensor([184, 82688],"float32"), axis=1, )
paddle.sum(Tensor([184, 92416],"float16"), axis=1, )
paddle.sum(Tensor([184, 92416],"float32"), axis=1, )
paddle.sum(Tensor([184, 99456],"float16"), axis=1, )
paddle.sum(Tensor([184, 99456],"float32"), axis=1, )
paddle.sum(Tensor([1840, 1],"float32"), )
paddle.sum(Tensor([1841, 1],"float32"), )
paddle.sum(Tensor([1842, 1],"float32"), )
paddle.sum(Tensor([1844, 1],"float32"), )
paddle.sum(Tensor([1846, 1],"float32"), )
paddle.sum(Tensor([1849, 1],"float32"), )
paddle.sum(Tensor([184],"float32"), )
paddle.sum(Tensor([185, 1],"float32"), )
paddle.sum(Tensor([1851, 1],"float32"), )
paddle.sum(Tensor([1852, 1],"float32"), )
paddle.sum(Tensor([1853, 1],"float32"), )
paddle.sum(Tensor([1855, 1],"float32"), )
paddle.sum(Tensor([1857, 1],"float32"), )
paddle.sum(Tensor([1858, 1],"float32"), )
paddle.sum(Tensor([1859, 1],"float32"), )
paddle.sum(Tensor([186, 1],"float32"), )
paddle.sum(Tensor([1862, 1],"float32"), )
paddle.sum(Tensor([1864, 1],"float32"), )
paddle.sum(Tensor([1865, 1],"float32"), )
paddle.sum(Tensor([1867, 1],"float32"), )
paddle.sum(Tensor([1868, 1],"float32"), )
paddle.sum(Tensor([187, 1],"float32"), )
paddle.sum(Tensor([1870, 1],"float32"), )
paddle.sum(Tensor([1871, 1],"float32"), )
paddle.sum(Tensor([1872, 1],"float32"), )
paddle.sum(Tensor([1873, 1],"float32"), )
paddle.sum(Tensor([1879, 1],"float32"), )
paddle.sum(Tensor([188, 102144],"float16"), axis=1, )
paddle.sum(Tensor([188, 102144],"float32"), axis=1, )
paddle.sum(Tensor([188, 1],"float32"), )
paddle.sum(Tensor([188, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([188, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([188, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([188, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([188, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([188, 288, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([188, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([188, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([188, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([188, 60800],"float16"), axis=1, )
paddle.sum(Tensor([188, 60800],"float32"), axis=1, )
paddle.sum(Tensor([188, 67200],"float16"), axis=1, )
paddle.sum(Tensor([188, 67200],"float32"), axis=1, )
paddle.sum(Tensor([188, 73984],"float16"), axis=1, )
paddle.sum(Tensor([188, 73984],"float32"), axis=1, )
paddle.sum(Tensor([188, 78336],"float16"), axis=1, )
paddle.sum(Tensor([188, 78336],"float32"), axis=1, )
paddle.sum(Tensor([188, 82688],"float16"), axis=1, )
paddle.sum(Tensor([188, 82688],"float32"), axis=1, )
paddle.sum(Tensor([188, 91392],"float16"), axis=1, )
paddle.sum(Tensor([188, 91392],"float32"), axis=1, )
paddle.sum(Tensor([188, 92416],"float16"), axis=1, )
paddle.sum(Tensor([188, 92416],"float32"), axis=1, )
paddle.sum(Tensor([1881, 1],"float32"), )
paddle.sum(Tensor([1887, 1],"float32"), )
paddle.sum(Tensor([1889, 1],"float32"), )
paddle.sum(Tensor([188],"float32"), )
paddle.sum(Tensor([189, 1],"float32"), )
paddle.sum(Tensor([1890, 1],"float32"), )
paddle.sum(Tensor([1893, 1],"float32"), )
paddle.sum(Tensor([1894, 1],"float32"), )
paddle.sum(Tensor([1896, 1],"float32"), )
paddle.sum(Tensor([1898, 1],"float32"), )
paddle.sum(Tensor([1899, 1],"float32"), )
paddle.sum(Tensor([18],"float32"), )
paddle.sum(Tensor([19, 1],"float32"), )
paddle.sum(Tensor([19, 2097152],"float32"), axis=0, )
paddle.sum(Tensor([19, 4194304],"float32"), axis=0, )
paddle.sum(Tensor([190, 1],"float32"), )
paddle.sum(Tensor([1907, 1],"float32"), )
paddle.sum(Tensor([190960, 1],"float32"), )
paddle.sum(Tensor([190960],"float32"), )
paddle.sum(Tensor([191, 1],"float32"), )
paddle.sum(Tensor([1911, 1],"float32"), )
paddle.sum(Tensor([1913, 1],"float32"), )
paddle.sum(Tensor([1914, 1],"float32"), )
paddle.sum(Tensor([192, 15, 1],"float32"), )
paddle.sum(Tensor([192, 16, 1],"float32"), )
paddle.sum(Tensor([192, 17, 1],"float32"), )
paddle.sum(Tensor([192, 18, 1],"float32"), )
paddle.sum(Tensor([192, 19, 1],"float32"), )
paddle.sum(Tensor([192, 1],"float32"), )
paddle.sum(Tensor([192, 20, 1],"float32"), )
paddle.sum(Tensor([192, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([192, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([192, 21, 1],"float32"), )
paddle.sum(Tensor([192, 22, 1],"float32"), )
paddle.sum(Tensor([192, 23, 1],"float32"), )
paddle.sum(Tensor([192, 24, 1],"float32"), )
paddle.sum(Tensor([192, 25, 1],"float32"), )
paddle.sum(Tensor([192, 26, 1],"float32"), )
paddle.sum(Tensor([192, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([192, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([192, 48, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([192, 60800],"float16"), axis=1, )
paddle.sum(Tensor([192, 60800],"float32"), axis=1, )
paddle.sum(Tensor([192, 64],"bool"), )
paddle.sum(Tensor([192, 67200],"float16"), axis=1, )
paddle.sum(Tensor([192, 67200],"float32"), axis=1, )
paddle.sum(Tensor([192, 82688],"float16"), axis=1, )
paddle.sum(Tensor([192, 82688],"float32"), axis=1, )
paddle.sum(Tensor([192, 92416],"float16"), axis=1, )
paddle.sum(Tensor([192, 92416],"float32"), axis=1, )
paddle.sum(Tensor([192, 96, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([1921, 1],"float32"), )
paddle.sum(Tensor([192],"float32"), )
paddle.sum(Tensor([193, 1],"float32"), )
paddle.sum(Tensor([1930, 1],"float32"), )
paddle.sum(Tensor([1932, 1],"float32"), )
paddle.sum(Tensor([1935, 1],"float32"), )
paddle.sum(Tensor([1936, 1],"float32"), )
paddle.sum(Tensor([194, 1],"float32"), )
paddle.sum(Tensor([1940, 1],"float32"), )
paddle.sum(Tensor([1942, 1],"float32"), )
paddle.sum(Tensor([1944, 1],"float32"), )
paddle.sum(Tensor([1945, 1],"float32"), )
paddle.sum(Tensor([1946, 1],"float32"), )
paddle.sum(Tensor([1947, 1],"float32"), )
paddle.sum(Tensor([1948, 1],"float32"), )
paddle.sum(Tensor([195, 1],"float32"), )
paddle.sum(Tensor([1951, 1],"float32"), )
paddle.sum(Tensor([1954, 1],"float32"), )
paddle.sum(Tensor([1955, 1],"float32"), )
paddle.sum(Tensor([196, 102144],"float16"), axis=1, )
paddle.sum(Tensor([196, 102144],"float32"), axis=1, )
paddle.sum(Tensor([196, 1],"float32"), )
paddle.sum(Tensor([196, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([196, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([196, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([196, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([196, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([196, 60800],"float16"), axis=1, )
paddle.sum(Tensor([196, 60800],"float32"), axis=1, )
paddle.sum(Tensor([196, 67200],"float16"), axis=1, )
paddle.sum(Tensor([196, 67200],"float32"), axis=1, )
paddle.sum(Tensor([196, 91392],"float16"), axis=1, )
paddle.sum(Tensor([196, 91392],"float32"), axis=1, )
paddle.sum(Tensor([196, 92416],"float16"), axis=1, )
paddle.sum(Tensor([196, 92416],"float32"), axis=1, )
paddle.sum(Tensor([196],"float32"), )
paddle.sum(Tensor([197, 1],"float32"), )
paddle.sum(Tensor([1971, 1],"float32"), )
paddle.sum(Tensor([1972, 1],"float32"), )
paddle.sum(Tensor([1973, 1],"float32"), )
paddle.sum(Tensor([1975, 1],"float32"), )
paddle.sum(Tensor([1979, 1],"float32"), )
paddle.sum(Tensor([198, 1],"float32"), )
paddle.sum(Tensor([1980, 1],"float32"), )
paddle.sum(Tensor([1982, 1],"float32"), )
paddle.sum(Tensor([1986, 1],"float32"), )
paddle.sum(Tensor([1988, 1],"float32"), )
paddle.sum(Tensor([1989, 1],"float32"), )
paddle.sum(Tensor([199, 1],"float32"), )
paddle.sum(Tensor([1990, 1],"float32"), )
paddle.sum(Tensor([1991, 1],"float32"), )
paddle.sum(Tensor([1993, 1],"float32"), )
paddle.sum(Tensor([1994, 1],"float32"), )
paddle.sum(Tensor([1997, 1],"float32"), )
paddle.sum(Tensor([1998, 1],"float32"), )
paddle.sum(Tensor([1999, 1],"float32"), )
paddle.sum(Tensor([1],"float32"), )
paddle.sum(Tensor([1],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([1],"int64"), )
paddle.sum(Tensor([2, 1, 2],"float32"), axis=-1, )
paddle.sum(Tensor([2, 1, 2],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([2, 1, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 10, 10],"float32"), )
paddle.sum(Tensor([2, 10, 10],"float32"), name=None, )
paddle.sum(Tensor([2, 10, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 100],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([2, 100],"int64"), axis=1, keepdim=True, )
paddle.sum(Tensor([2, 10],"float32"), 1, )
paddle.sum(Tensor([2, 11, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 115],"float32"), 1, )
paddle.sum(Tensor([2, 12, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 13, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 14, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 15, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 15],"float32"), 1, )
paddle.sum(Tensor([2, 16, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 16],"float32"), )
paddle.sum(Tensor([2, 18, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 19, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 19],"float32"), 1, )
paddle.sum(Tensor([2, 1],"float32"), )
paddle.sum(Tensor([2, 1],"int32"), )
paddle.sum(Tensor([2, 1],"int64"), )
paddle.sum(Tensor([2, 2, 2],"float32"), )
paddle.sum(Tensor([2, 2, 2],"float32"), axis=-1, )
paddle.sum(Tensor([2, 2, 2],"float64"), )
paddle.sum(Tensor([2, 2, 2],"int32"), )
paddle.sum(Tensor([2, 2, 2],"int64"), )
paddle.sum(Tensor([2, 2, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 20, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 21, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 22, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 23, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 25, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 256],"int64"), axis=0, )
paddle.sum(Tensor([2, 28, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 288, 1],"float32"), )
paddle.sum(Tensor([2, 29],"float32"), 1, )
paddle.sum(Tensor([2, 2],"float16"), )
paddle.sum(Tensor([2, 2],"float32"), )
paddle.sum(Tensor([2, 2],"float32"), axis=-1, )
paddle.sum(Tensor([2, 2],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([2, 2],"float32"), axis=1, )
paddle.sum(Tensor([2, 2],"float64"), )
paddle.sum(Tensor([2, 2],"float64"), axis=-1, keepdim=True, )
paddle.sum(Tensor([2, 2],"float64"), axis=1, )
paddle.sum(Tensor([2, 2],"float64"), axis=Tensor([2],"int64"), )
paddle.sum(Tensor([2, 3, 3, 2],"float64"), )
paddle.sum(Tensor([2, 3, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 5],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 5],"bool"), axis=2, keepdim=True, )
paddle.sum(Tensor([2, 3, 4, 5],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 5],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([2, 3, 4, 5],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 5],"bool"), axis=list[0,2,], keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 5],"bool"), axis=list[2,], keepdim=True, )
paddle.sum(Tensor([2, 3, 4, 5],"bool"), axis=list[], keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 5],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 5],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([2, 3, 4, 5],"int64"), axis=list[-1,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 5],"int64"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 5],"int64"), axis=list[0,2,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 5],"int64"), axis=list[2,], keepdim=True, name=None, )
paddle.sum(Tensor([2, 3, 4, 5],"int64"), axis=tuple(0,1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 5],"int64"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4],"int32"), )
paddle.sum(Tensor([2, 3, 4],"int32"), axis=0, )
paddle.sum(Tensor([2, 3, 4],"int32"), axis=tuple(0,1,), )
paddle.sum(Tensor([2, 3, 4],"int32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([2, 30, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 302, 1],"float32"), )
paddle.sum(Tensor([2, 304, 1],"float32"), )
paddle.sum(Tensor([2, 346, 1],"float32"), )
paddle.sum(Tensor([2, 38],"float32"), 1, )
paddle.sum(Tensor([2, 3],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([2, 3],"bool"), axis=0, keepdim=True, )
paddle.sum(Tensor([2, 3],"bool"), axis=1, keepdim=False, )
paddle.sum(Tensor([2, 3],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([2, 3],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([2, 3],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([2, 3],"bool"), axis=list[0,], keepdim=True, )
paddle.sum(Tensor([2, 3],"bool"), axis=list[1,], keepdim=False, )
paddle.sum(Tensor([2, 3],"bool"), axis=tuple(0,1,), keepdim=False, )
paddle.sum(Tensor([2, 3],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 3],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([2, 3],"float64"), )
paddle.sum(Tensor([2, 3],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 3],"float64"), axis=-1, keepdim=True, )
paddle.sum(Tensor([2, 4, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 4, 4],"float32"), )
paddle.sum(Tensor([2, 4, 4],"float64"), )
paddle.sum(Tensor([2, 4, 4],"int32"), )
paddle.sum(Tensor([2, 4, 4],"int64"), )
paddle.sum(Tensor([2, 4, 7],"float32"), )
paddle.sum(Tensor([2, 4, 7],"float64"), )
paddle.sum(Tensor([2, 4, 7],"int32"), )
paddle.sum(Tensor([2, 4, 7],"int64"), )
paddle.sum(Tensor([2, 4],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([2, 4],"float32"), axis=0, )
paddle.sum(Tensor([2, 4],"float64"), axis=1, keepdim=True, )
paddle.sum(Tensor([2, 5, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 58],"float32"), 1, )
paddle.sum(Tensor([2, 5],"float32"), )
paddle.sum(Tensor([2, 5],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 5],"float32"), 0, keepdim=True, dtype="float32", )
paddle.sum(Tensor([2, 5],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 5],"float32"), None, keepdim=False, dtype="float32", )
paddle.sum(Tensor([2, 5],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([2, 5],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([2, 5],"float64"), -1, keepdim=True, dtype="float32", )
paddle.sum(Tensor([2, 5],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([2, 5],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 5],"float64"), 0, keepdim=True, dtype="float32", )
paddle.sum(Tensor([2, 5],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 5],"float64"), None, keepdim=False, dtype="float32", )
paddle.sum(Tensor([2, 5],"float64"), None, keepdim=True, dtype="float32", )
paddle.sum(Tensor([2, 5],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([2, 5],"int64"), )
paddle.sum(Tensor([2, 6, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 60],"int64"), axis=0, )
paddle.sum(Tensor([2, 7, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 76],"float32"), 1, )
paddle.sum(Tensor([2, 8, 16],"float32"), axis=1, )
paddle.sum(Tensor([2, 8, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 9, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([2, 96, 2],"float32"), tuple(1,), keepdim=True, name=None, )
paddle.sum(Tensor([20, 1, 152, 272],"float32"), )
paddle.sum(Tensor([20, 100],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([20, 102144],"float16"), axis=1, )
paddle.sum(Tensor([20, 102144],"float32"), axis=1, )
paddle.sum(Tensor([20, 102400],"float16"), axis=1, )
paddle.sum(Tensor([20, 102400],"float32"), axis=1, )
paddle.sum(Tensor([20, 1],"float32"), )
paddle.sum(Tensor([20, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 232, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 272, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 304, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 304, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 312, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 320, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 328, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([20, 60800],"float16"), axis=1, )
paddle.sum(Tensor([20, 60800],"float32"), axis=1, )
paddle.sum(Tensor([20, 60],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([20, 60],"int64"), axis=0, )
paddle.sum(Tensor([20, 64000],"float16"), axis=1, )
paddle.sum(Tensor([20, 64000],"float32"), axis=1, )
paddle.sum(Tensor([20, 67200],"float16"), axis=1, )
paddle.sum(Tensor([20, 67200],"float32"), axis=1, )
paddle.sum(Tensor([20, 70528],"float16"), axis=1, )
paddle.sum(Tensor([20, 70528],"float32"), axis=1, )
paddle.sum(Tensor([20, 73984],"float16"), axis=1, )
paddle.sum(Tensor([20, 73984],"float32"), axis=1, )
paddle.sum(Tensor([20, 82688],"float16"), axis=1, )
paddle.sum(Tensor([20, 82688],"float32"), axis=1, )
paddle.sum(Tensor([20, 85120],"float16"), axis=1, )
paddle.sum(Tensor([20, 85120],"float32"), axis=1, )
paddle.sum(Tensor([20, 87040],"float16"), axis=1, )
paddle.sum(Tensor([20, 87040],"float32"), axis=1, )
paddle.sum(Tensor([20, 89984],"float16"), axis=1, )
paddle.sum(Tensor([20, 89984],"float32"), axis=1, )
paddle.sum(Tensor([20, 91392],"float16"), axis=1, )
paddle.sum(Tensor([20, 91392],"float32"), axis=1, )
paddle.sum(Tensor([20, 92352],"float16"), axis=1, )
paddle.sum(Tensor([20, 92352],"float32"), axis=1, )
paddle.sum(Tensor([20, 92416],"float16"), axis=1, )
paddle.sum(Tensor([20, 92416],"float32"), axis=1, )
paddle.sum(Tensor([20, 97280],"float16"), axis=1, )
paddle.sum(Tensor([20, 97280],"float32"), axis=1, )
paddle.sum(Tensor([20, 99712],"float16"), axis=1, )
paddle.sum(Tensor([20, 99712],"float32"), axis=1, )
paddle.sum(Tensor([200, 102144],"float16"), axis=1, )
paddle.sum(Tensor([200, 102144],"float32"), axis=1, )
paddle.sum(Tensor([200, 104832],"float16"), axis=1, )
paddle.sum(Tensor([200, 104832],"float32"), axis=1, )
paddle.sum(Tensor([200, 14, 1],"float32"), )
paddle.sum(Tensor([200, 15, 1],"float32"), )
paddle.sum(Tensor([200, 16, 1],"float32"), )
paddle.sum(Tensor([200, 17, 1],"float32"), )
paddle.sum(Tensor([200, 18, 1],"float32"), )
paddle.sum(Tensor([200, 19, 1],"float32"), )
paddle.sum(Tensor([200, 1],"float32"), )
paddle.sum(Tensor([200, 20, 1],"float32"), )
paddle.sum(Tensor([200, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([200, 21, 1],"float32"), )
paddle.sum(Tensor([200, 22, 1],"float32"), )
paddle.sum(Tensor([200, 23, 1],"float32"), )
paddle.sum(Tensor([200, 24, 1],"float32"), )
paddle.sum(Tensor([200, 25, 1],"float32"), )
paddle.sum(Tensor([200, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([200, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([200, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([200, 312, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([200, 60800],"float16"), axis=1, )
paddle.sum(Tensor([200, 60800],"float32"), axis=1, )
paddle.sum(Tensor([200, 82688],"float16"), axis=1, )
paddle.sum(Tensor([200, 82688],"float32"), axis=1, )
paddle.sum(Tensor([200, 92416],"float16"), axis=1, )
paddle.sum(Tensor([200, 92416],"float32"), axis=1, )
paddle.sum(Tensor([20000, 1],"float32"), name=None, )
paddle.sum(Tensor([2000],"int64"), )
paddle.sum(Tensor([200],"float32"), )
paddle.sum(Tensor([201, 1],"float32"), )
paddle.sum(Tensor([201, 1],"float32"), name=None, )
paddle.sum(Tensor([2016, 1],"float32"), )
paddle.sum(Tensor([202, 1],"float32"), )
paddle.sum(Tensor([2020, 1],"float32"), )
paddle.sum(Tensor([2023, 1],"float32"), )
paddle.sum(Tensor([2029, 1],"float32"), )
paddle.sum(Tensor([203, 1],"float32"), )
paddle.sum(Tensor([2032, 1],"float32"), )
paddle.sum(Tensor([2035, 1],"float32"), )
paddle.sum(Tensor([2038, 1],"float32"), )
paddle.sum(Tensor([2039, 1],"float32"), )
paddle.sum(Tensor([204, 1],"float32"), )
paddle.sum(Tensor([204, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([204, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([204, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([204, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([204, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([204, 54400],"float16"), axis=1, )
paddle.sum(Tensor([204, 54400],"float32"), axis=1, )
paddle.sum(Tensor([204, 62400],"float16"), axis=1, )
paddle.sum(Tensor([204, 62400],"float32"), axis=1, )
paddle.sum(Tensor([204, 67200],"float16"), axis=1, )
paddle.sum(Tensor([204, 67200],"float32"), axis=1, )
paddle.sum(Tensor([204, 82688],"float16"), axis=1, )
paddle.sum(Tensor([204, 82688],"float32"), axis=1, )
paddle.sum(Tensor([204, 92416],"float16"), axis=1, )
paddle.sum(Tensor([204, 92416],"float32"), axis=1, )
paddle.sum(Tensor([2040, 1],"float32"), )
paddle.sum(Tensor([2048],"float32"), )
paddle.sum(Tensor([204],"float32"), )
paddle.sum(Tensor([205, 1],"float32"), )
paddle.sum(Tensor([2050, 1],"float32"), )
paddle.sum(Tensor([2053, 1],"float32"), )
paddle.sum(Tensor([2059, 1],"float32"), )
paddle.sum(Tensor([206, 1],"float32"), )
paddle.sum(Tensor([2063, 1],"float32"), )
paddle.sum(Tensor([207, 1],"float32"), )
paddle.sum(Tensor([2075, 1],"float32"), )
paddle.sum(Tensor([208, 14, 1],"float32"), )
paddle.sum(Tensor([208, 15, 1],"float32"), )
paddle.sum(Tensor([208, 16, 1],"float32"), )
paddle.sum(Tensor([208, 17, 1],"float32"), )
paddle.sum(Tensor([208, 18, 1],"float32"), )
paddle.sum(Tensor([208, 19, 1],"float32"), )
paddle.sum(Tensor([208, 1],"float32"), )
paddle.sum(Tensor([208, 20, 1],"float32"), )
paddle.sum(Tensor([208, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([208, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([208, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([208, 21, 1],"float32"), )
paddle.sum(Tensor([208, 22, 1],"float32"), )
paddle.sum(Tensor([208, 23, 1],"float32"), )
paddle.sum(Tensor([208, 24, 1],"float32"), )
paddle.sum(Tensor([208, 272, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([208, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([208, 288, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([208, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([208, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([208, 54400],"float16"), axis=1, )
paddle.sum(Tensor([208, 54400],"float32"), axis=1, )
paddle.sum(Tensor([208, 60800],"float16"), axis=1, )
paddle.sum(Tensor([208, 60800],"float32"), axis=1, )
paddle.sum(Tensor([208, 67200],"float16"), axis=1, )
paddle.sum(Tensor([208, 67200],"float32"), axis=1, )
paddle.sum(Tensor([208, 82688],"float16"), axis=1, )
paddle.sum(Tensor([208, 82688],"float32"), axis=1, )
paddle.sum(Tensor([208, 87552],"float16"), axis=1, )
paddle.sum(Tensor([208, 87552],"float32"), axis=1, )
paddle.sum(Tensor([208, 92416],"float16"), axis=1, )
paddle.sum(Tensor([208, 92416],"float32"), axis=1, )
paddle.sum(Tensor([2086, 1],"float32"), )
paddle.sum(Tensor([2089, 1],"float32"), )
paddle.sum(Tensor([208],"float32"), )
paddle.sum(Tensor([209, 1],"float32"), )
paddle.sum(Tensor([2095, 1],"float32"), )
paddle.sum(Tensor([2099, 1],"float32"), )
paddle.sum(Tensor([20],"float32"), )
paddle.sum(Tensor([20],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([20],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([21, 1],"float32"), )
paddle.sum(Tensor([210, 1],"float32"), )
paddle.sum(Tensor([210056, 1],"float32"), )
paddle.sum(Tensor([210056],"float32"), )
paddle.sum(Tensor([2106, 1],"float32"), )
paddle.sum(Tensor([2109, 1],"float32"), )
paddle.sum(Tensor([211, 1],"float32"), )
paddle.sum(Tensor([2110, 1],"float32"), )
paddle.sum(Tensor([2113, 1],"float32"), )
paddle.sum(Tensor([2114, 1],"float32"), )
paddle.sum(Tensor([212, 102144],"float16"), axis=1, )
paddle.sum(Tensor([212, 102144],"float32"), axis=1, )
paddle.sum(Tensor([212, 1],"float32"), )
paddle.sum(Tensor([212, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([212, 200, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([212, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([212, 200, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([212, 264, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([212, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([212, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([212, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([212, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([212, 54400],"float16"), axis=1, )
paddle.sum(Tensor([212, 54400],"float32"), axis=1, )
paddle.sum(Tensor([212, 57600],"float16"), axis=1, )
paddle.sum(Tensor([212, 57600],"float32"), axis=1, )
paddle.sum(Tensor([212, 60800],"float16"), axis=1, )
paddle.sum(Tensor([212, 60800],"float32"), axis=1, )
paddle.sum(Tensor([212, 65600],"float16"), axis=1, )
paddle.sum(Tensor([212, 65600],"float32"), axis=1, )
paddle.sum(Tensor([212, 73984],"float16"), axis=1, )
paddle.sum(Tensor([212, 73984],"float32"), axis=1, )
paddle.sum(Tensor([212, 80256],"float16"), axis=1, )
paddle.sum(Tensor([212, 80256],"float32"), axis=1, )
paddle.sum(Tensor([212, 82688],"float16"), axis=1, )
paddle.sum(Tensor([212, 82688],"float32"), axis=1, )
paddle.sum(Tensor([212, 92416],"float16"), axis=1, )
paddle.sum(Tensor([212, 92416],"float32"), axis=1, )
paddle.sum(Tensor([212],"float32"), )
paddle.sum(Tensor([213, 1],"float32"), )
paddle.sum(Tensor([2130, 1],"float32"), )
paddle.sum(Tensor([2133, 1],"float32"), )
paddle.sum(Tensor([2139, 1],"float32"), )
paddle.sum(Tensor([214, 1],"float32"), )
paddle.sum(Tensor([2146, 1],"float32"), )
paddle.sum(Tensor([2148, 1],"float32"), )
paddle.sum(Tensor([215, 1],"float32"), )
paddle.sum(Tensor([2150, 1],"float32"), )
paddle.sum(Tensor([2151, 1],"float32"), )
paddle.sum(Tensor([2156, 1],"float32"), )
paddle.sum(Tensor([2158, 1],"float32"), )
paddle.sum(Tensor([216, 17, 1],"float32"), )
paddle.sum(Tensor([216, 18, 1],"float32"), )
paddle.sum(Tensor([216, 19, 1],"float32"), )
paddle.sum(Tensor([216, 1],"float32"), )
paddle.sum(Tensor([216, 20, 1],"float32"), )
paddle.sum(Tensor([216, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([216, 21, 1],"float32"), )
paddle.sum(Tensor([216, 22, 1],"float32"), )
paddle.sum(Tensor([216, 23, 1],"float32"), )
paddle.sum(Tensor([216, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([216, 60800],"float16"), axis=1, )
paddle.sum(Tensor([216, 60800],"float32"), axis=1, )
paddle.sum(Tensor([216, 92416],"float16"), axis=1, )
paddle.sum(Tensor([216, 92416],"float32"), axis=1, )
paddle.sum(Tensor([2160],"float32"), )
paddle.sum(Tensor([216],"float32"), )
paddle.sum(Tensor([217, 1],"float32"), )
paddle.sum(Tensor([2170, 1],"float32"), )
paddle.sum(Tensor([2171, 1],"float32"), )
paddle.sum(Tensor([218, 1],"float32"), )
paddle.sum(Tensor([2180, 1],"float32"), )
paddle.sum(Tensor([218240, 1],"float32"), )
paddle.sum(Tensor([218240],"float32"), )
paddle.sum(Tensor([2183, 1],"float32"), )
paddle.sum(Tensor([2185, 1],"float32"), )
paddle.sum(Tensor([2188, 1],"float32"), )
paddle.sum(Tensor([219, 1],"float32"), )
paddle.sum(Tensor([21],"float32"), )
paddle.sum(Tensor([22, 1],"float32"), )
paddle.sum(Tensor([220, 1],"float32"), )
paddle.sum(Tensor([220, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([220, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([220, 208, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([220, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([220, 60800],"float16"), axis=1, )
paddle.sum(Tensor([220, 60800],"float32"), axis=1, )
paddle.sum(Tensor([220, 63232],"float16"), axis=1, )
paddle.sum(Tensor([220, 63232],"float32"), axis=1, )
paddle.sum(Tensor([220, 67200],"float16"), axis=1, )
paddle.sum(Tensor([220, 67200],"float32"), axis=1, )
paddle.sum(Tensor([220, 92416],"float16"), axis=1, )
paddle.sum(Tensor([220, 92416],"float32"), axis=1, )
paddle.sum(Tensor([2201, 1],"float32"), )
paddle.sum(Tensor([220968, 1],"float32"), )
paddle.sum(Tensor([220968],"float32"), )
paddle.sum(Tensor([220],"float32"), )
paddle.sum(Tensor([221, 1],"float32"), )
paddle.sum(Tensor([2214, 1],"float32"), )
paddle.sum(Tensor([2215, 1],"float32"), )
paddle.sum(Tensor([222, 1],"float32"), )
paddle.sum(Tensor([2220, 1],"float32"), )
paddle.sum(Tensor([2222, 1],"float32"), )
paddle.sum(Tensor([223, 1],"float32"), )
paddle.sum(Tensor([224, 102144],"float16"), axis=1, )
paddle.sum(Tensor([224, 102144],"float32"), axis=1, )
paddle.sum(Tensor([224, 13, 1],"float32"), )
paddle.sum(Tensor([224, 14, 1],"float32"), )
paddle.sum(Tensor([224, 15, 1],"float32"), )
paddle.sum(Tensor([224, 16, 1],"float32"), )
paddle.sum(Tensor([224, 17, 1],"float32"), )
paddle.sum(Tensor([224, 18, 1],"float32"), )
paddle.sum(Tensor([224, 1],"float32"), )
paddle.sum(Tensor([224, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([224, 200, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([224, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([224, 200, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([224, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([224, 208, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([224, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([224, 280, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([224, 288, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([224, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([224, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([224, 54400],"float16"), axis=1, )
paddle.sum(Tensor([224, 54400],"float32"), axis=1, )
paddle.sum(Tensor([224, 59200],"float16"), axis=1, )
paddle.sum(Tensor([224, 59200],"float32"), axis=1, )
paddle.sum(Tensor([224, 60800],"float16"), axis=1, )
paddle.sum(Tensor([224, 60800],"float32"), axis=1, )
paddle.sum(Tensor([224, 63232],"float16"), axis=1, )
paddle.sum(Tensor([224, 63232],"float32"), axis=1, )
paddle.sum(Tensor([224, 65600],"float16"), axis=1, )
paddle.sum(Tensor([224, 65600],"float32"), axis=1, )
paddle.sum(Tensor([224, 67200],"float16"), axis=1, )
paddle.sum(Tensor([224, 67200],"float32"), axis=1, )
paddle.sum(Tensor([224, 76160],"float16"), axis=1, )
paddle.sum(Tensor([224, 76160],"float32"), axis=1, )
paddle.sum(Tensor([224, 78336],"float16"), axis=1, )
paddle.sum(Tensor([224, 78336],"float32"), axis=1, )
paddle.sum(Tensor([224, 82688],"float16"), axis=1, )
paddle.sum(Tensor([224, 82688],"float32"), axis=1, )
paddle.sum(Tensor([224, 92416],"float16"), axis=1, )
paddle.sum(Tensor([224, 92416],"float32"), axis=1, )
paddle.sum(Tensor([2244, 1],"float32"), )
paddle.sum(Tensor([224],"float32"), )
paddle.sum(Tensor([225, 1],"float32"), )
paddle.sum(Tensor([2253, 1],"float32"), )
paddle.sum(Tensor([2256, 1],"float32"), )
paddle.sum(Tensor([226, 1],"float32"), )
paddle.sum(Tensor([2268, 1],"float32"), )
paddle.sum(Tensor([227, 1],"float32"), )
paddle.sum(Tensor([227, 324],"float32"), axis=1, )
paddle.sum(Tensor([227, 45],"float32"), axis=1, )
paddle.sum(Tensor([2271, 1],"float32"), )
paddle.sum(Tensor([2272, 1],"float32"), )
paddle.sum(Tensor([228, 102144],"float16"), axis=1, )
paddle.sum(Tensor([228, 102144],"float32"), axis=1, )
paddle.sum(Tensor([228, 1],"float32"), )
paddle.sum(Tensor([228, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([228, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([228, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([228, 67200],"float16"), axis=1, )
paddle.sum(Tensor([228, 67200],"float32"), axis=1, )
paddle.sum(Tensor([228, 82688],"float16"), axis=1, )
paddle.sum(Tensor([228, 82688],"float32"), axis=1, )
paddle.sum(Tensor([2289, 1],"float32"), )
paddle.sum(Tensor([228],"float32"), )
paddle.sum(Tensor([229, 1],"float32"), )
paddle.sum(Tensor([2290, 1],"float32"), )
paddle.sum(Tensor([2297, 1],"float32"), )
paddle.sum(Tensor([22],"float32"), )
paddle.sum(Tensor([23, 1],"float32"), )
paddle.sum(Tensor([230, 1],"float32"), )
paddle.sum(Tensor([2304, 1],"float32"), )
paddle.sum(Tensor([231, 1],"float32"), )
paddle.sum(Tensor([2314, 1],"float32"), )
paddle.sum(Tensor([232, 16, 1],"float32"), )
paddle.sum(Tensor([232, 17, 1],"float32"), )
paddle.sum(Tensor([232, 18, 1],"float32"), )
paddle.sum(Tensor([232, 19, 1],"float32"), )
paddle.sum(Tensor([232, 1],"float32"), )
paddle.sum(Tensor([232, 20, 1],"float32"), )
paddle.sum(Tensor([232, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([232, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([232, 21, 1],"float32"), )
paddle.sum(Tensor([232, 22, 1],"float32"), )
paddle.sum(Tensor([232, 296, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([232, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([232, 54400],"float16"), axis=1, )
paddle.sum(Tensor([232, 54400],"float32"), axis=1, )
paddle.sum(Tensor([232, 67200],"float16"), axis=1, )
paddle.sum(Tensor([232, 67200],"float32"), axis=1, )
paddle.sum(Tensor([232, 92416],"float16"), axis=1, )
paddle.sum(Tensor([232, 92416],"float32"), axis=1, )
paddle.sum(Tensor([232, 99456],"float16"), axis=1, )
paddle.sum(Tensor([232, 99456],"float32"), axis=1, )
paddle.sum(Tensor([232],"float32"), )
paddle.sum(Tensor([233, 1],"float32"), )
paddle.sum(Tensor([234, 1],"float32"), )
paddle.sum(Tensor([2346, 1],"float32"), )
paddle.sum(Tensor([2349, 1],"float32"), )
paddle.sum(Tensor([235, 1],"float32"), )
paddle.sum(Tensor([2350, 1],"float32"), )
paddle.sum(Tensor([236, 1],"float32"), )
paddle.sum(Tensor([236, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([236, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([236, 54400],"float16"), axis=1, )
paddle.sum(Tensor([236, 54400],"float32"), axis=1, )
paddle.sum(Tensor([236, 60800],"float16"), axis=1, )
paddle.sum(Tensor([236, 60800],"float32"), axis=1, )
paddle.sum(Tensor([236],"float32"), )
paddle.sum(Tensor([237, 1],"float32"), )
paddle.sum(Tensor([2374, 1],"float32"), )
paddle.sum(Tensor([238, 1],"float32"), )
paddle.sum(Tensor([239, 1],"float32"), )
paddle.sum(Tensor([2396, 1],"float32"), )
paddle.sum(Tensor([2398, 1],"float32"), )
paddle.sum(Tensor([24, 102144],"float16"), axis=1, )
paddle.sum(Tensor([24, 102144],"float32"), axis=1, )
paddle.sum(Tensor([24, 104832],"float16"), axis=1, )
paddle.sum(Tensor([24, 104832],"float32"), axis=1, )
paddle.sum(Tensor([24, 112896],"float16"), axis=1, )
paddle.sum(Tensor([24, 112896],"float32"), axis=1, )
paddle.sum(Tensor([24, 113, 1],"float32"), )
paddle.sum(Tensor([24, 114, 1],"float32"), )
paddle.sum(Tensor([24, 116, 1],"float32"), )
paddle.sum(Tensor([24, 117, 1],"float32"), )
paddle.sum(Tensor([24, 122, 1],"float32"), )
paddle.sum(Tensor([24, 129, 1],"float32"), )
paddle.sum(Tensor([24, 130, 1],"float32"), )
paddle.sum(Tensor([24, 131, 1],"float32"), )
paddle.sum(Tensor([24, 132, 1],"float32"), )
paddle.sum(Tensor([24, 133, 1],"float32"), )
paddle.sum(Tensor([24, 135, 1],"float32"), )
paddle.sum(Tensor([24, 136, 1],"float32"), )
paddle.sum(Tensor([24, 137, 1],"float32"), )
paddle.sum(Tensor([24, 139, 1],"float32"), )
paddle.sum(Tensor([24, 140, 1],"float32"), )
paddle.sum(Tensor([24, 141, 1],"float32"), )
paddle.sum(Tensor([24, 142, 1],"float32"), )
paddle.sum(Tensor([24, 144, 1],"float32"), )
paddle.sum(Tensor([24, 146, 1],"float32"), )
paddle.sum(Tensor([24, 149, 1],"float32"), )
paddle.sum(Tensor([24, 150, 1],"float32"), )
paddle.sum(Tensor([24, 151, 1],"float32"), )
paddle.sum(Tensor([24, 153, 1],"float32"), )
paddle.sum(Tensor([24, 154, 1],"float32"), )
paddle.sum(Tensor([24, 157, 1],"float32"), )
paddle.sum(Tensor([24, 158, 1],"float32"), )
paddle.sum(Tensor([24, 158, 8],"float32"), )
paddle.sum(Tensor([24, 159, 1],"float32"), )
paddle.sum(Tensor([24, 162, 1],"float32"), )
paddle.sum(Tensor([24, 163, 1],"float32"), )
paddle.sum(Tensor([24, 171, 1],"float32"), )
paddle.sum(Tensor([24, 173, 1],"float32"), )
paddle.sum(Tensor([24, 174, 1],"float32"), )
paddle.sum(Tensor([24, 176, 1],"float32"), )
paddle.sum(Tensor([24, 178, 1],"float32"), )
paddle.sum(Tensor([24, 182, 1],"float32"), )
paddle.sum(Tensor([24, 1],"float32"), )
paddle.sum(Tensor([24, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 200, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 205, 1],"float32"), )
paddle.sum(Tensor([24, 208, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 208, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 224, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 232, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 232, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 24, 3, 3],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([24, 256, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 264, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 264, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 264, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 272, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 272, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 272, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 280, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 280, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 280, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 288, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 288, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 288, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 296, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 296, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 304, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 304, 264],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 304, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 304, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 312, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 312, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 328, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 328, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 328, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 336, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 336, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 336, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([24, 54400],"float16"), axis=1, )
paddle.sum(Tensor([24, 54400],"float32"), axis=1, )
paddle.sum(Tensor([24, 56576],"float16"), axis=1, )
paddle.sum(Tensor([24, 56576],"float32"), axis=1, )
paddle.sum(Tensor([24, 57600],"float16"), axis=1, )
paddle.sum(Tensor([24, 57600],"float32"), axis=1, )
paddle.sum(Tensor([24, 60800],"float16"), axis=1, )
paddle.sum(Tensor([24, 60800],"float32"), axis=1, )
paddle.sum(Tensor([24, 62400],"float16"), axis=1, )
paddle.sum(Tensor([24, 62400],"float32"), axis=1, )
paddle.sum(Tensor([24, 63232],"float16"), axis=1, )
paddle.sum(Tensor([24, 63232],"float32"), axis=1, )
paddle.sum(Tensor([24, 64, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([24, 64000],"float16"), axis=1, )
paddle.sum(Tensor([24, 64000],"float32"), axis=1, )
paddle.sum(Tensor([24, 67200],"float16"), axis=1, )
paddle.sum(Tensor([24, 67200],"float32"), axis=1, )
paddle.sum(Tensor([24, 68096],"float16"), axis=1, )
paddle.sum(Tensor([24, 68096],"float32"), axis=1, )
paddle.sum(Tensor([24, 70528],"float16"), axis=1, )
paddle.sum(Tensor([24, 70528],"float32"), axis=1, )
paddle.sum(Tensor([24, 73984],"float16"), axis=1, )
paddle.sum(Tensor([24, 73984],"float32"), axis=1, )
paddle.sum(Tensor([24, 74240],"float16"), axis=1, )
paddle.sum(Tensor([24, 74240],"float32"), axis=1, )
paddle.sum(Tensor([24, 76032],"float16"), axis=1, )
paddle.sum(Tensor([24, 76032],"float32"), axis=1, )
paddle.sum(Tensor([24, 76160],"float16"), axis=1, )
paddle.sum(Tensor([24, 76160],"float32"), axis=1, )
paddle.sum(Tensor([24, 78144],"float16"), axis=1, )
paddle.sum(Tensor([24, 78144],"float32"), axis=1, )
paddle.sum(Tensor([24, 78336],"float16"), axis=1, )
paddle.sum(Tensor([24, 78336],"float32"), axis=1, )
paddle.sum(Tensor([24, 80256],"float16"), axis=1, )
paddle.sum(Tensor([24, 80256],"float32"), axis=1, )
paddle.sum(Tensor([24, 80512],"float16"), axis=1, )
paddle.sum(Tensor([24, 80512],"float32"), axis=1, )
paddle.sum(Tensor([24, 82688],"float16"), axis=1, )
paddle.sum(Tensor([24, 82688],"float32"), axis=1, )
paddle.sum(Tensor([24, 84864],"float16"), axis=1, )
paddle.sum(Tensor([24, 84864],"float32"), axis=1, )
paddle.sum(Tensor([24, 85120],"float16"), axis=1, )
paddle.sum(Tensor([24, 85120],"float32"), axis=1, )
paddle.sum(Tensor([24, 86016],"float16"), axis=1, )
paddle.sum(Tensor([24, 86016],"float32"), axis=1, )
paddle.sum(Tensor([24, 87040],"float16"), axis=1, )
paddle.sum(Tensor([24, 87040],"float32"), axis=1, )
paddle.sum(Tensor([24, 87552],"float16"), axis=1, )
paddle.sum(Tensor([24, 87552],"float32"), axis=1, )
paddle.sum(Tensor([24, 89216],"float16"), axis=1, )
paddle.sum(Tensor([24, 89216],"float32"), axis=1, )
paddle.sum(Tensor([24, 89984],"float16"), axis=1, )
paddle.sum(Tensor([24, 89984],"float32"), axis=1, )
paddle.sum(Tensor([24, 91392],"float16"), axis=1, )
paddle.sum(Tensor([24, 91392],"float32"), axis=1, )
paddle.sum(Tensor([24, 91840],"float16"), axis=1, )
paddle.sum(Tensor([24, 91840],"float32"), axis=1, )
paddle.sum(Tensor([24, 92416],"float16"), axis=1, )
paddle.sum(Tensor([24, 92416],"float32"), axis=1, )
paddle.sum(Tensor([24, 94848],"float16"), axis=1, )
paddle.sum(Tensor([24, 94848],"float32"), axis=1, )
paddle.sum(Tensor([24, 96, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([24, 96768],"float16"), axis=1, )
paddle.sum(Tensor([24, 96768],"float32"), axis=1, )
paddle.sum(Tensor([24, 97088],"float16"), axis=1, )
paddle.sum(Tensor([24, 97088],"float32"), axis=1, )
paddle.sum(Tensor([24, 97280],"float16"), axis=1, )
paddle.sum(Tensor([24, 97280],"float32"), axis=1, )
paddle.sum(Tensor([24, 99456],"float16"), axis=1, )
paddle.sum(Tensor([24, 99456],"float32"), axis=1, )
paddle.sum(Tensor([24, 99712],"float16"), axis=1, )
paddle.sum(Tensor([24, 99712],"float32"), axis=1, )
paddle.sum(Tensor([240, 102144],"float16"), axis=1, )
paddle.sum(Tensor([240, 102144],"float32"), axis=1, )
paddle.sum(Tensor([240, 12, 1],"float32"), )
paddle.sum(Tensor([240, 13, 1],"float32"), )
paddle.sum(Tensor([240, 14, 1],"float32"), )
paddle.sum(Tensor([240, 15, 1],"float32"), )
paddle.sum(Tensor([240, 16, 1],"float32"), )
paddle.sum(Tensor([240, 17, 1],"float32"), )
paddle.sum(Tensor([240, 18, 1],"float32"), )
paddle.sum(Tensor([240, 19, 1],"float32"), )
paddle.sum(Tensor([240, 1],"float32"), )
paddle.sum(Tensor([240, 20, 1],"float32"), )
paddle.sum(Tensor([240, 21, 1],"float32"), )
paddle.sum(Tensor([240, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([240, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([240, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([240, 82688],"float16"), axis=1, )
paddle.sum(Tensor([240, 82688],"float32"), axis=1, )
paddle.sum(Tensor([240, 92416],"float16"), axis=1, )
paddle.sum(Tensor([240, 92416],"float32"), axis=1, )
paddle.sum(Tensor([240064, 1],"float32"), )
paddle.sum(Tensor([240064],"float32"), )
paddle.sum(Tensor([2408, 1],"float32"), )
paddle.sum(Tensor([240],"float32"), )
paddle.sum(Tensor([241, 1],"float32"), )
paddle.sum(Tensor([242, 1],"float32"), )
paddle.sum(Tensor([2422, 1],"float32"), )
paddle.sum(Tensor([243, 1],"float32"), )
paddle.sum(Tensor([2433, 1],"float32"), )
paddle.sum(Tensor([244, 1],"float32"), )
paddle.sum(Tensor([244, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([244, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([244, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([244, 54400],"float16"), axis=1, )
paddle.sum(Tensor([244, 54400],"float32"), axis=1, )
paddle.sum(Tensor([244, 60800],"float16"), axis=1, )
paddle.sum(Tensor([244, 60800],"float32"), axis=1, )
paddle.sum(Tensor([244, 82688],"float16"), axis=1, )
paddle.sum(Tensor([244, 82688],"float32"), axis=1, )
paddle.sum(Tensor([244],"float32"), )
paddle.sum(Tensor([245, 1],"float32"), )
paddle.sum(Tensor([245520, 1],"float32"), )
paddle.sum(Tensor([245520],"float32"), )
paddle.sum(Tensor([246, 1],"float32"), )
paddle.sum(Tensor([247, 1],"float32"), )
paddle.sum(Tensor([248, 102144],"float16"), axis=1, )
paddle.sum(Tensor([248, 102144],"float32"), axis=1, )
paddle.sum(Tensor([248, 1],"float32"), )
paddle.sum(Tensor([248, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([248, 280, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([248, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([248, 54400],"float16"), axis=1, )
paddle.sum(Tensor([248, 54400],"float32"), axis=1, )
paddle.sum(Tensor([248, 76160],"float16"), axis=1, )
paddle.sum(Tensor([248, 76160],"float32"), axis=1, )
paddle.sum(Tensor([248],"float32"), )
paddle.sum(Tensor([249, 1],"float32"), )
paddle.sum(Tensor([2490, 1],"float32"), )
paddle.sum(Tensor([2499, 1],"float32"), )
paddle.sum(Tensor([24],"float32"), )
paddle.sum(Tensor([24],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([24],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([25, 1],"float32"), )
paddle.sum(Tensor([250, 1],"float32"), )
paddle.sum(Tensor([2502, 1],"float32"), )
paddle.sum(Tensor([251, 1],"float32"), )
paddle.sum(Tensor([251, 1],"float32"), name=None, )
paddle.sum(Tensor([252, 1],"float32"), )
paddle.sum(Tensor([252, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([252, 240, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([252, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([252, 60800],"float16"), axis=1, )
paddle.sum(Tensor([252, 60800],"float32"), axis=1, )
paddle.sum(Tensor([252, 72960],"float16"), axis=1, )
paddle.sum(Tensor([252, 72960],"float32"), axis=1, )
paddle.sum(Tensor([252, 82688],"float16"), axis=1, )
paddle.sum(Tensor([252, 82688],"float32"), axis=1, )
paddle.sum(Tensor([252],"float32"), )
paddle.sum(Tensor([253, 1],"float32"), )
paddle.sum(Tensor([254, 1],"float32"), )
paddle.sum(Tensor([255, 1],"float32"), )
paddle.sum(Tensor([256, 1000],"float16"), axis=-1, )
paddle.sum(Tensor([256, 1000],"float32"), axis=-1, )
paddle.sum(Tensor([256, 102],"float32"), axis=-1, )
paddle.sum(Tensor([256, 12, 1],"float32"), )
paddle.sum(Tensor([256, 13, 1],"float32"), )
paddle.sum(Tensor([256, 14, 1],"float32"), )
paddle.sum(Tensor([256, 15, 1],"float32"), )
paddle.sum(Tensor([256, 16, 1],"float32"), )
paddle.sum(Tensor([256, 17, 1],"float32"), )
paddle.sum(Tensor([256, 18, 1],"float32"), )
paddle.sum(Tensor([256, 19, 1],"float32"), )
paddle.sum(Tensor([256, 1],"float32"), )
paddle.sum(Tensor([256, 20, 1],"float32"), )
paddle.sum(Tensor([256, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([256, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([256, 28, 28, 80],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([256, 324],"float32"), axis=1, )
paddle.sum(Tensor([256, 380],"float32"), axis=1, )
paddle.sum(Tensor([256, 45],"float32"), axis=1, )
paddle.sum(Tensor([256, 54400],"float16"), axis=1, )
paddle.sum(Tensor([256, 54400],"float32"), axis=1, )
paddle.sum(Tensor([256, 5776],"float32"), axis=1, )
paddle.sum(Tensor([256, 60800],"float16"), axis=1, )
paddle.sum(Tensor([256, 60800],"float32"), axis=1, )
paddle.sum(Tensor([256, 64],"bool"), )
paddle.sum(Tensor([256],"float32"), )
paddle.sum(Tensor([257, 1],"float32"), )
paddle.sum(Tensor([2577, 1],"float32"), )
paddle.sum(Tensor([258, 1],"float32"), )
paddle.sum(Tensor([259, 1],"float32"), )
paddle.sum(Tensor([26, 12],"bool"), )
paddle.sum(Tensor([26, 1],"float32"), )
paddle.sum(Tensor([260, 102144],"float16"), axis=1, )
paddle.sum(Tensor([260, 102144],"float32"), axis=1, )
paddle.sum(Tensor([260, 1],"float32"), )
paddle.sum(Tensor([260, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([260, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([260, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([260, 60800],"float16"), axis=1, )
paddle.sum(Tensor([260, 60800],"float32"), axis=1, )
paddle.sum(Tensor([260, 82688],"float16"), axis=1, )
paddle.sum(Tensor([260, 82688],"float32"), axis=1, )
paddle.sum(Tensor([260],"float32"), )
paddle.sum(Tensor([261, 1],"float32"), )
paddle.sum(Tensor([26182, 16],"float32"), axis=0, )
paddle.sum(Tensor([26182, 2, 16],"float32"), axis=0, )
paddle.sum(Tensor([262, 1],"float32"), )
paddle.sum(Tensor([2624, 1],"float32"), )
paddle.sum(Tensor([263, 1],"float32"), )
paddle.sum(Tensor([264, 14, 1],"float32"), )
paddle.sum(Tensor([264, 15, 1],"float32"), )
paddle.sum(Tensor([264, 16, 1],"float32"), )
paddle.sum(Tensor([264, 17, 1],"float32"), )
paddle.sum(Tensor([264, 18, 1],"float32"), )
paddle.sum(Tensor([264, 19, 1],"float32"), )
paddle.sum(Tensor([264, 1],"float32"), )
paddle.sum(Tensor([264, 280, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([264, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([264, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([264, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([264, 82688],"float16"), axis=1, )
paddle.sum(Tensor([264, 82688],"float32"), axis=1, )
paddle.sum(Tensor([264, 92416],"float16"), axis=1, )
paddle.sum(Tensor([264, 92416],"float32"), axis=1, )
paddle.sum(Tensor([264, 94080],"float16"), axis=1, )
paddle.sum(Tensor([264, 94080],"float32"), axis=1, )
paddle.sum(Tensor([264, 94848],"float16"), axis=1, )
paddle.sum(Tensor([264, 94848],"float32"), axis=1, )
paddle.sum(Tensor([264],"float32"), )
paddle.sum(Tensor([265, 1],"float32"), )
paddle.sum(Tensor([266, 1],"float32"), )
paddle.sum(Tensor([267, 1],"float32"), )
paddle.sum(Tensor([26736, 3],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([268, 1],"float32"), )
paddle.sum(Tensor([268, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([268, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([268, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([268, 54400],"float16"), axis=1, )
paddle.sum(Tensor([268, 54400],"float32"), axis=1, )
paddle.sum(Tensor([268, 82688],"float16"), axis=1, )
paddle.sum(Tensor([268, 82688],"float32"), axis=1, )
paddle.sum(Tensor([268, 92416],"float16"), axis=1, )
paddle.sum(Tensor([268, 92416],"float32"), axis=1, )
paddle.sum(Tensor([268],"float32"), )
paddle.sum(Tensor([269, 1],"float32"), )
paddle.sum(Tensor([27, 1],"float32"), )
paddle.sum(Tensor([270, 1],"float32"), )
paddle.sum(Tensor([270072, 1],"float32"), )
paddle.sum(Tensor([270072],"float32"), )
paddle.sum(Tensor([271, 1],"float32"), )
paddle.sum(Tensor([272, 11, 1],"float32"), )
paddle.sum(Tensor([272, 12, 1],"float32"), )
paddle.sum(Tensor([272, 13, 1],"float32"), )
paddle.sum(Tensor([272, 14, 1],"float32"), )
paddle.sum(Tensor([272, 15, 1],"float32"), )
paddle.sum(Tensor([272, 1],"float32"), )
paddle.sum(Tensor([272, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([272, 232, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([272, 60800],"float16"), axis=1, )
paddle.sum(Tensor([272, 60800],"float32"), axis=1, )
paddle.sum(Tensor([272, 74240],"float16"), axis=1, )
paddle.sum(Tensor([272, 74240],"float32"), axis=1, )
paddle.sum(Tensor([272800, 1],"float32"), )
paddle.sum(Tensor([272800],"float32"), )
paddle.sum(Tensor([272],"float32"), )
paddle.sum(Tensor([273, 1],"float32"), )
paddle.sum(Tensor([274, 1],"float32"), )
paddle.sum(Tensor([275, 1],"float32"), )
paddle.sum(Tensor([276, 1],"float32"), )
paddle.sum(Tensor([276],"float32"), )
paddle.sum(Tensor([277, 1],"float32"), )
paddle.sum(Tensor([278, 1],"float32"), )
paddle.sum(Tensor([279, 1],"float32"), )
paddle.sum(Tensor([28, 102144],"float16"), axis=1, )
paddle.sum(Tensor([28, 102144],"float32"), axis=1, )
paddle.sum(Tensor([28, 1],"float32"), )
paddle.sum(Tensor([28, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 208, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 248, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 256, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 280, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 288, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 288, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 296, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 312, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 328, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([28, 60800],"float16"), axis=1, )
paddle.sum(Tensor([28, 60800],"float32"), axis=1, )
paddle.sum(Tensor([28, 63232],"float16"), axis=1, )
paddle.sum(Tensor([28, 63232],"float32"), axis=1, )
paddle.sum(Tensor([28, 64000],"float16"), axis=1, )
paddle.sum(Tensor([28, 64000],"float32"), axis=1, )
paddle.sum(Tensor([28, 67456],"float16"), axis=1, )
paddle.sum(Tensor([28, 67456],"float32"), axis=1, )
paddle.sum(Tensor([28, 73984],"float16"), axis=1, )
paddle.sum(Tensor([28, 73984],"float32"), axis=1, )
paddle.sum(Tensor([28, 78336],"float16"), axis=1, )
paddle.sum(Tensor([28, 78336],"float32"), axis=1, )
paddle.sum(Tensor([28, 82688],"float16"), axis=1, )
paddle.sum(Tensor([28, 82688],"float32"), axis=1, )
paddle.sum(Tensor([28, 84864],"float16"), axis=1, )
paddle.sum(Tensor([28, 84864],"float32"), axis=1, )
paddle.sum(Tensor([28, 86016],"float16"), axis=1, )
paddle.sum(Tensor([28, 86016],"float32"), axis=1, )
paddle.sum(Tensor([28, 89984],"float16"), axis=1, )
paddle.sum(Tensor([28, 89984],"float32"), axis=1, )
paddle.sum(Tensor([28, 91392],"float16"), axis=1, )
paddle.sum(Tensor([28, 91392],"float32"), axis=1, )
paddle.sum(Tensor([28, 92416],"float16"), axis=1, )
paddle.sum(Tensor([28, 92416],"float32"), axis=1, )
paddle.sum(Tensor([28, 94080],"float16"), axis=1, )
paddle.sum(Tensor([28, 94080],"float32"), axis=1, )
paddle.sum(Tensor([28, 96768],"float16"), axis=1, )
paddle.sum(Tensor([28, 96768],"float32"), axis=1, )
paddle.sum(Tensor([28, 97088],"float16"), axis=1, )
paddle.sum(Tensor([28, 97088],"float32"), axis=1, )
paddle.sum(Tensor([28, 97280],"float16"), axis=1, )
paddle.sum(Tensor([28, 97280],"float32"), axis=1, )
paddle.sum(Tensor([28, 99712],"float16"), axis=1, )
paddle.sum(Tensor([28, 99712],"float32"), axis=1, )
paddle.sum(Tensor([280, 14, 1],"float32"), )
paddle.sum(Tensor([280, 15, 1],"float32"), )
paddle.sum(Tensor([280, 16, 1],"float32"), )
paddle.sum(Tensor([280, 17, 1],"float32"), )
paddle.sum(Tensor([280, 18, 1],"float32"), )
paddle.sum(Tensor([280, 1],"float32"), )
paddle.sum(Tensor([280, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([280, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([280, 60800],"float16"), axis=1, )
paddle.sum(Tensor([280, 60800],"float32"), axis=1, )
paddle.sum(Tensor([280, 82688],"float16"), axis=1, )
paddle.sum(Tensor([280, 82688],"float32"), axis=1, )
paddle.sum(Tensor([2800],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([280],"float32"), )
paddle.sum(Tensor([281, 1],"float32"), )
paddle.sum(Tensor([282, 1],"float32"), )
paddle.sum(Tensor([283, 1],"float32"), )
paddle.sum(Tensor([284, 1],"float32"), )
paddle.sum(Tensor([284],"float32"), )
paddle.sum(Tensor([285, 1],"float32"), )
paddle.sum(Tensor([286, 1],"float32"), )
paddle.sum(Tensor([287, 1],"float32"), )
paddle.sum(Tensor([288, 10, 1],"float32"), )
paddle.sum(Tensor([288, 11, 1],"float32"), )
paddle.sum(Tensor([288, 12, 1],"float32"), )
paddle.sum(Tensor([288, 13, 1],"float32"), )
paddle.sum(Tensor([288, 14, 1],"float32"), )
paddle.sum(Tensor([288, 1],"float32"), )
paddle.sum(Tensor([288, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([288, 73984],"float16"), axis=1, )
paddle.sum(Tensor([288, 73984],"float32"), axis=1, )
paddle.sum(Tensor([288],"float32"), )
paddle.sum(Tensor([289, 1],"float32"), )
paddle.sum(Tensor([28913],"float32"), )
paddle.sum(Tensor([28],"float32"), )
paddle.sum(Tensor([29, 1],"float32"), )
paddle.sum(Tensor([29, 29],"float32"), )
paddle.sum(Tensor([290, 1],"float32"), )
paddle.sum(Tensor([291, 1],"float32"), )
paddle.sum(Tensor([29151, 100, 3],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([292, 1],"float32"), )
paddle.sum(Tensor([292, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([292, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([292, 60800],"float16"), axis=1, )
paddle.sum(Tensor([292, 60800],"float32"), axis=1, )
paddle.sum(Tensor([292, 91392],"float16"), axis=1, )
paddle.sum(Tensor([292, 91392],"float32"), axis=1, )
paddle.sum(Tensor([292],"float32"), )
paddle.sum(Tensor([293, 1],"float32"), )
paddle.sum(Tensor([294, 1],"float32"), )
paddle.sum(Tensor([295, 1],"float32"), )
paddle.sum(Tensor([296, 13, 1],"float32"), )
paddle.sum(Tensor([296, 14, 1],"float32"), )
paddle.sum(Tensor([296, 15, 1],"float32"), )
paddle.sum(Tensor([296, 16, 1],"float32"), )
paddle.sum(Tensor([296, 17, 1],"float32"), )
paddle.sum(Tensor([296, 1],"float32"), )
paddle.sum(Tensor([296, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([296, 60800],"float16"), axis=1, )
paddle.sum(Tensor([296, 60800],"float32"), axis=1, )
paddle.sum(Tensor([296],"float32"), )
paddle.sum(Tensor([297, 1],"float32"), )
paddle.sum(Tensor([298, 1],"float32"), )
paddle.sum(Tensor([299, 1],"float32"), )
paddle.sum(Tensor([2],"float32"), )
paddle.sum(Tensor([2],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([2],"float64"), )
paddle.sum(Tensor([2],"int32"), )
paddle.sum(Tensor([2],"int64"), )
paddle.sum(Tensor([3, 10],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 10],"int64"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 1],"float32"), )
paddle.sum(Tensor([3, 2, 3, 3],"float32"), )
paddle.sum(Tensor([3, 2, 4],"float32"), axis=1, )
paddle.sum(Tensor([3, 2, 5],"float32"), axis=-1, )
paddle.sum(Tensor([3, 2, 5],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([3, 2, 5],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([3, 2, 5],"float32"), axis=list[-2,-1,], keepdim=True, )
paddle.sum(Tensor([3, 2],"float32"), )
paddle.sum(Tensor([3, 2],"float32"), axis=0, )
paddle.sum(Tensor([3, 3, 10, 10],"float32"), )
paddle.sum(Tensor([3, 3, 10, 10],"float32"), name=None, )
paddle.sum(Tensor([3, 3, 3, 3, 3],"float32"), )
paddle.sum(Tensor([3, 3, 3],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([3, 3, 3],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([3, 3, 3],"float64"), list[0,1,], keepdim=False, name=None, )
paddle.sum(Tensor([3, 3, 3],"float64"), tuple(0,1,), keepdim=False, name=None, )
paddle.sum(Tensor([3, 3, 3],"float64"), tuple(0,1,), keepdim=True, name=None, )
paddle.sum(Tensor([3, 3],"float16"), )
paddle.sum(Tensor([3, 3],"float32"), )
paddle.sum(Tensor([3, 3],"float64"), )
paddle.sum(Tensor([3, 3],"int32"), )
paddle.sum(Tensor([3, 3],"int64"), )
paddle.sum(Tensor([3, 4, 2],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4, 2],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 4, 2],"float32"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 4, 2],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4, 2],"float64"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 4, 2],"float64"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 4, 2],"int32"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4, 2],"int32"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 4, 2],"int32"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 4, 2],"int64"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4, 2],"int64"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 4, 2],"int64"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 4, 4, 5, 7],"int64"), )
paddle.sum(Tensor([3, 4],"float16"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4],"float16"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 4],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 4],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4],"float64"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 4],"int64"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4],"int64"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 5],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([3, 5],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([3, 5],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([3, 5],"float32"), axis=-1, )
paddle.sum(Tensor([3, 5],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([3, 5],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([3, 5],"float32"), axis=None, )
paddle.sum(Tensor([3, 5],"float32"), keepdim=True, )
paddle.sum(Tensor([3, 5],"float64"), axis=-1, )
paddle.sum(Tensor([3, 5],"float64"), axis=-1, keepdim=True, )
paddle.sum(Tensor([3, 5],"float64"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([3, 5],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([3, 5],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([3, 96, 1],"float32"), tuple(1,), keepdim=True, name=None, )
paddle.sum(Tensor([30, 1],"float32"), )
paddle.sum(Tensor([30, 200, 40],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([30, 60],"int64"), axis=0, )
paddle.sum(Tensor([300, 1],"float32"), )
paddle.sum(Tensor([300080, 1],"float32"), )
paddle.sum(Tensor([300080],"float32"), )
paddle.sum(Tensor([300],"float32"), )
paddle.sum(Tensor([301, 1],"float32"), )
paddle.sum(Tensor([302, 1],"float32"), )
paddle.sum(Tensor([3029, 3],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([303, 1],"float32"), )
paddle.sum(Tensor([304, 1],"float32"), )
paddle.sum(Tensor([304, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([304, 67200],"float16"), axis=1, )
paddle.sum(Tensor([304, 67200],"float32"), axis=1, )
paddle.sum(Tensor([304],"float32"), )
paddle.sum(Tensor([305, 1],"float32"), )
paddle.sum(Tensor([306, 1],"float32"), )
paddle.sum(Tensor([307, 1],"float32"), )
paddle.sum(Tensor([308, 1],"float32"), )
paddle.sum(Tensor([308, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([308, 92416],"float16"), axis=1, )
paddle.sum(Tensor([308, 92416],"float32"), axis=1, )
paddle.sum(Tensor([308],"float32"), )
paddle.sum(Tensor([309, 1],"float32"), )
paddle.sum(Tensor([31, 1],"float32"), )
paddle.sum(Tensor([310, 1],"float32"), )
paddle.sum(Tensor([311, 1],"float32"), )
paddle.sum(Tensor([312, 10, 1],"float32"), )
paddle.sum(Tensor([312, 11, 1],"float32"), )
paddle.sum(Tensor([312, 12, 1],"float32"), )
paddle.sum(Tensor([312, 13, 1],"float32"), )
paddle.sum(Tensor([312, 14, 1],"float32"), )
paddle.sum(Tensor([312, 16, 1],"float32"), )
paddle.sum(Tensor([312, 1],"float32"), )
paddle.sum(Tensor([312],"float32"), )
paddle.sum(Tensor([313, 1],"float32"), )
paddle.sum(Tensor([314, 1],"float32"), )
paddle.sum(Tensor([315, 1],"float32"), )
paddle.sum(Tensor([316, 1],"float32"), )
paddle.sum(Tensor([316],"float32"), )
paddle.sum(Tensor([317, 1],"float32"), )
paddle.sum(Tensor([318, 1],"float32"), )
paddle.sum(Tensor([319, 1],"float32"), )
paddle.sum(Tensor([32, 100, 1],"float32"), )
paddle.sum(Tensor([32, 101, 1],"float32"), )
paddle.sum(Tensor([32, 102144],"float16"), axis=1, )
paddle.sum(Tensor([32, 102144],"float32"), axis=1, )
paddle.sum(Tensor([32, 102400],"float16"), axis=1, )
paddle.sum(Tensor([32, 102400],"float32"), axis=1, )
paddle.sum(Tensor([32, 102],"float32"), axis=-1, )
paddle.sum(Tensor([32, 103, 1],"float32"), )
paddle.sum(Tensor([32, 104, 1],"float32"), )
paddle.sum(Tensor([32, 104832],"float16"), axis=1, )
paddle.sum(Tensor([32, 104832],"float32"), axis=1, )
paddle.sum(Tensor([32, 105, 1],"float32"), )
paddle.sum(Tensor([32, 106, 1],"float32"), )
paddle.sum(Tensor([32, 107, 1],"float32"), )
paddle.sum(Tensor([32, 107520],"float16"), axis=1, )
paddle.sum(Tensor([32, 107520],"float32"), axis=1, )
paddle.sum(Tensor([32, 108, 1],"float32"), )
paddle.sum(Tensor([32, 109, 1],"float32"), )
paddle.sum(Tensor([32, 110, 1],"float32"), )
paddle.sum(Tensor([32, 111, 1],"float32"), )
paddle.sum(Tensor([32, 112, 1],"float32"), )
paddle.sum(Tensor([32, 112896],"float16"), axis=1, )
paddle.sum(Tensor([32, 112896],"float32"), axis=1, )
paddle.sum(Tensor([32, 113, 1],"float32"), )
paddle.sum(Tensor([32, 114, 1],"float32"), )
paddle.sum(Tensor([32, 115, 1],"float32"), )
paddle.sum(Tensor([32, 117, 1],"float32"), )
paddle.sum(Tensor([32, 118, 1],"float32"), )
paddle.sum(Tensor([32, 121, 1],"float32"), )
paddle.sum(Tensor([32, 122, 1],"float32"), )
paddle.sum(Tensor([32, 123, 1],"float32"), )
paddle.sum(Tensor([32, 124, 1],"float32"), )
paddle.sum(Tensor([32, 125, 1],"float32"), )
paddle.sum(Tensor([32, 126, 1],"float32"), )
paddle.sum(Tensor([32, 127, 1],"float32"), )
paddle.sum(Tensor([32, 128, 128],"float32"), )
paddle.sum(Tensor([32, 128, 1],"float32"), )
paddle.sum(Tensor([32, 128, 256],"float32"), )
paddle.sum(Tensor([32, 129, 1],"float32"), )
paddle.sum(Tensor([32, 130, 1],"float32"), )
paddle.sum(Tensor([32, 131, 1],"float32"), )
paddle.sum(Tensor([32, 132, 1],"float32"), )
paddle.sum(Tensor([32, 133, 1],"float32"), )
paddle.sum(Tensor([32, 135, 1],"float32"), )
paddle.sum(Tensor([32, 137, 1],"float32"), )
paddle.sum(Tensor([32, 139, 1],"float32"), )
paddle.sum(Tensor([32, 140, 1],"float32"), )
paddle.sum(Tensor([32, 141, 1],"float32"), )
paddle.sum(Tensor([32, 142, 1],"float32"), )
paddle.sum(Tensor([32, 144, 1],"float32"), )
paddle.sum(Tensor([32, 146, 1],"float32"), )
paddle.sum(Tensor([32, 150, 1],"float32"), )
paddle.sum(Tensor([32, 151, 1],"float32"), )
paddle.sum(Tensor([32, 153, 1],"float32"), )
paddle.sum(Tensor([32, 154, 1],"float32"), )
paddle.sum(Tensor([32, 157, 1],"float32"), )
paddle.sum(Tensor([32, 158, 1],"float32"), )
paddle.sum(Tensor([32, 159, 1],"float32"), )
paddle.sum(Tensor([32, 16, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([32, 1],"float32"), )
paddle.sum(Tensor([32, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 208, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 224, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 256, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 272, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 280, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 280, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 280, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 288, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 296, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 304, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 304, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 304, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 32, 128],"float32"), axis=1, )
paddle.sum(Tensor([32, 320, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 320, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 328, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 32],"bool"), )
paddle.sum(Tensor([32, 32],"float32"), )
paddle.sum(Tensor([32, 32],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([32, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 336, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 336, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 336, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([32, 37],"float32"), )
paddle.sum(Tensor([32, 512],"bool"), )
paddle.sum(Tensor([32, 512],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([32, 54400],"float16"), axis=1, )
paddle.sum(Tensor([32, 54400],"float32"), axis=1, )
paddle.sum(Tensor([32, 60800],"float16"), axis=1, )
paddle.sum(Tensor([32, 60800],"float32"), axis=1, )
paddle.sum(Tensor([32, 62400],"float16"), axis=1, )
paddle.sum(Tensor([32, 62400],"float32"), axis=1, )
paddle.sum(Tensor([32, 63232],"float16"), axis=1, )
paddle.sum(Tensor([32, 63232],"float32"), axis=1, )
paddle.sum(Tensor([32, 64, 128],"float32"), axis=0, )
paddle.sum(Tensor([32, 64],"bool"), )
paddle.sum(Tensor([32, 67200],"float16"), axis=1, )
paddle.sum(Tensor([32, 67200],"float32"), axis=1, )
paddle.sum(Tensor([32, 68096],"float16"), axis=1, )
paddle.sum(Tensor([32, 68096],"float32"), axis=1, )
paddle.sum(Tensor([32, 73984],"float16"), axis=1, )
paddle.sum(Tensor([32, 73984],"float32"), axis=1, )
paddle.sum(Tensor([32, 76160],"float16"), axis=1, )
paddle.sum(Tensor([32, 76160],"float32"), axis=1, )
paddle.sum(Tensor([32, 77824],"float16"), axis=1, )
paddle.sum(Tensor([32, 77824],"float32"), axis=1, )
paddle.sum(Tensor([32, 78336],"float16"), axis=1, )
paddle.sum(Tensor([32, 78336],"float32"), axis=1, )
paddle.sum(Tensor([32, 8, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([32, 82688],"float16"), axis=1, )
paddle.sum(Tensor([32, 82688],"float32"), axis=1, )
paddle.sum(Tensor([32, 84864],"float16"), axis=1, )
paddle.sum(Tensor([32, 84864],"float32"), axis=1, )
paddle.sum(Tensor([32, 85120],"float16"), axis=1, )
paddle.sum(Tensor([32, 85120],"float32"), axis=1, )
paddle.sum(Tensor([32, 87, 1],"float32"), )
paddle.sum(Tensor([32, 87040],"float16"), axis=1, )
paddle.sum(Tensor([32, 87040],"float32"), axis=1, )
paddle.sum(Tensor([32, 89984],"float16"), axis=1, )
paddle.sum(Tensor([32, 89984],"float32"), axis=1, )
paddle.sum(Tensor([32, 90, 1],"float32"), )
paddle.sum(Tensor([32, 91, 1],"float32"), )
paddle.sum(Tensor([32, 91392],"float16"), axis=1, )
paddle.sum(Tensor([32, 91392],"float32"), axis=1, )
paddle.sum(Tensor([32, 92, 1],"float32"), )
paddle.sum(Tensor([32, 92416],"float16"), axis=1, )
paddle.sum(Tensor([32, 92416],"float32"), axis=1, )
paddle.sum(Tensor([32, 94080],"float16"), axis=1, )
paddle.sum(Tensor([32, 94080],"float32"), axis=1, )
paddle.sum(Tensor([32, 94848],"float16"), axis=1, )
paddle.sum(Tensor([32, 94848],"float32"), axis=1, )
paddle.sum(Tensor([32, 96, 1],"float32"), )
paddle.sum(Tensor([32, 97, 1],"float32"), )
paddle.sum(Tensor([32, 97088],"float16"), axis=1, )
paddle.sum(Tensor([32, 97088],"float32"), axis=1, )
paddle.sum(Tensor([32, 97280],"float16"), axis=1, )
paddle.sum(Tensor([32, 97280],"float32"), axis=1, )
paddle.sum(Tensor([32, 99712],"float16"), axis=1, )
paddle.sum(Tensor([32, 99712],"float32"), axis=1, )
paddle.sum(Tensor([320, 12, 1],"float32"), )
paddle.sum(Tensor([320, 13, 1],"float32"), )
paddle.sum(Tensor([320, 14, 1],"float32"), )
paddle.sum(Tensor([320, 15, 1],"float32"), )
paddle.sum(Tensor([320, 16, 1],"float32"), )
paddle.sum(Tensor([320, 1],"float32"), )
paddle.sum(Tensor([320, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([320, 91392],"float16"), axis=1, )
paddle.sum(Tensor([320, 91392],"float32"), axis=1, )
paddle.sum(Tensor([320],"float32"), )
paddle.sum(Tensor([321, 1],"float32"), )
paddle.sum(Tensor([322, 1],"float32"), )
paddle.sum(Tensor([323, 1],"float32"), )
paddle.sum(Tensor([324, 1],"float32"), )
paddle.sum(Tensor([324],"float32"), )
paddle.sum(Tensor([325, 1],"float32"), )
paddle.sum(Tensor([326, 1],"float32"), )
paddle.sum(Tensor([327, 1],"float32"), )
paddle.sum(Tensor([328, 1],"float32"), )
paddle.sum(Tensor([328],"float32"), )
paddle.sum(Tensor([329, 1],"float32"), )
paddle.sum(Tensor([32],"float32"), )
paddle.sum(Tensor([33, 1],"float32"), )
paddle.sum(Tensor([330, 1],"float32"), )
paddle.sum(Tensor([330088, 1],"float32"), )
paddle.sum(Tensor([330088],"float32"), )
paddle.sum(Tensor([331, 1],"float32"), )
paddle.sum(Tensor([332, 102144],"float16"), axis=1, )
paddle.sum(Tensor([332, 102144],"float32"), axis=1, )
paddle.sum(Tensor([332, 1],"float32"), )
paddle.sum(Tensor([332, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([332, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([332, 60800],"float16"), axis=1, )
paddle.sum(Tensor([332, 60800],"float32"), axis=1, )
paddle.sum(Tensor([332],"float32"), )
paddle.sum(Tensor([333, 1],"float32"), )
paddle.sum(Tensor([334, 1],"float32"), )
paddle.sum(Tensor([335, 1],"float32"), )
paddle.sum(Tensor([336, 10, 1],"float32"), )
paddle.sum(Tensor([336, 11, 1],"float32"), )
paddle.sum(Tensor([336, 12, 1],"float32"), )
paddle.sum(Tensor([336, 13, 1],"float32"), )
paddle.sum(Tensor([336, 14, 1],"float32"), )
paddle.sum(Tensor([336, 15, 1],"float32"), )
paddle.sum(Tensor([336, 1],"float32"), )
paddle.sum(Tensor([336, 9, 1],"float32"), )
paddle.sum(Tensor([336],"float32"), )
paddle.sum(Tensor([337, 1],"float32"), )
paddle.sum(Tensor([338, 1],"float32"), )
paddle.sum(Tensor([339, 1],"float32"), )
paddle.sum(Tensor([34, 1],"float32"), )
paddle.sum(Tensor([340, 1],"float32"), )
paddle.sum(Tensor([340],"float32"), )
paddle.sum(Tensor([341, 1],"float32"), )
paddle.sum(Tensor([342, 1],"float32"), )
paddle.sum(Tensor([343, 1],"float32"), )
paddle.sum(Tensor([34304, 1],"float32"), name=None, )
paddle.sum(Tensor([344, 1],"float32"), )
paddle.sum(Tensor([344],"float32"), )
paddle.sum(Tensor([345, 1],"float32"), )
paddle.sum(Tensor([346, 1],"float32"), )
paddle.sum(Tensor([347, 1],"float32"), )
paddle.sum(Tensor([348, 1],"float32"), )
paddle.sum(Tensor([348],"float32"), )
paddle.sum(Tensor([349, 1],"float32"), )
paddle.sum(Tensor([35, 1],"float32"), )
paddle.sum(Tensor([350, 1],"float32"), )
paddle.sum(Tensor([351, 1],"float32"), )
paddle.sum(Tensor([352, 14, 1],"float32"), )
paddle.sum(Tensor([352, 1],"float32"), )
paddle.sum(Tensor([352],"float32"), )
paddle.sum(Tensor([353, 1],"float32"), )
paddle.sum(Tensor([354, 1],"float32"), )
paddle.sum(Tensor([355, 1],"float32"), )
paddle.sum(Tensor([356, 1],"float32"), )
paddle.sum(Tensor([356],"float32"), )
paddle.sum(Tensor([357, 1],"float32"), )
paddle.sum(Tensor([358, 1],"float32"), )
paddle.sum(Tensor([359, 1],"float32"), )
paddle.sum(Tensor([36, 100],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([36, 102144],"float16"), axis=1, )
paddle.sum(Tensor([36, 102144],"float32"), axis=1, )
paddle.sum(Tensor([36, 1],"float32"), )
paddle.sum(Tensor([36, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 200, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 200, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 208, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 2304],"float32"), 1, keepdim=False, name=None, )
paddle.sum(Tensor([36, 232, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 240, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 256, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 256, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 264, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 264, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 272, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 272, 216],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 272, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 272, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 280, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 288, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 288, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 296, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 296, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 304, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 304, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 320, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 328, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([36, 54400],"float16"), axis=1, )
paddle.sum(Tensor([36, 54400],"float32"), axis=1, )
paddle.sum(Tensor([36, 56000],"float16"), axis=1, )
paddle.sum(Tensor([36, 56000],"float32"), axis=1, )
paddle.sum(Tensor([36, 58752],"float16"), axis=1, )
paddle.sum(Tensor([36, 58752],"float32"), axis=1, )
paddle.sum(Tensor([36, 59200],"float16"), axis=1, )
paddle.sum(Tensor([36, 59200],"float32"), axis=1, )
paddle.sum(Tensor([36, 60800],"float16"), axis=1, )
paddle.sum(Tensor([36, 60800],"float32"), axis=1, )
paddle.sum(Tensor([36, 62400],"float16"), axis=1, )
paddle.sum(Tensor([36, 62400],"float32"), axis=1, )
paddle.sum(Tensor([36, 63232],"float16"), axis=1, )
paddle.sum(Tensor([36, 63232],"float32"), axis=1, )
paddle.sum(Tensor([36, 64000],"float16"), axis=1, )
paddle.sum(Tensor([36, 64000],"float32"), axis=1, )
paddle.sum(Tensor([36, 67200],"float16"), axis=1, )
paddle.sum(Tensor([36, 67200],"float32"), axis=1, )
paddle.sum(Tensor([36, 70528],"float16"), axis=1, )
paddle.sum(Tensor([36, 70528],"float32"), axis=1, )
paddle.sum(Tensor([36, 72960],"float16"), axis=1, )
paddle.sum(Tensor([36, 72960],"float32"), axis=1, )
paddle.sum(Tensor([36, 73984],"float16"), axis=1, )
paddle.sum(Tensor([36, 73984],"float32"), axis=1, )
paddle.sum(Tensor([36, 77824],"float16"), axis=1, )
paddle.sum(Tensor([36, 77824],"float32"), axis=1, )
paddle.sum(Tensor([36, 78336],"float16"), axis=1, )
paddle.sum(Tensor([36, 78336],"float32"), axis=1, )
paddle.sum(Tensor([36, 80256],"float16"), axis=1, )
paddle.sum(Tensor([36, 80256],"float32"), axis=1, )
paddle.sum(Tensor([36, 80512],"float16"), axis=1, )
paddle.sum(Tensor([36, 80512],"float32"), axis=1, )
paddle.sum(Tensor([36, 82688],"float16"), axis=1, )
paddle.sum(Tensor([36, 82688],"float32"), axis=1, )
paddle.sum(Tensor([36, 84480],"float16"), axis=1, )
paddle.sum(Tensor([36, 84480],"float32"), axis=1, )
paddle.sum(Tensor([36, 84864],"float16"), axis=1, )
paddle.sum(Tensor([36, 84864],"float32"), axis=1, )
paddle.sum(Tensor([36, 85120],"float16"), axis=1, )
paddle.sum(Tensor([36, 85120],"float32"), axis=1, )
paddle.sum(Tensor([36, 86016],"float16"), axis=1, )
paddle.sum(Tensor([36, 86016],"float32"), axis=1, )
paddle.sum(Tensor([36, 87040],"float16"), axis=1, )
paddle.sum(Tensor([36, 87040],"float32"), axis=1, )
paddle.sum(Tensor([36, 87360],"float16"), axis=1, )
paddle.sum(Tensor([36, 87360],"float32"), axis=1, )
paddle.sum(Tensor([36, 87552],"float16"), axis=1, )
paddle.sum(Tensor([36, 87552],"float32"), axis=1, )
paddle.sum(Tensor([36, 89216],"float16"), axis=1, )
paddle.sum(Tensor([36, 89216],"float32"), axis=1, )
paddle.sum(Tensor([36, 89984],"float16"), axis=1, )
paddle.sum(Tensor([36, 89984],"float32"), axis=1, )
paddle.sum(Tensor([36, 91392],"float16"), axis=1, )
paddle.sum(Tensor([36, 91392],"float32"), axis=1, )
paddle.sum(Tensor([36, 92416],"float16"), axis=1, )
paddle.sum(Tensor([36, 92416],"float32"), axis=1, )
paddle.sum(Tensor([36, 94848],"float16"), axis=1, )
paddle.sum(Tensor([36, 94848],"float32"), axis=1, )
paddle.sum(Tensor([36, 97280],"float16"), axis=1, )
paddle.sum(Tensor([36, 97280],"float32"), axis=1, )
paddle.sum(Tensor([36, 99456],"float16"), axis=1, )
paddle.sum(Tensor([36, 99456],"float32"), axis=1, )
paddle.sum(Tensor([360, 11, 1],"float32"), )
paddle.sum(Tensor([360, 12, 1],"float32"), )
paddle.sum(Tensor([360, 13, 1],"float32"), )
paddle.sum(Tensor([360, 14, 1],"float32"), )
paddle.sum(Tensor([360, 1],"float32"), )
paddle.sum(Tensor([360, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([360, 67200],"float16"), axis=1, )
paddle.sum(Tensor([360, 67200],"float32"), axis=1, )
paddle.sum(Tensor([360],"float32"), )
paddle.sum(Tensor([361, 1],"float32"), )
paddle.sum(Tensor([362, 1],"float32"), )
paddle.sum(Tensor([363, 1],"float32"), )
paddle.sum(Tensor([364, 102144],"float16"), axis=1, )
paddle.sum(Tensor([364, 102144],"float32"), axis=1, )
paddle.sum(Tensor([364, 1],"float32"), )
paddle.sum(Tensor([364, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([364],"float32"), )
paddle.sum(Tensor([365, 1],"float32"), )
paddle.sum(Tensor([366, 1],"float32"), )
paddle.sum(Tensor([367, 1],"float32"), )
paddle.sum(Tensor([368, 10, 1],"float32"), )
paddle.sum(Tensor([368, 11, 1],"float32"), )
paddle.sum(Tensor([368, 1],"float32"), )
paddle.sum(Tensor([368, 9, 1],"float32"), )
paddle.sum(Tensor([368],"float32"), )
paddle.sum(Tensor([369, 1],"float32"), )
paddle.sum(Tensor([36],"float32"), )
paddle.sum(Tensor([37, 1],"float32"), )
paddle.sum(Tensor([37, 32],"float32"), )
paddle.sum(Tensor([370, 1],"float32"), )
paddle.sum(Tensor([371, 1],"float32"), )
paddle.sum(Tensor([3715, 1],"float32"), )
paddle.sum(Tensor([372, 102144],"float16"), axis=1, )
paddle.sum(Tensor([372, 102144],"float32"), axis=1, )
paddle.sum(Tensor([372, 1],"float32"), )
paddle.sum(Tensor([372, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([372],"float32"), )
paddle.sum(Tensor([373, 1],"float32"), )
paddle.sum(Tensor([374, 1],"float32"), )
paddle.sum(Tensor([375, 1],"float32"), )
paddle.sum(Tensor([376, 1],"float32"), )
paddle.sum(Tensor([376],"float32"), )
paddle.sum(Tensor([377, 1],"float32"), )
paddle.sum(Tensor([378, 1],"float32"), )
paddle.sum(Tensor([379, 1],"float32"), )
paddle.sum(Tensor([37],"float32"), )
paddle.sum(Tensor([38, 1],"float32"), )
paddle.sum(Tensor([38, 2560],"float32"), 1, keepdim=False, name=None, )
paddle.sum(Tensor([380, 1],"float32"), )
paddle.sum(Tensor([380],"float32"), )
paddle.sum(Tensor([381, 1],"float32"), )
paddle.sum(Tensor([382, 1],"float32"), )
paddle.sum(Tensor([383, 1],"float32"), )
paddle.sum(Tensor([384, 192, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([384, 1],"float32"), )
paddle.sum(Tensor([384, 96, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([384],"float32"), )
paddle.sum(Tensor([385, 1],"float32"), )
paddle.sum(Tensor([386, 1],"float32"), )
paddle.sum(Tensor([387, 1],"float32"), )
paddle.sum(Tensor([388, 1],"float32"), )
paddle.sum(Tensor([3887, 3],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([388],"float32"), )
paddle.sum(Tensor([389, 1],"float32"), )
paddle.sum(Tensor([39, 1],"float32"), )
paddle.sum(Tensor([390, 1],"float32"), )
paddle.sum(Tensor([391, 1],"float32"), )
paddle.sum(Tensor([392, 10, 1],"float32"), )
paddle.sum(Tensor([392, 11, 1],"float32"), )
paddle.sum(Tensor([392, 12, 1],"float32"), )
paddle.sum(Tensor([392, 13, 1],"float32"), )
paddle.sum(Tensor([392, 1],"float32"), )
paddle.sum(Tensor([392],"float32"), )
paddle.sum(Tensor([393, 1],"float32"), )
paddle.sum(Tensor([393448],"float32"), )
paddle.sum(Tensor([394, 1],"float32"), )
paddle.sum(Tensor([395, 1],"float32"), )
paddle.sum(Tensor([396, 1],"float32"), )
paddle.sum(Tensor([396],"float32"), )
paddle.sum(Tensor([397, 1],"float32"), )
paddle.sum(Tensor([398, 1],"float32"), )
paddle.sum(Tensor([399, 1],"float32"), )
paddle.sum(Tensor([3],"float32"), )
paddle.sum(Tensor([3],"float32"), axis=-1, )
paddle.sum(Tensor([3],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([3],"float32"), name=None, )
paddle.sum(Tensor([3],"float64"), )
paddle.sum(Tensor([3],"float64"), axis=-1, )
paddle.sum(Tensor([3],"float64"), axis=-1, keepdim=True, )
paddle.sum(Tensor([4, 1, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 1, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 10, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 102144],"float16"), axis=1, )
paddle.sum(Tensor([4, 102144],"float32"), axis=1, )
paddle.sum(Tensor([4, 102],"float32"), axis=-1, )
paddle.sum(Tensor([4, 112896],"float16"), axis=1, )
paddle.sum(Tensor([4, 112896],"float32"), axis=1, )
paddle.sum(Tensor([4, 113, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 115, 1],"float32"), )
paddle.sum(Tensor([4, 119, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 12, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 120, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 121, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 127, 1],"float32"), )
paddle.sum(Tensor([4, 127, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 130, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 135, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 147, 1],"float32"), )
paddle.sum(Tensor([4, 148, 1],"float32"), )
paddle.sum(Tensor([4, 15, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 152, 1],"float32"), )
paddle.sum(Tensor([4, 16, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 163, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 164, 1],"float32"), )
paddle.sum(Tensor([4, 166, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 167, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 17, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 171, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 172, 1],"float32"), )
paddle.sum(Tensor([4, 173, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 174, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 176, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 180, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 19, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 198, 1],"float32"), )
paddle.sum(Tensor([4, 1],"float32"), )
paddle.sum(Tensor([4, 2, 1, 512, 4, 4],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([4, 2, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 2, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 20, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([4, 20],"float32"), )
paddle.sum(Tensor([4, 211, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 22, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 23, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 234, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 24, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 25, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 26, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 27, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([4, 272, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([4, 28, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 280, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([4, 29, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 296, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([4, 3, 2, 5],"float32"), axis=list[1,3,], keepdim=False, )
paddle.sum(Tensor([4, 3, 2, 5],"float32"), axis=list[1,3,], keepdim=True, )
paddle.sum(Tensor([4, 3, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 3, 2],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([4, 3, 2],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([4, 3, 3, 4],"float64"), name=None, )
paddle.sum(Tensor([4, 3, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 30, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 304, 1],"float32"), )
paddle.sum(Tensor([4, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([4, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([4, 31, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 312, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([4, 320, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([4, 33, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 333, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 336, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([4, 34, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 346, 1],"float32"), )
paddle.sum(Tensor([4, 35, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 36, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 37, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 377, 1],"float32"), )
paddle.sum(Tensor([4, 39, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 394, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 396, 1],"float32"), )
paddle.sum(Tensor([4, 3],"float16"), axis=1, )
paddle.sum(Tensor([4, 3],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([4, 3],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([4, 3],"float64"), axis=list[1,], )
paddle.sum(Tensor([4, 4, 128, 128],"float32"), )
paddle.sum(Tensor([4, 4, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 4, 4],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([4, 4, 4],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([4, 40, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 41, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 418, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 43, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 45, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 46, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 465, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 47, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 48, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 4],"complex128"), )
paddle.sum(Tensor([4, 4],"complex64"), )
paddle.sum(Tensor([4, 4],"float16"), )
paddle.sum(Tensor([4, 4],"float32"), )
paddle.sum(Tensor([4, 4],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([4, 4],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([4, 4],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([4, 5, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 5, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 50, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 51, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 52, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 525, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 53, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 56, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 58, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 5],"float32"), )
paddle.sum(Tensor([4, 5],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([4, 6, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 60],"int64"), axis=0, )
paddle.sum(Tensor([4, 62, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 63, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 64, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 640, 640],"float32"), )
paddle.sum(Tensor([4, 65, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 67200],"float16"), axis=1, )
paddle.sum(Tensor([4, 67200],"float32"), axis=1, )
paddle.sum(Tensor([4, 7, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 73, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 73984],"float16"), axis=1, )
paddle.sum(Tensor([4, 73984],"float32"), axis=1, )
paddle.sum(Tensor([4, 77, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 78, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 80, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 80512],"float16"), axis=1, )
paddle.sum(Tensor([4, 80512],"float32"), axis=1, )
paddle.sum(Tensor([4, 81, 94, 311],"float32"), axis=1, )
paddle.sum(Tensor([4, 82688],"float16"), axis=1, )
paddle.sum(Tensor([4, 82688],"float32"), axis=1, )
paddle.sum(Tensor([4, 83, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 84864],"float16"), axis=1, )
paddle.sum(Tensor([4, 84864],"float32"), axis=1, )
paddle.sum(Tensor([4, 87360],"float16"), axis=1, )
paddle.sum(Tensor([4, 87360],"float32"), axis=1, )
paddle.sum(Tensor([4, 89, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 90, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 92, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 92416],"float16"), axis=1, )
paddle.sum(Tensor([4, 92416],"float32"), axis=1, )
paddle.sum(Tensor([4, 95, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 960, 960],"float32"), )
paddle.sum(Tensor([4, 97, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 97280],"float16"), axis=1, )
paddle.sum(Tensor([4, 97280],"float32"), axis=1, )
paddle.sum(Tensor([4, 98, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([4, 99, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([40, 100, 1],"float32"), )
paddle.sum(Tensor([40, 102, 1],"float32"), )
paddle.sum(Tensor([40, 102144],"float16"), axis=1, )
paddle.sum(Tensor([40, 102144],"float32"), axis=1, )
paddle.sum(Tensor([40, 104, 1],"float32"), )
paddle.sum(Tensor([40, 104832],"float16"), axis=1, )
paddle.sum(Tensor([40, 104832],"float32"), axis=1, )
paddle.sum(Tensor([40, 105, 1],"float32"), )
paddle.sum(Tensor([40, 107, 1],"float32"), )
paddle.sum(Tensor([40, 110, 1],"float32"), )
paddle.sum(Tensor([40, 111, 1],"float32"), )
paddle.sum(Tensor([40, 112896],"float16"), axis=1, )
paddle.sum(Tensor([40, 112896],"float32"), axis=1, )
paddle.sum(Tensor([40, 113, 1],"float32"), )
paddle.sum(Tensor([40, 114, 1],"float32"), )
paddle.sum(Tensor([40, 115, 1],"float32"), )
paddle.sum(Tensor([40, 117, 1],"float32"), )
paddle.sum(Tensor([40, 118, 1],"float32"), )
paddle.sum(Tensor([40, 122, 1],"float32"), )
paddle.sum(Tensor([40, 123, 1],"float32"), )
paddle.sum(Tensor([40, 124, 1],"float32"), )
paddle.sum(Tensor([40, 125, 1],"float32"), )
paddle.sum(Tensor([40, 127, 1],"float32"), )
paddle.sum(Tensor([40, 128, 1],"float32"), )
paddle.sum(Tensor([40, 1],"float32"), )
paddle.sum(Tensor([40, 20, 50],"float32"), )
paddle.sum(Tensor([40, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 200, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 208, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 208, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 216, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 216, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 232, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 256, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 256, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 264, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 272, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 272, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 272, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 280, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 280, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 280, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 288, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 296, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 296, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 304, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 304, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 312, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 312, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 312, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 320, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 328, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 336, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 336, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 336, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([40, 512],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([40, 54400],"float16"), axis=1, )
paddle.sum(Tensor([40, 54400],"float32"), axis=1, )
paddle.sum(Tensor([40, 56576],"float16"), axis=1, )
paddle.sum(Tensor([40, 56576],"float32"), axis=1, )
paddle.sum(Tensor([40, 59200],"float16"), axis=1, )
paddle.sum(Tensor([40, 59200],"float32"), axis=1, )
paddle.sum(Tensor([40, 60800],"float16"), axis=1, )
paddle.sum(Tensor([40, 60800],"float32"), axis=1, )
paddle.sum(Tensor([40, 63232],"float16"), axis=1, )
paddle.sum(Tensor([40, 63232],"float32"), axis=1, )
paddle.sum(Tensor([40, 63936],"float16"), axis=1, )
paddle.sum(Tensor([40, 63936],"float32"), axis=1, )
paddle.sum(Tensor([40, 64000],"float16"), axis=1, )
paddle.sum(Tensor([40, 64000],"float32"), axis=1, )
paddle.sum(Tensor([40, 67200],"float16"), axis=1, )
paddle.sum(Tensor([40, 67200],"float32"), axis=1, )
paddle.sum(Tensor([40, 67392],"float16"), axis=1, )
paddle.sum(Tensor([40, 67392],"float32"), axis=1, )
paddle.sum(Tensor([40, 69632],"float16"), axis=1, )
paddle.sum(Tensor([40, 69632],"float32"), axis=1, )
paddle.sum(Tensor([40, 70528],"float16"), axis=1, )
paddle.sum(Tensor([40, 70528],"float32"), axis=1, )
paddle.sum(Tensor([40, 73984],"float16"), axis=1, )
paddle.sum(Tensor([40, 73984],"float32"), axis=1, )
paddle.sum(Tensor([40, 76, 1],"float32"), )
paddle.sum(Tensor([40, 76160],"float16"), axis=1, )
paddle.sum(Tensor([40, 76160],"float32"), axis=1, )
paddle.sum(Tensor([40, 77, 1],"float32"), )
paddle.sum(Tensor([40, 78144],"float16"), axis=1, )
paddle.sum(Tensor([40, 78144],"float32"), axis=1, )
paddle.sum(Tensor([40, 78336],"float16"), axis=1, )
paddle.sum(Tensor([40, 78336],"float32"), axis=1, )
paddle.sum(Tensor([40, 78400],"float16"), axis=1, )
paddle.sum(Tensor([40, 78400],"float32"), axis=1, )
paddle.sum(Tensor([40, 80, 1],"float32"), )
paddle.sum(Tensor([40, 80512],"float16"), axis=1, )
paddle.sum(Tensor([40, 80512],"float32"), axis=1, )
paddle.sum(Tensor([40, 82, 1],"float32"), )
paddle.sum(Tensor([40, 82688],"float16"), axis=1, )
paddle.sum(Tensor([40, 82688],"float32"), axis=1, )
paddle.sum(Tensor([40, 83, 1],"float32"), )
paddle.sum(Tensor([40, 84864],"float16"), axis=1, )
paddle.sum(Tensor([40, 84864],"float32"), axis=1, )
paddle.sum(Tensor([40, 85, 1],"float32"), )
paddle.sum(Tensor([40, 85120],"float16"), axis=1, )
paddle.sum(Tensor([40, 85120],"float32"), axis=1, )
paddle.sum(Tensor([40, 86, 1],"float32"), )
paddle.sum(Tensor([40, 86016],"float16"), axis=1, )
paddle.sum(Tensor([40, 86016],"float32"), axis=1, )
paddle.sum(Tensor([40, 87, 1],"float32"), )
paddle.sum(Tensor([40, 87040],"float16"), axis=1, )
paddle.sum(Tensor([40, 87040],"float32"), axis=1, )
paddle.sum(Tensor([40, 88, 1],"float32"), )
paddle.sum(Tensor([40, 89, 1],"float32"), )
paddle.sum(Tensor([40, 89216],"float16"), axis=1, )
paddle.sum(Tensor([40, 89216],"float32"), axis=1, )
paddle.sum(Tensor([40, 89984],"float16"), axis=1, )
paddle.sum(Tensor([40, 89984],"float32"), axis=1, )
paddle.sum(Tensor([40, 90, 1],"float32"), )
paddle.sum(Tensor([40, 91, 1],"float32"), )
paddle.sum(Tensor([40, 91392],"float16"), axis=1, )
paddle.sum(Tensor([40, 91392],"float32"), axis=1, )
paddle.sum(Tensor([40, 92, 1],"float32"), )
paddle.sum(Tensor([40, 92416],"float16"), axis=1, )
paddle.sum(Tensor([40, 92416],"float32"), axis=1, )
paddle.sum(Tensor([40, 93, 1],"float32"), )
paddle.sum(Tensor([40, 94, 1],"float32"), )
paddle.sum(Tensor([40, 94080],"float16"), axis=1, )
paddle.sum(Tensor([40, 94080],"float32"), axis=1, )
paddle.sum(Tensor([40, 94848],"float16"), axis=1, )
paddle.sum(Tensor([40, 94848],"float32"), axis=1, )
paddle.sum(Tensor([40, 95, 1],"float32"), )
paddle.sum(Tensor([40, 96, 1],"float32"), )
paddle.sum(Tensor([40, 97, 1],"float32"), )
paddle.sum(Tensor([40, 97280],"float16"), axis=1, )
paddle.sum(Tensor([40, 97280],"float32"), axis=1, )
paddle.sum(Tensor([40, 98, 1],"float32"), )
paddle.sum(Tensor([40, 99, 1],"float32"), )
paddle.sum(Tensor([40, 99456],"float16"), axis=1, )
paddle.sum(Tensor([40, 99456],"float32"), axis=1, )
paddle.sum(Tensor([40, 99712],"float16"), axis=1, )
paddle.sum(Tensor([40, 99712],"float32"), axis=1, )
paddle.sum(Tensor([400, 1],"float32"), )
paddle.sum(Tensor([400, 300, 20, 10],"float32"), axis=tuple(0,1,), )
paddle.sum(Tensor([400],"float32"), )
paddle.sum(Tensor([401, 1],"float32"), )
paddle.sum(Tensor([402, 1],"float32"), )
paddle.sum(Tensor([402297],"float32"), )
paddle.sum(Tensor([403, 1],"float32"), )
paddle.sum(Tensor([403230],"float32"), )
paddle.sum(Tensor([404, 1],"float32"), )
paddle.sum(Tensor([404],"float32"), )
paddle.sum(Tensor([405, 1],"float32"), )
paddle.sum(Tensor([405960],"float32"), )
paddle.sum(Tensor([406, 1],"float32"), )
paddle.sum(Tensor([407, 1],"float32"), )
paddle.sum(Tensor([408, 10, 1],"float32"), )
paddle.sum(Tensor([408, 12, 1],"float32"), )
paddle.sum(Tensor([408, 1],"float32"), )
paddle.sum(Tensor([408, 8, 1],"float32"), )
paddle.sum(Tensor([408, 9, 1],"float32"), )
paddle.sum(Tensor([408910],"float32"), )
paddle.sum(Tensor([408921],"float32"), )
paddle.sum(Tensor([408],"float32"), )
paddle.sum(Tensor([409, 1],"float32"), )
paddle.sum(Tensor([409600],"float32"), )
paddle.sum(Tensor([4096],"float16"), )
paddle.sum(Tensor([4096],"float32"), )
paddle.sum(Tensor([40],"float32"), )
paddle.sum(Tensor([40],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([40],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([40],"int32"), axis=0, keepdim=True, )
paddle.sum(Tensor([40],"int64"), axis=0, keepdim=True, )
paddle.sum(Tensor([41, 1],"float32"), )
paddle.sum(Tensor([410, 1],"float32"), )
paddle.sum(Tensor([411, 1],"float32"), )
paddle.sum(Tensor([412, 1],"float32"), )
paddle.sum(Tensor([412],"float32"), )
paddle.sum(Tensor([413, 1],"float32"), )
paddle.sum(Tensor([414, 1],"float32"), )
paddle.sum(Tensor([4148, 30],"bool"), )
paddle.sum(Tensor([415, 1],"float32"), )
paddle.sum(Tensor([416, 1],"float32"), )
paddle.sum(Tensor([416],"float32"), )
paddle.sum(Tensor([417, 1],"float32"), )
paddle.sum(Tensor([418, 1],"float32"), )
paddle.sum(Tensor([419, 1],"float32"), )
paddle.sum(Tensor([4194304],"float16"), )
paddle.sum(Tensor([42, 1],"float32"), )
paddle.sum(Tensor([420, 1],"float32"), )
paddle.sum(Tensor([420],"float32"), )
paddle.sum(Tensor([421, 1],"float32"), )
paddle.sum(Tensor([422, 1],"float32"), )
paddle.sum(Tensor([423, 1],"float32"), )
paddle.sum(Tensor([424, 10, 1],"float32"), )
paddle.sum(Tensor([424, 11, 1],"float32"), )
paddle.sum(Tensor([424, 12, 1],"float32"), )
paddle.sum(Tensor([424, 1],"float32"), )
paddle.sum(Tensor([424, 9, 1],"float32"), )
paddle.sum(Tensor([424],"float32"), )
paddle.sum(Tensor([425, 1],"float32"), )
paddle.sum(Tensor([426, 1],"float32"), )
paddle.sum(Tensor([427, 1],"float32"), )
paddle.sum(Tensor([428, 1],"float32"), )
paddle.sum(Tensor([428],"float32"), )
paddle.sum(Tensor([429, 1],"float32"), )
paddle.sum(Tensor([43, 1],"float32"), )
paddle.sum(Tensor([430, 1],"float32"), )
paddle.sum(Tensor([431, 1],"float32"), )
paddle.sum(Tensor([432, 1],"float32"), )
paddle.sum(Tensor([432],"float32"), )
paddle.sum(Tensor([433, 1],"float32"), )
paddle.sum(Tensor([434, 1],"float32"), )
paddle.sum(Tensor([435, 1],"float32"), )
paddle.sum(Tensor([436, 1],"float32"), )
paddle.sum(Tensor([436],"float32"), )
paddle.sum(Tensor([437, 1],"float32"), )
paddle.sum(Tensor([438, 1],"float32"), )
paddle.sum(Tensor([439, 1],"float32"), )
paddle.sum(Tensor([44, 102144],"float16"), axis=1, )
paddle.sum(Tensor([44, 102144],"float32"), axis=1, )
paddle.sum(Tensor([44, 1],"float32"), )
paddle.sum(Tensor([44, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 208, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 248, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 264, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 272, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 296, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 304, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 312, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 312, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 328, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([44, 54400],"float16"), axis=1, )
paddle.sum(Tensor([44, 54400],"float32"), axis=1, )
paddle.sum(Tensor([44, 60800],"float16"), axis=1, )
paddle.sum(Tensor([44, 60800],"float32"), axis=1, )
paddle.sum(Tensor([44, 63232],"float16"), axis=1, )
paddle.sum(Tensor([44, 63232],"float32"), axis=1, )
paddle.sum(Tensor([44, 64000],"float16"), axis=1, )
paddle.sum(Tensor([44, 64000],"float32"), axis=1, )
paddle.sum(Tensor([44, 67200],"float16"), axis=1, )
paddle.sum(Tensor([44, 67200],"float32"), axis=1, )
paddle.sum(Tensor([44, 73984],"float16"), axis=1, )
paddle.sum(Tensor([44, 73984],"float32"), axis=1, )
paddle.sum(Tensor([44, 75392],"float16"), axis=1, )
paddle.sum(Tensor([44, 75392],"float32"), axis=1, )
paddle.sum(Tensor([44, 78144],"float16"), axis=1, )
paddle.sum(Tensor([44, 78144],"float32"), axis=1, )
paddle.sum(Tensor([44, 80512],"float16"), axis=1, )
paddle.sum(Tensor([44, 80512],"float32"), axis=1, )
paddle.sum(Tensor([44, 82688],"float16"), axis=1, )
paddle.sum(Tensor([44, 82688],"float32"), axis=1, )
paddle.sum(Tensor([44, 84864],"float16"), axis=1, )
paddle.sum(Tensor([44, 84864],"float32"), axis=1, )
paddle.sum(Tensor([44, 91392],"float16"), axis=1, )
paddle.sum(Tensor([44, 91392],"float32"), axis=1, )
paddle.sum(Tensor([44, 92416],"float16"), axis=1, )
paddle.sum(Tensor([44, 92416],"float32"), axis=1, )
paddle.sum(Tensor([44, 94848],"float16"), axis=1, )
paddle.sum(Tensor([44, 94848],"float32"), axis=1, )
paddle.sum(Tensor([44, 97088],"float16"), axis=1, )
paddle.sum(Tensor([44, 97088],"float32"), axis=1, )
paddle.sum(Tensor([44, 99712],"float16"), axis=1, )
paddle.sum(Tensor([44, 99712],"float32"), axis=1, )
paddle.sum(Tensor([440, 1],"float32"), )
paddle.sum(Tensor([440],"float32"), )
paddle.sum(Tensor([441, 1],"float32"), )
paddle.sum(Tensor([442, 1],"float32"), )
paddle.sum(Tensor([443, 1],"float32"), )
paddle.sum(Tensor([444, 1],"float32"), )
paddle.sum(Tensor([444],"float32"), )
paddle.sum(Tensor([445, 1],"float32"), )
paddle.sum(Tensor([446, 1],"float32"), )
paddle.sum(Tensor([447, 1],"float32"), )
paddle.sum(Tensor([448, 1],"float32"), )
paddle.sum(Tensor([448, 8, 1],"float32"), )
paddle.sum(Tensor([448, 9, 1],"float32"), )
paddle.sum(Tensor([448],"float32"), )
paddle.sum(Tensor([449, 1],"float32"), )
paddle.sum(Tensor([44],"float32"), )
paddle.sum(Tensor([45, 1],"float32"), )
paddle.sum(Tensor([450, 1],"float32"), )
paddle.sum(Tensor([450, 1],"int32"), )
paddle.sum(Tensor([451, 1],"float32"), )
paddle.sum(Tensor([452, 1],"float32"), )
paddle.sum(Tensor([452],"float32"), )
paddle.sum(Tensor([453, 1],"float32"), )
paddle.sum(Tensor([454, 1],"float32"), )
paddle.sum(Tensor([455, 1],"float32"), )
paddle.sum(Tensor([456, 1],"float32"), )
paddle.sum(Tensor([456],"float32"), )
paddle.sum(Tensor([457, 1],"float32"), )
paddle.sum(Tensor([458, 1],"float32"), )
paddle.sum(Tensor([459, 1, 200],"float32"), axis=-1, )
paddle.sum(Tensor([459, 1],"float32"), )
paddle.sum(Tensor([46, 14],"bool"), )
paddle.sum(Tensor([46, 1],"float32"), )
paddle.sum(Tensor([460, 1],"float32"), )
paddle.sum(Tensor([460],"float32"), )
paddle.sum(Tensor([461, 1],"float32"), )
paddle.sum(Tensor([462, 1],"float32"), )
paddle.sum(Tensor([463, 1],"float32"), )
paddle.sum(Tensor([464, 10, 1],"float32"), )
paddle.sum(Tensor([464, 11, 1],"float32"), )
paddle.sum(Tensor([464, 1],"float32"), )
paddle.sum(Tensor([464, 9, 1],"float32"), )
paddle.sum(Tensor([464],"float32"), )
paddle.sum(Tensor([465, 1, 200],"float32"), axis=-1, )
paddle.sum(Tensor([465, 1],"float32"), )
paddle.sum(Tensor([466, 1],"float32"), )
paddle.sum(Tensor([467, 1],"float32"), )
paddle.sum(Tensor([468, 1],"float32"), )
paddle.sum(Tensor([468],"float32"), )
paddle.sum(Tensor([469, 1],"float32"), )
paddle.sum(Tensor([469, 1],"int32"), )
paddle.sum(Tensor([47, 1],"float32"), )
paddle.sum(Tensor([470, 1],"float32"), )
paddle.sum(Tensor([471, 1],"float32"), )
paddle.sum(Tensor([472, 1],"float32"), )
paddle.sum(Tensor([472],"float32"), )
paddle.sum(Tensor([473, 1],"float32"), )
paddle.sum(Tensor([474, 1],"float32"), )
paddle.sum(Tensor([476, 1],"float32"), )
paddle.sum(Tensor([476],"float32"), )
paddle.sum(Tensor([477, 1],"float32"), )
paddle.sum(Tensor([478, 1],"float32"), )
paddle.sum(Tensor([479, 1],"float32"), )
paddle.sum(Tensor([48, 100, 1],"float32"), )
paddle.sum(Tensor([48, 101, 1],"float32"), )
paddle.sum(Tensor([48, 102, 1],"float32"), )
paddle.sum(Tensor([48, 102144],"float16"), axis=1, )
paddle.sum(Tensor([48, 102144],"float32"), axis=1, )
paddle.sum(Tensor([48, 103, 1],"float32"), )
paddle.sum(Tensor([48, 104, 1],"float32"), )
paddle.sum(Tensor([48, 104832],"float16"), axis=1, )
paddle.sum(Tensor([48, 104832],"float32"), axis=1, )
paddle.sum(Tensor([48, 105, 1],"float32"), )
paddle.sum(Tensor([48, 106, 1],"float32"), )
paddle.sum(Tensor([48, 112896],"float16"), axis=1, )
paddle.sum(Tensor([48, 112896],"float32"), axis=1, )
paddle.sum(Tensor([48, 192, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([48, 1],"float32"), )
paddle.sum(Tensor([48, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 200, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 208, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 216, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 224, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 232, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 248, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 248, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 256, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 264, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 264, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 272, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 272, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 272, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 272, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 280, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 280, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 280, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 280, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 288, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 296, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 304, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 304, 216],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 304, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 304, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 304, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 304, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 312, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 320, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 328, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 328, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 328, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 336, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([48, 48, 3, 3],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([48, 54400],"float16"), axis=1, )
paddle.sum(Tensor([48, 54400],"float32"), axis=1, )
paddle.sum(Tensor([48, 57600],"float16"), axis=1, )
paddle.sum(Tensor([48, 57600],"float32"), axis=1, )
paddle.sum(Tensor([48, 60800],"float16"), axis=1, )
paddle.sum(Tensor([48, 60800],"float32"), axis=1, )
paddle.sum(Tensor([48, 62400],"float16"), axis=1, )
paddle.sum(Tensor([48, 62400],"float32"), axis=1, )
paddle.sum(Tensor([48, 63, 1],"float32"), )
paddle.sum(Tensor([48, 63936],"float16"), axis=1, )
paddle.sum(Tensor([48, 63936],"float32"), axis=1, )
paddle.sum(Tensor([48, 64, 1],"float32"), )
paddle.sum(Tensor([48, 64000],"float16"), axis=1, )
paddle.sum(Tensor([48, 64000],"float32"), axis=1, )
paddle.sum(Tensor([48, 65, 1],"float32"), )
paddle.sum(Tensor([48, 65664],"float16"), axis=1, )
paddle.sum(Tensor([48, 65664],"float32"), axis=1, )
paddle.sum(Tensor([48, 67, 1],"float32"), )
paddle.sum(Tensor([48, 67200],"float16"), axis=1, )
paddle.sum(Tensor([48, 67200],"float32"), axis=1, )
paddle.sum(Tensor([48, 68, 1],"float32"), )
paddle.sum(Tensor([48, 68096],"float16"), axis=1, )
paddle.sum(Tensor([48, 68096],"float32"), axis=1, )
paddle.sum(Tensor([48, 69, 1],"float32"), )
paddle.sum(Tensor([48, 69888],"float16"), axis=1, )
paddle.sum(Tensor([48, 69888],"float32"), axis=1, )
paddle.sum(Tensor([48, 70528],"float16"), axis=1, )
paddle.sum(Tensor([48, 70528],"float32"), axis=1, )
paddle.sum(Tensor([48, 71, 1],"float32"), )
paddle.sum(Tensor([48, 72, 1],"float32"), )
paddle.sum(Tensor([48, 73, 1],"float32"), )
paddle.sum(Tensor([48, 73984],"float16"), axis=1, )
paddle.sum(Tensor([48, 73984],"float32"), axis=1, )
paddle.sum(Tensor([48, 74, 1],"float32"), )
paddle.sum(Tensor([48, 75, 1],"float32"), )
paddle.sum(Tensor([48, 75392],"float16"), axis=1, )
paddle.sum(Tensor([48, 75392],"float32"), axis=1, )
paddle.sum(Tensor([48, 76, 1],"float32"), )
paddle.sum(Tensor([48, 76160],"float16"), axis=1, )
paddle.sum(Tensor([48, 76160],"float32"), axis=1, )
paddle.sum(Tensor([48, 77, 1],"float32"), )
paddle.sum(Tensor([48, 78, 1],"float32"), )
paddle.sum(Tensor([48, 79, 1],"float32"), )
paddle.sum(Tensor([48, 80, 1],"float32"), )
paddle.sum(Tensor([48, 80256],"float16"), axis=1, )
paddle.sum(Tensor([48, 80256],"float32"), axis=1, )
paddle.sum(Tensor([48, 80512],"float16"), axis=1, )
paddle.sum(Tensor([48, 80512],"float32"), axis=1, )
paddle.sum(Tensor([48, 81, 1],"float32"), )
paddle.sum(Tensor([48, 82, 1],"float32"), )
paddle.sum(Tensor([48, 82688],"float16"), axis=1, )
paddle.sum(Tensor([48, 82688],"float32"), axis=1, )
paddle.sum(Tensor([48, 83, 1],"float32"), )
paddle.sum(Tensor([48, 83328],"float16"), axis=1, )
paddle.sum(Tensor([48, 83328],"float32"), axis=1, )
paddle.sum(Tensor([48, 84, 1],"float32"), )
paddle.sum(Tensor([48, 84864],"float16"), axis=1, )
paddle.sum(Tensor([48, 84864],"float32"), axis=1, )
paddle.sum(Tensor([48, 85, 1],"float32"), )
paddle.sum(Tensor([48, 85120],"float16"), axis=1, )
paddle.sum(Tensor([48, 85120],"float32"), axis=1, )
paddle.sum(Tensor([48, 86016],"float16"), axis=1, )
paddle.sum(Tensor([48, 86016],"float32"), axis=1, )
paddle.sum(Tensor([48, 87, 1],"float32"), )
paddle.sum(Tensor([48, 87040],"float16"), axis=1, )
paddle.sum(Tensor([48, 87040],"float32"), axis=1, )
paddle.sum(Tensor([48, 87552],"float16"), axis=1, )
paddle.sum(Tensor([48, 87552],"float32"), axis=1, )
paddle.sum(Tensor([48, 88, 1],"float32"), )
paddle.sum(Tensor([48, 88704],"float16"), axis=1, )
paddle.sum(Tensor([48, 88704],"float32"), axis=1, )
paddle.sum(Tensor([48, 89216],"float16"), axis=1, )
paddle.sum(Tensor([48, 89216],"float32"), axis=1, )
paddle.sum(Tensor([48, 89984],"float16"), axis=1, )
paddle.sum(Tensor([48, 89984],"float32"), axis=1, )
paddle.sum(Tensor([48, 90, 1],"float32"), )
paddle.sum(Tensor([48, 91, 1],"float32"), )
paddle.sum(Tensor([48, 91392],"float16"), axis=1, )
paddle.sum(Tensor([48, 91392],"float32"), axis=1, )
paddle.sum(Tensor([48, 91840],"float16"), axis=1, )
paddle.sum(Tensor([48, 91840],"float32"), axis=1, )
paddle.sum(Tensor([48, 92, 1],"float32"), )
paddle.sum(Tensor([48, 92416],"float16"), axis=1, )
paddle.sum(Tensor([48, 92416],"float32"), axis=1, )
paddle.sum(Tensor([48, 93, 1],"float32"), )
paddle.sum(Tensor([48, 94, 1],"float32"), )
paddle.sum(Tensor([48, 94080],"float16"), axis=1, )
paddle.sum(Tensor([48, 94080],"float32"), axis=1, )
paddle.sum(Tensor([48, 95, 1],"float32"), )
paddle.sum(Tensor([48, 96, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([48, 96, 1],"float32"), )
paddle.sum(Tensor([48, 97, 1],"float32"), )
paddle.sum(Tensor([48, 97088],"float16"), axis=1, )
paddle.sum(Tensor([48, 97088],"float32"), axis=1, )
paddle.sum(Tensor([48, 97280],"float16"), axis=1, )
paddle.sum(Tensor([48, 97280],"float32"), axis=1, )
paddle.sum(Tensor([48, 98, 1],"float32"), )
paddle.sum(Tensor([48, 99456],"float16"), axis=1, )
paddle.sum(Tensor([48, 99456],"float32"), axis=1, )
paddle.sum(Tensor([48, 99712],"float16"), axis=1, )
paddle.sum(Tensor([48, 99712],"float32"), axis=1, )
paddle.sum(Tensor([480, 1],"float32"), )
paddle.sum(Tensor([480, 8, 1],"float32"), )
paddle.sum(Tensor([480],"float32"), )
paddle.sum(Tensor([481, 1],"float32"), )
paddle.sum(Tensor([482, 1],"float32"), )
paddle.sum(Tensor([482, 1],"int32"), )
paddle.sum(Tensor([483, 1],"float32"), )
paddle.sum(Tensor([484, 1],"float32"), )
paddle.sum(Tensor([484],"float32"), )
paddle.sum(Tensor([485, 1],"float32"), )
paddle.sum(Tensor([486, 1],"float32"), )
paddle.sum(Tensor([4864, 4864],"bool"), )
paddle.sum(Tensor([488, 1],"float32"), )
paddle.sum(Tensor([488],"float32"), )
paddle.sum(Tensor([489, 1],"float32"), )
paddle.sum(Tensor([48],"float32"), )
paddle.sum(Tensor([49, 1],"float32"), )
paddle.sum(Tensor([490, 1],"float32"), )
paddle.sum(Tensor([491, 1],"float32"), )
paddle.sum(Tensor([492, 1],"float32"), )
paddle.sum(Tensor([492],"float32"), )
paddle.sum(Tensor([493, 1],"float32"), )
paddle.sum(Tensor([494, 1],"float32"), )
paddle.sum(Tensor([495, 1],"float32"), )
paddle.sum(Tensor([496, 1],"float32"), )
paddle.sum(Tensor([496],"float32"), )
paddle.sum(Tensor([497, 1],"float32"), )
paddle.sum(Tensor([498, 1],"float32"), )
paddle.sum(Tensor([499, 1],"float32"), )
paddle.sum(Tensor([4],"float32"), )
paddle.sum(Tensor([4],"float32"), axis=0, )
paddle.sum(Tensor([4],"float64"), axis=-1, keepdim=True, )
paddle.sum(Tensor([4],"int64"), )
paddle.sum(Tensor([5, 1],"float32"), )
paddle.sum(Tensor([5, 1],"float64"), )
paddle.sum(Tensor([5, 20],"float64"), )
paddle.sum(Tensor([5, 20],"int64"), )
paddle.sum(Tensor([5, 2],"float32"), axis=list[1,], )
paddle.sum(Tensor([5, 2],"float64"), axis=list[1,], )
paddle.sum(Tensor([5, 3],"float32"), )
paddle.sum(Tensor([5, 3],"float64"), )
paddle.sum(Tensor([5, 3],"int32"), )
paddle.sum(Tensor([5, 3],"int64"), )
paddle.sum(Tensor([5, 4],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([5, 4],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([5, 4],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([5, 4],"float64"), axis=1, keepdim=True, )
paddle.sum(Tensor([5, 4],"int64"), axis=0, keepdim=True, )
paddle.sum(Tensor([5, 4],"int64"), axis=1, keepdim=True, )
paddle.sum(Tensor([5, 5],"float32"), )
paddle.sum(Tensor([5, 5],"float64"), name=None, )
paddle.sum(Tensor([50, 1],"float32"), )
paddle.sum(Tensor([500, 1],"float32"), )
paddle.sum(Tensor([500, 3, 20, 20],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([5000, 1],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([5000, 2],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([50000, 1],"float32"), name=None, )
paddle.sum(Tensor([50000, 2, 3],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([50000, 2],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([500000],"float32"), )
paddle.sum(Tensor([500032],"float16"), )
paddle.sum(Tensor([500032],"float32"), )
paddle.sum(Tensor([5000],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([500],"float32"), )
paddle.sum(Tensor([501, 1],"float32"), )
paddle.sum(Tensor([501, 1],"float32"), name=None, )
paddle.sum(Tensor([502, 1],"float32"), )
paddle.sum(Tensor([503, 1],"float32"), )
paddle.sum(Tensor([504, 1],"float32"), )
paddle.sum(Tensor([504],"float32"), )
paddle.sum(Tensor([505, 1],"float32"), )
paddle.sum(Tensor([506, 1],"float32"), )
paddle.sum(Tensor([507, 1],"float32"), )
paddle.sum(Tensor([508, 1],"float32"), )
paddle.sum(Tensor([508],"float32"), )
paddle.sum(Tensor([509, 1],"float32"), )
paddle.sum(Tensor([51, 1],"float32"), )
paddle.sum(Tensor([51, 1],"int32"), )
paddle.sum(Tensor([510, 1],"float32"), )
paddle.sum(Tensor([510, 1],"int32"), )
paddle.sum(Tensor([511, 1],"float32"), )
paddle.sum(Tensor([512, 1, 200],"float32"), axis=-1, )
paddle.sum(Tensor([512, 10, 1],"float32"), )
paddle.sum(Tensor([512, 1000],"float16"), axis=-1, )
paddle.sum(Tensor([512, 1000],"float32"), axis=-1, )
paddle.sum(Tensor([512, 159],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([512, 1],"float32"), )
paddle.sum(Tensor([512, 256],"float32"), )
paddle.sum(Tensor([512, 320],"bool"), )
paddle.sum(Tensor([512, 32],"float32"), )
paddle.sum(Tensor([512, 512],"bool"), )
paddle.sum(Tensor([512, 7, 1],"float32"), )
paddle.sum(Tensor([512, 8, 14, 14],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([512, 8, 1],"float32"), )
paddle.sum(Tensor([512, 9, 1],"float32"), )
paddle.sum(Tensor([512, 995],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([512],"float32"), )
paddle.sum(Tensor([513, 1],"float32"), )
paddle.sum(Tensor([514, 1],"float32"), )
paddle.sum(Tensor([515, 1],"float32"), )
paddle.sum(Tensor([515, 1],"int32"), )
paddle.sum(Tensor([51511296],"float16"), )
paddle.sum(Tensor([516, 1],"float32"), )
paddle.sum(Tensor([516],"float32"), )
paddle.sum(Tensor([517, 1],"float32"), )
paddle.sum(Tensor([517, 1],"int32"), )
paddle.sum(Tensor([518, 1],"float32"), )
paddle.sum(Tensor([519, 1],"float32"), )
paddle.sum(Tensor([52, 102144],"float16"), axis=1, )
paddle.sum(Tensor([52, 102144],"float32"), axis=1, )
paddle.sum(Tensor([52, 102400],"float16"), axis=1, )
paddle.sum(Tensor([52, 102400],"float32"), axis=1, )
paddle.sum(Tensor([52, 104832],"float16"), axis=1, )
paddle.sum(Tensor([52, 104832],"float32"), axis=1, )
paddle.sum(Tensor([52, 1],"float32"), )
paddle.sum(Tensor([52, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 216, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 232, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 256, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 272, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 280, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 280, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 288, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 296, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 304, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 304, 216],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 304, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 312, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 312, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 320, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 320, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 336, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([52, 54400],"float16"), axis=1, )
paddle.sum(Tensor([52, 54400],"float32"), axis=1, )
paddle.sum(Tensor([52, 60800],"float16"), axis=1, )
paddle.sum(Tensor([52, 60800],"float32"), axis=1, )
paddle.sum(Tensor([52, 62400],"float16"), axis=1, )
paddle.sum(Tensor([52, 62400],"float32"), axis=1, )
paddle.sum(Tensor([52, 64000],"float16"), axis=1, )
paddle.sum(Tensor([52, 64000],"float32"), axis=1, )
paddle.sum(Tensor([52, 65664],"float16"), axis=1, )
paddle.sum(Tensor([52, 65664],"float32"), axis=1, )
paddle.sum(Tensor([52, 67200],"float16"), axis=1, )
paddle.sum(Tensor([52, 67200],"float32"), axis=1, )
paddle.sum(Tensor([52, 70528],"float16"), axis=1, )
paddle.sum(Tensor([52, 70528],"float32"), axis=1, )
paddle.sum(Tensor([52, 76160],"float16"), axis=1, )
paddle.sum(Tensor([52, 76160],"float32"), axis=1, )
paddle.sum(Tensor([52, 78336],"float16"), axis=1, )
paddle.sum(Tensor([52, 78336],"float32"), axis=1, )
paddle.sum(Tensor([52, 82688],"float16"), axis=1, )
paddle.sum(Tensor([52, 82688],"float32"), axis=1, )
paddle.sum(Tensor([52, 84864],"float16"), axis=1, )
paddle.sum(Tensor([52, 84864],"float32"), axis=1, )
paddle.sum(Tensor([52, 85120],"float16"), axis=1, )
paddle.sum(Tensor([52, 85120],"float32"), axis=1, )
paddle.sum(Tensor([52, 86016],"float16"), axis=1, )
paddle.sum(Tensor([52, 86016],"float32"), axis=1, )
paddle.sum(Tensor([52, 89216],"float16"), axis=1, )
paddle.sum(Tensor([52, 89216],"float32"), axis=1, )
paddle.sum(Tensor([52, 89984],"float16"), axis=1, )
paddle.sum(Tensor([52, 89984],"float32"), axis=1, )
paddle.sum(Tensor([52, 91392],"float16"), axis=1, )
paddle.sum(Tensor([52, 91392],"float32"), axis=1, )
paddle.sum(Tensor([52, 92352],"float16"), axis=1, )
paddle.sum(Tensor([52, 92352],"float32"), axis=1, )
paddle.sum(Tensor([52, 92416],"float16"), axis=1, )
paddle.sum(Tensor([52, 92416],"float32"), axis=1, )
paddle.sum(Tensor([52, 94080],"float16"), axis=1, )
paddle.sum(Tensor([52, 94080],"float32"), axis=1, )
paddle.sum(Tensor([52, 94848],"float16"), axis=1, )
paddle.sum(Tensor([52, 94848],"float32"), axis=1, )
paddle.sum(Tensor([52, 97280],"float16"), axis=1, )
paddle.sum(Tensor([52, 97280],"float32"), axis=1, )
paddle.sum(Tensor([52, 99456],"float16"), axis=1, )
paddle.sum(Tensor([52, 99456],"float32"), axis=1, )
paddle.sum(Tensor([520, 1],"float32"), )
paddle.sum(Tensor([520],"float32"), )
paddle.sum(Tensor([521, 1],"float32"), )
paddle.sum(Tensor([522, 1],"float32"), )
paddle.sum(Tensor([523, 1],"float32"), )
paddle.sum(Tensor([524, 1],"float32"), )
paddle.sum(Tensor([524288],"float16"), )
paddle.sum(Tensor([524288],"float32"), )
paddle.sum(Tensor([524],"float32"), )
paddle.sum(Tensor([525, 1],"float32"), )
paddle.sum(Tensor([526, 1],"float32"), )
paddle.sum(Tensor([527, 1],"float32"), )
paddle.sum(Tensor([528, 1],"float32"), )
paddle.sum(Tensor([528, 9, 1],"float32"), )
paddle.sum(Tensor([528],"float32"), )
paddle.sum(Tensor([529, 1],"float32"), )
paddle.sum(Tensor([52],"float32"), )
paddle.sum(Tensor([53, 1],"float32"), )
paddle.sum(Tensor([530, 1],"float32"), )
paddle.sum(Tensor([531, 1],"float32"), )
paddle.sum(Tensor([532, 1],"float32"), )
paddle.sum(Tensor([532],"float32"), )
paddle.sum(Tensor([533, 1],"float32"), )
paddle.sum(Tensor([534, 1],"float32"), )
paddle.sum(Tensor([535, 1],"float32"), )
paddle.sum(Tensor([536, 1],"float32"), )
paddle.sum(Tensor([536],"float32"), )
paddle.sum(Tensor([537, 1],"float32"), )
paddle.sum(Tensor([538, 1],"float32"), )
paddle.sum(Tensor([539, 1],"float32"), )
paddle.sum(Tensor([539, 1],"int32"), )
paddle.sum(Tensor([54, 1],"float32"), )
paddle.sum(Tensor([540, 1],"float32"), )
paddle.sum(Tensor([540],"float32"), )
paddle.sum(Tensor([541, 1],"float32"), )
paddle.sum(Tensor([542, 1],"float32"), )
paddle.sum(Tensor([543, 1],"float32"), )
paddle.sum(Tensor([544, 1],"float32"), )
paddle.sum(Tensor([544],"float32"), )
paddle.sum(Tensor([545, 1],"float32"), )
paddle.sum(Tensor([546, 1],"float32"), )
paddle.sum(Tensor([547, 1],"float32"), )
paddle.sum(Tensor([548, 1],"float32"), )
paddle.sum(Tensor([548],"float32"), )
paddle.sum(Tensor([549, 1],"float32"), )
paddle.sum(Tensor([55, 1],"float32"), )
paddle.sum(Tensor([550, 1],"float32"), )
paddle.sum(Tensor([550, 1],"int32"), )
paddle.sum(Tensor([551, 1],"float32"), )
paddle.sum(Tensor([552, 1],"float32"), )
paddle.sum(Tensor([552],"float32"), )
paddle.sum(Tensor([553, 1],"float32"), )
paddle.sum(Tensor([554, 1],"float32"), )
paddle.sum(Tensor([555, 1],"float32"), )
paddle.sum(Tensor([556, 1],"float32"), )
paddle.sum(Tensor([556],"float32"), )
paddle.sum(Tensor([557, 1],"float32"), )
paddle.sum(Tensor([558, 1],"float32"), )
paddle.sum(Tensor([559, 1],"float32"), )
paddle.sum(Tensor([56, 102144],"float16"), axis=1, )
paddle.sum(Tensor([56, 102144],"float32"), axis=1, )
paddle.sum(Tensor([56, 1],"float32"), )
paddle.sum(Tensor([56, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 216, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 216, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 256, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 264, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 264, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 264, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 272, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 280, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 280, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 296, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 304, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 304, 264],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([56, 380],"float32"), axis=1, )
paddle.sum(Tensor([56, 54, 1],"float32"), )
paddle.sum(Tensor([56, 54400],"float16"), axis=1, )
paddle.sum(Tensor([56, 54400],"float32"), axis=1, )
paddle.sum(Tensor([56, 56, 1],"float32"), )
paddle.sum(Tensor([56, 57, 1],"float32"), )
paddle.sum(Tensor([56, 5776],"float32"), axis=1, )
paddle.sum(Tensor([56, 58, 1],"float32"), )
paddle.sum(Tensor([56, 59, 1],"float32"), )
paddle.sum(Tensor([56, 60, 1],"float32"), )
paddle.sum(Tensor([56, 60800],"float16"), axis=1, )
paddle.sum(Tensor([56, 60800],"float32"), axis=1, )
paddle.sum(Tensor([56, 61, 1],"float32"), )
paddle.sum(Tensor([56, 62, 1],"float32"), )
paddle.sum(Tensor([56, 62400],"float16"), axis=1, )
paddle.sum(Tensor([56, 62400],"float32"), axis=1, )
paddle.sum(Tensor([56, 63, 1],"float32"), )
paddle.sum(Tensor([56, 63936],"float16"), axis=1, )
paddle.sum(Tensor([56, 63936],"float32"), axis=1, )
paddle.sum(Tensor([56, 64, 1],"float32"), )
paddle.sum(Tensor([56, 64000],"float16"), axis=1, )
paddle.sum(Tensor([56, 64000],"float32"), axis=1, )
paddle.sum(Tensor([56, 65, 1],"float32"), )
paddle.sum(Tensor([56, 65664],"float16"), axis=1, )
paddle.sum(Tensor([56, 65664],"float32"), axis=1, )
paddle.sum(Tensor([56, 66, 1],"float32"), )
paddle.sum(Tensor([56, 67, 1],"float32"), )
paddle.sum(Tensor([56, 67200],"float16"), axis=1, )
paddle.sum(Tensor([56, 67200],"float32"), axis=1, )
paddle.sum(Tensor([56, 68, 1],"float32"), )
paddle.sum(Tensor([56, 69, 1],"float32"), )
paddle.sum(Tensor([56, 70, 1],"float32"), )
paddle.sum(Tensor([56, 71, 1],"float32"), )
paddle.sum(Tensor([56, 72, 1],"float32"), )
paddle.sum(Tensor([56, 73, 1],"float32"), )
paddle.sum(Tensor([56, 73984],"float16"), axis=1, )
paddle.sum(Tensor([56, 73984],"float32"), axis=1, )
paddle.sum(Tensor([56, 76, 1],"float32"), )
paddle.sum(Tensor([56, 76032],"float16"), axis=1, )
paddle.sum(Tensor([56, 76032],"float32"), axis=1, )
paddle.sum(Tensor([56, 77, 1],"float32"), )
paddle.sum(Tensor([56, 77824],"float16"), axis=1, )
paddle.sum(Tensor([56, 77824],"float32"), axis=1, )
paddle.sum(Tensor([56, 78, 1],"float32"), )
paddle.sum(Tensor([56, 79, 1],"float32"), )
paddle.sum(Tensor([56, 80, 1],"float32"), )
paddle.sum(Tensor([56, 80256],"float16"), axis=1, )
paddle.sum(Tensor([56, 80256],"float32"), axis=1, )
paddle.sum(Tensor([56, 80512],"float16"), axis=1, )
paddle.sum(Tensor([56, 80512],"float32"), axis=1, )
paddle.sum(Tensor([56, 81, 1],"float32"), )
paddle.sum(Tensor([56, 82, 1],"float32"), )
paddle.sum(Tensor([56, 82688],"float16"), axis=1, )
paddle.sum(Tensor([56, 82688],"float32"), axis=1, )
paddle.sum(Tensor([56, 83, 1],"float32"), )
paddle.sum(Tensor([56, 84, 1],"float32"), )
paddle.sum(Tensor([56, 84480],"float16"), axis=1, )
paddle.sum(Tensor([56, 84480],"float32"), axis=1, )
paddle.sum(Tensor([56, 85, 1],"float32"), )
paddle.sum(Tensor([56, 86, 1],"float32"), )
paddle.sum(Tensor([56, 87, 1],"float32"), )
paddle.sum(Tensor([56, 87360],"float16"), axis=1, )
paddle.sum(Tensor([56, 87360],"float32"), axis=1, )
paddle.sum(Tensor([56, 88, 1],"float32"), )
paddle.sum(Tensor([56, 89984],"float16"), axis=1, )
paddle.sum(Tensor([56, 89984],"float32"), axis=1, )
paddle.sum(Tensor([56, 90, 1],"float32"), )
paddle.sum(Tensor([56, 91, 1],"float32"), )
paddle.sum(Tensor([56, 91392],"float16"), axis=1, )
paddle.sum(Tensor([56, 91392],"float32"), axis=1, )
paddle.sum(Tensor([56, 92416],"float16"), axis=1, )
paddle.sum(Tensor([56, 92416],"float32"), axis=1, )
paddle.sum(Tensor([56, 94080],"float16"), axis=1, )
paddle.sum(Tensor([56, 94080],"float32"), axis=1, )
paddle.sum(Tensor([56, 94848],"float16"), axis=1, )
paddle.sum(Tensor([56, 94848],"float32"), axis=1, )
paddle.sum(Tensor([56, 97088],"float16"), axis=1, )
paddle.sum(Tensor([56, 97088],"float32"), axis=1, )
paddle.sum(Tensor([56, 97280],"float16"), axis=1, )
paddle.sum(Tensor([56, 97280],"float32"), axis=1, )
paddle.sum(Tensor([560, 1],"float32"), )
paddle.sum(Tensor([560],"float32"), )
paddle.sum(Tensor([561, 1],"float32"), )
paddle.sum(Tensor([562, 1],"float32"), )
paddle.sum(Tensor([563, 1],"float32"), )
paddle.sum(Tensor([564, 1],"float32"), )
paddle.sum(Tensor([564],"float32"), )
paddle.sum(Tensor([565, 1],"float32"), )
paddle.sum(Tensor([566, 1],"float32"), )
paddle.sum(Tensor([567, 1],"float32"), )
paddle.sum(Tensor([568, 1],"float32"), )
paddle.sum(Tensor([568, 8, 1],"float32"), )
paddle.sum(Tensor([568, 9, 1],"float32"), )
paddle.sum(Tensor([568],"float32"), )
paddle.sum(Tensor([569, 1],"float32"), )
paddle.sum(Tensor([56],"float32"), )
paddle.sum(Tensor([57, 1],"float32"), )
paddle.sum(Tensor([570, 1],"float32"), )
paddle.sum(Tensor([571, 1],"float32"), )
paddle.sum(Tensor([572, 1],"float32"), )
paddle.sum(Tensor([573, 1],"float32"), )
paddle.sum(Tensor([574, 1],"float32"), )
paddle.sum(Tensor([575, 1],"float32"), )
paddle.sum(Tensor([576, 1],"float32"), )
paddle.sum(Tensor([576],"float32"), )
paddle.sum(Tensor([577, 1],"float32"), )
paddle.sum(Tensor([578, 1],"float32"), )
paddle.sum(Tensor([579, 1],"float32"), )
paddle.sum(Tensor([58, 1],"float32"), )
paddle.sum(Tensor([580, 1],"float32"), )
paddle.sum(Tensor([580, 1],"int32"), )
paddle.sum(Tensor([580],"float32"), )
paddle.sum(Tensor([581, 1],"float32"), )
paddle.sum(Tensor([582, 1],"float32"), )
paddle.sum(Tensor([583, 1],"float32"), )
paddle.sum(Tensor([584, 1],"float32"), )
paddle.sum(Tensor([584, 7, 1],"float32"), )
paddle.sum(Tensor([585, 1],"float32"), )
paddle.sum(Tensor([586, 1],"float32"), )
paddle.sum(Tensor([587, 1],"float32"), )
paddle.sum(Tensor([588, 1],"float32"), )
paddle.sum(Tensor([588],"float32"), )
paddle.sum(Tensor([589, 1],"float32"), )
paddle.sum(Tensor([58],"float32"), )
paddle.sum(Tensor([59, 1],"float32"), )
paddle.sum(Tensor([590, 1],"float32"), )
paddle.sum(Tensor([591, 1],"float32"), )
paddle.sum(Tensor([592, 1],"float32"), )
paddle.sum(Tensor([593, 1],"float32"), )
paddle.sum(Tensor([594, 1],"float32"), )
paddle.sum(Tensor([595, 1],"float32"), )
paddle.sum(Tensor([596, 1],"float32"), )
paddle.sum(Tensor([596],"float32"), )
paddle.sum(Tensor([597, 1],"float32"), )
paddle.sum(Tensor([598, 1],"float32"), )
paddle.sum(Tensor([599, 1],"float32"), )
paddle.sum(Tensor([5],"bool"), axis=list[0,], keepdim=False, )
paddle.sum(Tensor([5],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([5],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([5],"float32"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([5],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([5],"float32"), axis=-1, )
paddle.sum(Tensor([5],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([5],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([5],"float32"), axis=0, )
paddle.sum(Tensor([5],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([5],"float64"), )
paddle.sum(Tensor([5],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([5],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([5],"float64"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([5],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([5],"float64"), name=None, )
paddle.sum(Tensor([5],"int64"), )
paddle.sum(Tensor([5],"int64"), axis=list[0,], keepdim=False, name=None, )
paddle.sum(Tensor([6, 1],"float32"), )
paddle.sum(Tensor([6, 2, 10],"float64"), None, "float64", False, None, )
paddle.sum(Tensor([6, 2, 3],"float32"), )
paddle.sum(Tensor([6, 2, 3],"float32"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float32"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float32"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 3],"int64"), )
paddle.sum(Tensor([6, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([6, 304, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([6, 3],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([6, 4],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([6, 5],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([6, 60800],"float32"), axis=1, )
paddle.sum(Tensor([6, 60],"int64"), axis=0, )
paddle.sum(Tensor([6, 9],"float32"), 1, keepdim=False, name=None, )
paddle.sum(Tensor([60, 102144],"float16"), axis=1, )
paddle.sum(Tensor([60, 102144],"float32"), axis=1, )
paddle.sum(Tensor([60, 102],"float32"), axis=-1, )
paddle.sum(Tensor([60, 1],"float32"), )
paddle.sum(Tensor([60, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 208, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 208, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 208, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 216, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 216, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 248, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 256, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 272, 216],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 272, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 280, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 280, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 288, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 296, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 304, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 304, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 312, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 312, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 328, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 328, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([60, 54400],"float16"), axis=1, )
paddle.sum(Tensor([60, 54400],"float32"), axis=1, )
paddle.sum(Tensor([60, 56576],"float16"), axis=1, )
paddle.sum(Tensor([60, 56576],"float32"), axis=1, )
paddle.sum(Tensor([60, 58752],"float16"), axis=1, )
paddle.sum(Tensor([60, 58752],"float32"), axis=1, )
paddle.sum(Tensor([60, 60800],"float16"), axis=1, )
paddle.sum(Tensor([60, 60800],"float32"), axis=1, )
paddle.sum(Tensor([60, 62400],"float16"), axis=1, )
paddle.sum(Tensor([60, 62400],"float32"), axis=1, )
paddle.sum(Tensor([60, 63232],"float16"), axis=1, )
paddle.sum(Tensor([60, 63232],"float32"), axis=1, )
paddle.sum(Tensor([60, 63936],"float16"), axis=1, )
paddle.sum(Tensor([60, 63936],"float32"), axis=1, )
paddle.sum(Tensor([60, 64000],"float16"), axis=1, )
paddle.sum(Tensor([60, 64000],"float32"), axis=1, )
paddle.sum(Tensor([60, 65600],"float16"), axis=1, )
paddle.sum(Tensor([60, 65600],"float32"), axis=1, )
paddle.sum(Tensor([60, 65664],"float16"), axis=1, )
paddle.sum(Tensor([60, 65664],"float32"), axis=1, )
paddle.sum(Tensor([60, 67200],"float16"), axis=1, )
paddle.sum(Tensor([60, 67200],"float32"), axis=1, )
paddle.sum(Tensor([60, 67456],"float16"), axis=1, )
paddle.sum(Tensor([60, 67456],"float32"), axis=1, )
paddle.sum(Tensor([60, 68224],"float16"), axis=1, )
paddle.sum(Tensor([60, 68224],"float32"), axis=1, )
paddle.sum(Tensor([60, 73984],"float16"), axis=1, )
paddle.sum(Tensor([60, 73984],"float32"), axis=1, )
paddle.sum(Tensor([60, 77824],"float16"), axis=1, )
paddle.sum(Tensor([60, 77824],"float32"), axis=1, )
paddle.sum(Tensor([60, 80512],"float16"), axis=1, )
paddle.sum(Tensor([60, 80512],"float32"), axis=1, )
paddle.sum(Tensor([60, 82688],"float16"), axis=1, )
paddle.sum(Tensor([60, 82688],"float32"), axis=1, )
paddle.sum(Tensor([60, 84864],"float16"), axis=1, )
paddle.sum(Tensor([60, 84864],"float32"), axis=1, )
paddle.sum(Tensor([60, 89984],"float16"), axis=1, )
paddle.sum(Tensor([60, 89984],"float32"), axis=1, )
paddle.sum(Tensor([60, 91392],"float16"), axis=1, )
paddle.sum(Tensor([60, 91392],"float32"), axis=1, )
paddle.sum(Tensor([60, 91840],"float16"), axis=1, )
paddle.sum(Tensor([60, 91840],"float32"), axis=1, )
paddle.sum(Tensor([60, 92416],"float16"), axis=1, )
paddle.sum(Tensor([60, 92416],"float32"), axis=1, )
paddle.sum(Tensor([60, 94080],"float16"), axis=1, )
paddle.sum(Tensor([60, 94080],"float32"), axis=1, )
paddle.sum(Tensor([60, 94848],"float16"), axis=1, )
paddle.sum(Tensor([60, 94848],"float32"), axis=1, )
paddle.sum(Tensor([60, 96768],"float16"), axis=1, )
paddle.sum(Tensor([60, 96768],"float32"), axis=1, )
paddle.sum(Tensor([60, 99712],"float16"), axis=1, )
paddle.sum(Tensor([60, 99712],"float32"), axis=1, )
paddle.sum(Tensor([600, 1],"int32"), )
paddle.sum(Tensor([600],"float32"), )
paddle.sum(Tensor([602, 1],"float32"), )
paddle.sum(Tensor([602, 1],"int32"), )
paddle.sum(Tensor([603, 1],"float32"), )
paddle.sum(Tensor([604, 1],"float32"), )
paddle.sum(Tensor([604],"float32"), )
paddle.sum(Tensor([605, 1],"float32"), )
paddle.sum(Tensor([605, 1],"int32"), )
paddle.sum(Tensor([606, 1],"float32"), )
paddle.sum(Tensor([607, 1],"float32"), )
paddle.sum(Tensor([608, 1],"float32"), )
paddle.sum(Tensor([608],"float32"), )
paddle.sum(Tensor([609, 1],"float32"), )
paddle.sum(Tensor([60],"float32"), )
paddle.sum(Tensor([61, 1],"float32"), )
paddle.sum(Tensor([610, 1],"float32"), )
paddle.sum(Tensor([611, 1],"float32"), )
paddle.sum(Tensor([612, 1],"float32"), )
paddle.sum(Tensor([612],"float32"), )
paddle.sum(Tensor([613, 1],"float32"), )
paddle.sum(Tensor([614, 1],"float32"), )
paddle.sum(Tensor([616, 1],"float32"), )
paddle.sum(Tensor([617, 1],"float32"), )
paddle.sum(Tensor([618, 1],"float32"), )
paddle.sum(Tensor([619, 1],"float32"), )
paddle.sum(Tensor([62, 1],"float32"), )
paddle.sum(Tensor([620, 1],"float32"), )
paddle.sum(Tensor([620],"float32"), )
paddle.sum(Tensor([621, 1],"float32"), )
paddle.sum(Tensor([622, 1],"float32"), )
paddle.sum(Tensor([623, 1],"float32"), )
paddle.sum(Tensor([623, 1],"int32"), )
paddle.sum(Tensor([623489],"float32"), )
paddle.sum(Tensor([624, 1],"float32"), )
paddle.sum(Tensor([624, 8, 1],"float32"), )
paddle.sum(Tensor([624],"float32"), )
paddle.sum(Tensor([625, 1],"float32"), )
paddle.sum(Tensor([626, 1],"float32"), )
paddle.sum(Tensor([627, 1],"float32"), )
paddle.sum(Tensor([628, 1],"float32"), )
paddle.sum(Tensor([629, 1],"float32"), )
paddle.sum(Tensor([63, 1],"float32"), )
paddle.sum(Tensor([630, 1],"float32"), )
paddle.sum(Tensor([631, 1],"float32"), )
paddle.sum(Tensor([632, 1],"float32"), )
paddle.sum(Tensor([632],"float32"), )
paddle.sum(Tensor([633, 1],"float32"), )
paddle.sum(Tensor([634, 1],"float32"), )
paddle.sum(Tensor([635, 1],"float32"), )
paddle.sum(Tensor([636, 1],"float32"), )
paddle.sum(Tensor([636, 1],"int32"), )
paddle.sum(Tensor([637, 1],"float32"), )
paddle.sum(Tensor([638, 1],"float32"), )
paddle.sum(Tensor([6380, 1],"float32"), )
paddle.sum(Tensor([639, 1],"float32"), )
paddle.sum(Tensor([64, 1000],"float16"), axis=-1, )
paddle.sum(Tensor([64, 1000],"float32"), axis=-1, )
paddle.sum(Tensor([64, 100],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([64, 102144],"float16"), axis=1, )
paddle.sum(Tensor([64, 102144],"float32"), axis=1, )
paddle.sum(Tensor([64, 102],"float32"), axis=-1, )
paddle.sum(Tensor([64, 128, 96],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 13, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 14, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 15, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 16, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([64, 16, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 17, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 18, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 187, 8],"float32"), )
paddle.sum(Tensor([64, 19, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 1],"float32"), )
paddle.sum(Tensor([64, 20, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 200, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 208, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 21, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 216, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 22, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 23, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 232, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 24, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 240, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 25, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 25, 6626],"float32"), )
paddle.sum(Tensor([64, 256, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 256],"bool"), )
paddle.sum(Tensor([64, 26, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 26, 512, 1, 40],"float16"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 26, 512, 1, 40],"float32"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 27, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 272, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 272, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 28, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 280, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 288, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 29, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 3, 256, 256],"float32"), )
paddle.sum(Tensor([64, 3, 7, 7],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([64, 30, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 304, 216],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 304, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 304, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 304, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 31, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 312, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 32, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([64, 32, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 328, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 32],"bool"), )
paddle.sum(Tensor([64, 33, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 336, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 34, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 35, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 36, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 37, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 38, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 39, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 40, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 40, 6625],"float32"), )
paddle.sum(Tensor([64, 41, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 42, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 43, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 44, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 45, 1],"float32"), )
paddle.sum(Tensor([64, 46, 1],"float32"), )
paddle.sum(Tensor([64, 46, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 47, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 48, 1],"float32"), )
paddle.sum(Tensor([64, 48, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 49, 1],"float32"), )
paddle.sum(Tensor([64, 50, 1],"float32"), )
paddle.sum(Tensor([64, 50, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 51, 1],"float32"), )
paddle.sum(Tensor([64, 51, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 512],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([64, 52, 1],"float32"), )
paddle.sum(Tensor([64, 52, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 53, 1],"float32"), )
paddle.sum(Tensor([64, 53, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 54, 1],"float32"), )
paddle.sum(Tensor([64, 54, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 54400],"float16"), axis=1, )
paddle.sum(Tensor([64, 54400],"float32"), axis=1, )
paddle.sum(Tensor([64, 55, 1],"float32"), )
paddle.sum(Tensor([64, 56, 1],"float32"), )
paddle.sum(Tensor([64, 57, 1],"float32"), )
paddle.sum(Tensor([64, 57600],"float16"), axis=1, )
paddle.sum(Tensor([64, 57600],"float32"), axis=1, )
paddle.sum(Tensor([64, 58, 1],"float32"), )
paddle.sum(Tensor([64, 59, 1],"float32"), )
paddle.sum(Tensor([64, 60, 1],"float32"), )
paddle.sum(Tensor([64, 60800],"float16"), axis=1, )
paddle.sum(Tensor([64, 60800],"float32"), axis=1, )
paddle.sum(Tensor([64, 61, 1],"float32"), )
paddle.sum(Tensor([64, 62, 1],"float32"), )
paddle.sum(Tensor([64, 62400],"float16"), axis=1, )
paddle.sum(Tensor([64, 62400],"float32"), axis=1, )
paddle.sum(Tensor([64, 63, 1],"float32"), )
paddle.sum(Tensor([64, 64, 1],"float32"), )
paddle.sum(Tensor([64, 64000],"float16"), axis=1, )
paddle.sum(Tensor([64, 64000],"float32"), axis=1, )
paddle.sum(Tensor([64, 64],"bool"), )
paddle.sum(Tensor([64, 65664],"float16"), axis=1, )
paddle.sum(Tensor([64, 65664],"float32"), axis=1, )
paddle.sum(Tensor([64, 66, 1],"float32"), )
paddle.sum(Tensor([64, 67, 1],"float32"), )
paddle.sum(Tensor([64, 67200],"float16"), axis=1, )
paddle.sum(Tensor([64, 67200],"float32"), axis=1, )
paddle.sum(Tensor([64, 68, 1],"float32"), )
paddle.sum(Tensor([64, 68224],"float16"), axis=1, )
paddle.sum(Tensor([64, 68224],"float32"), axis=1, )
paddle.sum(Tensor([64, 69, 1],"float32"), )
paddle.sum(Tensor([64, 70, 1],"float32"), )
paddle.sum(Tensor([64, 70528],"float16"), axis=1, )
paddle.sum(Tensor([64, 70528],"float32"), axis=1, )
paddle.sum(Tensor([64, 71, 1],"float32"), )
paddle.sum(Tensor([64, 72, 1],"float32"), )
paddle.sum(Tensor([64, 72960],"float16"), axis=1, )
paddle.sum(Tensor([64, 72960],"float32"), axis=1, )
paddle.sum(Tensor([64, 73, 1],"float32"), )
paddle.sum(Tensor([64, 73984],"float16"), axis=1, )
paddle.sum(Tensor([64, 73984],"float32"), axis=1, )
paddle.sum(Tensor([64, 74, 1],"float32"), )
paddle.sum(Tensor([64, 75, 1],"float32"), )
paddle.sum(Tensor([64, 76, 1],"float32"), )
paddle.sum(Tensor([64, 77, 1],"float32"), )
paddle.sum(Tensor([64, 77, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([64, 78, 1],"float32"), )
paddle.sum(Tensor([64, 78336],"float16"), axis=1, )
paddle.sum(Tensor([64, 78336],"float32"), axis=1, )
paddle.sum(Tensor([64, 78400],"float16"), axis=1, )
paddle.sum(Tensor([64, 78400],"float32"), axis=1, )
paddle.sum(Tensor([64, 79, 1],"float32"), )
paddle.sum(Tensor([64, 8, 56, 56],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([64, 80, 1],"float32"), )
paddle.sum(Tensor([64, 80, 6625],"float32"), )
paddle.sum(Tensor([64, 82688],"float16"), axis=1, )
paddle.sum(Tensor([64, 82688],"float32"), axis=1, )
paddle.sum(Tensor([64, 84864],"float16"), axis=1, )
paddle.sum(Tensor([64, 84864],"float32"), axis=1, )
paddle.sum(Tensor([64, 86016],"float16"), axis=1, )
paddle.sum(Tensor([64, 86016],"float32"), axis=1, )
paddle.sum(Tensor([64, 87552],"float16"), axis=1, )
paddle.sum(Tensor([64, 87552],"float32"), axis=1, )
paddle.sum(Tensor([64, 89216],"float16"), axis=1, )
paddle.sum(Tensor([64, 89216],"float32"), axis=1, )
paddle.sum(Tensor([64, 89984],"float16"), axis=1, )
paddle.sum(Tensor([64, 89984],"float32"), axis=1, )
paddle.sum(Tensor([64, 91392],"float16"), axis=1, )
paddle.sum(Tensor([64, 91392],"float32"), axis=1, )
paddle.sum(Tensor([64, 92352],"float16"), axis=1, )
paddle.sum(Tensor([64, 92352],"float32"), axis=1, )
paddle.sum(Tensor([64, 92416],"float16"), axis=1, )
paddle.sum(Tensor([64, 92416],"float32"), axis=1, )
paddle.sum(Tensor([64, 94080],"float16"), axis=1, )
paddle.sum(Tensor([64, 94080],"float32"), axis=1, )
paddle.sum(Tensor([64, 97280],"float16"), axis=1, )
paddle.sum(Tensor([64, 97280],"float32"), axis=1, )
paddle.sum(Tensor([64, 99712],"float16"), axis=1, )
paddle.sum(Tensor([64, 99712],"float32"), axis=1, )
paddle.sum(Tensor([640, 1000],"float16"), axis=-1, )
paddle.sum(Tensor([640, 1000],"float32"), axis=-1, )
paddle.sum(Tensor([640, 1],"float32"), )
paddle.sum(Tensor([640, 512],"bool"), )
paddle.sum(Tensor([640, 640],"float32"), )
paddle.sum(Tensor([640, 7, 1],"float32"), )
paddle.sum(Tensor([640, 8, 1],"float32"), )
paddle.sum(Tensor([640],"float32"), )
paddle.sum(Tensor([641, 1],"float32"), )
paddle.sum(Tensor([641, 1],"int32"), )
paddle.sum(Tensor([642, 1],"float32"), )
paddle.sum(Tensor([643, 1],"float32"), )
paddle.sum(Tensor([644, 1],"float32"), )
paddle.sum(Tensor([646, 1],"int32"), )
paddle.sum(Tensor([647, 1],"float32"), )
paddle.sum(Tensor([648, 1],"float32"), )
paddle.sum(Tensor([648],"float32"), )
paddle.sum(Tensor([649, 1],"float32"), )
paddle.sum(Tensor([64],"float32"), )
paddle.sum(Tensor([65, 1],"float32"), )
paddle.sum(Tensor([650, 1],"float32"), )
paddle.sum(Tensor([651, 1],"float32"), )
paddle.sum(Tensor([6512, 1],"float32"), name=None, )
paddle.sum(Tensor([652, 1],"float32"), )
paddle.sum(Tensor([653, 1],"float32"), )
paddle.sum(Tensor([654, 1],"float32"), )
paddle.sum(Tensor([656, 1],"float32"), )
paddle.sum(Tensor([656],"float32"), )
paddle.sum(Tensor([657, 1],"float32"), )
paddle.sum(Tensor([658, 1],"float32"), )
paddle.sum(Tensor([658, 1],"int32"), )
paddle.sum(Tensor([66, 1],"float32"), )
paddle.sum(Tensor([660, 1],"int32"), )
paddle.sum(Tensor([660],"float32"), )
paddle.sum(Tensor([662, 1],"float32"), )
paddle.sum(Tensor([662, 1],"int32"), )
paddle.sum(Tensor([663, 1],"float32"), )
paddle.sum(Tensor([664, 1],"float32"), )
paddle.sum(Tensor([66416, 20, 5],"float64"), axis=1, keepdim=True, )
paddle.sum(Tensor([664],"float32"), )
paddle.sum(Tensor([665, 1],"float32"), )
paddle.sum(Tensor([666, 1],"float32"), )
paddle.sum(Tensor([667, 1],"float32"), )
paddle.sum(Tensor([668, 1],"float32"), )
paddle.sum(Tensor([6684, 3],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([669, 1],"float32"), )
paddle.sum(Tensor([669, 1],"int32"), )
paddle.sum(Tensor([67, 1],"float32"), )
paddle.sum(Tensor([670, 1],"float32"), )
paddle.sum(Tensor([671, 1],"float32"), )
paddle.sum(Tensor([671, 1],"int32"), )
paddle.sum(Tensor([672, 1],"float32"), )
paddle.sum(Tensor([672],"float32"), )
paddle.sum(Tensor([673, 1],"float32"), )
paddle.sum(Tensor([674, 1],"float32"), )
paddle.sum(Tensor([675, 1],"float32"), )
paddle.sum(Tensor([675, 1],"int32"), )
paddle.sum(Tensor([676, 1],"float32"), )
paddle.sum(Tensor([676],"float32"), )
paddle.sum(Tensor([677, 1],"float32"), )
paddle.sum(Tensor([678, 1],"float32"), )
paddle.sum(Tensor([679, 1],"float32"), )
paddle.sum(Tensor([679, 1],"int32"), )
paddle.sum(Tensor([68, 102144],"float16"), axis=1, )
paddle.sum(Tensor([68, 102144],"float32"), axis=1, )
paddle.sum(Tensor([68, 112896],"float16"), axis=1, )
paddle.sum(Tensor([68, 112896],"float32"), axis=1, )
paddle.sum(Tensor([68, 1],"float32"), )
paddle.sum(Tensor([68, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 200, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 208, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 240, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 256, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 264, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 272, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 272, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 272, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 280, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 280, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 288, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 304, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 304, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 312, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 320, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 328, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 336, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 336, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 336, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([68, 54400],"float16"), axis=1, )
paddle.sum(Tensor([68, 54400],"float32"), axis=1, )
paddle.sum(Tensor([68, 60800],"float16"), axis=1, )
paddle.sum(Tensor([68, 60800],"float32"), axis=1, )
paddle.sum(Tensor([68, 63232],"float16"), axis=1, )
paddle.sum(Tensor([68, 63232],"float32"), axis=1, )
paddle.sum(Tensor([68, 64000],"float16"), axis=1, )
paddle.sum(Tensor([68, 64000],"float32"), axis=1, )
paddle.sum(Tensor([68, 65600],"float16"), axis=1, )
paddle.sum(Tensor([68, 65600],"float32"), axis=1, )
paddle.sum(Tensor([68, 67200],"float16"), axis=1, )
paddle.sum(Tensor([68, 67200],"float32"), axis=1, )
paddle.sum(Tensor([68, 72960],"float16"), axis=1, )
paddle.sum(Tensor([68, 72960],"float32"), axis=1, )
paddle.sum(Tensor([68, 73984],"float16"), axis=1, )
paddle.sum(Tensor([68, 73984],"float32"), axis=1, )
paddle.sum(Tensor([68, 76160],"float16"), axis=1, )
paddle.sum(Tensor([68, 76160],"float32"), axis=1, )
paddle.sum(Tensor([68, 77824],"float16"), axis=1, )
paddle.sum(Tensor([68, 77824],"float32"), axis=1, )
paddle.sum(Tensor([68, 78336],"float16"), axis=1, )
paddle.sum(Tensor([68, 78336],"float32"), axis=1, )
paddle.sum(Tensor([68, 80256],"float16"), axis=1, )
paddle.sum(Tensor([68, 80256],"float32"), axis=1, )
paddle.sum(Tensor([68, 82688],"float16"), axis=1, )
paddle.sum(Tensor([68, 82688],"float32"), axis=1, )
paddle.sum(Tensor([68, 89216],"float16"), axis=1, )
paddle.sum(Tensor([68, 89216],"float32"), axis=1, )
paddle.sum(Tensor([68, 89984],"float16"), axis=1, )
paddle.sum(Tensor([68, 89984],"float32"), axis=1, )
paddle.sum(Tensor([68, 91392],"float16"), axis=1, )
paddle.sum(Tensor([68, 91392],"float32"), axis=1, )
paddle.sum(Tensor([68, 92352],"float16"), axis=1, )
paddle.sum(Tensor([68, 92352],"float32"), axis=1, )
paddle.sum(Tensor([68, 92416],"float16"), axis=1, )
paddle.sum(Tensor([68, 92416],"float32"), axis=1, )
paddle.sum(Tensor([68, 94080],"float16"), axis=1, )
paddle.sum(Tensor([68, 94080],"float32"), axis=1, )
paddle.sum(Tensor([68, 94848],"float16"), axis=1, )
paddle.sum(Tensor([68, 94848],"float32"), axis=1, )
paddle.sum(Tensor([68, 97280],"float16"), axis=1, )
paddle.sum(Tensor([68, 97280],"float32"), axis=1, )
paddle.sum(Tensor([68, 99712],"float16"), axis=1, )
paddle.sum(Tensor([68, 99712],"float32"), axis=1, )
paddle.sum(Tensor([680, 1],"float32"), )
paddle.sum(Tensor([680, 1],"int32"), )
paddle.sum(Tensor([680, 6, 1],"float32"), )
paddle.sum(Tensor([680],"float32"), )
paddle.sum(Tensor([681, 1],"float32"), )
paddle.sum(Tensor([682, 1],"float32"), )
paddle.sum(Tensor([682, 1],"int32"), )
paddle.sum(Tensor([683, 1],"float32"), )
paddle.sum(Tensor([684, 1],"float32"), )
paddle.sum(Tensor([685, 1],"float32"), )
paddle.sum(Tensor([686, 1],"float32"), )
paddle.sum(Tensor([68608, 1],"float32"), name=None, )
paddle.sum(Tensor([688, 1],"float32"), )
paddle.sum(Tensor([689, 1],"float32"), )
paddle.sum(Tensor([68],"float32"), )
paddle.sum(Tensor([69, 1],"float32"), )
paddle.sum(Tensor([690, 1],"float32"), )
paddle.sum(Tensor([691, 1],"float32"), )
paddle.sum(Tensor([692, 1],"float32"), )
paddle.sum(Tensor([692],"float32"), )
paddle.sum(Tensor([693, 1],"float32"), )
paddle.sum(Tensor([694, 1],"float32"), )
paddle.sum(Tensor([694, 1],"int32"), )
paddle.sum(Tensor([695, 1],"int32"), )
paddle.sum(Tensor([696, 1],"float32"), )
paddle.sum(Tensor([697, 1],"float32"), )
paddle.sum(Tensor([698, 1],"float32"), )
paddle.sum(Tensor([698, 1],"int32"), )
paddle.sum(Tensor([699, 1],"float32"), )
paddle.sum(Tensor([699, 1],"int32"), )
paddle.sum(Tensor([6],"float32"), )
paddle.sum(Tensor([6],"float32"), axis=-1, )
paddle.sum(Tensor([6],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([7, 165, 50000],"float32"), axis=1, )
paddle.sum(Tensor([7, 186, 50000],"float32"), axis=1, )
paddle.sum(Tensor([7, 1],"float32"), )
paddle.sum(Tensor([7, 206, 50000],"float32"), axis=1, )
paddle.sum(Tensor([7, 209, 50000],"float32"), axis=1, )
paddle.sum(Tensor([7, 220, 50000],"float32"), axis=1, )
paddle.sum(Tensor([7, 286, 50000],"float32"), axis=1, )
paddle.sum(Tensor([7, 3],"float32"), )
paddle.sum(Tensor([7, 3],"float32"), axis=-1, )
paddle.sum(Tensor([7, 3],"float64"), )
paddle.sum(Tensor([7, 3],"int32"), )
paddle.sum(Tensor([7, 3],"int64"), )
paddle.sum(Tensor([7, 7],"float16"), )
paddle.sum(Tensor([7, 7],"float32"), )
paddle.sum(Tensor([70, 1],"float32"), )
paddle.sum(Tensor([700],"float32"), )
paddle.sum(Tensor([702, 1],"float32"), )
paddle.sum(Tensor([703, 1],"float32"), )
paddle.sum(Tensor([704, 1],"float32"), )
paddle.sum(Tensor([704],"float32"), )
paddle.sum(Tensor([706, 1],"float32"), )
paddle.sum(Tensor([707, 1],"float32"), )
paddle.sum(Tensor([708, 1],"float32"), )
paddle.sum(Tensor([708],"float32"), )
paddle.sum(Tensor([709, 1],"float32"), )
paddle.sum(Tensor([71, 1],"float32"), )
paddle.sum(Tensor([710, 1],"float32"), )
paddle.sum(Tensor([711, 1],"float32"), )
paddle.sum(Tensor([714, 1],"float32"), )
paddle.sum(Tensor([716, 1],"float32"), )
paddle.sum(Tensor([717, 1],"float32"), )
paddle.sum(Tensor([717215],"float32"), )
paddle.sum(Tensor([717326],"float32"), )
paddle.sum(Tensor([718, 1],"float32"), )
paddle.sum(Tensor([718484],"float32"), )
paddle.sum(Tensor([719, 1],"float32"), )
paddle.sum(Tensor([72, 102144],"float16"), axis=1, )
paddle.sum(Tensor([72, 102144],"float32"), axis=1, )
paddle.sum(Tensor([72, 112896],"float16"), axis=1, )
paddle.sum(Tensor([72, 112896],"float32"), axis=1, )
paddle.sum(Tensor([72, 1],"float32"), )
paddle.sum(Tensor([72, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 200, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 216, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 216, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 232, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 232, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 272, 216],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 272, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 280, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 304, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 312, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 328, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 328, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 336, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 336, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([72, 41, 1],"float32"), )
paddle.sum(Tensor([72, 43, 1],"float32"), )
paddle.sum(Tensor([72, 44, 1],"float32"), )
paddle.sum(Tensor([72, 45, 1],"float32"), )
paddle.sum(Tensor([72, 46, 1],"float32"), )
paddle.sum(Tensor([72, 47, 1],"float32"), )
paddle.sum(Tensor([72, 48, 1],"float32"), )
paddle.sum(Tensor([72, 49, 1],"float32"), )
paddle.sum(Tensor([72, 50, 1],"float32"), )
paddle.sum(Tensor([72, 51, 1],"float32"), )
paddle.sum(Tensor([72, 52, 1],"float32"), )
paddle.sum(Tensor([72, 53, 1],"float32"), )
paddle.sum(Tensor([72, 54, 1],"float32"), )
paddle.sum(Tensor([72, 54400],"float16"), axis=1, )
paddle.sum(Tensor([72, 54400],"float32"), axis=1, )
paddle.sum(Tensor([72, 55, 1],"float32"), )
paddle.sum(Tensor([72, 56, 1],"float32"), )
paddle.sum(Tensor([72, 57, 1],"float32"), )
paddle.sum(Tensor([72, 57600],"float16"), axis=1, )
paddle.sum(Tensor([72, 57600],"float32"), axis=1, )
paddle.sum(Tensor([72, 58, 1],"float32"), )
paddle.sum(Tensor([72, 58752],"float16"), axis=1, )
paddle.sum(Tensor([72, 58752],"float32"), axis=1, )
paddle.sum(Tensor([72, 59, 1],"float32"), )
paddle.sum(Tensor([72, 60, 1],"float32"), )
paddle.sum(Tensor([72, 60800],"float16"), axis=1, )
paddle.sum(Tensor([72, 60800],"float32"), axis=1, )
paddle.sum(Tensor([72, 61, 1],"float32"), )
paddle.sum(Tensor([72, 62, 1],"float32"), )
paddle.sum(Tensor([72, 62400],"float16"), axis=1, )
paddle.sum(Tensor([72, 62400],"float32"), axis=1, )
paddle.sum(Tensor([72, 63, 1],"float32"), )
paddle.sum(Tensor([72, 63936],"float16"), axis=1, )
paddle.sum(Tensor([72, 63936],"float32"), axis=1, )
paddle.sum(Tensor([72, 64, 1],"float32"), )
paddle.sum(Tensor([72, 64000],"float16"), axis=1, )
paddle.sum(Tensor([72, 64000],"float32"), axis=1, )
paddle.sum(Tensor([72, 65, 1],"float32"), )
paddle.sum(Tensor([72, 65600],"float16"), axis=1, )
paddle.sum(Tensor([72, 65600],"float32"), axis=1, )
paddle.sum(Tensor([72, 65664],"float16"), axis=1, )
paddle.sum(Tensor([72, 65664],"float32"), axis=1, )
paddle.sum(Tensor([72, 66, 1],"float32"), )
paddle.sum(Tensor([72, 67, 1],"float32"), )
paddle.sum(Tensor([72, 67200],"float16"), axis=1, )
paddle.sum(Tensor([72, 67200],"float32"), axis=1, )
paddle.sum(Tensor([72, 68, 1],"float32"), )
paddle.sum(Tensor([72, 69, 1],"float32"), )
paddle.sum(Tensor([72, 70, 1],"float32"), )
paddle.sum(Tensor([72, 70528],"float16"), axis=1, )
paddle.sum(Tensor([72, 70528],"float32"), axis=1, )
paddle.sum(Tensor([72, 71, 1],"float32"), )
paddle.sum(Tensor([72, 73984],"float16"), axis=1, )
paddle.sum(Tensor([72, 73984],"float32"), axis=1, )
paddle.sum(Tensor([72, 74240],"float16"), axis=1, )
paddle.sum(Tensor([72, 74240],"float32"), axis=1, )
paddle.sum(Tensor([72, 76160],"float16"), axis=1, )
paddle.sum(Tensor([72, 76160],"float32"), axis=1, )
paddle.sum(Tensor([72, 78400],"float16"), axis=1, )
paddle.sum(Tensor([72, 78400],"float32"), axis=1, )
paddle.sum(Tensor([72, 82688],"float16"), axis=1, )
paddle.sum(Tensor([72, 82688],"float32"), axis=1, )
paddle.sum(Tensor([72, 84864],"float16"), axis=1, )
paddle.sum(Tensor([72, 84864],"float32"), axis=1, )
paddle.sum(Tensor([72, 89984],"float16"), axis=1, )
paddle.sum(Tensor([72, 89984],"float32"), axis=1, )
paddle.sum(Tensor([72, 91392],"float16"), axis=1, )
paddle.sum(Tensor([72, 91392],"float32"), axis=1, )
paddle.sum(Tensor([72, 92416],"float16"), axis=1, )
paddle.sum(Tensor([72, 92416],"float32"), axis=1, )
paddle.sum(Tensor([72, 94080],"float16"), axis=1, )
paddle.sum(Tensor([72, 94080],"float32"), axis=1, )
paddle.sum(Tensor([72, 94848],"float16"), axis=1, )
paddle.sum(Tensor([72, 94848],"float32"), axis=1, )
paddle.sum(Tensor([72, 97280],"float16"), axis=1, )
paddle.sum(Tensor([72, 97280],"float32"), axis=1, )
paddle.sum(Tensor([72, 99712],"float16"), axis=1, )
paddle.sum(Tensor([72, 99712],"float32"), axis=1, )
paddle.sum(Tensor([720, 1],"float32"), )
paddle.sum(Tensor([720537],"float32"), )
paddle.sum(Tensor([720],"float32"), )
paddle.sum(Tensor([721, 1],"float32"), )
paddle.sum(Tensor([722, 1],"float32"), )
paddle.sum(Tensor([724723],"float32"), )
paddle.sum(Tensor([725, 1],"float32"), )
paddle.sum(Tensor([725292],"float32"), )
paddle.sum(Tensor([726, 1],"float32"), )
paddle.sum(Tensor([727, 1],"float32"), )
paddle.sum(Tensor([727244],"float32"), )
paddle.sum(Tensor([728, 1],"float32"), )
paddle.sum(Tensor([728, 7, 1],"float32"), )
paddle.sum(Tensor([729, 1],"float32"), )
paddle.sum(Tensor([72],"float32"), )
paddle.sum(Tensor([73, 1],"float32"), )
paddle.sum(Tensor([730, 1],"float32"), )
paddle.sum(Tensor([731, 1],"float32"), )
paddle.sum(Tensor([732, 1],"float32"), )
paddle.sum(Tensor([732],"float32"), )
paddle.sum(Tensor([733, 1],"float32"), )
paddle.sum(Tensor([733968],"float32"), )
paddle.sum(Tensor([734, 1],"float32"), )
paddle.sum(Tensor([735, 1],"float32"), )
paddle.sum(Tensor([735573],"float32"), )
paddle.sum(Tensor([736, 1],"float32"), )
paddle.sum(Tensor([736],"float32"), )
paddle.sum(Tensor([738, 1],"float32"), )
paddle.sum(Tensor([739, 1],"float32"), )
paddle.sum(Tensor([739406],"float32"), )
paddle.sum(Tensor([74, 1],"float32"), )
paddle.sum(Tensor([740, 1],"float32"), )
paddle.sum(Tensor([740342],"float32"), )
paddle.sum(Tensor([741, 1],"float32"), )
paddle.sum(Tensor([742, 1],"float32"), )
paddle.sum(Tensor([743, 1],"float32"), )
paddle.sum(Tensor([743793],"float32"), )
paddle.sum(Tensor([747, 1],"float32"), )
paddle.sum(Tensor([747492],"float32"), )
paddle.sum(Tensor([748, 1],"float32"), )
paddle.sum(Tensor([749, 1],"float32"), )
paddle.sum(Tensor([75, 1],"float32"), )
paddle.sum(Tensor([750, 1],"float32"), )
paddle.sum(Tensor([751, 1],"float32"), )
paddle.sum(Tensor([752, 1],"float32"), )
paddle.sum(Tensor([752583],"float32"), )
paddle.sum(Tensor([755, 1],"float32"), )
paddle.sum(Tensor([756, 1],"float32"), )
paddle.sum(Tensor([757, 1],"float32"), )
paddle.sum(Tensor([757880],"float32"), )
paddle.sum(Tensor([758, 1],"float32"), )
paddle.sum(Tensor([759, 1],"float32"), )
paddle.sum(Tensor([76, 102144],"float16"), axis=1, )
paddle.sum(Tensor([76, 102144],"float32"), axis=1, )
paddle.sum(Tensor([76, 1],"float32"), )
paddle.sum(Tensor([76, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 216, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 216, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 272, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 280, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 288, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 304, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 304, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 304, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([76, 54400],"float16"), axis=1, )
paddle.sum(Tensor([76, 54400],"float32"), axis=1, )
paddle.sum(Tensor([76, 60800],"float16"), axis=1, )
paddle.sum(Tensor([76, 60800],"float32"), axis=1, )
paddle.sum(Tensor([76, 62400],"float16"), axis=1, )
paddle.sum(Tensor([76, 62400],"float32"), axis=1, )
paddle.sum(Tensor([76, 65664],"float16"), axis=1, )
paddle.sum(Tensor([76, 65664],"float32"), axis=1, )
paddle.sum(Tensor([76, 67200],"float16"), axis=1, )
paddle.sum(Tensor([76, 67200],"float32"), axis=1, )
paddle.sum(Tensor([76, 67392],"float16"), axis=1, )
paddle.sum(Tensor([76, 67392],"float32"), axis=1, )
paddle.sum(Tensor([76, 73984],"float16"), axis=1, )
paddle.sum(Tensor([76, 73984],"float32"), axis=1, )
paddle.sum(Tensor([76, 78336],"float16"), axis=1, )
paddle.sum(Tensor([76, 78336],"float32"), axis=1, )
paddle.sum(Tensor([76, 82688],"float16"), axis=1, )
paddle.sum(Tensor([76, 82688],"float32"), axis=1, )
paddle.sum(Tensor([76, 85120],"float16"), axis=1, )
paddle.sum(Tensor([76, 85120],"float32"), axis=1, )
paddle.sum(Tensor([76, 87552],"float16"), axis=1, )
paddle.sum(Tensor([76, 87552],"float32"), axis=1, )
paddle.sum(Tensor([76, 89216],"float16"), axis=1, )
paddle.sum(Tensor([76, 89216],"float32"), axis=1, )
paddle.sum(Tensor([76, 89984],"float16"), axis=1, )
paddle.sum(Tensor([76, 89984],"float32"), axis=1, )
paddle.sum(Tensor([76, 92416],"float16"), axis=1, )
paddle.sum(Tensor([76, 92416],"float32"), axis=1, )
paddle.sum(Tensor([76, 94080],"float16"), axis=1, )
paddle.sum(Tensor([76, 94080],"float32"), axis=1, )
paddle.sum(Tensor([76, 94848],"float16"), axis=1, )
paddle.sum(Tensor([76, 94848],"float32"), axis=1, )
paddle.sum(Tensor([76, 97280],"float16"), axis=1, )
paddle.sum(Tensor([76, 97280],"float32"), axis=1, )
paddle.sum(Tensor([76, 99712],"float16"), axis=1, )
paddle.sum(Tensor([76, 99712],"float32"), axis=1, )
paddle.sum(Tensor([760, 1],"float32"), )
paddle.sum(Tensor([760627],"float32"), )
paddle.sum(Tensor([760],"float32"), )
paddle.sum(Tensor([761, 1],"float32"), )
paddle.sum(Tensor([762, 1],"float32"), )
paddle.sum(Tensor([762435],"float32"), )
paddle.sum(Tensor([763098],"float32"), )
paddle.sum(Tensor([764],"float32"), )
paddle.sum(Tensor([765, 1],"float32"), )
paddle.sum(Tensor([766, 1],"float32"), )
paddle.sum(Tensor([767, 1],"float32"), )
paddle.sum(Tensor([768, 11008],"bool"), )
paddle.sum(Tensor([768, 1],"float32"), )
paddle.sum(Tensor([768, 768],"bool"), )
paddle.sum(Tensor([768095],"float32"), )
paddle.sum(Tensor([768],"float32"), )
paddle.sum(Tensor([769, 1],"float32"), )
paddle.sum(Tensor([76],"float32"), )
paddle.sum(Tensor([77, 102],"float32"), axis=-1, )
paddle.sum(Tensor([77, 1],"float32"), )
paddle.sum(Tensor([770, 1],"float32"), )
paddle.sum(Tensor([771, 1],"float32"), )
paddle.sum(Tensor([772, 1],"float32"), )
paddle.sum(Tensor([773, 1],"float32"), )
paddle.sum(Tensor([774, 1],"float32"), )
paddle.sum(Tensor([775, 1],"float32"), )
paddle.sum(Tensor([776, 1],"float32"), )
paddle.sum(Tensor([776379],"float32"), )
paddle.sum(Tensor([777, 1],"float32"), )
paddle.sum(Tensor([778392],"float32"), )
paddle.sum(Tensor([779, 1],"float32"), )
paddle.sum(Tensor([779371],"float32"), )
paddle.sum(Tensor([78, 1],"float32"), )
paddle.sum(Tensor([780, 1],"float32"), )
paddle.sum(Tensor([781, 1],"float32"), )
paddle.sum(Tensor([782, 1],"float32"), )
paddle.sum(Tensor([782767],"float32"), )
paddle.sum(Tensor([783, 1],"float32"), )
paddle.sum(Tensor([784, 1],"float32"), )
paddle.sum(Tensor([784000],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([786, 1],"float32"), )
paddle.sum(Tensor([786202],"float32"), )
paddle.sum(Tensor([787, 1],"float32"), )
paddle.sum(Tensor([788, 1],"float32"), )
paddle.sum(Tensor([788071],"float32"), )
paddle.sum(Tensor([789, 1],"float32"), )
paddle.sum(Tensor([79, 1],"float32"), )
paddle.sum(Tensor([79, 1],"int32"), )
paddle.sum(Tensor([790, 1],"float32"), )
paddle.sum(Tensor([790301],"float32"), )
paddle.sum(Tensor([790612],"float32"), )
paddle.sum(Tensor([790972],"float32"), )
paddle.sum(Tensor([791136],"float32"), )
paddle.sum(Tensor([792, 1],"float32"), )
paddle.sum(Tensor([792604],"float32"), )
paddle.sum(Tensor([792742],"float32"), )
paddle.sum(Tensor([792],"float32"), )
paddle.sum(Tensor([793, 1],"float32"), )
paddle.sum(Tensor([793034],"float32"), )
paddle.sum(Tensor([794, 1],"float32"), )
paddle.sum(Tensor([795, 1],"float32"), )
paddle.sum(Tensor([795938],"float32"), )
paddle.sum(Tensor([796, 1],"float32"), )
paddle.sum(Tensor([797, 1],"float32"), )
paddle.sum(Tensor([797058],"float32"), )
paddle.sum(Tensor([797269],"float32"), )
paddle.sum(Tensor([797394],"float32"), )
paddle.sum(Tensor([797922],"float32"), )
paddle.sum(Tensor([799, 1],"float32"), )
paddle.sum(Tensor([799391],"float32"), )
paddle.sum(Tensor([8, 1, 128, 128],"float32"), )
paddle.sum(Tensor([8, 1, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 1, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 10, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 100, 100],"float16"), )
paddle.sum(Tensor([8, 100, 100],"float32"), )
paddle.sum(Tensor([8, 102, 8],"float32"), )
paddle.sum(Tensor([8, 102144],"float16"), axis=1, )
paddle.sum(Tensor([8, 102144],"float32"), axis=1, )
paddle.sum(Tensor([8, 102400],"float16"), axis=1, )
paddle.sum(Tensor([8, 102400],"float32"), axis=1, )
paddle.sum(Tensor([8, 102],"float32"), axis=-1, )
paddle.sum(Tensor([8, 103, 8],"float32"), )
paddle.sum(Tensor([8, 105, 8],"float32"), )
paddle.sum(Tensor([8, 107520],"float16"), axis=1, )
paddle.sum(Tensor([8, 107520],"float32"), axis=1, )
paddle.sum(Tensor([8, 108, 8],"float32"), )
paddle.sum(Tensor([8, 109, 8],"float32"), )
paddle.sum(Tensor([8, 11, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 110, 8],"float32"), )
paddle.sum(Tensor([8, 111, 8],"float32"), )
paddle.sum(Tensor([8, 112, 8],"float32"), )
paddle.sum(Tensor([8, 113, 8],"float32"), )
paddle.sum(Tensor([8, 114, 8],"float32"), )
paddle.sum(Tensor([8, 115, 8],"float32"), )
paddle.sum(Tensor([8, 116, 8],"float32"), )
paddle.sum(Tensor([8, 117, 8],"float32"), )
paddle.sum(Tensor([8, 119, 8],"float32"), )
paddle.sum(Tensor([8, 12, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 120, 8],"float32"), )
paddle.sum(Tensor([8, 121, 8],"float32"), )
paddle.sum(Tensor([8, 122, 8],"float32"), )
paddle.sum(Tensor([8, 124, 8],"float32"), )
paddle.sum(Tensor([8, 126, 8],"float32"), )
paddle.sum(Tensor([8, 127, 8],"float32"), )
paddle.sum(Tensor([8, 128, 64, 64],"float16"), name=None, )
paddle.sum(Tensor([8, 128, 8],"float32"), )
paddle.sum(Tensor([8, 129, 8],"float32"), )
paddle.sum(Tensor([8, 13, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 130, 8],"float32"), )
paddle.sum(Tensor([8, 131, 8],"float32"), )
paddle.sum(Tensor([8, 132, 8],"float32"), )
paddle.sum(Tensor([8, 133, 8],"float32"), )
paddle.sum(Tensor([8, 134, 8],"float32"), )
paddle.sum(Tensor([8, 135, 8],"float32"), )
paddle.sum(Tensor([8, 136, 8],"float32"), )
paddle.sum(Tensor([8, 137, 8],"float32"), )
paddle.sum(Tensor([8, 138, 8],"float32"), )
paddle.sum(Tensor([8, 139, 8],"float32"), )
paddle.sum(Tensor([8, 14, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 140, 8],"float32"), )
paddle.sum(Tensor([8, 141, 8],"float32"), )
paddle.sum(Tensor([8, 142, 8],"float32"), )
paddle.sum(Tensor([8, 143, 8],"float32"), )
paddle.sum(Tensor([8, 144, 8],"float32"), )
paddle.sum(Tensor([8, 145, 8],"float32"), )
paddle.sum(Tensor([8, 146, 8],"float32"), )
paddle.sum(Tensor([8, 147, 8],"float32"), )
paddle.sum(Tensor([8, 148, 8],"float32"), )
paddle.sum(Tensor([8, 149, 8],"float32"), )
paddle.sum(Tensor([8, 15, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 150, 8],"float32"), )
paddle.sum(Tensor([8, 151, 8],"float32"), )
paddle.sum(Tensor([8, 152, 8],"float32"), )
paddle.sum(Tensor([8, 153, 8],"float32"), )
paddle.sum(Tensor([8, 154, 8],"float32"), )
paddle.sum(Tensor([8, 155, 8],"float32"), )
paddle.sum(Tensor([8, 157, 8],"float32"), )
paddle.sum(Tensor([8, 158, 8],"float32"), )
paddle.sum(Tensor([8, 159, 8],"float32"), )
paddle.sum(Tensor([8, 16, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([8, 16, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 16, 32],"float16"), )
paddle.sum(Tensor([8, 16, 32],"float32"), )
paddle.sum(Tensor([8, 16, 32],"float64"), )
paddle.sum(Tensor([8, 160, 8],"float32"), )
paddle.sum(Tensor([8, 161, 8],"float32"), )
paddle.sum(Tensor([8, 162, 8],"float32"), )
paddle.sum(Tensor([8, 163, 8],"float32"), )
paddle.sum(Tensor([8, 164, 8],"float32"), )
paddle.sum(Tensor([8, 165, 8],"float32"), )
paddle.sum(Tensor([8, 166, 8],"float32"), )
paddle.sum(Tensor([8, 167, 8],"float32"), )
paddle.sum(Tensor([8, 168, 8],"float32"), )
paddle.sum(Tensor([8, 169, 8],"float32"), )
paddle.sum(Tensor([8, 17, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 170, 8],"float32"), )
paddle.sum(Tensor([8, 171, 8],"float32"), )
paddle.sum(Tensor([8, 172, 8],"float32"), )
paddle.sum(Tensor([8, 173, 8],"float32"), )
paddle.sum(Tensor([8, 174, 8],"float32"), )
paddle.sum(Tensor([8, 175, 8],"float32"), )
paddle.sum(Tensor([8, 176, 8],"float32"), )
paddle.sum(Tensor([8, 177, 8],"float32"), )
paddle.sum(Tensor([8, 178, 8],"float32"), )
paddle.sum(Tensor([8, 179, 8],"float32"), )
paddle.sum(Tensor([8, 18, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 180, 8],"float32"), )
paddle.sum(Tensor([8, 182, 8],"float32"), )
paddle.sum(Tensor([8, 183, 8],"float32"), )
paddle.sum(Tensor([8, 184, 8],"float32"), )
paddle.sum(Tensor([8, 185, 8],"float32"), )
paddle.sum(Tensor([8, 186, 8],"float32"), )
paddle.sum(Tensor([8, 187, 8],"float32"), )
paddle.sum(Tensor([8, 189, 8],"float32"), )
paddle.sum(Tensor([8, 19, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 190, 8],"float32"), )
paddle.sum(Tensor([8, 191, 8],"float32"), )
paddle.sum(Tensor([8, 192, 8],"float32"), )
paddle.sum(Tensor([8, 193, 8],"float32"), )
paddle.sum(Tensor([8, 194, 8],"float32"), )
paddle.sum(Tensor([8, 195, 8],"float32"), )
paddle.sum(Tensor([8, 196, 8],"float32"), )
paddle.sum(Tensor([8, 198, 8],"float32"), )
paddle.sum(Tensor([8, 199, 8],"float32"), )
paddle.sum(Tensor([8, 1],"float32"), )
paddle.sum(Tensor([8, 2, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 2, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 20, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 21, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 22, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 23, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 24, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 244, 1],"float32"), )
paddle.sum(Tensor([8, 25, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 256, 64, 64],"float16"), name=None, )
paddle.sum(Tensor([8, 26, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 26, 512, 1, 40],"float32"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([8, 27, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 272, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 272, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 28, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 280, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 280, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 29, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 3, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 3, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 3, 4, 1, 1, 1],"int64"), )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"int64"), )
paddle.sum(Tensor([8, 30, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 304, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 304, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 31, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 312, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 32, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([8, 32, 256, 256],"float16"), name=None, )
paddle.sum(Tensor([8, 32, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 320, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 320, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 328, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 33, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 336, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 336, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([8, 34, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 35, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 36, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 37, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 38, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 39, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 4, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 40, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 409600],"float32"), 1, )
paddle.sum(Tensor([8, 41, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 42, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 43, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 44, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 45, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 46, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 47, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 48, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 5, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 5, 7, 7],"float32"), )
paddle.sum(Tensor([8, 50, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 512, 1],"float32"), )
paddle.sum(Tensor([8, 52, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 53, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 54, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 6, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 60800],"float16"), axis=1, )
paddle.sum(Tensor([8, 60800],"float32"), axis=1, )
paddle.sum(Tensor([8, 64, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([8, 64, 128, 128],"float16"), name=None, )
paddle.sum(Tensor([8, 640, 640],"float32"), )
paddle.sum(Tensor([8, 67200],"float16"), axis=1, )
paddle.sum(Tensor([8, 67200],"float32"), axis=1, )
paddle.sum(Tensor([8, 7, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 73984],"float16"), axis=1, )
paddle.sum(Tensor([8, 73984],"float32"), axis=1, )
paddle.sum(Tensor([8, 76160],"float16"), axis=1, )
paddle.sum(Tensor([8, 76160],"float32"), axis=1, )
paddle.sum(Tensor([8, 8, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([8, 8, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 8, 3, 3],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([8, 82, 8],"float32"), )
paddle.sum(Tensor([8, 82688],"float16"), axis=1, )
paddle.sum(Tensor([8, 82688],"float32"), axis=1, )
paddle.sum(Tensor([8, 84864],"float16"), axis=1, )
paddle.sum(Tensor([8, 84864],"float32"), axis=1, )
paddle.sum(Tensor([8, 85, 8],"float32"), )
paddle.sum(Tensor([8, 85120],"float16"), axis=1, )
paddle.sum(Tensor([8, 85120],"float32"), axis=1, )
paddle.sum(Tensor([8, 87040],"float16"), axis=1, )
paddle.sum(Tensor([8, 87040],"float32"), axis=1, )
paddle.sum(Tensor([8, 89216],"float16"), axis=1, )
paddle.sum(Tensor([8, 89216],"float32"), axis=1, )
paddle.sum(Tensor([8, 9, 27],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([8, 91, 8],"float32"), )
paddle.sum(Tensor([8, 92416],"float16"), axis=1, )
paddle.sum(Tensor([8, 92416],"float32"), axis=1, )
paddle.sum(Tensor([8, 94080],"float16"), axis=1, )
paddle.sum(Tensor([8, 94080],"float32"), axis=1, )
paddle.sum(Tensor([8, 94848],"float16"), axis=1, )
paddle.sum(Tensor([8, 94848],"float32"), axis=1, )
paddle.sum(Tensor([8, 95, 8],"float32"), )
paddle.sum(Tensor([8, 96, 8],"float32"), )
paddle.sum(Tensor([8, 960, 960],"float32"), )
paddle.sum(Tensor([8, 97, 8],"float32"), )
paddle.sum(Tensor([8, 97088],"float16"), axis=1, )
paddle.sum(Tensor([8, 97088],"float32"), axis=1, )
paddle.sum(Tensor([8, 98, 8],"float32"), )
paddle.sum(Tensor([8, 99, 8],"float32"), )
paddle.sum(Tensor([8, 99712],"float16"), axis=1, )
paddle.sum(Tensor([8, 99712],"float32"), axis=1, )
paddle.sum(Tensor([80, 102144],"float16"), axis=1, )
paddle.sum(Tensor([80, 102144],"float32"), axis=1, )
paddle.sum(Tensor([80, 1],"float32"), )
paddle.sum(Tensor([80, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 200, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 208, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 208, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 216, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 256, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 272, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 272, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 280, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 304, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 304, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 312, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 312, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 320, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 328, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([80, 37, 1],"float32"), )
paddle.sum(Tensor([80, 38, 1],"float32"), )
paddle.sum(Tensor([80, 39, 1],"float32"), )
paddle.sum(Tensor([80, 40, 1],"float32"), )
paddle.sum(Tensor([80, 41, 1],"float32"), )
paddle.sum(Tensor([80, 42, 1],"float32"), )
paddle.sum(Tensor([80, 43, 1],"float32"), )
paddle.sum(Tensor([80, 44, 1],"float32"), )
paddle.sum(Tensor([80, 45, 1],"float32"), )
paddle.sum(Tensor([80, 46, 1],"float32"), )
paddle.sum(Tensor([80, 47, 1],"float32"), )
paddle.sum(Tensor([80, 48, 1],"float32"), )
paddle.sum(Tensor([80, 49, 1],"float32"), )
paddle.sum(Tensor([80, 50, 1],"float32"), )
paddle.sum(Tensor([80, 51, 1],"float32"), )
paddle.sum(Tensor([80, 52, 1],"float32"), )
paddle.sum(Tensor([80, 53, 1],"float32"), )
paddle.sum(Tensor([80, 54, 1],"float32"), )
paddle.sum(Tensor([80, 54400],"float16"), axis=1, )
paddle.sum(Tensor([80, 54400],"float32"), axis=1, )
paddle.sum(Tensor([80, 55, 1],"float32"), )
paddle.sum(Tensor([80, 56, 1],"float32"), )
paddle.sum(Tensor([80, 57, 1],"float32"), )
paddle.sum(Tensor([80, 58, 1],"float32"), )
paddle.sum(Tensor([80, 59, 1],"float32"), )
paddle.sum(Tensor([80, 60, 1],"float32"), )
paddle.sum(Tensor([80, 60800],"float16"), axis=1, )
paddle.sum(Tensor([80, 60800],"float32"), axis=1, )
paddle.sum(Tensor([80, 61, 1],"float32"), )
paddle.sum(Tensor([80, 62, 1],"float32"), )
paddle.sum(Tensor([80, 62400],"float16"), axis=1, )
paddle.sum(Tensor([80, 62400],"float32"), axis=1, )
paddle.sum(Tensor([80, 63, 1],"float32"), )
paddle.sum(Tensor([80, 63232],"float16"), axis=1, )
paddle.sum(Tensor([80, 63232],"float32"), axis=1, )
paddle.sum(Tensor([80, 64, 1],"float32"), )
paddle.sum(Tensor([80, 64000],"float16"), axis=1, )
paddle.sum(Tensor([80, 64000],"float32"), axis=1, )
paddle.sum(Tensor([80, 65664],"float16"), axis=1, )
paddle.sum(Tensor([80, 65664],"float32"), axis=1, )
paddle.sum(Tensor([80, 67200],"float16"), axis=1, )
paddle.sum(Tensor([80, 67200],"float32"), axis=1, )
paddle.sum(Tensor([80, 69888],"float16"), axis=1, )
paddle.sum(Tensor([80, 69888],"float32"), axis=1, )
paddle.sum(Tensor([80, 73984],"float16"), axis=1, )
paddle.sum(Tensor([80, 73984],"float32"), axis=1, )
paddle.sum(Tensor([80, 76160],"float16"), axis=1, )
paddle.sum(Tensor([80, 76160],"float32"), axis=1, )
paddle.sum(Tensor([80, 82688],"float16"), axis=1, )
paddle.sum(Tensor([80, 82688],"float32"), axis=1, )
paddle.sum(Tensor([80, 84864],"float16"), axis=1, )
paddle.sum(Tensor([80, 84864],"float32"), axis=1, )
paddle.sum(Tensor([80, 85120],"float16"), axis=1, )
paddle.sum(Tensor([80, 85120],"float32"), axis=1, )
paddle.sum(Tensor([80, 86016],"float16"), axis=1, )
paddle.sum(Tensor([80, 86016],"float32"), axis=1, )
paddle.sum(Tensor([80, 89984],"float16"), axis=1, )
paddle.sum(Tensor([80, 89984],"float32"), axis=1, )
paddle.sum(Tensor([80, 91392],"float16"), axis=1, )
paddle.sum(Tensor([80, 91392],"float32"), axis=1, )
paddle.sum(Tensor([80, 92352],"float16"), axis=1, )
paddle.sum(Tensor([80, 92352],"float32"), axis=1, )
paddle.sum(Tensor([80, 92416],"float16"), axis=1, )
paddle.sum(Tensor([80, 92416],"float32"), axis=1, )
paddle.sum(Tensor([80, 94080],"float16"), axis=1, )
paddle.sum(Tensor([80, 94080],"float32"), axis=1, )
paddle.sum(Tensor([80, 97088],"float16"), axis=1, )
paddle.sum(Tensor([80, 97088],"float32"), axis=1, )
paddle.sum(Tensor([80, 97280],"float16"), axis=1, )
paddle.sum(Tensor([80, 97280],"float32"), axis=1, )
paddle.sum(Tensor([800, 1],"int32"), )
paddle.sum(Tensor([800],"float16"), )
paddle.sum(Tensor([800],"float32"), )
paddle.sum(Tensor([801, 1],"float32"), )
paddle.sum(Tensor([802, 1],"float32"), )
paddle.sum(Tensor([802335],"float32"), )
paddle.sum(Tensor([80239, 20, 3],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([802611],"float32"), )
paddle.sum(Tensor([802823],"float32"), )
paddle.sum(Tensor([803, 1],"float32"), )
paddle.sum(Tensor([803365],"float32"), )
paddle.sum(Tensor([804, 1],"float32"), )
paddle.sum(Tensor([804637],"float32"), )
paddle.sum(Tensor([804701],"float32"), )
paddle.sum(Tensor([805, 1],"float32"), )
paddle.sum(Tensor([805559],"float32"), )
paddle.sum(Tensor([805830],"float32"), )
paddle.sum(Tensor([806, 1],"float32"), )
paddle.sum(Tensor([807, 1],"float32"), )
paddle.sum(Tensor([807549],"float32"), )
paddle.sum(Tensor([808, 1],"float32"), )
paddle.sum(Tensor([808670],"float32"), )
paddle.sum(Tensor([809355],"float32"), )
paddle.sum(Tensor([809481],"float32"), )
paddle.sum(Tensor([80],"float32"), )
paddle.sum(Tensor([81, 1],"float32"), )
paddle.sum(Tensor([810, 1],"int32"), )
paddle.sum(Tensor([810566],"float32"), )
paddle.sum(Tensor([812],"float32"), )
paddle.sum(Tensor([813, 1],"float32"), )
paddle.sum(Tensor([813, 1],"int32"), )
paddle.sum(Tensor([813649],"float32"), )
paddle.sum(Tensor([815, 1],"float32"), )
paddle.sum(Tensor([815298],"float32"), )
paddle.sum(Tensor([815795],"float32"), )
paddle.sum(Tensor([816181],"float32"), )
paddle.sum(Tensor([816],"float32"), )
paddle.sum(Tensor([817210],"float32"), )
paddle.sum(Tensor([817632],"float32"), )
paddle.sum(Tensor([817975],"float32"), )
paddle.sum(Tensor([818, 1],"float32"), )
paddle.sum(Tensor([818738],"float32"), )
paddle.sum(Tensor([818851],"float32"), )
paddle.sum(Tensor([819, 1],"float32"), )
paddle.sum(Tensor([8192],"float32"), )
paddle.sum(Tensor([819339],"float32"), )
paddle.sum(Tensor([819889],"float32"), )
paddle.sum(Tensor([82, 1],"float32"), )
paddle.sum(Tensor([82, 324],"float32"), axis=1, )
paddle.sum(Tensor([82, 45],"float32"), axis=1, )
paddle.sum(Tensor([820, 1],"int32"), )
paddle.sum(Tensor([821, 1],"int32"), )
paddle.sum(Tensor([821415],"float32"), )
paddle.sum(Tensor([822155],"float32"), )
paddle.sum(Tensor([822454],"float32"), )
paddle.sum(Tensor([822669],"float32"), )
paddle.sum(Tensor([823140],"float32"), )
paddle.sum(Tensor([823810],"float32"), )
paddle.sum(Tensor([824, 1],"int32"), )
paddle.sum(Tensor([825, 1],"int32"), )
paddle.sum(Tensor([825644],"float32"), )
paddle.sum(Tensor([826111],"float32"), )
paddle.sum(Tensor([827954],"float32"), )
paddle.sum(Tensor([828, 1],"float32"), )
paddle.sum(Tensor([828406],"float32"), )
paddle.sum(Tensor([828],"float32"), )
paddle.sum(Tensor([829, 1],"float32"), )
paddle.sum(Tensor([829317],"float32"), )
paddle.sum(Tensor([829772],"float32"), )
paddle.sum(Tensor([83, 1],"float32"), )
paddle.sum(Tensor([830606],"float32"), )
paddle.sum(Tensor([830677],"float32"), )
paddle.sum(Tensor([830827],"float32"), )
paddle.sum(Tensor([831166],"float32"), )
paddle.sum(Tensor([832970],"float32"), )
paddle.sum(Tensor([833, 1],"float32"), )
paddle.sum(Tensor([833202],"float32"), )
paddle.sum(Tensor([833791],"float32"), )
paddle.sum(Tensor([834803],"float32"), )
paddle.sum(Tensor([834985],"float32"), )
paddle.sum(Tensor([835357],"float32"), )
paddle.sum(Tensor([835629],"float32"), )
paddle.sum(Tensor([836, 1],"float32"), )
paddle.sum(Tensor([836381],"float32"), )
paddle.sum(Tensor([837723],"float32"), )
paddle.sum(Tensor([838, 1],"int32"), )
paddle.sum(Tensor([838278],"float32"), )
paddle.sum(Tensor([84, 102144],"float16"), axis=1, )
paddle.sum(Tensor([84, 102144],"float32"), axis=1, )
paddle.sum(Tensor([84, 104832],"float16"), axis=1, )
paddle.sum(Tensor([84, 104832],"float32"), axis=1, )
paddle.sum(Tensor([84, 1],"float32"), )
paddle.sum(Tensor([84, 1],"int32"), )
paddle.sum(Tensor([84, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 200, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 208, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 240, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 248, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 264, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 280, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 288, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 304, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 304, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 312, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 312, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([84, 54400],"float16"), axis=1, )
paddle.sum(Tensor([84, 54400],"float32"), axis=1, )
paddle.sum(Tensor([84, 57600],"float16"), axis=1, )
paddle.sum(Tensor([84, 57600],"float32"), axis=1, )
paddle.sum(Tensor([84, 60800],"float16"), axis=1, )
paddle.sum(Tensor([84, 60800],"float32"), axis=1, )
paddle.sum(Tensor([84, 62400],"float16"), axis=1, )
paddle.sum(Tensor([84, 62400],"float32"), axis=1, )
paddle.sum(Tensor([84, 67200],"float16"), axis=1, )
paddle.sum(Tensor([84, 67200],"float32"), axis=1, )
paddle.sum(Tensor([84, 69888],"float16"), axis=1, )
paddle.sum(Tensor([84, 69888],"float32"), axis=1, )
paddle.sum(Tensor([84, 72960],"float16"), axis=1, )
paddle.sum(Tensor([84, 72960],"float32"), axis=1, )
paddle.sum(Tensor([84, 73984],"float16"), axis=1, )
paddle.sum(Tensor([84, 73984],"float32"), axis=1, )
paddle.sum(Tensor([84, 75392],"float16"), axis=1, )
paddle.sum(Tensor([84, 75392],"float32"), axis=1, )
paddle.sum(Tensor([84, 78336],"float16"), axis=1, )
paddle.sum(Tensor([84, 78336],"float32"), axis=1, )
paddle.sum(Tensor([84, 78400],"float16"), axis=1, )
paddle.sum(Tensor([84, 78400],"float32"), axis=1, )
paddle.sum(Tensor([84, 82688],"float16"), axis=1, )
paddle.sum(Tensor([84, 82688],"float32"), axis=1, )
paddle.sum(Tensor([84, 84480],"float16"), axis=1, )
paddle.sum(Tensor([84, 84480],"float32"), axis=1, )
paddle.sum(Tensor([84, 84864],"float16"), axis=1, )
paddle.sum(Tensor([84, 84864],"float32"), axis=1, )
paddle.sum(Tensor([84, 91392],"float16"), axis=1, )
paddle.sum(Tensor([84, 91392],"float32"), axis=1, )
paddle.sum(Tensor([84, 92416],"float16"), axis=1, )
paddle.sum(Tensor([84, 92416],"float32"), axis=1, )
paddle.sum(Tensor([84, 97280],"float16"), axis=1, )
paddle.sum(Tensor([84, 97280],"float32"), axis=1, )
paddle.sum(Tensor([840, 1],"float32"), )
paddle.sum(Tensor([840, 1],"int32"), )
paddle.sum(Tensor([840114],"float32"), )
paddle.sum(Tensor([840],"float32"), )
paddle.sum(Tensor([841, 1],"float32"), )
paddle.sum(Tensor([841983],"float32"), )
paddle.sum(Tensor([842, 1],"float32"), )
paddle.sum(Tensor([842, 1],"int32"), )
paddle.sum(Tensor([842436],"float32"), )
paddle.sum(Tensor([842480],"float32"), )
paddle.sum(Tensor([843, 1],"float32"), )
paddle.sum(Tensor([843279],"float32"), )
paddle.sum(Tensor([843950],"float32"), )
paddle.sum(Tensor([844, 1],"float32"), )
paddle.sum(Tensor([844320],"float32"), )
paddle.sum(Tensor([844621],"float32"), )
paddle.sum(Tensor([845, 1],"float32"), )
paddle.sum(Tensor([846218],"float32"), )
paddle.sum(Tensor([847, 1],"float32"), )
paddle.sum(Tensor([847066],"float32"), )
paddle.sum(Tensor([847507],"float32"), )
paddle.sum(Tensor([848, 1],"float32"), )
paddle.sum(Tensor([848, 6, 1],"float32"), )
paddle.sum(Tensor([848715],"float32"), )
paddle.sum(Tensor([848984],"float32"), )
paddle.sum(Tensor([849, 1],"float32"), )
paddle.sum(Tensor([849, 1],"int32"), )
paddle.sum(Tensor([849325],"float32"), )
paddle.sum(Tensor([849465],"float32"), )
paddle.sum(Tensor([849654],"float32"), )
paddle.sum(Tensor([849937],"float32"), )
paddle.sum(Tensor([84],"float32"), )
paddle.sum(Tensor([85, 1],"float32"), )
paddle.sum(Tensor([850, 1],"int32"), )
paddle.sum(Tensor([850906],"float32"), )
paddle.sum(Tensor([851, 1],"int32"), )
paddle.sum(Tensor([851411],"float32"), )
paddle.sum(Tensor([851669],"float32"), )
paddle.sum(Tensor([852880],"float32"), )
paddle.sum(Tensor([852],"float32"), )
paddle.sum(Tensor([853688],"float32"), )
paddle.sum(Tensor([854188],"float32"), )
paddle.sum(Tensor([854532],"float32"), )
paddle.sum(Tensor([854590],"float32"), )
paddle.sum(Tensor([8550, 1],"float32"), )
paddle.sum(Tensor([855080],"float32"), )
paddle.sum(Tensor([855961],"float32"), )
paddle.sum(Tensor([856799],"float32"), )
paddle.sum(Tensor([856982],"float32"), )
paddle.sum(Tensor([857, 1],"float32"), )
paddle.sum(Tensor([857322],"float32"), )
paddle.sum(Tensor([857697],"float32"), )
paddle.sum(Tensor([858, 1],"float32"), )
paddle.sum(Tensor([858, 1],"int32"), )
paddle.sum(Tensor([858907],"float32"), )
paddle.sum(Tensor([859, 1],"int32"), )
paddle.sum(Tensor([859169],"float32"), )
paddle.sum(Tensor([859234],"float32"), )
paddle.sum(Tensor([85932, 1],"float32"), )
paddle.sum(Tensor([85932],"float32"), )
paddle.sum(Tensor([859626],"float32"), )
paddle.sum(Tensor([859740],"float32"), )
paddle.sum(Tensor([86, 1],"float32"), )
paddle.sum(Tensor([860, 1],"float32"), )
paddle.sum(Tensor([860364],"float32"), )
paddle.sum(Tensor([860575],"float32"), )
paddle.sum(Tensor([860766],"float32"), )
paddle.sum(Tensor([860976],"float32"), )
paddle.sum(Tensor([861519],"float32"), )
paddle.sum(Tensor([861660],"float32"), )
paddle.sum(Tensor([862, 1],"float32"), )
paddle.sum(Tensor([862614],"float32"), )
paddle.sum(Tensor([863, 1],"float32"), )
paddle.sum(Tensor([863412],"float32"), )
paddle.sum(Tensor([863823],"float32"), )
paddle.sum(Tensor([864, 1],"float32"), )
paddle.sum(Tensor([864278],"float32"), )
paddle.sum(Tensor([864],"float32"), )
paddle.sum(Tensor([865513],"float32"), )
paddle.sum(Tensor([865633],"float32"), )
paddle.sum(Tensor([865739],"float32"), )
paddle.sum(Tensor([866, 1],"float32"), )
paddle.sum(Tensor([866066],"float32"), )
paddle.sum(Tensor([867608],"float32"), )
paddle.sum(Tensor([867771],"float32"), )
paddle.sum(Tensor([868526],"float32"), )
paddle.sum(Tensor([869, 1],"float32"), )
paddle.sum(Tensor([87, 1],"float32"), )
paddle.sum(Tensor([87, 380],"float32"), axis=1, )
paddle.sum(Tensor([87, 5776],"float32"), axis=1, )
paddle.sum(Tensor([870169],"float32"), )
paddle.sum(Tensor([871, 1],"int32"), )
paddle.sum(Tensor([871263],"float32"), )
paddle.sum(Tensor([871821],"float32"), )
paddle.sum(Tensor([872239],"float32"), )
paddle.sum(Tensor([873305],"float32"), )
paddle.sum(Tensor([874312],"float32"), )
paddle.sum(Tensor([875320],"float32"), )
paddle.sum(Tensor([876, 1],"float32"), )
paddle.sum(Tensor([876184],"float32"), )
paddle.sum(Tensor([876793],"float32"), )
paddle.sum(Tensor([877, 1],"float32"), )
paddle.sum(Tensor([877, 1],"int32"), )
paddle.sum(Tensor([877310],"float32"), )
paddle.sum(Tensor([878743],"float32"), )
paddle.sum(Tensor([878938],"float32"), )
paddle.sum(Tensor([879, 1],"float32"), )
paddle.sum(Tensor([879741],"float32"), )
paddle.sum(Tensor([88, 102144],"float16"), axis=1, )
paddle.sum(Tensor([88, 102144],"float32"), axis=1, )
paddle.sum(Tensor([88, 1],"float32"), )
paddle.sum(Tensor([88, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 200, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 200, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 200, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 208, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 216, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 248, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 256, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 256, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 256, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 264, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 264, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 272, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 272, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 272, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 272, 320],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 272, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 280, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 280, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 304, 216],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 304, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 31, 1],"float32"), )
paddle.sum(Tensor([88, 320, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 33, 1],"float32"), )
paddle.sum(Tensor([88, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([88, 34, 1],"float32"), )
paddle.sum(Tensor([88, 35, 1],"float32"), )
paddle.sum(Tensor([88, 36, 1],"float32"), )
paddle.sum(Tensor([88, 37, 1],"float32"), )
paddle.sum(Tensor([88, 38, 1],"float32"), )
paddle.sum(Tensor([88, 39, 1],"float32"), )
paddle.sum(Tensor([88, 40, 1],"float32"), )
paddle.sum(Tensor([88, 41, 1],"float32"), )
paddle.sum(Tensor([88, 42, 1],"float32"), )
paddle.sum(Tensor([88, 43, 1],"float32"), )
paddle.sum(Tensor([88, 44, 1],"float32"), )
paddle.sum(Tensor([88, 45, 1],"float32"), )
paddle.sum(Tensor([88, 46, 1],"float32"), )
paddle.sum(Tensor([88, 47, 1],"float32"), )
paddle.sum(Tensor([88, 48, 1],"float32"), )
paddle.sum(Tensor([88, 49, 1],"float32"), )
paddle.sum(Tensor([88, 50, 1],"float32"), )
paddle.sum(Tensor([88, 51, 1],"float32"), )
paddle.sum(Tensor([88, 52, 1],"float32"), )
paddle.sum(Tensor([88, 53, 1],"float32"), )
paddle.sum(Tensor([88, 54, 1],"float32"), )
paddle.sum(Tensor([88, 54400],"float16"), axis=1, )
paddle.sum(Tensor([88, 54400],"float32"), axis=1, )
paddle.sum(Tensor([88, 55, 1],"float32"), )
paddle.sum(Tensor([88, 56, 1],"float32"), )
paddle.sum(Tensor([88, 56000],"float16"), axis=1, )
paddle.sum(Tensor([88, 56000],"float32"), axis=1, )
paddle.sum(Tensor([88, 57, 1],"float32"), )
paddle.sum(Tensor([88, 57600],"float16"), axis=1, )
paddle.sum(Tensor([88, 57600],"float32"), axis=1, )
paddle.sum(Tensor([88, 58, 1],"float32"), )
paddle.sum(Tensor([88, 59200],"float16"), axis=1, )
paddle.sum(Tensor([88, 59200],"float32"), axis=1, )
paddle.sum(Tensor([88, 60800],"float16"), axis=1, )
paddle.sum(Tensor([88, 60800],"float32"), axis=1, )
paddle.sum(Tensor([88, 62400],"float16"), axis=1, )
paddle.sum(Tensor([88, 62400],"float32"), axis=1, )
paddle.sum(Tensor([88, 63232],"float16"), axis=1, )
paddle.sum(Tensor([88, 63232],"float32"), axis=1, )
paddle.sum(Tensor([88, 65664],"float16"), axis=1, )
paddle.sum(Tensor([88, 65664],"float32"), axis=1, )
paddle.sum(Tensor([88, 67200],"float16"), axis=1, )
paddle.sum(Tensor([88, 67200],"float32"), axis=1, )
paddle.sum(Tensor([88, 69632],"float16"), axis=1, )
paddle.sum(Tensor([88, 69632],"float32"), axis=1, )
paddle.sum(Tensor([88, 73984],"float16"), axis=1, )
paddle.sum(Tensor([88, 73984],"float32"), axis=1, )
paddle.sum(Tensor([88, 77824],"float16"), axis=1, )
paddle.sum(Tensor([88, 77824],"float32"), axis=1, )
paddle.sum(Tensor([88, 78400],"float16"), axis=1, )
paddle.sum(Tensor([88, 78400],"float32"), axis=1, )
paddle.sum(Tensor([88, 80512],"float16"), axis=1, )
paddle.sum(Tensor([88, 80512],"float32"), axis=1, )
paddle.sum(Tensor([88, 82688],"float16"), axis=1, )
paddle.sum(Tensor([88, 82688],"float32"), axis=1, )
paddle.sum(Tensor([88, 83328],"float16"), axis=1, )
paddle.sum(Tensor([88, 83328],"float32"), axis=1, )
paddle.sum(Tensor([88, 84480],"float16"), axis=1, )
paddle.sum(Tensor([88, 84480],"float32"), axis=1, )
paddle.sum(Tensor([88, 86016],"float16"), axis=1, )
paddle.sum(Tensor([88, 86016],"float32"), axis=1, )
paddle.sum(Tensor([88, 87040],"float16"), axis=1, )
paddle.sum(Tensor([88, 87040],"float32"), axis=1, )
paddle.sum(Tensor([88, 87552],"float16"), axis=1, )
paddle.sum(Tensor([88, 87552],"float32"), axis=1, )
paddle.sum(Tensor([88, 88704],"float16"), axis=1, )
paddle.sum(Tensor([88, 88704],"float32"), axis=1, )
paddle.sum(Tensor([88, 89216],"float16"), axis=1, )
paddle.sum(Tensor([88, 89216],"float32"), axis=1, )
paddle.sum(Tensor([88, 91392],"float16"), axis=1, )
paddle.sum(Tensor([88, 91392],"float32"), axis=1, )
paddle.sum(Tensor([88, 92416],"float16"), axis=1, )
paddle.sum(Tensor([88, 92416],"float32"), axis=1, )
paddle.sum(Tensor([88, 94080],"float16"), axis=1, )
paddle.sum(Tensor([88, 94080],"float32"), axis=1, )
paddle.sum(Tensor([88, 94848],"float16"), axis=1, )
paddle.sum(Tensor([88, 94848],"float32"), axis=1, )
paddle.sum(Tensor([88, 97280],"float16"), axis=1, )
paddle.sum(Tensor([88, 97280],"float32"), axis=1, )
paddle.sum(Tensor([8810, 1],"float32"), name=None, )
paddle.sum(Tensor([881672],"float32"), )
paddle.sum(Tensor([882579],"float32"), )
paddle.sum(Tensor([882763],"float32"), )
paddle.sum(Tensor([882837],"float32"), )
paddle.sum(Tensor([883250],"float32"), )
paddle.sum(Tensor([883912],"float32"), )
paddle.sum(Tensor([884532],"float32"), )
paddle.sum(Tensor([884750],"float32"), )
paddle.sum(Tensor([885007],"float32"), )
paddle.sum(Tensor([885414],"float32"), )
paddle.sum(Tensor([885918],"float32"), )
paddle.sum(Tensor([885970],"float32"), )
paddle.sum(Tensor([886248],"float32"), )
paddle.sum(Tensor([887580],"float32"), )
paddle.sum(Tensor([888312],"float32"), )
paddle.sum(Tensor([888865],"float32"), )
paddle.sum(Tensor([888943],"float32"), )
paddle.sum(Tensor([889134],"float32"), )
paddle.sum(Tensor([889653],"float32"), )
paddle.sum(Tensor([889717],"float32"), )
paddle.sum(Tensor([889719],"float32"), )
paddle.sum(Tensor([88],"float32"), )
paddle.sum(Tensor([89, 1],"float32"), )
paddle.sum(Tensor([890, 1],"float32"), )
paddle.sum(Tensor([890392],"float32"), )
paddle.sum(Tensor([890649],"float32"), )
paddle.sum(Tensor([890854],"float32"), )
paddle.sum(Tensor([891, 1],"float32"), )
paddle.sum(Tensor([891361],"float32"), )
paddle.sum(Tensor([892196],"float32"), )
paddle.sum(Tensor([894148],"float32"), )
paddle.sum(Tensor([894537],"float32"), )
paddle.sum(Tensor([894751],"float32"), )
paddle.sum(Tensor([894988],"float32"), )
paddle.sum(Tensor([895208],"float32"), )
paddle.sum(Tensor([895230],"float32"), )
paddle.sum(Tensor([895846],"float32"), )
paddle.sum(Tensor([895990],"float32"), )
paddle.sum(Tensor([897, 1],"float32"), )
paddle.sum(Tensor([897440],"float32"), )
paddle.sum(Tensor([898090],"float32"), )
paddle.sum(Tensor([898752],"float32"), )
paddle.sum(Tensor([899302],"float32"), )
paddle.sum(Tensor([899774],"float32"), )
paddle.sum(Tensor([899796],"float32"), )
paddle.sum(Tensor([899981],"float32"), )
paddle.sum(Tensor([8],"float32"), )
paddle.sum(Tensor([9, 1280],"float32"), 1, keepdim=False, name=None, )
paddle.sum(Tensor([9, 1],"float32"), )
paddle.sum(Tensor([9, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([9, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([9, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([9, 304, 200],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([9, 54400],"float32"), axis=1, )
paddle.sum(Tensor([9, 60800],"float32"), axis=1, )
paddle.sum(Tensor([9, 62400],"float32"), axis=1, )
paddle.sum(Tensor([9, 8],"int64"), )
paddle.sum(Tensor([90, 1],"float32"), )
paddle.sum(Tensor([900, 1],"float32"), )
paddle.sum(Tensor([900, 1],"int32"), )
paddle.sum(Tensor([900075],"float32"), )
paddle.sum(Tensor([900266],"float32"), )
paddle.sum(Tensor([900],"float32"), )
paddle.sum(Tensor([901, 1],"int32"), )
paddle.sum(Tensor([901559],"float32"), )
paddle.sum(Tensor([901715],"float32"), )
paddle.sum(Tensor([902319],"float32"), )
paddle.sum(Tensor([903007],"float32"), )
paddle.sum(Tensor([903681],"float32"), )
paddle.sum(Tensor([904000],"float32"), )
paddle.sum(Tensor([904294],"float32"), )
paddle.sum(Tensor([904357],"float32"), )
paddle.sum(Tensor([904803],"float32"), )
paddle.sum(Tensor([904945],"float32"), )
paddle.sum(Tensor([904],"float32"), )
paddle.sum(Tensor([905197],"float32"), )
paddle.sum(Tensor([905200],"float32"), )
paddle.sum(Tensor([905414],"float32"), )
paddle.sum(Tensor([905529],"float32"), )
paddle.sum(Tensor([905562],"float32"), )
paddle.sum(Tensor([905744],"float32"), )
paddle.sum(Tensor([906544],"float32"), )
paddle.sum(Tensor([906698],"float32"), )
paddle.sum(Tensor([907038],"float32"), )
paddle.sum(Tensor([907233],"float32"), )
paddle.sum(Tensor([907369],"float32"), )
paddle.sum(Tensor([907504],"float32"), )
paddle.sum(Tensor([908154],"float32"), )
paddle.sum(Tensor([908431],"float32"), )
paddle.sum(Tensor([908506],"float32"), )
paddle.sum(Tensor([909, 1],"float32"), )
paddle.sum(Tensor([91, 1],"float32"), )
paddle.sum(Tensor([910, 1],"float32"), )
paddle.sum(Tensor([910109],"float32"), )
paddle.sum(Tensor([910472],"float32"), )
paddle.sum(Tensor([910594],"float32"), )
paddle.sum(Tensor([910774],"float32"), )
paddle.sum(Tensor([910889],"float32"), )
paddle.sum(Tensor([911146],"float32"), )
paddle.sum(Tensor([911663],"float32"), )
paddle.sum(Tensor([911929],"float32"), )
paddle.sum(Tensor([911980],"float32"), )
paddle.sum(Tensor([912, 1],"float32"), )
paddle.sum(Tensor([912, 1],"int32"), )
paddle.sum(Tensor([912236],"float32"), )
paddle.sum(Tensor([912645],"float32"), )
paddle.sum(Tensor([912773],"float32"), )
paddle.sum(Tensor([912939],"float32"), )
paddle.sum(Tensor([913153],"float32"), )
paddle.sum(Tensor([913434],"float32"), )
paddle.sum(Tensor([913677],"float32"), )
paddle.sum(Tensor([913977],"float32"), )
paddle.sum(Tensor([914, 1],"float32"), )
paddle.sum(Tensor([914729],"float32"), )
paddle.sum(Tensor([915, 1],"float32"), )
paddle.sum(Tensor([915353],"float32"), )
paddle.sum(Tensor([915594],"float32"), )
paddle.sum(Tensor([915856],"float32"), )
paddle.sum(Tensor([915887],"float32"), )
paddle.sum(Tensor([916011],"float32"), )
paddle.sum(Tensor([916356],"float32"), )
paddle.sum(Tensor([917, 1],"float32"), )
paddle.sum(Tensor([917016],"float32"), )
paddle.sum(Tensor([917479],"float32"), )
paddle.sum(Tensor([917660],"float32"), )
paddle.sum(Tensor([917966],"float32"), )
paddle.sum(Tensor([918389],"float32"), )
paddle.sum(Tensor([919510],"float32"), )
paddle.sum(Tensor([919706],"float32"), )
paddle.sum(Tensor([91],"float32"), )
paddle.sum(Tensor([92, 102144],"float16"), axis=1, )
paddle.sum(Tensor([92, 102144],"float32"), axis=1, )
paddle.sum(Tensor([92, 104832],"float16"), axis=1, )
paddle.sum(Tensor([92, 104832],"float32"), axis=1, )
paddle.sum(Tensor([92, 1],"float32"), )
paddle.sum(Tensor([92, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 200, 288],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 200, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 272, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 272, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 272, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 280, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 304, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 304, 328],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 312, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([92, 54400],"float16"), axis=1, )
paddle.sum(Tensor([92, 54400],"float32"), axis=1, )
paddle.sum(Tensor([92, 57600],"float16"), axis=1, )
paddle.sum(Tensor([92, 57600],"float32"), axis=1, )
paddle.sum(Tensor([92, 59200],"float16"), axis=1, )
paddle.sum(Tensor([92, 59200],"float32"), axis=1, )
paddle.sum(Tensor([92, 60800],"float16"), axis=1, )
paddle.sum(Tensor([92, 60800],"float32"), axis=1, )
paddle.sum(Tensor([92, 67200],"float16"), axis=1, )
paddle.sum(Tensor([92, 67200],"float32"), axis=1, )
paddle.sum(Tensor([92, 76160],"float16"), axis=1, )
paddle.sum(Tensor([92, 76160],"float32"), axis=1, )
paddle.sum(Tensor([92, 82688],"float16"), axis=1, )
paddle.sum(Tensor([92, 82688],"float32"), axis=1, )
paddle.sum(Tensor([92, 84864],"float16"), axis=1, )
paddle.sum(Tensor([92, 84864],"float32"), axis=1, )
paddle.sum(Tensor([92, 89216],"float16"), axis=1, )
paddle.sum(Tensor([92, 89216],"float32"), axis=1, )
paddle.sum(Tensor([92, 91392],"float16"), axis=1, )
paddle.sum(Tensor([92, 91392],"float32"), axis=1, )
paddle.sum(Tensor([92, 91840],"float16"), axis=1, )
paddle.sum(Tensor([92, 91840],"float32"), axis=1, )
paddle.sum(Tensor([92, 92416],"float16"), axis=1, )
paddle.sum(Tensor([92, 92416],"float32"), axis=1, )
paddle.sum(Tensor([92, 94848],"float16"), axis=1, )
paddle.sum(Tensor([92, 94848],"float32"), axis=1, )
paddle.sum(Tensor([92, 99712],"float16"), axis=1, )
paddle.sum(Tensor([92, 99712],"float32"), axis=1, )
paddle.sum(Tensor([920, 1],"float32"), )
paddle.sum(Tensor([920, 1],"int32"), )
paddle.sum(Tensor([920069],"float32"), )
paddle.sum(Tensor([920160],"float32"), )
paddle.sum(Tensor([920264],"float32"), )
paddle.sum(Tensor([920358],"float32"), )
paddle.sum(Tensor([920493],"float32"), )
paddle.sum(Tensor([920889],"float32"), )
paddle.sum(Tensor([921, 1],"float32"), )
paddle.sum(Tensor([922233],"float32"), )
paddle.sum(Tensor([923067],"float32"), )
paddle.sum(Tensor([923373],"float32"), )
paddle.sum(Tensor([923942],"float32"), )
paddle.sum(Tensor([924014],"float32"), )
paddle.sum(Tensor([924579],"float32"), )
paddle.sum(Tensor([925379],"float32"), )
paddle.sum(Tensor([925403],"float32"), )
paddle.sum(Tensor([926213],"float32"), )
paddle.sum(Tensor([926271],"float32"), )
paddle.sum(Tensor([926689],"float32"), )
paddle.sum(Tensor([926920],"float32"), )
paddle.sum(Tensor([929, 1],"int32"), )
paddle.sum(Tensor([929142],"float32"), )
paddle.sum(Tensor([929509],"float32"), )
paddle.sum(Tensor([929896],"float32"), )
paddle.sum(Tensor([92],"float32"), )
paddle.sum(Tensor([93, 1],"float32"), )
paddle.sum(Tensor([930253],"float32"), )
paddle.sum(Tensor([931, 1],"float32"), )
paddle.sum(Tensor([931, 1],"int32"), )
paddle.sum(Tensor([931439],"float32"), )
paddle.sum(Tensor([931692],"float32"), )
paddle.sum(Tensor([931719],"float32"), )
paddle.sum(Tensor([932, 1],"float32"), )
paddle.sum(Tensor([932645],"float32"), )
paddle.sum(Tensor([932844],"float32"), )
paddle.sum(Tensor([933492],"float32"), )
paddle.sum(Tensor([934407],"float32"), )
paddle.sum(Tensor([935, 1],"int32"), )
paddle.sum(Tensor([935486],"float32"), )
paddle.sum(Tensor([935575],"float32"), )
paddle.sum(Tensor([936, 1],"float32"), )
paddle.sum(Tensor([936, 1],"int32"), )
paddle.sum(Tensor([936297],"float32"), )
paddle.sum(Tensor([936685],"float32"), )
paddle.sum(Tensor([936705],"float32"), )
paddle.sum(Tensor([936939],"float32"), )
paddle.sum(Tensor([937, 1],"int32"), )
paddle.sum(Tensor([937631],"float32"), )
paddle.sum(Tensor([938, 1],"float32"), )
paddle.sum(Tensor([938269],"float32"), )
paddle.sum(Tensor([938499],"float32"), )
paddle.sum(Tensor([939, 1],"float32"), )
paddle.sum(Tensor([939644],"float32"), )
paddle.sum(Tensor([94, 1],"float32"), )
paddle.sum(Tensor([940, 1],"int32"), )
paddle.sum(Tensor([940154],"float32"), )
paddle.sum(Tensor([940243],"float32"), )
paddle.sum(Tensor([940340],"float32"), )
paddle.sum(Tensor([941057],"float32"), )
paddle.sum(Tensor([941063],"float32"), )
paddle.sum(Tensor([941136],"float32"), )
paddle.sum(Tensor([941840],"float32"), )
paddle.sum(Tensor([942, 1],"int32"), )
paddle.sum(Tensor([942039],"float32"), )
paddle.sum(Tensor([942419],"float32"), )
paddle.sum(Tensor([943166],"float32"), )
paddle.sum(Tensor([943234],"float32"), )
paddle.sum(Tensor([943934],"float32"), )
paddle.sum(Tensor([944, 1],"int32"), )
paddle.sum(Tensor([944010],"float32"), )
paddle.sum(Tensor([944052],"float32"), )
paddle.sum(Tensor([944323],"float32"), )
paddle.sum(Tensor([944676],"float32"), )
paddle.sum(Tensor([944],"float32"), )
paddle.sum(Tensor([945157],"float32"), )
paddle.sum(Tensor([945343],"float32"), )
paddle.sum(Tensor([946295],"float32"), )
paddle.sum(Tensor([946388],"float32"), )
paddle.sum(Tensor([946452],"float32"), )
paddle.sum(Tensor([947132],"float32"), )
paddle.sum(Tensor([947393],"float32"), )
paddle.sum(Tensor([948, 1],"int32"), )
paddle.sum(Tensor([948],"float32"), )
paddle.sum(Tensor([95, 1],"float32"), )
paddle.sum(Tensor([950, 1],"float32"), )
paddle.sum(Tensor([950773],"float32"), )
paddle.sum(Tensor([951555],"float32"), )
paddle.sum(Tensor([951834],"float32"), )
paddle.sum(Tensor([952036],"float32"), )
paddle.sum(Tensor([952616],"float32"), )
paddle.sum(Tensor([953556],"float32"), )
paddle.sum(Tensor([95480, 1],"float32"), )
paddle.sum(Tensor([95480],"float32"), )
paddle.sum(Tensor([955230],"float32"), )
paddle.sum(Tensor([955839],"float32"), )
paddle.sum(Tensor([956, 1],"int32"), )
paddle.sum(Tensor([956773],"float32"), )
paddle.sum(Tensor([957, 1],"int32"), )
paddle.sum(Tensor([957158],"float32"), )
paddle.sum(Tensor([957708],"float32"), )
paddle.sum(Tensor([957711],"float32"), )
paddle.sum(Tensor([958699],"float32"), )
paddle.sum(Tensor([958738],"float32"), )
paddle.sum(Tensor([958864],"float32"), )
paddle.sum(Tensor([958929],"float32"), )
paddle.sum(Tensor([959358],"float32"), )
paddle.sum(Tensor([959543],"float32"), )
paddle.sum(Tensor([96, 102144],"float16"), axis=1, )
paddle.sum(Tensor([96, 102144],"float32"), axis=1, )
paddle.sum(Tensor([96, 112896],"float16"), axis=1, )
paddle.sum(Tensor([96, 112896],"float32"), axis=1, )
paddle.sum(Tensor([96, 15, 20, 100],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([96, 192, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([96, 1],"float32"), )
paddle.sum(Tensor([96, 200, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 200, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 200, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 208, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 24, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([96, 240, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 248, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 256, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 264, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 27, 1],"float32"), )
paddle.sum(Tensor([96, 272, 216],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 272, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 272, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 272, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 288, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 29, 1],"float32"), )
paddle.sum(Tensor([96, 296, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 30, 1],"float32"), )
paddle.sum(Tensor([96, 304, 216],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 304, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 304, 280],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 304, 296],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 304, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 304, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 31, 1],"float32"), )
paddle.sum(Tensor([96, 32, 1],"float32"), )
paddle.sum(Tensor([96, 32, 32],"float32"), axis=0, )
paddle.sum(Tensor([96, 320, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 33, 1],"float32"), )
paddle.sum(Tensor([96, 336, 272],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 336, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 336, 336],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([96, 34, 1],"float32"), )
paddle.sum(Tensor([96, 35, 1],"float32"), )
paddle.sum(Tensor([96, 36, 1],"float32"), )
paddle.sum(Tensor([96, 37, 1],"float32"), )
paddle.sum(Tensor([96, 38, 1],"float32"), )
paddle.sum(Tensor([96, 384, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([96, 39, 1],"float32"), )
paddle.sum(Tensor([96, 40, 1],"float32"), )
paddle.sum(Tensor([96, 41, 1],"float32"), )
paddle.sum(Tensor([96, 42, 1],"float32"), )
paddle.sum(Tensor([96, 43, 1],"float32"), )
paddle.sum(Tensor([96, 44, 1],"float32"), )
paddle.sum(Tensor([96, 45, 1],"float32"), )
paddle.sum(Tensor([96, 46, 1],"float32"), )
paddle.sum(Tensor([96, 47, 1],"float32"), )
paddle.sum(Tensor([96, 48, 1],"float32"), )
paddle.sum(Tensor([96, 49, 1],"float32"), )
paddle.sum(Tensor([96, 50, 1],"float32"), )
paddle.sum(Tensor([96, 51, 1],"float32"), )
paddle.sum(Tensor([96, 52, 1],"float32"), )
paddle.sum(Tensor([96, 53, 1],"float32"), )
paddle.sum(Tensor([96, 54400],"float16"), axis=1, )
paddle.sum(Tensor([96, 54400],"float32"), axis=1, )
paddle.sum(Tensor([96, 58752],"float16"), axis=1, )
paddle.sum(Tensor([96, 58752],"float32"), axis=1, )
paddle.sum(Tensor([96, 59200],"float16"), axis=1, )
paddle.sum(Tensor([96, 59200],"float32"), axis=1, )
paddle.sum(Tensor([96, 60800],"float16"), axis=1, )
paddle.sum(Tensor([96, 60800],"float32"), axis=1, )
paddle.sum(Tensor([96, 62400],"float16"), axis=1, )
paddle.sum(Tensor([96, 62400],"float32"), axis=1, )
paddle.sum(Tensor([96, 63232],"float16"), axis=1, )
paddle.sum(Tensor([96, 63232],"float32"), axis=1, )
paddle.sum(Tensor([96, 64, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([96, 65664],"float16"), axis=1, )
paddle.sum(Tensor([96, 65664],"float32"), axis=1, )
paddle.sum(Tensor([96, 67200],"float16"), axis=1, )
paddle.sum(Tensor([96, 67200],"float32"), axis=1, )
paddle.sum(Tensor([96, 67456],"float16"), axis=1, )
paddle.sum(Tensor([96, 67456],"float32"), axis=1, )
paddle.sum(Tensor([96, 72960],"float16"), axis=1, )
paddle.sum(Tensor([96, 72960],"float32"), axis=1, )
paddle.sum(Tensor([96, 76160],"float16"), axis=1, )
paddle.sum(Tensor([96, 76160],"float32"), axis=1, )
paddle.sum(Tensor([96, 77824],"float16"), axis=1, )
paddle.sum(Tensor([96, 77824],"float32"), axis=1, )
paddle.sum(Tensor([96, 78336],"float16"), axis=1, )
paddle.sum(Tensor([96, 78336],"float32"), axis=1, )
paddle.sum(Tensor([96, 80256],"float16"), axis=1, )
paddle.sum(Tensor([96, 80256],"float32"), axis=1, )
paddle.sum(Tensor([96, 82688],"float16"), axis=1, )
paddle.sum(Tensor([96, 82688],"float32"), axis=1, )
paddle.sum(Tensor([96, 85120],"float16"), axis=1, )
paddle.sum(Tensor([96, 85120],"float32"), axis=1, )
paddle.sum(Tensor([96, 89984],"float16"), axis=1, )
paddle.sum(Tensor([96, 89984],"float32"), axis=1, )
paddle.sum(Tensor([96, 91392],"float16"), axis=1, )
paddle.sum(Tensor([96, 91392],"float32"), axis=1, )
paddle.sum(Tensor([96, 92416],"float16"), axis=1, )
paddle.sum(Tensor([96, 92416],"float32"), axis=1, )
paddle.sum(Tensor([96, 96, 3, 3],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([96, 97280],"float16"), axis=1, )
paddle.sum(Tensor([96, 97280],"float32"), axis=1, )
paddle.sum(Tensor([960, 1],"int32"), )
paddle.sum(Tensor([961422],"float32"), )
paddle.sum(Tensor([961439],"float32"), )
paddle.sum(Tensor([961515],"float32"), )
paddle.sum(Tensor([961565],"float32"), )
paddle.sum(Tensor([961572],"float32"), )
paddle.sum(Tensor([962740],"float32"), )
paddle.sum(Tensor([962872],"float32"), )
paddle.sum(Tensor([963948],"float32"), )
paddle.sum(Tensor([964, 1],"float32"), )
paddle.sum(Tensor([964107],"float32"), )
paddle.sum(Tensor([965701],"float32"), )
paddle.sum(Tensor([965841],"float32"), )
paddle.sum(Tensor([966, 1],"float32"), )
paddle.sum(Tensor([966455],"float32"), )
paddle.sum(Tensor([966472],"float32"), )
paddle.sum(Tensor([966506],"float32"), )
paddle.sum(Tensor([967354],"float32"), )
paddle.sum(Tensor([968690],"float32"), )
paddle.sum(Tensor([968731],"float32"), )
paddle.sum(Tensor([969511],"float32"), )
paddle.sum(Tensor([969848],"float32"), )
paddle.sum(Tensor([96],"float32"), )
paddle.sum(Tensor([97, 1],"float32"), )
paddle.sum(Tensor([970, 1],"float32"), )
paddle.sum(Tensor([970426],"float32"), )
paddle.sum(Tensor([970473],"float32"), )
paddle.sum(Tensor([971, 1],"float32"), )
paddle.sum(Tensor([971, 1],"int32"), )
paddle.sum(Tensor([971838],"float32"), )
paddle.sum(Tensor([972067],"float32"), )
paddle.sum(Tensor([973, 1],"float32"), )
paddle.sum(Tensor([973556],"float32"), )
paddle.sum(Tensor([973822],"float32"), )
paddle.sum(Tensor([976558],"float32"), )
paddle.sum(Tensor([978997],"float32"), )
paddle.sum(Tensor([979079],"float32"), )
paddle.sum(Tensor([979558],"float32"), )
paddle.sum(Tensor([98, 1],"float32"), )
paddle.sum(Tensor([980, 1],"int32"), )
paddle.sum(Tensor([980291],"float32"), )
paddle.sum(Tensor([982059],"float32"), )
paddle.sum(Tensor([984839],"float32"), )
paddle.sum(Tensor([985372],"float32"), )
paddle.sum(Tensor([985929],"float32"), )
paddle.sum(Tensor([986636],"float32"), )
paddle.sum(Tensor([986661],"float32"), )
paddle.sum(Tensor([987, 1],"int32"), )
paddle.sum(Tensor([988, 1],"float32"), )
paddle.sum(Tensor([989643],"float32"), )
paddle.sum(Tensor([989969],"float32"), )
paddle.sum(Tensor([98],"float32"), )
paddle.sum(Tensor([99, 1],"float32"), )
paddle.sum(Tensor([990, 1],"float32"), )
paddle.sum(Tensor([990230],"float32"), )
paddle.sum(Tensor([990386],"float32"), )
paddle.sum(Tensor([992456],"float32"), )
paddle.sum(Tensor([994032],"float32"), )
paddle.sum(Tensor([994466],"float32"), )
paddle.sum(Tensor([995, 1],"int32"), )
paddle.sum(Tensor([995434],"float32"), )
paddle.sum(Tensor([995655],"float32"), )
paddle.sum(Tensor([996211],"float32"), )
paddle.sum(Tensor([9],"float32"), )
paddle.sum(Tensor([],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([],"bool"), axis=list[0,], keepdim=False, )
paddle.sum(Tensor([],"bool"), axis=list[], keepdim=False, )
paddle.sum(Tensor([],"float32"), )
paddle.sum(Tensor([],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([],"float32"), axis=-1, )
paddle.sum(Tensor([],"float32"), axis=0, )
paddle.sum(Tensor([],"float32"), axis=None, )
paddle.sum(Tensor([],"float32"), axis=list[], )
paddle.sum(Tensor([],"float32"), list[], keepdim=False, name=None, )
paddle.sum(Tensor([],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([],"int64"), axis=list[-1,], keepdim=False, name=None, )
paddle.sum(Tensor([],"int64"), axis=list[0,], keepdim=False, name=None, )
paddle.sum(Tensor([],"int64"), axis=list[], keepdim=False, name=None, )
paddle.sum(x=Tensor([1, 1444, 1, 1],"float32"), )
paddle.sum(x=Tensor([1, 36, 1, 1],"float32"), )
paddle.sum(x=Tensor([1, 38, 1],"float32"), )
paddle.sum(x=Tensor([1, 9, 1],"float32"), )
paddle.sum(x=Tensor([100, 162],"float32"), axis=1, )
paddle.sum(x=Tensor([100, 2888],"float32"), axis=1, )
paddle.sum(x=Tensor([100, 380],"float32"), axis=1, )
paddle.sum(x=Tensor([100, 45],"float32"), axis=1, )
paddle.sum(x=Tensor([2, 2],"float32"), )
paddle.sum(x=Tensor([2, 2],"float32"), axis=0, keepdim=True, )
paddle.sum(x=Tensor([2, 2],"float32"), dtype="float64", )
paddle.sum(x=Tensor([2, 2],"float64"), )
paddle.sum(x=Tensor([2, 2],"float64"), axis=-1, )
paddle.sum(x=Tensor([2, 2],"float64"), axis=0, keepdim=True, )
paddle.sum(x=Tensor([2, 2],"float64"), axis=1, )
paddle.sum(x=Tensor([2, 2],"float64"), axis=Tensor([1],"int64"), )
paddle.sum(x=Tensor([2, 2],"float64"), axis=list[0,1,], )
paddle.sum(x=Tensor([2, 2],"float64"), dtype="float64", )
paddle.sum(x=Tensor([2, 2],"int32"), )
paddle.sum(x=Tensor([2, 3, 4, 5],"float64"), keepdim=True, )
paddle.sum(x=Tensor([227, 162],"float32"), axis=1, )
paddle.sum(x=Tensor([227, 45],"float32"), axis=1, )
paddle.sum(x=Tensor([256, 162],"float32"), axis=1, )
paddle.sum(x=Tensor([256, 2888],"float32"), axis=1, )
paddle.sum(x=Tensor([256, 380],"float32"), axis=1, )
paddle.sum(x=Tensor([256, 45],"float32"), axis=1, )
paddle.sum(x=Tensor([36],"float32"), )
paddle.sum(x=Tensor([56, 2888],"float32"), axis=1, )
paddle.sum(x=Tensor([56, 380],"float32"), axis=1, )
paddle.sum(x=Tensor([82, 162],"float32"), axis=1, )
paddle.sum(x=Tensor([82, 45],"float32"), axis=1, )
paddle.sum(x=Tensor([87, 2888],"float32"), axis=1, )
paddle.sum(x=Tensor([87, 380],"float32"), axis=1, )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 16, 1024, 1024],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 4, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 4, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([16, 2, 1024, 1024],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([2, 1, 1024, 1024],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([2, 2, 1024, 1024],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([8, 4, 1024, 1024],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 1, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 1, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([3, 1, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([5, 7, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([7, 11, 32, 32],"float32"), )
paddle.incubate.nn.functional.fused_bias_act(Tensor([1, 64],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([100, 640],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([101, 128],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([101, 256],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([104, 640],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([123, 22016],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([131, 22016],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([136, 22016],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([145, 22016],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([154, 22016],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([167, 22016],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([172, 22016],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([181, 22016],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 128],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 22016],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 256],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 640],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([203, 22016],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([221, 22016],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([31, 64],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([58, 128],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([58, 256],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([59, 256],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([60, 128],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([60, 256],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([64, 640],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([67, 128],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([67, 256],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([68, 256],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([71, 640],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([74, 128],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([76, 256],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([77, 640],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([78, 128],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([78, 256],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([81, 640],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([87, 128],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([88, 128],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([89, 640],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([90, 256],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([91, 256],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([92, 640],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([97, 128],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([98, 256],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 10],"int32"), bias=Tensor([10],"float32"), dequant_scales=Tensor([10],"float32"), act_method="gelu", compute_dtype="fp32", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"float16"), bias=Tensor([512],"float16"), act_method="geglu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"float16"), bias=Tensor([512],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"float16"), bias=Tensor([512],"float16"), act_method="gelu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"float16"), bias=Tensor([512],"float16"), act_method="gelu", compute_dtype="fp16", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"float16"), bias=Tensor([512],"float16"), act_method="swiglu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"float32"), bias=None, act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"float32"), bias=Tensor([512],"float32"), act_method="gelu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"float32"), bias=Tensor([512],"float32"), act_method="gelu", compute_dtype="fp32", )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([40, 50],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([40, 50],"float32"), Tensor([40],"float32"), False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([50, 40],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([50, 40],"float32"), Tensor([40],"float32"), False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 7],"float16"), Tensor([5, 7],"float16"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 7],"float16"), Tensor([5, 7],"float16"), Tensor([5],"float16"), False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 7],"float16"), Tensor([7, 5],"float16"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 7],"float16"), Tensor([7, 5],"float16"), Tensor([5],"float16"), False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([40, 50],"float32"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([40, 50],"float32"), Tensor([40],"float32"), True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([50, 40],"float32"), None, True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([50, 40],"float32"), Tensor([40],"float32"), True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 4],"float16"), Tensor([5, 7],"float16"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 4],"float16"), Tensor([5, 7],"float16"), Tensor([5],"float16"), True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 4],"float16"), Tensor([7, 5],"float16"), None, True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 4],"float16"), Tensor([7, 5],"float16"), Tensor([5],"float16"), True, False, )
paddle.incubate.nn.functional.fused_multi_head_attention(Tensor([8, 128, 1024],"float16"), Tensor([3, 16, 64, 1024],"float16"), Tensor([1024, 1024],"float16"), False, Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), 1e-05, Tensor([3, 16, 64],"float16"), Tensor([1024],"float16"), None, Tensor([8, 16, 128, 128],"float16"), 0.0, 0.0, 1e-05, num_heads=16, transpose_qkv_wb=False, )
paddle.incubate.nn.functional.fused_multi_head_attention(Tensor([8, 128, 1024],"float32"), Tensor([1024, 3072],"float32"), Tensor([1024, 1024],"float32"), False, Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), 1e-05, None, None, None, Tensor([8, 16, 128, 128],"float32"), 0.0, 0.0, 1e-05, num_heads=16, transpose_qkv_wb=True, )
paddle.incubate.nn.functional.fused_multi_head_attention(Tensor([8, 128, 1024],"float32"), Tensor([1024, 3072],"float32"), Tensor([1024, 1024],"float32"), False, Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), 1e-05, Tensor([3072],"float32"), Tensor([1024],"float32"), None, Tensor([8, 16, 128, 128],"float32"), 0.0, 0.0, 1e-05, num_heads=16, transpose_qkv_wb=True, )
paddle.incubate.nn.functional.fused_multi_head_attention(Tensor([8, 128, 1024],"float32"), Tensor([3, 16, 64, 1024],"float32"), Tensor([1024, 1024],"float32"), False, Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), 1e-05, None, None, None, Tensor([8, 16, 128, 128],"float32"), 0.0, 0.0, 1e-05, num_heads=16, transpose_qkv_wb=False, )
paddle.incubate.nn.functional.fused_multi_head_attention(Tensor([8, 128, 1024],"float32"), Tensor([3, 16, 64, 1024],"float32"), Tensor([1024, 1024],"float32"), False, Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), 1e-05, Tensor([3, 16, 64],"float32"), Tensor([1024],"float32"), None, Tensor([8, 16, 128, 128],"float32"), 0.0, 0.0, 1e-05, )
paddle.incubate.nn.functional.fused_multi_head_attention(Tensor([8, 128, 1024],"float32"), Tensor([3, 16, 64, 1024],"float32"), Tensor([1024, 1024],"float32"), False, Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), 1e-05, Tensor([3, 16, 64],"float32"), Tensor([1024],"float32"), None, Tensor([8, 16, 128, 128],"float32"), 0.0, 0.0, 1e-05, num_heads=16, transpose_qkv_wb=False, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([1, 1, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([1, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([100, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([101, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([104, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([123, 768],"float16"), Tensor([768],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([131, 768],"float16"), Tensor([768],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([136, 768],"float16"), Tensor([768],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([145, 768],"float16"), Tensor([768],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([154, 768],"float16"), Tensor([768],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([167, 768],"float16"), Tensor([768],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([172, 768],"float16"), Tensor([768],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([181, 768],"float16"), Tensor([768],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 1, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 1, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 256],"float16"), Tensor([256],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 256],"float32"), Tensor([256],"float32"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 768],"float16"), Tensor([768],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([203, 768],"float16"), Tensor([768],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([221, 768],"float16"), Tensor([768],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([31, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([58, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([60, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([64, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([67, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([71, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([74, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([77, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([78, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([81, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([87, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([88, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([89, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([92, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([97, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
