2025-03-11 18:25:04.338211 test begin: paddle.broadcast_to(Tensor([8, 1, 268, 1064227],"bool"), list[8,8,268,113,], )

W0311 18:26:03.152076 95262 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 18:26:03.153064 95262 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[torch error] paddle.broadcast_to(Tensor([8, 1, 268, 1064227],"bool"), list[8,8,268,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1064227) at non-singleton dimension 3.  Target sizes: [8, 8, 268, 113].  Tensor sizes: [8, 1, 268, 1064227]
2025-03-11 18:26:05.218630 test begin: paddle.broadcast_to(Tensor([8, 1, 268, 1064227],"bool"), list[8,8,268,268,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 268, 1064227],"bool"), list[8,8,268,268,], ) 
 The expanded size of the tensor (268) must match the existing size (1064227) at non-singleton dimension 3.  Target sizes: [8, 8, 268, 268].  Tensor sizes: [8, 1, 268, 1064227]
2025-03-11 18:26:05.744107 test begin: paddle.broadcast_to(Tensor([8, 1, 269, 1060271],"bool"), list[8,8,269,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 269, 1060271],"bool"), list[8,8,269,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1060271) at non-singleton dimension 3.  Target sizes: [8, 8, 269, 113].  Tensor sizes: [8, 1, 269, 1060271]
2025-03-11 18:26:06.119252 test begin: paddle.broadcast_to(Tensor([8, 1, 269, 1060271],"bool"), list[8,8,269,269,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 269, 1060271],"bool"), list[8,8,269,269,], ) 
 The expanded size of the tensor (269) must match the existing size (1060271) at non-singleton dimension 3.  Target sizes: [8, 8, 269, 269].  Tensor sizes: [8, 1, 269, 1060271]
2025-03-11 18:26:06.725308 test begin: paddle.broadcast_to(Tensor([8, 1, 2690686, 106],"bool"), list[8,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 2690686, 106],"bool"), list[8,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (2690686) at non-singleton dimension 2.  Target sizes: [8, 8, 106, 106].  Tensor sizes: [8, 1, 2690686, 106]
2025-03-11 18:26:07.229371 test begin: paddle.broadcast_to(Tensor([8, 1, 27, 10563433],"bool"), list[8,8,27,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 27, 10563433],"bool"), list[8,8,27,113,], ) 
 The expanded size of the tensor (113) must match the existing size (10563433) at non-singleton dimension 3.  Target sizes: [8, 8, 27, 113].  Tensor sizes: [8, 1, 27, 10563433]
2025-03-11 18:26:07.723572 test begin: paddle.broadcast_to(Tensor([8, 1, 27, 10563433],"bool"), list[8,8,27,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 27, 10563433],"bool"), list[8,8,27,121,], ) 
 The expanded size of the tensor (121) must match the existing size (10563433) at non-singleton dimension 3.  Target sizes: [8, 8, 27, 121].  Tensor sizes: [8, 1, 27, 10563433]
2025-03-11 18:26:08.258367 test begin: paddle.broadcast_to(Tensor([8, 1, 27, 10563433],"bool"), list[8,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 27, 10563433],"bool"), list[8,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (10563433) at non-singleton dimension 3.  Target sizes: [8, 8, 27, 27].  Tensor sizes: [8, 1, 27, 10563433]
2025-03-11 18:26:08.783456 test begin: paddle.broadcast_to(Tensor([8, 1, 27, 10563433],"bool"), list[8,8,27,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 27, 10563433],"bool"), list[8,8,27,33,], ) 
 The expanded size of the tensor (33) must match the existing size (10563433) at non-singleton dimension 3.  Target sizes: [8, 8, 27, 33].  Tensor sizes: [8, 1, 27, 10563433]
2025-03-11 18:26:09.356402 test begin: paddle.broadcast_to(Tensor([8, 1, 270, 1056344],"bool"), list[8,8,270,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 270, 1056344],"bool"), list[8,8,270,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1056344) at non-singleton dimension 3.  Target sizes: [8, 8, 270, 113].  Tensor sizes: [8, 1, 270, 1056344]
2025-03-11 18:26:09.859479 test begin: paddle.broadcast_to(Tensor([8, 1, 270, 1056344],"bool"), list[8,8,270,270,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 270, 1056344],"bool"), list[8,8,270,270,], ) 
 The expanded size of the tensor (270) must match the existing size (1056344) at non-singleton dimension 3.  Target sizes: [8, 8, 270, 270].  Tensor sizes: [8, 1, 270, 1056344]
2025-03-11 18:26:10.474853 test begin: paddle.broadcast_to(Tensor([8, 1, 271, 1052446],"bool"), list[8,8,271,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 271, 1052446],"bool"), list[8,8,271,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1052446) at non-singleton dimension 3.  Target sizes: [8, 8, 271, 113].  Tensor sizes: [8, 1, 271, 1052446]
2025-03-11 18:26:10.934588 test begin: paddle.broadcast_to(Tensor([8, 1, 271, 1052446],"bool"), list[8,8,271,271,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 271, 1052446],"bool"), list[8,8,271,271,], ) 
 The expanded size of the tensor (271) must match the existing size (1052446) at non-singleton dimension 3.  Target sizes: [8, 8, 271, 271].  Tensor sizes: [8, 1, 271, 1052446]
2025-03-11 18:26:11.480818 test begin: paddle.broadcast_to(Tensor([8, 1, 2716312, 105],"bool"), list[8,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 2716312, 105],"bool"), list[8,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (2716312) at non-singleton dimension 2.  Target sizes: [8, 8, 105, 105].  Tensor sizes: [8, 1, 2716312, 105]
2025-03-11 18:26:12.143312 test begin: paddle.broadcast_to(Tensor([8, 1, 272, 1048577],"bool"), list[8,8,272,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 272, 1048577],"bool"), list[8,8,272,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1048577) at non-singleton dimension 3.  Target sizes: [8, 8, 272, 113].  Tensor sizes: [8, 1, 272, 1048577]
2025-03-11 18:26:12.587391 test begin: paddle.broadcast_to(Tensor([8, 1, 272, 1048577],"bool"), list[8,8,272,272,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 272, 1048577],"bool"), list[8,8,272,272,], ) 
 The expanded size of the tensor (272) must match the existing size (1048577) at non-singleton dimension 3.  Target sizes: [8, 8, 272, 272].  Tensor sizes: [8, 1, 272, 1048577]
2025-03-11 18:26:13.100155 test begin: paddle.broadcast_to(Tensor([8, 1, 273, 1044736],"bool"), list[8,8,273,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 273, 1044736],"bool"), list[8,8,273,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1044736) at non-singleton dimension 3.  Target sizes: [8, 8, 273, 113].  Tensor sizes: [8, 1, 273, 1044736]
2025-03-11 18:26:13.625520 test begin: paddle.broadcast_to(Tensor([8, 1, 273, 1044736],"bool"), list[8,8,273,273,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 273, 1044736],"bool"), list[8,8,273,273,], ) 
 The expanded size of the tensor (273) must match the existing size (1044736) at non-singleton dimension 3.  Target sizes: [8, 8, 273, 273].  Tensor sizes: [8, 1, 273, 1044736]
2025-03-11 18:26:14.157638 test begin: paddle.broadcast_to(Tensor([8, 1, 274, 1040923],"bool"), list[8,8,274,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 274, 1040923],"bool"), list[8,8,274,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1040923) at non-singleton dimension 3.  Target sizes: [8, 8, 274, 113].  Tensor sizes: [8, 1, 274, 1040923]
2025-03-11 18:26:14.663773 test begin: paddle.broadcast_to(Tensor([8, 1, 274, 1040923],"bool"), list[8,8,274,274,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 274, 1040923],"bool"), list[8,8,274,274,], ) 
 The expanded size of the tensor (274) must match the existing size (1040923) at non-singleton dimension 3.  Target sizes: [8, 8, 274, 274].  Tensor sizes: [8, 1, 274, 1040923]
2025-03-11 18:26:15.157525 test begin: paddle.broadcast_to(Tensor([8, 1, 2742430, 104],"bool"), list[8,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 2742430, 104],"bool"), list[8,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (2742430) at non-singleton dimension 2.  Target sizes: [8, 8, 104, 104].  Tensor sizes: [8, 1, 2742430, 104]
2025-03-11 18:26:15.691660 test begin: paddle.broadcast_to(Tensor([8, 1, 275, 1037137],"bool"), list[8,8,275,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 275, 1037137],"bool"), list[8,8,275,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1037137) at non-singleton dimension 3.  Target sizes: [8, 8, 275, 113].  Tensor sizes: [8, 1, 275, 1037137]
2025-03-11 18:26:16.186455 test begin: paddle.broadcast_to(Tensor([8, 1, 275, 1037137],"bool"), list[8,8,275,275,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 275, 1037137],"bool"), list[8,8,275,275,], ) 
 The expanded size of the tensor (275) must match the existing size (1037137) at non-singleton dimension 3.  Target sizes: [8, 8, 275, 275].  Tensor sizes: [8, 1, 275, 1037137]
2025-03-11 18:26:16.813006 test begin: paddle.broadcast_to(Tensor([8, 1, 276, 1033380],"bool"), list[8,8,276,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 276, 1033380],"bool"), list[8,8,276,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1033380) at non-singleton dimension 3.  Target sizes: [8, 8, 276, 113].  Tensor sizes: [8, 1, 276, 1033380]
2025-03-11 18:26:17.184553 test begin: paddle.broadcast_to(Tensor([8, 1, 276, 1033380],"bool"), list[8,8,276,276,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 276, 1033380],"bool"), list[8,8,276,276,], ) 
 The expanded size of the tensor (276) must match the existing size (1033380) at non-singleton dimension 3.  Target sizes: [8, 8, 276, 276].  Tensor sizes: [8, 1, 276, 1033380]
2025-03-11 18:26:17.688124 test begin: paddle.broadcast_to(Tensor([8, 1, 2769056, 103],"bool"), list[8,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 2769056, 103],"bool"), list[8,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (2769056) at non-singleton dimension 2.  Target sizes: [8, 8, 103, 103].  Tensor sizes: [8, 1, 2769056, 103]
2025-03-11 18:26:18.280047 test begin: paddle.broadcast_to(Tensor([8, 1, 277, 1029649],"bool"), list[8,8,277,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 277, 1029649],"bool"), list[8,8,277,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1029649) at non-singleton dimension 3.  Target sizes: [8, 8, 277, 113].  Tensor sizes: [8, 1, 277, 1029649]
2025-03-11 18:26:18.818942 test begin: paddle.broadcast_to(Tensor([8, 1, 277, 1029649],"bool"), list[8,8,277,277,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 277, 1029649],"bool"), list[8,8,277,277,], ) 
 The expanded size of the tensor (277) must match the existing size (1029649) at non-singleton dimension 3.  Target sizes: [8, 8, 277, 277].  Tensor sizes: [8, 1, 277, 1029649]
2025-03-11 18:26:19.388553 test begin: paddle.broadcast_to(Tensor([8, 1, 278, 1025945],"bool"), list[8,8,278,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 278, 1025945],"bool"), list[8,8,278,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1025945) at non-singleton dimension 3.  Target sizes: [8, 8, 278, 113].  Tensor sizes: [8, 1, 278, 1025945]
2025-03-11 18:26:19.974500 test begin: paddle.broadcast_to(Tensor([8, 1, 278, 1025945],"bool"), list[8,8,278,278,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 278, 1025945],"bool"), list[8,8,278,278,], ) 
 The expanded size of the tensor (278) must match the existing size (1025945) at non-singleton dimension 3.  Target sizes: [8, 8, 278, 278].  Tensor sizes: [8, 1, 278, 1025945]
2025-03-11 18:26:20.589866 test begin: paddle.broadcast_to(Tensor([8, 1, 279, 1022268],"bool"), list[8,8,279,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 279, 1022268],"bool"), list[8,8,279,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1022268) at non-singleton dimension 3.  Target sizes: [8, 8, 279, 113].  Tensor sizes: [8, 1, 279, 1022268]
2025-03-11 18:26:20.974894 test begin: paddle.broadcast_to(Tensor([8, 1, 279, 1022268],"bool"), list[8,8,279,279,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 279, 1022268],"bool"), list[8,8,279,279,], ) 
 The expanded size of the tensor (279) must match the existing size (1022268) at non-singleton dimension 3.  Target sizes: [8, 8, 279, 279].  Tensor sizes: [8, 1, 279, 1022268]
2025-03-11 18:26:21.573909 test begin: paddle.broadcast_to(Tensor([8, 1, 2796203, 102],"bool"), list[8,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 2796203, 102],"bool"), list[8,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (2796203) at non-singleton dimension 2.  Target sizes: [8, 8, 102, 102].  Tensor sizes: [8, 1, 2796203, 102]
2025-03-11 18:26:22.089353 test begin: paddle.broadcast_to(Tensor([8, 1, 28, 10186167],"bool"), list[8,8,28,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 28, 10186167],"bool"), list[8,8,28,113,], ) 
 The expanded size of the tensor (113) must match the existing size (10186167) at non-singleton dimension 3.  Target sizes: [8, 8, 28, 113].  Tensor sizes: [8, 1, 28, 10186167]
2025-03-11 18:26:22.463319 test begin: paddle.broadcast_to(Tensor([8, 1, 28, 10186167],"bool"), list[8,8,28,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 28, 10186167],"bool"), list[8,8,28,121,], ) 
 The expanded size of the tensor (121) must match the existing size (10186167) at non-singleton dimension 3.  Target sizes: [8, 8, 28, 121].  Tensor sizes: [8, 1, 28, 10186167]
2025-03-11 18:26:22.968652 test begin: paddle.broadcast_to(Tensor([8, 1, 28, 10186167],"bool"), list[8,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 28, 10186167],"bool"), list[8,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (10186167) at non-singleton dimension 3.  Target sizes: [8, 8, 28, 28].  Tensor sizes: [8, 1, 28, 10186167]
2025-03-11 18:26:23.577506 test begin: paddle.broadcast_to(Tensor([8, 1, 28, 10186167],"bool"), list[8,8,28,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 28, 10186167],"bool"), list[8,8,28,33,], ) 
 The expanded size of the tensor (33) must match the existing size (10186167) at non-singleton dimension 3.  Target sizes: [8, 8, 28, 33].  Tensor sizes: [8, 1, 28, 10186167]
2025-03-11 18:26:24.093145 test begin: paddle.broadcast_to(Tensor([8, 1, 280, 1018617],"bool"), list[8,8,280,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 280, 1018617],"bool"), list[8,8,280,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1018617) at non-singleton dimension 3.  Target sizes: [8, 8, 280, 113].  Tensor sizes: [8, 1, 280, 1018617]
2025-03-11 18:26:24.456521 test begin: paddle.broadcast_to(Tensor([8, 1, 280, 1018617],"bool"), list[8,8,280,280,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 280, 1018617],"bool"), list[8,8,280,280,], ) 
 The expanded size of the tensor (280) must match the existing size (1018617) at non-singleton dimension 3.  Target sizes: [8, 8, 280, 280].  Tensor sizes: [8, 1, 280, 1018617]
2025-03-11 18:26:25.070469 test begin: paddle.broadcast_to(Tensor([8, 1, 281, 1014992],"bool"), list[8,8,281,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 281, 1014992],"bool"), list[8,8,281,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1014992) at non-singleton dimension 3.  Target sizes: [8, 8, 281, 113].  Tensor sizes: [8, 1, 281, 1014992]
2025-03-11 18:26:25.536727 test begin: paddle.broadcast_to(Tensor([8, 1, 281, 1014992],"bool"), list[8,8,281,281,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 281, 1014992],"bool"), list[8,8,281,281,], ) 
 The expanded size of the tensor (281) must match the existing size (1014992) at non-singleton dimension 3.  Target sizes: [8, 8, 281, 281].  Tensor sizes: [8, 1, 281, 1014992]
2025-03-11 18:26:26.073146 test begin: paddle.broadcast_to(Tensor([8, 1, 282, 1011393],"bool"), list[8,8,282,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 282, 1011393],"bool"), list[8,8,282,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1011393) at non-singleton dimension 3.  Target sizes: [8, 8, 282, 113].  Tensor sizes: [8, 1, 282, 1011393]
2025-03-11 18:26:26.580123 test begin: paddle.broadcast_to(Tensor([8, 1, 282, 1011393],"bool"), list[8,8,282,282,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 282, 1011393],"bool"), list[8,8,282,282,], ) 
 The expanded size of the tensor (282) must match the existing size (1011393) at non-singleton dimension 3.  Target sizes: [8, 8, 282, 282].  Tensor sizes: [8, 1, 282, 1011393]
2025-03-11 18:26:27.115098 test begin: paddle.broadcast_to(Tensor([8, 1, 2823888, 101],"bool"), list[8,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 2823888, 101],"bool"), list[8,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (2823888) at non-singleton dimension 2.  Target sizes: [8, 8, 101, 101].  Tensor sizes: [8, 1, 2823888, 101]
2025-03-11 18:26:27.627015 test begin: paddle.broadcast_to(Tensor([8, 1, 283, 1007819],"bool"), list[8,8,283,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 283, 1007819],"bool"), list[8,8,283,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1007819) at non-singleton dimension 3.  Target sizes: [8, 8, 283, 113].  Tensor sizes: [8, 1, 283, 1007819]
2025-03-11 18:26:28.230047 test begin: paddle.broadcast_to(Tensor([8, 1, 283, 1007819],"bool"), list[8,8,283,283,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 283, 1007819],"bool"), list[8,8,283,283,], ) 
 The expanded size of the tensor (283) must match the existing size (1007819) at non-singleton dimension 3.  Target sizes: [8, 8, 283, 283].  Tensor sizes: [8, 1, 283, 1007819]
2025-03-11 18:26:28.808886 test begin: paddle.broadcast_to(Tensor([8, 1, 284, 1004270],"bool"), list[8,8,284,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 284, 1004270],"bool"), list[8,8,284,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1004270) at non-singleton dimension 3.  Target sizes: [8, 8, 284, 113].  Tensor sizes: [8, 1, 284, 1004270]
2025-03-11 18:26:29.379485 test begin: paddle.broadcast_to(Tensor([8, 1, 284, 1004270],"bool"), list[8,8,284,284,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 284, 1004270],"bool"), list[8,8,284,284,], ) 
 The expanded size of the tensor (284) must match the existing size (1004270) at non-singleton dimension 3.  Target sizes: [8, 8, 284, 284].  Tensor sizes: [8, 1, 284, 1004270]
2025-03-11 18:26:29.896047 test begin: paddle.broadcast_to(Tensor([8, 1, 285, 1000747],"bool"), list[8,8,285,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 285, 1000747],"bool"), list[8,8,285,113,], ) 
 The expanded size of the tensor (113) must match the existing size (1000747) at non-singleton dimension 3.  Target sizes: [8, 8, 285, 113].  Tensor sizes: [8, 1, 285, 1000747]
2025-03-11 18:26:30.409532 test begin: paddle.broadcast_to(Tensor([8, 1, 285, 1000747],"bool"), list[8,8,285,285,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 285, 1000747],"bool"), list[8,8,285,285,], ) 
 The expanded size of the tensor (285) must match the existing size (1000747) at non-singleton dimension 3.  Target sizes: [8, 8, 285, 285].  Tensor sizes: [8, 1, 285, 1000747]
2025-03-11 18:26:30.919949 test begin: paddle.broadcast_to(Tensor([8, 1, 285212673, 1],"bool"), list[8,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 285212673, 1],"bool"), list[8,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (285212673) at non-singleton dimension 2.  Target sizes: [8, 8, 1, 1].  Tensor sizes: [8, 1, 285212673, 1]
2025-03-11 18:26:31.439250 test begin: paddle.broadcast_to(Tensor([8, 1, 28521268, 10],"bool"), list[8,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 28521268, 10],"bool"), list[8,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (28521268) at non-singleton dimension 2.  Target sizes: [8, 8, 10, 10].  Tensor sizes: [8, 1, 28521268, 10]
2025-03-11 18:26:31.949680 test begin: paddle.broadcast_to(Tensor([8, 1, 2852127, 100],"bool"), list[8,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 2852127, 100],"bool"), list[8,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (2852127) at non-singleton dimension 2.  Target sizes: [8, 8, 100, 100].  Tensor sizes: [8, 1, 2852127, 100]
2025-03-11 18:26:32.470418 test begin: paddle.broadcast_to(Tensor([8, 1, 286, 997248],"bool"), list[8,8,286,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 286, 997248],"bool"), list[8,8,286,113,], ) 
 The expanded size of the tensor (113) must match the existing size (997248) at non-singleton dimension 3.  Target sizes: [8, 8, 286, 113].  Tensor sizes: [8, 1, 286, 997248]
2025-03-11 18:26:33.051216 test begin: paddle.broadcast_to(Tensor([8, 1, 286, 997248],"bool"), list[8,8,286,286,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 286, 997248],"bool"), list[8,8,286,286,], ) 
 The expanded size of the tensor (286) must match the existing size (997248) at non-singleton dimension 3.  Target sizes: [8, 8, 286, 286].  Tensor sizes: [8, 1, 286, 997248]
2025-03-11 18:26:33.663435 test begin: paddle.broadcast_to(Tensor([8, 1, 287, 993773],"bool"), list[8,8,287,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 287, 993773],"bool"), list[8,8,287,113,], ) 
 The expanded size of the tensor (113) must match the existing size (993773) at non-singleton dimension 3.  Target sizes: [8, 8, 287, 113].  Tensor sizes: [8, 1, 287, 993773]
2025-03-11 18:26:34.187567 test begin: paddle.broadcast_to(Tensor([8, 1, 287, 993773],"bool"), list[8,8,287,287,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 287, 993773],"bool"), list[8,8,287,287,], ) 
 The expanded size of the tensor (287) must match the existing size (993773) at non-singleton dimension 3.  Target sizes: [8, 8, 287, 287].  Tensor sizes: [8, 1, 287, 993773]
2025-03-11 18:26:34.713190 test begin: paddle.broadcast_to(Tensor([8, 1, 288, 990322],"bool"), list[8,8,288,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 288, 990322],"bool"), list[8,8,288,113,], ) 
 The expanded size of the tensor (113) must match the existing size (990322) at non-singleton dimension 3.  Target sizes: [8, 8, 288, 113].  Tensor sizes: [8, 1, 288, 990322]
2025-03-11 18:26:35.311164 test begin: paddle.broadcast_to(Tensor([8, 1, 288, 990322],"bool"), list[8,8,288,288,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 288, 990322],"bool"), list[8,8,288,288,], ) 
 The expanded size of the tensor (288) must match the existing size (990322) at non-singleton dimension 3.  Target sizes: [8, 8, 288, 288].  Tensor sizes: [8, 1, 288, 990322]
2025-03-11 18:26:35.676656 test begin: paddle.broadcast_to(Tensor([8, 1, 2880937, 99],"bool"), list[8,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 2880937, 99],"bool"), list[8,8,99,99,], ) 
 The expanded size of the tensor (99) must match the existing size (2880937) at non-singleton dimension 2.  Target sizes: [8, 8, 99, 99].  Tensor sizes: [8, 1, 2880937, 99]
2025-03-11 18:26:36.198570 test begin: paddle.broadcast_to(Tensor([8, 1, 289, 986896],"bool"), list[8,8,289,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 289, 986896],"bool"), list[8,8,289,113,], ) 
 The expanded size of the tensor (113) must match the existing size (986896) at non-singleton dimension 3.  Target sizes: [8, 8, 289, 113].  Tensor sizes: [8, 1, 289, 986896]
2025-03-11 18:26:36.809834 test begin: paddle.broadcast_to(Tensor([8, 1, 289, 986896],"bool"), list[8,8,289,289,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 289, 986896],"bool"), list[8,8,289,289,], ) 
 The expanded size of the tensor (289) must match the existing size (986896) at non-singleton dimension 3.  Target sizes: [8, 8, 289, 289].  Tensor sizes: [8, 1, 289, 986896]
2025-03-11 18:26:37.190103 test begin: paddle.broadcast_to(Tensor([8, 1, 29, 9834920],"bool"), list[8,8,29,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 29, 9834920],"bool"), list[8,8,29,113,], ) 
 The expanded size of the tensor (113) must match the existing size (9834920) at non-singleton dimension 3.  Target sizes: [8, 8, 29, 113].  Tensor sizes: [8, 1, 29, 9834920]
2025-03-11 18:26:37.739636 test begin: paddle.broadcast_to(Tensor([8, 1, 29, 9834920],"bool"), list[8,8,29,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 29, 9834920],"bool"), list[8,8,29,121,], ) 
 The expanded size of the tensor (121) must match the existing size (9834920) at non-singleton dimension 3.  Target sizes: [8, 8, 29, 121].  Tensor sizes: [8, 1, 29, 9834920]
2025-03-11 18:26:38.242880 test begin: paddle.broadcast_to(Tensor([8, 1, 29, 9834920],"bool"), list[8,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 29, 9834920],"bool"), list[8,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (9834920) at non-singleton dimension 3.  Target sizes: [8, 8, 29, 29].  Tensor sizes: [8, 1, 29, 9834920]
2025-03-11 18:26:38.838982 test begin: paddle.broadcast_to(Tensor([8, 1, 29, 9834920],"bool"), list[8,8,29,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 29, 9834920],"bool"), list[8,8,29,33,], ) 
 The expanded size of the tensor (33) must match the existing size (9834920) at non-singleton dimension 3.  Target sizes: [8, 8, 29, 33].  Tensor sizes: [8, 1, 29, 9834920]
2025-03-11 18:26:39.445645 test begin: paddle.broadcast_to(Tensor([8, 1, 290, 983492],"bool"), list[8,8,290,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 290, 983492],"bool"), list[8,8,290,113,], ) 
 The expanded size of the tensor (113) must match the existing size (983492) at non-singleton dimension 3.  Target sizes: [8, 8, 290, 113].  Tensor sizes: [8, 1, 290, 983492]
2025-03-11 18:26:39.874687 test begin: paddle.broadcast_to(Tensor([8, 1, 290, 983492],"bool"), list[8,8,290,290,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 290, 983492],"bool"), list[8,8,290,290,], ) 
 The expanded size of the tensor (290) must match the existing size (983492) at non-singleton dimension 3.  Target sizes: [8, 8, 290, 290].  Tensor sizes: [8, 1, 290, 983492]
2025-03-11 18:26:40.483246 test begin: paddle.broadcast_to(Tensor([8, 1, 291, 980113],"bool"), list[8,8,291,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 291, 980113],"bool"), list[8,8,291,113,], ) 
 The expanded size of the tensor (113) must match the existing size (980113) at non-singleton dimension 3.  Target sizes: [8, 8, 291, 113].  Tensor sizes: [8, 1, 291, 980113]
2025-03-11 18:26:40.863087 test begin: paddle.broadcast_to(Tensor([8, 1, 291, 980113],"bool"), list[8,8,291,291,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 291, 980113],"bool"), list[8,8,291,291,], ) 
 The expanded size of the tensor (291) must match the existing size (980113) at non-singleton dimension 3.  Target sizes: [8, 8, 291, 291].  Tensor sizes: [8, 1, 291, 980113]
2025-03-11 18:26:41.359739 test begin: paddle.broadcast_to(Tensor([8, 1, 2910334, 98],"bool"), list[8,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 2910334, 98],"bool"), list[8,8,98,98,], ) 
 The expanded size of the tensor (98) must match the existing size (2910334) at non-singleton dimension 2.  Target sizes: [8, 8, 98, 98].  Tensor sizes: [8, 1, 2910334, 98]
2025-03-11 18:26:41.858359 test begin: paddle.broadcast_to(Tensor([8, 1, 292, 976756],"bool"), list[8,8,292,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 292, 976756],"bool"), list[8,8,292,113,], ) 
 The expanded size of the tensor (113) must match the existing size (976756) at non-singleton dimension 3.  Target sizes: [8, 8, 292, 113].  Tensor sizes: [8, 1, 292, 976756]
2025-03-11 18:26:42.358067 test begin: paddle.broadcast_to(Tensor([8, 1, 292, 976756],"bool"), list[8,8,292,292,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 292, 976756],"bool"), list[8,8,292,292,], ) 
 The expanded size of the tensor (292) must match the existing size (976756) at non-singleton dimension 3.  Target sizes: [8, 8, 292, 292].  Tensor sizes: [8, 1, 292, 976756]
2025-03-11 18:26:42.953675 test begin: paddle.broadcast_to(Tensor([8, 1, 293, 973423],"bool"), list[8,8,293,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 293, 973423],"bool"), list[8,8,293,113,], ) 
 The expanded size of the tensor (113) must match the existing size (973423) at non-singleton dimension 3.  Target sizes: [8, 8, 293, 113].  Tensor sizes: [8, 1, 293, 973423]
2025-03-11 18:26:43.317777 test begin: paddle.broadcast_to(Tensor([8, 1, 293, 973423],"bool"), list[8,8,293,293,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 293, 973423],"bool"), list[8,8,293,293,], ) 
 The expanded size of the tensor (293) must match the existing size (973423) at non-singleton dimension 3.  Target sizes: [8, 8, 293, 293].  Tensor sizes: [8, 1, 293, 973423]
2025-03-11 18:26:43.921538 test begin: paddle.broadcast_to(Tensor([8, 1, 2940337, 97],"bool"), list[8,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 2940337, 97],"bool"), list[8,8,97,97,], ) 
 The expanded size of the tensor (97) must match the existing size (2940337) at non-singleton dimension 2.  Target sizes: [8, 8, 97, 97].  Tensor sizes: [8, 1, 2940337, 97]
2025-03-11 18:26:44.301592 test begin: paddle.broadcast_to(Tensor([8, 1, 2970966, 96],"bool"), list[8,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 2970966, 96],"bool"), list[8,8,96,96,], ) 
 The expanded size of the tensor (96) must match the existing size (2970966) at non-singleton dimension 2.  Target sizes: [8, 8, 96, 96].  Tensor sizes: [8, 1, 2970966, 96]
2025-03-11 18:26:44.905644 test begin: paddle.broadcast_to(Tensor([8, 1, 3, 95070891],"bool"), list[8,8,3,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3, 95070891],"bool"), list[8,8,3,113,], ) 
 The expanded size of the tensor (113) must match the existing size (95070891) at non-singleton dimension 3.  Target sizes: [8, 8, 3, 113].  Tensor sizes: [8, 1, 3, 95070891]
2025-03-11 18:26:45.431083 test begin: paddle.broadcast_to(Tensor([8, 1, 3, 95070891],"bool"), list[8,8,3,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3, 95070891],"bool"), list[8,8,3,121,], ) 
 The expanded size of the tensor (121) must match the existing size (95070891) at non-singleton dimension 3.  Target sizes: [8, 8, 3, 121].  Tensor sizes: [8, 1, 3, 95070891]
2025-03-11 18:26:45.801063 test begin: paddle.broadcast_to(Tensor([8, 1, 3, 95070891],"bool"), list[8,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3, 95070891],"bool"), list[8,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (95070891) at non-singleton dimension 3.  Target sizes: [8, 8, 3, 3].  Tensor sizes: [8, 1, 3, 95070891]
2025-03-11 18:26:46.322297 test begin: paddle.broadcast_to(Tensor([8, 1, 3, 95070891],"bool"), list[8,8,3,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3, 95070891],"bool"), list[8,8,3,33,], ) 
 The expanded size of the tensor (33) must match the existing size (95070891) at non-singleton dimension 3.  Target sizes: [8, 8, 3, 33].  Tensor sizes: [8, 1, 3, 95070891]
2025-03-11 18:26:46.866427 test begin: paddle.broadcast_to(Tensor([8, 1, 30, 9507090],"bool"), list[8,8,30,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 30, 9507090],"bool"), list[8,8,30,113,], ) 
 The expanded size of the tensor (113) must match the existing size (9507090) at non-singleton dimension 3.  Target sizes: [8, 8, 30, 113].  Tensor sizes: [8, 1, 30, 9507090]
2025-03-11 18:26:47.413543 test begin: paddle.broadcast_to(Tensor([8, 1, 30, 9507090],"bool"), list[8,8,30,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 30, 9507090],"bool"), list[8,8,30,121,], ) 
 The expanded size of the tensor (121) must match the existing size (9507090) at non-singleton dimension 3.  Target sizes: [8, 8, 30, 121].  Tensor sizes: [8, 1, 30, 9507090]
2025-03-11 18:26:47.918175 test begin: paddle.broadcast_to(Tensor([8, 1, 30, 9507090],"bool"), list[8,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 30, 9507090],"bool"), list[8,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (9507090) at non-singleton dimension 3.  Target sizes: [8, 8, 30, 30].  Tensor sizes: [8, 1, 30, 9507090]
2025-03-11 18:26:48.465674 test begin: paddle.broadcast_to(Tensor([8, 1, 30, 9507090],"bool"), list[8,8,30,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 30, 9507090],"bool"), list[8,8,30,33,], ) 
 The expanded size of the tensor (33) must match the existing size (9507090) at non-singleton dimension 3.  Target sizes: [8, 8, 30, 33].  Tensor sizes: [8, 1, 30, 9507090]
2025-03-11 18:26:48.968040 test begin: paddle.broadcast_to(Tensor([8, 1, 3002239, 95],"bool"), list[8,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3002239, 95],"bool"), list[8,8,95,95,], ) 
 The expanded size of the tensor (95) must match the existing size (3002239) at non-singleton dimension 2.  Target sizes: [8, 8, 95, 95].  Tensor sizes: [8, 1, 3002239, 95]
2025-03-11 18:26:49.513613 test begin: paddle.broadcast_to(Tensor([8, 1, 3034178, 94],"bool"), list[8,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3034178, 94],"bool"), list[8,8,94,94,], ) 
 The expanded size of the tensor (94) must match the existing size (3034178) at non-singleton dimension 2.  Target sizes: [8, 8, 94, 94].  Tensor sizes: [8, 1, 3034178, 94]
2025-03-11 18:26:50.033047 test begin: paddle.broadcast_to(Tensor([8, 1, 3066803, 93],"bool"), list[8,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3066803, 93],"bool"), list[8,8,93,93,], ) 
 The expanded size of the tensor (93) must match the existing size (3066803) at non-singleton dimension 2.  Target sizes: [8, 8, 93, 93].  Tensor sizes: [8, 1, 3066803, 93]
2025-03-11 18:26:50.645777 test begin: paddle.broadcast_to(Tensor([8, 1, 31, 9200409],"bool"), list[8,8,31,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 31, 9200409],"bool"), list[8,8,31,113,], ) 
 The expanded size of the tensor (113) must match the existing size (9200409) at non-singleton dimension 3.  Target sizes: [8, 8, 31, 113].  Tensor sizes: [8, 1, 31, 9200409]
2025-03-11 18:26:51.160684 test begin: paddle.broadcast_to(Tensor([8, 1, 31, 9200409],"bool"), list[8,8,31,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 31, 9200409],"bool"), list[8,8,31,121,], ) 
 The expanded size of the tensor (121) must match the existing size (9200409) at non-singleton dimension 3.  Target sizes: [8, 8, 31, 121].  Tensor sizes: [8, 1, 31, 9200409]
2025-03-11 18:26:51.753489 test begin: paddle.broadcast_to(Tensor([8, 1, 31, 9200409],"bool"), list[8,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 31, 9200409],"bool"), list[8,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (9200409) at non-singleton dimension 3.  Target sizes: [8, 8, 31, 31].  Tensor sizes: [8, 1, 31, 9200409]
2025-03-11 18:26:52.197350 test begin: paddle.broadcast_to(Tensor([8, 1, 31, 9200409],"bool"), list[8,8,31,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 31, 9200409],"bool"), list[8,8,31,33,], ) 
 The expanded size of the tensor (33) must match the existing size (9200409) at non-singleton dimension 3.  Target sizes: [8, 8, 31, 33].  Tensor sizes: [8, 1, 31, 9200409]
2025-03-11 18:26:52.749422 test begin: paddle.broadcast_to(Tensor([8, 1, 3100138, 92],"bool"), list[8,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3100138, 92],"bool"), list[8,8,92,92,], ) 
 The expanded size of the tensor (92) must match the existing size (3100138) at non-singleton dimension 2.  Target sizes: [8, 8, 92, 92].  Tensor sizes: [8, 1, 3100138, 92]
2025-03-11 18:26:53.287980 test begin: paddle.broadcast_to(Tensor([8, 1, 3134206, 91],"bool"), list[8,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3134206, 91],"bool"), list[8,8,91,91,], ) 
 The expanded size of the tensor (91) must match the existing size (3134206) at non-singleton dimension 2.  Target sizes: [8, 8, 91, 91].  Tensor sizes: [8, 1, 3134206, 91]
2025-03-11 18:26:53.792969 test begin: paddle.broadcast_to(Tensor([8, 1, 31690297, 9],"bool"), list[8,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 31690297, 9],"bool"), list[8,8,9,9,], ) 
 The expanded size of the tensor (9) must match the existing size (31690297) at non-singleton dimension 2.  Target sizes: [8, 8, 9, 9].  Tensor sizes: [8, 1, 31690297, 9]
2025-03-11 18:26:54.331034 test begin: paddle.broadcast_to(Tensor([8, 1, 3169030, 90],"bool"), list[8,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3169030, 90],"bool"), list[8,8,90,90,], ) 
 The expanded size of the tensor (90) must match the existing size (3169030) at non-singleton dimension 2.  Target sizes: [8, 8, 90, 90].  Tensor sizes: [8, 1, 3169030, 90]
2025-03-11 18:26:54.836836 test begin: paddle.broadcast_to(Tensor([8, 1, 32, 8912897],"bool"), list[8,8,32,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 32, 8912897],"bool"), list[8,8,32,113,], ) 
 The expanded size of the tensor (113) must match the existing size (8912897) at non-singleton dimension 3.  Target sizes: [8, 8, 32, 113].  Tensor sizes: [8, 1, 32, 8912897]
2025-03-11 18:26:55.341724 test begin: paddle.broadcast_to(Tensor([8, 1, 32, 8912897],"bool"), list[8,8,32,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 32, 8912897],"bool"), list[8,8,32,121,], ) 
 The expanded size of the tensor (121) must match the existing size (8912897) at non-singleton dimension 3.  Target sizes: [8, 8, 32, 121].  Tensor sizes: [8, 1, 32, 8912897]
2025-03-11 18:26:55.845049 test begin: paddle.broadcast_to(Tensor([8, 1, 32, 8912897],"bool"), list[8,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 32, 8912897],"bool"), list[8,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (8912897) at non-singleton dimension 3.  Target sizes: [8, 8, 32, 32].  Tensor sizes: [8, 1, 32, 8912897]
2025-03-11 18:26:56.430512 test begin: paddle.broadcast_to(Tensor([8, 1, 32, 8912897],"bool"), list[8,8,32,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 32, 8912897],"bool"), list[8,8,32,33,], ) 
 The expanded size of the tensor (33) must match the existing size (8912897) at non-singleton dimension 3.  Target sizes: [8, 8, 32, 33].  Tensor sizes: [8, 1, 32, 8912897]
2025-03-11 18:26:56.798875 test begin: paddle.broadcast_to(Tensor([8, 1, 3204637, 89],"bool"), list[8,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3204637, 89],"bool"), list[8,8,89,89,], ) 
 The expanded size of the tensor (89) must match the existing size (3204637) at non-singleton dimension 2.  Target sizes: [8, 8, 89, 89].  Tensor sizes: [8, 1, 3204637, 89]
2025-03-11 18:26:57.343237 test begin: paddle.broadcast_to(Tensor([8, 1, 3241054, 88],"bool"), list[8,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3241054, 88],"bool"), list[8,8,88,88,], ) 
 The expanded size of the tensor (88) must match the existing size (3241054) at non-singleton dimension 2.  Target sizes: [8, 8, 88, 88].  Tensor sizes: [8, 1, 3241054, 88]
2025-03-11 18:26:57.888282 test begin: paddle.broadcast_to(Tensor([8, 1, 3278307, 87],"bool"), list[8,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3278307, 87],"bool"), list[8,8,87,87,], ) 
 The expanded size of the tensor (87) must match the existing size (3278307) at non-singleton dimension 2.  Target sizes: [8, 8, 87, 87].  Tensor sizes: [8, 1, 3278307, 87]
2025-03-11 18:26:58.402894 test begin: paddle.broadcast_to(Tensor([8, 1, 33, 8642809],"bool"), list[8,8,33,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 33, 8642809],"bool"), list[8,8,33,113,], ) 
 The expanded size of the tensor (113) must match the existing size (8642809) at non-singleton dimension 3.  Target sizes: [8, 8, 33, 113].  Tensor sizes: [8, 1, 33, 8642809]
2025-03-11 18:26:58.950093 test begin: paddle.broadcast_to(Tensor([8, 1, 33, 8642809],"bool"), list[8,8,33,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 33, 8642809],"bool"), list[8,8,33,121,], ) 
 The expanded size of the tensor (121) must match the existing size (8642809) at non-singleton dimension 3.  Target sizes: [8, 8, 33, 121].  Tensor sizes: [8, 1, 33, 8642809]
2025-03-11 18:26:59.491313 test begin: paddle.broadcast_to(Tensor([8, 1, 33, 8642809],"bool"), list[8,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 33, 8642809],"bool"), list[8,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (8642809) at non-singleton dimension 3.  Target sizes: [8, 8, 33, 33].  Tensor sizes: [8, 1, 33, 8642809]
2025-03-11 18:27:00.001512 test begin: paddle.broadcast_to(Tensor([8, 1, 3316427, 86],"bool"), list[8,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3316427, 86],"bool"), list[8,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (3316427) at non-singleton dimension 2.  Target sizes: [8, 8, 86, 86].  Tensor sizes: [8, 1, 3316427, 86]
2025-03-11 18:27:00.608509 test begin: paddle.broadcast_to(Tensor([8, 1, 3355444, 85],"bool"), list[8,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3355444, 85],"bool"), list[8,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (3355444) at non-singleton dimension 2.  Target sizes: [8, 8, 85, 85].  Tensor sizes: [8, 1, 3355444, 85]
2025-03-11 18:27:01.125684 test begin: paddle.broadcast_to(Tensor([8, 1, 3395389, 84],"bool"), list[8,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3395389, 84],"bool"), list[8,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (3395389) at non-singleton dimension 2.  Target sizes: [8, 8, 84, 84].  Tensor sizes: [8, 1, 3395389, 84]
2025-03-11 18:27:01.631733 test begin: paddle.broadcast_to(Tensor([8, 1, 34, 8388609],"bool"), list[8,8,34,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 34, 8388609],"bool"), list[8,8,34,113,], ) 
 The expanded size of the tensor (113) must match the existing size (8388609) at non-singleton dimension 3.  Target sizes: [8, 8, 34, 113].  Tensor sizes: [8, 1, 34, 8388609]
2025-03-11 18:27:02.177998 test begin: paddle.broadcast_to(Tensor([8, 1, 34, 8388609],"bool"), list[8,8,34,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 34, 8388609],"bool"), list[8,8,34,121,], ) 
 The expanded size of the tensor (121) must match the existing size (8388609) at non-singleton dimension 3.  Target sizes: [8, 8, 34, 121].  Tensor sizes: [8, 1, 34, 8388609]
2025-03-11 18:27:02.684485 test begin: paddle.broadcast_to(Tensor([8, 1, 34, 8388609],"bool"), list[8,8,34,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 34, 8388609],"bool"), list[8,8,34,33,], ) 
 The expanded size of the tensor (33) must match the existing size (8388609) at non-singleton dimension 3.  Target sizes: [8, 8, 34, 33].  Tensor sizes: [8, 1, 34, 8388609]
2025-03-11 18:27:03.203707 test begin: paddle.broadcast_to(Tensor([8, 1, 34, 8388609],"bool"), list[8,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 34, 8388609],"bool"), list[8,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (8388609) at non-singleton dimension 3.  Target sizes: [8, 8, 34, 34].  Tensor sizes: [8, 1, 34, 8388609]
2025-03-11 18:27:03.816171 test begin: paddle.broadcast_to(Tensor([8, 1, 3436298, 83],"bool"), list[8,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3436298, 83],"bool"), list[8,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (3436298) at non-singleton dimension 2.  Target sizes: [8, 8, 83, 83].  Tensor sizes: [8, 1, 3436298, 83]
2025-03-11 18:27:04.176380 test begin: paddle.broadcast_to(Tensor([8, 1, 3478204, 82],"bool"), list[8,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3478204, 82],"bool"), list[8,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (3478204) at non-singleton dimension 2.  Target sizes: [8, 8, 82, 82].  Tensor sizes: [8, 1, 3478204, 82]
2025-03-11 18:27:04.767169 test begin: paddle.broadcast_to(Tensor([8, 1, 35, 8148934],"bool"), list[8,8,35,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 35, 8148934],"bool"), list[8,8,35,113,], ) 
 The expanded size of the tensor (113) must match the existing size (8148934) at non-singleton dimension 3.  Target sizes: [8, 8, 35, 113].  Tensor sizes: [8, 1, 35, 8148934]
2025-03-11 18:27:05.266132 test begin: paddle.broadcast_to(Tensor([8, 1, 35, 8148934],"bool"), list[8,8,35,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 35, 8148934],"bool"), list[8,8,35,121,], ) 
 The expanded size of the tensor (121) must match the existing size (8148934) at non-singleton dimension 3.  Target sizes: [8, 8, 35, 121].  Tensor sizes: [8, 1, 35, 8148934]
2025-03-11 18:27:05.778103 test begin: paddle.broadcast_to(Tensor([8, 1, 35, 8148934],"bool"), list[8,8,35,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 35, 8148934],"bool"), list[8,8,35,33,], ) 
 The expanded size of the tensor (33) must match the existing size (8148934) at non-singleton dimension 3.  Target sizes: [8, 8, 35, 33].  Tensor sizes: [8, 1, 35, 8148934]
2025-03-11 18:27:06.393899 test begin: paddle.broadcast_to(Tensor([8, 1, 35, 8148934],"bool"), list[8,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 35, 8148934],"bool"), list[8,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (8148934) at non-singleton dimension 3.  Target sizes: [8, 8, 35, 35].  Tensor sizes: [8, 1, 35, 8148934]
2025-03-11 18:27:06.939718 test begin: paddle.broadcast_to(Tensor([8, 1, 3521145, 81],"bool"), list[8,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3521145, 81],"bool"), list[8,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (3521145) at non-singleton dimension 2.  Target sizes: [8, 8, 81, 81].  Tensor sizes: [8, 1, 3521145, 81]
2025-03-11 18:27:07.551390 test begin: paddle.broadcast_to(Tensor([8, 1, 35651585, 8],"bool"), list[8,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 35651585, 8],"bool"), list[8,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (35651585) at non-singleton dimension 2.  Target sizes: [8, 8, 8, 8].  Tensor sizes: [8, 1, 35651585, 8]
2025-03-11 18:27:07.986265 test begin: paddle.broadcast_to(Tensor([8, 1, 3565159, 80],"bool"), list[8,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3565159, 80],"bool"), list[8,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (3565159) at non-singleton dimension 2.  Target sizes: [8, 8, 80, 80].  Tensor sizes: [8, 1, 3565159, 80]
2025-03-11 18:27:08.485874 test begin: paddle.broadcast_to(Tensor([8, 1, 36, 7922575],"bool"), list[8,8,36,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 36, 7922575],"bool"), list[8,8,36,113,], ) 
 The expanded size of the tensor (113) must match the existing size (7922575) at non-singleton dimension 3.  Target sizes: [8, 8, 36, 113].  Tensor sizes: [8, 1, 36, 7922575]
2025-03-11 18:27:09.024164 test begin: paddle.broadcast_to(Tensor([8, 1, 36, 7922575],"bool"), list[8,8,36,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 36, 7922575],"bool"), list[8,8,36,121,], ) 
 The expanded size of the tensor (121) must match the existing size (7922575) at non-singleton dimension 3.  Target sizes: [8, 8, 36, 121].  Tensor sizes: [8, 1, 36, 7922575]
2025-03-11 18:27:09.596313 test begin: paddle.broadcast_to(Tensor([8, 1, 36, 7922575],"bool"), list[8,8,36,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 36, 7922575],"bool"), list[8,8,36,33,], ) 
 The expanded size of the tensor (33) must match the existing size (7922575) at non-singleton dimension 3.  Target sizes: [8, 8, 36, 33].  Tensor sizes: [8, 1, 36, 7922575]
2025-03-11 18:27:10.097625 test begin: paddle.broadcast_to(Tensor([8, 1, 36, 7922575],"bool"), list[8,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 36, 7922575],"bool"), list[8,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (7922575) at non-singleton dimension 3.  Target sizes: [8, 8, 36, 36].  Tensor sizes: [8, 1, 36, 7922575]
2025-03-11 18:27:10.615518 test begin: paddle.broadcast_to(Tensor([8, 1, 3610287, 79],"bool"), list[8,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3610287, 79],"bool"), list[8,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (3610287) at non-singleton dimension 2.  Target sizes: [8, 8, 79, 79].  Tensor sizes: [8, 1, 3610287, 79]
2025-03-11 18:27:11.127166 test begin: paddle.broadcast_to(Tensor([8, 1, 3656573, 78],"bool"), list[8,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3656573, 78],"bool"), list[8,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (3656573) at non-singleton dimension 2.  Target sizes: [8, 8, 78, 78].  Tensor sizes: [8, 1, 3656573, 78]
2025-03-11 18:27:11.730054 test begin: paddle.broadcast_to(Tensor([8, 1, 37, 7708451],"bool"), list[8,8,37,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 37, 7708451],"bool"), list[8,8,37,113,], ) 
 The expanded size of the tensor (113) must match the existing size (7708451) at non-singleton dimension 3.  Target sizes: [8, 8, 37, 113].  Tensor sizes: [8, 1, 37, 7708451]
2025-03-11 18:27:12.174173 test begin: paddle.broadcast_to(Tensor([8, 1, 37, 7708451],"bool"), list[8,8,37,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 37, 7708451],"bool"), list[8,8,37,121,], ) 
 The expanded size of the tensor (121) must match the existing size (7708451) at non-singleton dimension 3.  Target sizes: [8, 8, 37, 121].  Tensor sizes: [8, 1, 37, 7708451]
2025-03-11 18:27:12.680076 test begin: paddle.broadcast_to(Tensor([8, 1, 37, 7708451],"bool"), list[8,8,37,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 37, 7708451],"bool"), list[8,8,37,33,], ) 
 The expanded size of the tensor (33) must match the existing size (7708451) at non-singleton dimension 3.  Target sizes: [8, 8, 37, 33].  Tensor sizes: [8, 1, 37, 7708451]
2025-03-11 18:27:13.177216 test begin: paddle.broadcast_to(Tensor([8, 1, 37, 7708451],"bool"), list[8,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 37, 7708451],"bool"), list[8,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (7708451) at non-singleton dimension 3.  Target sizes: [8, 8, 37, 37].  Tensor sizes: [8, 1, 37, 7708451]
2025-03-11 18:27:13.720113 test begin: paddle.broadcast_to(Tensor([8, 1, 3704061, 77],"bool"), list[8,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3704061, 77],"bool"), list[8,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (3704061) at non-singleton dimension 2.  Target sizes: [8, 8, 77, 77].  Tensor sizes: [8, 1, 3704061, 77]
2025-03-11 18:27:14.224003 test begin: paddle.broadcast_to(Tensor([8, 1, 3752799, 76],"bool"), list[8,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3752799, 76],"bool"), list[8,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (3752799) at non-singleton dimension 2.  Target sizes: [8, 8, 76, 76].  Tensor sizes: [8, 1, 3752799, 76]
2025-03-11 18:27:14.734701 test begin: paddle.broadcast_to(Tensor([8, 1, 38, 7505597],"bool"), list[8,8,38,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 38, 7505597],"bool"), list[8,8,38,113,], ) 
 The expanded size of the tensor (113) must match the existing size (7505597) at non-singleton dimension 3.  Target sizes: [8, 8, 38, 113].  Tensor sizes: [8, 1, 38, 7505597]
2025-03-11 18:27:15.239900 test begin: paddle.broadcast_to(Tensor([8, 1, 38, 7505597],"bool"), list[8,8,38,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 38, 7505597],"bool"), list[8,8,38,121,], ) 
 The expanded size of the tensor (121) must match the existing size (7505597) at non-singleton dimension 3.  Target sizes: [8, 8, 38, 121].  Tensor sizes: [8, 1, 38, 7505597]
2025-03-11 18:27:15.751095 test begin: paddle.broadcast_to(Tensor([8, 1, 38, 7505597],"bool"), list[8,8,38,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 38, 7505597],"bool"), list[8,8,38,33,], ) 
 The expanded size of the tensor (33) must match the existing size (7505597) at non-singleton dimension 3.  Target sizes: [8, 8, 38, 33].  Tensor sizes: [8, 1, 38, 7505597]
2025-03-11 18:27:16.256257 test begin: paddle.broadcast_to(Tensor([8, 1, 38, 7505597],"bool"), list[8,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 38, 7505597],"bool"), list[8,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (7505597) at non-singleton dimension 3.  Target sizes: [8, 8, 38, 38].  Tensor sizes: [8, 1, 38, 7505597]
2025-03-11 18:27:16.876450 test begin: paddle.broadcast_to(Tensor([8, 1, 3802836, 75],"bool"), list[8,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3802836, 75],"bool"), list[8,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (3802836) at non-singleton dimension 2.  Target sizes: [8, 8, 75, 75].  Tensor sizes: [8, 1, 3802836, 75]
2025-03-11 18:27:17.415168 test begin: paddle.broadcast_to(Tensor([8, 1, 3854226, 74],"bool"), list[8,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3854226, 74],"bool"), list[8,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (3854226) at non-singleton dimension 2.  Target sizes: [8, 8, 74, 74].  Tensor sizes: [8, 1, 3854226, 74]
2025-03-11 18:27:17.954296 test begin: paddle.broadcast_to(Tensor([8, 1, 39, 7313146],"bool"), list[8,8,39,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 39, 7313146],"bool"), list[8,8,39,113,], ) 
 The expanded size of the tensor (113) must match the existing size (7313146) at non-singleton dimension 3.  Target sizes: [8, 8, 39, 113].  Tensor sizes: [8, 1, 39, 7313146]
2025-03-11 18:27:18.561478 test begin: paddle.broadcast_to(Tensor([8, 1, 39, 7313146],"bool"), list[8,8,39,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 39, 7313146],"bool"), list[8,8,39,121,], ) 
 The expanded size of the tensor (121) must match the existing size (7313146) at non-singleton dimension 3.  Target sizes: [8, 8, 39, 121].  Tensor sizes: [8, 1, 39, 7313146]
2025-03-11 18:27:18.929960 test begin: paddle.broadcast_to(Tensor([8, 1, 39, 7313146],"bool"), list[8,8,39,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 39, 7313146],"bool"), list[8,8,39,33,], ) 
 The expanded size of the tensor (33) must match the existing size (7313146) at non-singleton dimension 3.  Target sizes: [8, 8, 39, 33].  Tensor sizes: [8, 1, 39, 7313146]
2025-03-11 18:27:19.523139 test begin: paddle.broadcast_to(Tensor([8, 1, 39, 7313146],"bool"), list[8,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 39, 7313146],"bool"), list[8,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (7313146) at non-singleton dimension 3.  Target sizes: [8, 8, 39, 39].  Tensor sizes: [8, 1, 39, 7313146]
2025-03-11 18:27:20.038911 test begin: paddle.broadcast_to(Tensor([8, 1, 3907023, 73],"bool"), list[8,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3907023, 73],"bool"), list[8,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (3907023) at non-singleton dimension 2.  Target sizes: [8, 8, 73, 73].  Tensor sizes: [8, 1, 3907023, 73]
2025-03-11 18:27:20.399360 test begin: paddle.broadcast_to(Tensor([8, 1, 3961288, 72],"bool"), list[8,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 3961288, 72],"bool"), list[8,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (3961288) at non-singleton dimension 2.  Target sizes: [8, 8, 72, 72].  Tensor sizes: [8, 1, 3961288, 72]
2025-03-11 18:27:20.994114 test begin: paddle.broadcast_to(Tensor([8, 1, 4, 71303169],"bool"), list[8,8,4,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4, 71303169],"bool"), list[8,8,4,113,], ) 
 The expanded size of the tensor (113) must match the existing size (71303169) at non-singleton dimension 3.  Target sizes: [8, 8, 4, 113].  Tensor sizes: [8, 1, 4, 71303169]
2025-03-11 18:27:21.535358 test begin: paddle.broadcast_to(Tensor([8, 1, 4, 71303169],"bool"), list[8,8,4,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4, 71303169],"bool"), list[8,8,4,121,], ) 
 The expanded size of the tensor (121) must match the existing size (71303169) at non-singleton dimension 3.  Target sizes: [8, 8, 4, 121].  Tensor sizes: [8, 1, 4, 71303169]
2025-03-11 18:27:22.132637 test begin: paddle.broadcast_to(Tensor([8, 1, 4, 71303169],"bool"), list[8,8,4,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4, 71303169],"bool"), list[8,8,4,33,], ) 
 The expanded size of the tensor (33) must match the existing size (71303169) at non-singleton dimension 3.  Target sizes: [8, 8, 4, 33].  Tensor sizes: [8, 1, 4, 71303169]
2025-03-11 18:27:22.652137 test begin: paddle.broadcast_to(Tensor([8, 1, 4, 71303169],"bool"), list[8,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4, 71303169],"bool"), list[8,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (71303169) at non-singleton dimension 3.  Target sizes: [8, 8, 4, 4].  Tensor sizes: [8, 1, 4, 71303169]
2025-03-11 18:27:23.088179 test begin: paddle.broadcast_to(Tensor([8, 1, 40, 7130317],"bool"), list[8,8,40,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 40, 7130317],"bool"), list[8,8,40,113,], ) 
 The expanded size of the tensor (113) must match the existing size (7130317) at non-singleton dimension 3.  Target sizes: [8, 8, 40, 113].  Tensor sizes: [8, 1, 40, 7130317]
2025-03-11 18:27:23.588375 test begin: paddle.broadcast_to(Tensor([8, 1, 40, 7130317],"bool"), list[8,8,40,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 40, 7130317],"bool"), list[8,8,40,121,], ) 
 The expanded size of the tensor (121) must match the existing size (7130317) at non-singleton dimension 3.  Target sizes: [8, 8, 40, 121].  Tensor sizes: [8, 1, 40, 7130317]
2025-03-11 18:27:24.191483 test begin: paddle.broadcast_to(Tensor([8, 1, 40, 7130317],"bool"), list[8,8,40,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 40, 7130317],"bool"), list[8,8,40,33,], ) 
 The expanded size of the tensor (33) must match the existing size (7130317) at non-singleton dimension 3.  Target sizes: [8, 8, 40, 33].  Tensor sizes: [8, 1, 40, 7130317]
2025-03-11 18:27:24.708672 test begin: paddle.broadcast_to(Tensor([8, 1, 40, 7130317],"bool"), list[8,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 40, 7130317],"bool"), list[8,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (7130317) at non-singleton dimension 3.  Target sizes: [8, 8, 40, 40].  Tensor sizes: [8, 1, 40, 7130317]
2025-03-11 18:27:25.062039 test begin: paddle.broadcast_to(Tensor([8, 1, 4017080, 71],"bool"), list[8,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4017080, 71],"bool"), list[8,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (4017080) at non-singleton dimension 2.  Target sizes: [8, 8, 71, 71].  Tensor sizes: [8, 1, 4017080, 71]
2025-03-11 18:27:25.586276 test begin: paddle.broadcast_to(Tensor([8, 1, 40744668, 7],"bool"), list[8,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 40744668, 7],"bool"), list[8,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (40744668) at non-singleton dimension 2.  Target sizes: [8, 8, 7, 7].  Tensor sizes: [8, 1, 40744668, 7]
2025-03-11 18:27:26.197764 test begin: paddle.broadcast_to(Tensor([8, 1, 4074467, 70],"bool"), list[8,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4074467, 70],"bool"), list[8,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (4074467) at non-singleton dimension 2.  Target sizes: [8, 8, 70, 70].  Tensor sizes: [8, 1, 4074467, 70]
2025-03-11 18:27:26.730729 test begin: paddle.broadcast_to(Tensor([8, 1, 41, 6956407],"bool"), list[8,8,41,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 41, 6956407],"bool"), list[8,8,41,113,], ) 
 The expanded size of the tensor (113) must match the existing size (6956407) at non-singleton dimension 3.  Target sizes: [8, 8, 41, 113].  Tensor sizes: [8, 1, 41, 6956407]
2025-03-11 18:27:27.242794 test begin: paddle.broadcast_to(Tensor([8, 1, 41, 6956407],"bool"), list[8,8,41,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 41, 6956407],"bool"), list[8,8,41,121,], ) 
 The expanded size of the tensor (121) must match the existing size (6956407) at non-singleton dimension 3.  Target sizes: [8, 8, 41, 121].  Tensor sizes: [8, 1, 41, 6956407]
2025-03-11 18:27:27.783476 test begin: paddle.broadcast_to(Tensor([8, 1, 41, 6956407],"bool"), list[8,8,41,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 41, 6956407],"bool"), list[8,8,41,33,], ) 
 The expanded size of the tensor (33) must match the existing size (6956407) at non-singleton dimension 3.  Target sizes: [8, 8, 41, 33].  Tensor sizes: [8, 1, 41, 6956407]
2025-03-11 18:27:28.139462 test begin: paddle.broadcast_to(Tensor([8, 1, 41, 6956407],"bool"), list[8,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 41, 6956407],"bool"), list[8,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (6956407) at non-singleton dimension 3.  Target sizes: [8, 8, 41, 41].  Tensor sizes: [8, 1, 41, 6956407]
2025-03-11 18:27:28.757684 test begin: paddle.broadcast_to(Tensor([8, 1, 4133517, 69],"bool"), list[8,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4133517, 69],"bool"), list[8,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (4133517) at non-singleton dimension 2.  Target sizes: [8, 8, 69, 69].  Tensor sizes: [8, 1, 4133517, 69]
2025-03-11 18:27:29.199832 test begin: paddle.broadcast_to(Tensor([8, 1, 4194305, 68],"bool"), list[8,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4194305, 68],"bool"), list[8,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (4194305) at non-singleton dimension 2.  Target sizes: [8, 8, 68, 68].  Tensor sizes: [8, 1, 4194305, 68]
2025-03-11 18:27:29.743921 test begin: paddle.broadcast_to(Tensor([8, 1, 42, 6790778],"bool"), list[8,8,42,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 42, 6790778],"bool"), list[8,8,42,113,], ) 
 The expanded size of the tensor (113) must match the existing size (6790778) at non-singleton dimension 3.  Target sizes: [8, 8, 42, 113].  Tensor sizes: [8, 1, 42, 6790778]
2025-03-11 18:27:30.297087 test begin: paddle.broadcast_to(Tensor([8, 1, 42, 6790778],"bool"), list[8,8,42,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 42, 6790778],"bool"), list[8,8,42,121,], ) 
 The expanded size of the tensor (121) must match the existing size (6790778) at non-singleton dimension 3.  Target sizes: [8, 8, 42, 121].  Tensor sizes: [8, 1, 42, 6790778]
2025-03-11 18:27:30.913258 test begin: paddle.broadcast_to(Tensor([8, 1, 42, 6790778],"bool"), list[8,8,42,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 42, 6790778],"bool"), list[8,8,42,33,], ) 
 The expanded size of the tensor (33) must match the existing size (6790778) at non-singleton dimension 3.  Target sizes: [8, 8, 42, 33].  Tensor sizes: [8, 1, 42, 6790778]
2025-03-11 18:27:31.348860 test begin: paddle.broadcast_to(Tensor([8, 1, 42, 6790778],"bool"), list[8,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 42, 6790778],"bool"), list[8,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (6790778) at non-singleton dimension 3.  Target sizes: [8, 8, 42, 42].  Tensor sizes: [8, 1, 42, 6790778]
2025-03-11 18:27:31.938959 test begin: paddle.broadcast_to(Tensor([8, 1, 4256906, 67],"bool"), list[8,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4256906, 67],"bool"), list[8,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (4256906) at non-singleton dimension 2.  Target sizes: [8, 8, 67, 67].  Tensor sizes: [8, 1, 4256906, 67]
2025-03-11 18:27:32.455318 test begin: paddle.broadcast_to(Tensor([8, 1, 43, 6632853],"bool"), list[8,8,43,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 43, 6632853],"bool"), list[8,8,43,113,], ) 
 The expanded size of the tensor (113) must match the existing size (6632853) at non-singleton dimension 3.  Target sizes: [8, 8, 43, 113].  Tensor sizes: [8, 1, 43, 6632853]
2025-03-11 18:27:32.991062 test begin: paddle.broadcast_to(Tensor([8, 1, 43, 6632853],"bool"), list[8,8,43,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 43, 6632853],"bool"), list[8,8,43,121,], ) 
 The expanded size of the tensor (121) must match the existing size (6632853) at non-singleton dimension 3.  Target sizes: [8, 8, 43, 121].  Tensor sizes: [8, 1, 43, 6632853]
2025-03-11 18:27:33.524229 test begin: paddle.broadcast_to(Tensor([8, 1, 43, 6632853],"bool"), list[8,8,43,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 43, 6632853],"bool"), list[8,8,43,33,], ) 
 The expanded size of the tensor (33) must match the existing size (6632853) at non-singleton dimension 3.  Target sizes: [8, 8, 43, 33].  Tensor sizes: [8, 1, 43, 6632853]
2025-03-11 18:27:34.045102 test begin: paddle.broadcast_to(Tensor([8, 1, 43, 6632853],"bool"), list[8,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 43, 6632853],"bool"), list[8,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (6632853) at non-singleton dimension 3.  Target sizes: [8, 8, 43, 43].  Tensor sizes: [8, 1, 43, 6632853]
2025-03-11 18:27:34.421316 test begin: paddle.broadcast_to(Tensor([8, 1, 4321405, 66],"bool"), list[8,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4321405, 66],"bool"), list[8,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (4321405) at non-singleton dimension 2.  Target sizes: [8, 8, 66, 66].  Tensor sizes: [8, 1, 4321405, 66]
2025-03-11 18:27:34.966941 test begin: paddle.broadcast_to(Tensor([8, 1, 4387888, 65],"bool"), list[8,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4387888, 65],"bool"), list[8,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (4387888) at non-singleton dimension 2.  Target sizes: [8, 8, 65, 65].  Tensor sizes: [8, 1, 4387888, 65]
2025-03-11 18:27:35.593872 test begin: paddle.broadcast_to(Tensor([8, 1, 44, 6482107],"bool"), list[8,8,44,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 44, 6482107],"bool"), list[8,8,44,113,], ) 
 The expanded size of the tensor (113) must match the existing size (6482107) at non-singleton dimension 3.  Target sizes: [8, 8, 44, 113].  Tensor sizes: [8, 1, 44, 6482107]
2025-03-11 18:27:36.184548 test begin: paddle.broadcast_to(Tensor([8, 1, 44, 6482107],"bool"), list[8,8,44,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 44, 6482107],"bool"), list[8,8,44,121,], ) 
 The expanded size of the tensor (121) must match the existing size (6482107) at non-singleton dimension 3.  Target sizes: [8, 8, 44, 121].  Tensor sizes: [8, 1, 44, 6482107]
2025-03-11 18:27:36.636869 test begin: paddle.broadcast_to(Tensor([8, 1, 44, 6482107],"bool"), list[8,8,44,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 44, 6482107],"bool"), list[8,8,44,33,], ) 
 The expanded size of the tensor (33) must match the existing size (6482107) at non-singleton dimension 3.  Target sizes: [8, 8, 44, 33].  Tensor sizes: [8, 1, 44, 6482107]
2025-03-11 18:27:37.243667 test begin: paddle.broadcast_to(Tensor([8, 1, 44, 6482107],"bool"), list[8,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 44, 6482107],"bool"), list[8,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (6482107) at non-singleton dimension 3.  Target sizes: [8, 8, 44, 44].  Tensor sizes: [8, 1, 44, 6482107]
2025-03-11 18:27:37.788828 test begin: paddle.broadcast_to(Tensor([8, 1, 4456449, 64],"bool"), list[8,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4456449, 64],"bool"), list[8,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (4456449) at non-singleton dimension 2.  Target sizes: [8, 8, 64, 64].  Tensor sizes: [8, 1, 4456449, 64]
2025-03-11 18:27:38.381128 test begin: paddle.broadcast_to(Tensor([8, 1, 45, 6338060],"bool"), list[8,8,45,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 45, 6338060],"bool"), list[8,8,45,113,], ) 
 The expanded size of the tensor (113) must match the existing size (6338060) at non-singleton dimension 3.  Target sizes: [8, 8, 45, 113].  Tensor sizes: [8, 1, 45, 6338060]
2025-03-11 18:27:38.887840 test begin: paddle.broadcast_to(Tensor([8, 1, 45, 6338060],"bool"), list[8,8,45,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 45, 6338060],"bool"), list[8,8,45,121,], ) 
 The expanded size of the tensor (121) must match the existing size (6338060) at non-singleton dimension 3.  Target sizes: [8, 8, 45, 121].  Tensor sizes: [8, 1, 45, 6338060]
2025-03-11 18:27:39.475815 test begin: paddle.broadcast_to(Tensor([8, 1, 45, 6338060],"bool"), list[8,8,45,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 45, 6338060],"bool"), list[8,8,45,33,], ) 
 The expanded size of the tensor (33) must match the existing size (6338060) at non-singleton dimension 3.  Target sizes: [8, 8, 45, 33].  Tensor sizes: [8, 1, 45, 6338060]
2025-03-11 18:27:39.911984 test begin: paddle.broadcast_to(Tensor([8, 1, 45, 6338060],"bool"), list[8,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 45, 6338060],"bool"), list[8,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (6338060) at non-singleton dimension 3.  Target sizes: [8, 8, 45, 45].  Tensor sizes: [8, 1, 45, 6338060]
2025-03-11 18:27:40.519517 test begin: paddle.broadcast_to(Tensor([8, 1, 4527186, 63],"bool"), list[8,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4527186, 63],"bool"), list[8,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (4527186) at non-singleton dimension 2.  Target sizes: [8, 8, 63, 63].  Tensor sizes: [8, 1, 4527186, 63]
2025-03-11 18:27:41.038414 test begin: paddle.broadcast_to(Tensor([8, 1, 46, 6200276],"bool"), list[8,8,46,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 46, 6200276],"bool"), list[8,8,46,113,], ) 
 The expanded size of the tensor (113) must match the existing size (6200276) at non-singleton dimension 3.  Target sizes: [8, 8, 46, 113].  Tensor sizes: [8, 1, 46, 6200276]
2025-03-11 18:27:41.557556 test begin: paddle.broadcast_to(Tensor([8, 1, 46, 6200276],"bool"), list[8,8,46,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 46, 6200276],"bool"), list[8,8,46,121,], ) 
 The expanded size of the tensor (121) must match the existing size (6200276) at non-singleton dimension 3.  Target sizes: [8, 8, 46, 121].  Tensor sizes: [8, 1, 46, 6200276]
2025-03-11 18:27:42.103842 test begin: paddle.broadcast_to(Tensor([8, 1, 46, 6200276],"bool"), list[8,8,46,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 46, 6200276],"bool"), list[8,8,46,33,], ) 
 The expanded size of the tensor (33) must match the existing size (6200276) at non-singleton dimension 3.  Target sizes: [8, 8, 46, 33].  Tensor sizes: [8, 1, 46, 6200276]
2025-03-11 18:27:42.641307 test begin: paddle.broadcast_to(Tensor([8, 1, 46, 6200276],"bool"), list[8,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 46, 6200276],"bool"), list[8,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (6200276) at non-singleton dimension 3.  Target sizes: [8, 8, 46, 46].  Tensor sizes: [8, 1, 46, 6200276]
2025-03-11 18:27:43.138493 test begin: paddle.broadcast_to(Tensor([8, 1, 4600205, 62],"bool"), list[8,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4600205, 62],"bool"), list[8,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (4600205) at non-singleton dimension 2.  Target sizes: [8, 8, 62, 62].  Tensor sizes: [8, 1, 4600205, 62]
2025-03-11 18:27:43.761734 test begin: paddle.broadcast_to(Tensor([8, 1, 4675618, 61],"bool"), list[8,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4675618, 61],"bool"), list[8,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (4675618) at non-singleton dimension 2.  Target sizes: [8, 8, 61, 61].  Tensor sizes: [8, 1, 4675618, 61]
2025-03-11 18:27:44.116675 test begin: paddle.broadcast_to(Tensor([8, 1, 47, 6068355],"bool"), list[8,8,47,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 47, 6068355],"bool"), list[8,8,47,113,], ) 
 The expanded size of the tensor (113) must match the existing size (6068355) at non-singleton dimension 3.  Target sizes: [8, 8, 47, 113].  Tensor sizes: [8, 1, 47, 6068355]
2025-03-11 18:27:44.730387 test begin: paddle.broadcast_to(Tensor([8, 1, 47, 6068355],"bool"), list[8,8,47,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 47, 6068355],"bool"), list[8,8,47,121,], ) 
 The expanded size of the tensor (121) must match the existing size (6068355) at non-singleton dimension 3.  Target sizes: [8, 8, 47, 121].  Tensor sizes: [8, 1, 47, 6068355]
2025-03-11 18:27:45.237159 test begin: paddle.broadcast_to(Tensor([8, 1, 47, 6068355],"bool"), list[8,8,47,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 47, 6068355],"bool"), list[8,8,47,33,], ) 
 The expanded size of the tensor (33) must match the existing size (6068355) at non-singleton dimension 3.  Target sizes: [8, 8, 47, 33].  Tensor sizes: [8, 1, 47, 6068355]
2025-03-11 18:27:45.837531 test begin: paddle.broadcast_to(Tensor([8, 1, 47, 6068355],"bool"), list[8,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 47, 6068355],"bool"), list[8,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (6068355) at non-singleton dimension 3.  Target sizes: [8, 8, 47, 47].  Tensor sizes: [8, 1, 47, 6068355]
2025-03-11 18:27:46.332676 test begin: paddle.broadcast_to(Tensor([8, 1, 47535446, 6],"bool"), list[8,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 47535446, 6],"bool"), list[8,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (47535446) at non-singleton dimension 2.  Target sizes: [8, 8, 6, 6].  Tensor sizes: [8, 1, 47535446, 6]
2025-03-11 18:27:46.889767 test begin: paddle.broadcast_to(Tensor([8, 1, 4753545, 60],"bool"), list[8,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4753545, 60],"bool"), list[8,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (4753545) at non-singleton dimension 2.  Target sizes: [8, 8, 60, 60].  Tensor sizes: [8, 1, 4753545, 60]
2025-03-11 18:27:47.492488 test begin: paddle.broadcast_to(Tensor([8, 1, 48, 5941931],"bool"), list[8,8,48,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 48, 5941931],"bool"), list[8,8,48,113,], ) 
 The expanded size of the tensor (113) must match the existing size (5941931) at non-singleton dimension 3.  Target sizes: [8, 8, 48, 113].  Tensor sizes: [8, 1, 48, 5941931]
2025-03-11 18:27:47.972319 test begin: paddle.broadcast_to(Tensor([8, 1, 48, 5941931],"bool"), list[8,8,48,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 48, 5941931],"bool"), list[8,8,48,121,], ) 
 The expanded size of the tensor (121) must match the existing size (5941931) at non-singleton dimension 3.  Target sizes: [8, 8, 48, 121].  Tensor sizes: [8, 1, 48, 5941931]
2025-03-11 18:27:48.576126 test begin: paddle.broadcast_to(Tensor([8, 1, 48, 5941931],"bool"), list[8,8,48,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 48, 5941931],"bool"), list[8,8,48,33,], ) 
 The expanded size of the tensor (33) must match the existing size (5941931) at non-singleton dimension 3.  Target sizes: [8, 8, 48, 33].  Tensor sizes: [8, 1, 48, 5941931]
2025-03-11 18:27:49.095782 test begin: paddle.broadcast_to(Tensor([8, 1, 48, 5941931],"bool"), list[8,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 48, 5941931],"bool"), list[8,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (5941931) at non-singleton dimension 3.  Target sizes: [8, 8, 48, 48].  Tensor sizes: [8, 1, 48, 5941931]
2025-03-11 18:27:49.548287 test begin: paddle.broadcast_to(Tensor([8, 1, 4834114, 59],"bool"), list[8,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4834114, 59],"bool"), list[8,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (4834114) at non-singleton dimension 2.  Target sizes: [8, 8, 59, 59].  Tensor sizes: [8, 1, 4834114, 59]
2025-03-11 18:27:50.095397 test begin: paddle.broadcast_to(Tensor([8, 1, 49, 5820667],"bool"), list[8,8,49,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 49, 5820667],"bool"), list[8,8,49,113,], ) 
 The expanded size of the tensor (113) must match the existing size (5820667) at non-singleton dimension 3.  Target sizes: [8, 8, 49, 113].  Tensor sizes: [8, 1, 49, 5820667]
2025-03-11 18:27:50.648530 test begin: paddle.broadcast_to(Tensor([8, 1, 49, 5820667],"bool"), list[8,8,49,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 49, 5820667],"bool"), list[8,8,49,121,], ) 
 The expanded size of the tensor (121) must match the existing size (5820667) at non-singleton dimension 3.  Target sizes: [8, 8, 49, 121].  Tensor sizes: [8, 1, 49, 5820667]
2025-03-11 18:27:51.140209 test begin: paddle.broadcast_to(Tensor([8, 1, 49, 5820667],"bool"), list[8,8,49,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 49, 5820667],"bool"), list[8,8,49,33,], ) 
 The expanded size of the tensor (33) must match the existing size (5820667) at non-singleton dimension 3.  Target sizes: [8, 8, 49, 33].  Tensor sizes: [8, 1, 49, 5820667]
2025-03-11 18:27:51.706990 test begin: paddle.broadcast_to(Tensor([8, 1, 49, 5820667],"bool"), list[8,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 49, 5820667],"bool"), list[8,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (5820667) at non-singleton dimension 3.  Target sizes: [8, 8, 49, 49].  Tensor sizes: [8, 1, 49, 5820667]
2025-03-11 18:27:52.265687 test begin: paddle.broadcast_to(Tensor([8, 1, 4917460, 58],"bool"), list[8,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 4917460, 58],"bool"), list[8,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (4917460) at non-singleton dimension 2.  Target sizes: [8, 8, 58, 58].  Tensor sizes: [8, 1, 4917460, 58]
2025-03-11 18:27:52.860565 test begin: paddle.broadcast_to(Tensor([8, 1, 5, 57042535],"bool"), list[8,8,5,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 5, 57042535],"bool"), list[8,8,5,113,], ) 
 The expanded size of the tensor (113) must match the existing size (57042535) at non-singleton dimension 3.  Target sizes: [8, 8, 5, 113].  Tensor sizes: [8, 1, 5, 57042535]
2025-03-11 18:27:53.413660 test begin: paddle.broadcast_to(Tensor([8, 1, 5, 57042535],"bool"), list[8,8,5,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 5, 57042535],"bool"), list[8,8,5,121,], ) 
 The expanded size of the tensor (121) must match the existing size (57042535) at non-singleton dimension 3.  Target sizes: [8, 8, 5, 121].  Tensor sizes: [8, 1, 5, 57042535]
2025-03-11 18:27:54.018057 test begin: paddle.broadcast_to(Tensor([8, 1, 5, 57042535],"bool"), list[8,8,5,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 5, 57042535],"bool"), list[8,8,5,33,], ) 
 The expanded size of the tensor (33) must match the existing size (57042535) at non-singleton dimension 3.  Target sizes: [8, 8, 5, 33].  Tensor sizes: [8, 1, 5, 57042535]
2025-03-11 18:27:54.556529 test begin: paddle.broadcast_to(Tensor([8, 1, 5, 57042535],"bool"), list[8,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 5, 57042535],"bool"), list[8,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (57042535) at non-singleton dimension 3.  Target sizes: [8, 8, 5, 5].  Tensor sizes: [8, 1, 5, 57042535]
2025-03-11 18:27:55.170761 test begin: paddle.broadcast_to(Tensor([8, 1, 50, 5704254],"bool"), list[8,8,50,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 50, 5704254],"bool"), list[8,8,50,113,], ) 
 The expanded size of the tensor (113) must match the existing size (5704254) at non-singleton dimension 3.  Target sizes: [8, 8, 50, 113].  Tensor sizes: [8, 1, 50, 5704254]
2025-03-11 18:27:55.687542 test begin: paddle.broadcast_to(Tensor([8, 1, 50, 5704254],"bool"), list[8,8,50,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 50, 5704254],"bool"), list[8,8,50,121,], ) 
 The expanded size of the tensor (121) must match the existing size (5704254) at non-singleton dimension 3.  Target sizes: [8, 8, 50, 121].  Tensor sizes: [8, 1, 50, 5704254]
2025-03-11 18:27:56.222388 test begin: paddle.broadcast_to(Tensor([8, 1, 50, 5704254],"bool"), list[8,8,50,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 50, 5704254],"bool"), list[8,8,50,33,], ) 
 The expanded size of the tensor (33) must match the existing size (5704254) at non-singleton dimension 3.  Target sizes: [8, 8, 50, 33].  Tensor sizes: [8, 1, 50, 5704254]
2025-03-11 18:27:56.810584 test begin: paddle.broadcast_to(Tensor([8, 1, 50, 5704254],"bool"), list[8,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 50, 5704254],"bool"), list[8,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (5704254) at non-singleton dimension 3.  Target sizes: [8, 8, 50, 50].  Tensor sizes: [8, 1, 50, 5704254]
2025-03-11 18:27:57.183488 test begin: paddle.broadcast_to(Tensor([8, 1, 5003732, 57],"bool"), list[8,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 5003732, 57],"bool"), list[8,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (5003732) at non-singleton dimension 2.  Target sizes: [8, 8, 57, 57].  Tensor sizes: [8, 1, 5003732, 57]
2025-03-11 18:27:57.778376 test begin: paddle.broadcast_to(Tensor([8, 1, 5093084, 56],"bool"), list[8,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 5093084, 56],"bool"), list[8,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (5093084) at non-singleton dimension 2.  Target sizes: [8, 8, 56, 56].  Tensor sizes: [8, 1, 5093084, 56]
2025-03-11 18:27:58.145299 test begin: paddle.broadcast_to(Tensor([8, 1, 51, 5592406],"bool"), list[8,8,51,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 51, 5592406],"bool"), list[8,8,51,113,], ) 
 The expanded size of the tensor (113) must match the existing size (5592406) at non-singleton dimension 3.  Target sizes: [8, 8, 51, 113].  Tensor sizes: [8, 1, 51, 5592406]
2025-03-11 18:27:58.755561 test begin: paddle.broadcast_to(Tensor([8, 1, 51, 5592406],"bool"), list[8,8,51,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 51, 5592406],"bool"), list[8,8,51,121,], ) 
 The expanded size of the tensor (121) must match the existing size (5592406) at non-singleton dimension 3.  Target sizes: [8, 8, 51, 121].  Tensor sizes: [8, 1, 51, 5592406]
2025-03-11 18:27:59.202074 test begin: paddle.broadcast_to(Tensor([8, 1, 51, 5592406],"bool"), list[8,8,51,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 51, 5592406],"bool"), list[8,8,51,33,], ) 
 The expanded size of the tensor (33) must match the existing size (5592406) at non-singleton dimension 3.  Target sizes: [8, 8, 51, 33].  Tensor sizes: [8, 1, 51, 5592406]
2025-03-11 18:27:59.799050 test begin: paddle.broadcast_to(Tensor([8, 1, 51, 5592406],"bool"), list[8,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 51, 5592406],"bool"), list[8,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (5592406) at non-singleton dimension 3.  Target sizes: [8, 8, 51, 51].  Tensor sizes: [8, 1, 51, 5592406]
2025-03-11 18:28:00.261460 test begin: paddle.broadcast_to(Tensor([8, 1, 5185685, 55],"bool"), list[8,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 5185685, 55],"bool"), list[8,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (5185685) at non-singleton dimension 2.  Target sizes: [8, 8, 55, 55].  Tensor sizes: [8, 1, 5185685, 55]
2025-03-11 18:28:00.866997 test begin: paddle.broadcast_to(Tensor([8, 1, 52, 5484860],"bool"), list[8,8,52,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 52, 5484860],"bool"), list[8,8,52,113,], ) 
 The expanded size of the tensor (113) must match the existing size (5484860) at non-singleton dimension 3.  Target sizes: [8, 8, 52, 113].  Tensor sizes: [8, 1, 52, 5484860]
2025-03-11 18:28:01.237047 test begin: paddle.broadcast_to(Tensor([8, 1, 52, 5484860],"bool"), list[8,8,52,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 52, 5484860],"bool"), list[8,8,52,121,], ) 
 The expanded size of the tensor (121) must match the existing size (5484860) at non-singleton dimension 3.  Target sizes: [8, 8, 52, 121].  Tensor sizes: [8, 1, 52, 5484860]
2025-03-11 18:28:01.735776 test begin: paddle.broadcast_to(Tensor([8, 1, 52, 5484860],"bool"), list[8,8,52,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 52, 5484860],"bool"), list[8,8,52,33,], ) 
 The expanded size of the tensor (33) must match the existing size (5484860) at non-singleton dimension 3.  Target sizes: [8, 8, 52, 33].  Tensor sizes: [8, 1, 52, 5484860]
2025-03-11 18:28:02.331268 test begin: paddle.broadcast_to(Tensor([8, 1, 52, 5484860],"bool"), list[8,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 52, 5484860],"bool"), list[8,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (5484860) at non-singleton dimension 3.  Target sizes: [8, 8, 52, 52].  Tensor sizes: [8, 1, 52, 5484860]
2025-03-11 18:28:02.735772 test begin: paddle.broadcast_to(Tensor([8, 1, 5281717, 54],"bool"), list[8,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 5281717, 54],"bool"), list[8,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (5281717) at non-singleton dimension 2.  Target sizes: [8, 8, 54, 54].  Tensor sizes: [8, 1, 5281717, 54]
2025-03-11 18:28:03.237806 test begin: paddle.broadcast_to(Tensor([8, 1, 53, 5381372],"bool"), list[8,8,53,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 53, 5381372],"bool"), list[8,8,53,113,], ) 
 The expanded size of the tensor (113) must match the existing size (5381372) at non-singleton dimension 3.  Target sizes: [8, 8, 53, 113].  Tensor sizes: [8, 1, 53, 5381372]
2025-03-11 18:28:03.777741 test begin: paddle.broadcast_to(Tensor([8, 1, 53, 5381372],"bool"), list[8,8,53,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 53, 5381372],"bool"), list[8,8,53,121,], ) 
 The expanded size of the tensor (121) must match the existing size (5381372) at non-singleton dimension 3.  Target sizes: [8, 8, 53, 121].  Tensor sizes: [8, 1, 53, 5381372]
2025-03-11 18:28:04.323182 test begin: paddle.broadcast_to(Tensor([8, 1, 53, 5381372],"bool"), list[8,8,53,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 53, 5381372],"bool"), list[8,8,53,33,], ) 
 The expanded size of the tensor (33) must match the existing size (5381372) at non-singleton dimension 3.  Target sizes: [8, 8, 53, 33].  Tensor sizes: [8, 1, 53, 5381372]
2025-03-11 18:28:04.947214 test begin: paddle.broadcast_to(Tensor([8, 1, 53, 5381372],"bool"), list[8,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 53, 5381372],"bool"), list[8,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (5381372) at non-singleton dimension 3.  Target sizes: [8, 8, 53, 53].  Tensor sizes: [8, 1, 53, 5381372]
2025-03-11 18:28:05.491853 test begin: paddle.broadcast_to(Tensor([8, 1, 5381372, 53],"bool"), list[8,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 5381372, 53],"bool"), list[8,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (5381372) at non-singleton dimension 2.  Target sizes: [8, 8, 53, 53].  Tensor sizes: [8, 1, 5381372, 53]
2025-03-11 18:28:06.031043 test begin: paddle.broadcast_to(Tensor([8, 1, 54, 5281717],"bool"), list[8,8,54,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 54, 5281717],"bool"), list[8,8,54,113,], ) 
 The expanded size of the tensor (113) must match the existing size (5281717) at non-singleton dimension 3.  Target sizes: [8, 8, 54, 113].  Tensor sizes: [8, 1, 54, 5281717]
2025-03-11 18:28:06.621932 test begin: paddle.broadcast_to(Tensor([8, 1, 54, 5281717],"bool"), list[8,8,54,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 54, 5281717],"bool"), list[8,8,54,121,], ) 
 The expanded size of the tensor (121) must match the existing size (5281717) at non-singleton dimension 3.  Target sizes: [8, 8, 54, 121].  Tensor sizes: [8, 1, 54, 5281717]
2025-03-11 18:28:07.060871 test begin: paddle.broadcast_to(Tensor([8, 1, 54, 5281717],"bool"), list[8,8,54,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 54, 5281717],"bool"), list[8,8,54,33,], ) 
 The expanded size of the tensor (33) must match the existing size (5281717) at non-singleton dimension 3.  Target sizes: [8, 8, 54, 33].  Tensor sizes: [8, 1, 54, 5281717]
2025-03-11 18:28:07.657193 test begin: paddle.broadcast_to(Tensor([8, 1, 54, 5281717],"bool"), list[8,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 54, 5281717],"bool"), list[8,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (5281717) at non-singleton dimension 3.  Target sizes: [8, 8, 54, 54].  Tensor sizes: [8, 1, 54, 5281717]
2025-03-11 18:28:08.010086 test begin: paddle.broadcast_to(Tensor([8, 1, 5484860, 52],"bool"), list[8,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 5484860, 52],"bool"), list[8,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (5484860) at non-singleton dimension 2.  Target sizes: [8, 8, 52, 52].  Tensor sizes: [8, 1, 5484860, 52]
2025-03-11 18:28:08.502189 test begin: paddle.broadcast_to(Tensor([8, 1, 55, 5185685],"bool"), list[8,8,55,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 55, 5185685],"bool"), list[8,8,55,113,], ) 
 The expanded size of the tensor (113) must match the existing size (5185685) at non-singleton dimension 3.  Target sizes: [8, 8, 55, 113].  Tensor sizes: [8, 1, 55, 5185685]
2025-03-11 18:28:08.991486 test begin: paddle.broadcast_to(Tensor([8, 1, 55, 5185685],"bool"), list[8,8,55,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 55, 5185685],"bool"), list[8,8,55,121,], ) 
 The expanded size of the tensor (121) must match the existing size (5185685) at non-singleton dimension 3.  Target sizes: [8, 8, 55, 121].  Tensor sizes: [8, 1, 55, 5185685]
2025-03-11 18:28:09.478953 test begin: paddle.broadcast_to(Tensor([8, 1, 55, 5185685],"bool"), list[8,8,55,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 55, 5185685],"bool"), list[8,8,55,33,], ) 
 The expanded size of the tensor (33) must match the existing size (5185685) at non-singleton dimension 3.  Target sizes: [8, 8, 55, 33].  Tensor sizes: [8, 1, 55, 5185685]
2025-03-11 18:28:09.988590 test begin: paddle.broadcast_to(Tensor([8, 1, 55, 5185685],"bool"), list[8,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 55, 5185685],"bool"), list[8,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (5185685) at non-singleton dimension 3.  Target sizes: [8, 8, 55, 55].  Tensor sizes: [8, 1, 55, 5185685]
2025-03-11 18:28:10.478102 test begin: paddle.broadcast_to(Tensor([8, 1, 5592406, 51],"bool"), list[8,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 5592406, 51],"bool"), list[8,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (5592406) at non-singleton dimension 2.  Target sizes: [8, 8, 51, 51].  Tensor sizes: [8, 1, 5592406, 51]
2025-03-11 18:28:10.979690 test begin: paddle.broadcast_to(Tensor([8, 1, 56, 5093084],"bool"), list[8,8,56,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 56, 5093084],"bool"), list[8,8,56,113,], ) 
 The expanded size of the tensor (113) must match the existing size (5093084) at non-singleton dimension 3.  Target sizes: [8, 8, 56, 113].  Tensor sizes: [8, 1, 56, 5093084]
2025-03-11 18:28:11.473556 test begin: paddle.broadcast_to(Tensor([8, 1, 56, 5093084],"bool"), list[8,8,56,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 56, 5093084],"bool"), list[8,8,56,121,], ) 
 The expanded size of the tensor (121) must match the existing size (5093084) at non-singleton dimension 3.  Target sizes: [8, 8, 56, 121].  Tensor sizes: [8, 1, 56, 5093084]
2025-03-11 18:28:11.973106 test begin: paddle.broadcast_to(Tensor([8, 1, 56, 5093084],"bool"), list[8,8,56,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 56, 5093084],"bool"), list[8,8,56,33,], ) 
 The expanded size of the tensor (33) must match the existing size (5093084) at non-singleton dimension 3.  Target sizes: [8, 8, 56, 33].  Tensor sizes: [8, 1, 56, 5093084]
2025-03-11 18:28:12.481190 test begin: paddle.broadcast_to(Tensor([8, 1, 56, 5093084],"bool"), list[8,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 56, 5093084],"bool"), list[8,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (5093084) at non-singleton dimension 3.  Target sizes: [8, 8, 56, 56].  Tensor sizes: [8, 1, 56, 5093084]
2025-03-11 18:28:12.971799 test begin: paddle.broadcast_to(Tensor([8, 1, 57, 5003732],"bool"), list[8,8,57,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 57, 5003732],"bool"), list[8,8,57,113,], ) 
 The expanded size of the tensor (113) must match the existing size (5003732) at non-singleton dimension 3.  Target sizes: [8, 8, 57, 113].  Tensor sizes: [8, 1, 57, 5003732]
2025-03-11 18:28:13.461915 test begin: paddle.broadcast_to(Tensor([8, 1, 57, 5003732],"bool"), list[8,8,57,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 57, 5003732],"bool"), list[8,8,57,121,], ) 
 The expanded size of the tensor (121) must match the existing size (5003732) at non-singleton dimension 3.  Target sizes: [8, 8, 57, 121].  Tensor sizes: [8, 1, 57, 5003732]
2025-03-11 18:28:13.947674 test begin: paddle.broadcast_to(Tensor([8, 1, 57, 5003732],"bool"), list[8,8,57,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 57, 5003732],"bool"), list[8,8,57,33,], ) 
 The expanded size of the tensor (33) must match the existing size (5003732) at non-singleton dimension 3.  Target sizes: [8, 8, 57, 33].  Tensor sizes: [8, 1, 57, 5003732]
2025-03-11 18:28:14.488202 test begin: paddle.broadcast_to(Tensor([8, 1, 57, 5003732],"bool"), list[8,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 57, 5003732],"bool"), list[8,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (5003732) at non-singleton dimension 3.  Target sizes: [8, 8, 57, 57].  Tensor sizes: [8, 1, 57, 5003732]
2025-03-11 18:28:14.974283 test begin: paddle.broadcast_to(Tensor([8, 1, 57042535, 5],"bool"), list[8,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 57042535, 5],"bool"), list[8,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (57042535) at non-singleton dimension 2.  Target sizes: [8, 8, 5, 5].  Tensor sizes: [8, 1, 57042535, 5]
2025-03-11 18:28:15.467456 test begin: paddle.broadcast_to(Tensor([8, 1, 5704254, 50],"bool"), list[8,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 5704254, 50],"bool"), list[8,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (5704254) at non-singleton dimension 2.  Target sizes: [8, 8, 50, 50].  Tensor sizes: [8, 1, 5704254, 50]
2025-03-11 18:28:15.958384 test begin: paddle.broadcast_to(Tensor([8, 1, 58, 4917460],"bool"), list[8,8,58,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 58, 4917460],"bool"), list[8,8,58,113,], ) 
 The expanded size of the tensor (113) must match the existing size (4917460) at non-singleton dimension 3.  Target sizes: [8, 8, 58, 113].  Tensor sizes: [8, 1, 58, 4917460]
2025-03-11 18:28:16.500354 test begin: paddle.broadcast_to(Tensor([8, 1, 58, 4917460],"bool"), list[8,8,58,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 58, 4917460],"bool"), list[8,8,58,121,], ) 
 The expanded size of the tensor (121) must match the existing size (4917460) at non-singleton dimension 3.  Target sizes: [8, 8, 58, 121].  Tensor sizes: [8, 1, 58, 4917460]
2025-03-11 18:28:17.044637 test begin: paddle.broadcast_to(Tensor([8, 1, 58, 4917460],"bool"), list[8,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 58, 4917460],"bool"), list[8,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (4917460) at non-singleton dimension 3.  Target sizes: [8, 8, 58, 58].  Tensor sizes: [8, 1, 58, 4917460]
2025-03-11 18:28:17.646601 test begin: paddle.broadcast_to(Tensor([8, 1, 5820667, 49],"bool"), list[8,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 5820667, 49],"bool"), list[8,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (5820667) at non-singleton dimension 2.  Target sizes: [8, 8, 49, 49].  Tensor sizes: [8, 1, 5820667, 49]
2025-03-11 18:28:18.003211 test begin: paddle.broadcast_to(Tensor([8, 1, 59, 4834114],"bool"), list[8,8,59,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 59, 4834114],"bool"), list[8,8,59,113,], ) 
 The expanded size of the tensor (113) must match the existing size (4834114) at non-singleton dimension 3.  Target sizes: [8, 8, 59, 113].  Tensor sizes: [8, 1, 59, 4834114]
2025-03-11 18:28:18.493520 test begin: paddle.broadcast_to(Tensor([8, 1, 59, 4834114],"bool"), list[8,8,59,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 59, 4834114],"bool"), list[8,8,59,121,], ) 
 The expanded size of the tensor (121) must match the existing size (4834114) at non-singleton dimension 3.  Target sizes: [8, 8, 59, 121].  Tensor sizes: [8, 1, 59, 4834114]
2025-03-11 18:28:18.985879 test begin: paddle.broadcast_to(Tensor([8, 1, 59, 4834114],"bool"), list[8,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 59, 4834114],"bool"), list[8,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (4834114) at non-singleton dimension 3.  Target sizes: [8, 8, 59, 59].  Tensor sizes: [8, 1, 59, 4834114]
2025-03-11 18:28:19.476435 test begin: paddle.broadcast_to(Tensor([8, 1, 5941931, 48],"bool"), list[8,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 5941931, 48],"bool"), list[8,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (5941931) at non-singleton dimension 2.  Target sizes: [8, 8, 48, 48].  Tensor sizes: [8, 1, 5941931, 48]
2025-03-11 18:28:20.018895 test begin: paddle.broadcast_to(Tensor([8, 1, 6, 47535446],"bool"), list[8,8,6,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 6, 47535446],"bool"), list[8,8,6,113,], ) 
 The expanded size of the tensor (113) must match the existing size (47535446) at non-singleton dimension 3.  Target sizes: [8, 8, 6, 113].  Tensor sizes: [8, 1, 6, 47535446]
2025-03-11 18:28:20.511453 test begin: paddle.broadcast_to(Tensor([8, 1, 6, 47535446],"bool"), list[8,8,6,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 6, 47535446],"bool"), list[8,8,6,121,], ) 
 The expanded size of the tensor (121) must match the existing size (47535446) at non-singleton dimension 3.  Target sizes: [8, 8, 6, 121].  Tensor sizes: [8, 1, 6, 47535446]
2025-03-11 18:28:21.004902 test begin: paddle.broadcast_to(Tensor([8, 1, 6, 47535446],"bool"), list[8,8,6,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 6, 47535446],"bool"), list[8,8,6,33,], ) 
 The expanded size of the tensor (33) must match the existing size (47535446) at non-singleton dimension 3.  Target sizes: [8, 8, 6, 33].  Tensor sizes: [8, 1, 6, 47535446]
2025-03-11 18:28:21.499846 test begin: paddle.broadcast_to(Tensor([8, 1, 6, 47535446],"bool"), list[8,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 6, 47535446],"bool"), list[8,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (47535446) at non-singleton dimension 3.  Target sizes: [8, 8, 6, 6].  Tensor sizes: [8, 1, 6, 47535446]
2025-03-11 18:28:22.016678 test begin: paddle.broadcast_to(Tensor([8, 1, 60, 4753545],"bool"), list[8,8,60,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 60, 4753545],"bool"), list[8,8,60,113,], ) 
 The expanded size of the tensor (113) must match the existing size (4753545) at non-singleton dimension 3.  Target sizes: [8, 8, 60, 113].  Tensor sizes: [8, 1, 60, 4753545]
2025-03-11 18:28:22.504324 test begin: paddle.broadcast_to(Tensor([8, 1, 60, 4753545],"bool"), list[8,8,60,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 60, 4753545],"bool"), list[8,8,60,121,], ) 
 The expanded size of the tensor (121) must match the existing size (4753545) at non-singleton dimension 3.  Target sizes: [8, 8, 60, 121].  Tensor sizes: [8, 1, 60, 4753545]
2025-03-11 18:28:22.991389 test begin: paddle.broadcast_to(Tensor([8, 1, 60, 4753545],"bool"), list[8,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 60, 4753545],"bool"), list[8,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (4753545) at non-singleton dimension 3.  Target sizes: [8, 8, 60, 60].  Tensor sizes: [8, 1, 60, 4753545]
2025-03-11 18:28:23.586095 test begin: paddle.broadcast_to(Tensor([8, 1, 6068355, 47],"bool"), list[8,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 6068355, 47],"bool"), list[8,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (6068355) at non-singleton dimension 2.  Target sizes: [8, 8, 47, 47].  Tensor sizes: [8, 1, 6068355, 47]
2025-03-11 18:28:24.024098 test begin: paddle.broadcast_to(Tensor([8, 1, 61, 4675618],"bool"), list[8,8,61,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 61, 4675618],"bool"), list[8,8,61,113,], ) 
 The expanded size of the tensor (113) must match the existing size (4675618) at non-singleton dimension 3.  Target sizes: [8, 8, 61, 113].  Tensor sizes: [8, 1, 61, 4675618]
2025-03-11 18:28:24.517779 test begin: paddle.broadcast_to(Tensor([8, 1, 61, 4675618],"bool"), list[8,8,61,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 61, 4675618],"bool"), list[8,8,61,121,], ) 
 The expanded size of the tensor (121) must match the existing size (4675618) at non-singleton dimension 3.  Target sizes: [8, 8, 61, 121].  Tensor sizes: [8, 1, 61, 4675618]
2025-03-11 18:28:25.007488 test begin: paddle.broadcast_to(Tensor([8, 1, 61, 4675618],"bool"), list[8,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 61, 4675618],"bool"), list[8,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (4675618) at non-singleton dimension 3.  Target sizes: [8, 8, 61, 61].  Tensor sizes: [8, 1, 61, 4675618]
2025-03-11 18:28:25.504436 test begin: paddle.broadcast_to(Tensor([8, 1, 62, 4600205],"bool"), list[8,8,62,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 62, 4600205],"bool"), list[8,8,62,113,], ) 
 The expanded size of the tensor (113) must match the existing size (4600205) at non-singleton dimension 3.  Target sizes: [8, 8, 62, 113].  Tensor sizes: [8, 1, 62, 4600205]
2025-03-11 18:28:25.997593 test begin: paddle.broadcast_to(Tensor([8, 1, 62, 4600205],"bool"), list[8,8,62,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 62, 4600205],"bool"), list[8,8,62,121,], ) 
 The expanded size of the tensor (121) must match the existing size (4600205) at non-singleton dimension 3.  Target sizes: [8, 8, 62, 121].  Tensor sizes: [8, 1, 62, 4600205]
2025-03-11 18:28:26.494430 test begin: paddle.broadcast_to(Tensor([8, 1, 62, 4600205],"bool"), list[8,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 62, 4600205],"bool"), list[8,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (4600205) at non-singleton dimension 3.  Target sizes: [8, 8, 62, 62].  Tensor sizes: [8, 1, 62, 4600205]
2025-03-11 18:28:26.989704 test begin: paddle.broadcast_to(Tensor([8, 1, 6200276, 46],"bool"), list[8,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 6200276, 46],"bool"), list[8,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (6200276) at non-singleton dimension 2.  Target sizes: [8, 8, 46, 46].  Tensor sizes: [8, 1, 6200276, 46]
2025-03-11 18:28:27.515712 test begin: paddle.broadcast_to(Tensor([8, 1, 63, 4527186],"bool"), list[8,8,63,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 63, 4527186],"bool"), list[8,8,63,113,], ) 
 The expanded size of the tensor (113) must match the existing size (4527186) at non-singleton dimension 3.  Target sizes: [8, 8, 63, 113].  Tensor sizes: [8, 1, 63, 4527186]
2025-03-11 18:28:28.005050 test begin: paddle.broadcast_to(Tensor([8, 1, 63, 4527186],"bool"), list[8,8,63,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 63, 4527186],"bool"), list[8,8,63,121,], ) 
 The expanded size of the tensor (121) must match the existing size (4527186) at non-singleton dimension 3.  Target sizes: [8, 8, 63, 121].  Tensor sizes: [8, 1, 63, 4527186]
2025-03-11 18:28:28.496844 test begin: paddle.broadcast_to(Tensor([8, 1, 63, 4527186],"bool"), list[8,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 63, 4527186],"bool"), list[8,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (4527186) at non-singleton dimension 3.  Target sizes: [8, 8, 63, 63].  Tensor sizes: [8, 1, 63, 4527186]
2025-03-11 18:28:29.024433 test begin: paddle.broadcast_to(Tensor([8, 1, 6338060, 45],"bool"), list[8,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 6338060, 45],"bool"), list[8,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (6338060) at non-singleton dimension 2.  Target sizes: [8, 8, 45, 45].  Tensor sizes: [8, 1, 6338060, 45]
2025-03-11 18:28:29.512572 test begin: paddle.broadcast_to(Tensor([8, 1, 64, 4456449],"bool"), list[8,8,64,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 64, 4456449],"bool"), list[8,8,64,113,], ) 
 The expanded size of the tensor (113) must match the existing size (4456449) at non-singleton dimension 3.  Target sizes: [8, 8, 64, 113].  Tensor sizes: [8, 1, 64, 4456449]
2025-03-11 18:28:30.007980 test begin: paddle.broadcast_to(Tensor([8, 1, 64, 4456449],"bool"), list[8,8,64,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 64, 4456449],"bool"), list[8,8,64,121,], ) 
 The expanded size of the tensor (121) must match the existing size (4456449) at non-singleton dimension 3.  Target sizes: [8, 8, 64, 121].  Tensor sizes: [8, 1, 64, 4456449]
2025-03-11 18:28:30.505339 test begin: paddle.broadcast_to(Tensor([8, 1, 64, 4456449],"bool"), list[8,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 64, 4456449],"bool"), list[8,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (4456449) at non-singleton dimension 3.  Target sizes: [8, 8, 64, 64].  Tensor sizes: [8, 1, 64, 4456449]
2025-03-11 18:28:31.098682 test begin: paddle.broadcast_to(Tensor([8, 1, 6482107, 44],"bool"), list[8,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 6482107, 44],"bool"), list[8,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (6482107) at non-singleton dimension 2.  Target sizes: [8, 8, 44, 44].  Tensor sizes: [8, 1, 6482107, 44]
2025-03-11 18:28:31.458669 test begin: paddle.broadcast_to(Tensor([8, 1, 65, 4387888],"bool"), list[8,8,65,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 65, 4387888],"bool"), list[8,8,65,113,], ) 
 The expanded size of the tensor (113) must match the existing size (4387888) at non-singleton dimension 3.  Target sizes: [8, 8, 65, 113].  Tensor sizes: [8, 1, 65, 4387888]
2025-03-11 18:28:31.956012 test begin: paddle.broadcast_to(Tensor([8, 1, 65, 4387888],"bool"), list[8,8,65,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 65, 4387888],"bool"), list[8,8,65,121,], ) 
 The expanded size of the tensor (121) must match the existing size (4387888) at non-singleton dimension 3.  Target sizes: [8, 8, 65, 121].  Tensor sizes: [8, 1, 65, 4387888]
2025-03-11 18:28:32.537402 test begin: paddle.broadcast_to(Tensor([8, 1, 65, 4387888],"bool"), list[8,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 65, 4387888],"bool"), list[8,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (4387888) at non-singleton dimension 3.  Target sizes: [8, 8, 65, 65].  Tensor sizes: [8, 1, 65, 4387888]
2025-03-11 18:28:33.132934 test begin: paddle.broadcast_to(Tensor([8, 1, 66, 4321405],"bool"), list[8,8,66,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 66, 4321405],"bool"), list[8,8,66,113,], ) 
 The expanded size of the tensor (113) must match the existing size (4321405) at non-singleton dimension 3.  Target sizes: [8, 8, 66, 113].  Tensor sizes: [8, 1, 66, 4321405]
2025-03-11 18:28:33.486990 test begin: paddle.broadcast_to(Tensor([8, 1, 66, 4321405],"bool"), list[8,8,66,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 66, 4321405],"bool"), list[8,8,66,121,], ) 
 The expanded size of the tensor (121) must match the existing size (4321405) at non-singleton dimension 3.  Target sizes: [8, 8, 66, 121].  Tensor sizes: [8, 1, 66, 4321405]
2025-03-11 18:28:34.021726 test begin: paddle.broadcast_to(Tensor([8, 1, 66, 4321405],"bool"), list[8,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 66, 4321405],"bool"), list[8,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (4321405) at non-singleton dimension 3.  Target sizes: [8, 8, 66, 66].  Tensor sizes: [8, 1, 66, 4321405]
2025-03-11 18:28:34.512304 test begin: paddle.broadcast_to(Tensor([8, 1, 6632853, 43],"bool"), list[8,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 6632853, 43],"bool"), list[8,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (6632853) at non-singleton dimension 2.  Target sizes: [8, 8, 43, 43].  Tensor sizes: [8, 1, 6632853, 43]
2025-03-11 18:28:35.104082 test begin: paddle.broadcast_to(Tensor([8, 1, 67, 4256906],"bool"), list[8,8,67,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 67, 4256906],"bool"), list[8,8,67,113,], ) 
 The expanded size of the tensor (113) must match the existing size (4256906) at non-singleton dimension 3.  Target sizes: [8, 8, 67, 113].  Tensor sizes: [8, 1, 67, 4256906]
2025-03-11 18:28:35.476430 test begin: paddle.broadcast_to(Tensor([8, 1, 67, 4256906],"bool"), list[8,8,67,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 67, 4256906],"bool"), list[8,8,67,121,], ) 
 The expanded size of the tensor (121) must match the existing size (4256906) at non-singleton dimension 3.  Target sizes: [8, 8, 67, 121].  Tensor sizes: [8, 1, 67, 4256906]
2025-03-11 18:28:35.993101 test begin: paddle.broadcast_to(Tensor([8, 1, 67, 4256906],"bool"), list[8,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 67, 4256906],"bool"), list[8,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (4256906) at non-singleton dimension 3.  Target sizes: [8, 8, 67, 67].  Tensor sizes: [8, 1, 67, 4256906]
2025-03-11 18:28:36.489474 test begin: paddle.broadcast_to(Tensor([8, 1, 6790778, 42],"bool"), list[8,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 6790778, 42],"bool"), list[8,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (6790778) at non-singleton dimension 2.  Target sizes: [8, 8, 42, 42].  Tensor sizes: [8, 1, 6790778, 42]
2025-03-11 18:28:36.978210 test begin: paddle.broadcast_to(Tensor([8, 1, 68, 4194305],"bool"), list[8,8,68,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 68, 4194305],"bool"), list[8,8,68,113,], ) 
 The expanded size of the tensor (113) must match the existing size (4194305) at non-singleton dimension 3.  Target sizes: [8, 8, 68, 113].  Tensor sizes: [8, 1, 68, 4194305]
2025-03-11 18:28:37.574531 test begin: paddle.broadcast_to(Tensor([8, 1, 68, 4194305],"bool"), list[8,8,68,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 68, 4194305],"bool"), list[8,8,68,121,], ) 
 The expanded size of the tensor (121) must match the existing size (4194305) at non-singleton dimension 3.  Target sizes: [8, 8, 68, 121].  Tensor sizes: [8, 1, 68, 4194305]
2025-03-11 18:28:37.997976 test begin: paddle.broadcast_to(Tensor([8, 1, 68, 4194305],"bool"), list[8,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 68, 4194305],"bool"), list[8,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (4194305) at non-singleton dimension 3.  Target sizes: [8, 8, 68, 68].  Tensor sizes: [8, 1, 68, 4194305]
2025-03-11 18:28:38.486539 test begin: paddle.broadcast_to(Tensor([8, 1, 69, 4133517],"bool"), list[8,8,69,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 69, 4133517],"bool"), list[8,8,69,113,], ) 
 The expanded size of the tensor (113) must match the existing size (4133517) at non-singleton dimension 3.  Target sizes: [8, 8, 69, 113].  Tensor sizes: [8, 1, 69, 4133517]
2025-03-11 18:28:38.977921 test begin: paddle.broadcast_to(Tensor([8, 1, 69, 4133517],"bool"), list[8,8,69,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 69, 4133517],"bool"), list[8,8,69,121,], ) 
 The expanded size of the tensor (121) must match the existing size (4133517) at non-singleton dimension 3.  Target sizes: [8, 8, 69, 121].  Tensor sizes: [8, 1, 69, 4133517]
2025-03-11 18:28:39.581828 test begin: paddle.broadcast_to(Tensor([8, 1, 69, 4133517],"bool"), list[8,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 69, 4133517],"bool"), list[8,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (4133517) at non-singleton dimension 3.  Target sizes: [8, 8, 69, 69].  Tensor sizes: [8, 1, 69, 4133517]
2025-03-11 18:28:40.122316 test begin: paddle.broadcast_to(Tensor([8, 1, 6956407, 41],"bool"), list[8,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 6956407, 41],"bool"), list[8,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (6956407) at non-singleton dimension 2.  Target sizes: [8, 8, 41, 41].  Tensor sizes: [8, 1, 6956407, 41]
2025-03-11 18:28:40.731177 test begin: paddle.broadcast_to(Tensor([8, 1, 7, 40744668],"bool"), list[8,8,7,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 7, 40744668],"bool"), list[8,8,7,113,], ) 
 The expanded size of the tensor (113) must match the existing size (40744668) at non-singleton dimension 3.  Target sizes: [8, 8, 7, 113].  Tensor sizes: [8, 1, 7, 40744668]
2025-03-11 18:28:41.190687 test begin: paddle.broadcast_to(Tensor([8, 1, 7, 40744668],"bool"), list[8,8,7,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 7, 40744668],"bool"), list[8,8,7,121,], ) 
 The expanded size of the tensor (121) must match the existing size (40744668) at non-singleton dimension 3.  Target sizes: [8, 8, 7, 121].  Tensor sizes: [8, 1, 7, 40744668]
2025-03-11 18:28:41.698037 test begin: paddle.broadcast_to(Tensor([8, 1, 7, 40744668],"bool"), list[8,8,7,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 7, 40744668],"bool"), list[8,8,7,33,], ) 
 The expanded size of the tensor (33) must match the existing size (40744668) at non-singleton dimension 3.  Target sizes: [8, 8, 7, 33].  Tensor sizes: [8, 1, 7, 40744668]
2025-03-11 18:28:42.267097 test begin: paddle.broadcast_to(Tensor([8, 1, 7, 40744668],"bool"), list[8,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 7, 40744668],"bool"), list[8,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (40744668) at non-singleton dimension 3.  Target sizes: [8, 8, 7, 7].  Tensor sizes: [8, 1, 7, 40744668]
2025-03-11 18:28:42.766347 test begin: paddle.broadcast_to(Tensor([8, 1, 70, 4074467],"bool"), list[8,8,70,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 70, 4074467],"bool"), list[8,8,70,113,], ) 
 The expanded size of the tensor (113) must match the existing size (4074467) at non-singleton dimension 3.  Target sizes: [8, 8, 70, 113].  Tensor sizes: [8, 1, 70, 4074467]
2025-03-11 18:28:43.262451 test begin: paddle.broadcast_to(Tensor([8, 1, 70, 4074467],"bool"), list[8,8,70,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 70, 4074467],"bool"), list[8,8,70,121,], ) 
 The expanded size of the tensor (121) must match the existing size (4074467) at non-singleton dimension 3.  Target sizes: [8, 8, 70, 121].  Tensor sizes: [8, 1, 70, 4074467]
2025-03-11 18:28:43.802142 test begin: paddle.broadcast_to(Tensor([8, 1, 70, 4074467],"bool"), list[8,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 70, 4074467],"bool"), list[8,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (4074467) at non-singleton dimension 3.  Target sizes: [8, 8, 70, 70].  Tensor sizes: [8, 1, 70, 4074467]
2025-03-11 18:28:44.337681 test begin: paddle.broadcast_to(Tensor([8, 1, 71, 4017080],"bool"), list[8,8,71,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 71, 4017080],"bool"), list[8,8,71,113,], ) 
 The expanded size of the tensor (113) must match the existing size (4017080) at non-singleton dimension 3.  Target sizes: [8, 8, 71, 113].  Tensor sizes: [8, 1, 71, 4017080]
2025-03-11 18:28:44.880890 test begin: paddle.broadcast_to(Tensor([8, 1, 71, 4017080],"bool"), list[8,8,71,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 71, 4017080],"bool"), list[8,8,71,121,], ) 
 The expanded size of the tensor (121) must match the existing size (4017080) at non-singleton dimension 3.  Target sizes: [8, 8, 71, 121].  Tensor sizes: [8, 1, 71, 4017080]
2025-03-11 18:28:45.409568 test begin: paddle.broadcast_to(Tensor([8, 1, 71, 4017080],"bool"), list[8,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 71, 4017080],"bool"), list[8,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (4017080) at non-singleton dimension 3.  Target sizes: [8, 8, 71, 71].  Tensor sizes: [8, 1, 71, 4017080]
2025-03-11 18:28:45.907381 test begin: paddle.broadcast_to(Tensor([8, 1, 71303169, 4],"bool"), list[8,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 71303169, 4],"bool"), list[8,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (71303169) at non-singleton dimension 2.  Target sizes: [8, 8, 4, 4].  Tensor sizes: [8, 1, 71303169, 4]
2025-03-11 18:28:46.396814 test begin: paddle.broadcast_to(Tensor([8, 1, 7130317, 40],"bool"), list[8,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 7130317, 40],"bool"), list[8,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (7130317) at non-singleton dimension 2.  Target sizes: [8, 8, 40, 40].  Tensor sizes: [8, 1, 7130317, 40]
2025-03-11 18:28:46.889657 test begin: paddle.broadcast_to(Tensor([8, 1, 72, 3961288],"bool"), list[8,8,72,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 72, 3961288],"bool"), list[8,8,72,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3961288) at non-singleton dimension 3.  Target sizes: [8, 8, 72, 113].  Tensor sizes: [8, 1, 72, 3961288]
2025-03-11 18:28:47.386113 test begin: paddle.broadcast_to(Tensor([8, 1, 72, 3961288],"bool"), list[8,8,72,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 72, 3961288],"bool"), list[8,8,72,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3961288) at non-singleton dimension 3.  Target sizes: [8, 8, 72, 121].  Tensor sizes: [8, 1, 72, 3961288]
2025-03-11 18:28:47.977546 test begin: paddle.broadcast_to(Tensor([8, 1, 72, 3961288],"bool"), list[8,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 72, 3961288],"bool"), list[8,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (3961288) at non-singleton dimension 3.  Target sizes: [8, 8, 72, 72].  Tensor sizes: [8, 1, 72, 3961288]
2025-03-11 18:28:48.505328 test begin: paddle.broadcast_to(Tensor([8, 1, 73, 3907023],"bool"), list[8,8,73,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 73, 3907023],"bool"), list[8,8,73,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3907023) at non-singleton dimension 3.  Target sizes: [8, 8, 73, 113].  Tensor sizes: [8, 1, 73, 3907023]
2025-03-11 18:28:48.861859 test begin: paddle.broadcast_to(Tensor([8, 1, 73, 3907023],"bool"), list[8,8,73,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 73, 3907023],"bool"), list[8,8,73,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3907023) at non-singleton dimension 3.  Target sizes: [8, 8, 73, 121].  Tensor sizes: [8, 1, 73, 3907023]
2025-03-11 18:28:49.472522 test begin: paddle.broadcast_to(Tensor([8, 1, 73, 3907023],"bool"), list[8,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 73, 3907023],"bool"), list[8,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (3907023) at non-singleton dimension 3.  Target sizes: [8, 8, 73, 73].  Tensor sizes: [8, 1, 73, 3907023]
2025-03-11 18:28:49.831307 test begin: paddle.broadcast_to(Tensor([8, 1, 7313146, 39],"bool"), list[8,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 7313146, 39],"bool"), list[8,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (7313146) at non-singleton dimension 2.  Target sizes: [8, 8, 39, 39].  Tensor sizes: [8, 1, 7313146, 39]
2025-03-11 18:28:50.328235 test begin: paddle.broadcast_to(Tensor([8, 1, 74, 3854226],"bool"), list[8,8,74,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 74, 3854226],"bool"), list[8,8,74,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3854226) at non-singleton dimension 3.  Target sizes: [8, 8, 74, 113].  Tensor sizes: [8, 1, 74, 3854226]
2025-03-11 18:28:50.925471 test begin: paddle.broadcast_to(Tensor([8, 1, 74, 3854226],"bool"), list[8,8,74,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 74, 3854226],"bool"), list[8,8,74,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3854226) at non-singleton dimension 3.  Target sizes: [8, 8, 74, 121].  Tensor sizes: [8, 1, 74, 3854226]
2025-03-11 18:28:51.359264 test begin: paddle.broadcast_to(Tensor([8, 1, 74, 3854226],"bool"), list[8,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 74, 3854226],"bool"), list[8,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (3854226) at non-singleton dimension 3.  Target sizes: [8, 8, 74, 74].  Tensor sizes: [8, 1, 74, 3854226]
2025-03-11 18:28:51.866443 test begin: paddle.broadcast_to(Tensor([8, 1, 75, 3802836],"bool"), list[8,8,75,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 75, 3802836],"bool"), list[8,8,75,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3802836) at non-singleton dimension 3.  Target sizes: [8, 8, 75, 113].  Tensor sizes: [8, 1, 75, 3802836]
2025-03-11 18:28:52.364623 test begin: paddle.broadcast_to(Tensor([8, 1, 75, 3802836],"bool"), list[8,8,75,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 75, 3802836],"bool"), list[8,8,75,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3802836) at non-singleton dimension 3.  Target sizes: [8, 8, 75, 121].  Tensor sizes: [8, 1, 75, 3802836]
2025-03-11 18:28:52.905953 test begin: paddle.broadcast_to(Tensor([8, 1, 75, 3802836],"bool"), list[8,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 75, 3802836],"bool"), list[8,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (3802836) at non-singleton dimension 3.  Target sizes: [8, 8, 75, 75].  Tensor sizes: [8, 1, 75, 3802836]
2025-03-11 18:28:53.447743 test begin: paddle.broadcast_to(Tensor([8, 1, 7505597, 38],"bool"), list[8,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 7505597, 38],"bool"), list[8,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (7505597) at non-singleton dimension 2.  Target sizes: [8, 8, 38, 38].  Tensor sizes: [8, 1, 7505597, 38]
2025-03-11 18:28:53.953071 test begin: paddle.broadcast_to(Tensor([8, 1, 76, 3752799],"bool"), list[8,8,76,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 76, 3752799],"bool"), list[8,8,76,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3752799) at non-singleton dimension 3.  Target sizes: [8, 8, 76, 113].  Tensor sizes: [8, 1, 76, 3752799]
2025-03-11 18:28:54.460394 test begin: paddle.broadcast_to(Tensor([8, 1, 76, 3752799],"bool"), list[8,8,76,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 76, 3752799],"bool"), list[8,8,76,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3752799) at non-singleton dimension 3.  Target sizes: [8, 8, 76, 121].  Tensor sizes: [8, 1, 76, 3752799]
2025-03-11 18:28:54.965511 test begin: paddle.broadcast_to(Tensor([8, 1, 76, 3752799],"bool"), list[8,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 76, 3752799],"bool"), list[8,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (3752799) at non-singleton dimension 3.  Target sizes: [8, 8, 76, 76].  Tensor sizes: [8, 1, 76, 3752799]
2025-03-11 18:28:55.501538 test begin: paddle.broadcast_to(Tensor([8, 1, 77, 3704061],"bool"), list[8,8,77,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 77, 3704061],"bool"), list[8,8,77,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3704061) at non-singleton dimension 3.  Target sizes: [8, 8, 77, 113].  Tensor sizes: [8, 1, 77, 3704061]
2025-03-11 18:28:56.078859 test begin: paddle.broadcast_to(Tensor([8, 1, 77, 3704061],"bool"), list[8,8,77,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 77, 3704061],"bool"), list[8,8,77,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3704061) at non-singleton dimension 3.  Target sizes: [8, 8, 77, 121].  Tensor sizes: [8, 1, 77, 3704061]
2025-03-11 18:28:56.593340 test begin: paddle.broadcast_to(Tensor([8, 1, 77, 3704061],"bool"), list[8,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 77, 3704061],"bool"), list[8,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (3704061) at non-singleton dimension 3.  Target sizes: [8, 8, 77, 77].  Tensor sizes: [8, 1, 77, 3704061]
2025-03-11 18:28:57.105048 test begin: paddle.broadcast_to(Tensor([8, 1, 7708451, 37],"bool"), list[8,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 7708451, 37],"bool"), list[8,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (7708451) at non-singleton dimension 2.  Target sizes: [8, 8, 37, 37].  Tensor sizes: [8, 1, 7708451, 37]
2025-03-11 18:28:57.649869 test begin: paddle.broadcast_to(Tensor([8, 1, 78, 3656573],"bool"), list[8,8,78,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 78, 3656573],"bool"), list[8,8,78,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3656573) at non-singleton dimension 3.  Target sizes: [8, 8, 78, 113].  Tensor sizes: [8, 1, 78, 3656573]
2025-03-11 18:28:58.198456 test begin: paddle.broadcast_to(Tensor([8, 1, 78, 3656573],"bool"), list[8,8,78,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 78, 3656573],"bool"), list[8,8,78,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3656573) at non-singleton dimension 3.  Target sizes: [8, 8, 78, 121].  Tensor sizes: [8, 1, 78, 3656573]
2025-03-11 18:28:58.698441 test begin: paddle.broadcast_to(Tensor([8, 1, 78, 3656573],"bool"), list[8,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 78, 3656573],"bool"), list[8,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (3656573) at non-singleton dimension 3.  Target sizes: [8, 8, 78, 78].  Tensor sizes: [8, 1, 78, 3656573]
2025-03-11 18:28:59.256126 test begin: paddle.broadcast_to(Tensor([8, 1, 79, 3610287],"bool"), list[8,8,79,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 79, 3610287],"bool"), list[8,8,79,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3610287) at non-singleton dimension 3.  Target sizes: [8, 8, 79, 113].  Tensor sizes: [8, 1, 79, 3610287]
2025-03-11 18:28:59.770506 test begin: paddle.broadcast_to(Tensor([8, 1, 79, 3610287],"bool"), list[8,8,79,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 79, 3610287],"bool"), list[8,8,79,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3610287) at non-singleton dimension 3.  Target sizes: [8, 8, 79, 121].  Tensor sizes: [8, 1, 79, 3610287]
2025-03-11 18:29:00.308574 test begin: paddle.broadcast_to(Tensor([8, 1, 79, 3610287],"bool"), list[8,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 79, 3610287],"bool"), list[8,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (3610287) at non-singleton dimension 3.  Target sizes: [8, 8, 79, 79].  Tensor sizes: [8, 1, 79, 3610287]
2025-03-11 18:29:00.851752 test begin: paddle.broadcast_to(Tensor([8, 1, 7922575, 36],"bool"), list[8,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 7922575, 36],"bool"), list[8,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (7922575) at non-singleton dimension 2.  Target sizes: [8, 8, 36, 36].  Tensor sizes: [8, 1, 7922575, 36]
2025-03-11 18:29:01.398932 test begin: paddle.broadcast_to(Tensor([8, 1, 8, 35651585],"bool"), list[8,8,8,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8, 35651585],"bool"), list[8,8,8,113,], ) 
 The expanded size of the tensor (113) must match the existing size (35651585) at non-singleton dimension 3.  Target sizes: [8, 8, 8, 113].  Tensor sizes: [8, 1, 8, 35651585]
2025-03-11 18:29:01.894590 test begin: paddle.broadcast_to(Tensor([8, 1, 8, 35651585],"bool"), list[8,8,8,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8, 35651585],"bool"), list[8,8,8,121,], ) 
 The expanded size of the tensor (121) must match the existing size (35651585) at non-singleton dimension 3.  Target sizes: [8, 8, 8, 121].  Tensor sizes: [8, 1, 8, 35651585]
2025-03-11 18:29:02.493583 test begin: paddle.broadcast_to(Tensor([8, 1, 8, 35651585],"bool"), list[8,8,8,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8, 35651585],"bool"), list[8,8,8,33,], ) 
 The expanded size of the tensor (33) must match the existing size (35651585) at non-singleton dimension 3.  Target sizes: [8, 8, 8, 33].  Tensor sizes: [8, 1, 8, 35651585]
2025-03-11 18:29:02.850058 test begin: paddle.broadcast_to(Tensor([8, 1, 8, 35651585],"bool"), list[8,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8, 35651585],"bool"), list[8,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (35651585) at non-singleton dimension 3.  Target sizes: [8, 8, 8, 8].  Tensor sizes: [8, 1, 8, 35651585]
2025-03-11 18:29:03.356724 test begin: paddle.broadcast_to(Tensor([8, 1, 80, 3565159],"bool"), list[8,8,80,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 80, 3565159],"bool"), list[8,8,80,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3565159) at non-singleton dimension 3.  Target sizes: [8, 8, 80, 113].  Tensor sizes: [8, 1, 80, 3565159]
2025-03-11 18:29:03.957646 test begin: paddle.broadcast_to(Tensor([8, 1, 80, 3565159],"bool"), list[8,8,80,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 80, 3565159],"bool"), list[8,8,80,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3565159) at non-singleton dimension 3.  Target sizes: [8, 8, 80, 121].  Tensor sizes: [8, 1, 80, 3565159]
2025-03-11 18:29:04.345298 test begin: paddle.broadcast_to(Tensor([8, 1, 80, 3565159],"bool"), list[8,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 80, 3565159],"bool"), list[8,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (3565159) at non-singleton dimension 3.  Target sizes: [8, 8, 80, 80].  Tensor sizes: [8, 1, 80, 3565159]
2025-03-11 18:29:04.882055 test begin: paddle.broadcast_to(Tensor([8, 1, 81, 3521145],"bool"), list[8,8,81,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 81, 3521145],"bool"), list[8,8,81,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3521145) at non-singleton dimension 3.  Target sizes: [8, 8, 81, 113].  Tensor sizes: [8, 1, 81, 3521145]
2025-03-11 18:29:05.497801 test begin: paddle.broadcast_to(Tensor([8, 1, 81, 3521145],"bool"), list[8,8,81,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 81, 3521145],"bool"), list[8,8,81,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3521145) at non-singleton dimension 3.  Target sizes: [8, 8, 81, 121].  Tensor sizes: [8, 1, 81, 3521145]
2025-03-11 18:29:06.043871 test begin: paddle.broadcast_to(Tensor([8, 1, 81, 3521145],"bool"), list[8,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 81, 3521145],"bool"), list[8,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (3521145) at non-singleton dimension 3.  Target sizes: [8, 8, 81, 81].  Tensor sizes: [8, 1, 81, 3521145]
2025-03-11 18:29:06.580008 test begin: paddle.broadcast_to(Tensor([8, 1, 8148934, 35],"bool"), list[8,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8148934, 35],"bool"), list[8,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (8148934) at non-singleton dimension 2.  Target sizes: [8, 8, 35, 35].  Tensor sizes: [8, 1, 8148934, 35]
2025-03-11 18:29:07.117097 test begin: paddle.broadcast_to(Tensor([8, 1, 82, 3478204],"bool"), list[8,8,82,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 82, 3478204],"bool"), list[8,8,82,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3478204) at non-singleton dimension 3.  Target sizes: [8, 8, 82, 113].  Tensor sizes: [8, 1, 82, 3478204]
2025-03-11 18:29:07.606047 test begin: paddle.broadcast_to(Tensor([8, 1, 82, 3478204],"bool"), list[8,8,82,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 82, 3478204],"bool"), list[8,8,82,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3478204) at non-singleton dimension 3.  Target sizes: [8, 8, 82, 121].  Tensor sizes: [8, 1, 82, 3478204]
2025-03-11 18:29:08.149638 test begin: paddle.broadcast_to(Tensor([8, 1, 82, 3478204],"bool"), list[8,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 82, 3478204],"bool"), list[8,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (3478204) at non-singleton dimension 3.  Target sizes: [8, 8, 82, 82].  Tensor sizes: [8, 1, 82, 3478204]
2025-03-11 18:29:08.642210 test begin: paddle.broadcast_to(Tensor([8, 1, 83, 3436298],"bool"), list[8,8,83,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 83, 3436298],"bool"), list[8,8,83,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3436298) at non-singleton dimension 3.  Target sizes: [8, 8, 83, 113].  Tensor sizes: [8, 1, 83, 3436298]
2025-03-11 18:29:09.180768 test begin: paddle.broadcast_to(Tensor([8, 1, 83, 3436298],"bool"), list[8,8,83,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 83, 3436298],"bool"), list[8,8,83,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3436298) at non-singleton dimension 3.  Target sizes: [8, 8, 83, 121].  Tensor sizes: [8, 1, 83, 3436298]
2025-03-11 18:29:09.733078 test begin: paddle.broadcast_to(Tensor([8, 1, 83, 3436298],"bool"), list[8,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 83, 3436298],"bool"), list[8,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (3436298) at non-singleton dimension 3.  Target sizes: [8, 8, 83, 83].  Tensor sizes: [8, 1, 83, 3436298]
2025-03-11 18:29:10.230976 test begin: paddle.broadcast_to(Tensor([8, 1, 8388609, 34],"bool"), list[8,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8388609, 34],"bool"), list[8,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (8388609) at non-singleton dimension 2.  Target sizes: [8, 8, 34, 34].  Tensor sizes: [8, 1, 8388609, 34]
2025-03-11 18:29:10.775784 test begin: paddle.broadcast_to(Tensor([8, 1, 84, 3395389],"bool"), list[8,8,84,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 84, 3395389],"bool"), list[8,8,84,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3395389) at non-singleton dimension 3.  Target sizes: [8, 8, 84, 113].  Tensor sizes: [8, 1, 84, 3395389]
2025-03-11 18:29:11.372568 test begin: paddle.broadcast_to(Tensor([8, 1, 84, 3395389],"bool"), list[8,8,84,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 84, 3395389],"bool"), list[8,8,84,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3395389) at non-singleton dimension 3.  Target sizes: [8, 8, 84, 121].  Tensor sizes: [8, 1, 84, 3395389]
2025-03-11 18:29:11.753098 test begin: paddle.broadcast_to(Tensor([8, 1, 84, 3395389],"bool"), list[8,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 84, 3395389],"bool"), list[8,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (3395389) at non-singleton dimension 3.  Target sizes: [8, 8, 84, 84].  Tensor sizes: [8, 1, 84, 3395389]
2025-03-11 18:29:12.347368 test begin: paddle.broadcast_to(Tensor([8, 1, 85, 3355444],"bool"), list[8,8,85,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 85, 3355444],"bool"), list[8,8,85,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3355444) at non-singleton dimension 3.  Target sizes: [8, 8, 85, 113].  Tensor sizes: [8, 1, 85, 3355444]
2025-03-11 18:29:12.702888 test begin: paddle.broadcast_to(Tensor([8, 1, 85, 3355444],"bool"), list[8,8,85,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 85, 3355444],"bool"), list[8,8,85,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3355444) at non-singleton dimension 3.  Target sizes: [8, 8, 85, 121].  Tensor sizes: [8, 1, 85, 3355444]
2025-03-11 18:29:13.198579 test begin: paddle.broadcast_to(Tensor([8, 1, 85, 3355444],"bool"), list[8,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 85, 3355444],"bool"), list[8,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (3355444) at non-singleton dimension 3.  Target sizes: [8, 8, 85, 85].  Tensor sizes: [8, 1, 85, 3355444]
2025-03-11 18:29:13.735979 test begin: paddle.broadcast_to(Tensor([8, 1, 86, 3316427],"bool"), list[8,8,86,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 86, 3316427],"bool"), list[8,8,86,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3316427) at non-singleton dimension 3.  Target sizes: [8, 8, 86, 113].  Tensor sizes: [8, 1, 86, 3316427]
2025-03-11 18:29:14.261467 test begin: paddle.broadcast_to(Tensor([8, 1, 86, 3316427],"bool"), list[8,8,86,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 86, 3316427],"bool"), list[8,8,86,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3316427) at non-singleton dimension 3.  Target sizes: [8, 8, 86, 121].  Tensor sizes: [8, 1, 86, 3316427]
2025-03-11 18:29:14.785612 test begin: paddle.broadcast_to(Tensor([8, 1, 86, 3316427],"bool"), list[8,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 86, 3316427],"bool"), list[8,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (3316427) at non-singleton dimension 3.  Target sizes: [8, 8, 86, 86].  Tensor sizes: [8, 1, 86, 3316427]
2025-03-11 18:29:15.280969 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,1,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,1,33,], ) 
 The expanded size of the tensor (1) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 1, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:15.820277 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,10,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,10,33,], ) 
 The expanded size of the tensor (10) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 10, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:16.314180 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,11,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,11,33,], ) 
 The expanded size of the tensor (11) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 11, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:16.854839 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,12,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,12,33,], ) 
 The expanded size of the tensor (12) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 12, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:17.389058 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,13,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,13,33,], ) 
 The expanded size of the tensor (13) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 13, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:17.947046 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,14,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,14,33,], ) 
 The expanded size of the tensor (14) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 14, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:18.488112 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,15,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,15,33,], ) 
 The expanded size of the tensor (15) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 15, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:18.977289 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,16,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,16,33,], ) 
 The expanded size of the tensor (16) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 16, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:19.515705 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,17,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,17,33,], ) 
 The expanded size of the tensor (17) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 17, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:20.057113 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,18,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,18,33,], ) 
 The expanded size of the tensor (18) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 18, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:20.654732 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,19,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,19,33,], ) 
 The expanded size of the tensor (19) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 19, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:21.025502 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,2,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,2,33,], ) 
 The expanded size of the tensor (2) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 2, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:21.572494 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,20,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,20,33,], ) 
 The expanded size of the tensor (20) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 20, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:22.123931 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,21,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,21,33,], ) 
 The expanded size of the tensor (21) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 21, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:22.664912 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,22,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,22,33,], ) 
 The expanded size of the tensor (22) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 22, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:23.210337 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,23,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,23,33,], ) 
 The expanded size of the tensor (23) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 23, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:23.711911 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,24,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,24,33,], ) 
 The expanded size of the tensor (24) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 24, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:24.253608 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,25,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,25,33,], ) 
 The expanded size of the tensor (25) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 25, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:24.790328 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,26,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,26,33,], ) 
 The expanded size of the tensor (26) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 26, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:25.332360 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,27,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,27,33,], ) 
 The expanded size of the tensor (27) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 27, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:25.875945 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,28,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,28,33,], ) 
 The expanded size of the tensor (28) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 28, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:26.369299 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,29,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,29,33,], ) 
 The expanded size of the tensor (29) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 29, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:26.962185 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,3,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,3,33,], ) 
 The expanded size of the tensor (3) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 3, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:27.405191 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,30,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,30,33,], ) 
 The expanded size of the tensor (30) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 30, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:27.902342 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,31,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,31,33,], ) 
 The expanded size of the tensor (31) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 31, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:28.478950 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,32,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,32,33,], ) 
 The expanded size of the tensor (32) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 32, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:28.979660 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 33, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:29.477750 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,34,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,34,33,], ) 
 The expanded size of the tensor (34) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 34, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:30.050712 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,35,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,35,33,], ) 
 The expanded size of the tensor (35) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 35, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:30.656268 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,36,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,36,33,], ) 
 The expanded size of the tensor (36) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 36, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:31.127186 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,37,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,37,33,], ) 
 The expanded size of the tensor (37) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 37, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:31.731930 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,38,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,38,33,], ) 
 The expanded size of the tensor (38) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 38, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:32.190118 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,39,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,39,33,], ) 
 The expanded size of the tensor (39) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 39, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:32.769037 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,4,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,4,33,], ) 
 The expanded size of the tensor (4) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 4, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:33.341695 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,40,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,40,33,], ) 
 The expanded size of the tensor (40) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 40, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:33.902932 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,41,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,41,33,], ) 
 The expanded size of the tensor (41) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 41, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:34.531183 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,42,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,42,33,], ) 
 The expanded size of the tensor (42) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 42, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:35.035177 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,43,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,43,33,], ) 
 The expanded size of the tensor (43) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 43, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:35.541067 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,44,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,44,33,], ) 
 The expanded size of the tensor (44) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 44, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:36.131749 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,45,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,45,33,], ) 
 The expanded size of the tensor (45) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 45, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:36.646524 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,46,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,46,33,], ) 
 The expanded size of the tensor (46) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 46, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:37.173421 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,47,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,47,33,], ) 
 The expanded size of the tensor (47) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 47, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:37.794586 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,48,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,48,33,], ) 
 The expanded size of the tensor (48) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 48, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:38.153232 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,49,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,49,33,], ) 
 The expanded size of the tensor (49) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 49, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:38.672647 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,5,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,5,33,], ) 
 The expanded size of the tensor (5) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 5, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:39.176617 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,50,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,50,33,], ) 
 The expanded size of the tensor (50) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 50, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:39.782597 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,51,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,51,33,], ) 
 The expanded size of the tensor (51) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 51, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:40.204102 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,52,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,52,33,], ) 
 The expanded size of the tensor (52) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 52, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:40.801083 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,53,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,53,33,], ) 
 The expanded size of the tensor (53) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 53, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:41.224203 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,54,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,54,33,], ) 
 The expanded size of the tensor (54) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 54, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:41.761874 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,55,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,55,33,], ) 
 The expanded size of the tensor (55) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 55, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:42.261181 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,56,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,56,33,], ) 
 The expanded size of the tensor (56) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 56, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:42.775383 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,57,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,57,33,], ) 
 The expanded size of the tensor (57) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 57, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:43.291393 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,6,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,6,33,], ) 
 The expanded size of the tensor (6) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 6, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:43.794698 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,7,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,7,33,], ) 
 The expanded size of the tensor (7) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 7, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:44.335174 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,8,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,8,33,], ) 
 The expanded size of the tensor (8) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 8, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:44.867253 test begin: paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,9,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8642809, 33],"bool"), list[8,8,9,33,], ) 
 The expanded size of the tensor (9) must match the existing size (8642809) at non-singleton dimension 2.  Target sizes: [8, 8, 9, 33].  Tensor sizes: [8, 1, 8642809, 33]
2025-03-11 18:29:45.458576 test begin: paddle.broadcast_to(Tensor([8, 1, 87, 3278307],"bool"), list[8,8,87,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 87, 3278307],"bool"), list[8,8,87,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3278307) at non-singleton dimension 3.  Target sizes: [8, 8, 87, 113].  Tensor sizes: [8, 1, 87, 3278307]
2025-03-11 18:29:45.814427 test begin: paddle.broadcast_to(Tensor([8, 1, 87, 3278307],"bool"), list[8,8,87,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 87, 3278307],"bool"), list[8,8,87,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3278307) at non-singleton dimension 3.  Target sizes: [8, 8, 87, 121].  Tensor sizes: [8, 1, 87, 3278307]
2025-03-11 18:29:46.347686 test begin: paddle.broadcast_to(Tensor([8, 1, 87, 3278307],"bool"), list[8,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 87, 3278307],"bool"), list[8,8,87,87,], ) 
 The expanded size of the tensor (87) must match the existing size (3278307) at non-singleton dimension 3.  Target sizes: [8, 8, 87, 87].  Tensor sizes: [8, 1, 87, 3278307]
2025-03-11 18:29:46.849146 test begin: paddle.broadcast_to(Tensor([8, 1, 88, 3241054],"bool"), list[8,8,88,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 88, 3241054],"bool"), list[8,8,88,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3241054) at non-singleton dimension 3.  Target sizes: [8, 8, 88, 113].  Tensor sizes: [8, 1, 88, 3241054]
2025-03-11 18:29:47.397303 test begin: paddle.broadcast_to(Tensor([8, 1, 88, 3241054],"bool"), list[8,8,88,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 88, 3241054],"bool"), list[8,8,88,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3241054) at non-singleton dimension 3.  Target sizes: [8, 8, 88, 121].  Tensor sizes: [8, 1, 88, 3241054]
2025-03-11 18:29:47.934002 test begin: paddle.broadcast_to(Tensor([8, 1, 88, 3241054],"bool"), list[8,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 88, 3241054],"bool"), list[8,8,88,88,], ) 
 The expanded size of the tensor (88) must match the existing size (3241054) at non-singleton dimension 3.  Target sizes: [8, 8, 88, 88].  Tensor sizes: [8, 1, 88, 3241054]
2025-03-11 18:29:48.473171 test begin: paddle.broadcast_to(Tensor([8, 1, 89, 3204637],"bool"), list[8,8,89,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 89, 3204637],"bool"), list[8,8,89,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3204637) at non-singleton dimension 3.  Target sizes: [8, 8, 89, 113].  Tensor sizes: [8, 1, 89, 3204637]
2025-03-11 18:29:48.964781 test begin: paddle.broadcast_to(Tensor([8, 1, 89, 3204637],"bool"), list[8,8,89,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 89, 3204637],"bool"), list[8,8,89,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3204637) at non-singleton dimension 3.  Target sizes: [8, 8, 89, 121].  Tensor sizes: [8, 1, 89, 3204637]
2025-03-11 18:29:49.496105 test begin: paddle.broadcast_to(Tensor([8, 1, 89, 3204637],"bool"), list[8,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 89, 3204637],"bool"), list[8,8,89,89,], ) 
 The expanded size of the tensor (89) must match the existing size (3204637) at non-singleton dimension 3.  Target sizes: [8, 8, 89, 89].  Tensor sizes: [8, 1, 89, 3204637]
2025-03-11 18:29:50.044576 test begin: paddle.broadcast_to(Tensor([8, 1, 8912897, 32],"bool"), list[8,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 8912897, 32],"bool"), list[8,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (8912897) at non-singleton dimension 2.  Target sizes: [8, 8, 32, 32].  Tensor sizes: [8, 1, 8912897, 32]
2025-03-11 18:29:50.536210 test begin: paddle.broadcast_to(Tensor([8, 1, 9, 31690297],"bool"), list[8,8,9,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 9, 31690297],"bool"), list[8,8,9,113,], ) 
 The expanded size of the tensor (113) must match the existing size (31690297) at non-singleton dimension 3.  Target sizes: [8, 8, 9, 113].  Tensor sizes: [8, 1, 9, 31690297]
2025-03-11 18:29:51.073404 test begin: paddle.broadcast_to(Tensor([8, 1, 9, 31690297],"bool"), list[8,8,9,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 9, 31690297],"bool"), list[8,8,9,121,], ) 
 The expanded size of the tensor (121) must match the existing size (31690297) at non-singleton dimension 3.  Target sizes: [8, 8, 9, 121].  Tensor sizes: [8, 1, 9, 31690297]
2025-03-11 18:29:51.683586 test begin: paddle.broadcast_to(Tensor([8, 1, 9, 31690297],"bool"), list[8,8,9,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 9, 31690297],"bool"), list[8,8,9,33,], ) 
 The expanded size of the tensor (33) must match the existing size (31690297) at non-singleton dimension 3.  Target sizes: [8, 8, 9, 33].  Tensor sizes: [8, 1, 9, 31690297]
2025-03-11 18:29:52.044955 test begin: paddle.broadcast_to(Tensor([8, 1, 9, 31690297],"bool"), list[8,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 9, 31690297],"bool"), list[8,8,9,9,], ) 
 The expanded size of the tensor (9) must match the existing size (31690297) at non-singleton dimension 3.  Target sizes: [8, 8, 9, 9].  Tensor sizes: [8, 1, 9, 31690297]
2025-03-11 18:29:52.637695 test begin: paddle.broadcast_to(Tensor([8, 1, 90, 3169030],"bool"), list[8,8,90,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 90, 3169030],"bool"), list[8,8,90,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3169030) at non-singleton dimension 3.  Target sizes: [8, 8, 90, 113].  Tensor sizes: [8, 1, 90, 3169030]
2025-03-11 18:29:53.008353 test begin: paddle.broadcast_to(Tensor([8, 1, 90, 3169030],"bool"), list[8,8,90,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 90, 3169030],"bool"), list[8,8,90,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3169030) at non-singleton dimension 3.  Target sizes: [8, 8, 90, 121].  Tensor sizes: [8, 1, 90, 3169030]
2025-03-11 18:29:53.507506 test begin: paddle.broadcast_to(Tensor([8, 1, 90, 3169030],"bool"), list[8,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 90, 3169030],"bool"), list[8,8,90,90,], ) 
 The expanded size of the tensor (90) must match the existing size (3169030) at non-singleton dimension 3.  Target sizes: [8, 8, 90, 90].  Tensor sizes: [8, 1, 90, 3169030]
2025-03-11 18:29:54.005334 test begin: paddle.broadcast_to(Tensor([8, 1, 91, 3134206],"bool"), list[8,8,91,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 91, 3134206],"bool"), list[8,8,91,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3134206) at non-singleton dimension 3.  Target sizes: [8, 8, 91, 113].  Tensor sizes: [8, 1, 91, 3134206]
2025-03-11 18:29:54.508078 test begin: paddle.broadcast_to(Tensor([8, 1, 91, 3134206],"bool"), list[8,8,91,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 91, 3134206],"bool"), list[8,8,91,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3134206) at non-singleton dimension 3.  Target sizes: [8, 8, 91, 121].  Tensor sizes: [8, 1, 91, 3134206]
2025-03-11 18:29:55.077017 test begin: paddle.broadcast_to(Tensor([8, 1, 91, 3134206],"bool"), list[8,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 91, 3134206],"bool"), list[8,8,91,91,], ) 
 The expanded size of the tensor (91) must match the existing size (3134206) at non-singleton dimension 3.  Target sizes: [8, 8, 91, 91].  Tensor sizes: [8, 1, 91, 3134206]
2025-03-11 18:29:55.641425 test begin: paddle.broadcast_to(Tensor([8, 1, 92, 3100138],"bool"), list[8,8,92,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 92, 3100138],"bool"), list[8,8,92,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3100138) at non-singleton dimension 3.  Target sizes: [8, 8, 92, 113].  Tensor sizes: [8, 1, 92, 3100138]
2025-03-11 18:29:56.139009 test begin: paddle.broadcast_to(Tensor([8, 1, 92, 3100138],"bool"), list[8,8,92,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 92, 3100138],"bool"), list[8,8,92,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3100138) at non-singleton dimension 3.  Target sizes: [8, 8, 92, 121].  Tensor sizes: [8, 1, 92, 3100138]
2025-03-11 18:29:56.760486 test begin: paddle.broadcast_to(Tensor([8, 1, 92, 3100138],"bool"), list[8,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 92, 3100138],"bool"), list[8,8,92,92,], ) 
 The expanded size of the tensor (92) must match the existing size (3100138) at non-singleton dimension 3.  Target sizes: [8, 8, 92, 92].  Tensor sizes: [8, 1, 92, 3100138]
2025-03-11 18:29:57.122281 test begin: paddle.broadcast_to(Tensor([8, 1, 9200409, 31],"bool"), list[8,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 9200409, 31],"bool"), list[8,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (9200409) at non-singleton dimension 2.  Target sizes: [8, 8, 31, 31].  Tensor sizes: [8, 1, 9200409, 31]
2025-03-11 18:29:57.740610 test begin: paddle.broadcast_to(Tensor([8, 1, 93, 3066803],"bool"), list[8,8,93,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 93, 3066803],"bool"), list[8,8,93,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3066803) at non-singleton dimension 3.  Target sizes: [8, 8, 93, 113].  Tensor sizes: [8, 1, 93, 3066803]
2025-03-11 18:29:58.103734 test begin: paddle.broadcast_to(Tensor([8, 1, 93, 3066803],"bool"), list[8,8,93,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 93, 3066803],"bool"), list[8,8,93,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3066803) at non-singleton dimension 3.  Target sizes: [8, 8, 93, 121].  Tensor sizes: [8, 1, 93, 3066803]
2025-03-11 18:29:58.597448 test begin: paddle.broadcast_to(Tensor([8, 1, 93, 3066803],"bool"), list[8,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 93, 3066803],"bool"), list[8,8,93,93,], ) 
 The expanded size of the tensor (93) must match the existing size (3066803) at non-singleton dimension 3.  Target sizes: [8, 8, 93, 93].  Tensor sizes: [8, 1, 93, 3066803]
2025-03-11 18:29:59.204063 test begin: paddle.broadcast_to(Tensor([8, 1, 94, 3034178],"bool"), list[8,8,94,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 94, 3034178],"bool"), list[8,8,94,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3034178) at non-singleton dimension 3.  Target sizes: [8, 8, 94, 113].  Tensor sizes: [8, 1, 94, 3034178]
2025-03-11 18:29:59.700162 test begin: paddle.broadcast_to(Tensor([8, 1, 94, 3034178],"bool"), list[8,8,94,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 94, 3034178],"bool"), list[8,8,94,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3034178) at non-singleton dimension 3.  Target sizes: [8, 8, 94, 121].  Tensor sizes: [8, 1, 94, 3034178]
2025-03-11 18:30:00.286840 test begin: paddle.broadcast_to(Tensor([8, 1, 94, 3034178],"bool"), list[8,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 94, 3034178],"bool"), list[8,8,94,94,], ) 
 The expanded size of the tensor (94) must match the existing size (3034178) at non-singleton dimension 3.  Target sizes: [8, 8, 94, 94].  Tensor sizes: [8, 1, 94, 3034178]
2025-03-11 18:30:00.775144 test begin: paddle.broadcast_to(Tensor([8, 1, 95, 3002239],"bool"), list[8,8,95,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 95, 3002239],"bool"), list[8,8,95,113,], ) 
 The expanded size of the tensor (113) must match the existing size (3002239) at non-singleton dimension 3.  Target sizes: [8, 8, 95, 113].  Tensor sizes: [8, 1, 95, 3002239]
2025-03-11 18:30:01.313708 test begin: paddle.broadcast_to(Tensor([8, 1, 95, 3002239],"bool"), list[8,8,95,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 95, 3002239],"bool"), list[8,8,95,121,], ) 
 The expanded size of the tensor (121) must match the existing size (3002239) at non-singleton dimension 3.  Target sizes: [8, 8, 95, 121].  Tensor sizes: [8, 1, 95, 3002239]
2025-03-11 18:30:01.851875 test begin: paddle.broadcast_to(Tensor([8, 1, 95, 3002239],"bool"), list[8,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 95, 3002239],"bool"), list[8,8,95,95,], ) 
 The expanded size of the tensor (95) must match the existing size (3002239) at non-singleton dimension 3.  Target sizes: [8, 8, 95, 95].  Tensor sizes: [8, 1, 95, 3002239]
2025-03-11 18:30:02.376068 test begin: paddle.broadcast_to(Tensor([8, 1, 95070891, 3],"bool"), list[8,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 95070891, 3],"bool"), list[8,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (95070891) at non-singleton dimension 2.  Target sizes: [8, 8, 3, 3].  Tensor sizes: [8, 1, 95070891, 3]
2025-03-11 18:30:02.895622 test begin: paddle.broadcast_to(Tensor([8, 1, 9507090, 30],"bool"), list[8,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 9507090, 30],"bool"), list[8,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (9507090) at non-singleton dimension 2.  Target sizes: [8, 8, 30, 30].  Tensor sizes: [8, 1, 9507090, 30]
2025-03-11 18:30:03.388715 test begin: paddle.broadcast_to(Tensor([8, 1, 96, 2970966],"bool"), list[8,8,96,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 96, 2970966],"bool"), list[8,8,96,113,], ) 
 The expanded size of the tensor (113) must match the existing size (2970966) at non-singleton dimension 3.  Target sizes: [8, 8, 96, 113].  Tensor sizes: [8, 1, 96, 2970966]
2025-03-11 18:30:03.880992 test begin: paddle.broadcast_to(Tensor([8, 1, 96, 2970966],"bool"), list[8,8,96,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 96, 2970966],"bool"), list[8,8,96,121,], ) 
 The expanded size of the tensor (121) must match the existing size (2970966) at non-singleton dimension 3.  Target sizes: [8, 8, 96, 121].  Tensor sizes: [8, 1, 96, 2970966]
2025-03-11 18:30:04.369472 test begin: paddle.broadcast_to(Tensor([8, 1, 96, 2970966],"bool"), list[8,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 96, 2970966],"bool"), list[8,8,96,96,], ) 
 The expanded size of the tensor (96) must match the existing size (2970966) at non-singleton dimension 3.  Target sizes: [8, 8, 96, 96].  Tensor sizes: [8, 1, 96, 2970966]
2025-03-11 18:30:04.913393 test begin: paddle.broadcast_to(Tensor([8, 1, 97, 2940337],"bool"), list[8,8,97,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 97, 2940337],"bool"), list[8,8,97,113,], ) 
 The expanded size of the tensor (113) must match the existing size (2940337) at non-singleton dimension 3.  Target sizes: [8, 8, 97, 113].  Tensor sizes: [8, 1, 97, 2940337]
2025-03-11 18:30:05.411081 test begin: paddle.broadcast_to(Tensor([8, 1, 97, 2940337],"bool"), list[8,8,97,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 97, 2940337],"bool"), list[8,8,97,121,], ) 
 The expanded size of the tensor (121) must match the existing size (2940337) at non-singleton dimension 3.  Target sizes: [8, 8, 97, 121].  Tensor sizes: [8, 1, 97, 2940337]
2025-03-11 18:30:05.911521 test begin: paddle.broadcast_to(Tensor([8, 1, 97, 2940337],"bool"), list[8,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 97, 2940337],"bool"), list[8,8,97,97,], ) 
 The expanded size of the tensor (97) must match the existing size (2940337) at non-singleton dimension 3.  Target sizes: [8, 8, 97, 97].  Tensor sizes: [8, 1, 97, 2940337]
2025-03-11 18:30:06.411953 test begin: paddle.broadcast_to(Tensor([8, 1, 973423, 293],"bool"), list[8,8,293,293,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 973423, 293],"bool"), list[8,8,293,293,], ) 
 The expanded size of the tensor (293) must match the existing size (973423) at non-singleton dimension 2.  Target sizes: [8, 8, 293, 293].  Tensor sizes: [8, 1, 973423, 293]
2025-03-11 18:30:06.907484 test begin: paddle.broadcast_to(Tensor([8, 1, 976756, 292],"bool"), list[8,8,292,292,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 976756, 292],"bool"), list[8,8,292,292,], ) 
 The expanded size of the tensor (292) must match the existing size (976756) at non-singleton dimension 2.  Target sizes: [8, 8, 292, 292].  Tensor sizes: [8, 1, 976756, 292]
2025-03-11 18:30:07.395196 test begin: paddle.broadcast_to(Tensor([8, 1, 98, 2910334],"bool"), list[8,8,98,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 98, 2910334],"bool"), list[8,8,98,113,], ) 
 The expanded size of the tensor (113) must match the existing size (2910334) at non-singleton dimension 3.  Target sizes: [8, 8, 98, 113].  Tensor sizes: [8, 1, 98, 2910334]
2025-03-11 18:30:07.891191 test begin: paddle.broadcast_to(Tensor([8, 1, 98, 2910334],"bool"), list[8,8,98,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 98, 2910334],"bool"), list[8,8,98,121,], ) 
 The expanded size of the tensor (121) must match the existing size (2910334) at non-singleton dimension 3.  Target sizes: [8, 8, 98, 121].  Tensor sizes: [8, 1, 98, 2910334]
2025-03-11 18:30:08.393567 test begin: paddle.broadcast_to(Tensor([8, 1, 98, 2910334],"bool"), list[8,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 98, 2910334],"bool"), list[8,8,98,98,], ) 
 The expanded size of the tensor (98) must match the existing size (2910334) at non-singleton dimension 3.  Target sizes: [8, 8, 98, 98].  Tensor sizes: [8, 1, 98, 2910334]
2025-03-11 18:30:08.890947 test begin: paddle.broadcast_to(Tensor([8, 1, 980113, 291],"bool"), list[8,8,291,291,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 980113, 291],"bool"), list[8,8,291,291,], ) 
 The expanded size of the tensor (291) must match the existing size (980113) at non-singleton dimension 2.  Target sizes: [8, 8, 291, 291].  Tensor sizes: [8, 1, 980113, 291]
2025-03-11 18:30:09.378347 test begin: paddle.broadcast_to(Tensor([8, 1, 983492, 290],"bool"), list[8,8,290,290,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 983492, 290],"bool"), list[8,8,290,290,], ) 
 The expanded size of the tensor (290) must match the existing size (983492) at non-singleton dimension 2.  Target sizes: [8, 8, 290, 290].  Tensor sizes: [8, 1, 983492, 290]
2025-03-11 18:30:09.909498 test begin: paddle.broadcast_to(Tensor([8, 1, 9834920, 29],"bool"), list[8,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 9834920, 29],"bool"), list[8,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (9834920) at non-singleton dimension 2.  Target sizes: [8, 8, 29, 29].  Tensor sizes: [8, 1, 9834920, 29]
2025-03-11 18:30:10.499663 test begin: paddle.broadcast_to(Tensor([8, 1, 986896, 289],"bool"), list[8,8,289,289,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 986896, 289],"bool"), list[8,8,289,289,], ) 
 The expanded size of the tensor (289) must match the existing size (986896) at non-singleton dimension 2.  Target sizes: [8, 8, 289, 289].  Tensor sizes: [8, 1, 986896, 289]
2025-03-11 18:30:10.857205 test begin: paddle.broadcast_to(Tensor([8, 1, 99, 2880937],"bool"), list[8,8,99,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 99, 2880937],"bool"), list[8,8,99,113,], ) 
 The expanded size of the tensor (113) must match the existing size (2880937) at non-singleton dimension 3.  Target sizes: [8, 8, 99, 113].  Tensor sizes: [8, 1, 99, 2880937]
2025-03-11 18:30:11.358789 test begin: paddle.broadcast_to(Tensor([8, 1, 99, 2880937],"bool"), list[8,8,99,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 99, 2880937],"bool"), list[8,8,99,121,], ) 
 The expanded size of the tensor (121) must match the existing size (2880937) at non-singleton dimension 3.  Target sizes: [8, 8, 99, 121].  Tensor sizes: [8, 1, 99, 2880937]
2025-03-11 18:30:11.852673 test begin: paddle.broadcast_to(Tensor([8, 1, 99, 2880937],"bool"), list[8,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 99, 2880937],"bool"), list[8,8,99,99,], ) 
 The expanded size of the tensor (99) must match the existing size (2880937) at non-singleton dimension 3.  Target sizes: [8, 8, 99, 99].  Tensor sizes: [8, 1, 99, 2880937]
2025-03-11 18:30:12.355795 test begin: paddle.broadcast_to(Tensor([8, 1, 990322, 288],"bool"), list[8,8,288,288,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 990322, 288],"bool"), list[8,8,288,288,], ) 
 The expanded size of the tensor (288) must match the existing size (990322) at non-singleton dimension 2.  Target sizes: [8, 8, 288, 288].  Tensor sizes: [8, 1, 990322, 288]
2025-03-11 18:30:12.857005 test begin: paddle.broadcast_to(Tensor([8, 1, 993773, 287],"bool"), list[8,8,287,287,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 993773, 287],"bool"), list[8,8,287,287,], ) 
 The expanded size of the tensor (287) must match the existing size (993773) at non-singleton dimension 2.  Target sizes: [8, 8, 287, 287].  Tensor sizes: [8, 1, 993773, 287]
2025-03-11 18:30:13.390809 test begin: paddle.broadcast_to(Tensor([8, 1, 997248, 286],"bool"), list[8,8,286,286,], )

[torch error] paddle.broadcast_to(Tensor([8, 1, 997248, 286],"bool"), list[8,8,286,286,], ) 
 The expanded size of the tensor (286) must match the existing size (997248) at non-singleton dimension 2.  Target sizes: [8, 8, 286, 286].  Tensor sizes: [8, 1, 997248, 286]
2025-03-11 18:30:13.892706 test begin: paddle.broadcast_to(Tensor([8, 10016, 252, 113],"bool"), list[8,8,252,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10016, 252, 113],"bool"), list[8,8,252,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10016) at non-singleton dimension 1.  Target sizes: [8, 8, 252, 113].  Tensor sizes: [8, 10016, 252, 113]
2025-03-11 18:30:14.423721 test begin: paddle.broadcast_to(Tensor([8, 10056, 251, 113],"bool"), list[8,8,251,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10056, 251, 113],"bool"), list[8,8,251,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10056) at non-singleton dimension 1.  Target sizes: [8, 8, 251, 113].  Tensor sizes: [8, 10056, 251, 113]
2025-03-11 18:30:14.957425 test begin: paddle.broadcast_to(Tensor([8, 100961, 25, 113],"bool"), list[8,8,25,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 100961, 25, 113],"bool"), list[8,8,25,113,], ) 
 The expanded size of the tensor (8) must match the existing size (100961) at non-singleton dimension 1.  Target sizes: [8, 8, 25, 113].  Tensor sizes: [8, 100961, 25, 113]
2025-03-11 18:30:15.493505 test begin: paddle.broadcast_to(Tensor([8, 10097, 250, 113],"bool"), list[8,8,250,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10097, 250, 113],"bool"), list[8,8,250,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10097) at non-singleton dimension 1.  Target sizes: [8, 8, 250, 113].  Tensor sizes: [8, 10097, 250, 113]
2025-03-11 18:30:16.039123 test begin: paddle.broadcast_to(Tensor([8, 10106, 168, 168],"bool"), list[8,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([8, 10106, 168, 168],"bool"), list[8,8,168,168,], ) 
 The expanded size of the tensor (8) must match the existing size (10106) at non-singleton dimension 1.  Target sizes: [8, 8, 168, 168].  Tensor sizes: [8, 10106, 168, 168]
2025-03-11 18:30:16.536089 test begin: paddle.broadcast_to(Tensor([8, 10137, 249, 113],"bool"), list[8,8,249,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10137, 249, 113],"bool"), list[8,8,249,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10137) at non-singleton dimension 1.  Target sizes: [8, 8, 249, 113].  Tensor sizes: [8, 10137, 249, 113]
2025-03-11 18:30:17.073939 test begin: paddle.broadcast_to(Tensor([8, 101536, 53, 53],"bool"), list[8,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([8, 101536, 53, 53],"bool"), list[8,8,53,53,], ) 
 The expanded size of the tensor (8) must match the existing size (101536) at non-singleton dimension 1.  Target sizes: [8, 8, 53, 53].  Tensor sizes: [8, 101536, 53, 53]
2025-03-11 18:30:17.686316 test begin: paddle.broadcast_to(Tensor([8, 10178, 248, 113],"bool"), list[8,8,248,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10178, 248, 113],"bool"), list[8,8,248,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10178) at non-singleton dimension 1.  Target sizes: [8, 8, 248, 113].  Tensor sizes: [8, 10178, 248, 113]
2025-03-11 18:30:18.047900 test begin: paddle.broadcast_to(Tensor([8, 10219, 247, 113],"bool"), list[8,8,247,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10219, 247, 113],"bool"), list[8,8,247,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10219) at non-singleton dimension 1.  Target sizes: [8, 8, 247, 113].  Tensor sizes: [8, 10219, 247, 113]
2025-03-11 18:30:18.670444 test begin: paddle.broadcast_to(Tensor([8, 10227, 167, 167],"bool"), list[8,8,167,167,], )

[torch error] paddle.broadcast_to(Tensor([8, 10227, 167, 167],"bool"), list[8,8,167,167,], ) 
 The expanded size of the tensor (8) must match the existing size (10227) at non-singleton dimension 1.  Target sizes: [8, 8, 167, 167].  Tensor sizes: [8, 10227, 167, 167]
2025-03-11 18:30:19.156873 test begin: paddle.broadcast_to(Tensor([8, 102484, 23, 121],"bool"), list[8,8,23,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 102484, 23, 121],"bool"), list[8,8,23,121,], ) 
 The expanded size of the tensor (8) must match the existing size (102484) at non-singleton dimension 1.  Target sizes: [8, 8, 23, 121].  Tensor sizes: [8, 102484, 23, 121]
2025-03-11 18:30:19.739979 test begin: paddle.broadcast_to(Tensor([8, 10261, 246, 113],"bool"), list[8,8,246,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10261, 246, 113],"bool"), list[8,8,246,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10261) at non-singleton dimension 1.  Target sizes: [8, 8, 246, 113].  Tensor sizes: [8, 10261, 246, 113]
2025-03-11 18:30:20.091266 test begin: paddle.broadcast_to(Tensor([8, 10303, 245, 113],"bool"), list[8,8,245,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10303, 245, 113],"bool"), list[8,8,245,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10303) at non-singleton dimension 1.  Target sizes: [8, 8, 245, 113].  Tensor sizes: [8, 10303, 245, 113]
2025-03-11 18:30:20.578848 test begin: paddle.broadcast_to(Tensor([8, 10345, 244, 113],"bool"), list[8,8,244,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10345, 244, 113],"bool"), list[8,8,244,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10345) at non-singleton dimension 1.  Target sizes: [8, 8, 244, 113].  Tensor sizes: [8, 10345, 244, 113]
2025-03-11 18:30:21.077302 test begin: paddle.broadcast_to(Tensor([8, 10351, 166, 166],"bool"), list[8,8,166,166,], )

[torch error] paddle.broadcast_to(Tensor([8, 10351, 166, 166],"bool"), list[8,8,166,166,], ) 
 The expanded size of the tensor (8) must match the existing size (10351) at non-singleton dimension 1.  Target sizes: [8, 8, 166, 166].  Tensor sizes: [8, 10351, 166, 166]
2025-03-11 18:30:21.615731 test begin: paddle.broadcast_to(Tensor([8, 10387, 243, 113],"bool"), list[8,8,243,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10387, 243, 113],"bool"), list[8,8,243,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10387) at non-singleton dimension 1.  Target sizes: [8, 8, 243, 113].  Tensor sizes: [8, 10387, 243, 113]
2025-03-11 18:30:22.114394 test begin: paddle.broadcast_to(Tensor([8, 10430, 242, 113],"bool"), list[8,8,242,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10430, 242, 113],"bool"), list[8,8,242,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10430) at non-singleton dimension 1.  Target sizes: [8, 8, 242, 113].  Tensor sizes: [8, 10430, 242, 113]
2025-03-11 18:30:22.652892 test begin: paddle.broadcast_to(Tensor([8, 10474, 241, 113],"bool"), list[8,8,241,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10474, 241, 113],"bool"), list[8,8,241,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10474) at non-singleton dimension 1.  Target sizes: [8, 8, 241, 113].  Tensor sizes: [8, 10474, 241, 113]
2025-03-11 18:30:23.152144 test begin: paddle.broadcast_to(Tensor([8, 10477, 165, 165],"bool"), list[8,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([8, 10477, 165, 165],"bool"), list[8,8,165,165,], ) 
 The expanded size of the tensor (8) must match the existing size (10477) at non-singleton dimension 1.  Target sizes: [8, 8, 165, 165].  Tensor sizes: [8, 10477, 165, 165]
2025-03-11 18:30:23.650841 test begin: paddle.broadcast_to(Tensor([8, 105167, 24, 113],"bool"), list[8,8,24,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 105167, 24, 113],"bool"), list[8,8,24,113,], ) 
 The expanded size of the tensor (8) must match the existing size (105167) at non-singleton dimension 1.  Target sizes: [8, 8, 24, 113].  Tensor sizes: [8, 105167, 24, 113]
2025-03-11 18:30:24.146951 test begin: paddle.broadcast_to(Tensor([8, 10517, 240, 113],"bool"), list[8,8,240,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10517, 240, 113],"bool"), list[8,8,240,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10517) at non-singleton dimension 1.  Target sizes: [8, 8, 240, 113].  Tensor sizes: [8, 10517, 240, 113]
2025-03-11 18:30:24.733487 test begin: paddle.broadcast_to(Tensor([8, 105479, 52, 52],"bool"), list[8,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([8, 105479, 52, 52],"bool"), list[8,8,52,52,], ) 
 The expanded size of the tensor (8) must match the existing size (105479) at non-singleton dimension 1.  Target sizes: [8, 8, 52, 52].  Tensor sizes: [8, 105479, 52, 52]
2025-03-11 18:30:25.096572 test begin: paddle.broadcast_to(Tensor([8, 10561, 239, 113],"bool"), list[8,8,239,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10561, 239, 113],"bool"), list[8,8,239,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10561) at non-singleton dimension 1.  Target sizes: [8, 8, 239, 113].  Tensor sizes: [8, 10561, 239, 113]
2025-03-11 18:30:25.686879 test begin: paddle.broadcast_to(Tensor([8, 10605, 164, 164],"bool"), list[8,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([8, 10605, 164, 164],"bool"), list[8,8,164,164,], ) 
 The expanded size of the tensor (8) must match the existing size (10605) at non-singleton dimension 1.  Target sizes: [8, 8, 164, 164].  Tensor sizes: [8, 10605, 164, 164]
2025-03-11 18:30:26.215045 test begin: paddle.broadcast_to(Tensor([8, 10606, 238, 113],"bool"), list[8,8,238,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10606, 238, 113],"bool"), list[8,8,238,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10606) at non-singleton dimension 1.  Target sizes: [8, 8, 238, 113].  Tensor sizes: [8, 10606, 238, 113]
2025-03-11 18:30:26.809990 test begin: paddle.broadcast_to(Tensor([8, 10650, 237, 113],"bool"), list[8,8,237,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10650, 237, 113],"bool"), list[8,8,237,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10650) at non-singleton dimension 1.  Target sizes: [8, 8, 237, 113].  Tensor sizes: [8, 10650, 237, 113]
2025-03-11 18:30:27.167343 test begin: paddle.broadcast_to(Tensor([8, 10695, 236, 113],"bool"), list[8,8,236,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10695, 236, 113],"bool"), list[8,8,236,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10695) at non-singleton dimension 1.  Target sizes: [8, 8, 236, 113].  Tensor sizes: [8, 10695, 236, 113]
2025-03-11 18:30:27.674034 test begin: paddle.broadcast_to(Tensor([8, 107143, 22, 121],"bool"), list[8,8,22,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 107143, 22, 121],"bool"), list[8,8,22,121,], ) 
 The expanded size of the tensor (8) must match the existing size (107143) at non-singleton dimension 1.  Target sizes: [8, 8, 22, 121].  Tensor sizes: [8, 107143, 22, 121]
2025-03-11 18:30:28.166936 test begin: paddle.broadcast_to(Tensor([8, 10735, 163, 163],"bool"), list[8,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([8, 10735, 163, 163],"bool"), list[8,8,163,163,], ) 
 The expanded size of the tensor (8) must match the existing size (10735) at non-singleton dimension 1.  Target sizes: [8, 8, 163, 163].  Tensor sizes: [8, 10735, 163, 163]
2025-03-11 18:30:28.661533 test begin: paddle.broadcast_to(Tensor([8, 10741, 235, 113],"bool"), list[8,8,235,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10741, 235, 113],"bool"), list[8,8,235,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10741) at non-singleton dimension 1.  Target sizes: [8, 8, 235, 113].  Tensor sizes: [8, 10741, 235, 113]
2025-03-11 18:30:29.205331 test begin: paddle.broadcast_to(Tensor([8, 10787, 234, 113],"bool"), list[8,8,234,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10787, 234, 113],"bool"), list[8,8,234,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10787) at non-singleton dimension 1.  Target sizes: [8, 8, 234, 113].  Tensor sizes: [8, 10787, 234, 113]
2025-03-11 18:30:29.698202 test begin: paddle.broadcast_to(Tensor([8, 1080352, 8, 33],"bool"), list[8,8,8,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1080352, 8, 33],"bool"), list[8,8,8,33,], ) 
 The expanded size of the tensor (8) must match the existing size (1080352) at non-singleton dimension 1.  Target sizes: [8, 8, 8, 33].  Tensor sizes: [8, 1080352, 8, 33]
2025-03-11 18:30:30.190270 test begin: paddle.broadcast_to(Tensor([8, 10833, 233, 113],"bool"), list[8,8,233,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10833, 233, 113],"bool"), list[8,8,233,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10833) at non-singleton dimension 1.  Target sizes: [8, 8, 233, 113].  Tensor sizes: [8, 10833, 233, 113]
2025-03-11 18:30:30.778792 test begin: paddle.broadcast_to(Tensor([8, 10868, 162, 162],"bool"), list[8,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([8, 10868, 162, 162],"bool"), list[8,8,162,162,], ) 
 The expanded size of the tensor (8) must match the existing size (10868) at non-singleton dimension 1.  Target sizes: [8, 8, 162, 162].  Tensor sizes: [8, 10868, 162, 162]
2025-03-11 18:30:31.134009 test begin: paddle.broadcast_to(Tensor([8, 10880, 232, 113],"bool"), list[8,8,232,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10880, 232, 113],"bool"), list[8,8,232,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10880) at non-singleton dimension 1.  Target sizes: [8, 8, 232, 113].  Tensor sizes: [8, 10880, 232, 113]
2025-03-11 18:30:31.635559 test begin: paddle.broadcast_to(Tensor([8, 10927, 231, 113],"bool"), list[8,8,231,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10927, 231, 113],"bool"), list[8,8,231,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10927) at non-singleton dimension 1.  Target sizes: [8, 8, 231, 113].  Tensor sizes: [8, 10927, 231, 113]
2025-03-11 18:30:32.128104 test begin: paddle.broadcast_to(Tensor([8, 109656, 51, 51],"bool"), list[8,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([8, 109656, 51, 51],"bool"), list[8,8,51,51,], ) 
 The expanded size of the tensor (8) must match the existing size (109656) at non-singleton dimension 1.  Target sizes: [8, 8, 51, 51].  Tensor sizes: [8, 109656, 51, 51]
2025-03-11 18:30:32.621879 test begin: paddle.broadcast_to(Tensor([8, 10974, 230, 113],"bool"), list[8,8,230,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 10974, 230, 113],"bool"), list[8,8,230,113,], ) 
 The expanded size of the tensor (8) must match the existing size (10974) at non-singleton dimension 1.  Target sizes: [8, 8, 230, 113].  Tensor sizes: [8, 10974, 230, 113]
2025-03-11 18:30:33.113458 test begin: paddle.broadcast_to(Tensor([8, 109740, 23, 113],"bool"), list[8,8,23,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 109740, 23, 113],"bool"), list[8,8,23,113,], ) 
 The expanded size of the tensor (8) must match the existing size (109740) at non-singleton dimension 1.  Target sizes: [8, 8, 23, 113].  Tensor sizes: [8, 109740, 23, 113]
2025-03-11 18:30:33.598609 test begin: paddle.broadcast_to(Tensor([8, 11004, 161, 161],"bool"), list[8,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([8, 11004, 161, 161],"bool"), list[8,8,161,161,], ) 
 The expanded size of the tensor (8) must match the existing size (11004) at non-singleton dimension 1.  Target sizes: [8, 8, 161, 161].  Tensor sizes: [8, 11004, 161, 161]
2025-03-11 18:30:34.088111 test begin: paddle.broadcast_to(Tensor([8, 11022, 229, 113],"bool"), list[8,8,229,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11022, 229, 113],"bool"), list[8,8,229,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11022) at non-singleton dimension 1.  Target sizes: [8, 8, 229, 113].  Tensor sizes: [8, 11022, 229, 113]
2025-03-11 18:30:34.575917 test begin: paddle.broadcast_to(Tensor([8, 11071, 228, 113],"bool"), list[8,8,228,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11071, 228, 113],"bool"), list[8,8,228,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11071) at non-singleton dimension 1.  Target sizes: [8, 8, 228, 113].  Tensor sizes: [8, 11071, 228, 113]
2025-03-11 18:30:35.066686 test begin: paddle.broadcast_to(Tensor([8, 11119, 227, 113],"bool"), list[8,8,227,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11119, 227, 113],"bool"), list[8,8,227,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11119) at non-singleton dimension 1.  Target sizes: [8, 8, 227, 113].  Tensor sizes: [8, 11119, 227, 113]
2025-03-11 18:30:35.552775 test begin: paddle.broadcast_to(Tensor([8, 1114113, 16, 16],"bool"), list[8,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([8, 1114113, 16, 16],"bool"), list[8,8,16,16,], ) 
 The expanded size of the tensor (8) must match the existing size (1114113) at non-singleton dimension 1.  Target sizes: [8, 8, 16, 16].  Tensor sizes: [8, 1114113, 16, 16]
2025-03-11 18:30:36.045338 test begin: paddle.broadcast_to(Tensor([8, 11142, 160, 160],"bool"), list[8,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([8, 11142, 160, 160],"bool"), list[8,8,160,160,], ) 
 The expanded size of the tensor (8) must match the existing size (11142) at non-singleton dimension 1.  Target sizes: [8, 8, 160, 160].  Tensor sizes: [8, 11142, 160, 160]
2025-03-11 18:30:36.580487 test begin: paddle.broadcast_to(Tensor([8, 11169, 226, 113],"bool"), list[8,8,226,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11169, 226, 113],"bool"), list[8,8,226,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11169) at non-singleton dimension 1.  Target sizes: [8, 8, 226, 113].  Tensor sizes: [8, 11169, 226, 113]
2025-03-11 18:30:37.121676 test begin: paddle.broadcast_to(Tensor([8, 11218, 225, 113],"bool"), list[8,8,225,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11218, 225, 113],"bool"), list[8,8,225,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11218) at non-singleton dimension 1.  Target sizes: [8, 8, 225, 113].  Tensor sizes: [8, 11218, 225, 113]
2025-03-11 18:30:37.612851 test begin: paddle.broadcast_to(Tensor([8, 112245, 21, 121],"bool"), list[8,8,21,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 112245, 21, 121],"bool"), list[8,8,21,121,], ) 
 The expanded size of the tensor (8) must match the existing size (112245) at non-singleton dimension 1.  Target sizes: [8, 8, 21, 121].  Tensor sizes: [8, 112245, 21, 121]
2025-03-11 18:30:38.152122 test begin: paddle.broadcast_to(Tensor([8, 11268, 224, 113],"bool"), list[8,8,224,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11268, 224, 113],"bool"), list[8,8,224,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11268) at non-singleton dimension 1.  Target sizes: [8, 8, 224, 113].  Tensor sizes: [8, 11268, 224, 113]
2025-03-11 18:30:38.642750 test begin: paddle.broadcast_to(Tensor([8, 11282, 159, 159],"bool"), list[8,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([8, 11282, 159, 159],"bool"), list[8,8,159,159,], ) 
 The expanded size of the tensor (8) must match the existing size (11282) at non-singleton dimension 1.  Target sizes: [8, 8, 159, 159].  Tensor sizes: [8, 11282, 159, 159]
2025-03-11 18:30:39.132507 test begin: paddle.broadcast_to(Tensor([8, 11319, 223, 113],"bool"), list[8,8,223,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11319, 223, 113],"bool"), list[8,8,223,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11319) at non-singleton dimension 1.  Target sizes: [8, 8, 223, 113].  Tensor sizes: [8, 11319, 223, 113]
2025-03-11 18:30:39.625930 test begin: paddle.broadcast_to(Tensor([8, 11370, 222, 113],"bool"), list[8,8,222,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11370, 222, 113],"bool"), list[8,8,222,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11370) at non-singleton dimension 1.  Target sizes: [8, 8, 222, 113].  Tensor sizes: [8, 11370, 222, 113]
2025-03-11 18:30:40.111595 test begin: paddle.broadcast_to(Tensor([8, 11408507, 5, 5],"bool"), list[8,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([8, 11408507, 5, 5],"bool"), list[8,8,5,5,], ) 
 The expanded size of the tensor (8) must match the existing size (11408507) at non-singleton dimension 1.  Target sizes: [8, 8, 5, 5].  Tensor sizes: [8, 11408507, 5, 5]
2025-03-11 18:30:40.602816 test begin: paddle.broadcast_to(Tensor([8, 114086, 50, 50],"bool"), list[8,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([8, 114086, 50, 50],"bool"), list[8,8,50,50,], ) 
 The expanded size of the tensor (8) must match the existing size (114086) at non-singleton dimension 1.  Target sizes: [8, 8, 50, 50].  Tensor sizes: [8, 114086, 50, 50]
2025-03-11 18:30:41.097040 test begin: paddle.broadcast_to(Tensor([8, 11421, 221, 113],"bool"), list[8,8,221,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11421, 221, 113],"bool"), list[8,8,221,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11421) at non-singleton dimension 1.  Target sizes: [8, 8, 221, 113].  Tensor sizes: [8, 11421, 221, 113]
2025-03-11 18:30:41.608942 test begin: paddle.broadcast_to(Tensor([8, 11425, 158, 158],"bool"), list[8,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([8, 11425, 158, 158],"bool"), list[8,8,158,158,], ) 
 The expanded size of the tensor (8) must match the existing size (11425) at non-singleton dimension 1.  Target sizes: [8, 8, 158, 158].  Tensor sizes: [8, 11425, 158, 158]
2025-03-11 18:30:42.097603 test begin: paddle.broadcast_to(Tensor([8, 114728, 22, 113],"bool"), list[8,8,22,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 114728, 22, 113],"bool"), list[8,8,22,113,], ) 
 The expanded size of the tensor (8) must match the existing size (114728) at non-singleton dimension 1.  Target sizes: [8, 8, 22, 113].  Tensor sizes: [8, 114728, 22, 113]
2025-03-11 18:30:42.595755 test begin: paddle.broadcast_to(Tensor([8, 11473, 220, 113],"bool"), list[8,8,220,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11473, 220, 113],"bool"), list[8,8,220,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11473) at non-singleton dimension 1.  Target sizes: [8, 8, 220, 113].  Tensor sizes: [8, 11473, 220, 113]
2025-03-11 18:30:43.086965 test begin: paddle.broadcast_to(Tensor([8, 11526, 219, 113],"bool"), list[8,8,219,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11526, 219, 113],"bool"), list[8,8,219,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11526) at non-singleton dimension 1.  Target sizes: [8, 8, 219, 113].  Tensor sizes: [8, 11526, 219, 113]
2025-03-11 18:30:43.575043 test begin: paddle.broadcast_to(Tensor([8, 11571, 157, 157],"bool"), list[8,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([8, 11571, 157, 157],"bool"), list[8,8,157,157,], ) 
 The expanded size of the tensor (8) must match the existing size (11571) at non-singleton dimension 1.  Target sizes: [8, 8, 157, 157].  Tensor sizes: [8, 11571, 157, 157]
2025-03-11 18:30:44.062893 test begin: paddle.broadcast_to(Tensor([8, 11579, 218, 113],"bool"), list[8,8,218,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11579, 218, 113],"bool"), list[8,8,218,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11579) at non-singleton dimension 1.  Target sizes: [8, 8, 218, 113].  Tensor sizes: [8, 11579, 218, 113]
2025-03-11 18:30:44.553342 test begin: paddle.broadcast_to(Tensor([8, 11632, 217, 113],"bool"), list[8,8,217,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11632, 217, 113],"bool"), list[8,8,217,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11632) at non-singleton dimension 1.  Target sizes: [8, 8, 217, 113].  Tensor sizes: [8, 11632, 217, 113]
2025-03-11 18:30:45.045477 test begin: paddle.broadcast_to(Tensor([8, 11686, 216, 113],"bool"), list[8,8,216,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11686, 216, 113],"bool"), list[8,8,216,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11686) at non-singleton dimension 1.  Target sizes: [8, 8, 216, 113].  Tensor sizes: [8, 11686, 216, 113]
2025-03-11 18:30:45.535400 test begin: paddle.broadcast_to(Tensor([8, 11720, 156, 156],"bool"), list[8,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([8, 11720, 156, 156],"bool"), list[8,8,156,156,], ) 
 The expanded size of the tensor (8) must match the existing size (11720) at non-singleton dimension 1.  Target sizes: [8, 8, 156, 156].  Tensor sizes: [8, 11720, 156, 156]
2025-03-11 18:30:46.071856 test begin: paddle.broadcast_to(Tensor([8, 11740, 215, 113],"bool"), list[8,8,215,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11740, 215, 113],"bool"), list[8,8,215,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11740) at non-singleton dimension 1.  Target sizes: [8, 8, 215, 113].  Tensor sizes: [8, 11740, 215, 113]
2025-03-11 18:30:46.561893 test begin: paddle.broadcast_to(Tensor([8, 1178565, 2, 121],"bool"), list[8,8,2,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 1178565, 2, 121],"bool"), list[8,8,2,121,], ) 
 The expanded size of the tensor (8) must match the existing size (1178565) at non-singleton dimension 1.  Target sizes: [8, 8, 2, 121].  Tensor sizes: [8, 1178565, 2, 121]
2025-03-11 18:30:47.112841 test begin: paddle.broadcast_to(Tensor([8, 117857, 20, 121],"bool"), list[8,8,20,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 117857, 20, 121],"bool"), list[8,8,20,121,], ) 
 The expanded size of the tensor (8) must match the existing size (117857) at non-singleton dimension 1.  Target sizes: [8, 8, 20, 121].  Tensor sizes: [8, 117857, 20, 121]
2025-03-11 18:30:47.603186 test begin: paddle.broadcast_to(Tensor([8, 11795, 214, 113],"bool"), list[8,8,214,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11795, 214, 113],"bool"), list[8,8,214,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11795) at non-singleton dimension 1.  Target sizes: [8, 8, 214, 113].  Tensor sizes: [8, 11795, 214, 113]
2025-03-11 18:30:48.187604 test begin: paddle.broadcast_to(Tensor([8, 11850, 213, 113],"bool"), list[8,8,213,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11850, 213, 113],"bool"), list[8,8,213,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11850) at non-singleton dimension 1.  Target sizes: [8, 8, 213, 113].  Tensor sizes: [8, 11850, 213, 113]
2025-03-11 18:30:48.698651 test begin: paddle.broadcast_to(Tensor([8, 11872, 155, 155],"bool"), list[8,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([8, 11872, 155, 155],"bool"), list[8,8,155,155,], ) 
 The expanded size of the tensor (8) must match the existing size (11872) at non-singleton dimension 1.  Target sizes: [8, 8, 155, 155].  Tensor sizes: [8, 11872, 155, 155]
2025-03-11 18:30:49.058359 test begin: paddle.broadcast_to(Tensor([8, 118790, 49, 49],"bool"), list[8,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([8, 118790, 49, 49],"bool"), list[8,8,49,49,], ) 
 The expanded size of the tensor (8) must match the existing size (118790) at non-singleton dimension 1.  Target sizes: [8, 8, 49, 49].  Tensor sizes: [8, 118790, 49, 49]
2025-03-11 18:30:49.549996 test begin: paddle.broadcast_to(Tensor([8, 11906, 212, 113],"bool"), list[8,8,212,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11906, 212, 113],"bool"), list[8,8,212,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11906) at non-singleton dimension 1.  Target sizes: [8, 8, 212, 113].  Tensor sizes: [8, 11906, 212, 113]
2025-03-11 18:30:50.042137 test begin: paddle.broadcast_to(Tensor([8, 11963, 211, 113],"bool"), list[8,8,211,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 11963, 211, 113],"bool"), list[8,8,211,113,], ) 
 The expanded size of the tensor (8) must match the existing size (11963) at non-singleton dimension 1.  Target sizes: [8, 8, 211, 113].  Tensor sizes: [8, 11963, 211, 113]
2025-03-11 18:30:50.529195 test begin: paddle.broadcast_to(Tensor([8, 120191, 21, 113],"bool"), list[8,8,21,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 120191, 21, 113],"bool"), list[8,8,21,113,], ) 
 The expanded size of the tensor (8) must match the existing size (120191) at non-singleton dimension 1.  Target sizes: [8, 8, 21, 113].  Tensor sizes: [8, 120191, 21, 113]
2025-03-11 18:30:51.015036 test begin: paddle.broadcast_to(Tensor([8, 12020, 210, 113],"bool"), list[8,8,210,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 12020, 210, 113],"bool"), list[8,8,210,113,], ) 
 The expanded size of the tensor (8) must match the existing size (12020) at non-singleton dimension 1.  Target sizes: [8, 8, 210, 113].  Tensor sizes: [8, 12020, 210, 113]
2025-03-11 18:30:51.505591 test begin: paddle.broadcast_to(Tensor([8, 12027, 154, 154],"bool"), list[8,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([8, 12027, 154, 154],"bool"), list[8,8,154,154,], ) 
 The expanded size of the tensor (8) must match the existing size (12027) at non-singleton dimension 1.  Target sizes: [8, 8, 154, 154].  Tensor sizes: [8, 12027, 154, 154]
2025-03-11 18:30:51.996730 test begin: paddle.broadcast_to(Tensor([8, 12077, 209, 113],"bool"), list[8,8,209,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 12077, 209, 113],"bool"), list[8,8,209,113,], ) 
 The expanded size of the tensor (8) must match the existing size (12077) at non-singleton dimension 1.  Target sizes: [8, 8, 209, 113].  Tensor sizes: [8, 12077, 209, 113]
2025-03-11 18:30:52.483116 test begin: paddle.broadcast_to(Tensor([8, 12135, 208, 113],"bool"), list[8,8,208,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 12135, 208, 113],"bool"), list[8,8,208,113,], ) 
 The expanded size of the tensor (8) must match the existing size (12135) at non-singleton dimension 1.  Target sizes: [8, 8, 208, 113].  Tensor sizes: [8, 12135, 208, 113]
2025-03-11 18:30:52.975296 test begin: paddle.broadcast_to(Tensor([8, 12184, 153, 153],"bool"), list[8,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([8, 12184, 153, 153],"bool"), list[8,8,153,153,], ) 
 The expanded size of the tensor (8) must match the existing size (12184) at non-singleton dimension 1.  Target sizes: [8, 8, 153, 153].  Tensor sizes: [8, 12184, 153, 153]
2025-03-11 18:30:53.461087 test begin: paddle.broadcast_to(Tensor([8, 12194, 207, 113],"bool"), list[8,8,207,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 12194, 207, 113],"bool"), list[8,8,207,113,], ) 
 The expanded size of the tensor (8) must match the existing size (12194) at non-singleton dimension 1.  Target sizes: [8, 8, 207, 113].  Tensor sizes: [8, 12194, 207, 113]
2025-03-11 18:30:53.946521 test begin: paddle.broadcast_to(Tensor([8, 12253, 206, 113],"bool"), list[8,8,206,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 12253, 206, 113],"bool"), list[8,8,206,113,], ) 
 The expanded size of the tensor (8) must match the existing size (12253) at non-singleton dimension 1.  Target sizes: [8, 8, 206, 113].  Tensor sizes: [8, 12253, 206, 113]
2025-03-11 18:30:54.490814 test begin: paddle.broadcast_to(Tensor([8, 12313, 205, 113],"bool"), list[8,8,205,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 12313, 205, 113],"bool"), list[8,8,205,113,], ) 
 The expanded size of the tensor (8) must match the existing size (12313) at non-singleton dimension 1.  Target sizes: [8, 8, 205, 113].  Tensor sizes: [8, 12313, 205, 113]
2025-03-11 18:30:54.978222 test begin: paddle.broadcast_to(Tensor([8, 12345, 152, 152],"bool"), list[8,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([8, 12345, 152, 152],"bool"), list[8,8,152,152,], ) 
 The expanded size of the tensor (8) must match the existing size (12345) at non-singleton dimension 1.  Target sizes: [8, 8, 152, 152].  Tensor sizes: [8, 12345, 152, 152]
2025-03-11 18:30:55.516282 test begin: paddle.broadcast_to(Tensor([8, 1234687, 7, 33],"bool"), list[8,8,7,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1234687, 7, 33],"bool"), list[8,8,7,33,], ) 
 The expanded size of the tensor (8) must match the existing size (1234687) at non-singleton dimension 1.  Target sizes: [8, 8, 7, 33].  Tensor sizes: [8, 1234687, 7, 33]
2025-03-11 18:30:56.002394 test begin: paddle.broadcast_to(Tensor([8, 12373, 204, 113],"bool"), list[8,8,204,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 12373, 204, 113],"bool"), list[8,8,204,113,], ) 
 The expanded size of the tensor (8) must match the existing size (12373) at non-singleton dimension 1.  Target sizes: [8, 8, 204, 113].  Tensor sizes: [8, 12373, 204, 113]
2025-03-11 18:30:56.490088 test begin: paddle.broadcast_to(Tensor([8, 123791, 48, 48],"bool"), list[8,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([8, 123791, 48, 48],"bool"), list[8,8,48,48,], ) 
 The expanded size of the tensor (8) must match the existing size (123791) at non-singleton dimension 1.  Target sizes: [8, 8, 48, 48].  Tensor sizes: [8, 123791, 48, 48]
2025-03-11 18:30:56.981576 test begin: paddle.broadcast_to(Tensor([8, 124060, 19, 121],"bool"), list[8,8,19,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 124060, 19, 121],"bool"), list[8,8,19,121,], ) 
 The expanded size of the tensor (8) must match the existing size (124060) at non-singleton dimension 1.  Target sizes: [8, 8, 19, 121].  Tensor sizes: [8, 124060, 19, 121]
2025-03-11 18:30:57.468044 test begin: paddle.broadcast_to(Tensor([8, 12434, 203, 113],"bool"), list[8,8,203,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 12434, 203, 113],"bool"), list[8,8,203,113,], ) 
 The expanded size of the tensor (8) must match the existing size (12434) at non-singleton dimension 1.  Target sizes: [8, 8, 203, 113].  Tensor sizes: [8, 12434, 203, 113]
2025-03-11 18:30:58.004315 test begin: paddle.broadcast_to(Tensor([8, 12496, 202, 113],"bool"), list[8,8,202,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 12496, 202, 113],"bool"), list[8,8,202,113,], ) 
 The expanded size of the tensor (8) must match the existing size (12496) at non-singleton dimension 1.  Target sizes: [8, 8, 202, 113].  Tensor sizes: [8, 12496, 202, 113]
2025-03-11 18:30:58.494348 test begin: paddle.broadcast_to(Tensor([8, 12509, 151, 151],"bool"), list[8,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([8, 12509, 151, 151],"bool"), list[8,8,151,151,], ) 
 The expanded size of the tensor (8) must match the existing size (12509) at non-singleton dimension 1.  Target sizes: [8, 8, 151, 151].  Tensor sizes: [8, 12509, 151, 151]
2025-03-11 18:30:59.032398 test begin: paddle.broadcast_to(Tensor([8, 12558, 201, 113],"bool"), list[8,8,201,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 12558, 201, 113],"bool"), list[8,8,201,113,], ) 
 The expanded size of the tensor (8) must match the existing size (12558) at non-singleton dimension 1.  Target sizes: [8, 8, 201, 113].  Tensor sizes: [8, 12558, 201, 113]
2025-03-11 18:30:59.522047 test begin: paddle.broadcast_to(Tensor([8, 1262003, 2, 113],"bool"), list[8,8,2,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 1262003, 2, 113],"bool"), list[8,8,2,113,], ) 
 The expanded size of the tensor (8) must match the existing size (1262003) at non-singleton dimension 1.  Target sizes: [8, 8, 2, 113].  Tensor sizes: [8, 1262003, 2, 113]
2025-03-11 18:31:00.065814 test begin: paddle.broadcast_to(Tensor([8, 126201, 20, 113],"bool"), list[8,8,20,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 126201, 20, 113],"bool"), list[8,8,20,113,], ) 
 The expanded size of the tensor (8) must match the existing size (126201) at non-singleton dimension 1.  Target sizes: [8, 8, 20, 113].  Tensor sizes: [8, 126201, 20, 113]
2025-03-11 18:31:00.659444 test begin: paddle.broadcast_to(Tensor([8, 12621, 200, 113],"bool"), list[8,8,200,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 12621, 200, 113],"bool"), list[8,8,200,113,], ) 
 The expanded size of the tensor (8) must match the existing size (12621) at non-singleton dimension 1.  Target sizes: [8, 8, 200, 113].  Tensor sizes: [8, 12621, 200, 113]
2025-03-11 18:31:01.095141 test begin: paddle.broadcast_to(Tensor([8, 1267612, 15, 15],"bool"), list[8,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([8, 1267612, 15, 15],"bool"), list[8,8,15,15,], ) 
 The expanded size of the tensor (8) must match the existing size (1267612) at non-singleton dimension 1.  Target sizes: [8, 8, 15, 15].  Tensor sizes: [8, 1267612, 15, 15]
2025-03-11 18:31:01.582682 test begin: paddle.broadcast_to(Tensor([8, 12677, 150, 150],"bool"), list[8,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([8, 12677, 150, 150],"bool"), list[8,8,150,150,], ) 
 The expanded size of the tensor (8) must match the existing size (12677) at non-singleton dimension 1.  Target sizes: [8, 8, 150, 150].  Tensor sizes: [8, 12677, 150, 150]
2025-03-11 18:31:02.127314 test begin: paddle.broadcast_to(Tensor([8, 12684, 199, 113],"bool"), list[8,8,199,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 12684, 199, 113],"bool"), list[8,8,199,113,], ) 
 The expanded size of the tensor (8) must match the existing size (12684) at non-singleton dimension 1.  Target sizes: [8, 8, 199, 113].  Tensor sizes: [8, 12684, 199, 113]
2025-03-11 18:31:02.614670 test begin: paddle.broadcast_to(Tensor([8, 12748, 198, 113],"bool"), list[8,8,198,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 12748, 198, 113],"bool"), list[8,8,198,113,], ) 
 The expanded size of the tensor (8) must match the existing size (12748) at non-singleton dimension 1.  Target sizes: [8, 8, 198, 113].  Tensor sizes: [8, 12748, 198, 113]
2025-03-11 18:31:03.157750 test begin: paddle.broadcast_to(Tensor([8, 12813, 197, 113],"bool"), list[8,8,197,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 12813, 197, 113],"bool"), list[8,8,197,113,], ) 
 The expanded size of the tensor (8) must match the existing size (12813) at non-singleton dimension 1.  Target sizes: [8, 8, 197, 113].  Tensor sizes: [8, 12813, 197, 113]
2025-03-11 18:31:03.650351 test begin: paddle.broadcast_to(Tensor([8, 12847, 149, 149],"bool"), list[8,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([8, 12847, 149, 149],"bool"), list[8,8,149,149,], ) 
 The expanded size of the tensor (8) must match the existing size (12847) at non-singleton dimension 1.  Target sizes: [8, 8, 149, 149].  Tensor sizes: [8, 12847, 149, 149]
2025-03-11 18:31:04.186209 test begin: paddle.broadcast_to(Tensor([8, 12878, 196, 113],"bool"), list[8,8,196,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 12878, 196, 113],"bool"), list[8,8,196,113,], ) 
 The expanded size of the tensor (8) must match the existing size (12878) at non-singleton dimension 1.  Target sizes: [8, 8, 196, 113].  Tensor sizes: [8, 12878, 196, 113]
2025-03-11 18:31:04.677971 test begin: paddle.broadcast_to(Tensor([8, 129114, 47, 47],"bool"), list[8,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([8, 129114, 47, 47],"bool"), list[8,8,47,47,], ) 
 The expanded size of the tensor (8) must match the existing size (129114) at non-singleton dimension 1.  Target sizes: [8, 8, 47, 47].  Tensor sizes: [8, 129114, 47, 47]
2025-03-11 18:31:05.220911 test begin: paddle.broadcast_to(Tensor([8, 12944, 195, 113],"bool"), list[8,8,195,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 12944, 195, 113],"bool"), list[8,8,195,113,], ) 
 The expanded size of the tensor (8) must match the existing size (12944) at non-singleton dimension 1.  Target sizes: [8, 8, 195, 113].  Tensor sizes: [8, 12944, 195, 113]
2025-03-11 18:31:05.764323 test begin: paddle.broadcast_to(Tensor([8, 13011, 194, 113],"bool"), list[8,8,194,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 13011, 194, 113],"bool"), list[8,8,194,113,], ) 
 The expanded size of the tensor (8) must match the existing size (13011) at non-singleton dimension 1.  Target sizes: [8, 8, 194, 113].  Tensor sizes: [8, 13011, 194, 113]
2025-03-11 18:31:06.256298 test begin: paddle.broadcast_to(Tensor([8, 13022, 148, 148],"bool"), list[8,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([8, 13022, 148, 148],"bool"), list[8,8,148,148,], ) 
 The expanded size of the tensor (8) must match the existing size (13022) at non-singleton dimension 1.  Target sizes: [8, 8, 148, 148].  Tensor sizes: [8, 13022, 148, 148]
2025-03-11 18:31:06.741391 test begin: paddle.broadcast_to(Tensor([8, 13078, 193, 113],"bool"), list[8,8,193,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 13078, 193, 113],"bool"), list[8,8,193,113,], ) 
 The expanded size of the tensor (8) must match the existing size (13078) at non-singleton dimension 1.  Target sizes: [8, 8, 193, 113].  Tensor sizes: [8, 13078, 193, 113]
2025-03-11 18:31:07.235741 test begin: paddle.broadcast_to(Tensor([8, 130952, 18, 121],"bool"), list[8,8,18,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 130952, 18, 121],"bool"), list[8,8,18,121,], ) 
 The expanded size of the tensor (8) must match the existing size (130952) at non-singleton dimension 1.  Target sizes: [8, 8, 18, 121].  Tensor sizes: [8, 130952, 18, 121]
2025-03-11 18:31:07.726803 test begin: paddle.broadcast_to(Tensor([8, 13146, 192, 113],"bool"), list[8,8,192,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 13146, 192, 113],"bool"), list[8,8,192,113,], ) 
 The expanded size of the tensor (8) must match the existing size (13146) at non-singleton dimension 1.  Target sizes: [8, 8, 192, 113].  Tensor sizes: [8, 13146, 192, 113]
2025-03-11 18:31:08.217504 test begin: paddle.broadcast_to(Tensor([8, 13199, 147, 147],"bool"), list[8,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([8, 13199, 147, 147],"bool"), list[8,8,147,147,], ) 
 The expanded size of the tensor (8) must match the existing size (13199) at non-singleton dimension 1.  Target sizes: [8, 8, 147, 147].  Tensor sizes: [8, 13199, 147, 147]
2025-03-11 18:31:08.713835 test begin: paddle.broadcast_to(Tensor([8, 13215, 191, 113],"bool"), list[8,8,191,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 13215, 191, 113],"bool"), list[8,8,191,113,], ) 
 The expanded size of the tensor (8) must match the existing size (13215) at non-singleton dimension 1.  Target sizes: [8, 8, 191, 113].  Tensor sizes: [8, 13215, 191, 113]
2025-03-11 18:31:09.198242 test begin: paddle.broadcast_to(Tensor([8, 132843, 19, 113],"bool"), list[8,8,19,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 132843, 19, 113],"bool"), list[8,8,19,113,], ) 
 The expanded size of the tensor (8) must match the existing size (132843) at non-singleton dimension 1.  Target sizes: [8, 8, 19, 113].  Tensor sizes: [8, 132843, 19, 113]
2025-03-11 18:31:09.684228 test begin: paddle.broadcast_to(Tensor([8, 13285, 190, 113],"bool"), list[8,8,190,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 13285, 190, 113],"bool"), list[8,8,190,113,], ) 
 The expanded size of the tensor (8) must match the existing size (13285) at non-singleton dimension 1.  Target sizes: [8, 8, 190, 113].  Tensor sizes: [8, 13285, 190, 113]
2025-03-11 18:31:10.174684 test begin: paddle.broadcast_to(Tensor([8, 13355, 189, 113],"bool"), list[8,8,189,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 13355, 189, 113],"bool"), list[8,8,189,113,], ) 
 The expanded size of the tensor (8) must match the existing size (13355) at non-singleton dimension 1.  Target sizes: [8, 8, 189, 113].  Tensor sizes: [8, 13355, 189, 113]
2025-03-11 18:31:10.662493 test begin: paddle.broadcast_to(Tensor([8, 13381, 146, 146],"bool"), list[8,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([8, 13381, 146, 146],"bool"), list[8,8,146,146,], ) 
 The expanded size of the tensor (8) must match the existing size (13381) at non-singleton dimension 1.  Target sizes: [8, 8, 146, 146].  Tensor sizes: [8, 13381, 146, 146]
2025-03-11 18:31:11.204875 test begin: paddle.broadcast_to(Tensor([8, 13426, 188, 113],"bool"), list[8,8,188,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 13426, 188, 113],"bool"), list[8,8,188,113,], ) 
 The expanded size of the tensor (8) must match the existing size (13426) at non-singleton dimension 1.  Target sizes: [8, 8, 188, 113].  Tensor sizes: [8, 13426, 188, 113]
2025-03-11 18:31:11.694097 test begin: paddle.broadcast_to(Tensor([8, 134789, 46, 46],"bool"), list[8,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([8, 134789, 46, 46],"bool"), list[8,8,46,46,], ) 
 The expanded size of the tensor (8) must match the existing size (134789) at non-singleton dimension 1.  Target sizes: [8, 8, 46, 46].  Tensor sizes: [8, 134789, 46, 46]
2025-03-11 18:31:12.190213 test begin: paddle.broadcast_to(Tensor([8, 13498, 187, 113],"bool"), list[8,8,187,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 13498, 187, 113],"bool"), list[8,8,187,113,], ) 
 The expanded size of the tensor (8) must match the existing size (13498) at non-singleton dimension 1.  Target sizes: [8, 8, 187, 113].  Tensor sizes: [8, 13498, 187, 113]
2025-03-11 18:31:12.676459 test begin: paddle.broadcast_to(Tensor([8, 13566, 145, 145],"bool"), list[8,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([8, 13566, 145, 145],"bool"), list[8,8,145,145,], ) 
 The expanded size of the tensor (8) must match the existing size (13566) at non-singleton dimension 1.  Target sizes: [8, 8, 145, 145].  Tensor sizes: [8, 13566, 145, 145]
2025-03-11 18:31:13.163615 test begin: paddle.broadcast_to(Tensor([8, 13570, 186, 113],"bool"), list[8,8,186,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 13570, 186, 113],"bool"), list[8,8,186,113,], ) 
 The expanded size of the tensor (8) must match the existing size (13570) at non-singleton dimension 1.  Target sizes: [8, 8, 186, 113].  Tensor sizes: [8, 13570, 186, 113]
2025-03-11 18:31:13.655987 test begin: paddle.broadcast_to(Tensor([8, 13644, 185, 113],"bool"), list[8,8,185,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 13644, 185, 113],"bool"), list[8,8,185,113,], ) 
 The expanded size of the tensor (8) must match the existing size (13644) at non-singleton dimension 1.  Target sizes: [8, 8, 185, 113].  Tensor sizes: [8, 13644, 185, 113]
2025-03-11 18:31:14.194104 test begin: paddle.broadcast_to(Tensor([8, 13718, 184, 113],"bool"), list[8,8,184,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 13718, 184, 113],"bool"), list[8,8,184,113,], ) 
 The expanded size of the tensor (8) must match the existing size (13718) at non-singleton dimension 1.  Target sizes: [8, 8, 184, 113].  Tensor sizes: [8, 13718, 184, 113]
2025-03-11 18:31:14.686431 test begin: paddle.broadcast_to(Tensor([8, 13755, 144, 144],"bool"), list[8,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([8, 13755, 144, 144],"bool"), list[8,8,144,144,], ) 
 The expanded size of the tensor (8) must match the existing size (13755) at non-singleton dimension 1.  Target sizes: [8, 8, 144, 144].  Tensor sizes: [8, 13755, 144, 144]
2025-03-11 18:31:15.189866 test begin: paddle.broadcast_to(Tensor([8, 13793, 183, 113],"bool"), list[8,8,183,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 13793, 183, 113],"bool"), list[8,8,183,113,], ) 
 The expanded size of the tensor (8) must match the existing size (13793) at non-singleton dimension 1.  Target sizes: [8, 8, 183, 113].  Tensor sizes: [8, 13793, 183, 113]
2025-03-11 18:31:15.677960 test begin: paddle.broadcast_to(Tensor([8, 138655, 17, 121],"bool"), list[8,8,17,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 138655, 17, 121],"bool"), list[8,8,17,121,], ) 
 The expanded size of the tensor (8) must match the existing size (138655) at non-singleton dimension 1.  Target sizes: [8, 8, 17, 121].  Tensor sizes: [8, 138655, 17, 121]
2025-03-11 18:31:16.220420 test begin: paddle.broadcast_to(Tensor([8, 13869, 182, 113],"bool"), list[8,8,182,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 13869, 182, 113],"bool"), list[8,8,182,113,], ) 
 The expanded size of the tensor (8) must match the existing size (13869) at non-singleton dimension 1.  Target sizes: [8, 8, 182, 113].  Tensor sizes: [8, 13869, 182, 113]
2025-03-11 18:31:16.713189 test begin: paddle.broadcast_to(Tensor([8, 13945, 181, 113],"bool"), list[8,8,181,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 13945, 181, 113],"bool"), list[8,8,181,113,], ) 
 The expanded size of the tensor (8) must match the existing size (13945) at non-singleton dimension 1.  Target sizes: [8, 8, 181, 113].  Tensor sizes: [8, 13945, 181, 113]
2025-03-11 18:31:17.276605 test begin: paddle.broadcast_to(Tensor([8, 13948, 143, 143],"bool"), list[8,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([8, 13948, 143, 143],"bool"), list[8,8,143,143,], ) 
 The expanded size of the tensor (8) must match the existing size (13948) at non-singleton dimension 1.  Target sizes: [8, 8, 143, 143].  Tensor sizes: [8, 13948, 143, 143]
2025-03-11 18:31:17.777351 test begin: paddle.broadcast_to(Tensor([8, 140223, 18, 113],"bool"), list[8,8,18,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 140223, 18, 113],"bool"), list[8,8,18,113,], ) 
 The expanded size of the tensor (8) must match the existing size (140223) at non-singleton dimension 1.  Target sizes: [8, 8, 18, 113].  Tensor sizes: [8, 140223, 18, 113]
2025-03-11 18:31:18.321150 test begin: paddle.broadcast_to(Tensor([8, 14023, 180, 113],"bool"), list[8,8,180,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 14023, 180, 113],"bool"), list[8,8,180,113,], ) 
 The expanded size of the tensor (8) must match the existing size (14023) at non-singleton dimension 1.  Target sizes: [8, 8, 180, 113].  Tensor sizes: [8, 14023, 180, 113]
2025-03-11 18:31:18.857506 test begin: paddle.broadcast_to(Tensor([8, 140846, 45, 45],"bool"), list[8,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([8, 140846, 45, 45],"bool"), list[8,8,45,45,], ) 
 The expanded size of the tensor (8) must match the existing size (140846) at non-singleton dimension 1.  Target sizes: [8, 8, 45, 45].  Tensor sizes: [8, 140846, 45, 45]
2025-03-11 18:31:19.346584 test begin: paddle.broadcast_to(Tensor([8, 14101, 179, 113],"bool"), list[8,8,179,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 14101, 179, 113],"bool"), list[8,8,179,113,], ) 
 The expanded size of the tensor (8) must match the existing size (14101) at non-singleton dimension 1.  Target sizes: [8, 8, 179, 113].  Tensor sizes: [8, 14101, 179, 113]
2025-03-11 18:31:19.836857 test begin: paddle.broadcast_to(Tensor([8, 14145, 142, 142],"bool"), list[8,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([8, 14145, 142, 142],"bool"), list[8,8,142,142,], ) 
 The expanded size of the tensor (8) must match the existing size (14145) at non-singleton dimension 1.  Target sizes: [8, 8, 142, 142].  Tensor sizes: [8, 14145, 142, 142]
2025-03-11 18:31:20.332558 test begin: paddle.broadcast_to(Tensor([8, 14180, 178, 113],"bool"), list[8,8,178,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 14180, 178, 113],"bool"), list[8,8,178,113,], ) 
 The expanded size of the tensor (8) must match the existing size (14180) at non-singleton dimension 1.  Target sizes: [8, 8, 178, 113].  Tensor sizes: [8, 14180, 178, 113]
2025-03-11 18:31:20.821390 test begin: paddle.broadcast_to(Tensor([8, 14260, 177, 113],"bool"), list[8,8,177,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 14260, 177, 113],"bool"), list[8,8,177,113,], ) 
 The expanded size of the tensor (8) must match the existing size (14260) at non-singleton dimension 1.  Target sizes: [8, 8, 177, 113].  Tensor sizes: [8, 14260, 177, 113]
2025-03-11 18:31:21.361889 test begin: paddle.broadcast_to(Tensor([8, 14341, 176, 113],"bool"), list[8,8,176,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 14341, 176, 113],"bool"), list[8,8,176,113,], ) 
 The expanded size of the tensor (8) must match the existing size (14341) at non-singleton dimension 1.  Target sizes: [8, 8, 176, 113].  Tensor sizes: [8, 14341, 176, 113]
2025-03-11 18:31:21.850434 test begin: paddle.broadcast_to(Tensor([8, 14346, 141, 141],"bool"), list[8,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([8, 14346, 141, 141],"bool"), list[8,8,141,141,], ) 
 The expanded size of the tensor (8) must match the existing size (14346) at non-singleton dimension 1.  Target sizes: [8, 8, 141, 141].  Tensor sizes: [8, 14346, 141, 141]
2025-03-11 18:31:22.341612 test begin: paddle.broadcast_to(Tensor([8, 1440469, 6, 33],"bool"), list[8,8,6,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1440469, 6, 33],"bool"), list[8,8,6,33,], ) 
 The expanded size of the tensor (8) must match the existing size (1440469) at non-singleton dimension 1.  Target sizes: [8, 8, 6, 33].  Tensor sizes: [8, 1440469, 6, 33]
2025-03-11 18:31:22.829825 test begin: paddle.broadcast_to(Tensor([8, 14423, 175, 113],"bool"), list[8,8,175,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 14423, 175, 113],"bool"), list[8,8,175,113,], ) 
 The expanded size of the tensor (8) must match the existing size (14423) at non-singleton dimension 1.  Target sizes: [8, 8, 175, 113].  Tensor sizes: [8, 14423, 175, 113]
2025-03-11 18:31:23.314238 test begin: paddle.broadcast_to(Tensor([8, 14506, 174, 113],"bool"), list[8,8,174,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 14506, 174, 113],"bool"), list[8,8,174,113,], ) 
 The expanded size of the tensor (8) must match the existing size (14506) at non-singleton dimension 1.  Target sizes: [8, 8, 174, 113].  Tensor sizes: [8, 14506, 174, 113]
2025-03-11 18:31:23.860999 test begin: paddle.broadcast_to(Tensor([8, 1455167, 14, 14],"bool"), list[8,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([8, 1455167, 14, 14],"bool"), list[8,8,14,14,], ) 
 The expanded size of the tensor (8) must match the existing size (1455167) at non-singleton dimension 1.  Target sizes: [8, 8, 14, 14].  Tensor sizes: [8, 1455167, 14, 14]
2025-03-11 18:31:24.350635 test begin: paddle.broadcast_to(Tensor([8, 14552, 140, 140],"bool"), list[8,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([8, 14552, 140, 140],"bool"), list[8,8,140,140,], ) 
 The expanded size of the tensor (8) must match the existing size (14552) at non-singleton dimension 1.  Target sizes: [8, 8, 140, 140].  Tensor sizes: [8, 14552, 140, 140]
2025-03-11 18:31:24.834985 test begin: paddle.broadcast_to(Tensor([8, 14590, 173, 113],"bool"), list[8,8,173,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 14590, 173, 113],"bool"), list[8,8,173,113,], ) 
 The expanded size of the tensor (8) must match the existing size (14590) at non-singleton dimension 1.  Target sizes: [8, 8, 173, 113].  Tensor sizes: [8, 14590, 173, 113]
2025-03-11 18:31:25.329343 test begin: paddle.broadcast_to(Tensor([8, 14675, 172, 113],"bool"), list[8,8,172,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 14675, 172, 113],"bool"), list[8,8,172,113,], ) 
 The expanded size of the tensor (8) must match the existing size (14675) at non-singleton dimension 1.  Target sizes: [8, 8, 172, 113].  Tensor sizes: [8, 14675, 172, 113]
2025-03-11 18:31:25.873187 test begin: paddle.broadcast_to(Tensor([8, 147321, 16, 121],"bool"), list[8,8,16,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 147321, 16, 121],"bool"), list[8,8,16,121,], ) 
 The expanded size of the tensor (8) must match the existing size (147321) at non-singleton dimension 1.  Target sizes: [8, 8, 16, 121].  Tensor sizes: [8, 147321, 16, 121]
2025-03-11 18:31:26.359270 test begin: paddle.broadcast_to(Tensor([8, 147321, 44, 44],"bool"), list[8,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([8, 147321, 44, 44],"bool"), list[8,8,44,44,], ) 
 The expanded size of the tensor (8) must match the existing size (147321) at non-singleton dimension 1.  Target sizes: [8, 8, 44, 44].  Tensor sizes: [8, 147321, 44, 44]
2025-03-11 18:31:26.903189 test begin: paddle.broadcast_to(Tensor([8, 14761, 171, 113],"bool"), list[8,8,171,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 14761, 171, 113],"bool"), list[8,8,171,113,], ) 
 The expanded size of the tensor (8) must match the existing size (14761) at non-singleton dimension 1.  Target sizes: [8, 8, 171, 113].  Tensor sizes: [8, 14761, 171, 113]
2025-03-11 18:31:27.407282 test begin: paddle.broadcast_to(Tensor([8, 14762, 139, 139],"bool"), list[8,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([8, 14762, 139, 139],"bool"), list[8,8,139,139,], ) 
 The expanded size of the tensor (8) must match the existing size (14762) at non-singleton dimension 1.  Target sizes: [8, 8, 139, 139].  Tensor sizes: [8, 14762, 139, 139]
2025-03-11 18:31:27.902586 test begin: paddle.broadcast_to(Tensor([8, 14825, 159, 121],"bool"), list[8,8,159,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 14825, 159, 121],"bool"), list[8,8,159,121,], ) 
 The expanded size of the tensor (8) must match the existing size (14825) at non-singleton dimension 1.  Target sizes: [8, 8, 159, 121].  Tensor sizes: [8, 14825, 159, 121]
2025-03-11 18:31:28.447412 test begin: paddle.broadcast_to(Tensor([8, 148471, 17, 113],"bool"), list[8,8,17,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 148471, 17, 113],"bool"), list[8,8,17,113,], ) 
 The expanded size of the tensor (8) must match the existing size (148471) at non-singleton dimension 1.  Target sizes: [8, 8, 17, 113].  Tensor sizes: [8, 148471, 17, 113]
2025-03-11 18:31:28.935776 test begin: paddle.broadcast_to(Tensor([8, 14848, 170, 113],"bool"), list[8,8,170,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 14848, 170, 113],"bool"), list[8,8,170,113,], ) 
 The expanded size of the tensor (8) must match the existing size (14848) at non-singleton dimension 1.  Target sizes: [8, 8, 170, 113].  Tensor sizes: [8, 14848, 170, 113]
2025-03-11 18:31:29.432610 test begin: paddle.broadcast_to(Tensor([8, 14919, 158, 121],"bool"), list[8,8,158,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 14919, 158, 121],"bool"), list[8,8,158,121,], ) 
 The expanded size of the tensor (8) must match the existing size (14919) at non-singleton dimension 1.  Target sizes: [8, 8, 158, 121].  Tensor sizes: [8, 14919, 158, 121]
2025-03-11 18:31:29.927156 test begin: paddle.broadcast_to(Tensor([8, 14935, 169, 113],"bool"), list[8,8,169,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 14935, 169, 113],"bool"), list[8,8,169,113,], ) 
 The expanded size of the tensor (8) must match the existing size (14935) at non-singleton dimension 1.  Target sizes: [8, 8, 169, 113].  Tensor sizes: [8, 14935, 169, 113]
2025-03-11 18:31:30.504191 test begin: paddle.broadcast_to(Tensor([8, 14977, 138, 138],"bool"), list[8,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([8, 14977, 138, 138],"bool"), list[8,8,138,138,], ) 
 The expanded size of the tensor (8) must match the existing size (14977) at non-singleton dimension 1.  Target sizes: [8, 8, 138, 138].  Tensor sizes: [8, 14977, 138, 138]
2025-03-11 18:31:31.003755 test begin: paddle.broadcast_to(Tensor([8, 15014, 157, 121],"bool"), list[8,8,157,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 15014, 157, 121],"bool"), list[8,8,157,121,], ) 
 The expanded size of the tensor (8) must match the existing size (15014) at non-singleton dimension 1.  Target sizes: [8, 8, 157, 121].  Tensor sizes: [8, 15014, 157, 121]
2025-03-11 18:31:31.491426 test begin: paddle.broadcast_to(Tensor([8, 15024, 168, 113],"bool"), list[8,8,168,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 15024, 168, 113],"bool"), list[8,8,168,113,], ) 
 The expanded size of the tensor (8) must match the existing size (15024) at non-singleton dimension 1.  Target sizes: [8, 8, 168, 113].  Tensor sizes: [8, 15024, 168, 113]
2025-03-11 18:31:32.031395 test begin: paddle.broadcast_to(Tensor([8, 15110, 156, 121],"bool"), list[8,8,156,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 15110, 156, 121],"bool"), list[8,8,156,121,], ) 
 The expanded size of the tensor (8) must match the existing size (15110) at non-singleton dimension 1.  Target sizes: [8, 8, 156, 121].  Tensor sizes: [8, 15110, 156, 121]
2025-03-11 18:31:32.620578 test begin: paddle.broadcast_to(Tensor([8, 15114, 167, 113],"bool"), list[8,8,167,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 15114, 167, 113],"bool"), list[8,8,167,113,], ) 
 The expanded size of the tensor (8) must match the existing size (15114) at non-singleton dimension 1.  Target sizes: [8, 8, 167, 113].  Tensor sizes: [8, 15114, 167, 113]
2025-03-11 18:31:32.984232 test begin: paddle.broadcast_to(Tensor([8, 151629, 57, 33],"bool"), list[8,8,57,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 151629, 57, 33],"bool"), list[8,8,57,33,], ) 
 The expanded size of the tensor (8) must match the existing size (151629) at non-singleton dimension 1.  Target sizes: [8, 8, 57, 33].  Tensor sizes: [8, 151629, 57, 33]
2025-03-11 18:31:33.476805 test begin: paddle.broadcast_to(Tensor([8, 15196, 137, 137],"bool"), list[8,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([8, 15196, 137, 137],"bool"), list[8,8,137,137,], ) 
 The expanded size of the tensor (8) must match the existing size (15196) at non-singleton dimension 1.  Target sizes: [8, 8, 137, 137].  Tensor sizes: [8, 15196, 137, 137]
2025-03-11 18:31:33.973404 test begin: paddle.broadcast_to(Tensor([8, 15205, 166, 113],"bool"), list[8,8,166,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 15205, 166, 113],"bool"), list[8,8,166,113,], ) 
 The expanded size of the tensor (8) must match the existing size (15205) at non-singleton dimension 1.  Target sizes: [8, 8, 166, 113].  Tensor sizes: [8, 15205, 166, 113]
2025-03-11 18:31:34.470413 test begin: paddle.broadcast_to(Tensor([8, 15208, 155, 121],"bool"), list[8,8,155,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 15208, 155, 121],"bool"), list[8,8,155,121,], ) 
 The expanded size of the tensor (8) must match the existing size (15208) at non-singleton dimension 1.  Target sizes: [8, 8, 155, 121].  Tensor sizes: [8, 15208, 155, 121]
2025-03-11 18:31:35.019561 test begin: paddle.broadcast_to(Tensor([8, 15298, 165, 113],"bool"), list[8,8,165,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 15298, 165, 113],"bool"), list[8,8,165,113,], ) 
 The expanded size of the tensor (8) must match the existing size (15298) at non-singleton dimension 1.  Target sizes: [8, 8, 165, 113].  Tensor sizes: [8, 15298, 165, 113]
2025-03-11 18:31:35.518517 test begin: paddle.broadcast_to(Tensor([8, 15307, 154, 121],"bool"), list[8,8,154,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 15307, 154, 121],"bool"), list[8,8,154,121,], ) 
 The expanded size of the tensor (8) must match the existing size (15307) at non-singleton dimension 1.  Target sizes: [8, 8, 154, 121].  Tensor sizes: [8, 15307, 154, 121]
2025-03-11 18:31:36.014721 test begin: paddle.broadcast_to(Tensor([8, 15391, 164, 113],"bool"), list[8,8,164,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 15391, 164, 113],"bool"), list[8,8,164,113,], ) 
 The expanded size of the tensor (8) must match the existing size (15391) at non-singleton dimension 1.  Target sizes: [8, 8, 164, 113].  Tensor sizes: [8, 15391, 164, 113]
2025-03-11 18:31:36.522730 test begin: paddle.broadcast_to(Tensor([8, 15407, 153, 121],"bool"), list[8,8,153,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 15407, 153, 121],"bool"), list[8,8,153,121,], ) 
 The expanded size of the tensor (8) must match the existing size (15407) at non-singleton dimension 1.  Target sizes: [8, 8, 153, 121].  Tensor sizes: [8, 15407, 153, 121]
2025-03-11 18:31:37.029279 test begin: paddle.broadcast_to(Tensor([8, 15421, 136, 136],"bool"), list[8,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([8, 15421, 136, 136],"bool"), list[8,8,136,136,], ) 
 The expanded size of the tensor (8) must match the existing size (15421) at non-singleton dimension 1.  Target sizes: [8, 8, 136, 136].  Tensor sizes: [8, 15421, 136, 136]
2025-03-11 18:31:37.536629 test begin: paddle.broadcast_to(Tensor([8, 154253, 43, 43],"bool"), list[8,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([8, 154253, 43, 43],"bool"), list[8,8,43,43,], ) 
 The expanded size of the tensor (8) must match the existing size (154253) at non-singleton dimension 1.  Target sizes: [8, 8, 43, 43].  Tensor sizes: [8, 154253, 43, 43]
2025-03-11 18:31:38.050986 test begin: paddle.broadcast_to(Tensor([8, 154336, 56, 33],"bool"), list[8,8,56,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 154336, 56, 33],"bool"), list[8,8,56,33,], ) 
 The expanded size of the tensor (8) must match the existing size (154336) at non-singleton dimension 1.  Target sizes: [8, 8, 56, 33].  Tensor sizes: [8, 154336, 56, 33]
2025-03-11 18:31:38.547839 test begin: paddle.broadcast_to(Tensor([8, 15485, 163, 113],"bool"), list[8,8,163,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 15485, 163, 113],"bool"), list[8,8,163,113,], ) 
 The expanded size of the tensor (8) must match the existing size (15485) at non-singleton dimension 1.  Target sizes: [8, 8, 163, 113].  Tensor sizes: [8, 15485, 163, 113]
2025-03-11 18:31:39.038152 test begin: paddle.broadcast_to(Tensor([8, 15508, 152, 121],"bool"), list[8,8,152,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 15508, 152, 121],"bool"), list[8,8,152,121,], ) 
 The expanded size of the tensor (8) must match the existing size (15508) at non-singleton dimension 1.  Target sizes: [8, 8, 152, 121].  Tensor sizes: [8, 15508, 152, 121]
2025-03-11 18:31:39.538694 test begin: paddle.broadcast_to(Tensor([8, 15581, 162, 113],"bool"), list[8,8,162,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 15581, 162, 113],"bool"), list[8,8,162,113,], ) 
 The expanded size of the tensor (8) must match the existing size (15581) at non-singleton dimension 1.  Target sizes: [8, 8, 162, 113].  Tensor sizes: [8, 15581, 162, 113]
2025-03-11 18:31:40.030658 test begin: paddle.broadcast_to(Tensor([8, 15611, 151, 121],"bool"), list[8,8,151,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 15611, 151, 121],"bool"), list[8,8,151,121,], ) 
 The expanded size of the tensor (8) must match the existing size (15611) at non-singleton dimension 1.  Target sizes: [8, 8, 151, 121].  Tensor sizes: [8, 15611, 151, 121]
2025-03-11 18:31:40.528747 test begin: paddle.broadcast_to(Tensor([8, 15650, 135, 135],"bool"), list[8,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([8, 15650, 135, 135],"bool"), list[8,8,135,135,], ) 
 The expanded size of the tensor (8) must match the existing size (15650) at non-singleton dimension 1.  Target sizes: [8, 8, 135, 135].  Tensor sizes: [8, 15650, 135, 135]
2025-03-11 18:31:41.066018 test begin: paddle.broadcast_to(Tensor([8, 15678, 161, 113],"bool"), list[8,8,161,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 15678, 161, 113],"bool"), list[8,8,161,113,], ) 
 The expanded size of the tensor (8) must match the existing size (15678) at non-singleton dimension 1.  Target sizes: [8, 8, 161, 113].  Tensor sizes: [8, 15678, 161, 113]
2025-03-11 18:31:41.560705 test begin: paddle.broadcast_to(Tensor([8, 157142, 15, 121],"bool"), list[8,8,15,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 157142, 15, 121],"bool"), list[8,8,15,121,], ) 
 The expanded size of the tensor (8) must match the existing size (157142) at non-singleton dimension 1.  Target sizes: [8, 8, 15, 121].  Tensor sizes: [8, 157142, 15, 121]
2025-03-11 18:31:42.152097 test begin: paddle.broadcast_to(Tensor([8, 157142, 55, 33],"bool"), list[8,8,55,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 157142, 55, 33],"bool"), list[8,8,55,33,], ) 
 The expanded size of the tensor (8) must match the existing size (157142) at non-singleton dimension 1.  Target sizes: [8, 8, 55, 33].  Tensor sizes: [8, 157142, 55, 33]
2025-03-11 18:31:42.515951 test begin: paddle.broadcast_to(Tensor([8, 15715, 150, 121],"bool"), list[8,8,150,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 15715, 150, 121],"bool"), list[8,8,150,121,], ) 
 The expanded size of the tensor (8) must match the existing size (15715) at non-singleton dimension 1.  Target sizes: [8, 8, 150, 121].  Tensor sizes: [8, 15715, 150, 121]
2025-03-11 18:31:43.009694 test begin: paddle.broadcast_to(Tensor([8, 157751, 16, 113],"bool"), list[8,8,16,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 157751, 16, 113],"bool"), list[8,8,16,113,], ) 
 The expanded size of the tensor (8) must match the existing size (157751) at non-singleton dimension 1.  Target sizes: [8, 8, 16, 113].  Tensor sizes: [8, 157751, 16, 113]
2025-03-11 18:31:43.499580 test begin: paddle.broadcast_to(Tensor([8, 15776, 160, 113],"bool"), list[8,8,160,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 15776, 160, 113],"bool"), list[8,8,160,113,], ) 
 The expanded size of the tensor (8) must match the existing size (15776) at non-singleton dimension 1.  Target sizes: [8, 8, 160, 113].  Tensor sizes: [8, 15776, 160, 113]
2025-03-11 18:31:43.991502 test begin: paddle.broadcast_to(Tensor([8, 15820, 149, 121],"bool"), list[8,8,149,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 15820, 149, 121],"bool"), list[8,8,149,121,], ) 
 The expanded size of the tensor (8) must match the existing size (15820) at non-singleton dimension 1.  Target sizes: [8, 8, 149, 121].  Tensor sizes: [8, 15820, 149, 121]
2025-03-11 18:31:44.525594 test begin: paddle.broadcast_to(Tensor([8, 15875, 159, 113],"bool"), list[8,8,159,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 15875, 159, 113],"bool"), list[8,8,159,113,], ) 
 The expanded size of the tensor (8) must match the existing size (15875) at non-singleton dimension 1.  Target sizes: [8, 8, 159, 113].  Tensor sizes: [8, 15875, 159, 113]
2025-03-11 18:31:45.013657 test begin: paddle.broadcast_to(Tensor([8, 15884, 134, 134],"bool"), list[8,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([8, 15884, 134, 134],"bool"), list[8,8,134,134,], ) 
 The expanded size of the tensor (8) must match the existing size (15884) at non-singleton dimension 1.  Target sizes: [8, 8, 134, 134].  Tensor sizes: [8, 15884, 134, 134]
2025-03-11 18:31:45.506808 test begin: paddle.broadcast_to(Tensor([8, 15927, 148, 121],"bool"), list[8,8,148,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 15927, 148, 121],"bool"), list[8,8,148,121,], ) 
 The expanded size of the tensor (8) must match the existing size (15927) at non-singleton dimension 1.  Target sizes: [8, 8, 148, 121].  Tensor sizes: [8, 15927, 148, 121]
2025-03-11 18:31:46.001163 test begin: paddle.broadcast_to(Tensor([8, 15975, 158, 113],"bool"), list[8,8,158,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 15975, 158, 113],"bool"), list[8,8,158,113,], ) 
 The expanded size of the tensor (8) must match the existing size (15975) at non-singleton dimension 1.  Target sizes: [8, 8, 158, 113].  Tensor sizes: [8, 15975, 158, 113]
2025-03-11 18:31:46.493534 test begin: paddle.broadcast_to(Tensor([8, 160053, 54, 33],"bool"), list[8,8,54,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 160053, 54, 33],"bool"), list[8,8,54,33,], ) 
 The expanded size of the tensor (8) must match the existing size (160053) at non-singleton dimension 1.  Target sizes: [8, 8, 54, 33].  Tensor sizes: [8, 160053, 54, 33]
2025-03-11 18:31:47.029769 test begin: paddle.broadcast_to(Tensor([8, 16035, 147, 121],"bool"), list[8,8,147,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 16035, 147, 121],"bool"), list[8,8,147,121,], ) 
 The expanded size of the tensor (8) must match the existing size (16035) at non-singleton dimension 1.  Target sizes: [8, 8, 147, 121].  Tensor sizes: [8, 16035, 147, 121]
2025-03-11 18:31:47.557205 test begin: paddle.broadcast_to(Tensor([8, 16077, 157, 113],"bool"), list[8,8,157,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 16077, 157, 113],"bool"), list[8,8,157,113,], ) 
 The expanded size of the tensor (8) must match the existing size (16077) at non-singleton dimension 1.  Target sizes: [8, 8, 157, 113].  Tensor sizes: [8, 16077, 157, 113]
2025-03-11 18:31:48.072207 test begin: paddle.broadcast_to(Tensor([8, 16124, 133, 133],"bool"), list[8,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([8, 16124, 133, 133],"bool"), list[8,8,133,133,], ) 
 The expanded size of the tensor (8) must match the existing size (16124) at non-singleton dimension 1.  Target sizes: [8, 8, 133, 133].  Tensor sizes: [8, 16124, 133, 133]
2025-03-11 18:31:48.564828 test begin: paddle.broadcast_to(Tensor([8, 16145, 146, 121],"bool"), list[8,8,146,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 16145, 146, 121],"bool"), list[8,8,146,121,], ) 
 The expanded size of the tensor (8) must match the existing size (16145) at non-singleton dimension 1.  Target sizes: [8, 8, 146, 121].  Tensor sizes: [8, 16145, 146, 121]
2025-03-11 18:31:49.060376 test begin: paddle.broadcast_to(Tensor([8, 161686, 42, 42],"bool"), list[8,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([8, 161686, 42, 42],"bool"), list[8,8,42,42,], ) 
 The expanded size of the tensor (8) must match the existing size (161686) at non-singleton dimension 1.  Target sizes: [8, 8, 42, 42].  Tensor sizes: [8, 161686, 42, 42]
2025-03-11 18:31:49.560459 test begin: paddle.broadcast_to(Tensor([8, 16180, 156, 113],"bool"), list[8,8,156,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 16180, 156, 113],"bool"), list[8,8,156,113,], ) 
 The expanded size of the tensor (8) must match the existing size (16180) at non-singleton dimension 1.  Target sizes: [8, 8, 156, 113].  Tensor sizes: [8, 16180, 156, 113]
2025-03-11 18:31:50.058419 test begin: paddle.broadcast_to(Tensor([8, 16257, 145, 121],"bool"), list[8,8,145,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 16257, 145, 121],"bool"), list[8,8,145,121,], ) 
 The expanded size of the tensor (8) must match the existing size (16257) at non-singleton dimension 1.  Target sizes: [8, 8, 145, 121].  Tensor sizes: [8, 16257, 145, 121]
2025-03-11 18:31:50.560900 test begin: paddle.broadcast_to(Tensor([8, 16284, 155, 113],"bool"), list[8,8,155,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 16284, 155, 113],"bool"), list[8,8,155,113,], ) 
 The expanded size of the tensor (8) must match the existing size (16284) at non-singleton dimension 1.  Target sizes: [8, 8, 155, 113].  Tensor sizes: [8, 16284, 155, 113]
2025-03-11 18:31:51.061744 test begin: paddle.broadcast_to(Tensor([8, 163072, 53, 33],"bool"), list[8,8,53,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 163072, 53, 33],"bool"), list[8,8,53,33,], ) 
 The expanded size of the tensor (8) must match the existing size (163072) at non-singleton dimension 1.  Target sizes: [8, 8, 53, 33].  Tensor sizes: [8, 163072, 53, 33]
2025-03-11 18:31:51.560476 test begin: paddle.broadcast_to(Tensor([8, 16369, 132, 132],"bool"), list[8,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([8, 16369, 132, 132],"bool"), list[8,8,132,132,], ) 
 The expanded size of the tensor (8) must match the existing size (16369) at non-singleton dimension 1.  Target sizes: [8, 8, 132, 132].  Tensor sizes: [8, 16369, 132, 132]
2025-03-11 18:31:52.059733 test begin: paddle.broadcast_to(Tensor([8, 16369, 144, 121],"bool"), list[8,8,144,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 16369, 144, 121],"bool"), list[8,8,144,121,], ) 
 The expanded size of the tensor (8) must match the existing size (16369) at non-singleton dimension 1.  Target sizes: [8, 8, 144, 121].  Tensor sizes: [8, 16369, 144, 121]
2025-03-11 18:31:52.559079 test begin: paddle.broadcast_to(Tensor([8, 16390, 154, 113],"bool"), list[8,8,154,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 16390, 154, 113],"bool"), list[8,8,154,113,], ) 
 The expanded size of the tensor (8) must match the existing size (16390) at non-singleton dimension 1.  Target sizes: [8, 8, 154, 113].  Tensor sizes: [8, 16390, 154, 113]
2025-03-11 18:31:53.053933 test begin: paddle.broadcast_to(Tensor([8, 16484, 143, 121],"bool"), list[8,8,143,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 16484, 143, 121],"bool"), list[8,8,143,121,], ) 
 The expanded size of the tensor (8) must match the existing size (16484) at non-singleton dimension 1.  Target sizes: [8, 8, 143, 121].  Tensor sizes: [8, 16484, 143, 121]
2025-03-11 18:31:53.546212 test begin: paddle.broadcast_to(Tensor([8, 16497, 153, 113],"bool"), list[8,8,153,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 16497, 153, 113],"bool"), list[8,8,153,113,], ) 
 The expanded size of the tensor (8) must match the existing size (16497) at non-singleton dimension 1.  Target sizes: [8, 8, 153, 113].  Tensor sizes: [8, 16497, 153, 113]
2025-03-11 18:31:54.078581 test begin: paddle.broadcast_to(Tensor([8, 16600, 142, 121],"bool"), list[8,8,142,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 16600, 142, 121],"bool"), list[8,8,142,121,], ) 
 The expanded size of the tensor (8) must match the existing size (16600) at non-singleton dimension 1.  Target sizes: [8, 8, 142, 121].  Tensor sizes: [8, 16600, 142, 121]
2025-03-11 18:31:54.588379 test begin: paddle.broadcast_to(Tensor([8, 16606, 152, 113],"bool"), list[8,8,152,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 16606, 152, 113],"bool"), list[8,8,152,113,], ) 
 The expanded size of the tensor (8) must match the existing size (16606) at non-singleton dimension 1.  Target sizes: [8, 8, 152, 113].  Tensor sizes: [8, 16606, 152, 113]
2025-03-11 18:31:55.138883 test begin: paddle.broadcast_to(Tensor([8, 16620, 131, 131],"bool"), list[8,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([8, 16620, 131, 131],"bool"), list[8,8,131,131,], ) 
 The expanded size of the tensor (8) must match the existing size (16620) at non-singleton dimension 1.  Target sizes: [8, 8, 131, 131].  Tensor sizes: [8, 16620, 131, 131]
2025-03-11 18:31:55.632897 test begin: paddle.broadcast_to(Tensor([8, 166208, 52, 33],"bool"), list[8,8,52,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 166208, 52, 33],"bool"), list[8,8,52,33,], ) 
 The expanded size of the tensor (8) must match the existing size (166208) at non-singleton dimension 1.  Target sizes: [8, 8, 52, 33].  Tensor sizes: [8, 166208, 52, 33]
2025-03-11 18:31:56.164486 test begin: paddle.broadcast_to(Tensor([8, 16716, 151, 113],"bool"), list[8,8,151,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 16716, 151, 113],"bool"), list[8,8,151,113,], ) 
 The expanded size of the tensor (8) must match the existing size (16716) at non-singleton dimension 1.  Target sizes: [8, 8, 151, 113].  Tensor sizes: [8, 16716, 151, 113]
2025-03-11 18:31:56.660335 test begin: paddle.broadcast_to(Tensor([8, 16718, 141, 121],"bool"), list[8,8,141,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 16718, 141, 121],"bool"), list[8,8,141,121,], ) 
 The expanded size of the tensor (8) must match the existing size (16718) at non-singleton dimension 1.  Target sizes: [8, 8, 141, 121].  Tensor sizes: [8, 16718, 141, 121]
2025-03-11 18:31:57.165308 test begin: paddle.broadcast_to(Tensor([8, 168268, 15, 113],"bool"), list[8,8,15,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 168268, 15, 113],"bool"), list[8,8,15,113,], ) 
 The expanded size of the tensor (8) must match the existing size (168268) at non-singleton dimension 1.  Target sizes: [8, 8, 15, 113].  Tensor sizes: [8, 168268, 15, 113]
2025-03-11 18:31:57.697550 test begin: paddle.broadcast_to(Tensor([8, 16827, 150, 113],"bool"), list[8,8,150,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 16827, 150, 113],"bool"), list[8,8,150,113,], ) 
 The expanded size of the tensor (8) must match the existing size (16827) at non-singleton dimension 1.  Target sizes: [8, 8, 150, 113].  Tensor sizes: [8, 16827, 150, 113]
2025-03-11 18:31:58.189634 test begin: paddle.broadcast_to(Tensor([8, 168367, 14, 121],"bool"), list[8,8,14,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 168367, 14, 121],"bool"), list[8,8,14,121,], ) 
 The expanded size of the tensor (8) must match the existing size (168367) at non-singleton dimension 1.  Target sizes: [8, 8, 14, 121].  Tensor sizes: [8, 168367, 14, 121]
2025-03-11 18:31:58.746526 test begin: paddle.broadcast_to(Tensor([8, 16837, 140, 121],"bool"), list[8,8,140,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 16837, 140, 121],"bool"), list[8,8,140,121,], ) 
 The expanded size of the tensor (8) must match the existing size (16837) at non-singleton dimension 1.  Target sizes: [8, 8, 140, 121].  Tensor sizes: [8, 16837, 140, 121]
2025-03-11 18:31:59.290850 test begin: paddle.broadcast_to(Tensor([8, 1687649, 13, 13],"bool"), list[8,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([8, 1687649, 13, 13],"bool"), list[8,8,13,13,], ) 
 The expanded size of the tensor (8) must match the existing size (1687649) at non-singleton dimension 1.  Target sizes: [8, 8, 13, 13].  Tensor sizes: [8, 1687649, 13, 13]
2025-03-11 18:31:59.874444 test begin: paddle.broadcast_to(Tensor([8, 16877, 130, 130],"bool"), list[8,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([8, 16877, 130, 130],"bool"), list[8,8,130,130,], ) 
 The expanded size of the tensor (8) must match the existing size (16877) at non-singleton dimension 1.  Target sizes: [8, 8, 130, 130].  Tensor sizes: [8, 16877, 130, 130]
2025-03-11 18:32:00.376938 test begin: paddle.broadcast_to(Tensor([8, 16940, 149, 113],"bool"), list[8,8,149,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 16940, 149, 113],"bool"), list[8,8,149,113,], ) 
 The expanded size of the tensor (8) must match the existing size (16940) at non-singleton dimension 1.  Target sizes: [8, 8, 149, 113].  Tensor sizes: [8, 16940, 149, 113]
2025-03-11 18:32:00.912778 test begin: paddle.broadcast_to(Tensor([8, 169467, 51, 33],"bool"), list[8,8,51,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 169467, 51, 33],"bool"), list[8,8,51,33,], ) 
 The expanded size of the tensor (8) must match the existing size (169467) at non-singleton dimension 1.  Target sizes: [8, 8, 51, 33].  Tensor sizes: [8, 169467, 51, 33]
2025-03-11 18:32:01.507844 test begin: paddle.broadcast_to(Tensor([8, 16958, 139, 121],"bool"), list[8,8,139,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 16958, 139, 121],"bool"), list[8,8,139,121,], ) 
 The expanded size of the tensor (8) must match the existing size (16958) at non-singleton dimension 1.  Target sizes: [8, 8, 139, 121].  Tensor sizes: [8, 16958, 139, 121]
2025-03-11 18:32:02.126307 test begin: paddle.broadcast_to(Tensor([8, 169669, 41, 41],"bool"), list[8,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([8, 169669, 41, 41],"bool"), list[8,8,41,41,], ) 
 The expanded size of the tensor (8) must match the existing size (169669) at non-singleton dimension 1.  Target sizes: [8, 8, 41, 41].  Tensor sizes: [8, 169669, 41, 41]
2025-03-11 18:32:02.670809 test begin: paddle.broadcast_to(Tensor([8, 17055, 148, 113],"bool"), list[8,8,148,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 17055, 148, 113],"bool"), list[8,8,148,113,], ) 
 The expanded size of the tensor (8) must match the existing size (17055) at non-singleton dimension 1.  Target sizes: [8, 8, 148, 113].  Tensor sizes: [8, 17055, 148, 113]
2025-03-11 18:32:03.276309 test begin: paddle.broadcast_to(Tensor([8, 17081, 138, 121],"bool"), list[8,8,138,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 17081, 138, 121],"bool"), list[8,8,138,121,], ) 
 The expanded size of the tensor (8) must match the existing size (17081) at non-singleton dimension 1.  Target sizes: [8, 8, 138, 121].  Tensor sizes: [8, 17081, 138, 121]
2025-03-11 18:32:03.772011 test begin: paddle.broadcast_to(Tensor([8, 17140, 129, 129],"bool"), list[8,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([8, 17140, 129, 129],"bool"), list[8,8,129,129,], ) 
 The expanded size of the tensor (8) must match the existing size (17140) at non-singleton dimension 1.  Target sizes: [8, 8, 129, 129].  Tensor sizes: [8, 17140, 129, 129]
2025-03-11 18:32:04.273350 test begin: paddle.broadcast_to(Tensor([8, 17171, 147, 113],"bool"), list[8,8,147,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 17171, 147, 113],"bool"), list[8,8,147,113,], ) 
 The expanded size of the tensor (8) must match the existing size (17171) at non-singleton dimension 1.  Target sizes: [8, 8, 147, 113].  Tensor sizes: [8, 17171, 147, 113]
2025-03-11 18:32:04.768899 test begin: paddle.broadcast_to(Tensor([8, 17206, 137, 121],"bool"), list[8,8,137,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 17206, 137, 121],"bool"), list[8,8,137,121,], ) 
 The expanded size of the tensor (8) must match the existing size (17206) at non-singleton dimension 1.  Target sizes: [8, 8, 137, 121].  Tensor sizes: [8, 17206, 137, 121]
2025-03-11 18:32:05.328748 test begin: paddle.broadcast_to(Tensor([8, 1728562, 5, 33],"bool"), list[8,8,5,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 1728562, 5, 33],"bool"), list[8,8,5,33,], ) 
 The expanded size of the tensor (8) must match the existing size (1728562) at non-singleton dimension 1.  Target sizes: [8, 8, 5, 33].  Tensor sizes: [8, 1728562, 5, 33]
2025-03-11 18:32:05.892496 test begin: paddle.broadcast_to(Tensor([8, 172857, 50, 33],"bool"), list[8,8,50,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 172857, 50, 33],"bool"), list[8,8,50,33,], ) 
 The expanded size of the tensor (8) must match the existing size (172857) at non-singleton dimension 1.  Target sizes: [8, 8, 50, 33].  Tensor sizes: [8, 172857, 50, 33]
2025-03-11 18:32:06.458662 test begin: paddle.broadcast_to(Tensor([8, 17288, 146, 113],"bool"), list[8,8,146,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 17288, 146, 113],"bool"), list[8,8,146,113,], ) 
 The expanded size of the tensor (8) must match the existing size (17288) at non-singleton dimension 1.  Target sizes: [8, 8, 146, 113].  Tensor sizes: [8, 17288, 146, 113]
2025-03-11 18:32:06.953794 test begin: paddle.broadcast_to(Tensor([8, 17332, 136, 121],"bool"), list[8,8,136,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 17332, 136, 121],"bool"), list[8,8,136,121,], ) 
 The expanded size of the tensor (8) must match the existing size (17332) at non-singleton dimension 1.  Target sizes: [8, 8, 136, 121].  Tensor sizes: [8, 17332, 136, 121]
2025-03-11 18:32:07.523956 test begin: paddle.broadcast_to(Tensor([8, 17407, 145, 113],"bool"), list[8,8,145,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 17407, 145, 113],"bool"), list[8,8,145,113,], ) 
 The expanded size of the tensor (8) must match the existing size (17407) at non-singleton dimension 1.  Target sizes: [8, 8, 145, 113].  Tensor sizes: [8, 17407, 145, 113]
2025-03-11 18:32:08.095555 test begin: paddle.broadcast_to(Tensor([8, 17409, 128, 128],"bool"), list[8,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([8, 17409, 128, 128],"bool"), list[8,8,128,128,], ) 
 The expanded size of the tensor (8) must match the existing size (17409) at non-singleton dimension 1.  Target sizes: [8, 8, 128, 128].  Tensor sizes: [8, 17409, 128, 128]
2025-03-11 18:32:08.591486 test begin: paddle.broadcast_to(Tensor([8, 17461, 135, 121],"bool"), list[8,8,135,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 17461, 135, 121],"bool"), list[8,8,135,121,], ) 
 The expanded size of the tensor (8) must match the existing size (17461) at non-singleton dimension 1.  Target sizes: [8, 8, 135, 121].  Tensor sizes: [8, 17461, 135, 121]
2025-03-11 18:32:09.170291 test begin: paddle.broadcast_to(Tensor([8, 17528, 144, 113],"bool"), list[8,8,144,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 17528, 144, 113],"bool"), list[8,8,144,113,], ) 
 The expanded size of the tensor (8) must match the existing size (17528) at non-singleton dimension 1.  Target sizes: [8, 8, 144, 113].  Tensor sizes: [8, 17528, 144, 113]
2025-03-11 18:32:09.767642 test begin: paddle.broadcast_to(Tensor([8, 17591, 134, 121],"bool"), list[8,8,134,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 17591, 134, 121],"bool"), list[8,8,134,121,], ) 
 The expanded size of the tensor (8) must match the existing size (17591) at non-singleton dimension 1.  Target sizes: [8, 8, 134, 121].  Tensor sizes: [8, 17591, 134, 121]
2025-03-11 18:32:10.135631 test begin: paddle.broadcast_to(Tensor([8, 176384, 49, 33],"bool"), list[8,8,49,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 176384, 49, 33],"bool"), list[8,8,49,33,], ) 
 The expanded size of the tensor (8) must match the existing size (176384) at non-singleton dimension 1.  Target sizes: [8, 8, 49, 33].  Tensor sizes: [8, 176384, 49, 33]
2025-03-11 18:32:10.636277 test begin: paddle.broadcast_to(Tensor([8, 17651, 143, 113],"bool"), list[8,8,143,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 17651, 143, 113],"bool"), list[8,8,143,113,], ) 
 The expanded size of the tensor (8) must match the existing size (17651) at non-singleton dimension 1.  Target sizes: [8, 8, 143, 113].  Tensor sizes: [8, 17651, 143, 113]
2025-03-11 18:32:11.137180 test begin: paddle.broadcast_to(Tensor([8, 17684, 127, 127],"bool"), list[8,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([8, 17684, 127, 127],"bool"), list[8,8,127,127,], ) 
 The expanded size of the tensor (8) must match the existing size (17684) at non-singleton dimension 1.  Target sizes: [8, 8, 127, 127].  Tensor sizes: [8, 17684, 127, 127]
2025-03-11 18:32:11.645003 test begin: paddle.broadcast_to(Tensor([8, 17723, 133, 121],"bool"), list[8,8,133,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 17723, 133, 121],"bool"), list[8,8,133,121,], ) 
 The expanded size of the tensor (8) must match the existing size (17723) at non-singleton dimension 1.  Target sizes: [8, 8, 133, 121].  Tensor sizes: [8, 17723, 133, 121]
2025-03-11 18:32:12.203428 test begin: paddle.broadcast_to(Tensor([8, 17775, 142, 113],"bool"), list[8,8,142,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 17775, 142, 113],"bool"), list[8,8,142,113,], ) 
 The expanded size of the tensor (8) must match the existing size (17775) at non-singleton dimension 1.  Target sizes: [8, 8, 142, 113].  Tensor sizes: [8, 17775, 142, 113]
2025-03-11 18:32:12.706613 test begin: paddle.broadcast_to(Tensor([8, 17825793, 4, 4],"bool"), list[8,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([8, 17825793, 4, 4],"bool"), list[8,8,4,4,], ) 
 The expanded size of the tensor (8) must match the existing size (17825793) at non-singleton dimension 1.  Target sizes: [8, 8, 4, 4].  Tensor sizes: [8, 17825793, 4, 4]
2025-03-11 18:32:13.204574 test begin: paddle.broadcast_to(Tensor([8, 178258, 40, 40],"bool"), list[8,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([8, 178258, 40, 40],"bool"), list[8,8,40,40,], ) 
 The expanded size of the tensor (8) must match the existing size (178258) at non-singleton dimension 1.  Target sizes: [8, 8, 40, 40].  Tensor sizes: [8, 178258, 40, 40]
2025-03-11 18:32:13.769801 test begin: paddle.broadcast_to(Tensor([8, 17858, 132, 121],"bool"), list[8,8,132,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 17858, 132, 121],"bool"), list[8,8,132,121,], ) 
 The expanded size of the tensor (8) must match the existing size (17858) at non-singleton dimension 1.  Target sizes: [8, 8, 132, 121].  Tensor sizes: [8, 17858, 132, 121]
2025-03-11 18:32:14.268002 test begin: paddle.broadcast_to(Tensor([8, 17901, 141, 113],"bool"), list[8,8,141,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 17901, 141, 113],"bool"), list[8,8,141,113,], ) 
 The expanded size of the tensor (8) must match the existing size (17901) at non-singleton dimension 1.  Target sizes: [8, 8, 141, 113].  Tensor sizes: [8, 17901, 141, 113]
2025-03-11 18:32:14.764698 test begin: paddle.broadcast_to(Tensor([8, 17966, 126, 126],"bool"), list[8,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([8, 17966, 126, 126],"bool"), list[8,8,126,126,], ) 
 The expanded size of the tensor (8) must match the existing size (17966) at non-singleton dimension 1.  Target sizes: [8, 8, 126, 126].  Tensor sizes: [8, 17966, 126, 126]
2025-03-11 18:32:15.365268 test begin: paddle.broadcast_to(Tensor([8, 17994, 131, 121],"bool"), list[8,8,131,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 17994, 131, 121],"bool"), list[8,8,131,121,], ) 
 The expanded size of the tensor (8) must match the existing size (17994) at non-singleton dimension 1.  Target sizes: [8, 8, 131, 121].  Tensor sizes: [8, 17994, 131, 121]
2025-03-11 18:32:15.867037 test begin: paddle.broadcast_to(Tensor([8, 180059, 48, 33],"bool"), list[8,8,48,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 180059, 48, 33],"bool"), list[8,8,48,33,], ) 
 The expanded size of the tensor (8) must match the existing size (180059) at non-singleton dimension 1.  Target sizes: [8, 8, 48, 33].  Tensor sizes: [8, 180059, 48, 33]
2025-03-11 18:32:16.363701 test begin: paddle.broadcast_to(Tensor([8, 180287, 14, 113],"bool"), list[8,8,14,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 180287, 14, 113],"bool"), list[8,8,14,113,], ) 
 The expanded size of the tensor (8) must match the existing size (180287) at non-singleton dimension 1.  Target sizes: [8, 8, 14, 113].  Tensor sizes: [8, 180287, 14, 113]
2025-03-11 18:32:16.850818 test begin: paddle.broadcast_to(Tensor([8, 18029, 140, 113],"bool"), list[8,8,140,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 18029, 140, 113],"bool"), list[8,8,140,113,], ) 
 The expanded size of the tensor (8) must match the existing size (18029) at non-singleton dimension 1.  Target sizes: [8, 8, 140, 113].  Tensor sizes: [8, 18029, 140, 113]
2025-03-11 18:32:17.343258 test begin: paddle.broadcast_to(Tensor([8, 181318, 13, 121],"bool"), list[8,8,13,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 181318, 13, 121],"bool"), list[8,8,13,121,], ) 
 The expanded size of the tensor (8) must match the existing size (181318) at non-singleton dimension 1.  Target sizes: [8, 8, 13, 121].  Tensor sizes: [8, 181318, 13, 121]
2025-03-11 18:32:17.859607 test begin: paddle.broadcast_to(Tensor([8, 18132, 130, 121],"bool"), list[8,8,130,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 18132, 130, 121],"bool"), list[8,8,130,121,], ) 
 The expanded size of the tensor (8) must match the existing size (18132) at non-singleton dimension 1.  Target sizes: [8, 8, 130, 121].  Tensor sizes: [8, 18132, 130, 121]
2025-03-11 18:32:18.390298 test begin: paddle.broadcast_to(Tensor([8, 18159, 139, 113],"bool"), list[8,8,139,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 18159, 139, 113],"bool"), list[8,8,139,113,], ) 
 The expanded size of the tensor (8) must match the existing size (18159) at non-singleton dimension 1.  Target sizes: [8, 8, 139, 113].  Tensor sizes: [8, 18159, 139, 113]
2025-03-11 18:32:18.927156 test begin: paddle.broadcast_to(Tensor([8, 18254, 125, 125],"bool"), list[8,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([8, 18254, 125, 125],"bool"), list[8,8,125,125,], ) 
 The expanded size of the tensor (8) must match the existing size (18254) at non-singleton dimension 1.  Target sizes: [8, 8, 125, 125].  Tensor sizes: [8, 18254, 125, 125]
2025-03-11 18:32:19.415228 test begin: paddle.broadcast_to(Tensor([8, 18273, 129, 121],"bool"), list[8,8,129,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 18273, 129, 121],"bool"), list[8,8,129,121,], ) 
 The expanded size of the tensor (8) must match the existing size (18273) at non-singleton dimension 1.  Target sizes: [8, 8, 129, 121].  Tensor sizes: [8, 18273, 129, 121]
2025-03-11 18:32:19.952050 test begin: paddle.broadcast_to(Tensor([8, 18290, 138, 113],"bool"), list[8,8,138,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 18290, 138, 113],"bool"), list[8,8,138,113,], ) 
 The expanded size of the tensor (8) must match the existing size (18290) at non-singleton dimension 1.  Target sizes: [8, 8, 138, 113].  Tensor sizes: [8, 18290, 138, 113]
2025-03-11 18:32:20.487392 test begin: paddle.broadcast_to(Tensor([8, 183890, 47, 33],"bool"), list[8,8,47,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 183890, 47, 33],"bool"), list[8,8,47,33,], ) 
 The expanded size of the tensor (8) must match the existing size (183890) at non-singleton dimension 1.  Target sizes: [8, 8, 47, 33].  Tensor sizes: [8, 183890, 47, 33]
2025-03-11 18:32:20.979510 test begin: paddle.broadcast_to(Tensor([8, 18416, 128, 121],"bool"), list[8,8,128,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 18416, 128, 121],"bool"), list[8,8,128,121,], ) 
 The expanded size of the tensor (8) must match the existing size (18416) at non-singleton dimension 1.  Target sizes: [8, 8, 128, 121].  Tensor sizes: [8, 18416, 128, 121]
2025-03-11 18:32:21.517473 test begin: paddle.broadcast_to(Tensor([8, 18424, 137, 113],"bool"), list[8,8,137,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 18424, 137, 113],"bool"), list[8,8,137,113,], ) 
 The expanded size of the tensor (8) must match the existing size (18424) at non-singleton dimension 1.  Target sizes: [8, 8, 137, 113].  Tensor sizes: [8, 18424, 137, 113]
2025-03-11 18:32:22.040907 test begin: paddle.broadcast_to(Tensor([8, 18550, 124, 124],"bool"), list[8,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([8, 18550, 124, 124],"bool"), list[8,8,124,124,], ) 
 The expanded size of the tensor (8) must match the existing size (18550) at non-singleton dimension 1.  Target sizes: [8, 8, 124, 124].  Tensor sizes: [8, 18550, 124, 124]
2025-03-11 18:32:22.591263 test begin: paddle.broadcast_to(Tensor([8, 18559, 136, 113],"bool"), list[8,8,136,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 18559, 136, 113],"bool"), list[8,8,136,113,], ) 
 The expanded size of the tensor (8) must match the existing size (18559) at non-singleton dimension 1.  Target sizes: [8, 8, 136, 113].  Tensor sizes: [8, 18559, 136, 113]
2025-03-11 18:32:23.159981 test begin: paddle.broadcast_to(Tensor([8, 18561, 127, 121],"bool"), list[8,8,127,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 18561, 127, 121],"bool"), list[8,8,127,121,], ) 
 The expanded size of the tensor (8) must match the existing size (18561) at non-singleton dimension 1.  Target sizes: [8, 8, 127, 121].  Tensor sizes: [8, 18561, 127, 121]
2025-03-11 18:32:23.660124 test begin: paddle.broadcast_to(Tensor([8, 18697, 135, 113],"bool"), list[8,8,135,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 18697, 135, 113],"bool"), list[8,8,135,113,], ) 
 The expanded size of the tensor (8) must match the existing size (18697) at non-singleton dimension 1.  Target sizes: [8, 8, 135, 113].  Tensor sizes: [8, 18697, 135, 113]
2025-03-11 18:32:24.155684 test begin: paddle.broadcast_to(Tensor([8, 18708, 126, 121],"bool"), list[8,8,126,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 18708, 126, 121],"bool"), list[8,8,126,121,], ) 
 The expanded size of the tensor (8) must match the existing size (18708) at non-singleton dimension 1.  Target sizes: [8, 8, 126, 121].  Tensor sizes: [8, 18708, 126, 121]
2025-03-11 18:32:24.649170 test begin: paddle.broadcast_to(Tensor([8, 187517, 39, 39],"bool"), list[8,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([8, 187517, 39, 39],"bool"), list[8,8,39,39,], ) 
 The expanded size of the tensor (8) must match the existing size (187517) at non-singleton dimension 1.  Target sizes: [8, 8, 39, 39].  Tensor sizes: [8, 187517, 39, 39]
2025-03-11 18:32:25.148766 test begin: paddle.broadcast_to(Tensor([8, 187888, 46, 33],"bool"), list[8,8,46,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 187888, 46, 33],"bool"), list[8,8,46,33,], ) 
 The expanded size of the tensor (8) must match the existing size (187888) at non-singleton dimension 1.  Target sizes: [8, 8, 46, 33].  Tensor sizes: [8, 187888, 46, 33]
2025-03-11 18:32:25.645206 test begin: paddle.broadcast_to(Tensor([8, 18836, 134, 113],"bool"), list[8,8,134,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 18836, 134, 113],"bool"), list[8,8,134,113,], ) 
 The expanded size of the tensor (8) must match the existing size (18836) at non-singleton dimension 1.  Target sizes: [8, 8, 134, 113].  Tensor sizes: [8, 18836, 134, 113]
2025-03-11 18:32:26.139095 test begin: paddle.broadcast_to(Tensor([8, 18853, 123, 123],"bool"), list[8,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([8, 18853, 123, 123],"bool"), list[8,8,123,123,], ) 
 The expanded size of the tensor (8) must match the existing size (18853) at non-singleton dimension 1.  Target sizes: [8, 8, 123, 123].  Tensor sizes: [8, 18853, 123, 123]
2025-03-11 18:32:26.738437 test begin: paddle.broadcast_to(Tensor([8, 18858, 125, 121],"bool"), list[8,8,125,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 18858, 125, 121],"bool"), list[8,8,125,121,], ) 
 The expanded size of the tensor (8) must match the existing size (18858) at non-singleton dimension 1.  Target sizes: [8, 8, 125, 121].  Tensor sizes: [8, 18858, 125, 121]
2025-03-11 18:32:27.231801 test begin: paddle.broadcast_to(Tensor([8, 18978, 133, 113],"bool"), list[8,8,133,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 18978, 133, 113],"bool"), list[8,8,133,113,], ) 
 The expanded size of the tensor (8) must match the existing size (18978) at non-singleton dimension 1.  Target sizes: [8, 8, 133, 113].  Tensor sizes: [8, 18978, 133, 113]
2025-03-11 18:32:27.727220 test begin: paddle.broadcast_to(Tensor([8, 19010, 124, 121],"bool"), list[8,8,124,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 19010, 124, 121],"bool"), list[8,8,124,121,], ) 
 The expanded size of the tensor (8) must match the existing size (19010) at non-singleton dimension 1.  Target sizes: [8, 8, 124, 121].  Tensor sizes: [8, 19010, 124, 121]
2025-03-11 18:32:28.219883 test begin: paddle.broadcast_to(Tensor([8, 19122, 132, 113],"bool"), list[8,8,132,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 19122, 132, 113],"bool"), list[8,8,132,113,], ) 
 The expanded size of the tensor (8) must match the existing size (19122) at non-singleton dimension 1.  Target sizes: [8, 8, 132, 113].  Tensor sizes: [8, 19122, 132, 113]
2025-03-11 18:32:28.711714 test begin: paddle.broadcast_to(Tensor([8, 19163, 122, 122],"bool"), list[8,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([8, 19163, 122, 122],"bool"), list[8,8,122,122,], ) 
 The expanded size of the tensor (8) must match the existing size (19163) at non-singleton dimension 1.  Target sizes: [8, 8, 122, 122].  Tensor sizes: [8, 19163, 122, 122]
2025-03-11 18:32:29.202680 test begin: paddle.broadcast_to(Tensor([8, 19164, 123, 121],"bool"), list[8,8,123,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 19164, 123, 121],"bool"), list[8,8,123,121,], ) 
 The expanded size of the tensor (8) must match the existing size (19164) at non-singleton dimension 1.  Target sizes: [8, 8, 123, 121].  Tensor sizes: [8, 19164, 123, 121]
2025-03-11 18:32:29.695131 test begin: paddle.broadcast_to(Tensor([8, 192063, 45, 33],"bool"), list[8,8,45,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 192063, 45, 33],"bool"), list[8,8,45,33,], ) 
 The expanded size of the tensor (8) must match the existing size (192063) at non-singleton dimension 1.  Target sizes: [8, 8, 45, 33].  Tensor sizes: [8, 192063, 45, 33]
2025-03-11 18:32:30.187632 test begin: paddle.broadcast_to(Tensor([8, 19268, 131, 113],"bool"), list[8,8,131,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 19268, 131, 113],"bool"), list[8,8,131,113,], ) 
 The expanded size of the tensor (8) must match the existing size (19268) at non-singleton dimension 1.  Target sizes: [8, 8, 131, 113].  Tensor sizes: [8, 19268, 131, 113]
2025-03-11 18:32:30.682566 test begin: paddle.broadcast_to(Tensor([8, 19321, 122, 121],"bool"), list[8,8,122,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 19321, 122, 121],"bool"), list[8,8,122,121,], ) 
 The expanded size of the tensor (8) must match the existing size (19321) at non-singleton dimension 1.  Target sizes: [8, 8, 122, 121].  Tensor sizes: [8, 19321, 122, 121]
2025-03-11 18:32:31.172387 test begin: paddle.broadcast_to(Tensor([8, 194155, 13, 113],"bool"), list[8,8,13,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 194155, 13, 113],"bool"), list[8,8,13,113,], ) 
 The expanded size of the tensor (8) must match the existing size (194155) at non-singleton dimension 1.  Target sizes: [8, 8, 13, 113].  Tensor sizes: [8, 194155, 13, 113]
2025-03-11 18:32:31.663435 test begin: paddle.broadcast_to(Tensor([8, 19416, 130, 113],"bool"), list[8,8,130,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 19416, 130, 113],"bool"), list[8,8,130,113,], ) 
 The expanded size of the tensor (8) must match the existing size (19416) at non-singleton dimension 1.  Target sizes: [8, 8, 130, 113].  Tensor sizes: [8, 19416, 130, 113]
2025-03-11 18:32:32.159541 test begin: paddle.broadcast_to(Tensor([8, 19481, 121, 121],"bool"), list[8,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 19481, 121, 121],"bool"), list[8,8,121,121,], ) 
 The expanded size of the tensor (8) must match the existing size (19481) at non-singleton dimension 1.  Target sizes: [8, 8, 121, 121].  Tensor sizes: [8, 19481, 121, 121]
2025-03-11 18:32:32.648711 test begin: paddle.broadcast_to(Tensor([8, 19566, 129, 113],"bool"), list[8,8,129,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 19566, 129, 113],"bool"), list[8,8,129,113,], ) 
 The expanded size of the tensor (8) must match the existing size (19566) at non-singleton dimension 1.  Target sizes: [8, 8, 129, 113].  Tensor sizes: [8, 19566, 129, 113]
2025-03-11 18:32:33.138535 test begin: paddle.broadcast_to(Tensor([8, 196428, 12, 121],"bool"), list[8,8,12,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 196428, 12, 121],"bool"), list[8,8,12,121,], ) 
 The expanded size of the tensor (8) must match the existing size (196428) at non-singleton dimension 1.  Target sizes: [8, 8, 12, 121].  Tensor sizes: [8, 196428, 12, 121]
2025-03-11 18:32:33.637524 test begin: paddle.broadcast_to(Tensor([8, 196428, 44, 33],"bool"), list[8,8,44,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 196428, 44, 33],"bool"), list[8,8,44,33,], ) 
 The expanded size of the tensor (8) must match the existing size (196428) at non-singleton dimension 1.  Target sizes: [8, 8, 44, 33].  Tensor sizes: [8, 196428, 44, 33]
2025-03-11 18:32:34.225485 test begin: paddle.broadcast_to(Tensor([8, 19643, 120, 121],"bool"), list[8,8,120,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 19643, 120, 121],"bool"), list[8,8,120,121,], ) 
 The expanded size of the tensor (8) must match the existing size (19643) at non-singleton dimension 1.  Target sizes: [8, 8, 120, 121].  Tensor sizes: [8, 19643, 120, 121]
2025-03-11 18:32:34.650122 test begin: paddle.broadcast_to(Tensor([8, 19719, 128, 113],"bool"), list[8,8,128,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 19719, 128, 113],"bool"), list[8,8,128,113,], ) 
 The expanded size of the tensor (8) must match the existing size (19719) at non-singleton dimension 1.  Target sizes: [8, 8, 128, 113].  Tensor sizes: [8, 19719, 128, 113]
2025-03-11 18:32:35.143665 test begin: paddle.broadcast_to(Tensor([8, 197516, 38, 38],"bool"), list[8,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([8, 197516, 38, 38],"bool"), list[8,8,38,38,], ) 
 The expanded size of the tensor (8) must match the existing size (197516) at non-singleton dimension 1.  Target sizes: [8, 8, 38, 38].  Tensor sizes: [8, 197516, 38, 38]
2025-03-11 18:32:35.634042 test begin: paddle.broadcast_to(Tensor([8, 1980644, 12, 12],"bool"), list[8,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([8, 1980644, 12, 12],"bool"), list[8,8,12,12,], ) 
 The expanded size of the tensor (8) must match the existing size (1980644) at non-singleton dimension 1.  Target sizes: [8, 8, 12, 12].  Tensor sizes: [8, 1980644, 12, 12]
2025-03-11 18:32:36.119475 test begin: paddle.broadcast_to(Tensor([8, 19807, 120, 120],"bool"), list[8,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([8, 19807, 120, 120],"bool"), list[8,8,120,120,], ) 
 The expanded size of the tensor (8) must match the existing size (19807) at non-singleton dimension 1.  Target sizes: [8, 8, 120, 120].  Tensor sizes: [8, 19807, 120, 120]
2025-03-11 18:32:36.653437 test begin: paddle.broadcast_to(Tensor([8, 19808, 119, 121],"bool"), list[8,8,119,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 19808, 119, 121],"bool"), list[8,8,119,121,], ) 
 The expanded size of the tensor (8) must match the existing size (19808) at non-singleton dimension 1.  Target sizes: [8, 8, 119, 121].  Tensor sizes: [8, 19808, 119, 121]
2025-03-11 18:32:37.204658 test begin: paddle.broadcast_to(Tensor([8, 19875, 127, 113],"bool"), list[8,8,127,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 19875, 127, 113],"bool"), list[8,8,127,113,], ) 
 The expanded size of the tensor (8) must match the existing size (19875) at non-singleton dimension 1.  Target sizes: [8, 8, 127, 113].  Tensor sizes: [8, 19875, 127, 113]
2025-03-11 18:32:37.734280 test begin: paddle.broadcast_to(Tensor([8, 19976, 118, 121],"bool"), list[8,8,118,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 19976, 118, 121],"bool"), list[8,8,118,121,], ) 
 The expanded size of the tensor (8) must match the existing size (19976) at non-singleton dimension 1.  Target sizes: [8, 8, 118, 121].  Tensor sizes: [8, 19976, 118, 121]
2025-03-11 18:32:38.262277 test begin: paddle.broadcast_to(Tensor([8, 20032, 126, 113],"bool"), list[8,8,126,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 20032, 126, 113],"bool"), list[8,8,126,113,], ) 
 The expanded size of the tensor (8) must match the existing size (20032) at non-singleton dimension 1.  Target sizes: [8, 8, 126, 113].  Tensor sizes: [8, 20032, 126, 113]
2025-03-11 18:32:38.793930 test begin: paddle.broadcast_to(Tensor([8, 200996, 43, 33],"bool"), list[8,8,43,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 200996, 43, 33],"bool"), list[8,8,43,33,], ) 
 The expanded size of the tensor (8) must match the existing size (200996) at non-singleton dimension 1.  Target sizes: [8, 8, 43, 33].  Tensor sizes: [8, 200996, 43, 33]
2025-03-11 18:32:39.288303 test begin: paddle.broadcast_to(Tensor([8, 20141, 119, 119],"bool"), list[8,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([8, 20141, 119, 119],"bool"), list[8,8,119,119,], ) 
 The expanded size of the tensor (8) must match the existing size (20141) at non-singleton dimension 1.  Target sizes: [8, 8, 119, 119].  Tensor sizes: [8, 20141, 119, 119]
2025-03-11 18:32:39.839899 test begin: paddle.broadcast_to(Tensor([8, 20147, 117, 121],"bool"), list[8,8,117,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 20147, 117, 121],"bool"), list[8,8,117,121,], ) 
 The expanded size of the tensor (8) must match the existing size (20147) at non-singleton dimension 1.  Target sizes: [8, 8, 117, 121].  Tensor sizes: [8, 20147, 117, 121]
2025-03-11 18:32:40.426221 test begin: paddle.broadcast_to(Tensor([8, 20193, 125, 113],"bool"), list[8,8,125,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 20193, 125, 113],"bool"), list[8,8,125,113,], ) 
 The expanded size of the tensor (8) must match the existing size (20193) at non-singleton dimension 1.  Target sizes: [8, 8, 125, 113].  Tensor sizes: [8, 20193, 125, 113]
2025-03-11 18:32:40.959375 test begin: paddle.broadcast_to(Tensor([8, 20321, 116, 121],"bool"), list[8,8,116,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 20321, 116, 121],"bool"), list[8,8,116,121,], ) 
 The expanded size of the tensor (8) must match the existing size (20321) at non-singleton dimension 1.  Target sizes: [8, 8, 116, 121].  Tensor sizes: [8, 20321, 116, 121]
2025-03-11 18:32:41.512253 test begin: paddle.broadcast_to(Tensor([8, 20355, 124, 113],"bool"), list[8,8,124,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 20355, 124, 113],"bool"), list[8,8,124,113,], ) 
 The expanded size of the tensor (8) must match the existing size (20355) at non-singleton dimension 1.  Target sizes: [8, 8, 124, 113].  Tensor sizes: [8, 20355, 124, 113]
2025-03-11 18:32:42.013512 test begin: paddle.broadcast_to(Tensor([8, 20484, 118, 118],"bool"), list[8,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([8, 20484, 118, 118],"bool"), list[8,8,118,118,], ) 
 The expanded size of the tensor (8) must match the existing size (20484) at non-singleton dimension 1.  Target sizes: [8, 8, 118, 118].  Tensor sizes: [8, 20484, 118, 118]
2025-03-11 18:32:42.495362 test begin: paddle.broadcast_to(Tensor([8, 20497, 115, 121],"bool"), list[8,8,115,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 20497, 115, 121],"bool"), list[8,8,115,121,], ) 
 The expanded size of the tensor (8) must match the existing size (20497) at non-singleton dimension 1.  Target sizes: [8, 8, 115, 121].  Tensor sizes: [8, 20497, 115, 121]
2025-03-11 18:32:42.975488 test begin: paddle.broadcast_to(Tensor([8, 20521, 123, 113],"bool"), list[8,8,123,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 20521, 123, 113],"bool"), list[8,8,123,113,], ) 
 The expanded size of the tensor (8) must match the existing size (20521) at non-singleton dimension 1.  Target sizes: [8, 8, 123, 113].  Tensor sizes: [8, 20521, 123, 113]
2025-03-11 18:32:43.457696 test begin: paddle.broadcast_to(Tensor([8, 205782, 42, 33],"bool"), list[8,8,42,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 205782, 42, 33],"bool"), list[8,8,42,33,], ) 
 The expanded size of the tensor (8) must match the existing size (205782) at non-singleton dimension 1.  Target sizes: [8, 8, 42, 33].  Tensor sizes: [8, 205782, 42, 33]
2025-03-11 18:32:44.066634 test begin: paddle.broadcast_to(Tensor([8, 20677, 114, 121],"bool"), list[8,8,114,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 20677, 114, 121],"bool"), list[8,8,114,121,], ) 
 The expanded size of the tensor (8) must match the existing size (20677) at non-singleton dimension 1.  Target sizes: [8, 8, 114, 121].  Tensor sizes: [8, 20677, 114, 121]
2025-03-11 18:32:44.424918 test begin: paddle.broadcast_to(Tensor([8, 20689, 122, 113],"bool"), list[8,8,122,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 20689, 122, 113],"bool"), list[8,8,122,113,], ) 
 The expanded size of the tensor (8) must match the existing size (20689) at non-singleton dimension 1.  Target sizes: [8, 8, 122, 113].  Tensor sizes: [8, 20689, 122, 113]
2025-03-11 18:32:44.901103 test begin: paddle.broadcast_to(Tensor([8, 208337, 37, 37],"bool"), list[8,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([8, 208337, 37, 37],"bool"), list[8,8,37,37,], ) 
 The expanded size of the tensor (8) must match the existing size (208337) at non-singleton dimension 1.  Target sizes: [8, 8, 37, 37].  Tensor sizes: [8, 208337, 37, 37]
2025-03-11 18:32:45.394288 test begin: paddle.broadcast_to(Tensor([8, 20836, 117, 117],"bool"), list[8,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([8, 20836, 117, 117],"bool"), list[8,8,117,117,], ) 
 The expanded size of the tensor (8) must match the existing size (20836) at non-singleton dimension 1.  Target sizes: [8, 8, 117, 117].  Tensor sizes: [8, 20836, 117, 117]
2025-03-11 18:32:45.877849 test begin: paddle.broadcast_to(Tensor([8, 20860, 113, 121],"bool"), list[8,8,113,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 20860, 113, 121],"bool"), list[8,8,113,121,], ) 
 The expanded size of the tensor (8) must match the existing size (20860) at non-singleton dimension 1.  Target sizes: [8, 8, 113, 121].  Tensor sizes: [8, 20860, 113, 121]
2025-03-11 18:32:46.367629 test begin: paddle.broadcast_to(Tensor([8, 20860, 121, 113],"bool"), list[8,8,121,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 20860, 121, 113],"bool"), list[8,8,121,113,], ) 
 The expanded size of the tensor (8) must match the existing size (20860) at non-singleton dimension 1.  Target sizes: [8, 8, 121, 113].  Tensor sizes: [8, 20860, 121, 113]
2025-03-11 18:32:46.855666 test begin: paddle.broadcast_to(Tensor([8, 210334, 12, 113],"bool"), list[8,8,12,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 210334, 12, 113],"bool"), list[8,8,12,113,], ) 
 The expanded size of the tensor (8) must match the existing size (210334) at non-singleton dimension 1.  Target sizes: [8, 8, 12, 113].  Tensor sizes: [8, 210334, 12, 113]
2025-03-11 18:32:47.343497 test begin: paddle.broadcast_to(Tensor([8, 21034, 120, 113],"bool"), list[8,8,120,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 21034, 120, 113],"bool"), list[8,8,120,113,], ) 
 The expanded size of the tensor (8) must match the existing size (21034) at non-singleton dimension 1.  Target sizes: [8, 8, 120, 113].  Tensor sizes: [8, 21034, 120, 113]
2025-03-11 18:32:47.869963 test begin: paddle.broadcast_to(Tensor([8, 21046, 112, 121],"bool"), list[8,8,112,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 21046, 112, 121],"bool"), list[8,8,112,121,], ) 
 The expanded size of the tensor (8) must match the existing size (21046) at non-singleton dimension 1.  Target sizes: [8, 8, 112, 121].  Tensor sizes: [8, 21046, 112, 121]
2025-03-11 18:32:48.354107 test begin: paddle.broadcast_to(Tensor([8, 210801, 41, 33],"bool"), list[8,8,41,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 210801, 41, 33],"bool"), list[8,8,41,33,], ) 
 The expanded size of the tensor (8) must match the existing size (210801) at non-singleton dimension 1.  Target sizes: [8, 8, 41, 33].  Tensor sizes: [8, 210801, 41, 33]
2025-03-11 18:32:48.830902 test begin: paddle.broadcast_to(Tensor([8, 21196, 116, 116],"bool"), list[8,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([8, 21196, 116, 116],"bool"), list[8,8,116,116,], ) 
 The expanded size of the tensor (8) must match the existing size (21196) at non-singleton dimension 1.  Target sizes: [8, 8, 116, 116].  Tensor sizes: [8, 21196, 116, 116]
2025-03-11 18:32:49.357482 test begin: paddle.broadcast_to(Tensor([8, 21211, 119, 113],"bool"), list[8,8,119,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 21211, 119, 113],"bool"), list[8,8,119,113,], ) 
 The expanded size of the tensor (8) must match the existing size (21211) at non-singleton dimension 1.  Target sizes: [8, 8, 119, 113].  Tensor sizes: [8, 21211, 119, 113]
2025-03-11 18:32:49.851414 test begin: paddle.broadcast_to(Tensor([8, 21236, 111, 121],"bool"), list[8,8,111,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 21236, 111, 121],"bool"), list[8,8,111,121,], ) 
 The expanded size of the tensor (8) must match the existing size (21236) at non-singleton dimension 1.  Target sizes: [8, 8, 111, 121].  Tensor sizes: [8, 21236, 111, 121]
2025-03-11 18:32:50.344627 test begin: paddle.broadcast_to(Tensor([8, 21390, 118, 113],"bool"), list[8,8,118,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 21390, 118, 113],"bool"), list[8,8,118,113,], ) 
 The expanded size of the tensor (8) must match the existing size (21390) at non-singleton dimension 1.  Target sizes: [8, 8, 118, 113].  Tensor sizes: [8, 21390, 118, 113]
2025-03-11 18:32:50.826150 test begin: paddle.broadcast_to(Tensor([8, 214285, 11, 121],"bool"), list[8,8,11,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 214285, 11, 121],"bool"), list[8,8,11,121,], ) 
 The expanded size of the tensor (8) must match the existing size (214285) at non-singleton dimension 1.  Target sizes: [8, 8, 11, 121].  Tensor sizes: [8, 214285, 11, 121]
2025-03-11 18:32:51.309432 test begin: paddle.broadcast_to(Tensor([8, 21429, 110, 121],"bool"), list[8,8,110,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 21429, 110, 121],"bool"), list[8,8,110,121,], ) 
 The expanded size of the tensor (8) must match the existing size (21429) at non-singleton dimension 1.  Target sizes: [8, 8, 110, 121].  Tensor sizes: [8, 21429, 110, 121]
2025-03-11 18:32:51.787971 test begin: paddle.broadcast_to(Tensor([8, 21567, 115, 115],"bool"), list[8,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([8, 21567, 115, 115],"bool"), list[8,8,115,115,], ) 
 The expanded size of the tensor (8) must match the existing size (21567) at non-singleton dimension 1.  Target sizes: [8, 8, 115, 115].  Tensor sizes: [8, 21567, 115, 115]
2025-03-11 18:32:52.265376 test begin: paddle.broadcast_to(Tensor([8, 21573, 117, 113],"bool"), list[8,8,117,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 21573, 117, 113],"bool"), list[8,8,117,113,], ) 
 The expanded size of the tensor (8) must match the existing size (21573) at non-singleton dimension 1.  Target sizes: [8, 8, 117, 113].  Tensor sizes: [8, 21573, 117, 113]
2025-03-11 18:32:52.749276 test begin: paddle.broadcast_to(Tensor([8, 2160703, 4, 33],"bool"), list[8,8,4,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 2160703, 4, 33],"bool"), list[8,8,4,33,], ) 
 The expanded size of the tensor (8) must match the existing size (2160703) at non-singleton dimension 1.  Target sizes: [8, 8, 4, 33].  Tensor sizes: [8, 2160703, 4, 33]
2025-03-11 18:32:53.228528 test begin: paddle.broadcast_to(Tensor([8, 216071, 40, 33],"bool"), list[8,8,40,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 216071, 40, 33],"bool"), list[8,8,40,33,], ) 
 The expanded size of the tensor (8) must match the existing size (216071) at non-singleton dimension 1.  Target sizes: [8, 8, 40, 33].  Tensor sizes: [8, 216071, 40, 33]
2025-03-11 18:32:53.711582 test begin: paddle.broadcast_to(Tensor([8, 21626, 109, 121],"bool"), list[8,8,109,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 21626, 109, 121],"bool"), list[8,8,109,121,], ) 
 The expanded size of the tensor (8) must match the existing size (21626) at non-singleton dimension 1.  Target sizes: [8, 8, 109, 121].  Tensor sizes: [8, 21626, 109, 121]
2025-03-11 18:32:54.196113 test begin: paddle.broadcast_to(Tensor([8, 21759, 116, 113],"bool"), list[8,8,116,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 21759, 116, 113],"bool"), list[8,8,116,113,], ) 
 The expanded size of the tensor (8) must match the existing size (21759) at non-singleton dimension 1.  Target sizes: [8, 8, 116, 113].  Tensor sizes: [8, 21759, 116, 113]
2025-03-11 18:32:54.787593 test begin: paddle.broadcast_to(Tensor([8, 21826, 108, 121],"bool"), list[8,8,108,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 21826, 108, 121],"bool"), list[8,8,108,121,], ) 
 The expanded size of the tensor (8) must match the existing size (21826) at non-singleton dimension 1.  Target sizes: [8, 8, 108, 121].  Tensor sizes: [8, 21826, 108, 121]
2025-03-11 18:32:55.147331 test begin: paddle.broadcast_to(Tensor([8, 21947, 114, 114],"bool"), list[8,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([8, 21947, 114, 114],"bool"), list[8,8,114,114,], ) 
 The expanded size of the tensor (8) must match the existing size (21947) at non-singleton dimension 1.  Target sizes: [8, 8, 114, 114].  Tensor sizes: [8, 21947, 114, 114]
2025-03-11 18:32:55.732668 test begin: paddle.broadcast_to(Tensor([8, 21948, 115, 113],"bool"), list[8,8,115,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 21948, 115, 113],"bool"), list[8,8,115,113,], ) 
 The expanded size of the tensor (8) must match the existing size (21948) at non-singleton dimension 1.  Target sizes: [8, 8, 115, 113].  Tensor sizes: [8, 21948, 115, 113]
2025-03-11 18:32:56.095085 test begin: paddle.broadcast_to(Tensor([8, 220072, 36, 36],"bool"), list[8,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([8, 220072, 36, 36],"bool"), list[8,8,36,36,], ) 
 The expanded size of the tensor (8) must match the existing size (220072) at non-singleton dimension 1.  Target sizes: [8, 8, 36, 36].  Tensor sizes: [8, 220072, 36, 36]
2025-03-11 18:32:56.571468 test begin: paddle.broadcast_to(Tensor([8, 22030, 107, 121],"bool"), list[8,8,107,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 22030, 107, 121],"bool"), list[8,8,107,121,], ) 
 The expanded size of the tensor (8) must match the existing size (22030) at non-singleton dimension 1.  Target sizes: [8, 8, 107, 121].  Tensor sizes: [8, 22030, 107, 121]
2025-03-11 18:32:57.054008 test begin: paddle.broadcast_to(Tensor([8, 22141, 114, 113],"bool"), list[8,8,114,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 22141, 114, 113],"bool"), list[8,8,114,113,], ) 
 The expanded size of the tensor (8) must match the existing size (22141) at non-singleton dimension 1.  Target sizes: [8, 8, 114, 113].  Tensor sizes: [8, 22141, 114, 113]
2025-03-11 18:32:57.546279 test begin: paddle.broadcast_to(Tensor([8, 221611, 39, 33],"bool"), list[8,8,39,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 221611, 39, 33],"bool"), list[8,8,39,33,], ) 
 The expanded size of the tensor (8) must match the existing size (221611) at non-singleton dimension 1.  Target sizes: [8, 8, 39, 33].  Tensor sizes: [8, 221611, 39, 33]
2025-03-11 18:32:58.035239 test begin: paddle.broadcast_to(Tensor([8, 22238, 106, 121],"bool"), list[8,8,106,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 22238, 106, 121],"bool"), list[8,8,106,121,], ) 
 The expanded size of the tensor (8) must match the existing size (22238) at non-singleton dimension 1.  Target sizes: [8, 8, 106, 121].  Tensor sizes: [8, 22238, 106, 121]
2025-03-11 18:32:58.536470 test begin: paddle.broadcast_to(Tensor([8, 22337, 113, 113],"bool"), list[8,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 22337, 113, 113],"bool"), list[8,8,113,113,], ) 
 The expanded size of the tensor (8) must match the existing size (22337) at non-singleton dimension 1.  Target sizes: [8, 8, 113, 113].  Tensor sizes: [8, 22337, 113, 113]
2025-03-11 18:32:59.076586 test begin: paddle.broadcast_to(Tensor([8, 22449, 105, 121],"bool"), list[8,8,105,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 22449, 105, 121],"bool"), list[8,8,105,121,], ) 
 The expanded size of the tensor (8) must match the existing size (22449) at non-singleton dimension 1.  Target sizes: [8, 8, 105, 121].  Tensor sizes: [8, 22449, 105, 121]
2025-03-11 18:32:59.569456 test begin: paddle.broadcast_to(Tensor([8, 22536, 112, 113],"bool"), list[8,8,112,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 22536, 112, 113],"bool"), list[8,8,112,113,], ) 
 The expanded size of the tensor (8) must match the existing size (22536) at non-singleton dimension 1.  Target sizes: [8, 8, 112, 113].  Tensor sizes: [8, 22536, 112, 113]
2025-03-11 18:33:00.100008 test begin: paddle.broadcast_to(Tensor([8, 22665, 104, 121],"bool"), list[8,8,104,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 22665, 104, 121],"bool"), list[8,8,104,121,], ) 
 The expanded size of the tensor (8) must match the existing size (22665) at non-singleton dimension 1.  Target sizes: [8, 8, 104, 121].  Tensor sizes: [8, 22665, 104, 121]
2025-03-11 18:33:00.694403 test begin: paddle.broadcast_to(Tensor([8, 22737, 112, 112],"bool"), list[8,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([8, 22737, 112, 112],"bool"), list[8,8,112,112,], ) 
 The expanded size of the tensor (8) must match the existing size (22737) at non-singleton dimension 1.  Target sizes: [8, 8, 112, 112].  Tensor sizes: [8, 22737, 112, 112]
2025-03-11 18:33:01.179537 test begin: paddle.broadcast_to(Tensor([8, 22739, 111, 113],"bool"), list[8,8,111,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 22739, 111, 113],"bool"), list[8,8,111,113,], ) 
 The expanded size of the tensor (8) must match the existing size (22739) at non-singleton dimension 1.  Target sizes: [8, 8, 111, 113].  Tensor sizes: [8, 22739, 111, 113]
2025-03-11 18:33:01.665661 test begin: paddle.broadcast_to(Tensor([8, 227443, 38, 33],"bool"), list[8,8,38,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 227443, 38, 33],"bool"), list[8,8,38,33,], ) 
 The expanded size of the tensor (8) must match the existing size (227443) at non-singleton dimension 1.  Target sizes: [8, 8, 38, 33].  Tensor sizes: [8, 227443, 38, 33]
2025-03-11 18:33:02.163047 test begin: paddle.broadcast_to(Tensor([8, 22885, 103, 121],"bool"), list[8,8,103,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 22885, 103, 121],"bool"), list[8,8,103,121,], ) 
 The expanded size of the tensor (8) must match the existing size (22885) at non-singleton dimension 1.  Target sizes: [8, 8, 103, 121].  Tensor sizes: [8, 22885, 103, 121]
2025-03-11 18:33:02.699429 test begin: paddle.broadcast_to(Tensor([8, 229456, 11, 113],"bool"), list[8,8,11,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 229456, 11, 113],"bool"), list[8,8,11,113,], ) 
 The expanded size of the tensor (8) must match the existing size (229456) at non-singleton dimension 1.  Target sizes: [8, 8, 11, 113].  Tensor sizes: [8, 229456, 11, 113]
2025-03-11 18:33:03.227440 test begin: paddle.broadcast_to(Tensor([8, 22946, 110, 113],"bool"), list[8,8,110,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 22946, 110, 113],"bool"), list[8,8,110,113,], ) 
 The expanded size of the tensor (8) must match the existing size (22946) at non-singleton dimension 1.  Target sizes: [8, 8, 110, 113].  Tensor sizes: [8, 22946, 110, 113]
2025-03-11 18:33:03.743967 test begin: paddle.broadcast_to(Tensor([8, 23110, 102, 121],"bool"), list[8,8,102,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 23110, 102, 121],"bool"), list[8,8,102,121,], ) 
 The expanded size of the tensor (8) must match the existing size (23110) at non-singleton dimension 1.  Target sizes: [8, 8, 102, 121].  Tensor sizes: [8, 23110, 102, 121]
2025-03-11 18:33:04.233366 test begin: paddle.broadcast_to(Tensor([8, 23149, 111, 111],"bool"), list[8,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([8, 23149, 111, 111],"bool"), list[8,8,111,111,], ) 
 The expanded size of the tensor (8) must match the existing size (23149) at non-singleton dimension 1.  Target sizes: [8, 8, 111, 111].  Tensor sizes: [8, 23149, 111, 111]
2025-03-11 18:33:04.754928 test begin: paddle.broadcast_to(Tensor([8, 23157, 109, 113],"bool"), list[8,8,109,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 23157, 109, 113],"bool"), list[8,8,109,113,], ) 
 The expanded size of the tensor (8) must match the existing size (23157) at non-singleton dimension 1.  Target sizes: [8, 8, 109, 113].  Tensor sizes: [8, 23157, 109, 113]
2025-03-11 18:33:05.244518 test begin: paddle.broadcast_to(Tensor([8, 232827, 35, 35],"bool"), list[8,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([8, 232827, 35, 35],"bool"), list[8,8,35,35,], ) 
 The expanded size of the tensor (8) must match the existing size (232827) at non-singleton dimension 1.  Target sizes: [8, 8, 35, 35].  Tensor sizes: [8, 232827, 35, 35]
2025-03-11 18:33:05.730353 test begin: paddle.broadcast_to(Tensor([8, 23338, 101, 121],"bool"), list[8,8,101,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 23338, 101, 121],"bool"), list[8,8,101,121,], ) 
 The expanded size of the tensor (8) must match the existing size (23338) at non-singleton dimension 1.  Target sizes: [8, 8, 101, 121].  Tensor sizes: [8, 23338, 101, 121]
2025-03-11 18:33:06.266671 test begin: paddle.broadcast_to(Tensor([8, 233590, 37, 33],"bool"), list[8,8,37,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 233590, 37, 33],"bool"), list[8,8,37,33,], ) 
 The expanded size of the tensor (8) must match the existing size (233590) at non-singleton dimension 1.  Target sizes: [8, 8, 37, 33].  Tensor sizes: [8, 233590, 37, 33]
2025-03-11 18:33:06.800996 test begin: paddle.broadcast_to(Tensor([8, 23371, 108, 113],"bool"), list[8,8,108,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 23371, 108, 113],"bool"), list[8,8,108,113,], ) 
 The expanded size of the tensor (8) must match the existing size (23371) at non-singleton dimension 1.  Target sizes: [8, 8, 108, 113].  Tensor sizes: [8, 23371, 108, 113]
2025-03-11 18:33:07.336712 test begin: paddle.broadcast_to(Tensor([8, 235713, 10, 121],"bool"), list[8,8,10,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 235713, 10, 121],"bool"), list[8,8,10,121,], ) 
 The expanded size of the tensor (8) must match the existing size (235713) at non-singleton dimension 1.  Target sizes: [8, 8, 10, 121].  Tensor sizes: [8, 235713, 10, 121]
2025-03-11 18:33:07.832414 test begin: paddle.broadcast_to(Tensor([8, 2357130, 1, 121],"bool"), list[8,8,1,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 2357130, 1, 121],"bool"), list[8,8,1,121,], ) 
 The expanded size of the tensor (8) must match the existing size (2357130) at non-singleton dimension 1.  Target sizes: [8, 8, 1, 121].  Tensor sizes: [8, 2357130, 1, 121]
2025-03-11 18:33:08.323709 test begin: paddle.broadcast_to(Tensor([8, 2357130, 11, 11],"bool"), list[8,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([8, 2357130, 11, 11],"bool"), list[8,8,11,11,], ) 
 The expanded size of the tensor (8) must match the existing size (2357130) at non-singleton dimension 1.  Target sizes: [8, 8, 11, 11].  Tensor sizes: [8, 2357130, 11, 11]
2025-03-11 18:33:08.818680 test begin: paddle.broadcast_to(Tensor([8, 23572, 100, 121],"bool"), list[8,8,100,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 23572, 100, 121],"bool"), list[8,8,100,121,], ) 
 The expanded size of the tensor (8) must match the existing size (23572) at non-singleton dimension 1.  Target sizes: [8, 8, 100, 121].  Tensor sizes: [8, 23572, 100, 121]
2025-03-11 18:33:09.300685 test begin: paddle.broadcast_to(Tensor([8, 23572, 110, 110],"bool"), list[8,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([8, 23572, 110, 110],"bool"), list[8,8,110,110,], ) 
 The expanded size of the tensor (8) must match the existing size (23572) at non-singleton dimension 1.  Target sizes: [8, 8, 110, 110].  Tensor sizes: [8, 23572, 110, 110]
2025-03-11 18:33:09.852561 test begin: paddle.broadcast_to(Tensor([8, 23589, 107, 113],"bool"), list[8,8,107,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 23589, 107, 113],"bool"), list[8,8,107,113,], ) 
 The expanded size of the tensor (8) must match the existing size (23589) at non-singleton dimension 1.  Target sizes: [8, 8, 107, 113].  Tensor sizes: [8, 23589, 107, 113]
2025-03-11 18:33:10.424617 test begin: paddle.broadcast_to(Tensor([8, 23810, 99, 121],"bool"), list[8,8,99,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 23810, 99, 121],"bool"), list[8,8,99,121,], ) 
 The expanded size of the tensor (8) must match the existing size (23810) at non-singleton dimension 1.  Target sizes: [8, 8, 99, 121].  Tensor sizes: [8, 23810, 99, 121]
2025-03-11 18:33:10.918783 test begin: paddle.broadcast_to(Tensor([8, 23812, 106, 113],"bool"), list[8,8,106,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 23812, 106, 113],"bool"), list[8,8,106,113,], ) 
 The expanded size of the tensor (8) must match the existing size (23812) at non-singleton dimension 1.  Target sizes: [8, 8, 106, 113].  Tensor sizes: [8, 23812, 106, 113]
2025-03-11 18:33:11.407955 test begin: paddle.broadcast_to(Tensor([8, 24006, 109, 109],"bool"), list[8,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([8, 24006, 109, 109],"bool"), list[8,8,109,109,], ) 
 The expanded size of the tensor (8) must match the existing size (24006) at non-singleton dimension 1.  Target sizes: [8, 8, 109, 109].  Tensor sizes: [8, 24006, 109, 109]
2025-03-11 18:33:11.906653 test begin: paddle.broadcast_to(Tensor([8, 240079, 36, 33],"bool"), list[8,8,36,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 240079, 36, 33],"bool"), list[8,8,36,33,], ) 
 The expanded size of the tensor (8) must match the existing size (240079) at non-singleton dimension 1.  Target sizes: [8, 8, 36, 33].  Tensor sizes: [8, 240079, 36, 33]
2025-03-11 18:33:12.397977 test begin: paddle.broadcast_to(Tensor([8, 24039, 105, 113],"bool"), list[8,8,105,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 24039, 105, 113],"bool"), list[8,8,105,113,], ) 
 The expanded size of the tensor (8) must match the existing size (24039) at non-singleton dimension 1.  Target sizes: [8, 8, 105, 113].  Tensor sizes: [8, 24039, 105, 113]
2025-03-11 18:33:12.890325 test begin: paddle.broadcast_to(Tensor([8, 24053, 98, 121],"bool"), list[8,8,98,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 24053, 98, 121],"bool"), list[8,8,98,121,], ) 
 The expanded size of the tensor (8) must match the existing size (24053) at non-singleton dimension 1.  Target sizes: [8, 8, 98, 121].  Tensor sizes: [8, 24053, 98, 121]
2025-03-11 18:33:13.384006 test begin: paddle.broadcast_to(Tensor([8, 24270, 104, 113],"bool"), list[8,8,104,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 24270, 104, 113],"bool"), list[8,8,104,113,], ) 
 The expanded size of the tensor (8) must match the existing size (24270) at non-singleton dimension 1.  Target sizes: [8, 8, 104, 113].  Tensor sizes: [8, 24270, 104, 113]
2025-03-11 18:33:13.907693 test begin: paddle.broadcast_to(Tensor([8, 24301, 97, 121],"bool"), list[8,8,97,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 24301, 97, 121],"bool"), list[8,8,97,121,], ) 
 The expanded size of the tensor (8) must match the existing size (24301) at non-singleton dimension 1.  Target sizes: [8, 8, 97, 121].  Tensor sizes: [8, 24301, 97, 121]
2025-03-11 18:33:14.407300 test begin: paddle.broadcast_to(Tensor([8, 24453, 108, 108],"bool"), list[8,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([8, 24453, 108, 108],"bool"), list[8,8,108,108,], ) 
 The expanded size of the tensor (8) must match the existing size (24453) at non-singleton dimension 1.  Target sizes: [8, 8, 108, 108].  Tensor sizes: [8, 24453, 108, 108]
2025-03-11 18:33:14.934338 test begin: paddle.broadcast_to(Tensor([8, 24505, 103, 113],"bool"), list[8,8,103,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 24505, 103, 113],"bool"), list[8,8,103,113,], ) 
 The expanded size of the tensor (8) must match the existing size (24505) at non-singleton dimension 1.  Target sizes: [8, 8, 103, 113].  Tensor sizes: [8, 24505, 103, 113]
2025-03-11 18:33:15.470403 test begin: paddle.broadcast_to(Tensor([8, 24554, 96, 121],"bool"), list[8,8,96,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 24554, 96, 121],"bool"), list[8,8,96,121,], ) 
 The expanded size of the tensor (8) must match the existing size (24554) at non-singleton dimension 1.  Target sizes: [8, 8, 96, 121].  Tensor sizes: [8, 24554, 96, 121]
2025-03-11 18:33:15.996176 test begin: paddle.broadcast_to(Tensor([8, 246724, 34, 34],"bool"), list[8,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([8, 246724, 34, 34],"bool"), list[8,8,34,34,], ) 
 The expanded size of the tensor (8) must match the existing size (246724) at non-singleton dimension 1.  Target sizes: [8, 8, 34, 34].  Tensor sizes: [8, 246724, 34, 34]
2025-03-11 18:33:16.493346 test begin: paddle.broadcast_to(Tensor([8, 246938, 35, 33],"bool"), list[8,8,35,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 246938, 35, 33],"bool"), list[8,8,35,33,], ) 
 The expanded size of the tensor (8) must match the existing size (246938) at non-singleton dimension 1.  Target sizes: [8, 8, 35, 33].  Tensor sizes: [8, 246938, 35, 33]
2025-03-11 18:33:16.981891 test begin: paddle.broadcast_to(Tensor([8, 24746, 102, 113],"bool"), list[8,8,102,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 24746, 102, 113],"bool"), list[8,8,102,113,], ) 
 The expanded size of the tensor (8) must match the existing size (24746) at non-singleton dimension 1.  Target sizes: [8, 8, 102, 113].  Tensor sizes: [8, 24746, 102, 113]
2025-03-11 18:33:17.528654 test begin: paddle.broadcast_to(Tensor([8, 24812, 95, 121],"bool"), list[8,8,95,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 24812, 95, 121],"bool"), list[8,8,95,121,], ) 
 The expanded size of the tensor (8) must match the existing size (24812) at non-singleton dimension 1.  Target sizes: [8, 8, 95, 121].  Tensor sizes: [8, 24812, 95, 121]
2025-03-11 18:33:18.082146 test begin: paddle.broadcast_to(Tensor([8, 24912, 107, 107],"bool"), list[8,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([8, 24912, 107, 107],"bool"), list[8,8,107,107,], ) 
 The expanded size of the tensor (8) must match the existing size (24912) at non-singleton dimension 1.  Target sizes: [8, 8, 107, 107].  Tensor sizes: [8, 24912, 107, 107]
2025-03-11 18:33:18.642737 test begin: paddle.broadcast_to(Tensor([8, 24991, 101, 113],"bool"), list[8,8,101,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 24991, 101, 113],"bool"), list[8,8,101,113,], ) 
 The expanded size of the tensor (8) must match the existing size (24991) at non-singleton dimension 1.  Target sizes: [8, 8, 101, 113].  Tensor sizes: [8, 24991, 101, 113]
2025-03-11 18:33:19.133986 test begin: paddle.broadcast_to(Tensor([8, 25076, 94, 121],"bool"), list[8,8,94,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 25076, 94, 121],"bool"), list[8,8,94,121,], ) 
 The expanded size of the tensor (8) must match the existing size (25076) at non-singleton dimension 1.  Target sizes: [8, 8, 94, 121].  Tensor sizes: [8, 25076, 94, 121]
2025-03-11 18:33:19.654933 test begin: paddle.broadcast_to(Tensor([8, 2524006, 1, 113],"bool"), list[8,8,1,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 2524006, 1, 113],"bool"), list[8,8,1,113,], ) 
 The expanded size of the tensor (8) must match the existing size (2524006) at non-singleton dimension 1.  Target sizes: [8, 8, 1, 113].  Tensor sizes: [8, 2524006, 1, 113]
2025-03-11 18:33:20.185551 test begin: paddle.broadcast_to(Tensor([8, 252401, 10, 113],"bool"), list[8,8,10,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 252401, 10, 113],"bool"), list[8,8,10,113,], ) 
 The expanded size of the tensor (8) must match the existing size (252401) at non-singleton dimension 1.  Target sizes: [8, 8, 10, 113].  Tensor sizes: [8, 252401, 10, 113]
2025-03-11 18:33:20.728811 test begin: paddle.broadcast_to(Tensor([8, 25241, 100, 113],"bool"), list[8,8,100,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 25241, 100, 113],"bool"), list[8,8,100,113,], ) 
 The expanded size of the tensor (8) must match the existing size (25241) at non-singleton dimension 1.  Target sizes: [8, 8, 100, 113].  Tensor sizes: [8, 25241, 100, 113]
2025-03-11 18:33:21.223108 test begin: paddle.broadcast_to(Tensor([8, 25346, 93, 121],"bool"), list[8,8,93,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 25346, 93, 121],"bool"), list[8,8,93,121,], ) 
 The expanded size of the tensor (8) must match the existing size (25346) at non-singleton dimension 1.  Target sizes: [8, 8, 93, 121].  Tensor sizes: [8, 25346, 93, 121]
2025-03-11 18:33:21.811459 test begin: paddle.broadcast_to(Tensor([8, 25384, 106, 106],"bool"), list[8,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([8, 25384, 106, 106],"bool"), list[8,8,106,106,], ) 
 The expanded size of the tensor (8) must match the existing size (25384) at non-singleton dimension 1.  Target sizes: [8, 8, 106, 106].  Tensor sizes: [8, 25384, 106, 106]
2025-03-11 18:33:22.308691 test begin: paddle.broadcast_to(Tensor([8, 254201, 34, 33],"bool"), list[8,8,34,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 254201, 34, 33],"bool"), list[8,8,34,33,], ) 
 The expanded size of the tensor (8) must match the existing size (254201) at non-singleton dimension 1.  Target sizes: [8, 8, 34, 33].  Tensor sizes: [8, 254201, 34, 33]
2025-03-11 18:33:22.803711 test begin: paddle.broadcast_to(Tensor([8, 25496, 99, 113],"bool"), list[8,8,99,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 25496, 99, 113],"bool"), list[8,8,99,113,], ) 
 The expanded size of the tensor (8) must match the existing size (25496) at non-singleton dimension 1.  Target sizes: [8, 8, 99, 113].  Tensor sizes: [8, 25496, 99, 113]
2025-03-11 18:33:23.286974 test begin: paddle.broadcast_to(Tensor([8, 25621, 92, 121],"bool"), list[8,8,92,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 25621, 92, 121],"bool"), list[8,8,92,121,], ) 
 The expanded size of the tensor (8) must match the existing size (25621) at non-singleton dimension 1.  Target sizes: [8, 8, 92, 121].  Tensor sizes: [8, 25621, 92, 121]
2025-03-11 18:33:23.785675 test begin: paddle.broadcast_to(Tensor([8, 25756, 98, 113],"bool"), list[8,8,98,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 25756, 98, 113],"bool"), list[8,8,98,113,], ) 
 The expanded size of the tensor (8) must match the existing size (25756) at non-singleton dimension 1.  Target sizes: [8, 8, 98, 113].  Tensor sizes: [8, 25756, 98, 113]
2025-03-11 18:33:24.263385 test begin: paddle.broadcast_to(Tensor([8, 25870, 105, 105],"bool"), list[8,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([8, 25870, 105, 105],"bool"), list[8,8,105,105,], ) 
 The expanded size of the tensor (8) must match the existing size (25870) at non-singleton dimension 1.  Target sizes: [8, 8, 105, 105].  Tensor sizes: [8, 25870, 105, 105]
2025-03-11 18:33:24.753603 test begin: paddle.broadcast_to(Tensor([8, 25903, 91, 121],"bool"), list[8,8,91,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 25903, 91, 121],"bool"), list[8,8,91,121,], ) 
 The expanded size of the tensor (8) must match the existing size (25903) at non-singleton dimension 1.  Target sizes: [8, 8, 91, 121].  Tensor sizes: [8, 25903, 91, 121]
2025-03-11 18:33:25.231898 test begin: paddle.broadcast_to(Tensor([8, 26021, 97, 113],"bool"), list[8,8,97,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 26021, 97, 113],"bool"), list[8,8,97,113,], ) 
 The expanded size of the tensor (8) must match the existing size (26021) at non-singleton dimension 1.  Target sizes: [8, 8, 97, 113].  Tensor sizes: [8, 26021, 97, 113]
2025-03-11 18:33:25.710498 test begin: paddle.broadcast_to(Tensor([8, 261904, 33, 33],"bool"), list[8,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 261904, 33, 33],"bool"), list[8,8,33,33,], ) 
 The expanded size of the tensor (8) must match the existing size (261904) at non-singleton dimension 1.  Target sizes: [8, 8, 33, 33].  Tensor sizes: [8, 261904, 33, 33]
2025-03-11 18:33:26.246380 test begin: paddle.broadcast_to(Tensor([8, 261904, 9, 121],"bool"), list[8,8,9,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 261904, 9, 121],"bool"), list[8,8,9,121,], ) 
 The expanded size of the tensor (8) must match the existing size (261904) at non-singleton dimension 1.  Target sizes: [8, 8, 9, 121].  Tensor sizes: [8, 261904, 9, 121]
2025-03-11 18:33:26.731237 test begin: paddle.broadcast_to(Tensor([8, 26191, 90, 121],"bool"), list[8,8,90,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 26191, 90, 121],"bool"), list[8,8,90,121,], ) 
 The expanded size of the tensor (8) must match the existing size (26191) at non-singleton dimension 1.  Target sizes: [8, 8, 90, 121].  Tensor sizes: [8, 26191, 90, 121]
2025-03-11 18:33:27.215675 test begin: paddle.broadcast_to(Tensor([8, 26292, 96, 113],"bool"), list[8,8,96,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 26292, 96, 113],"bool"), list[8,8,96,113,], ) 
 The expanded size of the tensor (8) must match the existing size (26292) at non-singleton dimension 1.  Target sizes: [8, 8, 96, 113].  Tensor sizes: [8, 26292, 96, 113]
2025-03-11 18:33:27.697017 test begin: paddle.broadcast_to(Tensor([8, 26370, 104, 104],"bool"), list[8,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([8, 26370, 104, 104],"bool"), list[8,8,104,104,], ) 
 The expanded size of the tensor (8) must match the existing size (26370) at non-singleton dimension 1.  Target sizes: [8, 8, 104, 104].  Tensor sizes: [8, 26370, 104, 104]
2025-03-11 18:33:28.180452 test begin: paddle.broadcast_to(Tensor([8, 26485, 89, 121],"bool"), list[8,8,89,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 26485, 89, 121],"bool"), list[8,8,89,121,], ) 
 The expanded size of the tensor (8) must match the existing size (26485) at non-singleton dimension 1.  Target sizes: [8, 8, 89, 121].  Tensor sizes: [8, 26485, 89, 121]
2025-03-11 18:33:28.744473 test begin: paddle.broadcast_to(Tensor([8, 26569, 95, 113],"bool"), list[8,8,95,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 26569, 95, 113],"bool"), list[8,8,95,113,], ) 
 The expanded size of the tensor (8) must match the existing size (26569) at non-singleton dimension 1.  Target sizes: [8, 8, 95, 113].  Tensor sizes: [8, 26569, 95, 113]
2025-03-11 18:33:29.280208 test begin: paddle.broadcast_to(Tensor([8, 26786, 88, 121],"bool"), list[8,8,88,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 26786, 88, 121],"bool"), list[8,8,88,121,], ) 
 The expanded size of the tensor (8) must match the existing size (26786) at non-singleton dimension 1.  Target sizes: [8, 8, 88, 121].  Tensor sizes: [8, 26786, 88, 121]
2025-03-11 18:33:29.773621 test begin: paddle.broadcast_to(Tensor([8, 26852, 94, 113],"bool"), list[8,8,94,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 26852, 94, 113],"bool"), list[8,8,94,113,], ) 
 The expanded size of the tensor (8) must match the existing size (26852) at non-singleton dimension 1.  Target sizes: [8, 8, 94, 113].  Tensor sizes: [8, 26852, 94, 113]
2025-03-11 18:33:30.302884 test begin: paddle.broadcast_to(Tensor([8, 26885, 103, 103],"bool"), list[8,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([8, 26885, 103, 103],"bool"), list[8,8,103,103,], ) 
 The expanded size of the tensor (8) must match the existing size (26885) at non-singleton dimension 1.  Target sizes: [8, 8, 103, 103].  Tensor sizes: [8, 26885, 103, 103]
2025-03-11 18:33:30.798074 test begin: paddle.broadcast_to(Tensor([8, 270088, 32, 33],"bool"), list[8,8,32,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 270088, 32, 33],"bool"), list[8,8,32,33,], ) 
 The expanded size of the tensor (8) must match the existing size (270088) at non-singleton dimension 1.  Target sizes: [8, 8, 32, 33].  Tensor sizes: [8, 270088, 32, 33]
2025-03-11 18:33:31.329612 test begin: paddle.broadcast_to(Tensor([8, 27094, 87, 121],"bool"), list[8,8,87,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 27094, 87, 121],"bool"), list[8,8,87,121,], ) 
 The expanded size of the tensor (8) must match the existing size (27094) at non-singleton dimension 1.  Target sizes: [8, 8, 87, 121].  Tensor sizes: [8, 27094, 87, 121]
2025-03-11 18:33:31.823132 test begin: paddle.broadcast_to(Tensor([8, 27140, 93, 113],"bool"), list[8,8,93,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 27140, 93, 113],"bool"), list[8,8,93,113,], ) 
 The expanded size of the tensor (8) must match the existing size (27140) at non-singleton dimension 1.  Target sizes: [8, 8, 93, 113].  Tensor sizes: [8, 27140, 93, 113]
2025-03-11 18:33:32.310823 test begin: paddle.broadcast_to(Tensor([8, 27409, 86, 121],"bool"), list[8,8,86,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 27409, 86, 121],"bool"), list[8,8,86,121,], ) 
 The expanded size of the tensor (8) must match the existing size (27409) at non-singleton dimension 1.  Target sizes: [8, 8, 86, 121].  Tensor sizes: [8, 27409, 86, 121]
2025-03-11 18:33:32.864873 test begin: paddle.broadcast_to(Tensor([8, 27414, 102, 102],"bool"), list[8,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([8, 27414, 102, 102],"bool"), list[8,8,102,102,], ) 
 The expanded size of the tensor (8) must match the existing size (27414) at non-singleton dimension 1.  Target sizes: [8, 8, 102, 102].  Tensor sizes: [8, 27414, 102, 102]
2025-03-11 18:33:33.355889 test begin: paddle.broadcast_to(Tensor([8, 27435, 92, 113],"bool"), list[8,8,92,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 27435, 92, 113],"bool"), list[8,8,92,113,], ) 
 The expanded size of the tensor (8) must match the existing size (27435) at non-singleton dimension 1.  Target sizes: [8, 8, 92, 113].  Tensor sizes: [8, 27435, 92, 113]
2025-03-11 18:33:33.852172 test begin: paddle.broadcast_to(Tensor([8, 27731, 85, 121],"bool"), list[8,8,85,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 27731, 85, 121],"bool"), list[8,8,85,121,], ) 
 The expanded size of the tensor (8) must match the existing size (27731) at non-singleton dimension 1.  Target sizes: [8, 8, 85, 121].  Tensor sizes: [8, 27731, 85, 121]
2025-03-11 18:33:34.400134 test begin: paddle.broadcast_to(Tensor([8, 27737, 91, 113],"bool"), list[8,8,91,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 27737, 91, 113],"bool"), list[8,8,91,113,], ) 
 The expanded size of the tensor (8) must match the existing size (27737) at non-singleton dimension 1.  Target sizes: [8, 8, 91, 113].  Tensor sizes: [8, 27737, 91, 113]
2025-03-11 18:33:34.892080 test begin: paddle.broadcast_to(Tensor([8, 278529, 32, 32],"bool"), list[8,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([8, 278529, 32, 32],"bool"), list[8,8,32,32,], ) 
 The expanded size of the tensor (8) must match the existing size (278529) at non-singleton dimension 1.  Target sizes: [8, 8, 32, 32].  Tensor sizes: [8, 278529, 32, 32]
2025-03-11 18:33:35.379202 test begin: paddle.broadcast_to(Tensor([8, 278801, 31, 33],"bool"), list[8,8,31,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 278801, 31, 33],"bool"), list[8,8,31,33,], ) 
 The expanded size of the tensor (8) must match the existing size (278801) at non-singleton dimension 1.  Target sizes: [8, 8, 31, 33].  Tensor sizes: [8, 278801, 31, 33]
2025-03-11 18:33:35.867771 test begin: paddle.broadcast_to(Tensor([8, 27960, 101, 101],"bool"), list[8,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([8, 27960, 101, 101],"bool"), list[8,8,101,101,], ) 
 The expanded size of the tensor (8) must match the existing size (27960) at non-singleton dimension 1.  Target sizes: [8, 8, 101, 101].  Tensor sizes: [8, 27960, 101, 101]
2025-03-11 18:33:36.350264 test begin: paddle.broadcast_to(Tensor([8, 280446, 9, 113],"bool"), list[8,8,9,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 280446, 9, 113],"bool"), list[8,8,9,113,], ) 
 The expanded size of the tensor (8) must match the existing size (280446) at non-singleton dimension 1.  Target sizes: [8, 8, 9, 113].  Tensor sizes: [8, 280446, 9, 113]
2025-03-11 18:33:36.841383 test begin: paddle.broadcast_to(Tensor([8, 28045, 90, 113],"bool"), list[8,8,90,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 28045, 90, 113],"bool"), list[8,8,90,113,], ) 
 The expanded size of the tensor (8) must match the existing size (28045) at non-singleton dimension 1.  Target sizes: [8, 8, 90, 113].  Tensor sizes: [8, 28045, 90, 113]
2025-03-11 18:33:37.334715 test begin: paddle.broadcast_to(Tensor([8, 28062, 84, 121],"bool"), list[8,8,84,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 28062, 84, 121],"bool"), list[8,8,84,121,], ) 
 The expanded size of the tensor (8) must match the existing size (28062) at non-singleton dimension 1.  Target sizes: [8, 8, 84, 121].  Tensor sizes: [8, 28062, 84, 121]
2025-03-11 18:33:37.893397 test begin: paddle.broadcast_to(Tensor([8, 28360, 89, 113],"bool"), list[8,8,89,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 28360, 89, 113],"bool"), list[8,8,89,113,], ) 
 The expanded size of the tensor (8) must match the existing size (28360) at non-singleton dimension 1.  Target sizes: [8, 8, 89, 113].  Tensor sizes: [8, 28360, 89, 113]
2025-03-11 18:33:38.467214 test begin: paddle.broadcast_to(Tensor([8, 28400, 83, 121],"bool"), list[8,8,83,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 28400, 83, 121],"bool"), list[8,8,83,121,], ) 
 The expanded size of the tensor (8) must match the existing size (28400) at non-singleton dimension 1.  Target sizes: [8, 8, 83, 121].  Tensor sizes: [8, 28400, 83, 121]
2025-03-11 18:33:39.012672 test begin: paddle.broadcast_to(Tensor([8, 285212673, 1, 1],"bool"), list[8,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([8, 285212673, 1, 1],"bool"), list[8,8,1,1,], ) 
 The expanded size of the tensor (8) must match the existing size (285212673) at non-singleton dimension 1.  Target sizes: [8, 8, 1, 1].  Tensor sizes: [8, 285212673, 1, 1]
2025-03-11 18:33:39.505001 test begin: paddle.broadcast_to(Tensor([8, 285212673],"bool"), list[8,2,], )

[torch error] paddle.broadcast_to(Tensor([8, 285212673],"bool"), list[8,2,], ) 
 The expanded size of the tensor (2) must match the existing size (285212673) at non-singleton dimension 1.  Target sizes: [8, 2].  Tensor sizes: [8, 285212673]
2025-03-11 18:33:40.052813 test begin: paddle.broadcast_to(Tensor([8, 285212673],"float32"), tuple(8,3,), )

[torch error] paddle.broadcast_to(Tensor([8, 285212673],"float32"), tuple(8,3,), ) 
 The expanded size of the tensor (3) must match the existing size (285212673) at non-singleton dimension 1.  Target sizes: [8, 3].  Tensor sizes: [8, 285212673]
2025-03-11 18:34:45.403818 test begin: paddle.broadcast_to(Tensor([8, 285212673],"float32"), tuple(8,799,), )

[torch error] paddle.broadcast_to(Tensor([8, 285212673],"float32"), tuple(8,799,), ) 
 The expanded size of the tensor (799) must match the existing size (285212673) at non-singleton dimension 1.  Target sizes: [8, 799].  Tensor sizes: [8, 285212673]
2025-03-11 18:34:47.408307 test begin: paddle.broadcast_to(Tensor([8, 285212673],"int64"), shape=list[8,500,], )

[torch error] paddle.broadcast_to(Tensor([8, 285212673],"int64"), shape=list[8,500,], ) 
 The expanded size of the tensor (500) must match the existing size (285212673) at non-singleton dimension 1.  Target sizes: [8, 500].  Tensor sizes: [8, 285212673]
2025-03-11 18:35:42.521268 test begin: paddle.broadcast_to(Tensor([8, 285212673],"int64"), tuple(8,1,), )

[torch error] paddle.broadcast_to(Tensor([8, 285212673],"int64"), tuple(8,1,), ) 
 The expanded size of the tensor (1) must match the existing size (285212673) at non-singleton dimension 1.  Target sizes: [8, 1].  Tensor sizes: [8, 285212673]
2025-03-11 18:35:46.349478 test begin: paddle.broadcast_to(Tensor([8, 285212673],"int64"), tuple(8,799,), )

[torch error] paddle.broadcast_to(Tensor([8, 285212673],"int64"), tuple(8,799,), ) 
 The expanded size of the tensor (799) must match the existing size (285212673) at non-singleton dimension 1.  Target sizes: [8, 799].  Tensor sizes: [8, 285212673]
2025-03-11 18:35:50.813667 test begin: paddle.broadcast_to(Tensor([8, 2852127, 10, 10],"bool"), list[8,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([8, 2852127, 10, 10],"bool"), list[8,8,10,10,], ) 
 The expanded size of the tensor (8) must match the existing size (2852127) at non-singleton dimension 1.  Target sizes: [8, 8, 10, 10].  Tensor sizes: [8, 2852127, 10, 10]
2025-03-11 18:35:51.953711 test begin: paddle.broadcast_to(Tensor([8, 28522, 100, 100],"bool"), list[8,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([8, 28522, 100, 100],"bool"), list[8,8,100,100,], ) 
 The expanded size of the tensor (8) must match the existing size (28522) at non-singleton dimension 1.  Target sizes: [8, 8, 100, 100].  Tensor sizes: [8, 28522, 100, 100]
2025-03-11 18:35:52.444452 test begin: paddle.broadcast_to(Tensor([8, 28682, 88, 113],"bool"), list[8,8,88,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 28682, 88, 113],"bool"), list[8,8,88,113,], ) 
 The expanded size of the tensor (8) must match the existing size (28682) at non-singleton dimension 1.  Target sizes: [8, 8, 88, 113].  Tensor sizes: [8, 28682, 88, 113]
2025-03-11 18:35:52.929897 test begin: paddle.broadcast_to(Tensor([8, 28746, 82, 121],"bool"), list[8,8,82,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 28746, 82, 121],"bool"), list[8,8,82,121,], ) 
 The expanded size of the tensor (8) must match the existing size (28746) at non-singleton dimension 1.  Target sizes: [8, 8, 82, 121].  Tensor sizes: [8, 28746, 82, 121]
2025-03-11 18:35:53.417816 test begin: paddle.broadcast_to(Tensor([8, 2880937, 3, 33],"bool"), list[8,8,3,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 2880937, 3, 33],"bool"), list[8,8,3,33,], ) 
 The expanded size of the tensor (8) must match the existing size (2880937) at non-singleton dimension 1.  Target sizes: [8, 8, 3, 33].  Tensor sizes: [8, 2880937, 3, 33]
2025-03-11 18:35:54.017007 test begin: paddle.broadcast_to(Tensor([8, 288094, 30, 33],"bool"), list[8,8,30,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 288094, 30, 33],"bool"), list[8,8,30,33,], ) 
 The expanded size of the tensor (8) must match the existing size (288094) at non-singleton dimension 1.  Target sizes: [8, 8, 30, 33].  Tensor sizes: [8, 288094, 30, 33]
2025-03-11 18:35:54.529052 test begin: paddle.broadcast_to(Tensor([8, 29012, 87, 113],"bool"), list[8,8,87,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 29012, 87, 113],"bool"), list[8,8,87,113,], ) 
 The expanded size of the tensor (8) must match the existing size (29012) at non-singleton dimension 1.  Target sizes: [8, 8, 87, 113].  Tensor sizes: [8, 29012, 87, 113]
2025-03-11 18:35:55.200179 test begin: paddle.broadcast_to(Tensor([8, 29101, 81, 121],"bool"), list[8,8,81,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 29101, 81, 121],"bool"), list[8,8,81,121,], ) 
 The expanded size of the tensor (8) must match the existing size (29101) at non-singleton dimension 1.  Target sizes: [8, 8, 81, 121].  Tensor sizes: [8, 29101, 81, 121]
2025-03-11 18:35:55.797710 test begin: paddle.broadcast_to(Tensor([8, 29101, 99, 99],"bool"), list[8,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([8, 29101, 99, 99],"bool"), list[8,8,99,99,], ) 
 The expanded size of the tensor (8) must match the existing size (29101) at non-singleton dimension 1.  Target sizes: [8, 8, 99, 99].  Tensor sizes: [8, 29101, 99, 99]
2025-03-11 18:35:56.418032 test begin: paddle.broadcast_to(Tensor([8, 29349, 86, 113],"bool"), list[8,8,86,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 29349, 86, 113],"bool"), list[8,8,86,113,], ) 
 The expanded size of the tensor (8) must match the existing size (29349) at non-singleton dimension 1.  Target sizes: [8, 8, 86, 113].  Tensor sizes: [8, 29349, 86, 113]
2025-03-11 18:35:56.909794 test begin: paddle.broadcast_to(Tensor([8, 294642, 8, 121],"bool"), list[8,8,8,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 294642, 8, 121],"bool"), list[8,8,8,121,], ) 
 The expanded size of the tensor (8) must match the existing size (294642) at non-singleton dimension 1.  Target sizes: [8, 8, 8, 121].  Tensor sizes: [8, 294642, 8, 121]
2025-03-11 18:35:57.466368 test begin: paddle.broadcast_to(Tensor([8, 29465, 80, 121],"bool"), list[8,8,80,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 29465, 80, 121],"bool"), list[8,8,80,121,], ) 
 The expanded size of the tensor (8) must match the existing size (29465) at non-singleton dimension 1.  Target sizes: [8, 8, 80, 121].  Tensor sizes: [8, 29465, 80, 121]
2025-03-11 18:35:57.963127 test begin: paddle.broadcast_to(Tensor([8, 296788, 31, 31],"bool"), list[8,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([8, 296788, 31, 31],"bool"), list[8,8,31,31,], ) 
 The expanded size of the tensor (8) must match the existing size (296788) at non-singleton dimension 1.  Target sizes: [8, 8, 31, 31].  Tensor sizes: [8, 296788, 31, 31]
2025-03-11 18:35:58.581986 test begin: paddle.broadcast_to(Tensor([8, 29695, 85, 113],"bool"), list[8,8,85,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 29695, 85, 113],"bool"), list[8,8,85,113,], ) 
 The expanded size of the tensor (8) must match the existing size (29695) at non-singleton dimension 1.  Target sizes: [8, 8, 85, 113].  Tensor sizes: [8, 29695, 85, 113]
2025-03-11 18:35:59.102022 test begin: paddle.broadcast_to(Tensor([8, 29698, 98, 98],"bool"), list[8,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([8, 29698, 98, 98],"bool"), list[8,8,98,98,], ) 
 The expanded size of the tensor (8) must match the existing size (29698) at non-singleton dimension 1.  Target sizes: [8, 8, 98, 98].  Tensor sizes: [8, 29698, 98, 98]
2025-03-11 18:35:59.458400 test begin: paddle.broadcast_to(Tensor([8, 298028, 29, 33],"bool"), list[8,8,29,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 298028, 29, 33],"bool"), list[8,8,29,33,], ) 
 The expanded size of the tensor (8) must match the existing size (298028) at non-singleton dimension 1.  Target sizes: [8, 8, 29, 33].  Tensor sizes: [8, 298028, 29, 33]
2025-03-11 18:35:59.959934 test begin: paddle.broadcast_to(Tensor([8, 29838, 79, 121],"bool"), list[8,8,79,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 29838, 79, 121],"bool"), list[8,8,79,121,], ) 
 The expanded size of the tensor (8) must match the existing size (29838) at non-singleton dimension 1.  Target sizes: [8, 8, 79, 121].  Tensor sizes: [8, 29838, 79, 121]
2025-03-11 18:36:00.516311 test begin: paddle.broadcast_to(Tensor([8, 30048, 84, 113],"bool"), list[8,8,84,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 30048, 84, 113],"bool"), list[8,8,84,113,], ) 
 The expanded size of the tensor (8) must match the existing size (30048) at non-singleton dimension 1.  Target sizes: [8, 8, 84, 113].  Tensor sizes: [8, 30048, 84, 113]
2025-03-11 18:36:01.152188 test begin: paddle.broadcast_to(Tensor([8, 30220, 78, 121],"bool"), list[8,8,78,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 30220, 78, 121],"bool"), list[8,8,78,121,], ) 
 The expanded size of the tensor (8) must match the existing size (30220) at non-singleton dimension 1.  Target sizes: [8, 8, 78, 121].  Tensor sizes: [8, 30220, 78, 121]
2025-03-11 18:36:01.662520 test begin: paddle.broadcast_to(Tensor([8, 30313, 97, 97],"bool"), list[8,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([8, 30313, 97, 97],"bool"), list[8,8,97,97,], ) 
 The expanded size of the tensor (8) must match the existing size (30313) at non-singleton dimension 1.  Target sizes: [8, 8, 97, 97].  Tensor sizes: [8, 30313, 97, 97]
2025-03-11 18:36:02.266419 test begin: paddle.broadcast_to(Tensor([8, 30410, 83, 113],"bool"), list[8,8,83,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 30410, 83, 113],"bool"), list[8,8,83,113,], ) 
 The expanded size of the tensor (8) must match the existing size (30410) at non-singleton dimension 1.  Target sizes: [8, 8, 83, 113].  Tensor sizes: [8, 30410, 83, 113]
2025-03-11 18:36:02.751357 test begin: paddle.broadcast_to(Tensor([8, 30613, 77, 121],"bool"), list[8,8,77,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 30613, 77, 121],"bool"), list[8,8,77,121,], ) 
 The expanded size of the tensor (8) must match the existing size (30613) at non-singleton dimension 1.  Target sizes: [8, 8, 77, 121].  Tensor sizes: [8, 30613, 77, 121]
2025-03-11 18:36:03.338335 test begin: paddle.broadcast_to(Tensor([8, 30781, 82, 113],"bool"), list[8,8,82,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 30781, 82, 113],"bool"), list[8,8,82,113,], ) 
 The expanded size of the tensor (8) must match the existing size (30781) at non-singleton dimension 1.  Target sizes: [8, 8, 82, 113].  Tensor sizes: [8, 30781, 82, 113]
2025-03-11 18:36:03.717086 test begin: paddle.broadcast_to(Tensor([8, 308672, 28, 33],"bool"), list[8,8,28,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 308672, 28, 33],"bool"), list[8,8,28,33,], ) 
 The expanded size of the tensor (8) must match the existing size (308672) at non-singleton dimension 1.  Target sizes: [8, 8, 28, 33].  Tensor sizes: [8, 308672, 28, 33]
2025-03-11 18:36:04.222140 test begin: paddle.broadcast_to(Tensor([8, 30948, 96, 96],"bool"), list[8,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([8, 30948, 96, 96],"bool"), list[8,8,96,96,], ) 
 The expanded size of the tensor (8) must match the existing size (30948) at non-singleton dimension 1.  Target sizes: [8, 8, 96, 96].  Tensor sizes: [8, 30948, 96, 96]
2025-03-11 18:36:04.707126 test begin: paddle.broadcast_to(Tensor([8, 31015, 76, 121],"bool"), list[8,8,76,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 31015, 76, 121],"bool"), list[8,8,76,121,], ) 
 The expanded size of the tensor (8) must match the existing size (31015) at non-singleton dimension 1.  Target sizes: [8, 8, 76, 121].  Tensor sizes: [8, 31015, 76, 121]
2025-03-11 18:36:05.199778 test begin: paddle.broadcast_to(Tensor([8, 31161, 81, 113],"bool"), list[8,8,81,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 31161, 81, 113],"bool"), list[8,8,81,113,], ) 
 The expanded size of the tensor (8) must match the existing size (31161) at non-singleton dimension 1.  Target sizes: [8, 8, 81, 113].  Tensor sizes: [8, 31161, 81, 113]
2025-03-11 18:36:05.791010 test begin: paddle.broadcast_to(Tensor([8, 31429, 75, 121],"bool"), list[8,8,75,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 31429, 75, 121],"bool"), list[8,8,75,121,], ) 
 The expanded size of the tensor (8) must match the existing size (31429) at non-singleton dimension 1.  Target sizes: [8, 8, 75, 121].  Tensor sizes: [8, 31429, 75, 121]
2025-03-11 18:36:06.168132 test begin: paddle.broadcast_to(Tensor([8, 315501, 8, 113],"bool"), list[8,8,8,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 315501, 8, 113],"bool"), list[8,8,8,113,], ) 
 The expanded size of the tensor (8) must match the existing size (315501) at non-singleton dimension 1.  Target sizes: [8, 8, 8, 113].  Tensor sizes: [8, 315501, 8, 113]
2025-03-11 18:36:06.673398 test begin: paddle.broadcast_to(Tensor([8, 31551, 80, 113],"bool"), list[8,8,80,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 31551, 80, 113],"bool"), list[8,8,80,113,], ) 
 The expanded size of the tensor (8) must match the existing size (31551) at non-singleton dimension 1.  Target sizes: [8, 8, 80, 113].  Tensor sizes: [8, 31551, 80, 113]
2025-03-11 18:36:07.229763 test begin: paddle.broadcast_to(Tensor([8, 31603, 95, 95],"bool"), list[8,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([8, 31603, 95, 95],"bool"), list[8,8,95,95,], ) 
 The expanded size of the tensor (8) must match the existing size (31603) at non-singleton dimension 1.  Target sizes: [8, 8, 95, 95].  Tensor sizes: [8, 31603, 95, 95]
2025-03-11 18:36:07.733104 test begin: paddle.broadcast_to(Tensor([8, 31690297, 3, 3],"bool"), list[8,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([8, 31690297, 3, 3],"bool"), list[8,8,3,3,], ) 
 The expanded size of the tensor (8) must match the existing size (31690297) at non-singleton dimension 1.  Target sizes: [8, 8, 3, 3].  Tensor sizes: [8, 31690297, 3, 3]
2025-03-11 18:36:08.308233 test begin: paddle.broadcast_to(Tensor([8, 316903, 30, 30],"bool"), list[8,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([8, 316903, 30, 30],"bool"), list[8,8,30,30,], ) 
 The expanded size of the tensor (8) must match the existing size (316903) at non-singleton dimension 1.  Target sizes: [8, 8, 30, 30].  Tensor sizes: [8, 316903, 30, 30]
2025-03-11 18:36:08.801432 test begin: paddle.broadcast_to(Tensor([8, 31854, 74, 121],"bool"), list[8,8,74,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 31854, 74, 121],"bool"), list[8,8,74,121,], ) 
 The expanded size of the tensor (8) must match the existing size (31854) at non-singleton dimension 1.  Target sizes: [8, 8, 74, 121].  Tensor sizes: [8, 31854, 74, 121]
2025-03-11 18:36:09.297637 test begin: paddle.broadcast_to(Tensor([8, 31950, 79, 113],"bool"), list[8,8,79,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 31950, 79, 113],"bool"), list[8,8,79,113,], ) 
 The expanded size of the tensor (8) must match the existing size (31950) at non-singleton dimension 1.  Target sizes: [8, 8, 79, 113].  Tensor sizes: [8, 31950, 79, 113]
2025-03-11 18:36:09.787448 test begin: paddle.broadcast_to(Tensor([8, 320105, 27, 33],"bool"), list[8,8,27,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 320105, 27, 33],"bool"), list[8,8,27,33,], ) 
 The expanded size of the tensor (8) must match the existing size (320105) at non-singleton dimension 1.  Target sizes: [8, 8, 27, 33].  Tensor sizes: [8, 320105, 27, 33]
2025-03-11 18:36:10.277591 test begin: paddle.broadcast_to(Tensor([8, 32279, 94, 94],"bool"), list[8,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([8, 32279, 94, 94],"bool"), list[8,8,94,94,], ) 
 The expanded size of the tensor (8) must match the existing size (32279) at non-singleton dimension 1.  Target sizes: [8, 8, 94, 94].  Tensor sizes: [8, 32279, 94, 94]
2025-03-11 18:36:10.766626 test begin: paddle.broadcast_to(Tensor([8, 32290, 73, 121],"bool"), list[8,8,73,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 32290, 73, 121],"bool"), list[8,8,73,121,], ) 
 The expanded size of the tensor (8) must match the existing size (32290) at non-singleton dimension 1.  Target sizes: [8, 8, 73, 121].  Tensor sizes: [8, 32290, 73, 121]
2025-03-11 18:36:11.300321 test begin: paddle.broadcast_to(Tensor([8, 32360, 78, 113],"bool"), list[8,8,78,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 32360, 78, 113],"bool"), list[8,8,78,113,], ) 
 The expanded size of the tensor (8) must match the existing size (32360) at non-singleton dimension 1.  Target sizes: [8, 8, 78, 113].  Tensor sizes: [8, 32360, 78, 113]
2025-03-11 18:36:11.862367 test begin: paddle.broadcast_to(Tensor([8, 32738, 72, 121],"bool"), list[8,8,72,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 32738, 72, 121],"bool"), list[8,8,72,121,], ) 
 The expanded size of the tensor (8) must match the existing size (32738) at non-singleton dimension 1.  Target sizes: [8, 8, 72, 121].  Tensor sizes: [8, 32738, 72, 121]
2025-03-11 18:36:12.352471 test begin: paddle.broadcast_to(Tensor([8, 32780, 77, 113],"bool"), list[8,8,77,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 32780, 77, 113],"bool"), list[8,8,77,113,], ) 
 The expanded size of the tensor (8) must match the existing size (32780) at non-singleton dimension 1.  Target sizes: [8, 8, 77, 113].  Tensor sizes: [8, 32780, 77, 113]
2025-03-11 18:36:12.832212 test begin: paddle.broadcast_to(Tensor([8, 32977, 93, 93],"bool"), list[8,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([8, 32977, 93, 93],"bool"), list[8,8,93,93,], ) 
 The expanded size of the tensor (8) must match the existing size (32977) at non-singleton dimension 1.  Target sizes: [8, 8, 93, 93].  Tensor sizes: [8, 32977, 93, 93]
2025-03-11 18:36:13.329414 test begin: paddle.broadcast_to(Tensor([8, 33200, 71, 121],"bool"), list[8,8,71,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 33200, 71, 121],"bool"), list[8,8,71,121,], ) 
 The expanded size of the tensor (8) must match the existing size (33200) at non-singleton dimension 1.  Target sizes: [8, 8, 71, 121].  Tensor sizes: [8, 33200, 71, 121]
2025-03-11 18:36:13.858434 test begin: paddle.broadcast_to(Tensor([8, 33211, 76, 113],"bool"), list[8,8,76,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 33211, 76, 113],"bool"), list[8,8,76,113,], ) 
 The expanded size of the tensor (8) must match the existing size (33211) at non-singleton dimension 1.  Target sizes: [8, 8, 76, 113].  Tensor sizes: [8, 33211, 76, 113]
2025-03-11 18:36:14.345572 test begin: paddle.broadcast_to(Tensor([8, 3323, 293, 293],"bool"), list[8,8,293,293,], )

[torch error] paddle.broadcast_to(Tensor([8, 3323, 293, 293],"bool"), list[8,8,293,293,], ) 
 The expanded size of the tensor (8) must match the existing size (3323) at non-singleton dimension 1.  Target sizes: [8, 8, 293, 293].  Tensor sizes: [8, 3323, 293, 293]
2025-03-11 18:36:14.895759 test begin: paddle.broadcast_to(Tensor([8, 332416, 26, 33],"bool"), list[8,8,26,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 332416, 26, 33],"bool"), list[8,8,26,33,], ) 
 The expanded size of the tensor (8) must match the existing size (332416) at non-singleton dimension 1.  Target sizes: [8, 8, 26, 33].  Tensor sizes: [8, 332416, 26, 33]
2025-03-11 18:36:15.437951 test begin: paddle.broadcast_to(Tensor([8, 3346, 292, 292],"bool"), list[8,8,292,292,], )

[torch error] paddle.broadcast_to(Tensor([8, 3346, 292, 292],"bool"), list[8,8,292,292,], ) 
 The expanded size of the tensor (8) must match the existing size (3346) at non-singleton dimension 1.  Target sizes: [8, 8, 292, 292].  Tensor sizes: [8, 3346, 292, 292]
2025-03-11 18:36:15.930705 test begin: paddle.broadcast_to(Tensor([8, 33654, 75, 113],"bool"), list[8,8,75,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 33654, 75, 113],"bool"), list[8,8,75,113,], ) 
 The expanded size of the tensor (8) must match the existing size (33654) at non-singleton dimension 1.  Target sizes: [8, 8, 75, 113].  Tensor sizes: [8, 33654, 75, 113]
2025-03-11 18:36:16.416870 test begin: paddle.broadcast_to(Tensor([8, 336733, 7, 121],"bool"), list[8,8,7,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 336733, 7, 121],"bool"), list[8,8,7,121,], ) 
 The expanded size of the tensor (8) must match the existing size (336733) at non-singleton dimension 1.  Target sizes: [8, 8, 7, 121].  Tensor sizes: [8, 336733, 7, 121]
2025-03-11 18:36:16.952185 test begin: paddle.broadcast_to(Tensor([8, 33674, 70, 121],"bool"), list[8,8,70,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 33674, 70, 121],"bool"), list[8,8,70,121,], ) 
 The expanded size of the tensor (8) must match the existing size (33674) at non-singleton dimension 1.  Target sizes: [8, 8, 70, 121].  Tensor sizes: [8, 33674, 70, 121]
2025-03-11 18:36:17.439773 test begin: paddle.broadcast_to(Tensor([8, 3369, 291, 291],"bool"), list[8,8,291,291,], )

[torch error] paddle.broadcast_to(Tensor([8, 3369, 291, 291],"bool"), list[8,8,291,291,], ) 
 The expanded size of the tensor (8) must match the existing size (3369) at non-singleton dimension 1.  Target sizes: [8, 8, 291, 291].  Tensor sizes: [8, 3369, 291, 291]
2025-03-11 18:36:17.971081 test begin: paddle.broadcast_to(Tensor([8, 33698, 92, 92],"bool"), list[8,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([8, 33698, 92, 92],"bool"), list[8,8,92,92,], ) 
 The expanded size of the tensor (8) must match the existing size (33698) at non-singleton dimension 1.  Target sizes: [8, 8, 92, 92].  Tensor sizes: [8, 33698, 92, 92]
2025-03-11 18:36:18.480441 test begin: paddle.broadcast_to(Tensor([8, 339136, 29, 29],"bool"), list[8,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([8, 339136, 29, 29],"bool"), list[8,8,29,29,], ) 
 The expanded size of the tensor (8) must match the existing size (339136) at non-singleton dimension 1.  Target sizes: [8, 8, 29, 29].  Tensor sizes: [8, 339136, 29, 29]
2025-03-11 18:36:18.961446 test begin: paddle.broadcast_to(Tensor([8, 3392, 290, 290],"bool"), list[8,8,290,290,], )

[torch error] paddle.broadcast_to(Tensor([8, 3392, 290, 290],"bool"), list[8,8,290,290,], ) 
 The expanded size of the tensor (8) must match the existing size (3392) at non-singleton dimension 1.  Target sizes: [8, 8, 290, 290].  Tensor sizes: [8, 3392, 290, 290]
2025-03-11 18:36:19.551096 test begin: paddle.broadcast_to(Tensor([8, 34109, 74, 113],"bool"), list[8,8,74,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 34109, 74, 113],"bool"), list[8,8,74,113,], ) 
 The expanded size of the tensor (8) must match the existing size (34109) at non-singleton dimension 1.  Target sizes: [8, 8, 74, 113].  Tensor sizes: [8, 34109, 74, 113]
2025-03-11 18:36:19.980945 test begin: paddle.broadcast_to(Tensor([8, 3415, 289, 289],"bool"), list[8,8,289,289,], )

[torch error] paddle.broadcast_to(Tensor([8, 3415, 289, 289],"bool"), list[8,8,289,289,], ) 
 The expanded size of the tensor (8) must match the existing size (3415) at non-singleton dimension 1.  Target sizes: [8, 8, 289, 289].  Tensor sizes: [8, 3415, 289, 289]
2025-03-11 18:36:20.538360 test begin: paddle.broadcast_to(Tensor([8, 34162, 69, 121],"bool"), list[8,8,69,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 34162, 69, 121],"bool"), list[8,8,69,121,], ) 
 The expanded size of the tensor (8) must match the existing size (34162) at non-singleton dimension 1.  Target sizes: [8, 8, 69, 121].  Tensor sizes: [8, 34162, 69, 121]
2025-03-11 18:36:21.067943 test begin: paddle.broadcast_to(Tensor([8, 3439, 288, 288],"bool"), list[8,8,288,288,], )

[torch error] paddle.broadcast_to(Tensor([8, 3439, 288, 288],"bool"), list[8,8,288,288,], ) 
 The expanded size of the tensor (8) must match the existing size (3439) at non-singleton dimension 1.  Target sizes: [8, 8, 288, 288].  Tensor sizes: [8, 3439, 288, 288]
2025-03-11 18:36:21.666144 test begin: paddle.broadcast_to(Tensor([8, 34442, 91, 91],"bool"), list[8,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([8, 34442, 91, 91],"bool"), list[8,8,91,91,], ) 
 The expanded size of the tensor (8) must match the existing size (34442) at non-singleton dimension 1.  Target sizes: [8, 8, 91, 91].  Tensor sizes: [8, 34442, 91, 91]
2025-03-11 18:36:22.031305 test begin: paddle.broadcast_to(Tensor([8, 345713, 25, 33],"bool"), list[8,8,25,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 345713, 25, 33],"bool"), list[8,8,25,33,], ) 
 The expanded size of the tensor (8) must match the existing size (345713) at non-singleton dimension 1.  Target sizes: [8, 8, 25, 33].  Tensor sizes: [8, 345713, 25, 33]
2025-03-11 18:36:22.608584 test begin: paddle.broadcast_to(Tensor([8, 34576, 73, 113],"bool"), list[8,8,73,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 34576, 73, 113],"bool"), list[8,8,73,113,], ) 
 The expanded size of the tensor (8) must match the existing size (34576) at non-singleton dimension 1.  Target sizes: [8, 8, 73, 113].  Tensor sizes: [8, 34576, 73, 113]
2025-03-11 18:36:23.101976 test begin: paddle.broadcast_to(Tensor([8, 3463, 287, 287],"bool"), list[8,8,287,287,], )

[torch error] paddle.broadcast_to(Tensor([8, 3463, 287, 287],"bool"), list[8,8,287,287,], ) 
 The expanded size of the tensor (8) must match the existing size (3463) at non-singleton dimension 1.  Target sizes: [8, 8, 287, 287].  Tensor sizes: [8, 3463, 287, 287]
2025-03-11 18:36:23.585186 test begin: paddle.broadcast_to(Tensor([8, 34664, 68, 121],"bool"), list[8,8,68,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 34664, 68, 121],"bool"), list[8,8,68,121,], ) 
 The expanded size of the tensor (8) must match the existing size (34664) at non-singleton dimension 1.  Target sizes: [8, 8, 68, 121].  Tensor sizes: [8, 34664, 68, 121]
2025-03-11 18:36:24.063974 test begin: paddle.broadcast_to(Tensor([8, 3487, 286, 286],"bool"), list[8,8,286,286,], )

[torch error] paddle.broadcast_to(Tensor([8, 3487, 286, 286],"bool"), list[8,8,286,286,], ) 
 The expanded size of the tensor (8) must match the existing size (3487) at non-singleton dimension 1.  Target sizes: [8, 8, 286, 286].  Tensor sizes: [8, 3487, 286, 286]
2025-03-11 18:36:24.552658 test begin: paddle.broadcast_to(Tensor([8, 35056, 72, 113],"bool"), list[8,8,72,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 35056, 72, 113],"bool"), list[8,8,72,113,], ) 
 The expanded size of the tensor (8) must match the existing size (35056) at non-singleton dimension 1.  Target sizes: [8, 8, 72, 113].  Tensor sizes: [8, 35056, 72, 113]
2025-03-11 18:36:25.146233 test begin: paddle.broadcast_to(Tensor([8, 3512, 285, 285],"bool"), list[8,8,285,285,], )

[torch error] paddle.broadcast_to(Tensor([8, 3512, 285, 285],"bool"), list[8,8,285,285,], ) 
 The expanded size of the tensor (8) must match the existing size (3512) at non-singleton dimension 1.  Target sizes: [8, 8, 285, 285].  Tensor sizes: [8, 3512, 285, 285]
2025-03-11 18:36:25.578317 test begin: paddle.broadcast_to(Tensor([8, 35182, 67, 121],"bool"), list[8,8,67,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 35182, 67, 121],"bool"), list[8,8,67,121,], ) 
 The expanded size of the tensor (8) must match the existing size (35182) at non-singleton dimension 1.  Target sizes: [8, 8, 67, 121].  Tensor sizes: [8, 35182, 67, 121]
2025-03-11 18:36:26.177577 test begin: paddle.broadcast_to(Tensor([8, 3521145, 9, 9],"bool"), list[8,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([8, 3521145, 9, 9],"bool"), list[8,8,9,9,], ) 
 The expanded size of the tensor (8) must match the existing size (3521145) at non-singleton dimension 1.  Target sizes: [8, 8, 9, 9].  Tensor sizes: [8, 3521145, 9, 9]
2025-03-11 18:36:26.537331 test begin: paddle.broadcast_to(Tensor([8, 35212, 90, 90],"bool"), list[8,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([8, 35212, 90, 90],"bool"), list[8,8,90,90,], ) 
 The expanded size of the tensor (8) must match the existing size (35212) at non-singleton dimension 1.  Target sizes: [8, 8, 90, 90].  Tensor sizes: [8, 35212, 90, 90]
2025-03-11 18:36:27.035012 test begin: paddle.broadcast_to(Tensor([8, 3537, 284, 284],"bool"), list[8,8,284,284,], )

[torch error] paddle.broadcast_to(Tensor([8, 3537, 284, 284],"bool"), list[8,8,284,284,], ) 
 The expanded size of the tensor (8) must match the existing size (3537) at non-singleton dimension 1.  Target sizes: [8, 8, 284, 284].  Tensor sizes: [8, 3537, 284, 284]
2025-03-11 18:36:27.627615 test begin: paddle.broadcast_to(Tensor([8, 35550, 71, 113],"bool"), list[8,8,71,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 35550, 71, 113],"bool"), list[8,8,71,113,], ) 
 The expanded size of the tensor (8) must match the existing size (35550) at non-singleton dimension 1.  Target sizes: [8, 8, 71, 113].  Tensor sizes: [8, 35550, 71, 113]
2025-03-11 18:36:28.056769 test begin: paddle.broadcast_to(Tensor([8, 3562, 283, 283],"bool"), list[8,8,283,283,], )

[torch error] paddle.broadcast_to(Tensor([8, 3562, 283, 283],"bool"), list[8,8,283,283,], ) 
 The expanded size of the tensor (8) must match the existing size (3562) at non-singleton dimension 1.  Target sizes: [8, 8, 283, 283].  Tensor sizes: [8, 3562, 283, 283]
2025-03-11 18:36:28.552802 test begin: paddle.broadcast_to(Tensor([8, 35715, 66, 121],"bool"), list[8,8,66,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 35715, 66, 121],"bool"), list[8,8,66,121,], ) 
 The expanded size of the tensor (8) must match the existing size (35715) at non-singleton dimension 1.  Target sizes: [8, 8, 66, 121].  Tensor sizes: [8, 35715, 66, 121]
2025-03-11 18:36:29.146045 test begin: paddle.broadcast_to(Tensor([8, 3587, 282, 282],"bool"), list[8,8,282,282,], )

[torch error] paddle.broadcast_to(Tensor([8, 3587, 282, 282],"bool"), list[8,8,282,282,], ) 
 The expanded size of the tensor (8) must match the existing size (3587) at non-singleton dimension 1.  Target sizes: [8, 8, 282, 282].  Tensor sizes: [8, 3587, 282, 282]
2025-03-11 18:36:29.543984 test begin: paddle.broadcast_to(Tensor([8, 36008, 89, 89],"bool"), list[8,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([8, 36008, 89, 89],"bool"), list[8,8,89,89,], ) 
 The expanded size of the tensor (8) must match the existing size (36008) at non-singleton dimension 1.  Target sizes: [8, 8, 89, 89].  Tensor sizes: [8, 36008, 89, 89]
2025-03-11 18:36:30.133622 test begin: paddle.broadcast_to(Tensor([8, 360118, 24, 33],"bool"), list[8,8,24,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 360118, 24, 33],"bool"), list[8,8,24,33,], ) 
 The expanded size of the tensor (8) must match the existing size (360118) at non-singleton dimension 1.  Target sizes: [8, 8, 24, 33].  Tensor sizes: [8, 360118, 24, 33]
2025-03-11 18:36:30.655620 test begin: paddle.broadcast_to(Tensor([8, 360573, 7, 113],"bool"), list[8,8,7,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 360573, 7, 113],"bool"), list[8,8,7,113,], ) 
 The expanded size of the tensor (8) must match the existing size (360573) at non-singleton dimension 1.  Target sizes: [8, 8, 7, 113].  Tensor sizes: [8, 360573, 7, 113]
2025-03-11 18:36:31.021727 test begin: paddle.broadcast_to(Tensor([8, 36058, 70, 113],"bool"), list[8,8,70,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 36058, 70, 113],"bool"), list[8,8,70,113,], ) 
 The expanded size of the tensor (8) must match the existing size (36058) at non-singleton dimension 1.  Target sizes: [8, 8, 70, 113].  Tensor sizes: [8, 36058, 70, 113]
2025-03-11 18:36:31.616157 test begin: paddle.broadcast_to(Tensor([8, 3613, 281, 281],"bool"), list[8,8,281,281,], )

[torch error] paddle.broadcast_to(Tensor([8, 3613, 281, 281],"bool"), list[8,8,281,281,], ) 
 The expanded size of the tensor (8) must match the existing size (3613) at non-singleton dimension 1.  Target sizes: [8, 8, 281, 281].  Tensor sizes: [8, 3613, 281, 281]
2025-03-11 18:36:31.983170 test begin: paddle.broadcast_to(Tensor([8, 36264, 65, 121],"bool"), list[8,8,65,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 36264, 65, 121],"bool"), list[8,8,65,121,], ) 
 The expanded size of the tensor (8) must match the existing size (36264) at non-singleton dimension 1.  Target sizes: [8, 8, 65, 121].  Tensor sizes: [8, 36264, 65, 121]
2025-03-11 18:36:32.472486 test begin: paddle.broadcast_to(Tensor([8, 363792, 28, 28],"bool"), list[8,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([8, 363792, 28, 28],"bool"), list[8,8,28,28,], ) 
 The expanded size of the tensor (8) must match the existing size (363792) at non-singleton dimension 1.  Target sizes: [8, 8, 28, 28].  Tensor sizes: [8, 363792, 28, 28]
2025-03-11 18:36:33.001615 test begin: paddle.broadcast_to(Tensor([8, 3638, 280, 280],"bool"), list[8,8,280,280,], )

[torch error] paddle.broadcast_to(Tensor([8, 3638, 280, 280],"bool"), list[8,8,280,280,], ) 
 The expanded size of the tensor (8) must match the existing size (3638) at non-singleton dimension 1.  Target sizes: [8, 8, 280, 280].  Tensor sizes: [8, 3638, 280, 280]
2025-03-11 18:36:33.494946 test begin: paddle.broadcast_to(Tensor([8, 36580, 69, 113],"bool"), list[8,8,69,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 36580, 69, 113],"bool"), list[8,8,69,113,], ) 
 The expanded size of the tensor (8) must match the existing size (36580) at non-singleton dimension 1.  Target sizes: [8, 8, 69, 113].  Tensor sizes: [8, 36580, 69, 113]
2025-03-11 18:36:34.024640 test begin: paddle.broadcast_to(Tensor([8, 3665, 279, 279],"bool"), list[8,8,279,279,], )

[torch error] paddle.broadcast_to(Tensor([8, 3665, 279, 279],"bool"), list[8,8,279,279,], ) 
 The expanded size of the tensor (8) must match the existing size (3665) at non-singleton dimension 1.  Target sizes: [8, 8, 279, 279].  Tensor sizes: [8, 3665, 279, 279]
2025-03-11 18:36:34.525423 test begin: paddle.broadcast_to(Tensor([8, 36831, 64, 121],"bool"), list[8,8,64,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 36831, 64, 121],"bool"), list[8,8,64,121,], ) 
 The expanded size of the tensor (8) must match the existing size (36831) at non-singleton dimension 1.  Target sizes: [8, 8, 64, 121].  Tensor sizes: [8, 36831, 64, 121]
2025-03-11 18:36:35.007967 test begin: paddle.broadcast_to(Tensor([8, 36831, 88, 88],"bool"), list[8,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([8, 36831, 88, 88],"bool"), list[8,8,88,88,], ) 
 The expanded size of the tensor (8) must match the existing size (36831) at non-singleton dimension 1.  Target sizes: [8, 8, 88, 88].  Tensor sizes: [8, 36831, 88, 88]
2025-03-11 18:36:35.495895 test begin: paddle.broadcast_to(Tensor([8, 3691, 278, 278],"bool"), list[8,8,278,278,], )

[torch error] paddle.broadcast_to(Tensor([8, 3691, 278, 278],"bool"), list[8,8,278,278,], ) 
 The expanded size of the tensor (8) must match the existing size (3691) at non-singleton dimension 1.  Target sizes: [8, 8, 278, 278].  Tensor sizes: [8, 3691, 278, 278]
2025-03-11 18:36:35.986841 test begin: paddle.broadcast_to(Tensor([8, 37118, 68, 113],"bool"), list[8,8,68,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 37118, 68, 113],"bool"), list[8,8,68,113,], ) 
 The expanded size of the tensor (8) must match the existing size (37118) at non-singleton dimension 1.  Target sizes: [8, 8, 68, 113].  Tensor sizes: [8, 37118, 68, 113]
2025-03-11 18:36:36.534350 test begin: paddle.broadcast_to(Tensor([8, 371371, 768],"float32"), tuple(8,63,768,), )

[torch error] paddle.broadcast_to(Tensor([8, 371371, 768],"float32"), tuple(8,63,768,), ) 
 The expanded size of the tensor (63) must match the existing size (371371) at non-singleton dimension 1.  Target sizes: [8, 63, 768].  Tensor sizes: [8, 371371, 768]
2025-03-11 18:36:42.474232 test begin: paddle.broadcast_to(Tensor([8, 371371, 768],"int64"), tuple(8,7,768,), )

[torch error] paddle.broadcast_to(Tensor([8, 371371, 768],"int64"), tuple(8,7,768,), ) 
 The expanded size of the tensor (7) must match the existing size (371371) at non-singleton dimension 1.  Target sizes: [8, 7, 768].  Tensor sizes: [8, 371371, 768]
2025-03-11 18:36:47.219169 test begin: paddle.broadcast_to(Tensor([8, 3718, 277, 277],"bool"), list[8,8,277,277,], )

[torch error] paddle.broadcast_to(Tensor([8, 3718, 277, 277],"bool"), list[8,8,277,277,], ) 
 The expanded size of the tensor (8) must match the existing size (3718) at non-singleton dimension 1.  Target sizes: [8, 8, 277, 277].  Tensor sizes: [8, 3718, 277, 277]
2025-03-11 18:36:47.826398 test begin: paddle.broadcast_to(Tensor([8, 37415, 63, 121],"bool"), list[8,8,63,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 37415, 63, 121],"bool"), list[8,8,63,121,], ) 
 The expanded size of the tensor (8) must match the existing size (37415) at non-singleton dimension 1.  Target sizes: [8, 8, 63, 121].  Tensor sizes: [8, 37415, 63, 121]
2025-03-11 18:36:48.327092 test begin: paddle.broadcast_to(Tensor([8, 3745, 276, 276],"bool"), list[8,8,276,276,], )

[torch error] paddle.broadcast_to(Tensor([8, 3745, 276, 276],"bool"), list[8,8,276,276,], ) 
 The expanded size of the tensor (8) must match the existing size (3745) at non-singleton dimension 1.  Target sizes: [8, 8, 276, 276].  Tensor sizes: [8, 3745, 276, 276]
2025-03-11 18:36:48.817887 test begin: paddle.broadcast_to(Tensor([8, 375775, 23, 33],"bool"), list[8,8,23,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 375775, 23, 33],"bool"), list[8,8,23,33,], ) 
 The expanded size of the tensor (8) must match the existing size (375775) at non-singleton dimension 1.  Target sizes: [8, 8, 23, 33].  Tensor sizes: [8, 375775, 23, 33]
2025-03-11 18:36:49.318240 test begin: paddle.broadcast_to(Tensor([8, 37672, 67, 113],"bool"), list[8,8,67,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 37672, 67, 113],"bool"), list[8,8,67,113,], ) 
 The expanded size of the tensor (8) must match the existing size (37672) at non-singleton dimension 1.  Target sizes: [8, 8, 67, 113].  Tensor sizes: [8, 37672, 67, 113]
2025-03-11 18:36:49.890846 test begin: paddle.broadcast_to(Tensor([8, 37682, 87, 87],"bool"), list[8,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([8, 37682, 87, 87],"bool"), list[8,8,87,87,], ) 
 The expanded size of the tensor (8) must match the existing size (37682) at non-singleton dimension 1.  Target sizes: [8, 8, 87, 87].  Tensor sizes: [8, 37682, 87, 87]
2025-03-11 18:36:50.456157 test begin: paddle.broadcast_to(Tensor([8, 3772, 275, 275],"bool"), list[8,8,275,275,], )

[torch error] paddle.broadcast_to(Tensor([8, 3772, 275, 275],"bool"), list[8,8,275,275,], ) 
 The expanded size of the tensor (8) must match the existing size (3772) at non-singleton dimension 1.  Target sizes: [8, 8, 275, 275].  Tensor sizes: [8, 3772, 275, 275]
2025-03-11 18:36:50.977435 test begin: paddle.broadcast_to(Tensor([8, 3799, 274, 274],"bool"), list[8,8,274,274,], )

[torch error] paddle.broadcast_to(Tensor([8, 3799, 274, 274],"bool"), list[8,8,274,274,], ) 
 The expanded size of the tensor (8) must match the existing size (3799) at non-singleton dimension 1.  Target sizes: [8, 8, 274, 274].  Tensor sizes: [8, 3799, 274, 274]
2025-03-11 18:36:51.482069 test begin: paddle.broadcast_to(Tensor([8, 38019, 62, 121],"bool"), list[8,8,62,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 38019, 62, 121],"bool"), list[8,8,62,121,], ) 
 The expanded size of the tensor (8) must match the existing size (38019) at non-singleton dimension 1.  Target sizes: [8, 8, 62, 121].  Tensor sizes: [8, 38019, 62, 121]
2025-03-11 18:36:52.113781 test begin: paddle.broadcast_to(Tensor([8, 38243, 66, 113],"bool"), list[8,8,66,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 38243, 66, 113],"bool"), list[8,8,66,113,], ) 
 The expanded size of the tensor (8) must match the existing size (38243) at non-singleton dimension 1.  Target sizes: [8, 8, 66, 113].  Tensor sizes: [8, 38243, 66, 113]
2025-03-11 18:36:52.498046 test begin: paddle.broadcast_to(Tensor([8, 3827, 273, 273],"bool"), list[8,8,273,273,], )

[torch error] paddle.broadcast_to(Tensor([8, 3827, 273, 273],"bool"), list[8,8,273,273,], ) 
 The expanded size of the tensor (8) must match the existing size (3827) at non-singleton dimension 1.  Target sizes: [8, 8, 273, 273].  Tensor sizes: [8, 3827, 273, 273]
2025-03-11 18:36:53.153090 test begin: paddle.broadcast_to(Tensor([8, 3856, 272, 272],"bool"), list[8,8,272,272,], )

[torch error] paddle.broadcast_to(Tensor([8, 3856, 272, 272],"bool"), list[8,8,272,272,], ) 
 The expanded size of the tensor (8) must match the existing size (3856) at non-singleton dimension 1.  Target sizes: [8, 8, 272, 272].  Tensor sizes: [8, 3856, 272, 272]
2025-03-11 18:36:53.703532 test begin: paddle.broadcast_to(Tensor([8, 38564, 86, 86],"bool"), list[8,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([8, 38564, 86, 86],"bool"), list[8,8,86,86,], ) 
 The expanded size of the tensor (8) must match the existing size (38564) at non-singleton dimension 1.  Target sizes: [8, 8, 86, 86].  Tensor sizes: [8, 38564, 86, 86]
2025-03-11 18:36:54.085407 test begin: paddle.broadcast_to(Tensor([8, 38642, 61, 121],"bool"), list[8,8,61,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 38642, 61, 121],"bool"), list[8,8,61,121,], ) 
 The expanded size of the tensor (8) must match the existing size (38642) at non-singleton dimension 1.  Target sizes: [8, 8, 61, 121].  Tensor sizes: [8, 38642, 61, 121]
2025-03-11 18:36:54.586847 test begin: paddle.broadcast_to(Tensor([8, 38831, 65, 113],"bool"), list[8,8,65,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 38831, 65, 113],"bool"), list[8,8,65,113,], ) 
 The expanded size of the tensor (8) must match the existing size (38831) at non-singleton dimension 1.  Target sizes: [8, 8, 65, 113].  Tensor sizes: [8, 38831, 65, 113]
2025-03-11 18:36:55.135831 test begin: paddle.broadcast_to(Tensor([8, 3884, 271, 271],"bool"), list[8,8,271,271,], )

[torch error] paddle.broadcast_to(Tensor([8, 3884, 271, 271],"bool"), list[8,8,271,271,], ) 
 The expanded size of the tensor (8) must match the existing size (3884) at non-singleton dimension 1.  Target sizes: [8, 8, 271, 271].  Tensor sizes: [8, 3884, 271, 271]
2025-03-11 18:36:55.640001 test begin: paddle.broadcast_to(Tensor([8, 391239, 27, 27],"bool"), list[8,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([8, 391239, 27, 27],"bool"), list[8,8,27,27,], ) 
 The expanded size of the tensor (8) must match the existing size (391239) at non-singleton dimension 1.  Target sizes: [8, 8, 27, 27].  Tensor sizes: [8, 391239, 27, 27]
2025-03-11 18:36:56.244541 test begin: paddle.broadcast_to(Tensor([8, 3913, 270, 270],"bool"), list[8,8,270,270,], )

[torch error] paddle.broadcast_to(Tensor([8, 3913, 270, 270],"bool"), list[8,8,270,270,], ) 
 The expanded size of the tensor (8) must match the existing size (3913) at non-singleton dimension 1.  Target sizes: [8, 8, 270, 270].  Tensor sizes: [8, 3913, 270, 270]
2025-03-11 18:36:56.777516 test begin: paddle.broadcast_to(Tensor([8, 392855, 22, 33],"bool"), list[8,8,22,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 392855, 22, 33],"bool"), list[8,8,22,33,], ) 
 The expanded size of the tensor (8) must match the existing size (392855) at non-singleton dimension 1.  Target sizes: [8, 8, 22, 33].  Tensor sizes: [8, 392855, 22, 33]
2025-03-11 18:36:57.238327 test begin: paddle.broadcast_to(Tensor([8, 392855, 6, 121],"bool"), list[8,8,6,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 392855, 6, 121],"bool"), list[8,8,6,121,], ) 
 The expanded size of the tensor (8) must match the existing size (392855) at non-singleton dimension 1.  Target sizes: [8, 8, 6, 121].  Tensor sizes: [8, 392855, 6, 121]
2025-03-11 18:36:57.738166 test begin: paddle.broadcast_to(Tensor([8, 39286, 60, 121],"bool"), list[8,8,60,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 39286, 60, 121],"bool"), list[8,8,60,121,], ) 
 The expanded size of the tensor (8) must match the existing size (39286) at non-singleton dimension 1.  Target sizes: [8, 8, 60, 121].  Tensor sizes: [8, 39286, 60, 121]
2025-03-11 18:36:58.352522 test begin: paddle.broadcast_to(Tensor([8, 3942, 269, 269],"bool"), list[8,8,269,269,], )

[torch error] paddle.broadcast_to(Tensor([8, 3942, 269, 269],"bool"), list[8,8,269,269,], ) 
 The expanded size of the tensor (8) must match the existing size (3942) at non-singleton dimension 1.  Target sizes: [8, 8, 269, 269].  Tensor sizes: [8, 3942, 269, 269]
2025-03-11 18:36:58.724961 test begin: paddle.broadcast_to(Tensor([8, 39438, 64, 113],"bool"), list[8,8,64,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 39438, 64, 113],"bool"), list[8,8,64,113,], ) 
 The expanded size of the tensor (8) must match the existing size (39438) at non-singleton dimension 1.  Target sizes: [8, 8, 64, 113].  Tensor sizes: [8, 39438, 64, 113]
2025-03-11 18:36:59.218360 test begin: paddle.broadcast_to(Tensor([8, 39476, 85, 85],"bool"), list[8,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([8, 39476, 85, 85],"bool"), list[8,8,85,85,], ) 
 The expanded size of the tensor (8) must match the existing size (39476) at non-singleton dimension 1.  Target sizes: [8, 8, 85, 85].  Tensor sizes: [8, 39476, 85, 85]
2025-03-11 18:36:59.718363 test begin: paddle.broadcast_to(Tensor([8, 3971, 268, 268],"bool"), list[8,8,268,268,], )

[torch error] paddle.broadcast_to(Tensor([8, 3971, 268, 268],"bool"), list[8,8,268,268,], ) 
 The expanded size of the tensor (8) must match the existing size (3971) at non-singleton dimension 1.  Target sizes: [8, 8, 268, 268].  Tensor sizes: [8, 3971, 268, 268]
2025-03-11 18:37:00.218950 test begin: paddle.broadcast_to(Tensor([8, 39952, 59, 121],"bool"), list[8,8,59,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 39952, 59, 121],"bool"), list[8,8,59,121,], ) 
 The expanded size of the tensor (8) must match the existing size (39952) at non-singleton dimension 1.  Target sizes: [8, 8, 59, 121].  Tensor sizes: [8, 39952, 59, 121]
2025-03-11 18:37:00.709245 test begin: paddle.broadcast_to(Tensor([8, 4001, 267, 267],"bool"), list[8,8,267,267,], )

[torch error] paddle.broadcast_to(Tensor([8, 4001, 267, 267],"bool"), list[8,8,267,267,], ) 
 The expanded size of the tensor (8) must match the existing size (4001) at non-singleton dimension 1.  Target sizes: [8, 8, 267, 267].  Tensor sizes: [8, 4001, 267, 267]
2025-03-11 18:37:01.207650 test begin: paddle.broadcast_to(Tensor([8, 40064, 63, 113],"bool"), list[8,8,63,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 40064, 63, 113],"bool"), list[8,8,63,113,], ) 
 The expanded size of the tensor (8) must match the existing size (40064) at non-singleton dimension 1.  Target sizes: [8, 8, 63, 113].  Tensor sizes: [8, 40064, 63, 113]
2025-03-11 18:37:01.892825 test begin: paddle.broadcast_to(Tensor([8, 4031, 266, 266],"bool"), list[8,8,266,266,], )

[torch error] paddle.broadcast_to(Tensor([8, 4031, 266, 266],"bool"), list[8,8,266,266,], ) 
 The expanded size of the tensor (8) must match the existing size (4031) at non-singleton dimension 1.  Target sizes: [8, 8, 266, 266].  Tensor sizes: [8, 4031, 266, 266]
2025-03-11 18:37:02.403396 test begin: paddle.broadcast_to(Tensor([8, 40422, 84, 84],"bool"), list[8,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([8, 40422, 84, 84],"bool"), list[8,8,84,84,], ) 
 The expanded size of the tensor (8) must match the existing size (40422) at non-singleton dimension 1.  Target sizes: [8, 8, 84, 84].  Tensor sizes: [8, 40422, 84, 84]
2025-03-11 18:37:03.006556 test begin: paddle.broadcast_to(Tensor([8, 4062, 265, 265],"bool"), list[8,8,265,265,], )

[torch error] paddle.broadcast_to(Tensor([8, 4062, 265, 265],"bool"), list[8,8,265,265,], ) 
 The expanded size of the tensor (8) must match the existing size (4062) at non-singleton dimension 1.  Target sizes: [8, 8, 265, 265].  Tensor sizes: [8, 4062, 265, 265]
2025-03-11 18:37:03.360216 test begin: paddle.broadcast_to(Tensor([8, 40641, 58, 121],"bool"), list[8,8,58,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 40641, 58, 121],"bool"), list[8,8,58,121,], ) 
 The expanded size of the tensor (8) must match the existing size (40641) at non-singleton dimension 1.  Target sizes: [8, 8, 58, 121].  Tensor sizes: [8, 40641, 58, 121]
2025-03-11 18:37:03.963010 test begin: paddle.broadcast_to(Tensor([8, 40710, 62, 113],"bool"), list[8,8,62,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 40710, 62, 113],"bool"), list[8,8,62,113,], ) 
 The expanded size of the tensor (8) must match the existing size (40710) at non-singleton dimension 1.  Target sizes: [8, 8, 62, 113].  Tensor sizes: [8, 40710, 62, 113]
2025-03-11 18:37:04.489589 test begin: paddle.broadcast_to(Tensor([8, 4093, 264, 264],"bool"), list[8,8,264,264,], )

[torch error] paddle.broadcast_to(Tensor([8, 4093, 264, 264],"bool"), list[8,8,264,264,], ) 
 The expanded size of the tensor (8) must match the existing size (4093) at non-singleton dimension 1.  Target sizes: [8, 8, 264, 264].  Tensor sizes: [8, 4093, 264, 264]
2025-03-11 18:37:04.851545 test begin: paddle.broadcast_to(Tensor([8, 411563, 21, 33],"bool"), list[8,8,21,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 411563, 21, 33],"bool"), list[8,8,21,33,], ) 
 The expanded size of the tensor (8) must match the existing size (411563) at non-singleton dimension 1.  Target sizes: [8, 8, 21, 33].  Tensor sizes: [8, 411563, 21, 33]
2025-03-11 18:37:05.332251 test begin: paddle.broadcast_to(Tensor([8, 4124, 263, 263],"bool"), list[8,8,263,263,], )

[torch error] paddle.broadcast_to(Tensor([8, 4124, 263, 263],"bool"), list[8,8,263,263,], ) 
 The expanded size of the tensor (8) must match the existing size (4124) at non-singleton dimension 1.  Target sizes: [8, 8, 263, 263].  Tensor sizes: [8, 4124, 263, 263]
2025-03-11 18:37:05.819078 test begin: paddle.broadcast_to(Tensor([8, 41354, 57, 121],"bool"), list[8,8,57,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 41354, 57, 121],"bool"), list[8,8,57,121,], ) 
 The expanded size of the tensor (8) must match the existing size (41354) at non-singleton dimension 1.  Target sizes: [8, 8, 57, 121].  Tensor sizes: [8, 41354, 57, 121]
2025-03-11 18:37:06.304402 test begin: paddle.broadcast_to(Tensor([8, 41378, 61, 113],"bool"), list[8,8,61,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 41378, 61, 113],"bool"), list[8,8,61,113,], ) 
 The expanded size of the tensor (8) must match the existing size (41378) at non-singleton dimension 1.  Target sizes: [8, 8, 61, 113].  Tensor sizes: [8, 41378, 61, 113]
2025-03-11 18:37:06.787279 test begin: paddle.broadcast_to(Tensor([8, 41402, 83, 83],"bool"), list[8,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([8, 41402, 83, 83],"bool"), list[8,8,83,83,], ) 
 The expanded size of the tensor (8) must match the existing size (41402) at non-singleton dimension 1.  Target sizes: [8, 8, 83, 83].  Tensor sizes: [8, 41402, 83, 83]
2025-03-11 18:37:07.409829 test begin: paddle.broadcast_to(Tensor([8, 4155, 262, 262],"bool"), list[8,8,262,262,], )

[torch error] paddle.broadcast_to(Tensor([8, 4155, 262, 262],"bool"), list[8,8,262,262,], ) 
 The expanded size of the tensor (8) must match the existing size (4155) at non-singleton dimension 1.  Target sizes: [8, 8, 262, 262].  Tensor sizes: [8, 4155, 262, 262]
2025-03-11 18:37:08.016690 test begin: paddle.broadcast_to(Tensor([8, 4187, 261, 261],"bool"), list[8,8,261,261,], )

[torch error] paddle.broadcast_to(Tensor([8, 4187, 261, 261],"bool"), list[8,8,261,261,], ) 
 The expanded size of the tensor (8) must match the existing size (4187) at non-singleton dimension 1.  Target sizes: [8, 8, 261, 261].  Tensor sizes: [8, 4187, 261, 261]
2025-03-11 18:37:08.382850 test begin: paddle.broadcast_to(Tensor([8, 420668, 6, 113],"bool"), list[8,8,6,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 420668, 6, 113],"bool"), list[8,8,6,113,], ) 
 The expanded size of the tensor (8) must match the existing size (420668) at non-singleton dimension 1.  Target sizes: [8, 8, 6, 113].  Tensor sizes: [8, 420668, 6, 113]
2025-03-11 18:37:08.944387 test begin: paddle.broadcast_to(Tensor([8, 42067, 60, 113],"bool"), list[8,8,60,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 42067, 60, 113],"bool"), list[8,8,60,113,], ) 
 The expanded size of the tensor (8) must match the existing size (42067) at non-singleton dimension 1.  Target sizes: [8, 8, 60, 113].  Tensor sizes: [8, 42067, 60, 113]
2025-03-11 18:37:09.448902 test begin: paddle.broadcast_to(Tensor([8, 42092, 56, 121],"bool"), list[8,8,56,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 42092, 56, 121],"bool"), list[8,8,56,121,], ) 
 The expanded size of the tensor (8) must match the existing size (42092) at non-singleton dimension 1.  Target sizes: [8, 8, 56, 121].  Tensor sizes: [8, 42092, 56, 121]
2025-03-11 18:37:09.938536 test begin: paddle.broadcast_to(Tensor([8, 421913, 26, 26],"bool"), list[8,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([8, 421913, 26, 26],"bool"), list[8,8,26,26,], ) 
 The expanded size of the tensor (8) must match the existing size (421913) at non-singleton dimension 1.  Target sizes: [8, 8, 26, 26].  Tensor sizes: [8, 421913, 26, 26]
2025-03-11 18:37:10.480748 test begin: paddle.broadcast_to(Tensor([8, 4220, 260, 260],"bool"), list[8,8,260,260,], )

[torch error] paddle.broadcast_to(Tensor([8, 4220, 260, 260],"bool"), list[8,8,260,260,], ) 
 The expanded size of the tensor (8) must match the existing size (4220) at non-singleton dimension 1.  Target sizes: [8, 8, 260, 260].  Tensor sizes: [8, 4220, 260, 260]
2025-03-11 18:37:10.969640 test begin: paddle.broadcast_to(Tensor([8, 42418, 82, 82],"bool"), list[8,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([8, 42418, 82, 82],"bool"), list[8,8,82,82,], ) 
 The expanded size of the tensor (8) must match the existing size (42418) at non-singleton dimension 1.  Target sizes: [8, 8, 82, 82].  Tensor sizes: [8, 42418, 82, 82]
2025-03-11 18:37:11.567078 test begin: paddle.broadcast_to(Tensor([8, 4252, 259, 259],"bool"), list[8,8,259,259,], )

[torch error] paddle.broadcast_to(Tensor([8, 4252, 259, 259],"bool"), list[8,8,259,259,], ) 
 The expanded size of the tensor (8) must match the existing size (4252) at non-singleton dimension 1.  Target sizes: [8, 8, 259, 259].  Tensor sizes: [8, 4252, 259, 259]
2025-03-11 18:37:11.926858 test begin: paddle.broadcast_to(Tensor([8, 42780, 59, 113],"bool"), list[8,8,59,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 42780, 59, 113],"bool"), list[8,8,59,113,], ) 
 The expanded size of the tensor (8) must match the existing size (42780) at non-singleton dimension 1.  Target sizes: [8, 8, 59, 113].  Tensor sizes: [8, 42780, 59, 113]
2025-03-11 18:37:12.461464 test begin: paddle.broadcast_to(Tensor([8, 4285, 258, 258],"bool"), list[8,8,258,258,], )

[torch error] paddle.broadcast_to(Tensor([8, 4285, 258, 258],"bool"), list[8,8,258,258,], ) 
 The expanded size of the tensor (8) must match the existing size (4285) at non-singleton dimension 1.  Target sizes: [8, 8, 258, 258].  Tensor sizes: [8, 4285, 258, 258]
2025-03-11 18:37:13.004777 test begin: paddle.broadcast_to(Tensor([8, 42857, 55, 121],"bool"), list[8,8,55,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 42857, 55, 121],"bool"), list[8,8,55,121,], ) 
 The expanded size of the tensor (8) must match the existing size (42857) at non-singleton dimension 1.  Target sizes: [8, 8, 55, 121].  Tensor sizes: [8, 42857, 55, 121]
2025-03-11 18:37:13.495456 test begin: paddle.broadcast_to(Tensor([8, 4319, 257, 257],"bool"), list[8,8,257,257,], )

[torch error] paddle.broadcast_to(Tensor([8, 4319, 257, 257],"bool"), list[8,8,257,257,], ) 
 The expanded size of the tensor (8) must match the existing size (4319) at non-singleton dimension 1.  Target sizes: [8, 8, 257, 257].  Tensor sizes: [8, 4319, 257, 257]
2025-03-11 18:37:13.983715 test begin: paddle.broadcast_to(Tensor([8, 4321405, 2, 33],"bool"), list[8,8,2,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 4321405, 2, 33],"bool"), list[8,8,2,33,], ) 
 The expanded size of the tensor (8) must match the existing size (4321405) at non-singleton dimension 1.  Target sizes: [8, 8, 2, 33].  Tensor sizes: [8, 4321405, 2, 33]
2025-03-11 18:37:14.514535 test begin: paddle.broadcast_to(Tensor([8, 432141, 20, 33],"bool"), list[8,8,20,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 432141, 20, 33],"bool"), list[8,8,20,33,], ) 
 The expanded size of the tensor (8) must match the existing size (432141) at non-singleton dimension 1.  Target sizes: [8, 8, 20, 33].  Tensor sizes: [8, 432141, 20, 33]
2025-03-11 18:37:15.045078 test begin: paddle.broadcast_to(Tensor([8, 43471, 81, 81],"bool"), list[8,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([8, 43471, 81, 81],"bool"), list[8,8,81,81,], ) 
 The expanded size of the tensor (8) must match the existing size (43471) at non-singleton dimension 1.  Target sizes: [8, 8, 81, 81].  Tensor sizes: [8, 43471, 81, 81]
2025-03-11 18:37:15.534383 test begin: paddle.broadcast_to(Tensor([8, 43518, 58, 113],"bool"), list[8,8,58,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 43518, 58, 113],"bool"), list[8,8,58,113,], ) 
 The expanded size of the tensor (8) must match the existing size (43518) at non-singleton dimension 1.  Target sizes: [8, 8, 58, 113].  Tensor sizes: [8, 43518, 58, 113]
2025-03-11 18:37:16.077844 test begin: paddle.broadcast_to(Tensor([8, 4353, 256, 256],"bool"), list[8,8,256,256,], )

[torch error] paddle.broadcast_to(Tensor([8, 4353, 256, 256],"bool"), list[8,8,256,256,], ) 
 The expanded size of the tensor (8) must match the existing size (4353) at non-singleton dimension 1.  Target sizes: [8, 8, 256, 256].  Tensor sizes: [8, 4353, 256, 256]
2025-03-11 18:37:16.585708 test begin: paddle.broadcast_to(Tensor([8, 43651, 54, 121],"bool"), list[8,8,54,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 43651, 54, 121],"bool"), list[8,8,54,121,], ) 
 The expanded size of the tensor (8) must match the existing size (43651) at non-singleton dimension 1.  Target sizes: [8, 8, 54, 121].  Tensor sizes: [8, 43651, 54, 121]
2025-03-11 18:37:17.067590 test begin: paddle.broadcast_to(Tensor([8, 4387, 255, 255],"bool"), list[8,8,255,255,], )

[torch error] paddle.broadcast_to(Tensor([8, 4387, 255, 255],"bool"), list[8,8,255,255,], ) 
 The expanded size of the tensor (8) must match the existing size (4387) at non-singleton dimension 1.  Target sizes: [8, 8, 255, 255].  Tensor sizes: [8, 4387, 255, 255]
2025-03-11 18:37:17.550768 test begin: paddle.broadcast_to(Tensor([8, 4421, 254, 254],"bool"), list[8,8,254,254,], )

[torch error] paddle.broadcast_to(Tensor([8, 4421, 254, 254],"bool"), list[8,8,254,254,], ) 
 The expanded size of the tensor (8) must match the existing size (4421) at non-singleton dimension 1.  Target sizes: [8, 8, 254, 254].  Tensor sizes: [8, 4421, 254, 254]
2025-03-11 18:37:18.076904 test begin: paddle.broadcast_to(Tensor([8, 44281, 57, 113],"bool"), list[8,8,57,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 44281, 57, 113],"bool"), list[8,8,57,113,], ) 
 The expanded size of the tensor (8) must match the existing size (44281) at non-singleton dimension 1.  Target sizes: [8, 8, 57, 113].  Tensor sizes: [8, 44281, 57, 113]
2025-03-11 18:37:18.566060 test begin: paddle.broadcast_to(Tensor([8, 44475, 53, 121],"bool"), list[8,8,53,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 44475, 53, 121],"bool"), list[8,8,53,121,], ) 
 The expanded size of the tensor (8) must match the existing size (44475) at non-singleton dimension 1.  Target sizes: [8, 8, 53, 121].  Tensor sizes: [8, 44475, 53, 121]
2025-03-11 18:37:19.055542 test begin: paddle.broadcast_to(Tensor([8, 4456, 253, 253],"bool"), list[8,8,253,253,], )

[torch error] paddle.broadcast_to(Tensor([8, 4456, 253, 253],"bool"), list[8,8,253,253,], ) 
 The expanded size of the tensor (8) must match the existing size (4456) at non-singleton dimension 1.  Target sizes: [8, 8, 253, 253].  Tensor sizes: [8, 4456, 253, 253]
2025-03-11 18:37:19.543905 test begin: paddle.broadcast_to(Tensor([8, 4456449, 8, 8],"bool"), list[8,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([8, 4456449, 8, 8],"bool"), list[8,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (4456449) at non-singleton dimension 1.  Target sizes: [8, 8, 8, 8].  Tensor sizes: [8, 4456449, 8, 8]
2025-03-11 18:37:20.074273 test begin: paddle.broadcast_to(Tensor([8, 44565, 80, 80],"bool"), list[8,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([8, 44565, 80, 80],"bool"), list[8,8,80,80,], ) 
 The expanded size of the tensor (8) must match the existing size (44565) at non-singleton dimension 1.  Target sizes: [8, 8, 80, 80].  Tensor sizes: [8, 44565, 80, 80]
2025-03-11 18:37:20.579323 test begin: paddle.broadcast_to(Tensor([8, 4492, 252, 252],"bool"), list[8,8,252,252,], )

[torch error] paddle.broadcast_to(Tensor([8, 4492, 252, 252],"bool"), list[8,8,252,252,], ) 
 The expanded size of the tensor (8) must match the existing size (4492) at non-singleton dimension 1.  Target sizes: [8, 8, 252, 252].  Tensor sizes: [8, 4492, 252, 252]
2025-03-11 18:37:21.067959 test begin: paddle.broadcast_to(Tensor([8, 45072, 56, 113],"bool"), list[8,8,56,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 45072, 56, 113],"bool"), list[8,8,56,113,], ) 
 The expanded size of the tensor (8) must match the existing size (45072) at non-singleton dimension 1.  Target sizes: [8, 8, 56, 113].  Tensor sizes: [8, 45072, 56, 113]
2025-03-11 18:37:21.549628 test begin: paddle.broadcast_to(Tensor([8, 4528, 251, 251],"bool"), list[8,8,251,251,], )

[torch error] paddle.broadcast_to(Tensor([8, 4528, 251, 251],"bool"), list[8,8,251,251,], ) 
 The expanded size of the tensor (8) must match the existing size (4528) at non-singleton dimension 1.  Target sizes: [8, 8, 251, 251].  Tensor sizes: [8, 4528, 251, 251]
2025-03-11 18:37:22.039636 test begin: paddle.broadcast_to(Tensor([8, 45330, 52, 121],"bool"), list[8,8,52,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 45330, 52, 121],"bool"), list[8,8,52,121,], ) 
 The expanded size of the tensor (8) must match the existing size (45330) at non-singleton dimension 1.  Target sizes: [8, 8, 52, 121].  Tensor sizes: [8, 45330, 52, 121]
2025-03-11 18:37:22.540354 test begin: paddle.broadcast_to(Tensor([8, 454885, 19, 33],"bool"), list[8,8,19,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 454885, 19, 33],"bool"), list[8,8,19,33,], ) 
 The expanded size of the tensor (8) must match the existing size (454885) at non-singleton dimension 1.  Target sizes: [8, 8, 19, 33].  Tensor sizes: [8, 454885, 19, 33]
2025-03-11 18:37:23.082859 test begin: paddle.broadcast_to(Tensor([8, 456341, 25, 25],"bool"), list[8,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([8, 456341, 25, 25],"bool"), list[8,8,25,25,], ) 
 The expanded size of the tensor (8) must match the existing size (456341) at non-singleton dimension 1.  Target sizes: [8, 8, 25, 25].  Tensor sizes: [8, 456341, 25, 25]
2025-03-11 18:37:23.576706 test begin: paddle.broadcast_to(Tensor([8, 4564, 250, 250],"bool"), list[8,8,250,250,], )

[torch error] paddle.broadcast_to(Tensor([8, 4564, 250, 250],"bool"), list[8,8,250,250,], ) 
 The expanded size of the tensor (8) must match the existing size (4564) at non-singleton dimension 1.  Target sizes: [8, 8, 250, 250].  Tensor sizes: [8, 4564, 250, 250]
2025-03-11 18:37:24.060562 test begin: paddle.broadcast_to(Tensor([8, 45700, 79, 79],"bool"), list[8,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([8, 45700, 79, 79],"bool"), list[8,8,79,79,], ) 
 The expanded size of the tensor (8) must match the existing size (45700) at non-singleton dimension 1.  Target sizes: [8, 8, 79, 79].  Tensor sizes: [8, 45700, 79, 79]
2025-03-11 18:37:24.544249 test begin: paddle.broadcast_to(Tensor([8, 45892, 55, 113],"bool"), list[8,8,55,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 45892, 55, 113],"bool"), list[8,8,55,113,], ) 
 The expanded size of the tensor (8) must match the existing size (45892) at non-singleton dimension 1.  Target sizes: [8, 8, 55, 113].  Tensor sizes: [8, 45892, 55, 113]
2025-03-11 18:37:25.023997 test begin: paddle.broadcast_to(Tensor([8, 4601, 249, 249],"bool"), list[8,8,249,249,], )

[torch error] paddle.broadcast_to(Tensor([8, 4601, 249, 249],"bool"), list[8,8,249,249,], ) 
 The expanded size of the tensor (8) must match the existing size (4601) at non-singleton dimension 1.  Target sizes: [8, 8, 249, 249].  Tensor sizes: [8, 4601, 249, 249]
2025-03-11 18:37:25.505784 test begin: paddle.broadcast_to(Tensor([8, 46219, 51, 121],"bool"), list[8,8,51,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 46219, 51, 121],"bool"), list[8,8,51,121,], ) 
 The expanded size of the tensor (8) must match the existing size (46219) at non-singleton dimension 1.  Target sizes: [8, 8, 51, 121].  Tensor sizes: [8, 46219, 51, 121]
2025-03-11 18:37:25.985538 test begin: paddle.broadcast_to(Tensor([8, 4638, 248, 248],"bool"), list[8,8,248,248,], )

[torch error] paddle.broadcast_to(Tensor([8, 4638, 248, 248],"bool"), list[8,8,248,248,], ) 
 The expanded size of the tensor (8) must match the existing size (4638) at non-singleton dimension 1.  Target sizes: [8, 8, 248, 248].  Tensor sizes: [8, 4638, 248, 248]
2025-03-11 18:37:26.516258 test begin: paddle.broadcast_to(Tensor([8, 46741, 54, 113],"bool"), list[8,8,54,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 46741, 54, 113],"bool"), list[8,8,54,113,], ) 
 The expanded size of the tensor (8) must match the existing size (46741) at non-singleton dimension 1.  Target sizes: [8, 8, 54, 113].  Tensor sizes: [8, 46741, 54, 113]
2025-03-11 18:37:27.007217 test begin: paddle.broadcast_to(Tensor([8, 4675, 247, 247],"bool"), list[8,8,247,247,], )

[torch error] paddle.broadcast_to(Tensor([8, 4675, 247, 247],"bool"), list[8,8,247,247,], ) 
 The expanded size of the tensor (8) must match the existing size (4675) at non-singleton dimension 1.  Target sizes: [8, 8, 247, 247].  Tensor sizes: [8, 4675, 247, 247]
2025-03-11 18:37:27.495280 test begin: paddle.broadcast_to(Tensor([8, 46880, 78, 78],"bool"), list[8,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([8, 46880, 78, 78],"bool"), list[8,8,78,78,], ) 
 The expanded size of the tensor (8) must match the existing size (46880) at non-singleton dimension 1.  Target sizes: [8, 8, 78, 78].  Tensor sizes: [8, 46880, 78, 78]
2025-03-11 18:37:27.981256 test begin: paddle.broadcast_to(Tensor([8, 4714, 246, 246],"bool"), list[8,8,246,246,], )

[torch error] paddle.broadcast_to(Tensor([8, 4714, 246, 246],"bool"), list[8,8,246,246,], ) 
 The expanded size of the tensor (8) must match the existing size (4714) at non-singleton dimension 1.  Target sizes: [8, 8, 246, 246].  Tensor sizes: [8, 4714, 246, 246]
2025-03-11 18:37:28.468739 test begin: paddle.broadcast_to(Tensor([8, 471426, 5, 121],"bool"), list[8,8,5,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 471426, 5, 121],"bool"), list[8,8,5,121,], ) 
 The expanded size of the tensor (8) must match the existing size (471426) at non-singleton dimension 1.  Target sizes: [8, 8, 5, 121].  Tensor sizes: [8, 471426, 5, 121]
2025-03-11 18:37:28.954749 test begin: paddle.broadcast_to(Tensor([8, 47143, 50, 121],"bool"), list[8,8,50,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 47143, 50, 121],"bool"), list[8,8,50,121,], ) 
 The expanded size of the tensor (8) must match the existing size (47143) at non-singleton dimension 1.  Target sizes: [8, 8, 50, 121].  Tensor sizes: [8, 47143, 50, 121]
2025-03-11 18:37:29.479304 test begin: paddle.broadcast_to(Tensor([8, 4752, 245, 245],"bool"), list[8,8,245,245,], )

[torch error] paddle.broadcast_to(Tensor([8, 4752, 245, 245],"bool"), list[8,8,245,245,], ) 
 The expanded size of the tensor (8) must match the existing size (4752) at non-singleton dimension 1.  Target sizes: [8, 8, 245, 245].  Tensor sizes: [8, 4752, 245, 245]
2025-03-11 18:37:29.967722 test begin: paddle.broadcast_to(Tensor([8, 47623, 53, 113],"bool"), list[8,8,53,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 47623, 53, 113],"bool"), list[8,8,53,113,], ) 
 The expanded size of the tensor (8) must match the existing size (47623) at non-singleton dimension 1.  Target sizes: [8, 8, 53, 113].  Tensor sizes: [8, 47623, 53, 113]
2025-03-11 18:37:30.456801 test begin: paddle.broadcast_to(Tensor([8, 4791, 244, 244],"bool"), list[8,8,244,244,], )

[torch error] paddle.broadcast_to(Tensor([8, 4791, 244, 244],"bool"), list[8,8,244,244,], ) 
 The expanded size of the tensor (8) must match the existing size (4791) at non-singleton dimension 1.  Target sizes: [8, 8, 244, 244].  Tensor sizes: [8, 4791, 244, 244]
2025-03-11 18:37:30.986017 test begin: paddle.broadcast_to(Tensor([8, 480157, 18, 33],"bool"), list[8,8,18,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 480157, 18, 33],"bool"), list[8,8,18,33,], ) 
 The expanded size of the tensor (8) must match the existing size (480157) at non-singleton dimension 1.  Target sizes: [8, 8, 18, 33].  Tensor sizes: [8, 480157, 18, 33]
2025-03-11 18:37:31.566738 test begin: paddle.broadcast_to(Tensor([8, 48105, 49, 121],"bool"), list[8,8,49,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 48105, 49, 121],"bool"), list[8,8,49,121,], ) 
 The expanded size of the tensor (8) must match the existing size (48105) at non-singleton dimension 1.  Target sizes: [8, 8, 49, 121].  Tensor sizes: [8, 48105, 49, 121]
2025-03-11 18:37:32.154765 test begin: paddle.broadcast_to(Tensor([8, 48105, 77, 77],"bool"), list[8,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([8, 48105, 77, 77],"bool"), list[8,8,77,77,], ) 
 The expanded size of the tensor (8) must match the existing size (48105) at non-singleton dimension 1.  Target sizes: [8, 8, 77, 77].  Tensor sizes: [8, 48105, 77, 77]
2025-03-11 18:37:32.590318 test begin: paddle.broadcast_to(Tensor([8, 4831, 243, 243],"bool"), list[8,8,243,243,], )

[torch error] paddle.broadcast_to(Tensor([8, 4831, 243, 243],"bool"), list[8,8,243,243,], ) 
 The expanded size of the tensor (8) must match the existing size (4831) at non-singleton dimension 1.  Target sizes: [8, 8, 243, 243].  Tensor sizes: [8, 4831, 243, 243]
2025-03-11 18:37:33.076986 test begin: paddle.broadcast_to(Tensor([8, 48539, 52, 113],"bool"), list[8,8,52,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 48539, 52, 113],"bool"), list[8,8,52,113,], ) 
 The expanded size of the tensor (8) must match the existing size (48539) at non-singleton dimension 1.  Target sizes: [8, 8, 52, 113].  Tensor sizes: [8, 48539, 52, 113]
2025-03-11 18:37:33.559250 test begin: paddle.broadcast_to(Tensor([8, 4871, 242, 242],"bool"), list[8,8,242,242,], )

[torch error] paddle.broadcast_to(Tensor([8, 4871, 242, 242],"bool"), list[8,8,242,242,], ) 
 The expanded size of the tensor (8) must match the existing size (4871) at non-singleton dimension 1.  Target sizes: [8, 8, 242, 242].  Tensor sizes: [8, 4871, 242, 242]
2025-03-11 18:37:34.088693 test begin: paddle.broadcast_to(Tensor([8, 49107, 48, 121],"bool"), list[8,8,48,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 49107, 48, 121],"bool"), list[8,8,48,121,], ) 
 The expanded size of the tensor (8) must match the existing size (49107) at non-singleton dimension 1.  Target sizes: [8, 8, 48, 121].  Tensor sizes: [8, 49107, 48, 121]
2025-03-11 18:37:34.576483 test begin: paddle.broadcast_to(Tensor([8, 4911, 241, 241],"bool"), list[8,8,241,241,], )

[torch error] paddle.broadcast_to(Tensor([8, 4911, 241, 241],"bool"), list[8,8,241,241,], ) 
 The expanded size of the tensor (8) must match the existing size (4911) at non-singleton dimension 1.  Target sizes: [8, 8, 241, 241].  Tensor sizes: [8, 4911, 241, 241]
2025-03-11 18:37:35.106647 test begin: paddle.broadcast_to(Tensor([8, 49379, 76, 76],"bool"), list[8,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([8, 49379, 76, 76],"bool"), list[8,8,76,76,], ) 
 The expanded size of the tensor (8) must match the existing size (49379) at non-singleton dimension 1.  Target sizes: [8, 8, 76, 76].  Tensor sizes: [8, 49379, 76, 76]
2025-03-11 18:37:35.593379 test begin: paddle.broadcast_to(Tensor([8, 49491, 51, 113],"bool"), list[8,8,51,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 49491, 51, 113],"bool"), list[8,8,51,113,], ) 
 The expanded size of the tensor (8) must match the existing size (49491) at non-singleton dimension 1.  Target sizes: [8, 8, 51, 113].  Tensor sizes: [8, 49491, 51, 113]
2025-03-11 18:37:36.082691 test begin: paddle.broadcast_to(Tensor([8, 495161, 24, 24],"bool"), list[8,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([8, 495161, 24, 24],"bool"), list[8,8,24,24,], ) 
 The expanded size of the tensor (8) must match the existing size (495161) at non-singleton dimension 1.  Target sizes: [8, 8, 24, 24].  Tensor sizes: [8, 495161, 24, 24]
2025-03-11 18:37:36.641682 test begin: paddle.broadcast_to(Tensor([8, 4952, 240, 240],"bool"), list[8,8,240,240,], )

[torch error] paddle.broadcast_to(Tensor([8, 4952, 240, 240],"bool"), list[8,8,240,240,], ) 
 The expanded size of the tensor (8) must match the existing size (4952) at non-singleton dimension 1.  Target sizes: [8, 8, 240, 240].  Tensor sizes: [8, 4952, 240, 240]
2025-03-11 18:37:37.165112 test begin: paddle.broadcast_to(Tensor([8, 4994, 239, 239],"bool"), list[8,8,239,239,], )

[torch error] paddle.broadcast_to(Tensor([8, 4994, 239, 239],"bool"), list[8,8,239,239,], ) 
 The expanded size of the tensor (8) must match the existing size (4994) at non-singleton dimension 1.  Target sizes: [8, 8, 239, 239].  Tensor sizes: [8, 4994, 239, 239]
2025-03-11 18:37:37.755246 test begin: paddle.broadcast_to(Tensor([8, 50152, 47, 121],"bool"), list[8,8,47,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 50152, 47, 121],"bool"), list[8,8,47,121,], ) 
 The expanded size of the tensor (8) must match the existing size (50152) at non-singleton dimension 1.  Target sizes: [8, 8, 47, 121].  Tensor sizes: [8, 50152, 47, 121]
2025-03-11 18:37:38.151804 test begin: paddle.broadcast_to(Tensor([8, 5036, 238, 238],"bool"), list[8,8,238,238,], )

[torch error] paddle.broadcast_to(Tensor([8, 5036, 238, 238],"bool"), list[8,8,238,238,], ) 
 The expanded size of the tensor (8) must match the existing size (5036) at non-singleton dimension 1.  Target sizes: [8, 8, 238, 238].  Tensor sizes: [8, 5036, 238, 238]
2025-03-11 18:37:38.757192 test begin: paddle.broadcast_to(Tensor([8, 504802, 5, 113],"bool"), list[8,8,5,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 504802, 5, 113],"bool"), list[8,8,5,113,], ) 
 The expanded size of the tensor (8) must match the existing size (504802) at non-singleton dimension 1.  Target sizes: [8, 8, 5, 113].  Tensor sizes: [8, 504802, 5, 113]
2025-03-11 18:37:39.136969 test begin: paddle.broadcast_to(Tensor([8, 50481, 50, 113],"bool"), list[8,8,50,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 50481, 50, 113],"bool"), list[8,8,50,113,], ) 
 The expanded size of the tensor (8) must match the existing size (50481) at non-singleton dimension 1.  Target sizes: [8, 8, 50, 113].  Tensor sizes: [8, 50481, 50, 113]
2025-03-11 18:37:39.648108 test begin: paddle.broadcast_to(Tensor([8, 50705, 75, 75],"bool"), list[8,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([8, 50705, 75, 75],"bool"), list[8,8,75,75,], ) 
 The expanded size of the tensor (8) must match the existing size (50705) at non-singleton dimension 1.  Target sizes: [8, 8, 75, 75].  Tensor sizes: [8, 50705, 75, 75]
2025-03-11 18:37:40.169048 test begin: paddle.broadcast_to(Tensor([8, 5078, 237, 237],"bool"), list[8,8,237,237,], )

[torch error] paddle.broadcast_to(Tensor([8, 5078, 237, 237],"bool"), list[8,8,237,237,], ) 
 The expanded size of the tensor (8) must match the existing size (5078) at non-singleton dimension 1.  Target sizes: [8, 8, 237, 237].  Tensor sizes: [8, 5078, 237, 237]
2025-03-11 18:37:40.655287 test begin: paddle.broadcast_to(Tensor([8, 508401, 17, 33],"bool"), list[8,8,17,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 508401, 17, 33],"bool"), list[8,8,17,33,], ) 
 The expanded size of the tensor (8) must match the existing size (508401) at non-singleton dimension 1.  Target sizes: [8, 8, 17, 33].  Tensor sizes: [8, 508401, 17, 33]
2025-03-11 18:37:41.177492 test begin: paddle.broadcast_to(Tensor([8, 5121, 236, 236],"bool"), list[8,8,236,236,], )

[torch error] paddle.broadcast_to(Tensor([8, 5121, 236, 236],"bool"), list[8,8,236,236,], ) 
 The expanded size of the tensor (8) must match the existing size (5121) at non-singleton dimension 1.  Target sizes: [8, 8, 236, 236].  Tensor sizes: [8, 5121, 236, 236]
2025-03-11 18:37:41.673072 test begin: paddle.broadcast_to(Tensor([8, 51242, 46, 121],"bool"), list[8,8,46,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 51242, 46, 121],"bool"), list[8,8,46,121,], ) 
 The expanded size of the tensor (8) must match the existing size (51242) at non-singleton dimension 1.  Target sizes: [8, 8, 46, 121].  Tensor sizes: [8, 51242, 46, 121]
2025-03-11 18:37:42.197454 test begin: paddle.broadcast_to(Tensor([8, 51511, 49, 113],"bool"), list[8,8,49,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 51511, 49, 113],"bool"), list[8,8,49,113,], ) 
 The expanded size of the tensor (8) must match the existing size (51511) at non-singleton dimension 1.  Target sizes: [8, 8, 49, 113].  Tensor sizes: [8, 51511, 49, 113]
2025-03-11 18:37:42.784782 test begin: paddle.broadcast_to(Tensor([8, 5165, 235, 235],"bool"), list[8,8,235,235,], )

[torch error] paddle.broadcast_to(Tensor([8, 5165, 235, 235],"bool"), list[8,8,235,235,], ) 
 The expanded size of the tensor (8) must match the existing size (5165) at non-singleton dimension 1.  Target sizes: [8, 8, 235, 235].  Tensor sizes: [8, 5165, 235, 235]
2025-03-11 18:37:43.141020 test begin: paddle.broadcast_to(Tensor([8, 52085, 74, 74],"bool"), list[8,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([8, 52085, 74, 74],"bool"), list[8,8,74,74,], ) 
 The expanded size of the tensor (8) must match the existing size (52085) at non-singleton dimension 1.  Target sizes: [8, 8, 74, 74].  Tensor sizes: [8, 52085, 74, 74]
2025-03-11 18:37:43.730224 test begin: paddle.broadcast_to(Tensor([8, 5209, 234, 234],"bool"), list[8,8,234,234,], )

[torch error] paddle.broadcast_to(Tensor([8, 5209, 234, 234],"bool"), list[8,8,234,234,], ) 
 The expanded size of the tensor (8) must match the existing size (5209) at non-singleton dimension 1.  Target sizes: [8, 8, 234, 234].  Tensor sizes: [8, 5209, 234, 234]
2025-03-11 18:37:44.087879 test begin: paddle.broadcast_to(Tensor([8, 52381, 45, 121],"bool"), list[8,8,45,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 52381, 45, 121],"bool"), list[8,8,45,121,], ) 
 The expanded size of the tensor (8) must match the existing size (52381) at non-singleton dimension 1.  Target sizes: [8, 8, 45, 121].  Tensor sizes: [8, 52381, 45, 121]
2025-03-11 18:37:44.575712 test begin: paddle.broadcast_to(Tensor([8, 5254, 233, 233],"bool"), list[8,8,233,233,], )

[torch error] paddle.broadcast_to(Tensor([8, 5254, 233, 233],"bool"), list[8,8,233,233,], ) 
 The expanded size of the tensor (8) must match the existing size (5254) at non-singleton dimension 1.  Target sizes: [8, 8, 233, 233].  Tensor sizes: [8, 5254, 233, 233]
2025-03-11 18:37:45.063697 test begin: paddle.broadcast_to(Tensor([8, 52584, 48, 113],"bool"), list[8,8,48,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 52584, 48, 113],"bool"), list[8,8,48,113,], ) 
 The expanded size of the tensor (8) must match the existing size (52584) at non-singleton dimension 1.  Target sizes: [8, 8, 48, 113].  Tensor sizes: [8, 52584, 48, 113]
2025-03-11 18:37:45.580813 test begin: paddle.broadcast_to(Tensor([8, 5299, 232, 232],"bool"), list[8,8,232,232,], )

[torch error] paddle.broadcast_to(Tensor([8, 5299, 232, 232],"bool"), list[8,8,232,232,], ) 
 The expanded size of the tensor (8) must match the existing size (5299) at non-singleton dimension 1.  Target sizes: [8, 8, 232, 232].  Tensor sizes: [8, 5299, 232, 232]
2025-03-11 18:37:46.108250 test begin: paddle.broadcast_to(Tensor([8, 5345, 231, 231],"bool"), list[8,8,231,231,], )

[torch error] paddle.broadcast_to(Tensor([8, 5345, 231, 231],"bool"), list[8,8,231,231,], ) 
 The expanded size of the tensor (8) must match the existing size (5345) at non-singleton dimension 1.  Target sizes: [8, 8, 231, 231].  Tensor sizes: [8, 5345, 231, 231]
2025-03-11 18:37:46.594677 test begin: paddle.broadcast_to(Tensor([8, 53521, 73, 73],"bool"), list[8,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([8, 53521, 73, 73],"bool"), list[8,8,73,73,], ) 
 The expanded size of the tensor (8) must match the existing size (53521) at non-singleton dimension 1.  Target sizes: [8, 8, 73, 73].  Tensor sizes: [8, 53521, 73, 73]
2025-03-11 18:37:47.089203 test begin: paddle.broadcast_to(Tensor([8, 53572, 44, 121],"bool"), list[8,8,44,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 53572, 44, 121],"bool"), list[8,8,44,121,], ) 
 The expanded size of the tensor (8) must match the existing size (53572) at non-singleton dimension 1.  Target sizes: [8, 8, 44, 121].  Tensor sizes: [8, 53572, 44, 121]
2025-03-11 18:37:47.587220 test begin: paddle.broadcast_to(Tensor([8, 53703, 47, 113],"bool"), list[8,8,47,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 53703, 47, 113],"bool"), list[8,8,47,113,], ) 
 The expanded size of the tensor (8) must match the existing size (53703) at non-singleton dimension 1.  Target sizes: [8, 8, 47, 113].  Tensor sizes: [8, 53703, 47, 113]
2025-03-11 18:37:48.112615 test begin: paddle.broadcast_to(Tensor([8, 539155, 23, 23],"bool"), list[8,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([8, 539155, 23, 23],"bool"), list[8,8,23,23,], ) 
 The expanded size of the tensor (8) must match the existing size (539155) at non-singleton dimension 1.  Target sizes: [8, 8, 23, 23].  Tensor sizes: [8, 539155, 23, 23]
2025-03-11 18:37:48.638231 test begin: paddle.broadcast_to(Tensor([8, 5392, 230, 230],"bool"), list[8,8,230,230,], )

[torch error] paddle.broadcast_to(Tensor([8, 5392, 230, 230],"bool"), list[8,8,230,230,], ) 
 The expanded size of the tensor (8) must match the existing size (5392) at non-singleton dimension 1.  Target sizes: [8, 8, 230, 230].  Tensor sizes: [8, 5392, 230, 230]
2025-03-11 18:37:49.164818 test begin: paddle.broadcast_to(Tensor([8, 540176, 16, 33],"bool"), list[8,8,16,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 540176, 16, 33],"bool"), list[8,8,16,33,], ) 
 The expanded size of the tensor (8) must match the existing size (540176) at non-singleton dimension 1.  Target sizes: [8, 8, 16, 33].  Tensor sizes: [8, 540176, 16, 33]
2025-03-11 18:37:49.759240 test begin: paddle.broadcast_to(Tensor([8, 5439, 229, 229],"bool"), list[8,8,229,229,], )

[torch error] paddle.broadcast_to(Tensor([8, 5439, 229, 229],"bool"), list[8,8,229,229,], ) 
 The expanded size of the tensor (8) must match the existing size (5439) at non-singleton dimension 1.  Target sizes: [8, 8, 229, 229].  Tensor sizes: [8, 5439, 229, 229]
2025-03-11 18:37:50.171754 test begin: paddle.broadcast_to(Tensor([8, 54817, 43, 121],"bool"), list[8,8,43,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 54817, 43, 121],"bool"), list[8,8,43,121,], ) 
 The expanded size of the tensor (8) must match the existing size (54817) at non-singleton dimension 1.  Target sizes: [8, 8, 43, 121].  Tensor sizes: [8, 54817, 43, 121]
2025-03-11 18:37:50.763994 test begin: paddle.broadcast_to(Tensor([8, 5487, 228, 228],"bool"), list[8,8,228,228,], )

[torch error] paddle.broadcast_to(Tensor([8, 5487, 228, 228],"bool"), list[8,8,228,228,], ) 
 The expanded size of the tensor (8) must match the existing size (5487) at non-singleton dimension 1.  Target sizes: [8, 8, 228, 228].  Tensor sizes: [8, 5487, 228, 228]
2025-03-11 18:37:51.131759 test begin: paddle.broadcast_to(Tensor([8, 54870, 46, 113],"bool"), list[8,8,46,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 54870, 46, 113],"bool"), list[8,8,46,113,], ) 
 The expanded size of the tensor (8) must match the existing size (54870) at non-singleton dimension 1.  Target sizes: [8, 8, 46, 113].  Tensor sizes: [8, 54870, 46, 113]
2025-03-11 18:37:51.650116 test begin: paddle.broadcast_to(Tensor([8, 55018, 72, 72],"bool"), list[8,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([8, 55018, 72, 72],"bool"), list[8,8,72,72,], ) 
 The expanded size of the tensor (8) must match the existing size (55018) at non-singleton dimension 1.  Target sizes: [8, 8, 72, 72].  Tensor sizes: [8, 55018, 72, 72]
2025-03-11 18:37:52.138448 test begin: paddle.broadcast_to(Tensor([8, 5535, 227, 227],"bool"), list[8,8,227,227,], )

[torch error] paddle.broadcast_to(Tensor([8, 5535, 227, 227],"bool"), list[8,8,227,227,], ) 
 The expanded size of the tensor (8) must match the existing size (5535) at non-singleton dimension 1.  Target sizes: [8, 8, 227, 227].  Tensor sizes: [8, 5535, 227, 227]
2025-03-11 18:37:52.659128 test begin: paddle.broadcast_to(Tensor([8, 5585, 226, 226],"bool"), list[8,8,226,226,], )

[torch error] paddle.broadcast_to(Tensor([8, 5585, 226, 226],"bool"), list[8,8,226,226,], ) 
 The expanded size of the tensor (8) must match the existing size (5585) at non-singleton dimension 1.  Target sizes: [8, 8, 226, 226].  Tensor sizes: [8, 5585, 226, 226]
2025-03-11 18:37:53.143231 test begin: paddle.broadcast_to(Tensor([8, 56090, 45, 113],"bool"), list[8,8,45,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 56090, 45, 113],"bool"), list[8,8,45,113,], ) 
 The expanded size of the tensor (8) must match the existing size (56090) at non-singleton dimension 1.  Target sizes: [8, 8, 45, 113].  Tensor sizes: [8, 56090, 45, 113]
2025-03-11 18:37:53.647533 test begin: paddle.broadcast_to(Tensor([8, 56123, 42, 121],"bool"), list[8,8,42,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 56123, 42, 121],"bool"), list[8,8,42,121,], ) 
 The expanded size of the tensor (8) must match the existing size (56123) at non-singleton dimension 1.  Target sizes: [8, 8, 42, 121].  Tensor sizes: [8, 56123, 42, 121]
2025-03-11 18:37:54.159468 test begin: paddle.broadcast_to(Tensor([8, 5634, 225, 225],"bool"), list[8,8,225,225,], )

[torch error] paddle.broadcast_to(Tensor([8, 5634, 225, 225],"bool"), list[8,8,225,225,], ) 
 The expanded size of the tensor (8) must match the existing size (5634) at non-singleton dimension 1.  Target sizes: [8, 8, 225, 225].  Tensor sizes: [8, 5634, 225, 225]
2025-03-11 18:37:54.755107 test begin: paddle.broadcast_to(Tensor([8, 56579, 71, 71],"bool"), list[8,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([8, 56579, 71, 71],"bool"), list[8,8,71,71,], ) 
 The expanded size of the tensor (8) must match the existing size (56579) at non-singleton dimension 1.  Target sizes: [8, 8, 71, 71].  Tensor sizes: [8, 56579, 71, 71]
2025-03-11 18:37:55.112125 test begin: paddle.broadcast_to(Tensor([8, 5685, 224, 224],"bool"), list[8,8,224,224,], )

[torch error] paddle.broadcast_to(Tensor([8, 5685, 224, 224],"bool"), list[8,8,224,224,], ) 
 The expanded size of the tensor (8) must match the existing size (5685) at non-singleton dimension 1.  Target sizes: [8, 8, 224, 224].  Tensor sizes: [8, 5685, 224, 224]
2025-03-11 18:37:55.595139 test begin: paddle.broadcast_to(Tensor([8, 5736, 223, 223],"bool"), list[8,8,223,223,], )

[torch error] paddle.broadcast_to(Tensor([8, 5736, 223, 223],"bool"), list[8,8,223,223,], ) 
 The expanded size of the tensor (8) must match the existing size (5736) at non-singleton dimension 1.  Target sizes: [8, 8, 223, 223].  Tensor sizes: [8, 5736, 223, 223]
2025-03-11 18:37:56.078266 test begin: paddle.broadcast_to(Tensor([8, 57364, 44, 113],"bool"), list[8,8,44,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 57364, 44, 113],"bool"), list[8,8,44,113,], ) 
 The expanded size of the tensor (8) must match the existing size (57364) at non-singleton dimension 1.  Target sizes: [8, 8, 44, 113].  Tensor sizes: [8, 57364, 44, 113]
2025-03-11 18:37:56.557335 test begin: paddle.broadcast_to(Tensor([8, 57491, 41, 121],"bool"), list[8,8,41,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 57491, 41, 121],"bool"), list[8,8,41,121,], ) 
 The expanded size of the tensor (8) must match the existing size (57491) at non-singleton dimension 1.  Target sizes: [8, 8, 41, 121].  Tensor sizes: [8, 57491, 41, 121]
2025-03-11 18:37:57.039777 test begin: paddle.broadcast_to(Tensor([8, 576188, 15, 33],"bool"), list[8,8,15,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 576188, 15, 33],"bool"), list[8,8,15,33,], ) 
 The expanded size of the tensor (8) must match the existing size (576188) at non-singleton dimension 1.  Target sizes: [8, 8, 15, 33].  Tensor sizes: [8, 576188, 15, 33]
2025-03-11 18:37:57.559969 test begin: paddle.broadcast_to(Tensor([8, 5788, 222, 222],"bool"), list[8,8,222,222,], )

[torch error] paddle.broadcast_to(Tensor([8, 5788, 222, 222],"bool"), list[8,8,222,222,], ) 
 The expanded size of the tensor (8) must match the existing size (5788) at non-singleton dimension 1.  Target sizes: [8, 8, 222, 222].  Tensor sizes: [8, 5788, 222, 222]
2025-03-11 18:37:58.149217 test begin: paddle.broadcast_to(Tensor([8, 5820667, 7, 7],"bool"), list[8,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([8, 5820667, 7, 7],"bool"), list[8,8,7,7,], ) 
 The expanded size of the tensor (8) must match the existing size (5820667) at non-singleton dimension 1.  Target sizes: [8, 8, 7, 7].  Tensor sizes: [8, 5820667, 7, 7]
2025-03-11 18:37:58.671781 test begin: paddle.broadcast_to(Tensor([8, 58207, 70, 70],"bool"), list[8,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([8, 58207, 70, 70],"bool"), list[8,8,70,70,], ) 
 The expanded size of the tensor (8) must match the existing size (58207) at non-singleton dimension 1.  Target sizes: [8, 8, 70, 70].  Tensor sizes: [8, 58207, 70, 70]
2025-03-11 18:37:59.064704 test begin: paddle.broadcast_to(Tensor([8, 5840, 221, 221],"bool"), list[8,8,221,221,], )

[torch error] paddle.broadcast_to(Tensor([8, 5840, 221, 221],"bool"), list[8,8,221,221,], ) 
 The expanded size of the tensor (8) must match the existing size (5840) at non-singleton dimension 1.  Target sizes: [8, 8, 221, 221].  Tensor sizes: [8, 5840, 221, 221]
2025-03-11 18:37:59.557749 test begin: paddle.broadcast_to(Tensor([8, 58698, 43, 113],"bool"), list[8,8,43,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 58698, 43, 113],"bool"), list[8,8,43,113,], ) 
 The expanded size of the tensor (8) must match the existing size (58698) at non-singleton dimension 1.  Target sizes: [8, 8, 43, 113].  Tensor sizes: [8, 58698, 43, 113]
2025-03-11 18:38:00.041773 test begin: paddle.broadcast_to(Tensor([8, 589283, 22, 22],"bool"), list[8,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([8, 589283, 22, 22],"bool"), list[8,8,22,22,], ) 
 The expanded size of the tensor (8) must match the existing size (589283) at non-singleton dimension 1.  Target sizes: [8, 8, 22, 22].  Tensor sizes: [8, 589283, 22, 22]
2025-03-11 18:38:00.543182 test begin: paddle.broadcast_to(Tensor([8, 589283, 4, 121],"bool"), list[8,8,4,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 589283, 4, 121],"bool"), list[8,8,4,121,], ) 
 The expanded size of the tensor (8) must match the existing size (589283) at non-singleton dimension 1.  Target sizes: [8, 8, 4, 121].  Tensor sizes: [8, 589283, 4, 121]
2025-03-11 18:38:01.041488 test begin: paddle.broadcast_to(Tensor([8, 58929, 40, 121],"bool"), list[8,8,40,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 58929, 40, 121],"bool"), list[8,8,40,121,], ) 
 The expanded size of the tensor (8) must match the existing size (58929) at non-singleton dimension 1.  Target sizes: [8, 8, 40, 121].  Tensor sizes: [8, 58929, 40, 121]
2025-03-11 18:38:01.558113 test begin: paddle.broadcast_to(Tensor([8, 5893, 220, 220],"bool"), list[8,8,220,220,], )

[torch error] paddle.broadcast_to(Tensor([8, 5893, 220, 220],"bool"), list[8,8,220,220,], ) 
 The expanded size of the tensor (8) must match the existing size (5893) at non-singleton dimension 1.  Target sizes: [8, 8, 220, 220].  Tensor sizes: [8, 5893, 220, 220]
2025-03-11 18:38:02.047601 test begin: paddle.broadcast_to(Tensor([8, 5947, 219, 219],"bool"), list[8,8,219,219,], )

[torch error] paddle.broadcast_to(Tensor([8, 5947, 219, 219],"bool"), list[8,8,219,219,], ) 
 The expanded size of the tensor (8) must match the existing size (5947) at non-singleton dimension 1.  Target sizes: [8, 8, 219, 219].  Tensor sizes: [8, 5947, 219, 219]
2025-03-11 18:38:02.545847 test begin: paddle.broadcast_to(Tensor([8, 59907, 69, 69],"bool"), list[8,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([8, 59907, 69, 69],"bool"), list[8,8,69,69,], ) 
 The expanded size of the tensor (8) must match the existing size (59907) at non-singleton dimension 1.  Target sizes: [8, 8, 69, 69].  Tensor sizes: [8, 59907, 69, 69]
2025-03-11 18:38:03.028300 test begin: paddle.broadcast_to(Tensor([8, 6002, 218, 218],"bool"), list[8,8,218,218,], )

[torch error] paddle.broadcast_to(Tensor([8, 6002, 218, 218],"bool"), list[8,8,218,218,], ) 
 The expanded size of the tensor (8) must match the existing size (6002) at non-singleton dimension 1.  Target sizes: [8, 8, 218, 218].  Tensor sizes: [8, 6002, 218, 218]
2025-03-11 18:38:03.509501 test begin: paddle.broadcast_to(Tensor([8, 60096, 42, 113],"bool"), list[8,8,42,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 60096, 42, 113],"bool"), list[8,8,42,113,], ) 
 The expanded size of the tensor (8) must match the existing size (60096) at non-singleton dimension 1.  Target sizes: [8, 8, 42, 113].  Tensor sizes: [8, 60096, 42, 113]
2025-03-11 18:38:04.019640 test begin: paddle.broadcast_to(Tensor([8, 60440, 39, 121],"bool"), list[8,8,39,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 60440, 39, 121],"bool"), list[8,8,39,121,], ) 
 The expanded size of the tensor (8) must match the existing size (60440) at non-singleton dimension 1.  Target sizes: [8, 8, 39, 121].  Tensor sizes: [8, 60440, 39, 121]
2025-03-11 18:38:04.501581 test begin: paddle.broadcast_to(Tensor([8, 6057, 217, 217],"bool"), list[8,8,217,217,], )

[torch error] paddle.broadcast_to(Tensor([8, 6057, 217, 217],"bool"), list[8,8,217,217,], ) 
 The expanded size of the tensor (8) must match the existing size (6057) at non-singleton dimension 1.  Target sizes: [8, 8, 217, 217].  Tensor sizes: [8, 6057, 217, 217]
2025-03-11 18:38:05.022493 test begin: paddle.broadcast_to(Tensor([8, 6114, 216, 216],"bool"), list[8,8,216,216,], )

[torch error] paddle.broadcast_to(Tensor([8, 6114, 216, 216],"bool"), list[8,8,216,216,], ) 
 The expanded size of the tensor (8) must match the existing size (6114) at non-singleton dimension 1.  Target sizes: [8, 8, 216, 216].  Tensor sizes: [8, 6114, 216, 216]
2025-03-11 18:38:05.507586 test begin: paddle.broadcast_to(Tensor([8, 61562, 41, 113],"bool"), list[8,8,41,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 61562, 41, 113],"bool"), list[8,8,41,113,], ) 
 The expanded size of the tensor (8) must match the existing size (61562) at non-singleton dimension 1.  Target sizes: [8, 8, 41, 113].  Tensor sizes: [8, 61562, 41, 113]
2025-03-11 18:38:05.992366 test begin: paddle.broadcast_to(Tensor([8, 61681, 68, 68],"bool"), list[8,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([8, 61681, 68, 68],"bool"), list[8,8,68,68,], ) 
 The expanded size of the tensor (8) must match the existing size (61681) at non-singleton dimension 1.  Target sizes: [8, 8, 68, 68].  Tensor sizes: [8, 61681, 68, 68]
2025-03-11 18:38:06.525303 test begin: paddle.broadcast_to(Tensor([8, 6171, 215, 215],"bool"), list[8,8,215,215,], )

[torch error] paddle.broadcast_to(Tensor([8, 6171, 215, 215],"bool"), list[8,8,215,215,], ) 
 The expanded size of the tensor (8) must match the existing size (6171) at non-singleton dimension 1.  Target sizes: [8, 8, 215, 215].  Tensor sizes: [8, 6171, 215, 215]
2025-03-11 18:38:07.008777 test begin: paddle.broadcast_to(Tensor([8, 617344, 14, 33],"bool"), list[8,8,14,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 617344, 14, 33],"bool"), list[8,8,14,33,], ) 
 The expanded size of the tensor (8) must match the existing size (617344) at non-singleton dimension 1.  Target sizes: [8, 8, 14, 33].  Tensor sizes: [8, 617344, 14, 33]
2025-03-11 18:38:07.489301 test begin: paddle.broadcast_to(Tensor([8, 62030, 38, 121],"bool"), list[8,8,38,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 62030, 38, 121],"bool"), list[8,8,38,121,], ) 
 The expanded size of the tensor (8) must match the existing size (62030) at non-singleton dimension 1.  Target sizes: [8, 8, 38, 121].  Tensor sizes: [8, 62030, 38, 121]
2025-03-11 18:38:08.016424 test begin: paddle.broadcast_to(Tensor([8, 6228, 214, 214],"bool"), list[8,8,214,214,], )

[torch error] paddle.broadcast_to(Tensor([8, 6228, 214, 214],"bool"), list[8,8,214,214,], ) 
 The expanded size of the tensor (8) must match the existing size (6228) at non-singleton dimension 1.  Target sizes: [8, 8, 214, 214].  Tensor sizes: [8, 6228, 214, 214]
2025-03-11 18:38:08.510409 test begin: paddle.broadcast_to(Tensor([8, 6287, 213, 213],"bool"), list[8,8,213,213,], )

[torch error] paddle.broadcast_to(Tensor([8, 6287, 213, 213],"bool"), list[8,8,213,213,], ) 
 The expanded size of the tensor (8) must match the existing size (6287) at non-singleton dimension 1.  Target sizes: [8, 8, 213, 213].  Tensor sizes: [8, 6287, 213, 213]
2025-03-11 18:38:09.036541 test begin: paddle.broadcast_to(Tensor([8, 63, 4527186],"float32"), tuple(8,63,768,), )

[torch error] paddle.broadcast_to(Tensor([8, 63, 4527186],"float32"), tuple(8,63,768,), ) 
 The expanded size of the tensor (768) must match the existing size (4527186) at non-singleton dimension 2.  Target sizes: [8, 63, 768].  Tensor sizes: [8, 63, 4527186]
2025-03-11 18:38:10.861341 test begin: paddle.broadcast_to(Tensor([8, 631002, 4, 113],"bool"), list[8,8,4,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 631002, 4, 113],"bool"), list[8,8,4,113,], ) 
 The expanded size of the tensor (8) must match the existing size (631002) at non-singleton dimension 1.  Target sizes: [8, 8, 4, 113].  Tensor sizes: [8, 631002, 4, 113]
2025-03-11 18:38:11.354118 test begin: paddle.broadcast_to(Tensor([8, 63101, 40, 113],"bool"), list[8,8,40,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 63101, 40, 113],"bool"), list[8,8,40,113,], ) 
 The expanded size of the tensor (8) must match the existing size (63101) at non-singleton dimension 1.  Target sizes: [8, 8, 40, 113].  Tensor sizes: [8, 63101, 40, 113]
2025-03-11 18:38:11.839069 test begin: paddle.broadcast_to(Tensor([8, 6346, 212, 212],"bool"), list[8,8,212,212,], )

[torch error] paddle.broadcast_to(Tensor([8, 6346, 212, 212],"bool"), list[8,8,212,212,], ) 
 The expanded size of the tensor (8) must match the existing size (6346) at non-singleton dimension 1.  Target sizes: [8, 8, 212, 212].  Tensor sizes: [8, 6346, 212, 212]
2025-03-11 18:38:12.325777 test begin: paddle.broadcast_to(Tensor([8, 63536, 67, 67],"bool"), list[8,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([8, 63536, 67, 67],"bool"), list[8,8,67,67,], ) 
 The expanded size of the tensor (8) must match the existing size (63536) at non-singleton dimension 1.  Target sizes: [8, 8, 67, 67].  Tensor sizes: [8, 63536, 67, 67]
2025-03-11 18:38:12.851825 test begin: paddle.broadcast_to(Tensor([8, 63707, 37, 121],"bool"), list[8,8,37,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 63707, 37, 121],"bool"), list[8,8,37,121,], ) 
 The expanded size of the tensor (8) must match the existing size (63707) at non-singleton dimension 1.  Target sizes: [8, 8, 37, 121].  Tensor sizes: [8, 63707, 37, 121]
2025-03-11 18:38:13.345692 test begin: paddle.broadcast_to(Tensor([8, 6407, 211, 211],"bool"), list[8,8,211,211,], )

[torch error] paddle.broadcast_to(Tensor([8, 6407, 211, 211],"bool"), list[8,8,211,211,], ) 
 The expanded size of the tensor (8) must match the existing size (6407) at non-singleton dimension 1.  Target sizes: [8, 8, 211, 211].  Tensor sizes: [8, 6407, 211, 211]
2025-03-11 18:38:13.840472 test begin: paddle.broadcast_to(Tensor([8, 646741, 21, 21],"bool"), list[8,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([8, 646741, 21, 21],"bool"), list[8,8,21,21,], ) 
 The expanded size of the tensor (8) must match the existing size (646741) at non-singleton dimension 1.  Target sizes: [8, 8, 21, 21].  Tensor sizes: [8, 646741, 21, 21]
2025-03-11 18:38:14.330638 test begin: paddle.broadcast_to(Tensor([8, 6468, 210, 210],"bool"), list[8,8,210,210,], )

[torch error] paddle.broadcast_to(Tensor([8, 6468, 210, 210],"bool"), list[8,8,210,210,], ) 
 The expanded size of the tensor (8) must match the existing size (6468) at non-singleton dimension 1.  Target sizes: [8, 8, 210, 210].  Tensor sizes: [8, 6468, 210, 210]
2025-03-11 18:38:14.867921 test begin: paddle.broadcast_to(Tensor([8, 64719, 39, 113],"bool"), list[8,8,39,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 64719, 39, 113],"bool"), list[8,8,39,113,], ) 
 The expanded size of the tensor (8) must match the existing size (64719) at non-singleton dimension 1.  Target sizes: [8, 8, 39, 113].  Tensor sizes: [8, 64719, 39, 113]
2025-03-11 18:38:15.357704 test begin: paddle.broadcast_to(Tensor([8, 6530, 209, 209],"bool"), list[8,8,209,209,], )

[torch error] paddle.broadcast_to(Tensor([8, 6530, 209, 209],"bool"), list[8,8,209,209,], ) 
 The expanded size of the tensor (8) must match the existing size (6530) at non-singleton dimension 1.  Target sizes: [8, 8, 209, 209].  Tensor sizes: [8, 6530, 209, 209]
2025-03-11 18:38:15.849198 test begin: paddle.broadcast_to(Tensor([8, 65476, 36, 121],"bool"), list[8,8,36,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 65476, 36, 121],"bool"), list[8,8,36,121,], ) 
 The expanded size of the tensor (8) must match the existing size (65476) at non-singleton dimension 1.  Target sizes: [8, 8, 36, 121].  Tensor sizes: [8, 65476, 36, 121]
2025-03-11 18:38:16.335355 test begin: paddle.broadcast_to(Tensor([8, 65476, 66, 66],"bool"), list[8,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([8, 65476, 66, 66],"bool"), list[8,8,66,66,], ) 
 The expanded size of the tensor (8) must match the existing size (65476) at non-singleton dimension 1.  Target sizes: [8, 8, 66, 66].  Tensor sizes: [8, 65476, 66, 66]
2025-03-11 18:38:16.928524 test begin: paddle.broadcast_to(Tensor([8, 6593, 208, 208],"bool"), list[8,8,208,208,], )

[torch error] paddle.broadcast_to(Tensor([8, 6593, 208, 208],"bool"), list[8,8,208,208,], ) 
 The expanded size of the tensor (8) must match the existing size (6593) at non-singleton dimension 1.  Target sizes: [8, 8, 208, 208].  Tensor sizes: [8, 6593, 208, 208]
2025-03-11 18:38:17.381593 test begin: paddle.broadcast_to(Tensor([8, 66422, 38, 113],"bool"), list[8,8,38,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 66422, 38, 113],"bool"), list[8,8,38,113,], ) 
 The expanded size of the tensor (8) must match the existing size (66422) at non-singleton dimension 1.  Target sizes: [8, 8, 38, 113].  Tensor sizes: [8, 66422, 38, 113]
2025-03-11 18:38:17.951312 test begin: paddle.broadcast_to(Tensor([8, 664832, 13, 33],"bool"), list[8,8,13,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 664832, 13, 33],"bool"), list[8,8,13,33,], ) 
 The expanded size of the tensor (8) must match the existing size (664832) at non-singleton dimension 1.  Target sizes: [8, 8, 13, 33].  Tensor sizes: [8, 664832, 13, 33]
2025-03-11 18:38:18.560272 test begin: paddle.broadcast_to(Tensor([8, 6657, 207, 207],"bool"), list[8,8,207,207,], )

[torch error] paddle.broadcast_to(Tensor([8, 6657, 207, 207],"bool"), list[8,8,207,207,], ) 
 The expanded size of the tensor (8) must match the existing size (6657) at non-singleton dimension 1.  Target sizes: [8, 8, 207, 207].  Tensor sizes: [8, 6657, 207, 207]
2025-03-11 18:38:18.958907 test begin: paddle.broadcast_to(Tensor([8, 6722, 206, 206],"bool"), list[8,8,206,206,], )

[torch error] paddle.broadcast_to(Tensor([8, 6722, 206, 206],"bool"), list[8,8,206,206,], ) 
 The expanded size of the tensor (8) must match the existing size (6722) at non-singleton dimension 1.  Target sizes: [8, 8, 206, 206].  Tensor sizes: [8, 6722, 206, 206]
2025-03-11 18:38:19.479651 test begin: paddle.broadcast_to(Tensor([8, 67347, 35, 121],"bool"), list[8,8,35,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 67347, 35, 121],"bool"), list[8,8,35,121,], ) 
 The expanded size of the tensor (8) must match the existing size (67347) at non-singleton dimension 1.  Target sizes: [8, 8, 35, 121].  Tensor sizes: [8, 67347, 35, 121]
2025-03-11 18:38:20.215571 test begin: paddle.broadcast_to(Tensor([8, 67506, 65, 65],"bool"), list[8,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([8, 67506, 65, 65],"bool"), list[8,8,65,65,], ) 
 The expanded size of the tensor (8) must match the existing size (67506) at non-singleton dimension 1.  Target sizes: [8, 8, 65, 65].  Tensor sizes: [8, 67506, 65, 65]
2025-03-11 18:38:20.789373 test begin: paddle.broadcast_to(Tensor([8, 6787, 205, 205],"bool"), list[8,8,205,205,], )

[torch error] paddle.broadcast_to(Tensor([8, 6787, 205, 205],"bool"), list[8,8,205,205,], ) 
 The expanded size of the tensor (8) must match the existing size (6787) at non-singleton dimension 1.  Target sizes: [8, 8, 205, 205].  Tensor sizes: [8, 6787, 205, 205]
2025-03-11 18:38:21.290522 test begin: paddle.broadcast_to(Tensor([8, 68217, 37, 113],"bool"), list[8,8,37,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 68217, 37, 113],"bool"), list[8,8,37,113,], ) 
 The expanded size of the tensor (8) must match the existing size (68217) at non-singleton dimension 1.  Target sizes: [8, 8, 37, 113].  Tensor sizes: [8, 68217, 37, 113]
2025-03-11 18:38:21.867144 test begin: paddle.broadcast_to(Tensor([8, 6854, 204, 204],"bool"), list[8,8,204,204,], )

[torch error] paddle.broadcast_to(Tensor([8, 6854, 204, 204],"bool"), list[8,8,204,204,], ) 
 The expanded size of the tensor (8) must match the existing size (6854) at non-singleton dimension 1.  Target sizes: [8, 8, 204, 204].  Tensor sizes: [8, 6854, 204, 204]
2025-03-11 18:38:22.469941 test begin: paddle.broadcast_to(Tensor([8, 6922, 203, 203],"bool"), list[8,8,203,203,], )

[torch error] paddle.broadcast_to(Tensor([8, 6922, 203, 203],"bool"), list[8,8,203,203,], ) 
 The expanded size of the tensor (8) must match the existing size (6922) at non-singleton dimension 1.  Target sizes: [8, 8, 203, 203].  Tensor sizes: [8, 6922, 203, 203]
2025-03-11 18:38:22.926006 test begin: paddle.broadcast_to(Tensor([8, 69328, 34, 121],"bool"), list[8,8,34,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 69328, 34, 121],"bool"), list[8,8,34,121,], ) 
 The expanded size of the tensor (8) must match the existing size (69328) at non-singleton dimension 1.  Target sizes: [8, 8, 34, 121].  Tensor sizes: [8, 69328, 34, 121]
2025-03-11 18:38:23.424881 test begin: paddle.broadcast_to(Tensor([8, 69633, 64, 64],"bool"), list[8,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([8, 69633, 64, 64],"bool"), list[8,8,64,64,], ) 
 The expanded size of the tensor (8) must match the existing size (69633) at non-singleton dimension 1.  Target sizes: [8, 8, 64, 64].  Tensor sizes: [8, 69633, 64, 64]
2025-03-11 18:38:23.914137 test begin: paddle.broadcast_to(Tensor([8, 6990, 202, 202],"bool"), list[8,8,202,202,], )

[torch error] paddle.broadcast_to(Tensor([8, 6990, 202, 202],"bool"), list[8,8,202,202,], ) 
 The expanded size of the tensor (8) must match the existing size (6990) at non-singleton dimension 1.  Target sizes: [8, 8, 202, 202].  Tensor sizes: [8, 6990, 202, 202]
2025-03-11 18:38:24.440586 test begin: paddle.broadcast_to(Tensor([8, 7, 40744668],"int64"), tuple(8,7,768,), )

[torch error] paddle.broadcast_to(Tensor([8, 7, 40744668],"int64"), tuple(8,7,768,), ) 
 The expanded size of the tensor (768) must match the existing size (40744668) at non-singleton dimension 2.  Target sizes: [8, 7, 768].  Tensor sizes: [8, 7, 40744668]
2025-03-11 18:38:29.791439 test begin: paddle.broadcast_to(Tensor([8, 70112, 36, 113],"bool"), list[8,8,36,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 70112, 36, 113],"bool"), list[8,8,36,113,], ) 
 The expanded size of the tensor (8) must match the existing size (70112) at non-singleton dimension 1.  Target sizes: [8, 8, 36, 113].  Tensor sizes: [8, 70112, 36, 113]
2025-03-11 18:38:30.300461 test begin: paddle.broadcast_to(Tensor([8, 7060, 201, 201],"bool"), list[8,8,201,201,], )

[torch error] paddle.broadcast_to(Tensor([8, 7060, 201, 201],"bool"), list[8,8,201,201,], ) 
 The expanded size of the tensor (8) must match the existing size (7060) at non-singleton dimension 1.  Target sizes: [8, 8, 201, 201].  Tensor sizes: [8, 7060, 201, 201]
2025-03-11 18:38:30.900984 test begin: paddle.broadcast_to(Tensor([8, 71303169, 2, 2],"bool"), list[8,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([8, 71303169, 2, 2],"bool"), list[8,8,2,2,], ) 
 The expanded size of the tensor (8) must match the existing size (71303169) at non-singleton dimension 1.  Target sizes: [8, 8, 2, 2].  Tensor sizes: [8, 71303169, 2, 2]
2025-03-11 18:38:31.322564 test begin: paddle.broadcast_to(Tensor([8, 713032, 20, 20],"bool"), list[8,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([8, 713032, 20, 20],"bool"), list[8,8,20,20,], ) 
 The expanded size of the tensor (8) must match the existing size (713032) at non-singleton dimension 1.  Target sizes: [8, 8, 20, 20].  Tensor sizes: [8, 713032, 20, 20]
2025-03-11 18:38:31.808298 test begin: paddle.broadcast_to(Tensor([8, 7131, 200, 200],"bool"), list[8,8,200,200,], )

[torch error] paddle.broadcast_to(Tensor([8, 7131, 200, 200],"bool"), list[8,8,200,200,], ) 
 The expanded size of the tensor (8) must match the existing size (7131) at non-singleton dimension 1.  Target sizes: [8, 8, 200, 200].  Tensor sizes: [8, 7131, 200, 200]
2025-03-11 18:38:32.296252 test begin: paddle.broadcast_to(Tensor([8, 71429, 33, 121],"bool"), list[8,8,33,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 71429, 33, 121],"bool"), list[8,8,33,121,], ) 
 The expanded size of the tensor (8) must match the existing size (71429) at non-singleton dimension 1.  Target sizes: [8, 8, 33, 121].  Tensor sizes: [8, 71429, 33, 121]
2025-03-11 18:38:32.781690 test begin: paddle.broadcast_to(Tensor([8, 71861, 63, 63],"bool"), list[8,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([8, 71861, 63, 63],"bool"), list[8,8,63,63,], ) 
 The expanded size of the tensor (8) must match the existing size (71861) at non-singleton dimension 1.  Target sizes: [8, 8, 63, 63].  Tensor sizes: [8, 71861, 63, 63]
2025-03-11 18:38:33.302495 test begin: paddle.broadcast_to(Tensor([8, 720235, 12, 33],"bool"), list[8,8,12,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 720235, 12, 33],"bool"), list[8,8,12,33,], ) 
 The expanded size of the tensor (8) must match the existing size (720235) at non-singleton dimension 1.  Target sizes: [8, 8, 12, 33].  Tensor sizes: [8, 720235, 12, 33]
2025-03-11 18:38:33.835826 test begin: paddle.broadcast_to(Tensor([8, 7203, 199, 199],"bool"), list[8,8,199,199,], )

[torch error] paddle.broadcast_to(Tensor([8, 7203, 199, 199],"bool"), list[8,8,199,199,], ) 
 The expanded size of the tensor (8) must match the existing size (7203) at non-singleton dimension 1.  Target sizes: [8, 8, 199, 199].  Tensor sizes: [8, 7203, 199, 199]
2025-03-11 18:38:34.324902 test begin: paddle.broadcast_to(Tensor([8, 72115, 35, 113],"bool"), list[8,8,35,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 72115, 35, 113],"bool"), list[8,8,35,113,], ) 
 The expanded size of the tensor (8) must match the existing size (72115) at non-singleton dimension 1.  Target sizes: [8, 8, 35, 113].  Tensor sizes: [8, 72115, 35, 113]
2025-03-11 18:38:34.839063 test begin: paddle.broadcast_to(Tensor([8, 7276, 198, 198],"bool"), list[8,8,198,198,], )

[torch error] paddle.broadcast_to(Tensor([8, 7276, 198, 198],"bool"), list[8,8,198,198,], ) 
 The expanded size of the tensor (8) must match the existing size (7276) at non-singleton dimension 1.  Target sizes: [8, 8, 198, 198].  Tensor sizes: [8, 7276, 198, 198]
2025-03-11 18:38:35.322299 test begin: paddle.broadcast_to(Tensor([8, 7350, 197, 197],"bool"), list[8,8,197,197,], )

[torch error] paddle.broadcast_to(Tensor([8, 7350, 197, 197],"bool"), list[8,8,197,197,], ) 
 The expanded size of the tensor (8) must match the existing size (7350) at non-singleton dimension 1.  Target sizes: [8, 8, 197, 197].  Tensor sizes: [8, 7350, 197, 197]
2025-03-11 18:38:35.817335 test begin: paddle.broadcast_to(Tensor([8, 73661, 32, 121],"bool"), list[8,8,32,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 73661, 32, 121],"bool"), list[8,8,32,121,], ) 
 The expanded size of the tensor (8) must match the existing size (73661) at non-singleton dimension 1.  Target sizes: [8, 8, 32, 121].  Tensor sizes: [8, 73661, 32, 121]
2025-03-11 18:38:36.319902 test begin: paddle.broadcast_to(Tensor([8, 74197, 62, 62],"bool"), list[8,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([8, 74197, 62, 62],"bool"), list[8,8,62,62,], ) 
 The expanded size of the tensor (8) must match the existing size (74197) at non-singleton dimension 1.  Target sizes: [8, 8, 62, 62].  Tensor sizes: [8, 74197, 62, 62]
2025-03-11 18:38:36.818819 test begin: paddle.broadcast_to(Tensor([8, 74236, 34, 113],"bool"), list[8,8,34,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 74236, 34, 113],"bool"), list[8,8,34,113,], ) 
 The expanded size of the tensor (8) must match the existing size (74236) at non-singleton dimension 1.  Target sizes: [8, 8, 34, 113].  Tensor sizes: [8, 74236, 34, 113]
2025-03-11 18:38:37.308758 test begin: paddle.broadcast_to(Tensor([8, 7425, 196, 196],"bool"), list[8,8,196,196,], )

[torch error] paddle.broadcast_to(Tensor([8, 7425, 196, 196],"bool"), list[8,8,196,196,], ) 
 The expanded size of the tensor (8) must match the existing size (7425) at non-singleton dimension 1.  Target sizes: [8, 8, 196, 196].  Tensor sizes: [8, 7425, 196, 196]
2025-03-11 18:38:37.866795 test begin: paddle.broadcast_to(Tensor([8, 7501, 195, 195],"bool"), list[8,8,195,195,], )

[torch error] paddle.broadcast_to(Tensor([8, 7501, 195, 195],"bool"), list[8,8,195,195,], ) 
 The expanded size of the tensor (8) must match the existing size (7501) at non-singleton dimension 1.  Target sizes: [8, 8, 195, 195].  Tensor sizes: [8, 7501, 195, 195]
2025-03-11 18:38:38.435929 test begin: paddle.broadcast_to(Tensor([8, 7579, 194, 194],"bool"), list[8,8,194,194,], )

[torch error] paddle.broadcast_to(Tensor([8, 7579, 194, 194],"bool"), list[8,8,194,194,], ) 
 The expanded size of the tensor (8) must match the existing size (7579) at non-singleton dimension 1.  Target sizes: [8, 8, 194, 194].  Tensor sizes: [8, 7579, 194, 194]
2025-03-11 18:38:39.027476 test begin: paddle.broadcast_to(Tensor([8, 76037, 31, 121],"bool"), list[8,8,31,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 76037, 31, 121],"bool"), list[8,8,31,121,], ) 
 The expanded size of the tensor (8) must match the existing size (76037) at non-singleton dimension 1.  Target sizes: [8, 8, 31, 121].  Tensor sizes: [8, 76037, 31, 121]
2025-03-11 18:38:39.389113 test begin: paddle.broadcast_to(Tensor([8, 76486, 33, 113],"bool"), list[8,8,33,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 76486, 33, 113],"bool"), list[8,8,33,113,], ) 
 The expanded size of the tensor (8) must match the existing size (76486) at non-singleton dimension 1.  Target sizes: [8, 8, 33, 113].  Tensor sizes: [8, 76486, 33, 113]
2025-03-11 18:38:39.978782 test begin: paddle.broadcast_to(Tensor([8, 7657, 193, 193],"bool"), list[8,8,193,193,], )

[torch error] paddle.broadcast_to(Tensor([8, 7657, 193, 193],"bool"), list[8,8,193,193,], ) 
 The expanded size of the tensor (8) must match the existing size (7657) at non-singleton dimension 1.  Target sizes: [8, 8, 193, 193].  Tensor sizes: [8, 7657, 193, 193]
2025-03-11 18:38:40.405635 test begin: paddle.broadcast_to(Tensor([8, 76650, 61, 61],"bool"), list[8,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([8, 76650, 61, 61],"bool"), list[8,8,61,61,], ) 
 The expanded size of the tensor (8) must match the existing size (76650) at non-singleton dimension 1.  Target sizes: [8, 8, 61, 61].  Tensor sizes: [8, 76650, 61, 61]
2025-03-11 18:38:40.889156 test begin: paddle.broadcast_to(Tensor([8, 7737, 192, 192],"bool"), list[8,8,192,192,], )

[torch error] paddle.broadcast_to(Tensor([8, 7737, 192, 192],"bool"), list[8,8,192,192,], ) 
 The expanded size of the tensor (8) must match the existing size (7737) at non-singleton dimension 1.  Target sizes: [8, 8, 192, 192].  Tensor sizes: [8, 7737, 192, 192]
2025-03-11 18:38:41.450116 test begin: paddle.broadcast_to(Tensor([8, 7819, 191, 191],"bool"), list[8,8,191,191,], )

[torch error] paddle.broadcast_to(Tensor([8, 7819, 191, 191],"bool"), list[8,8,191,191,], ) 
 The expanded size of the tensor (8) must match the existing size (7819) at non-singleton dimension 1.  Target sizes: [8, 8, 191, 191].  Tensor sizes: [8, 7819, 191, 191]
2025-03-11 18:38:42.024714 test begin: paddle.broadcast_to(Tensor([8, 78571, 30, 121],"bool"), list[8,8,30,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 78571, 30, 121],"bool"), list[8,8,30,121,], ) 
 The expanded size of the tensor (8) must match the existing size (78571) at non-singleton dimension 1.  Target sizes: [8, 8, 30, 121].  Tensor sizes: [8, 78571, 30, 121]
2025-03-11 18:38:42.396333 test begin: paddle.broadcast_to(Tensor([8, 785710, 11, 33],"bool"), list[8,8,11,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 785710, 11, 33],"bool"), list[8,8,11,33,], ) 
 The expanded size of the tensor (8) must match the existing size (785710) at non-singleton dimension 1.  Target sizes: [8, 8, 11, 33].  Tensor sizes: [8, 785710, 11, 33]
2025-03-11 18:38:42.915068 test begin: paddle.broadcast_to(Tensor([8, 785710, 3, 121],"bool"), list[8,8,3,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 785710, 3, 121],"bool"), list[8,8,3,121,], ) 
 The expanded size of the tensor (8) must match the existing size (785710) at non-singleton dimension 1.  Target sizes: [8, 8, 3, 121].  Tensor sizes: [8, 785710, 3, 121]
2025-03-11 18:38:43.458146 test begin: paddle.broadcast_to(Tensor([8, 78876, 32, 113],"bool"), list[8,8,32,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 78876, 32, 113],"bool"), list[8,8,32,113,], ) 
 The expanded size of the tensor (8) must match the existing size (78876) at non-singleton dimension 1.  Target sizes: [8, 8, 32, 113].  Tensor sizes: [8, 78876, 32, 113]
2025-03-11 18:38:43.944773 test begin: paddle.broadcast_to(Tensor([8, 790063, 19, 19],"bool"), list[8,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([8, 790063, 19, 19],"bool"), list[8,8,19,19,], ) 
 The expanded size of the tensor (8) must match the existing size (790063) at non-singleton dimension 1.  Target sizes: [8, 8, 19, 19].  Tensor sizes: [8, 790063, 19, 19]
2025-03-11 18:38:44.427069 test begin: paddle.broadcast_to(Tensor([8, 7901, 190, 190],"bool"), list[8,8,190,190,], )

[torch error] paddle.broadcast_to(Tensor([8, 7901, 190, 190],"bool"), list[8,8,190,190,], ) 
 The expanded size of the tensor (8) must match the existing size (7901) at non-singleton dimension 1.  Target sizes: [8, 8, 190, 190].  Tensor sizes: [8, 7901, 190, 190]
2025-03-11 18:38:44.924784 test begin: paddle.broadcast_to(Tensor([8, 7922575, 6, 6],"bool"), list[8,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([8, 7922575, 6, 6],"bool"), list[8,8,6,6,], ) 
 The expanded size of the tensor (8) must match the existing size (7922575) at non-singleton dimension 1.  Target sizes: [8, 8, 6, 6].  Tensor sizes: [8, 7922575, 6, 6]
2025-03-11 18:38:45.447958 test begin: paddle.broadcast_to(Tensor([8, 79226, 60, 60],"bool"), list[8,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([8, 79226, 60, 60],"bool"), list[8,8,60,60,], ) 
 The expanded size of the tensor (8) must match the existing size (79226) at non-singleton dimension 1.  Target sizes: [8, 8, 60, 60].  Tensor sizes: [8, 79226, 60, 60]
2025-03-11 18:38:45.960228 test begin: paddle.broadcast_to(Tensor([8, 7985, 189, 189],"bool"), list[8,8,189,189,], )

[torch error] paddle.broadcast_to(Tensor([8, 7985, 189, 189],"bool"), list[8,8,189,189,], ) 
 The expanded size of the tensor (8) must match the existing size (7985) at non-singleton dimension 1.  Target sizes: [8, 8, 189, 189].  Tensor sizes: [8, 7985, 189, 189]
2025-03-11 18:38:46.470560 test begin: paddle.broadcast_to(Tensor([8, 8070, 188, 188],"bool"), list[8,8,188,188,], )

[torch error] paddle.broadcast_to(Tensor([8, 8070, 188, 188],"bool"), list[8,8,188,188,], ) 
 The expanded size of the tensor (8) must match the existing size (8070) at non-singleton dimension 1.  Target sizes: [8, 8, 188, 188].  Tensor sizes: [8, 8070, 188, 188]
2025-03-11 18:38:47.063855 test begin: paddle.broadcast_to(Tensor([8, 81281, 29, 121],"bool"), list[8,8,29,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 81281, 29, 121],"bool"), list[8,8,29,121,], ) 
 The expanded size of the tensor (8) must match the existing size (81281) at non-singleton dimension 1.  Target sizes: [8, 8, 29, 121].  Tensor sizes: [8, 81281, 29, 121]
2025-03-11 18:38:47.447725 test begin: paddle.broadcast_to(Tensor([8, 81420, 31, 113],"bool"), list[8,8,31,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 81420, 31, 113],"bool"), list[8,8,31,113,], ) 
 The expanded size of the tensor (8) must match the existing size (81420) at non-singleton dimension 1.  Target sizes: [8, 8, 31, 113].  Tensor sizes: [8, 81420, 31, 113]
2025-03-11 18:38:47.935836 test begin: paddle.broadcast_to(Tensor([8, 8157, 187, 187],"bool"), list[8,8,187,187,], )

[torch error] paddle.broadcast_to(Tensor([8, 8157, 187, 187],"bool"), list[8,8,187,187,], ) 
 The expanded size of the tensor (8) must match the existing size (8157) at non-singleton dimension 1.  Target sizes: [8, 8, 187, 187].  Tensor sizes: [8, 8157, 187, 187]
2025-03-11 18:38:48.418044 test begin: paddle.broadcast_to(Tensor([8, 81935, 59, 59],"bool"), list[8,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([8, 81935, 59, 59],"bool"), list[8,8,59,59,], ) 
 The expanded size of the tensor (8) must match the existing size (81935) at non-singleton dimension 1.  Target sizes: [8, 8, 59, 59].  Tensor sizes: [8, 81935, 59, 59]
2025-03-11 18:38:48.896036 test begin: paddle.broadcast_to(Tensor([8, 8245, 186, 186],"bool"), list[8,8,186,186,], )

[torch error] paddle.broadcast_to(Tensor([8, 8245, 186, 186],"bool"), list[8,8,186,186,], ) 
 The expanded size of the tensor (8) must match the existing size (8245) at non-singleton dimension 1.  Target sizes: [8, 8, 186, 186].  Tensor sizes: [8, 8245, 186, 186]
2025-03-11 18:38:49.380484 test begin: paddle.broadcast_to(Tensor([8, 8334, 185, 185],"bool"), list[8,8,185,185,], )

[torch error] paddle.broadcast_to(Tensor([8, 8334, 185, 185],"bool"), list[8,8,185,185,], ) 
 The expanded size of the tensor (8) must match the existing size (8334) at non-singleton dimension 1.  Target sizes: [8, 8, 185, 185].  Tensor sizes: [8, 8334, 185, 185]
2025-03-11 18:38:49.917267 test begin: paddle.broadcast_to(Tensor([8, 841336, 3, 113],"bool"), list[8,8,3,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 841336, 3, 113],"bool"), list[8,8,3,113,], ) 
 The expanded size of the tensor (8) must match the existing size (841336) at non-singleton dimension 1.  Target sizes: [8, 8, 3, 113].  Tensor sizes: [8, 841336, 3, 113]
2025-03-11 18:38:50.446187 test begin: paddle.broadcast_to(Tensor([8, 84134, 30, 113],"bool"), list[8,8,30,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 84134, 30, 113],"bool"), list[8,8,30,113,], ) 
 The expanded size of the tensor (8) must match the existing size (84134) at non-singleton dimension 1.  Target sizes: [8, 8, 30, 113].  Tensor sizes: [8, 84134, 30, 113]
2025-03-11 18:38:50.978999 test begin: paddle.broadcast_to(Tensor([8, 84184, 28, 121],"bool"), list[8,8,28,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 84184, 28, 121],"bool"), list[8,8,28,121,], ) 
 The expanded size of the tensor (8) must match the existing size (84184) at non-singleton dimension 1.  Target sizes: [8, 8, 28, 121].  Tensor sizes: [8, 84184, 28, 121]
2025-03-11 18:38:51.485901 test begin: paddle.broadcast_to(Tensor([8, 8425, 184, 184],"bool"), list[8,8,184,184,], )

[torch error] paddle.broadcast_to(Tensor([8, 8425, 184, 184],"bool"), list[8,8,184,184,], ) 
 The expanded size of the tensor (8) must match the existing size (8425) at non-singleton dimension 1.  Target sizes: [8, 8, 184, 184].  Tensor sizes: [8, 8425, 184, 184]
2025-03-11 18:38:52.082795 test begin: paddle.broadcast_to(Tensor([8, 84784, 58, 58],"bool"), list[8,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([8, 84784, 58, 58],"bool"), list[8,8,58,58,], ) 
 The expanded size of the tensor (8) must match the existing size (84784) at non-singleton dimension 1.  Target sizes: [8, 8, 58, 58].  Tensor sizes: [8, 84784, 58, 58]
2025-03-11 18:38:52.603741 test begin: paddle.broadcast_to(Tensor([8, 8517, 183, 183],"bool"), list[8,8,183,183,], )

[torch error] paddle.broadcast_to(Tensor([8, 8517, 183, 183],"bool"), list[8,8,183,183,], ) 
 The expanded size of the tensor (8) must match the existing size (8517) at non-singleton dimension 1.  Target sizes: [8, 8, 183, 183].  Tensor sizes: [8, 8517, 183, 183]
2025-03-11 18:38:52.964066 test begin: paddle.broadcast_to(Tensor([8, 8611, 182, 182],"bool"), list[8,8,182,182,], )

[torch error] paddle.broadcast_to(Tensor([8, 8611, 182, 182],"bool"), list[8,8,182,182,], ) 
 The expanded size of the tensor (8) must match the existing size (8611) at non-singleton dimension 1.  Target sizes: [8, 8, 182, 182].  Tensor sizes: [8, 8611, 182, 182]
2025-03-11 18:38:53.553261 test begin: paddle.broadcast_to(Tensor([8, 8615, 293, 113],"bool"), list[8,8,293,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 8615, 293, 113],"bool"), list[8,8,293,113,], ) 
 The expanded size of the tensor (8) must match the existing size (8615) at non-singleton dimension 1.  Target sizes: [8, 8, 293, 113].  Tensor sizes: [8, 8615, 293, 113]
2025-03-11 18:38:53.914650 test begin: paddle.broadcast_to(Tensor([8, 8642809, 1, 33],"bool"), list[8,8,1,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 8642809, 1, 33],"bool"), list[8,8,1,33,], ) 
 The expanded size of the tensor (8) must match the existing size (8642809) at non-singleton dimension 1.  Target sizes: [8, 8, 1, 33].  Tensor sizes: [8, 8642809, 1, 33]
2025-03-11 18:38:54.401048 test begin: paddle.broadcast_to(Tensor([8, 864281, 10, 33],"bool"), list[8,8,10,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 864281, 10, 33],"bool"), list[8,8,10,33,], ) 
 The expanded size of the tensor (8) must match the existing size (864281) at non-singleton dimension 1.  Target sizes: [8, 8, 10, 33].  Tensor sizes: [8, 864281, 10, 33]
2025-03-11 18:38:54.923221 test begin: paddle.broadcast_to(Tensor([8, 8644, 292, 113],"bool"), list[8,8,292,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 8644, 292, 113],"bool"), list[8,8,292,113,], ) 
 The expanded size of the tensor (8) must match the existing size (8644) at non-singleton dimension 1.  Target sizes: [8, 8, 292, 113].  Tensor sizes: [8, 8644, 292, 113]
2025-03-11 18:38:55.456709 test begin: paddle.broadcast_to(Tensor([8, 8674, 291, 113],"bool"), list[8,8,291,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 8674, 291, 113],"bool"), list[8,8,291,113,], ) 
 The expanded size of the tensor (8) must match the existing size (8674) at non-singleton dimension 1.  Target sizes: [8, 8, 291, 113].  Tensor sizes: [8, 8674, 291, 113]
2025-03-11 18:38:55.987843 test begin: paddle.broadcast_to(Tensor([8, 87035, 29, 113],"bool"), list[8,8,29,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 87035, 29, 113],"bool"), list[8,8,29,113,], ) 
 The expanded size of the tensor (8) must match the existing size (87035) at non-singleton dimension 1.  Target sizes: [8, 8, 29, 113].  Tensor sizes: [8, 87035, 29, 113]
2025-03-11 18:38:56.590210 test begin: paddle.broadcast_to(Tensor([8, 8704, 290, 113],"bool"), list[8,8,290,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 8704, 290, 113],"bool"), list[8,8,290,113,], ) 
 The expanded size of the tensor (8) must match the existing size (8704) at non-singleton dimension 1.  Target sizes: [8, 8, 290, 113].  Tensor sizes: [8, 8704, 290, 113]
2025-03-11 18:38:56.950703 test begin: paddle.broadcast_to(Tensor([8, 8706, 181, 181],"bool"), list[8,8,181,181,], )

[torch error] paddle.broadcast_to(Tensor([8, 8706, 181, 181],"bool"), list[8,8,181,181,], ) 
 The expanded size of the tensor (8) must match the existing size (8706) at non-singleton dimension 1.  Target sizes: [8, 8, 181, 181].  Tensor sizes: [8, 8706, 181, 181]
2025-03-11 18:38:57.484247 test begin: paddle.broadcast_to(Tensor([8, 87302, 27, 121],"bool"), list[8,8,27,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 87302, 27, 121],"bool"), list[8,8,27,121,], ) 
 The expanded size of the tensor (8) must match the existing size (87302) at non-singleton dimension 1.  Target sizes: [8, 8, 27, 121].  Tensor sizes: [8, 87302, 27, 121]
2025-03-11 18:38:57.973725 test begin: paddle.broadcast_to(Tensor([8, 8734, 289, 113],"bool"), list[8,8,289,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 8734, 289, 113],"bool"), list[8,8,289,113,], ) 
 The expanded size of the tensor (8) must match the existing size (8734) at non-singleton dimension 1.  Target sizes: [8, 8, 289, 113].  Tensor sizes: [8, 8734, 289, 113]
2025-03-11 18:38:58.457348 test begin: paddle.broadcast_to(Tensor([8, 8764, 288, 113],"bool"), list[8,8,288,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 8764, 288, 113],"bool"), list[8,8,288,113,], ) 
 The expanded size of the tensor (8) must match the existing size (8764) at non-singleton dimension 1.  Target sizes: [8, 8, 288, 113].  Tensor sizes: [8, 8764, 288, 113]
2025-03-11 18:38:58.980957 test begin: paddle.broadcast_to(Tensor([8, 87785, 57, 57],"bool"), list[8,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([8, 87785, 57, 57],"bool"), list[8,8,57,57,], ) 
 The expanded size of the tensor (8) must match the existing size (87785) at non-singleton dimension 1.  Target sizes: [8, 8, 57, 57].  Tensor sizes: [8, 87785, 57, 57]
2025-03-11 18:38:59.467902 test begin: paddle.broadcast_to(Tensor([8, 8795, 287, 113],"bool"), list[8,8,287,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 8795, 287, 113],"bool"), list[8,8,287,113,], ) 
 The expanded size of the tensor (8) must match the existing size (8795) at non-singleton dimension 1.  Target sizes: [8, 8, 287, 113].  Tensor sizes: [8, 8795, 287, 113]
2025-03-11 18:38:59.962827 test begin: paddle.broadcast_to(Tensor([8, 880287, 18, 18],"bool"), list[8,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([8, 880287, 18, 18],"bool"), list[8,8,18,18,], ) 
 The expanded size of the tensor (8) must match the existing size (880287) at non-singleton dimension 1.  Target sizes: [8, 8, 18, 18].  Tensor sizes: [8, 880287, 18, 18]
2025-03-11 18:39:00.495451 test begin: paddle.broadcast_to(Tensor([8, 8803, 180, 180],"bool"), list[8,8,180,180,], )

[torch error] paddle.broadcast_to(Tensor([8, 8803, 180, 180],"bool"), list[8,8,180,180,], ) 
 The expanded size of the tensor (8) must match the existing size (8803) at non-singleton dimension 1.  Target sizes: [8, 8, 180, 180].  Tensor sizes: [8, 8803, 180, 180]
2025-03-11 18:39:00.995876 test begin: paddle.broadcast_to(Tensor([8, 8826, 286, 113],"bool"), list[8,8,286,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 8826, 286, 113],"bool"), list[8,8,286,113,], ) 
 The expanded size of the tensor (8) must match the existing size (8826) at non-singleton dimension 1.  Target sizes: [8, 8, 286, 113].  Tensor sizes: [8, 8826, 286, 113]
2025-03-11 18:39:01.524951 test begin: paddle.broadcast_to(Tensor([8, 8857, 285, 113],"bool"), list[8,8,285,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 8857, 285, 113],"bool"), list[8,8,285,113,], ) 
 The expanded size of the tensor (8) must match the existing size (8857) at non-singleton dimension 1.  Target sizes: [8, 8, 285, 113].  Tensor sizes: [8, 8857, 285, 113]
2025-03-11 18:39:02.057669 test begin: paddle.broadcast_to(Tensor([8, 8888, 284, 113],"bool"), list[8,8,284,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 8888, 284, 113],"bool"), list[8,8,284,113,], ) 
 The expanded size of the tensor (8) must match the existing size (8888) at non-singleton dimension 1.  Target sizes: [8, 8, 284, 113].  Tensor sizes: [8, 8888, 284, 113]
2025-03-11 18:39:02.650007 test begin: paddle.broadcast_to(Tensor([8, 8902, 179, 179],"bool"), list[8,8,179,179,], )

[torch error] paddle.broadcast_to(Tensor([8, 8902, 179, 179],"bool"), list[8,8,179,179,], ) 
 The expanded size of the tensor (8) must match the existing size (8902) at non-singleton dimension 1.  Target sizes: [8, 8, 179, 179].  Tensor sizes: [8, 8902, 179, 179]
2025-03-11 18:39:03.014236 test begin: paddle.broadcast_to(Tensor([8, 8919, 283, 113],"bool"), list[8,8,283,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 8919, 283, 113],"bool"), list[8,8,283,113,], ) 
 The expanded size of the tensor (8) must match the existing size (8919) at non-singleton dimension 1.  Target sizes: [8, 8, 283, 113].  Tensor sizes: [8, 8919, 283, 113]
2025-03-11 18:39:03.498139 test begin: paddle.broadcast_to(Tensor([8, 8951, 282, 113],"bool"), list[8,8,282,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 8951, 282, 113],"bool"), list[8,8,282,113,], ) 
 The expanded size of the tensor (8) must match the existing size (8951) at non-singleton dimension 1.  Target sizes: [8, 8, 282, 113].  Tensor sizes: [8, 8951, 282, 113]
2025-03-11 18:39:03.979168 test begin: paddle.broadcast_to(Tensor([8, 8983, 281, 113],"bool"), list[8,8,281,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 8983, 281, 113],"bool"), list[8,8,281,113,], ) 
 The expanded size of the tensor (8) must match the existing size (8983) at non-singleton dimension 1.  Target sizes: [8, 8, 281, 113].  Tensor sizes: [8, 8983, 281, 113]
2025-03-11 18:39:04.477440 test begin: paddle.broadcast_to(Tensor([8, 9002, 178, 178],"bool"), list[8,8,178,178,], )

[torch error] paddle.broadcast_to(Tensor([8, 9002, 178, 178],"bool"), list[8,8,178,178,], ) 
 The expanded size of the tensor (8) must match the existing size (9002) at non-singleton dimension 1.  Target sizes: [8, 8, 178, 178].  Tensor sizes: [8, 9002, 178, 178]
2025-03-11 18:39:04.970650 test begin: paddle.broadcast_to(Tensor([8, 90144, 28, 113],"bool"), list[8,8,28,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 90144, 28, 113],"bool"), list[8,8,28,113,], ) 
 The expanded size of the tensor (8) must match the existing size (90144) at non-singleton dimension 1.  Target sizes: [8, 8, 28, 113].  Tensor sizes: [8, 90144, 28, 113]
2025-03-11 18:39:05.559899 test begin: paddle.broadcast_to(Tensor([8, 9015, 280, 113],"bool"), list[8,8,280,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9015, 280, 113],"bool"), list[8,8,280,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9015) at non-singleton dimension 1.  Target sizes: [8, 8, 280, 113].  Tensor sizes: [8, 9015, 280, 113]
2025-03-11 18:39:05.948111 test begin: paddle.broadcast_to(Tensor([8, 9047, 279, 113],"bool"), list[8,8,279,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9047, 279, 113],"bool"), list[8,8,279,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9047) at non-singleton dimension 1.  Target sizes: [8, 8, 279, 113].  Tensor sizes: [8, 9047, 279, 113]
2025-03-11 18:39:06.471347 test begin: paddle.broadcast_to(Tensor([8, 90659, 26, 121],"bool"), list[8,8,26,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 90659, 26, 121],"bool"), list[8,8,26,121,], ) 
 The expanded size of the tensor (8) must match the existing size (90659) at non-singleton dimension 1.  Target sizes: [8, 8, 26, 121].  Tensor sizes: [8, 90659, 26, 121]
2025-03-11 18:39:06.965320 test begin: paddle.broadcast_to(Tensor([8, 9080, 278, 113],"bool"), list[8,8,278,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9080, 278, 113],"bool"), list[8,8,278,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9080) at non-singleton dimension 1.  Target sizes: [8, 8, 278, 113].  Tensor sizes: [8, 9080, 278, 113]
2025-03-11 18:39:07.551716 test begin: paddle.broadcast_to(Tensor([8, 90948, 56, 56],"bool"), list[8,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([8, 90948, 56, 56],"bool"), list[8,8,56,56,], ) 
 The expanded size of the tensor (8) must match the existing size (90948) at non-singleton dimension 1.  Target sizes: [8, 8, 56, 56].  Tensor sizes: [8, 90948, 56, 56]
2025-03-11 18:39:07.978657 test begin: paddle.broadcast_to(Tensor([8, 9104, 177, 177],"bool"), list[8,8,177,177,], )

[torch error] paddle.broadcast_to(Tensor([8, 9104, 177, 177],"bool"), list[8,8,177,177,], ) 
 The expanded size of the tensor (8) must match the existing size (9104) at non-singleton dimension 1.  Target sizes: [8, 8, 177, 177].  Tensor sizes: [8, 9104, 177, 177]
2025-03-11 18:39:08.574438 test begin: paddle.broadcast_to(Tensor([8, 9112, 277, 113],"bool"), list[8,8,277,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9112, 277, 113],"bool"), list[8,8,277,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9112) at non-singleton dimension 1.  Target sizes: [8, 8, 277, 113].  Tensor sizes: [8, 9112, 277, 113]
2025-03-11 18:39:08.935111 test begin: paddle.broadcast_to(Tensor([8, 9145, 276, 113],"bool"), list[8,8,276,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9145, 276, 113],"bool"), list[8,8,276,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9145) at non-singleton dimension 1.  Target sizes: [8, 8, 276, 113].  Tensor sizes: [8, 9145, 276, 113]
2025-03-11 18:39:09.457672 test begin: paddle.broadcast_to(Tensor([8, 9179, 275, 113],"bool"), list[8,8,275,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9179, 275, 113],"bool"), list[8,8,275,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9179) at non-singleton dimension 1.  Target sizes: [8, 8, 275, 113].  Tensor sizes: [8, 9179, 275, 113]
2025-03-11 18:39:09.984488 test begin: paddle.broadcast_to(Tensor([8, 9208, 176, 176],"bool"), list[8,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([8, 9208, 176, 176],"bool"), list[8,8,176,176,], ) 
 The expanded size of the tensor (8) must match the existing size (9208) at non-singleton dimension 1.  Target sizes: [8, 8, 176, 176].  Tensor sizes: [8, 9208, 176, 176]
2025-03-11 18:39:10.470756 test begin: paddle.broadcast_to(Tensor([8, 9212, 274, 113],"bool"), list[8,8,274,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9212, 274, 113],"bool"), list[8,8,274,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9212) at non-singleton dimension 1.  Target sizes: [8, 8, 274, 113].  Tensor sizes: [8, 9212, 274, 113]
2025-03-11 18:39:11.061983 test begin: paddle.broadcast_to(Tensor([8, 9246, 273, 113],"bool"), list[8,8,273,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9246, 273, 113],"bool"), list[8,8,273,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9246) at non-singleton dimension 1.  Target sizes: [8, 8, 273, 113].  Tensor sizes: [8, 9246, 273, 113]
2025-03-11 18:39:11.548528 test begin: paddle.broadcast_to(Tensor([8, 9280, 272, 113],"bool"), list[8,8,272,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9280, 272, 113],"bool"), list[8,8,272,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9280) at non-singleton dimension 1.  Target sizes: [8, 8, 272, 113].  Tensor sizes: [8, 9280, 272, 113]
2025-03-11 18:39:11.955336 test begin: paddle.broadcast_to(Tensor([8, 9314, 175, 175],"bool"), list[8,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([8, 9314, 175, 175],"bool"), list[8,8,175,175,], ) 
 The expanded size of the tensor (8) must match the existing size (9314) at non-singleton dimension 1.  Target sizes: [8, 8, 175, 175].  Tensor sizes: [8, 9314, 175, 175]
2025-03-11 18:39:12.474235 test begin: paddle.broadcast_to(Tensor([8, 9314, 271, 113],"bool"), list[8,8,271,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9314, 271, 113],"bool"), list[8,8,271,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9314) at non-singleton dimension 1.  Target sizes: [8, 8, 271, 113].  Tensor sizes: [8, 9314, 271, 113]
2025-03-11 18:39:12.996629 test begin: paddle.broadcast_to(Tensor([8, 93482, 27, 113],"bool"), list[8,8,27,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 93482, 27, 113],"bool"), list[8,8,27,113,], ) 
 The expanded size of the tensor (8) must match the existing size (93482) at non-singleton dimension 1.  Target sizes: [8, 8, 27, 113].  Tensor sizes: [8, 93482, 27, 113]
2025-03-11 18:39:13.481245 test begin: paddle.broadcast_to(Tensor([8, 9349, 270, 113],"bool"), list[8,8,270,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9349, 270, 113],"bool"), list[8,8,270,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9349) at non-singleton dimension 1.  Target sizes: [8, 8, 270, 113].  Tensor sizes: [8, 9349, 270, 113]
2025-03-11 18:39:13.961940 test begin: paddle.broadcast_to(Tensor([8, 9383, 269, 113],"bool"), list[8,8,269,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9383, 269, 113],"bool"), list[8,8,269,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9383) at non-singleton dimension 1.  Target sizes: [8, 8, 269, 113].  Tensor sizes: [8, 9383, 269, 113]
2025-03-11 18:39:14.440099 test begin: paddle.broadcast_to(Tensor([8, 9418, 268, 113],"bool"), list[8,8,268,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9418, 268, 113],"bool"), list[8,8,268,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9418) at non-singleton dimension 1.  Target sizes: [8, 8, 268, 113].  Tensor sizes: [8, 9418, 268, 113]
2025-03-11 18:39:14.921657 test begin: paddle.broadcast_to(Tensor([8, 9421, 174, 174],"bool"), list[8,8,174,174,], )

[torch error] paddle.broadcast_to(Tensor([8, 9421, 174, 174],"bool"), list[8,8,174,174,], ) 
 The expanded size of the tensor (8) must match the existing size (9421) at non-singleton dimension 1.  Target sizes: [8, 8, 174, 174].  Tensor sizes: [8, 9421, 174, 174]
2025-03-11 18:39:15.444547 test begin: paddle.broadcast_to(Tensor([8, 94286, 25, 121],"bool"), list[8,8,25,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 94286, 25, 121],"bool"), list[8,8,25,121,], ) 
 The expanded size of the tensor (8) must match the existing size (94286) at non-singleton dimension 1.  Target sizes: [8, 8, 25, 121].  Tensor sizes: [8, 94286, 25, 121]
2025-03-11 18:39:15.929993 test begin: paddle.broadcast_to(Tensor([8, 94286, 55, 55],"bool"), list[8,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([8, 94286, 55, 55],"bool"), list[8,8,55,55,], ) 
 The expanded size of the tensor (8) must match the existing size (94286) at non-singleton dimension 1.  Target sizes: [8, 8, 55, 55].  Tensor sizes: [8, 94286, 55, 55]
2025-03-11 18:39:16.413527 test begin: paddle.broadcast_to(Tensor([8, 9454, 267, 113],"bool"), list[8,8,267,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9454, 267, 113],"bool"), list[8,8,267,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9454) at non-singleton dimension 1.  Target sizes: [8, 8, 267, 113].  Tensor sizes: [8, 9454, 267, 113]
2025-03-11 18:39:17.001514 test begin: paddle.broadcast_to(Tensor([8, 9489, 266, 113],"bool"), list[8,8,266,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9489, 266, 113],"bool"), list[8,8,266,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9489) at non-singleton dimension 1.  Target sizes: [8, 8, 266, 113].  Tensor sizes: [8, 9489, 266, 113]
2025-03-11 18:39:17.387280 test begin: paddle.broadcast_to(Tensor([8, 9525, 265, 113],"bool"), list[8,8,265,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9525, 265, 113],"bool"), list[8,8,265,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9525) at non-singleton dimension 1.  Target sizes: [8, 8, 265, 113].  Tensor sizes: [8, 9525, 265, 113]
2025-03-11 18:39:17.908410 test begin: paddle.broadcast_to(Tensor([8, 9530, 173, 173],"bool"), list[8,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([8, 9530, 173, 173],"bool"), list[8,8,173,173,], ) 
 The expanded size of the tensor (8) must match the existing size (9530) at non-singleton dimension 1.  Target sizes: [8, 8, 173, 173].  Tensor sizes: [8, 9530, 173, 173]
2025-03-11 18:39:18.411840 test begin: paddle.broadcast_to(Tensor([8, 9561, 264, 113],"bool"), list[8,8,264,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9561, 264, 113],"bool"), list[8,8,264,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9561) at non-singleton dimension 1.  Target sizes: [8, 8, 264, 113].  Tensor sizes: [8, 9561, 264, 113]
2025-03-11 18:39:18.998390 test begin: paddle.broadcast_to(Tensor([8, 9597, 263, 113],"bool"), list[8,8,263,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9597, 263, 113],"bool"), list[8,8,263,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9597) at non-singleton dimension 1.  Target sizes: [8, 8, 263, 113].  Tensor sizes: [8, 9597, 263, 113]
2025-03-11 18:39:19.416735 test begin: paddle.broadcast_to(Tensor([8, 960313, 9, 33],"bool"), list[8,8,9,33,], )

[torch error] paddle.broadcast_to(Tensor([8, 960313, 9, 33],"bool"), list[8,8,9,33,], ) 
 The expanded size of the tensor (8) must match the existing size (960313) at non-singleton dimension 1.  Target sizes: [8, 8, 9, 33].  Tensor sizes: [8, 960313, 9, 33]
2025-03-11 18:39:19.904992 test begin: paddle.broadcast_to(Tensor([8, 9634, 262, 113],"bool"), list[8,8,262,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9634, 262, 113],"bool"), list[8,8,262,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9634) at non-singleton dimension 1.  Target sizes: [8, 8, 262, 113].  Tensor sizes: [8, 9634, 262, 113]
2025-03-11 18:39:20.492014 test begin: paddle.broadcast_to(Tensor([8, 9641, 172, 172],"bool"), list[8,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([8, 9641, 172, 172],"bool"), list[8,8,172,172,], ) 
 The expanded size of the tensor (8) must match the existing size (9641) at non-singleton dimension 1.  Target sizes: [8, 8, 172, 172].  Tensor sizes: [8, 9641, 172, 172]
2025-03-11 18:39:20.874182 test begin: paddle.broadcast_to(Tensor([8, 9671, 261, 113],"bool"), list[8,8,261,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9671, 261, 113],"bool"), list[8,8,261,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9671) at non-singleton dimension 1.  Target sizes: [8, 8, 261, 113].  Tensor sizes: [8, 9671, 261, 113]
2025-03-11 18:39:21.468610 test begin: paddle.broadcast_to(Tensor([8, 97078, 26, 113],"bool"), list[8,8,26,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 97078, 26, 113],"bool"), list[8,8,26,113,], ) 
 The expanded size of the tensor (8) must match the existing size (97078) at non-singleton dimension 1.  Target sizes: [8, 8, 26, 113].  Tensor sizes: [8, 97078, 26, 113]
2025-03-11 18:39:21.939739 test begin: paddle.broadcast_to(Tensor([8, 9708, 260, 113],"bool"), list[8,8,260,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9708, 260, 113],"bool"), list[8,8,260,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9708) at non-singleton dimension 1.  Target sizes: [8, 8, 260, 113].  Tensor sizes: [8, 9708, 260, 113]
2025-03-11 18:39:22.532668 test begin: paddle.broadcast_to(Tensor([8, 9746, 259, 113],"bool"), list[8,8,259,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9746, 259, 113],"bool"), list[8,8,259,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9746) at non-singleton dimension 1.  Target sizes: [8, 8, 259, 113].  Tensor sizes: [8, 9746, 259, 113]
2025-03-11 18:39:22.889581 test begin: paddle.broadcast_to(Tensor([8, 9754, 171, 171],"bool"), list[8,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([8, 9754, 171, 171],"bool"), list[8,8,171,171,], ) 
 The expanded size of the tensor (8) must match the existing size (9754) at non-singleton dimension 1.  Target sizes: [8, 8, 171, 171].  Tensor sizes: [8, 9754, 171, 171]
2025-03-11 18:39:23.370249 test begin: paddle.broadcast_to(Tensor([8, 97810, 54, 54],"bool"), list[8,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([8, 97810, 54, 54],"bool"), list[8,8,54,54,], ) 
 The expanded size of the tensor (8) must match the existing size (97810) at non-singleton dimension 1.  Target sizes: [8, 8, 54, 54].  Tensor sizes: [8, 97810, 54, 54]
2025-03-11 18:39:23.847637 test begin: paddle.broadcast_to(Tensor([8, 9783, 258, 113],"bool"), list[8,8,258,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9783, 258, 113],"bool"), list[8,8,258,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9783) at non-singleton dimension 1.  Target sizes: [8, 8, 258, 113].  Tensor sizes: [8, 9783, 258, 113]
2025-03-11 18:39:24.328425 test begin: paddle.broadcast_to(Tensor([8, 98214, 24, 121],"bool"), list[8,8,24,121,], )

[torch error] paddle.broadcast_to(Tensor([8, 98214, 24, 121],"bool"), list[8,8,24,121,], ) 
 The expanded size of the tensor (8) must match the existing size (98214) at non-singleton dimension 1.  Target sizes: [8, 8, 24, 121].  Tensor sizes: [8, 98214, 24, 121]
2025-03-11 18:39:24.810947 test begin: paddle.broadcast_to(Tensor([8, 9822, 257, 113],"bool"), list[8,8,257,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9822, 257, 113],"bool"), list[8,8,257,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9822) at non-singleton dimension 1.  Target sizes: [8, 8, 257, 113].  Tensor sizes: [8, 9822, 257, 113]
2025-03-11 18:39:25.288974 test begin: paddle.broadcast_to(Tensor([8, 9860, 256, 113],"bool"), list[8,8,256,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9860, 256, 113],"bool"), list[8,8,256,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9860) at non-singleton dimension 1.  Target sizes: [8, 8, 256, 113].  Tensor sizes: [8, 9860, 256, 113]
2025-03-11 18:39:25.824427 test begin: paddle.broadcast_to(Tensor([8, 986896, 17, 17],"bool"), list[8,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([8, 986896, 17, 17],"bool"), list[8,8,17,17,], ) 
 The expanded size of the tensor (8) must match the existing size (986896) at non-singleton dimension 1.  Target sizes: [8, 8, 17, 17].  Tensor sizes: [8, 986896, 17, 17]
2025-03-11 18:39:26.356466 test begin: paddle.broadcast_to(Tensor([8, 9869, 170, 170],"bool"), list[8,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([8, 9869, 170, 170],"bool"), list[8,8,170,170,], ) 
 The expanded size of the tensor (8) must match the existing size (9869) at non-singleton dimension 1.  Target sizes: [8, 8, 170, 170].  Tensor sizes: [8, 9869, 170, 170]
2025-03-11 18:39:26.843548 test begin: paddle.broadcast_to(Tensor([8, 9899, 255, 113],"bool"), list[8,8,255,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9899, 255, 113],"bool"), list[8,8,255,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9899) at non-singleton dimension 1.  Target sizes: [8, 8, 255, 113].  Tensor sizes: [8, 9899, 255, 113]
2025-03-11 18:39:27.322685 test begin: paddle.broadcast_to(Tensor([8, 9938, 254, 113],"bool"), list[8,8,254,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9938, 254, 113],"bool"), list[8,8,254,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9938) at non-singleton dimension 1.  Target sizes: [8, 8, 254, 113].  Tensor sizes: [8, 9938, 254, 113]
2025-03-11 18:39:27.805093 test begin: paddle.broadcast_to(Tensor([8, 9977, 253, 113],"bool"), list[8,8,253,113,], )

[torch error] paddle.broadcast_to(Tensor([8, 9977, 253, 113],"bool"), list[8,8,253,113,], ) 
 The expanded size of the tensor (8) must match the existing size (9977) at non-singleton dimension 1.  Target sizes: [8, 8, 253, 113].  Tensor sizes: [8, 9977, 253, 113]
2025-03-11 18:39:28.345239 test begin: paddle.broadcast_to(Tensor([8, 9987, 169, 169],"bool"), list[8,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([8, 9987, 169, 169],"bool"), list[8,8,169,169,], ) 
 The expanded size of the tensor (8) must match the existing size (9987) at non-singleton dimension 1.  Target sizes: [8, 8, 169, 169].  Tensor sizes: [8, 9987, 169, 169]
2025-03-11 18:39:28.878490 test begin: paddle.broadcast_to(Tensor([80, 28521268],"float32"), tuple(80,1000,), )

[torch error] paddle.broadcast_to(Tensor([80, 28521268],"float32"), tuple(80,1000,), ) 
 The expanded size of the tensor (1000) must match the existing size (28521268) at non-singleton dimension 1.  Target sizes: [80, 1000].  Tensor sizes: [80, 28521268]
2025-03-11 18:39:30.686618 test begin: paddle.broadcast_to(Tensor([80, 28521268],"int32"), tuple(80,1,), )

[torch error] paddle.broadcast_to(Tensor([80, 28521268],"int32"), tuple(80,1,), ) 
 The expanded size of the tensor (1) must match the existing size (28521268) at non-singleton dimension 1.  Target sizes: [80, 1].  Tensor sizes: [80, 28521268]
2025-03-11 18:40:11.188491 test begin: paddle.broadcast_to(Tensor([800597, 1, 50, 57],"bool"), list[10,8,50,57,], )

[torch error] paddle.broadcast_to(Tensor([800597, 1, 50, 57],"bool"), list[10,8,50,57,], ) 
 The expanded size of the tensor (10) must match the existing size (800597) at non-singleton dimension 0.  Target sizes: [10, 8, 50, 57].  Tensor sizes: [800597, 1, 50, 57]
2025-03-11 18:40:11.782943 test begin: paddle.broadcast_to(Tensor([800597, 1, 50, 57],"bool"), list[2,8,50,57,], )

[torch error] paddle.broadcast_to(Tensor([800597, 1, 50, 57],"bool"), list[2,8,50,57,], ) 
 The expanded size of the tensor (2) must match the existing size (800597) at non-singleton dimension 0.  Target sizes: [2, 8, 50, 57].  Tensor sizes: [800597, 1, 50, 57]
2025-03-11 18:40:12.161691 test begin: paddle.broadcast_to(Tensor([800597, 1, 50, 57],"bool"), list[6,8,50,57,], )

[torch error] paddle.broadcast_to(Tensor([800597, 1, 50, 57],"bool"), list[6,8,50,57,], ) 
 The expanded size of the tensor (6) must match the existing size (800597) at non-singleton dimension 0.  Target sizes: [6, 8, 50, 57].  Tensor sizes: [800597, 1, 50, 57]
2025-03-11 18:40:12.660282 test begin: paddle.broadcast_to(Tensor([8005970, 1, 5, 57],"bool"), list[10,8,5,57,], )

[torch error] paddle.broadcast_to(Tensor([8005970, 1, 5, 57],"bool"), list[10,8,5,57,], ) 
 The expanded size of the tensor (10) must match the existing size (8005970) at non-singleton dimension 0.  Target sizes: [10, 8, 5, 57].  Tensor sizes: [8005970, 1, 5, 57]
2025-03-11 18:40:13.156902 test begin: paddle.broadcast_to(Tensor([8005970, 1, 5, 57],"bool"), list[2,8,5,57,], )

[torch error] paddle.broadcast_to(Tensor([8005970, 1, 5, 57],"bool"), list[2,8,5,57,], ) 
 The expanded size of the tensor (2) must match the existing size (8005970) at non-singleton dimension 0.  Target sizes: [2, 8, 5, 57].  Tensor sizes: [8005970, 1, 5, 57]
2025-03-11 18:40:13.656443 test begin: paddle.broadcast_to(Tensor([8005970, 1, 5, 57],"bool"), list[6,8,5,57,], )

[torch error] paddle.broadcast_to(Tensor([8005970, 1, 5, 57],"bool"), list[6,8,5,57,], ) 
 The expanded size of the tensor (6) must match the existing size (8005970) at non-singleton dimension 0.  Target sizes: [6, 8, 5, 57].  Tensor sizes: [8005970, 1, 5, 57]
2025-03-11 18:40:14.177115 test begin: paddle.broadcast_to(Tensor([800878, 1, 37, 77],"bool"), list[4,8,37,77,], )

[torch error] paddle.broadcast_to(Tensor([800878, 1, 37, 77],"bool"), list[4,8,37,77,], ) 
 The expanded size of the tensor (4) must match the existing size (800878) at non-singleton dimension 0.  Target sizes: [4, 8, 37, 77].  Tensor sizes: [800878, 1, 37, 77]
2025-03-11 18:40:14.666617 test begin: paddle.broadcast_to(Tensor([800878, 1, 77, 37],"bool"), list[10,8,77,37,], )

[torch error] paddle.broadcast_to(Tensor([800878, 1, 77, 37],"bool"), list[10,8,77,37,], ) 
 The expanded size of the tensor (10) must match the existing size (800878) at non-singleton dimension 0.  Target sizes: [10, 8, 77, 37].  Tensor sizes: [800878, 1, 77, 37]
2025-03-11 18:40:15.152284 test begin: paddle.broadcast_to(Tensor([800878, 1, 77, 37],"bool"), list[4,8,77,37,], )

[torch error] paddle.broadcast_to(Tensor([800878, 1, 77, 37],"bool"), list[4,8,77,37,], ) 
 The expanded size of the tensor (4) must match the existing size (800878) at non-singleton dimension 0.  Target sizes: [4, 8, 77, 37].  Tensor sizes: [800878, 1, 77, 37]
2025-03-11 18:40:15.638893 test begin: paddle.broadcast_to(Tensor([80088, 1, 74, 385],"bool"), list[1,8,74,385,], )

[torch error] paddle.broadcast_to(Tensor([80088, 1, 74, 385],"bool"), list[1,8,74,385,], ) 
 The expanded size of the tensor (1) must match the existing size (80088) at non-singleton dimension 0.  Target sizes: [1, 8, 74, 385].  Tensor sizes: [80088, 1, 74, 385]
2025-03-11 18:40:16.118835 test begin: paddle.broadcast_to(Tensor([801160, 1, 32, 89],"bool"), list[10,8,32,89,], )

[torch error] paddle.broadcast_to(Tensor([801160, 1, 32, 89],"bool"), list[10,8,32,89,], ) 
 The expanded size of the tensor (10) must match the existing size (801160) at non-singleton dimension 0.  Target sizes: [10, 8, 32, 89].  Tensor sizes: [801160, 1, 32, 89]
2025-03-11 18:40:16.597341 test begin: paddle.broadcast_to(Tensor([801160, 1, 32, 89],"bool"), list[9,8,32,89,], )

[torch error] paddle.broadcast_to(Tensor([801160, 1, 32, 89],"bool"), list[9,8,32,89,], ) 
 The expanded size of the tensor (9) must match the existing size (801160) at non-singleton dimension 0.  Target sizes: [9, 8, 32, 89].  Tensor sizes: [801160, 1, 32, 89]
2025-03-11 18:40:17.182518 test begin: paddle.broadcast_to(Tensor([80128, 1, 252, 113],"bool"), list[8,8,252,113,], )

[torch error] paddle.broadcast_to(Tensor([80128, 1, 252, 113],"bool"), list[8,8,252,113,], ) 
 The expanded size of the tensor (8) must match the existing size (80128) at non-singleton dimension 0.  Target sizes: [8, 8, 252, 113].  Tensor sizes: [80128, 1, 252, 113]
2025-03-11 18:40:17.722803 test begin: paddle.broadcast_to(Tensor([801441, 1, 39, 73],"bool"), list[1,8,39,73,], )

[torch error] paddle.broadcast_to(Tensor([801441, 1, 39, 73],"bool"), list[1,8,39,73,], ) 
 The expanded size of the tensor (1) must match the existing size (801441) at non-singleton dimension 0.  Target sizes: [1, 8, 39, 73].  Tensor sizes: [801441, 1, 39, 73]
2025-03-11 18:40:18.084868 test begin: paddle.broadcast_to(Tensor([801441, 1, 39, 73],"bool"), list[10,8,39,73,], )

[torch error] paddle.broadcast_to(Tensor([801441, 1, 39, 73],"bool"), list[10,8,39,73,], ) 
 The expanded size of the tensor (10) must match the existing size (801441) at non-singleton dimension 0.  Target sizes: [10, 8, 39, 73].  Tensor sizes: [801441, 1, 39, 73]
2025-03-11 18:40:18.577768 test begin: paddle.broadcast_to(Tensor([80204, 1, 109, 261],"bool"), list[1,8,109,261,], )

[torch error] paddle.broadcast_to(Tensor([80204, 1, 109, 261],"bool"), list[1,8,109,261,], ) 
 The expanded size of the tensor (1) must match the existing size (80204) at non-singleton dimension 0.  Target sizes: [1, 8, 109, 261].  Tensor sizes: [80204, 1, 109, 261]
2025-03-11 18:40:19.068560 test begin: paddle.broadcast_to(Tensor([80235, 1, 118, 241],"bool"), list[1,8,118,241,], )

[torch error] paddle.broadcast_to(Tensor([80235, 1, 118, 241],"bool"), list[1,8,118,241,], ) 
 The expanded size of the tensor (1) must match the existing size (80235) at non-singleton dimension 0.  Target sizes: [1, 8, 118, 241].  Tensor sizes: [80235, 1, 118, 241]
2025-03-11 18:40:19.548050 test begin: paddle.broadcast_to(Tensor([80283, 1, 293, 97],"bool"), list[30,8,293,97,], )

[torch error] paddle.broadcast_to(Tensor([80283, 1, 293, 97],"bool"), list[30,8,293,97,], ) 
 The expanded size of the tensor (30) must match the existing size (80283) at non-singleton dimension 0.  Target sizes: [30, 8, 293, 97].  Tensor sizes: [80283, 1, 293, 97]
2025-03-11 18:40:20.074708 test begin: paddle.broadcast_to(Tensor([802851, 1, 58, 49],"bool"), list[10,8,58,49,], )

[torch error] paddle.broadcast_to(Tensor([802851, 1, 58, 49],"bool"), list[10,8,58,49,], ) 
 The expanded size of the tensor (10) must match the existing size (802851) at non-singleton dimension 0.  Target sizes: [10, 8, 58, 49].  Tensor sizes: [802851, 1, 58, 49]
2025-03-11 18:40:20.563091 test begin: paddle.broadcast_to(Tensor([80294, 1, 157, 181],"bool"), list[2,8,157,181,], )

[torch error] paddle.broadcast_to(Tensor([80294, 1, 157, 181],"bool"), list[2,8,157,181,], ) 
 The expanded size of the tensor (2) must match the existing size (80294) at non-singleton dimension 0.  Target sizes: [2, 8, 157, 181].  Tensor sizes: [80294, 1, 157, 181]
2025-03-11 18:40:21.053086 test begin: paddle.broadcast_to(Tensor([8034160, 284, 1],"bool"), list[2,284,8400,], )

[torch error] paddle.broadcast_to(Tensor([8034160, 284, 1],"bool"), list[2,284,8400,], ) 
 The expanded size of the tensor (2) must match the existing size (8034160) at non-singleton dimension 0.  Target sizes: [2, 284, 8400].  Tensor sizes: [8034160, 284, 1]
2025-03-11 18:40:21.641688 test begin: paddle.broadcast_to(Tensor([80353, 1, 124, 229],"bool"), list[1,8,124,229,], )

[torch error] paddle.broadcast_to(Tensor([80353, 1, 124, 229],"bool"), list[1,8,124,229,], ) 
 The expanded size of the tensor (1) must match the existing size (80353) at non-singleton dimension 0.  Target sizes: [1, 8, 124, 229].  Tensor sizes: [80353, 1, 124, 229]
2025-03-11 18:40:22.133568 test begin: paddle.broadcast_to(Tensor([80365, 1, 168, 169],"bool"), list[1,8,168,169,], )

[torch error] paddle.broadcast_to(Tensor([80365, 1, 168, 169],"bool"), list[1,8,168,169,], ) 
 The expanded size of the tensor (1) must match the existing size (80365) at non-singleton dimension 0.  Target sizes: [1, 8, 168, 169].  Tensor sizes: [80365, 1, 168, 169]
2025-03-11 18:40:22.712885 test begin: paddle.broadcast_to(Tensor([803983, 1, 22, 129],"bool"), list[10,8,22,129,], )

[torch error] paddle.broadcast_to(Tensor([803983, 1, 22, 129],"bool"), list[10,8,22,129,], ) 
 The expanded size of the tensor (10) must match the existing size (803983) at non-singleton dimension 0.  Target sizes: [10, 8, 22, 129].  Tensor sizes: [803983, 1, 22, 129]
2025-03-11 18:40:23.200939 test begin: paddle.broadcast_to(Tensor([803983, 1, 22, 129],"bool"), list[2,8,22,129,], )

[torch error] paddle.broadcast_to(Tensor([803983, 1, 22, 129],"bool"), list[2,8,22,129,], ) 
 The expanded size of the tensor (2) must match the existing size (803983) at non-singleton dimension 0.  Target sizes: [2, 8, 22, 129].  Tensor sizes: [803983, 1, 22, 129]
2025-03-11 18:40:23.733757 test begin: paddle.broadcast_to(Tensor([803983, 1, 86, 33],"bool"), list[10,8,86,33,], )

[torch error] paddle.broadcast_to(Tensor([803983, 1, 86, 33],"bool"), list[10,8,86,33,], ) 
 The expanded size of the tensor (10) must match the existing size (803983) at non-singleton dimension 0.  Target sizes: [10, 8, 86, 33].  Tensor sizes: [803983, 1, 86, 33]
2025-03-11 18:40:24.343110 test begin: paddle.broadcast_to(Tensor([803983, 1, 86, 33],"bool"), list[30,8,86,33,], )

[torch error] paddle.broadcast_to(Tensor([803983, 1, 86, 33],"bool"), list[30,8,86,33,], ) 
 The expanded size of the tensor (30) must match the existing size (803983) at non-singleton dimension 0.  Target sizes: [30, 8, 86, 33].  Tensor sizes: [803983, 1, 86, 33]
2025-03-11 18:40:24.698664 test begin: paddle.broadcast_to(Tensor([80447, 1, 251, 113],"bool"), list[8,8,251,113,], )

[torch error] paddle.broadcast_to(Tensor([80447, 1, 251, 113],"bool"), list[8,8,251,113,], ) 
 The expanded size of the tensor (8) must match the existing size (80447) at non-singleton dimension 0.  Target sizes: [8, 8, 251, 113].  Tensor sizes: [80447, 1, 251, 113]
2025-03-11 18:40:25.320263 test begin: paddle.broadcast_to(Tensor([804833, 1, 27, 105],"bool"), list[10,8,27,105,], )

[torch error] paddle.broadcast_to(Tensor([804833, 1, 27, 105],"bool"), list[10,8,27,105,], ) 
 The expanded size of the tensor (10) must match the existing size (804833) at non-singleton dimension 0.  Target sizes: [10, 8, 27, 105].  Tensor sizes: [804833, 1, 27, 105]
2025-03-11 18:40:25.944151 test begin: paddle.broadcast_to(Tensor([804833, 1, 27, 105],"bool"), list[3,8,27,105,], )

[torch error] paddle.broadcast_to(Tensor([804833, 1, 27, 105],"bool"), list[3,8,27,105,], ) 
 The expanded size of the tensor (3) must match the existing size (804833) at non-singleton dimension 0.  Target sizes: [3, 8, 27, 105].  Tensor sizes: [804833, 1, 27, 105]
2025-03-11 18:40:26.540619 test begin: paddle.broadcast_to(Tensor([804833, 1, 35, 81],"bool"), list[10,8,35,81,], )

[torch error] paddle.broadcast_to(Tensor([804833, 1, 35, 81],"bool"), list[10,8,35,81,], ) 
 The expanded size of the tensor (10) must match the existing size (804833) at non-singleton dimension 0.  Target sizes: [10, 8, 35, 81].  Tensor sizes: [804833, 1, 35, 81]
2025-03-11 18:40:26.917101 test begin: paddle.broadcast_to(Tensor([804833, 1, 35, 81],"bool"), list[2,8,35,81,], )

[torch error] paddle.broadcast_to(Tensor([804833, 1, 35, 81],"bool"), list[2,8,35,81,], ) 
 The expanded size of the tensor (2) must match the existing size (804833) at non-singleton dimension 0.  Target sizes: [2, 8, 35, 81].  Tensor sizes: [804833, 1, 35, 81]
2025-03-11 18:40:27.505223 test begin: paddle.broadcast_to(Tensor([804833, 1, 63, 45],"bool"), list[6,8,63,45,], )

[torch error] paddle.broadcast_to(Tensor([804833, 1, 63, 45],"bool"), list[6,8,63,45,], ) 
 The expanded size of the tensor (6) must match the existing size (804833) at non-singleton dimension 0.  Target sizes: [6, 8, 63, 45].  Tensor sizes: [804833, 1, 63, 45]
2025-03-11 18:40:28.108535 test begin: paddle.broadcast_to(Tensor([805117, 1, 26, 109],"bool"), list[1,8,26,109,], )

[torch error] paddle.broadcast_to(Tensor([805117, 1, 26, 109],"bool"), list[1,8,26,109,], ) 
 The expanded size of the tensor (1) must match the existing size (805117) at non-singleton dimension 0.  Target sizes: [1, 8, 26, 109].  Tensor sizes: [805117, 1, 26, 109]
2025-03-11 18:40:28.480913 test begin: paddle.broadcast_to(Tensor([806540, 1, 41, 69],"bool"), list[1,8,41,69,], )

[torch error] paddle.broadcast_to(Tensor([806540, 1, 41, 69],"bool"), list[1,8,41,69,], ) 
 The expanded size of the tensor (1) must match the existing size (806540) at non-singleton dimension 0.  Target sizes: [1, 8, 41, 69].  Tensor sizes: [806540, 1, 41, 69]
2025-03-11 18:40:29.085245 test begin: paddle.broadcast_to(Tensor([806540, 1, 69, 41],"bool"), list[10,8,69,41,], )

[torch error] paddle.broadcast_to(Tensor([806540, 1, 69, 41],"bool"), list[10,8,69,41,], ) 
 The expanded size of the tensor (10) must match the existing size (806540) at non-singleton dimension 0.  Target sizes: [10, 8, 69, 41].  Tensor sizes: [806540, 1, 69, 41]
2025-03-11 18:40:29.474344 test begin: paddle.broadcast_to(Tensor([806540, 1, 69, 41],"bool"), list[30,8,69,41,], )

[torch error] paddle.broadcast_to(Tensor([806540, 1, 69, 41],"bool"), list[30,8,69,41,], ) 
 The expanded size of the tensor (30) must match the existing size (806540) at non-singleton dimension 0.  Target sizes: [30, 8, 69, 41].  Tensor sizes: [806540, 1, 69, 41]
2025-03-11 18:40:30.010001 test begin: paddle.broadcast_to(Tensor([807397, 1, 18, 157],"bool"), list[1,8,18,157,], )

[torch error] paddle.broadcast_to(Tensor([807397, 1, 18, 157],"bool"), list[1,8,18,157,], ) 
 The expanded size of the tensor (1) must match the existing size (807397) at non-singleton dimension 0.  Target sizes: [1, 8, 18, 157].  Tensor sizes: [807397, 1, 18, 157]
2025-03-11 18:40:30.523178 test begin: paddle.broadcast_to(Tensor([807682, 1, 25, 113],"bool"), list[1,8,25,113,], )

[torch error] paddle.broadcast_to(Tensor([807682, 1, 25, 113],"bool"), list[1,8,25,113,], ) 
 The expanded size of the tensor (1) must match the existing size (807682) at non-singleton dimension 0.  Target sizes: [1, 8, 25, 113].  Tensor sizes: [807682, 1, 25, 113]
2025-03-11 18:40:31.067271 test begin: paddle.broadcast_to(Tensor([807682, 1, 25, 113],"bool"), list[8,8,25,113,], )

[torch error] paddle.broadcast_to(Tensor([807682, 1, 25, 113],"bool"), list[8,8,25,113,], ) 
 The expanded size of the tensor (8) must match the existing size (807682) at non-singleton dimension 0.  Target sizes: [8, 8, 25, 113].  Tensor sizes: [807682, 1, 25, 113]
2025-03-11 18:40:31.573864 test begin: paddle.broadcast_to(Tensor([80769, 1, 250, 113],"bool"), list[8,8,250,113,], )

[torch error] paddle.broadcast_to(Tensor([80769, 1, 250, 113],"bool"), list[8,8,250,113,], ) 
 The expanded size of the tensor (8) must match the existing size (80769) at non-singleton dimension 0.  Target sizes: [8, 8, 250, 113].  Tensor sizes: [80769, 1, 250, 113]
2025-03-11 18:40:32.121145 test begin: paddle.broadcast_to(Tensor([80809, 1, 156, 181],"bool"), list[2,8,156,181,], )

[torch error] paddle.broadcast_to(Tensor([80809, 1, 156, 181],"bool"), list[2,8,156,181,], ) 
 The expanded size of the tensor (2) must match the existing size (80809) at non-singleton dimension 0.  Target sizes: [2, 8, 156, 181].  Tensor sizes: [80809, 1, 156, 181]
2025-03-11 18:40:32.694454 test begin: paddle.broadcast_to(Tensor([80843, 1, 168, 168],"bool"), list[1,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([80843, 1, 168, 168],"bool"), list[1,8,168,168,], ) 
 The expanded size of the tensor (1) must match the existing size (80843) at non-singleton dimension 0.  Target sizes: [1, 8, 168, 168].  Tensor sizes: [80843, 1, 168, 168]
2025-03-11 18:40:33.167566 test begin: paddle.broadcast_to(Tensor([80843, 1, 168, 168],"bool"), list[10,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([80843, 1, 168, 168],"bool"), list[10,8,168,168,], ) 
 The expanded size of the tensor (10) must match the existing size (80843) at non-singleton dimension 0.  Target sizes: [10, 8, 168, 168].  Tensor sizes: [80843, 1, 168, 168]
2025-03-11 18:40:33.762246 test begin: paddle.broadcast_to(Tensor([80843, 1, 168, 168],"bool"), list[2,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([80843, 1, 168, 168],"bool"), list[2,8,168,168,], ) 
 The expanded size of the tensor (2) must match the existing size (80843) at non-singleton dimension 0.  Target sizes: [2, 8, 168, 168].  Tensor sizes: [80843, 1, 168, 168]
2025-03-11 18:40:34.270360 test begin: paddle.broadcast_to(Tensor([80843, 1, 168, 168],"bool"), list[4,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([80843, 1, 168, 168],"bool"), list[4,8,168,168,], ) 
 The expanded size of the tensor (4) must match the existing size (80843) at non-singleton dimension 0.  Target sizes: [4, 8, 168, 168].  Tensor sizes: [80843, 1, 168, 168]
2025-03-11 18:40:34.884927 test begin: paddle.broadcast_to(Tensor([80843, 1, 168, 168],"bool"), list[6,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([80843, 1, 168, 168],"bool"), list[6,8,168,168,], ) 
 The expanded size of the tensor (6) must match the existing size (80843) at non-singleton dimension 0.  Target sizes: [6, 8, 168, 168].  Tensor sizes: [80843, 1, 168, 168]
2025-03-11 18:40:35.240771 test begin: paddle.broadcast_to(Tensor([80843, 1, 168, 168],"bool"), list[7,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([80843, 1, 168, 168],"bool"), list[7,8,168,168,], ) 
 The expanded size of the tensor (7) must match the existing size (80843) at non-singleton dimension 0.  Target sizes: [7, 8, 168, 168].  Tensor sizes: [80843, 1, 168, 168]
2025-03-11 18:40:35.833355 test begin: paddle.broadcast_to(Tensor([80843, 1, 168, 168],"bool"), list[8,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([80843, 1, 168, 168],"bool"), list[8,8,168,168,], ) 
 The expanded size of the tensor (8) must match the existing size (80843) at non-singleton dimension 0.  Target sizes: [8, 8, 168, 168].  Tensor sizes: [80843, 1, 168, 168]
2025-03-11 18:40:36.192493 test begin: paddle.broadcast_to(Tensor([80846, 1, 167, 169],"bool"), list[1,8,167,169,], )

[torch error] paddle.broadcast_to(Tensor([80846, 1, 167, 169],"bool"), list[1,8,167,169,], ) 
 The expanded size of the tensor (1) must match the existing size (80846) at non-singleton dimension 0.  Target sizes: [1, 8, 167, 169].  Tensor sizes: [80846, 1, 167, 169]
2025-03-11 18:40:36.785021 test begin: paddle.broadcast_to(Tensor([808828, 1, 13, 217],"bool"), list[1,8,13,217,], )

[torch error] paddle.broadcast_to(Tensor([808828, 1, 13, 217],"bool"), list[1,8,13,217,], ) 
 The expanded size of the tensor (1) must match the existing size (808828) at non-singleton dimension 0.  Target sizes: [1, 8, 13, 217].  Tensor sizes: [808828, 1, 13, 217]
2025-03-11 18:40:37.144084 test begin: paddle.broadcast_to(Tensor([80921, 1, 117, 241],"bool"), list[1,8,117,241,], )

[torch error] paddle.broadcast_to(Tensor([80921, 1, 117, 241],"bool"), list[1,8,117,241,], ) 
 The expanded size of the tensor (1) must match the existing size (80921) at non-singleton dimension 0.  Target sizes: [1, 8, 117, 241].  Tensor sizes: [80921, 1, 117, 241]
2025-03-11 18:40:37.638101 test begin: paddle.broadcast_to(Tensor([80946, 1, 108, 261],"bool"), list[1,8,108,261,], )

[torch error] paddle.broadcast_to(Tensor([80946, 1, 108, 261],"bool"), list[1,8,108,261,], ) 
 The expanded size of the tensor (1) must match the existing size (80946) at non-singleton dimension 0.  Target sizes: [1, 8, 108, 261].  Tensor sizes: [80946, 1, 108, 261]
2025-03-11 18:40:38.118072 test begin: paddle.broadcast_to(Tensor([81007, 1, 123, 229],"bool"), list[1,8,123,229,], )

[torch error] paddle.broadcast_to(Tensor([81007, 1, 123, 229],"bool"), list[1,8,123,229,], ) 
 The expanded size of the tensor (1) must match the existing size (81007) at non-singleton dimension 0.  Target sizes: [1, 8, 123, 229].  Tensor sizes: [81007, 1, 123, 229]
2025-03-11 18:40:38.606811 test begin: paddle.broadcast_to(Tensor([81093, 1, 249, 113],"bool"), list[8,8,249,113,], )

[torch error] paddle.broadcast_to(Tensor([81093, 1, 249, 113],"bool"), list[8,8,249,113,], ) 
 The expanded size of the tensor (8) must match the existing size (81093) at non-singleton dimension 0.  Target sizes: [8, 8, 249, 113].  Tensor sizes: [81093, 1, 249, 113]
2025-03-11 18:40:39.097434 test begin: paddle.broadcast_to(Tensor([811128, 1, 29, 97],"bool"), list[1,8,29,97,], )

[torch error] paddle.broadcast_to(Tensor([811128, 1, 29, 97],"bool"), list[1,8,29,97,], ) 
 The expanded size of the tensor (1) must match the existing size (811128) at non-singleton dimension 0.  Target sizes: [1, 8, 29, 97].  Tensor sizes: [811128, 1, 29, 97]
2025-03-11 18:40:39.595131 test begin: paddle.broadcast_to(Tensor([811128, 1, 29, 97],"bool"), list[10,8,29,97,], )

[torch error] paddle.broadcast_to(Tensor([811128, 1, 29, 97],"bool"), list[10,8,29,97,], ) 
 The expanded size of the tensor (10) must match the existing size (811128) at non-singleton dimension 0.  Target sizes: [10, 8, 29, 97].  Tensor sizes: [811128, 1, 29, 97]
2025-03-11 18:40:40.084018 test begin: paddle.broadcast_to(Tensor([811128, 1, 29, 97],"bool"), list[6,8,29,97,], )

[torch error] paddle.broadcast_to(Tensor([811128, 1, 29, 97],"bool"), list[6,8,29,97,], ) 
 The expanded size of the tensor (6) must match the existing size (811128) at non-singleton dimension 0.  Target sizes: [6, 8, 29, 97].  Tensor sizes: [811128, 1, 29, 97]
2025-03-11 18:40:40.578330 test begin: paddle.broadcast_to(Tensor([811416, 1, 76, 37],"bool"), list[10,8,76,37,], )

[torch error] paddle.broadcast_to(Tensor([811416, 1, 76, 37],"bool"), list[10,8,76,37,], ) 
 The expanded size of the tensor (10) must match the existing size (811416) at non-singleton dimension 0.  Target sizes: [10, 8, 76, 37].  Tensor sizes: [811416, 1, 76, 37]
2025-03-11 18:40:41.107130 test begin: paddle.broadcast_to(Tensor([811416, 1, 76, 37],"bool"), list[4,8,76,37,], )

[torch error] paddle.broadcast_to(Tensor([811416, 1, 76, 37],"bool"), list[4,8,76,37,], ) 
 The expanded size of the tensor (4) must match the existing size (811416) at non-singleton dimension 0.  Target sizes: [4, 8, 76, 37].  Tensor sizes: [811416, 1, 76, 37]
2025-03-11 18:40:41.711108 test begin: paddle.broadcast_to(Tensor([81185, 1, 73, 385],"bool"), list[1,8,73,385,], )

[torch error] paddle.broadcast_to(Tensor([81185, 1, 73, 385],"bool"), list[1,8,73,385,], ) 
 The expanded size of the tensor (1) must match the existing size (81185) at non-singleton dimension 0.  Target sizes: [1, 8, 73, 385].  Tensor sizes: [81185, 1, 73, 385]
2025-03-11 18:40:42.240975 test begin: paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[1,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[1,8,53,53,], ) 
 The expanded size of the tensor (1) must match the existing size (812283) at non-singleton dimension 0.  Target sizes: [1, 8, 53, 53].  Tensor sizes: [812283, 1, 53, 53]
2025-03-11 18:40:42.616348 test begin: paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[10,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[10,8,53,53,], ) 
 The expanded size of the tensor (10) must match the existing size (812283) at non-singleton dimension 0.  Target sizes: [10, 8, 53, 53].  Tensor sizes: [812283, 1, 53, 53]
2025-03-11 18:40:43.221303 test begin: paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[2,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[2,8,53,53,], ) 
 The expanded size of the tensor (2) must match the existing size (812283) at non-singleton dimension 0.  Target sizes: [2, 8, 53, 53].  Tensor sizes: [812283, 1, 53, 53]
2025-03-11 18:40:43.774475 test begin: paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[3,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[3,8,53,53,], ) 
 The expanded size of the tensor (3) must match the existing size (812283) at non-singleton dimension 0.  Target sizes: [3, 8, 53, 53].  Tensor sizes: [812283, 1, 53, 53]
2025-03-11 18:40:44.273247 test begin: paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[30,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[30,8,53,53,], ) 
 The expanded size of the tensor (30) must match the existing size (812283) at non-singleton dimension 0.  Target sizes: [30, 8, 53, 53].  Tensor sizes: [812283, 1, 53, 53]
2025-03-11 18:40:44.774481 test begin: paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[4,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[4,8,53,53,], ) 
 The expanded size of the tensor (4) must match the existing size (812283) at non-singleton dimension 0.  Target sizes: [4, 8, 53, 53].  Tensor sizes: [812283, 1, 53, 53]
2025-03-11 18:40:45.280336 test begin: paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[5,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[5,8,53,53,], ) 
 The expanded size of the tensor (5) must match the existing size (812283) at non-singleton dimension 0.  Target sizes: [5, 8, 53, 53].  Tensor sizes: [812283, 1, 53, 53]
2025-03-11 18:40:45.875519 test begin: paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[6,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[6,8,53,53,], ) 
 The expanded size of the tensor (6) must match the existing size (812283) at non-singleton dimension 0.  Target sizes: [6, 8, 53, 53].  Tensor sizes: [812283, 1, 53, 53]
2025-03-11 18:40:46.242987 test begin: paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[7,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[7,8,53,53,], ) 
 The expanded size of the tensor (7) must match the existing size (812283) at non-singleton dimension 0.  Target sizes: [7, 8, 53, 53].  Tensor sizes: [812283, 1, 53, 53]
2025-03-11 18:40:46.737671 test begin: paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[8,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[8,8,53,53,], ) 
 The expanded size of the tensor (8) must match the existing size (812283) at non-singleton dimension 0.  Target sizes: [8, 8, 53, 53].  Tensor sizes: [812283, 1, 53, 53]
2025-03-11 18:40:47.286970 test begin: paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[9,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([812283, 1, 53, 53],"bool"), list[9,8,53,53,], ) 
 The expanded size of the tensor (9) must match the existing size (812283) at non-singleton dimension 0.  Target sizes: [9, 8, 53, 53].  Tensor sizes: [812283, 1, 53, 53]
2025-03-11 18:40:47.841437 test begin: paddle.broadcast_to(Tensor([813151, 1, 46, 61],"bool"), list[1,8,46,61,], )

[torch error] paddle.broadcast_to(Tensor([813151, 1, 46, 61],"bool"), list[1,8,46,61,], ) 
 The expanded size of the tensor (1) must match the existing size (813151) at non-singleton dimension 0.  Target sizes: [1, 8, 46, 61].  Tensor sizes: [813151, 1, 46, 61]
2025-03-11 18:40:48.388917 test begin: paddle.broadcast_to(Tensor([813151, 1, 46, 61],"bool"), list[4,8,46,61,], )

2025-03-11 18:40:58.449338 test begin: paddle.reshape(Tensor([92, 200, 233423],"float16"), shape=tuple(92,-1,), )

W0311 18:42:37.797968 108810 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 18:42:37.799309 108810 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7fb40da6caf0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-11 18:51:07.487367 test begin: paddle.reshape(Tensor([92, 91181, 272],"float32"), shape=tuple(92,-1,), )

W0311 18:52:32.963048 114469 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 18:52:32.964200 114469 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.reshape(Tensor([92, 91181, 272],"float32"), shape=tuple(92,-1,), )
2025-03-11 18:54:50.990385 test begin: paddle.reshape(Tensor([92843, 96, 16, 16],"float32"), list[24,96,-1,], )

[torch error] paddle.reshape(Tensor([92843, 96, 16, 16],"float32"), list[24,96,-1,], ) 
 shape '[24, 96, -1]' is invalid for input of size 2281709568
2025-03-11 18:54:55.274561 test begin: paddle.reshape(Tensor([9313067, 5, 1, 7, 7],"float32"), list[8,5,7,7,], )

[torch error] paddle.reshape(Tensor([9313067, 5, 1, 7, 7],"float32"), list[8,5,7,7,], ) 
 shape '[8, 5, 7, 7]' is invalid for input of size 2281701415
2025-03-11 18:54:58.796514 test begin: paddle.reshape(Tensor([9313067, 5, 7, 7],"bool"), list[-1,1,], )

[Pass] paddle.reshape(Tensor([9313067, 5, 7, 7],"bool"), list[-1,1,], )
2025-03-11 18:56:37.950182 test begin: paddle.reshape(Tensor([9313067, 5, 7, 7],"bool"), list[-1,], )

[Pass] paddle.reshape(Tensor([9313067, 5, 7, 7],"bool"), list[-1,], )
2025-03-11 18:57:11.992347 test begin: paddle.reshape(Tensor([9313067, 5, 7, 7],"float32"), list[8,-1,], )

[torch error] paddle.reshape(Tensor([9313067, 5, 7, 7],"float32"), list[8,-1,], ) 
 shape '[8, -1]' is invalid for input of size 2281701415
2025-03-11 18:57:16.165085 test begin: paddle.reshape(Tensor([95070891, 1, 24],"float32"), list[-1,24,], )

[Pass] paddle.reshape(Tensor([95070891, 1, 24],"float32"), list[-1,24,], )
2025-03-11 19:00:32.874771 test begin: paddle.reshape(Tensor([95070891, 4, 3, 2],"float32"), list[13,4,2,3,], )

[torch error] paddle.reshape(Tensor([95070891, 4, 3, 2],"float32"), list[13,4,2,3,], ) 
 shape '[13, 4, 2, 3]' is invalid for input of size 2281701384
2025-03-11 19:00:36.879134 test begin: paddle.reshape(Tensor([95070891, 4, 6],"float32"), shape=list[8,6,], )

[torch error] paddle.reshape(Tensor([95070891, 4, 6],"float32"), shape=list[8,6,], ) 
 shape '[8, 6]' is invalid for input of size 2281701384
2025-03-11 19:00:38.932437 test begin: paddle.reshape(Tensor([950709, 12, 2, 10, 10],"float32"), shape=list[1,24,10,10,], )

[torch error] paddle.reshape(Tensor([950709, 12, 2, 10, 10],"float32"), shape=list[1,24,10,10,], ) 
 shape '[1, 24, 10, 10]' is invalid for input of size 2281701600
2025-03-11 19:00:40.976156 test begin: paddle.reshape(Tensor([950709, 24, 10, 10],"float32"), shape=list[1,2,12,10,10,], )

[torch error] paddle.reshape(Tensor([950709, 24, 10, 10],"float32"), shape=list[1,2,12,10,10,], ) 
 shape '[1, 2, 12, 10, 10]' is invalid for input of size 2281701600
2025-03-11 19:00:42.696734 test begin: paddle.reshape(Tensor([9507090, 4, 4, 15],"float32"), list[13,4,15,4,], )

[torch error] paddle.reshape(Tensor([9507090, 4, 4, 15],"float32"), list[13,4,15,4,], ) 
 shape '[13, 4, 15, 4]' is invalid for input of size 2281701600
2025-03-11 19:00:45.054602 test begin: paddle.reshape(Tensor([9586981, 14, 32],"float16"), shape=list[7,14,4,8,], )

[torch error] paddle.reshape(Tensor([9586981, 14, 32],"float16"), shape=list[7,14,4,8,], ) 
 shape '[7, 14, 4, 8]' is invalid for input of size 4294967488
2025-03-11 19:02:04.077751 test begin: paddle.reshape(Tensor([96, 164483, 272],"float16"), shape=tuple(96,-1,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f8ea4b1d8b0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-11 19:12:12.378524 test begin: paddle.reshape(Tensor([96, 200, 118839],"float32"), shape=tuple(96,-1,), )

2025-03-11 19:13:41.073048 test begin: paddle.reshape(Tensor([96, 200, 223697],"float16"), shape=tuple(96,-1,), )

W0311 19:15:34.040336 146185 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 19:15:34.042618 146185 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7fd27c5b3bb0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-11 19:23:48.328299 test begin: paddle.reshape(Tensor([96, 87382, 272],"float32"), shape=tuple(96,-1,), )

W0311 19:25:11.473155 151788 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 19:25:11.474565 151788 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.reshape(Tensor([96, 87382, 272],"float32"), shape=tuple(96,-1,), )
2025-03-11 19:27:40.393974 test begin: paddle.reshape(x=Tensor([1, 138120, 16520],"float32"), shape=tuple(-1,), )

[Pass] paddle.reshape(x=Tensor([1, 138120, 16520],"float32"), shape=tuple(-1,), )
2025-03-11 19:30:33.789785 test begin: paddle.reshape(x=Tensor([1, 138120, 16520],"float32"), shape=tuple(-1,4,), )

[Pass] paddle.reshape(x=Tensor([1, 138120, 16520],"float32"), shape=tuple(-1,4,), )
2025-03-11 19:33:28.615951 test begin: paddle.reshape(x=Tensor([1, 153450, 14870],"float32"), shape=tuple(-1,), )

[Pass] paddle.reshape(x=Tensor([1, 153450, 14870],"float32"), shape=tuple(-1,), )
2025-03-11 19:36:24.136339 test begin: paddle.reshape(x=Tensor([1, 153450, 14870],"float32"), shape=tuple(-1,4,), )

[Pass] paddle.reshape(x=Tensor([1, 153450, 14870],"float32"), shape=tuple(-1,4,), )
2025-03-11 19:39:18.803929 test begin: paddle.reshape(x=Tensor([1, 2281701379, 1],"float32"), shape=tuple(-1,), )

[Pass] paddle.reshape(x=Tensor([1, 2281701379, 1],"float32"), shape=tuple(-1,), )
2025-03-11 19:42:12.988237 test begin: paddle.reshape(x=Tensor([1, 570425345, 4],"float32"), shape=tuple(-1,4,), )

[Pass] paddle.reshape(x=Tensor([1, 570425345, 4],"float32"), shape=tuple(-1,4,), )
2025-03-11 19:44:51.063774 test begin: paddle.reshape(x=Tensor([10, 228170138],"float32"), shape=list[10,], )

[torch error] paddle.reshape(x=Tensor([10, 228170138],"float32"), shape=list[10,], ) 
 shape '[10]' is invalid for input of size 2281701380
2025-03-11 19:44:55.122448 test begin: paddle.reshape(x=Tensor([10, 228170138],"float32"), shape=list[100,], )

[torch error] paddle.reshape(x=Tensor([10, 228170138],"float32"), shape=list[100,], ) 
 shape '[100]' is invalid for input of size 2281701380
2025-03-11 19:44:56.750194 test begin: paddle.reshape(x=Tensor([10, 228170138],"float32"), shape=list[80,], )

[torch error] paddle.reshape(x=Tensor([10, 228170138],"float32"), shape=list[80,], ) 
 shape '[80]' is invalid for input of size 2281701380
2025-03-11 19:44:58.328053 test begin: paddle.reshape(x=Tensor([100357, 232, 2, 7, 7],"float32"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([100357, 232, 2, 7, 7],"float32"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 2281716752
2025-03-11 19:44:59.548153 test begin: paddle.reshape(x=Tensor([100357, 232, 2, 7, 7],"float32"), shape=list[512,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([100357, 232, 2, 7, 7],"float32"), shape=list[512,464,7,7,], ) 
 shape '[512, 464, 7, 7]' is invalid for input of size 2281716752
2025-03-11 19:45:00.682601 test begin: paddle.reshape(x=Tensor([100357, 464, 7, 7],"float32"), shape=list[1536,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([100357, 464, 7, 7],"float32"), shape=list[1536,2,232,7,7,], ) 
 shape '[1536, 2, 232, 7, 7]' is invalid for input of size 2281716752
2025-03-11 19:45:01.755833 test begin: paddle.reshape(x=Tensor([100357, 464, 7, 7],"float32"), shape=list[512,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([100357, 464, 7, 7],"float32"), shape=list[512,2,232,7,7,], ) 
 shape '[512, 2, 232, 7, 7]' is invalid for input of size 2281716752
2025-03-11 19:45:02.845734 test begin: paddle.reshape(x=Tensor([10186167, 7, 32],"float32"), shape=list[13,7,4,-1,], )

[torch error] paddle.reshape(x=Tensor([10186167, 7, 32],"float32"), shape=list[13,7,4,-1,], ) 
 shape '[13, 7, 4, -1]' is invalid for input of size 2281701408
2025-03-11 19:45:04.225929 test begin: paddle.reshape(x=Tensor([10186167, 7, 32],"float32"), shape=list[52,7,4,-1,], )

[torch error] paddle.reshape(x=Tensor([10186167, 7, 32],"float32"), shape=list[52,7,4,-1,], ) 
 shape '[52, 7, 4, -1]' is invalid for input of size 2281701408
2025-03-11 19:45:05.890908 test begin: paddle.reshape(x=Tensor([1024, 4194305],"float16"), shape=list[1048576,], )

[torch error] paddle.reshape(x=Tensor([1024, 4194305],"float16"), shape=list[1048576,], ) 
 shape '[1048576]' is invalid for input of size 4294968320
2025-03-11 19:46:23.194559 test begin: paddle.reshape(x=Tensor([1024, 4194305],"float16"), shape=list[2097152,], )

[torch error] paddle.reshape(x=Tensor([1024, 4194305],"float16"), shape=list[2097152,], ) 
 shape '[2097152]' is invalid for input of size 4294968320
2025-03-11 19:46:24.463411 test begin: paddle.reshape(x=Tensor([1024, 4194305],"float16"), shape=list[4194304,], )

[torch error] paddle.reshape(x=Tensor([1024, 4194305],"float16"), shape=list[4194304,], ) 
 shape '[4194304]' is invalid for input of size 4294968320
2025-03-11 19:46:26.863143 test begin: paddle.reshape(x=Tensor([10316, 48, 2, 48, 48],"float32"), shape=list[64,96,48,48,], )

[torch error] paddle.reshape(x=Tensor([10316, 48, 2, 48, 48],"float32"), shape=list[64,96,48,48,], ) 
 shape '[64, 96, 48, 48]' is invalid for input of size 2281734144
2025-03-11 19:46:30.678988 test begin: paddle.reshape(x=Tensor([10316, 96, 48, 48],"float32"), shape=list[64,2,48,48,48,], )

[torch error] paddle.reshape(x=Tensor([10316, 96, 48, 48],"float32"), shape=list[64,2,48,48,48,], ) 
 shape '[64, 2, 48, 48, 48]' is invalid for input of size 2281734144
2025-03-11 19:46:33.635949 test begin: paddle.reshape(x=Tensor([1048577, 4096],"float16"), shape=list[16777216,], )

[torch error] paddle.reshape(x=Tensor([1048577, 4096],"float16"), shape=list[16777216,], ) 
 shape '[16777216]' is invalid for input of size 4294971392
2025-03-11 19:46:35.138109 test begin: paddle.reshape(x=Tensor([1048577, 4096],"float16"), shape=list[206045184,], )

[torch error] paddle.reshape(x=Tensor([1048577, 4096],"float16"), shape=list[206045184,], ) 
 shape '[206045184]' is invalid for input of size 4294971392
2025-03-11 19:46:36.061400 test begin: paddle.reshape(x=Tensor([1048577, 4096],"float16"), shape=list[4194304,], )

[torch error] paddle.reshape(x=Tensor([1048577, 4096],"float16"), shape=list[4194304,], ) 
 shape '[4194304]' is invalid for input of size 4294971392
2025-03-11 19:46:37.346557 test begin: paddle.reshape(x=Tensor([1048577, 4096],"float16"), shape=list[67108864,], )

[torch error] paddle.reshape(x=Tensor([1048577, 4096],"float16"), shape=list[67108864,], ) 
 shape '[67108864]' is invalid for input of size 4294971392
2025-03-11 19:46:39.126151 test begin: paddle.reshape(x=Tensor([1118482, 160, 2, 4, 3],"float16"), shape=list[512,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([1118482, 160, 2, 4, 3],"float16"), shape=list[512,320,4,3,], ) 
 shape '[512, 320, 4, 3]' is invalid for input of size 4294970880
2025-03-11 19:46:41.509062 test begin: paddle.reshape(x=Tensor([1118482, 320, 4, 3],"float16"), shape=list[512,2,160,4,3,], )

[torch error] paddle.reshape(x=Tensor([1118482, 320, 4, 3],"float16"), shape=list[512,2,160,4,3,], ) 
 shape '[512, 2, 160, 4, 3]' is invalid for input of size 4294970880
2025-03-11 19:46:43.032289 test begin: paddle.reshape(x=Tensor([111849, 192, 2, 10, 10],"float16"), shape=list[64,384,10,10,], )

[torch error] paddle.reshape(x=Tensor([111849, 192, 2, 10, 10],"float16"), shape=list[64,384,10,10,], ) 
 shape '[64, 384, 10, 10]' is invalid for input of size 4295001600
2025-03-11 19:46:43.967776 test begin: paddle.reshape(x=Tensor([111849, 384, 10, 10],"float16"), shape=list[64,2,192,10,10,], )

[torch error] paddle.reshape(x=Tensor([111849, 384, 10, 10],"float16"), shape=list[64,2,192,10,10,], ) 
 shape '[64, 2, 192, 10, 10]' is invalid for input of size 4295001600
2025-03-11 19:46:46.056677 test begin: paddle.reshape(x=Tensor([1140850690, 2],"float32"), shape=list[1,-1,], )

[Pass] paddle.reshape(x=Tensor([1140850690, 2],"float32"), shape=list[1,-1,], )
2025-03-11 19:49:42.551640 test begin: paddle.reshape(x=Tensor([1140850690, 2],"float32"), shape=list[1,4,], )

[torch error] paddle.reshape(x=Tensor([1140850690, 2],"float32"), shape=list[1,4,], ) 
 shape '[1, 4]' is invalid for input of size 2281701380
2025-03-11 19:49:46.210075 test begin: paddle.reshape(x=Tensor([11883862, 1, 12, 16],"float32"), shape=tuple(13,12,16,), )

[torch error] paddle.reshape(x=Tensor([11883862, 1, 12, 16],"float32"), shape=tuple(13,12,16,), ) 
 shape '[13, 12, 16]' is invalid for input of size 2281701504
2025-03-11 19:49:47.379817 test begin: paddle.reshape(x=Tensor([11883862, 1, 12, 16],"float32"), shape=tuple(16,12,16,), )

[torch error] paddle.reshape(x=Tensor([11883862, 1, 12, 16],"float32"), shape=tuple(16,12,16,), ) 
 shape '[16, 12, 16]' is invalid for input of size 2281701504
2025-03-11 19:49:48.449372 test begin: paddle.reshape(x=Tensor([11883862, 1, 12, 16],"float32"), shape=tuple(3,12,16,), )

[torch error] paddle.reshape(x=Tensor([11883862, 1, 12, 16],"float32"), shape=tuple(3,12,16,), ) 
 shape '[3, 12, 16]' is invalid for input of size 2281701504
2025-03-11 19:49:49.543866 test begin: paddle.reshape(x=Tensor([11883862, 12, 16],"float32"), shape=tuple(-1,1,12,16,), )

[Pass] paddle.reshape(x=Tensor([11883862, 12, 16],"float32"), shape=tuple(-1,1,12,16,), )
2025-03-11 19:52:26.607147 test begin: paddle.reshape(x=Tensor([11883862, 12, 16],"float32"), shape=tuple(-1,2,12,16,), )

[Pass] paddle.reshape(x=Tensor([11883862, 12, 16],"float32"), shape=tuple(-1,2,12,16,), )
2025-03-11 19:55:25.731185 test begin: paddle.reshape(x=Tensor([12277, 48, 2, 44, 44],"float32"), shape=list[64,96,44,44,], )

[torch error] paddle.reshape(x=Tensor([12277, 48, 2, 44, 44],"float32"), shape=list[64,96,44,44,], ) 
 shape '[64, 96, 44, 44]' is invalid for input of size 2281754112
2025-03-11 19:55:29.664911 test begin: paddle.reshape(x=Tensor([12277, 96, 44, 44],"float32"), shape=list[64,2,48,44,44,], )

[torch error] paddle.reshape(x=Tensor([12277, 96, 44, 44],"float32"), shape=list[64,2,48,44,44,], ) 
 shape '[64, 2, 48, 44, 44]' is invalid for input of size 2281754112
2025-03-11 19:55:31.570753 test begin: paddle.reshape(x=Tensor([13, 1, 10969719, 16],"float32"), shape=tuple(13,12,16,), )

[torch error] paddle.reshape(x=Tensor([13, 1, 10969719, 16],"float32"), shape=tuple(13,12,16,), ) 
 shape '[13, 12, 16]' is invalid for input of size 2281701552
2025-03-11 19:55:32.567329 test begin: paddle.reshape(x=Tensor([13, 1, 12, 14626291],"float32"), shape=tuple(13,12,16,), )

[torch error] paddle.reshape(x=Tensor([13, 1, 12, 14626291],"float32"), shape=tuple(13,12,16,), ) 
 shape '[13, 12, 16]' is invalid for input of size 2281701396
2025-03-11 19:55:33.555145 test begin: paddle.reshape(x=Tensor([13, 10969719, 16],"float32"), shape=tuple(-1,1,12,16,), )

[torch error] paddle.reshape(x=Tensor([13, 10969719, 16],"float32"), shape=tuple(-1,1,12,16,), ) 
 shape '[-1, 1, 12, 16]' is invalid for input of size 2281701552
2025-03-11 19:55:34.571774 test begin: paddle.reshape(x=Tensor([13, 12, 14626291],"float32"), shape=tuple(-1,1,12,16,), )

[torch error] paddle.reshape(x=Tensor([13, 12, 14626291],"float32"), shape=tuple(-1,1,12,16,), ) 
 shape '[-1, 1, 12, 16]' is invalid for input of size 2281701396
2025-03-11 19:55:35.633921 test begin: paddle.reshape(x=Tensor([13, 5484860, 32],"float32"), shape=list[13,7,4,-1,], )

[torch error] paddle.reshape(x=Tensor([13, 5484860, 32],"float32"), shape=list[13,7,4,-1,], ) 
 shape '[13, 7, 4, -1]' is invalid for input of size 2281701760
2025-03-11 19:55:36.708833 test begin: paddle.reshape(x=Tensor([13, 7, 25073642],"float32"), shape=list[13,7,4,-1,], )

[torch error] paddle.reshape(x=Tensor([13, 7, 25073642],"float32"), shape=list[13,7,4,-1,], ) 
 shape '[13, 7, 4, -1]' is invalid for input of size 2281701422
2025-03-11 19:55:39.111915 test begin: paddle.reshape(x=Tensor([13, 914144, 12, 16],"float32"), shape=tuple(13,12,16,), )

[torch error] paddle.reshape(x=Tensor([13, 914144, 12, 16],"float32"), shape=tuple(13,12,16,), ) 
 shape '[13, 12, 16]' is invalid for input of size 2281703424
2025-03-11 19:55:41.749915 test begin: paddle.reshape(x=Tensor([138085, 192, 2, 9, 9],"float16"), shape=list[64,384,9,9,], )

[torch error] paddle.reshape(x=Tensor([138085, 192, 2, 9, 9],"float16"), shape=list[64,384,9,9,], ) 
 shape '[64, 384, 9, 9]' is invalid for input of size 4294995840
2025-03-11 19:55:46.658977 test begin: paddle.reshape(x=Tensor([138085, 384, 9, 9],"float16"), shape=list[64,2,192,9,9,], )

[torch error] paddle.reshape(x=Tensor([138085, 384, 9, 9],"float16"), shape=list[64,2,192,9,9,], ) 
 shape '[64, 2, 192, 9, 9]' is invalid for input of size 4294995840
2025-03-11 19:55:48.597552 test begin: paddle.reshape(x=Tensor([139811, 20, 2, 32, 24],"float16"), shape=list[512,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([139811, 20, 2, 32, 24],"float16"), shape=list[512,40,32,24,], ) 
 shape '[512, 40, 32, 24]' is invalid for input of size 4294993920
2025-03-11 19:55:49.757605 test begin: paddle.reshape(x=Tensor([139811, 40, 32, 24],"float16"), shape=list[512,2,20,32,24,], )

[torch error] paddle.reshape(x=Tensor([139811, 40, 32, 24],"float16"), shape=list[512,2,20,32,24,], ) 
 shape '[512, 2, 20, 32, 24]' is invalid for input of size 4294993920
2025-03-11 19:55:50.943867 test begin: paddle.reshape(x=Tensor([148549, 160, 2, 8, 6],"float32"), shape=list[16,320,8,6,], )

[torch error] paddle.reshape(x=Tensor([148549, 160, 2, 8, 6],"float32"), shape=list[16,320,8,6,], ) 
 shape '[16, 320, 8, 6]' is invalid for input of size 2281712640
2025-03-11 19:55:53.593618 test begin: paddle.reshape(x=Tensor([148549, 320, 8, 6],"float32"), shape=list[16,2,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([148549, 320, 8, 6],"float32"), shape=list[16,2,160,8,6,], ) 
 shape '[16, 2, 160, 8, 6]' is invalid for input of size 2281712640
2025-03-11 19:55:55.209381 test begin: paddle.reshape(x=Tensor([148549, 40, 2, 16, 12],"float32"), shape=list[16,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([148549, 40, 2, 16, 12],"float32"), shape=list[16,80,16,12,], ) 
 shape '[16, 80, 16, 12]' is invalid for input of size 2281712640
2025-03-11 19:55:56.626127 test begin: paddle.reshape(x=Tensor([148549, 40, 2, 16, 12],"float32"), shape=list[512,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([148549, 40, 2, 16, 12],"float32"), shape=list[512,80,16,12,], ) 
 shape '[512, 80, 16, 12]' is invalid for input of size 2281712640
2025-03-11 19:55:58.204864 test begin: paddle.reshape(x=Tensor([148549, 80, 16, 12],"float32"), shape=list[16,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([148549, 80, 16, 12],"float32"), shape=list[16,2,40,16,12,], ) 
 shape '[16, 2, 40, 16, 12]' is invalid for input of size 2281712640
2025-03-11 19:55:59.588189 test begin: paddle.reshape(x=Tensor([148549, 80, 16, 12],"float32"), shape=list[512,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([148549, 80, 16, 12],"float32"), shape=list[512,2,40,16,12,], ) 
 shape '[512, 2, 40, 16, 12]' is invalid for input of size 2281712640
2025-03-11 19:56:02.180094 test begin: paddle.reshape(x=Tensor([14855, 48, 2, 40, 40],"float32"), shape=list[64,96,40,40,], )

[torch error] paddle.reshape(x=Tensor([14855, 48, 2, 40, 40],"float32"), shape=list[64,96,40,40,], ) 
 shape '[64, 96, 40, 40]' is invalid for input of size 2281728000
2025-03-11 19:56:04.743670 test begin: paddle.reshape(x=Tensor([14855, 96, 40, 40],"float32"), shape=list[64,2,48,40,40,], )

[torch error] paddle.reshape(x=Tensor([14855, 96, 40, 40],"float32"), shape=list[64,2,48,40,40,], ) 
 shape '[64, 2, 48, 40, 40]' is invalid for input of size 2281728000
2025-03-11 19:56:06.334140 test begin: paddle.reshape(x=Tensor([14870, 153450, 1],"float32"), shape=tuple(-1,), )

[Pass] paddle.reshape(x=Tensor([14870, 153450, 1],"float32"), shape=tuple(-1,), )
2025-03-11 19:58:47.828171 test begin: paddle.reshape(x=Tensor([1536, 116, 123, 14, 14],"float16"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 123, 14, 14],"float16"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 4295467008
2025-03-11 19:58:51.791117 test begin: paddle.reshape(x=Tensor([1536, 116, 2, 14, 458],"float32"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 2, 14, 458],"float32"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 2284929024
2025-03-11 19:58:56.062164 test begin: paddle.reshape(x=Tensor([1536, 116, 2, 14, 861],"float16"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 2, 14, 861],"float16"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 4295467008
2025-03-11 19:58:59.061004 test begin: paddle.reshape(x=Tensor([1536, 116, 2, 458, 14],"float32"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 2, 458, 14],"float32"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 2284929024
2025-03-11 19:59:01.644306 test begin: paddle.reshape(x=Tensor([1536, 116, 2, 861, 14],"float16"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 2, 861, 14],"float16"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 4295467008
2025-03-11 19:59:04.292561 test begin: paddle.reshape(x=Tensor([1536, 116, 28, 458],"float32"), shape=list[1536,2,58,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 28, 458],"float32"), shape=list[1536,2,58,28,28,], ) 
 shape '[1536, 2, 58, 28, 28]' is invalid for input of size 2284929024
2025-03-11 19:59:06.845775 test begin: paddle.reshape(x=Tensor([1536, 116, 28, 861],"float16"), shape=list[1536,2,58,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 28, 861],"float16"), shape=list[1536,2,58,28,28,], ) 
 shape '[1536, 2, 58, 28, 28]' is invalid for input of size 4295467008
2025-03-11 19:59:09.096483 test begin: paddle.reshape(x=Tensor([1536, 116, 458, 28],"float32"), shape=list[1536,2,58,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 458, 28],"float32"), shape=list[1536,2,58,28,28,], ) 
 shape '[1536, 2, 58, 28, 28]' is invalid for input of size 2284929024
2025-03-11 19:59:12.096207 test begin: paddle.reshape(x=Tensor([1536, 116, 66, 14, 14],"float32"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 66, 14, 14],"float32"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 2304884736
2025-03-11 19:59:14.861480 test begin: paddle.reshape(x=Tensor([1536, 116, 861, 28],"float16"), shape=list[1536,2,58,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 861, 28],"float16"), shape=list[1536,2,58,28,28,], ) 
 shape '[1536, 2, 58, 28, 28]' is invalid for input of size 4295467008
2025-03-11 19:59:17.896446 test begin: paddle.reshape(x=Tensor([1536, 14267, 14, 14],"float16"), shape=list[1536,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 14267, 14, 14],"float16"), shape=list[1536,2,116,14,14,], ) 
 shape '[1536, 2, 116, 14, 14]' is invalid for input of size 4295165952
2025-03-11 19:59:20.209064 test begin: paddle.reshape(x=Tensor([1536, 15158, 2, 7, 7],"float32"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 15158, 2, 7, 7],"float32"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 2281703424
2025-03-11 19:59:22.880086 test begin: paddle.reshape(x=Tensor([1536, 1784, 2, 28, 28],"float16"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 1784, 2, 28, 28],"float16"), shape=list[1536,116,28,28,], ) 
 shape '[1536, 116, 28, 28]' is invalid for input of size 4296671232
2025-03-11 19:59:24.738755 test begin: paddle.reshape(x=Tensor([1536, 1895, 28, 28],"float32"), shape=list[1536,2,58,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 1895, 28, 28],"float32"), shape=list[1536,2,58,28,28,], ) 
 shape '[1536, 2, 58, 28, 28]' is invalid for input of size 2282004480
2025-03-11 19:59:26.352219 test begin: paddle.reshape(x=Tensor([1536, 232, 131, 7, 7],"float32"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 131, 7, 7],"float32"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 2287423488
2025-03-11 19:59:27.390312 test begin: paddle.reshape(x=Tensor([1536, 232, 14, 458],"float32"), shape=list[1536,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 14, 458],"float32"), shape=list[1536,2,116,14,14,], ) 
 shape '[1536, 2, 116, 14, 14]' is invalid for input of size 2284929024
2025-03-11 19:59:28.733495 test begin: paddle.reshape(x=Tensor([1536, 232, 14, 861],"float16"), shape=list[1536,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 14, 861],"float16"), shape=list[1536,2,116,14,14,], ) 
 shape '[1536, 2, 116, 14, 14]' is invalid for input of size 4295467008
2025-03-11 19:59:30.211126 test begin: paddle.reshape(x=Tensor([1536, 232, 2, 458, 7],"float32"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 2, 458, 7],"float32"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 2284929024
2025-03-11 19:59:31.943939 test begin: paddle.reshape(x=Tensor([1536, 232, 2, 7, 458],"float32"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 2, 7, 458],"float32"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 2284929024
2025-03-11 19:59:34.157458 test begin: paddle.reshape(x=Tensor([1536, 232, 2, 7, 861],"float16"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 2, 7, 861],"float16"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 4295467008
2025-03-11 19:59:35.611472 test begin: paddle.reshape(x=Tensor([1536, 232, 2, 861, 7],"float16"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 2, 861, 7],"float16"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 4295467008
2025-03-11 19:59:36.775991 test begin: paddle.reshape(x=Tensor([1536, 232, 246, 7, 7],"float16"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 246, 7, 7],"float16"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 4295467008
2025-03-11 19:59:37.914486 test begin: paddle.reshape(x=Tensor([1536, 232, 458, 14],"float32"), shape=list[1536,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 458, 14],"float32"), shape=list[1536,2,116,14,14,], ) 
 shape '[1536, 2, 116, 14, 14]' is invalid for input of size 2284929024
2025-03-11 19:59:39.711434 test begin: paddle.reshape(x=Tensor([1536, 232, 861, 14],"float16"), shape=list[1536,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 861, 14],"float16"), shape=list[1536,2,116,14,14,], ) 
 shape '[1536, 2, 116, 14, 14]' is invalid for input of size 4295467008
2025-03-11 19:59:41.903336 test begin: paddle.reshape(x=Tensor([1536, 28533, 2, 7, 7],"float16"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 28533, 2, 7, 7],"float16"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 4295015424
2025-03-11 19:59:43.488571 test begin: paddle.reshape(x=Tensor([1536, 30316, 7, 7],"float32"), shape=list[1536,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 30316, 7, 7],"float32"), shape=list[1536,2,232,7,7,], ) 
 shape '[1536, 2, 232, 7, 7]' is invalid for input of size 2281703424
2025-03-11 19:59:45.115804 test begin: paddle.reshape(x=Tensor([1536, 3567, 28, 28],"float16"), shape=list[1536,2,58,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 3567, 28, 28],"float16"), shape=list[1536,2,58,28,28,], ) 
 shape '[1536, 2, 58, 28, 28]' is invalid for input of size 4295467008
2025-03-11 19:59:46.230423 test begin: paddle.reshape(x=Tensor([1536, 3790, 2, 14, 14],"float32"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 3790, 2, 14, 14],"float32"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 2282004480
2025-03-11 19:59:48.534322 test begin: paddle.reshape(x=Tensor([1536, 464, 458, 7],"float32"), shape=list[1536,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 464, 458, 7],"float32"), shape=list[1536,2,232,7,7,], ) 
 shape '[1536, 2, 232, 7, 7]' is invalid for input of size 2284929024
2025-03-11 19:59:50.594458 test begin: paddle.reshape(x=Tensor([1536, 464, 7, 458],"float32"), shape=list[1536,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 464, 7, 458],"float32"), shape=list[1536,2,232,7,7,], ) 
 shape '[1536, 2, 232, 7, 7]' is invalid for input of size 2284929024
2025-03-11 19:59:52.266525 test begin: paddle.reshape(x=Tensor([1536, 464, 7, 861],"float16"), shape=list[1536,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 464, 7, 861],"float16"), shape=list[1536,2,232,7,7,], ) 
 shape '[1536, 2, 232, 7, 7]' is invalid for input of size 4295467008
2025-03-11 19:59:53.411905 test begin: paddle.reshape(x=Tensor([1536, 464, 861, 7],"float16"), shape=list[1536,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 464, 861, 7],"float16"), shape=list[1536,2,232,7,7,], ) 
 shape '[1536, 2, 232, 7, 7]' is invalid for input of size 4295467008
2025-03-11 19:59:54.567412 test begin: paddle.reshape(x=Tensor([1536, 57066, 7, 7],"float16"), shape=list[1536,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 57066, 7, 7],"float16"), shape=list[1536,2,232,7,7,], ) 
 shape '[1536, 2, 232, 7, 7]' is invalid for input of size 4295015424
2025-03-11 19:59:56.740078 test begin: paddle.reshape(x=Tensor([1536, 58, 2, 28, 458],"float32"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 58, 2, 28, 458],"float32"), shape=list[1536,116,28,28,], ) 
 shape '[1536, 116, 28, 28]' is invalid for input of size 2284929024
2025-03-11 19:59:58.126116 test begin: paddle.reshape(x=Tensor([1536, 58, 2, 28, 861],"float16"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 58, 2, 28, 861],"float16"), shape=list[1536,116,28,28,], ) 
 shape '[1536, 116, 28, 28]' is invalid for input of size 4295467008
2025-03-11 19:59:59.699326 test begin: paddle.reshape(x=Tensor([1536, 58, 2, 458, 28],"float32"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 58, 2, 458, 28],"float32"), shape=list[1536,116,28,28,], ) 
 shape '[1536, 116, 28, 28]' is invalid for input of size 2284929024
2025-03-11 20:00:00.831200 test begin: paddle.reshape(x=Tensor([1536, 58, 2, 861, 28],"float16"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 58, 2, 861, 28],"float16"), shape=list[1536,116,28,28,], ) 
 shape '[1536, 116, 28, 28]' is invalid for input of size 4295467008
2025-03-11 20:00:01.956970 test begin: paddle.reshape(x=Tensor([1536, 58, 33, 28, 28],"float32"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 58, 33, 28, 28],"float32"), shape=list[1536,116,28,28,], ) 
 shape '[1536, 116, 28, 28]' is invalid for input of size 2304884736
2025-03-11 20:00:04.396101 test begin: paddle.reshape(x=Tensor([1536, 58, 62, 28, 28],"float16"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 58, 62, 28, 28],"float16"), shape=list[1536,116,28,28,], ) 
 cannot reshape array of size 4300000000 into shape (1536,58,62,28,28)
2025-03-11 20:00:04.409582 test begin: paddle.reshape(x=Tensor([1536, 7134, 2, 14, 14],"float16"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 7134, 2, 14, 14],"float16"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 4295467008
2025-03-11 20:00:05.749643 test begin: paddle.reshape(x=Tensor([1536, 7579, 14, 14],"float32"), shape=list[1536,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 7579, 14, 14],"float32"), shape=list[1536,2,116,14,14,], ) 
 shape '[1536, 2, 116, 14, 14]' is invalid for input of size 2281703424
2025-03-11 20:00:07.601695 test begin: paddle.reshape(x=Tensor([1536, 948, 2, 28, 28],"float32"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 948, 2, 28, 28],"float32"), shape=list[1536,116,28,28,], ) 
 shape '[1536, 116, 28, 28]' is invalid for input of size 2283208704
2025-03-11 20:00:09.220599 test begin: paddle.reshape(x=Tensor([16, 1, 12, 11883862],"float32"), shape=tuple(16,12,16,), )

[torch error] paddle.reshape(x=Tensor([16, 1, 12, 11883862],"float32"), shape=tuple(16,12,16,), ) 
 shape '[16, 12, 16]' is invalid for input of size 2281701504
2025-03-11 20:00:11.074786 test begin: paddle.reshape(x=Tensor([16, 1, 8912897, 16],"float32"), shape=tuple(16,12,16,), )

[torch error] paddle.reshape(x=Tensor([16, 1, 8912897, 16],"float32"), shape=tuple(16,12,16,), ) 
 shape '[16, 12, 16]' is invalid for input of size 2281701632
2025-03-11 20:00:12.066114 test begin: paddle.reshape(x=Tensor([16, 11883862, 4, 3],"float32"), shape=list[16,2,160,4,3,], )

[torch error] paddle.reshape(x=Tensor([16, 11883862, 4, 3],"float32"), shape=list[16,2,160,4,3,], ) 
 shape '[16, 2, 160, 4, 3]' is invalid for input of size 2281701504
2025-03-11 20:00:13.357310 test begin: paddle.reshape(x=Tensor([16, 12, 11883862],"float32"), shape=tuple(-1,1,12,16,), )

[Pass] paddle.reshape(x=Tensor([16, 12, 11883862],"float32"), shape=tuple(-1,1,12,16,), )
2025-03-11 20:03:19.792385 test begin: paddle.reshape(x=Tensor([16, 1485483, 2, 8, 6],"float32"), shape=list[16,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 1485483, 2, 8, 6],"float32"), shape=list[16,160,8,6,], ) 
 shape '[16, 160, 8, 6]' is invalid for input of size 2281701888
2025-03-11 20:03:23.804922 test begin: paddle.reshape(x=Tensor([16, 1485483, 2, 8, 6],"float32"), shape=list[16,320,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 1485483, 2, 8, 6],"float32"), shape=list[16,320,8,6,], ) 
 shape '[16, 320, 8, 6]' is invalid for input of size 2281701888
2025-03-11 20:03:25.890507 test begin: paddle.reshape(x=Tensor([16, 16, 11606, 32, 24],"float32"), shape=list[16,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 16, 11606, 32, 24],"float32"), shape=list[16,32,32,24,], ) 
 shape '[16, 32, 32, 24]' is invalid for input of size 2281832448
2025-03-11 20:03:27.899152 test begin: paddle.reshape(x=Tensor([16, 16, 2, 185686, 24],"float32"), shape=list[16,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 16, 2, 185686, 24],"float32"), shape=list[16,32,32,24,], ) 
 shape '[16, 32, 32, 24]' is invalid for input of size 2281709568
2025-03-11 20:03:30.500545 test begin: paddle.reshape(x=Tensor([16, 16, 2, 32, 139265],"float32"), shape=list[16,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 16, 2, 32, 139265],"float32"), shape=list[16,32,32,24,], ) 
 shape '[16, 32, 32, 24]' is invalid for input of size 2281717760
2025-03-11 20:03:32.514292 test begin: paddle.reshape(x=Tensor([16, 16, 2, 64, 69633],"float32"), shape=list[16,32,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 16, 2, 64, 69633],"float32"), shape=list[16,32,64,48,], ) 
 shape '[16, 32, 64, 48]' is invalid for input of size 2281734144
2025-03-11 20:03:35.178699 test begin: paddle.reshape(x=Tensor([16, 16, 2, 92843, 48],"float32"), shape=list[16,32,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 16, 2, 92843, 48],"float32"), shape=list[16,32,64,48,], ) 
 shape '[16, 32, 64, 48]' is invalid for input of size 2281709568
2025-03-11 20:03:37.038477 test begin: paddle.reshape(x=Tensor([16, 16, 2902, 64, 48],"float32"), shape=list[16,32,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 16, 2902, 64, 48],"float32"), shape=list[16,32,64,48,], ) 
 shape '[16, 32, 64, 48]' is invalid for input of size 2282225664
2025-03-11 20:03:39.554592 test begin: paddle.reshape(x=Tensor([16, 160, 148549, 6],"float32"), shape=list[16,2,80,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 148549, 6],"float32"), shape=list[16,2,80,8,6,], ) 
 shape '[16, 2, 80, 8, 6]' is invalid for input of size 2281712640
2025-03-11 20:03:42.076267 test begin: paddle.reshape(x=Tensor([16, 160, 16, 55706],"float32"), shape=list[16,2,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 16, 55706],"float32"), shape=list[16,2,80,16,12,], ) 
 shape '[16, 2, 80, 16, 12]' is invalid for input of size 2281717760
2025-03-11 20:03:43.942196 test begin: paddle.reshape(x=Tensor([16, 160, 18569, 8, 6],"float32"), shape=list[16,320,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 18569, 8, 6],"float32"), shape=list[16,320,8,6,], ) 
 shape '[16, 320, 8, 6]' is invalid for input of size 2281758720
2025-03-11 20:03:45.803073 test begin: paddle.reshape(x=Tensor([16, 160, 2, 148549, 3],"float32"), shape=list[16,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 2, 148549, 3],"float32"), shape=list[16,320,4,3,], ) 
 shape '[16, 320, 4, 3]' is invalid for input of size 2281712640
2025-03-11 20:03:47.804881 test begin: paddle.reshape(x=Tensor([16, 160, 2, 4, 111412],"float32"), shape=list[16,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 2, 4, 111412],"float32"), shape=list[16,320,4,3,], ) 
 shape '[16, 320, 4, 3]' is invalid for input of size 2281717760
2025-03-11 20:03:50.144518 test begin: paddle.reshape(x=Tensor([16, 160, 2, 74275, 6],"float32"), shape=list[16,320,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 2, 74275, 6],"float32"), shape=list[16,320,8,6,], ) 
 shape '[16, 320, 8, 6]' is invalid for input of size 2281728000
2025-03-11 20:03:52.788514 test begin: paddle.reshape(x=Tensor([16, 160, 2, 8, 55706],"float32"), shape=list[16,320,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 2, 8, 55706],"float32"), shape=list[16,320,8,6,], ) 
 shape '[16, 320, 8, 6]' is invalid for input of size 2281717760
2025-03-11 20:03:55.414752 test begin: paddle.reshape(x=Tensor([16, 160, 74275, 12],"float32"), shape=list[16,2,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 74275, 12],"float32"), shape=list[16,2,80,16,12,], ) 
 shape '[16, 2, 80, 16, 12]' is invalid for input of size 2281728000
2025-03-11 20:03:57.441772 test begin: paddle.reshape(x=Tensor([16, 160, 74275, 4, 3],"float32"), shape=list[16,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 74275, 4, 3],"float32"), shape=list[16,320,4,3,], ) 
 shape '[16, 320, 4, 3]' is invalid for input of size 2281728000
2025-03-11 20:03:59.393036 test begin: paddle.reshape(x=Tensor([16, 160, 8, 111412],"float32"), shape=list[16,2,80,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 8, 111412],"float32"), shape=list[16,2,80,8,6,], ) 
 shape '[16, 2, 80, 8, 6]' is invalid for input of size 2281717760
2025-03-11 20:04:01.956196 test begin: paddle.reshape(x=Tensor([16, 185686, 32, 24],"float32"), shape=list[16,2,16,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 185686, 32, 24],"float32"), shape=list[16,2,16,32,24,], ) 
 shape '[16, 2, 16, 32, 24]' is invalid for input of size 2281709568
2025-03-11 20:04:03.959227 test begin: paddle.reshape(x=Tensor([16, 185686, 32, 24],"float32"), shape=list[16,2,20,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 185686, 32, 24],"float32"), shape=list[16,2,20,32,24,], ) 
 shape '[16, 2, 20, 32, 24]' is invalid for input of size 2281709568
2025-03-11 20:04:05.895394 test begin: paddle.reshape(x=Tensor([16, 185686, 32, 24],"float32"), shape=list[16,2,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 185686, 32, 24],"float32"), shape=list[16,2,40,32,24,], ) 
 shape '[16, 2, 40, 32, 24]' is invalid for input of size 2281709568
2025-03-11 20:04:07.836448 test begin: paddle.reshape(x=Tensor([16, 2, 12, 5941931],"float32"), shape=tuple(32,12,16,), )

[torch error] paddle.reshape(x=Tensor([16, 2, 12, 5941931],"float32"), shape=tuple(32,12,16,), ) 
 shape '[32, 12, 16]' is invalid for input of size 2281701504
2025-03-11 20:04:09.770503 test begin: paddle.reshape(x=Tensor([16, 2, 4456449, 16],"float32"), shape=tuple(32,12,16,), )

[torch error] paddle.reshape(x=Tensor([16, 2, 4456449, 16],"float32"), shape=tuple(32,12,16,), ) 
 shape '[32, 12, 16]' is invalid for input of size 2281701888
2025-03-11 20:04:12.398492 test begin: paddle.reshape(x=Tensor([16, 20, 2, 148549, 24],"float32"), shape=list[16,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 20, 2, 148549, 24],"float32"), shape=list[16,40,32,24,], ) 
 shape '[16, 40, 32, 24]' is invalid for input of size 2281712640
2025-03-11 20:04:14.351261 test begin: paddle.reshape(x=Tensor([16, 20, 2, 32, 111412],"float32"), shape=list[16,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 20, 2, 32, 111412],"float32"), shape=list[16,40,32,24,], ) 
 shape '[16, 40, 32, 24]' is invalid for input of size 2281717760
2025-03-11 20:04:16.383495 test begin: paddle.reshape(x=Tensor([16, 20, 2, 64, 55706],"float32"), shape=list[16,40,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 20, 2, 64, 55706],"float32"), shape=list[16,40,64,48,], ) 
 shape '[16, 40, 64, 48]' is invalid for input of size 2281717760
2025-03-11 20:04:18.289323 test begin: paddle.reshape(x=Tensor([16, 20, 2, 74275, 48],"float32"), shape=list[16,40,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 20, 2, 74275, 48],"float32"), shape=list[16,40,64,48,], ) 
 shape '[16, 40, 64, 48]' is invalid for input of size 2281728000
2025-03-11 20:04:20.262589 test begin: paddle.reshape(x=Tensor([16, 20, 2322, 64, 48],"float32"), shape=list[16,40,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 20, 2322, 64, 48],"float32"), shape=list[16,40,64,48,], ) 
 shape '[16, 40, 64, 48]' is invalid for input of size 2282618880
2025-03-11 20:04:22.243855 test begin: paddle.reshape(x=Tensor([16, 20, 9285, 32, 24],"float32"), shape=list[16,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 20, 9285, 32, 24],"float32"), shape=list[16,40,32,24,], ) 
 shape '[16, 40, 32, 24]' is invalid for input of size 2281881600
2025-03-11 20:04:24.984064 test begin: paddle.reshape(x=Tensor([16, 23211, 2, 64, 48],"float32"), shape=list[16,32,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 23211, 2, 64, 48],"float32"), shape=list[16,32,64,48,], ) 
 shape '[16, 32, 64, 48]' is invalid for input of size 2281734144
2025-03-11 20:04:26.984833 test begin: paddle.reshape(x=Tensor([16, 23211, 2, 64, 48],"float32"), shape=list[16,40,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 23211, 2, 64, 48],"float32"), shape=list[16,40,64,48,], ) 
 shape '[16, 40, 64, 48]' is invalid for input of size 2281734144
2025-03-11 20:04:28.901064 test begin: paddle.reshape(x=Tensor([16, 2970966, 8, 6],"float32"), shape=list[16,2,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 2970966, 8, 6],"float32"), shape=list[16,2,160,8,6,], ) 
 shape '[16, 2, 160, 8, 6]' is invalid for input of size 2281701888
2025-03-11 20:04:30.873252 test begin: paddle.reshape(x=Tensor([16, 2970966, 8, 6],"float32"), shape=list[16,2,80,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 2970966, 8, 6],"float32"), shape=list[16,2,80,8,6,], ) 
 shape '[16, 2, 80, 8, 6]' is invalid for input of size 2281701888
2025-03-11 20:04:33.914161 test begin: paddle.reshape(x=Tensor([16, 32, 185686, 24],"float32"), shape=list[16,2,16,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 32, 185686, 24],"float32"), shape=list[16,2,16,32,24,], ) 
 shape '[16, 2, 16, 32, 24]' is invalid for input of size 2281709568
2025-03-11 20:04:36.502490 test begin: paddle.reshape(x=Tensor([16, 32, 32, 139265],"float32"), shape=list[16,2,16,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 32, 32, 139265],"float32"), shape=list[16,2,16,32,24,], ) 
 shape '[16, 2, 16, 32, 24]' is invalid for input of size 2281717760
2025-03-11 20:04:38.107465 test begin: paddle.reshape(x=Tensor([16, 32, 64, 69633],"float32"), shape=list[16,2,16,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 32, 64, 69633],"float32"), shape=list[16,2,16,64,48,], ) 
 shape '[16, 2, 16, 64, 48]' is invalid for input of size 2281734144
2025-03-11 20:04:39.466152 test begin: paddle.reshape(x=Tensor([16, 32, 92843, 48],"float32"), shape=list[16,2,16,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 32, 92843, 48],"float32"), shape=list[16,2,16,64,48,], ) 
 shape '[16, 2, 16, 64, 48]' is invalid for input of size 2281709568
2025-03-11 20:04:42.116561 test begin: paddle.reshape(x=Tensor([16, 320, 148549, 3],"float32"), shape=list[16,2,160,4,3,], )

[torch error] paddle.reshape(x=Tensor([16, 320, 148549, 3],"float32"), shape=list[16,2,160,4,3,], ) 
 shape '[16, 2, 160, 4, 3]' is invalid for input of size 2281712640
2025-03-11 20:04:43.692890 test begin: paddle.reshape(x=Tensor([16, 320, 4, 111412],"float32"), shape=list[16,2,160,4,3,], )

[torch error] paddle.reshape(x=Tensor([16, 320, 4, 111412],"float32"), shape=list[16,2,160,4,3,], ) 
 shape '[16, 2, 160, 4, 3]' is invalid for input of size 2281717760
2025-03-11 20:04:45.014516 test begin: paddle.reshape(x=Tensor([16, 320, 74275, 6],"float32"), shape=list[16,2,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 320, 74275, 6],"float32"), shape=list[16,2,160,8,6,], ) 
 shape '[16, 2, 160, 8, 6]' is invalid for input of size 2281728000
2025-03-11 20:04:46.869870 test begin: paddle.reshape(x=Tensor([16, 320, 8, 55706],"float32"), shape=list[16,2,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 320, 8, 55706],"float32"), shape=list[16,2,160,8,6,], ) 
 shape '[16, 2, 160, 8, 6]' is invalid for input of size 2281717760
2025-03-11 20:04:48.753793 test begin: paddle.reshape(x=Tensor([16, 371371, 2, 16, 12],"float32"), shape=list[16,160,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 371371, 2, 16, 12],"float32"), shape=list[16,160,16,12,], ) 
 shape '[16, 160, 16, 12]' is invalid for input of size 2281703424
2025-03-11 20:04:50.376512 test begin: paddle.reshape(x=Tensor([16, 371371, 2, 16, 12],"float32"), shape=list[16,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 371371, 2, 16, 12],"float32"), shape=list[16,80,16,12,], ) 
 shape '[16, 80, 16, 12]' is invalid for input of size 2281703424
2025-03-11 20:04:51.840875 test begin: paddle.reshape(x=Tensor([16, 40, 148549, 24],"float32"), shape=list[16,2,20,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 148549, 24],"float32"), shape=list[16,2,20,32,24,], ) 
 shape '[16, 2, 20, 32, 24]' is invalid for input of size 2281712640
2025-03-11 20:04:53.706526 test begin: paddle.reshape(x=Tensor([16, 40, 18569, 16, 12],"float32"), shape=list[16,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 18569, 16, 12],"float32"), shape=list[16,80,16,12,], ) 
 shape '[16, 80, 16, 12]' is invalid for input of size 2281758720
2025-03-11 20:04:55.591341 test begin: paddle.reshape(x=Tensor([16, 40, 2, 148549, 12],"float32"), shape=list[16,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 2, 148549, 12],"float32"), shape=list[16,80,16,12,], ) 
 shape '[16, 80, 16, 12]' is invalid for input of size 2281712640
2025-03-11 20:04:57.460555 test begin: paddle.reshape(x=Tensor([16, 40, 2, 16, 111412],"float32"), shape=list[16,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 2, 16, 111412],"float32"), shape=list[16,80,16,12,], ) 
 shape '[16, 80, 16, 12]' is invalid for input of size 2281717760
2025-03-11 20:04:59.338724 test begin: paddle.reshape(x=Tensor([16, 40, 2, 32, 55706],"float32"), shape=list[16,80,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 2, 32, 55706],"float32"), shape=list[16,80,32,24,], ) 
 shape '[16, 80, 32, 24]' is invalid for input of size 2281717760
2025-03-11 20:05:01.897588 test begin: paddle.reshape(x=Tensor([16, 40, 2, 74275, 24],"float32"), shape=list[16,80,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 2, 74275, 24],"float32"), shape=list[16,80,32,24,], ) 
 shape '[16, 80, 32, 24]' is invalid for input of size 2281728000
2025-03-11 20:05:03.595545 test begin: paddle.reshape(x=Tensor([16, 40, 32, 111412],"float32"), shape=list[16,2,20,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 32, 111412],"float32"), shape=list[16,2,20,32,24,], ) 
 shape '[16, 2, 20, 32, 24]' is invalid for input of size 2281717760
2025-03-11 20:05:05.884671 test begin: paddle.reshape(x=Tensor([16, 40, 4643, 32, 24],"float32"), shape=list[16,80,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 4643, 32, 24],"float32"), shape=list[16,80,32,24,], ) 
 shape '[16, 80, 32, 24]' is invalid for input of size 2282127360
2025-03-11 20:05:08.518142 test begin: paddle.reshape(x=Tensor([16, 40, 64, 55706],"float32"), shape=list[16,2,20,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 64, 55706],"float32"), shape=list[16,2,20,64,48,], ) 
 shape '[16, 2, 20, 64, 48]' is invalid for input of size 2281717760
2025-03-11 20:05:10.607594 test begin: paddle.reshape(x=Tensor([16, 40, 74275, 48],"float32"), shape=list[16,2,20,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 74275, 48],"float32"), shape=list[16,2,20,64,48,], ) 
 shape '[16, 2, 20, 64, 48]' is invalid for input of size 2281728000
2025-03-11 20:05:12.665543 test begin: paddle.reshape(x=Tensor([16, 46422, 64, 48],"float32"), shape=list[16,2,16,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 46422, 64, 48],"float32"), shape=list[16,2,16,64,48,], ) 
 shape '[16, 2, 16, 64, 48]' is invalid for input of size 2281734144
2025-03-11 20:05:14.397951 test begin: paddle.reshape(x=Tensor([16, 46422, 64, 48],"float32"), shape=list[16,2,20,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 46422, 64, 48],"float32"), shape=list[16,2,20,64,48,], ) 
 shape '[16, 2, 20, 64, 48]' is invalid for input of size 2281734144
2025-03-11 20:05:15.786390 test begin: paddle.reshape(x=Tensor([16, 5941931, 2, 4, 3],"float32"), shape=list[16,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([16, 5941931, 2, 4, 3],"float32"), shape=list[16,320,4,3,], ) 
 shape '[16, 320, 4, 3]' is invalid for input of size 2281701504
2025-03-11 20:05:18.406353 test begin: paddle.reshape(x=Tensor([16, 742742, 12, 16],"float32"), shape=tuple(16,12,16,), )

[torch error] paddle.reshape(x=Tensor([16, 742742, 12, 16],"float32"), shape=tuple(16,12,16,), ) 
 shape '[16, 12, 16]' is invalid for input of size 2281703424
2025-03-11 20:05:20.383079 test begin: paddle.reshape(x=Tensor([16, 742742, 12, 16],"float32"), shape=tuple(32,12,16,), )

[torch error] paddle.reshape(x=Tensor([16, 742742, 12, 16],"float32"), shape=tuple(32,12,16,), ) 
 shape '[32, 12, 16]' is invalid for input of size 2281703424
2025-03-11 20:05:22.332179 test begin: paddle.reshape(x=Tensor([16, 742742, 16, 12],"float32"), shape=list[16,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 742742, 16, 12],"float32"), shape=list[16,2,40,16,12,], ) 
 shape '[16, 2, 40, 16, 12]' is invalid for input of size 2281703424
2025-03-11 20:05:24.266301 test begin: paddle.reshape(x=Tensor([16, 742742, 16, 12],"float32"), shape=list[16,2,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 742742, 16, 12],"float32"), shape=list[16,2,80,16,12,], ) 
 shape '[16, 2, 80, 16, 12]' is invalid for input of size 2281703424
2025-03-11 20:05:26.910154 test begin: paddle.reshape(x=Tensor([16, 80, 148549, 12],"float32"), shape=list[16,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 148549, 12],"float32"), shape=list[16,2,40,16,12,], ) 
 shape '[16, 2, 40, 16, 12]' is invalid for input of size 2281712640
2025-03-11 20:05:28.943899 test begin: paddle.reshape(x=Tensor([16, 80, 16, 111412],"float32"), shape=list[16,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 16, 111412],"float32"), shape=list[16,2,40,16,12,], ) 
 shape '[16, 2, 40, 16, 12]' is invalid for input of size 2281717760
2025-03-11 20:05:30.872721 test begin: paddle.reshape(x=Tensor([16, 80, 2, 148549, 6],"float32"), shape=list[16,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 2, 148549, 6],"float32"), shape=list[16,160,8,6,], ) 
 shape '[16, 160, 8, 6]' is invalid for input of size 2281712640
2025-03-11 20:05:32.804411 test begin: paddle.reshape(x=Tensor([16, 80, 2, 16, 55706],"float32"), shape=list[16,160,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 2, 16, 55706],"float32"), shape=list[16,160,16,12,], ) 
 shape '[16, 160, 16, 12]' is invalid for input of size 2281717760
2025-03-11 20:05:35.123055 test begin: paddle.reshape(x=Tensor([16, 80, 2, 74275, 12],"float32"), shape=list[16,160,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 2, 74275, 12],"float32"), shape=list[16,160,16,12,], ) 
 shape '[16, 160, 16, 12]' is invalid for input of size 2281728000
2025-03-11 20:05:38.566351 test begin: paddle.reshape(x=Tensor([16, 80, 2, 8, 111412],"float32"), shape=list[16,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 2, 8, 111412],"float32"), shape=list[16,160,8,6,], ) 
 shape '[16, 160, 8, 6]' is invalid for input of size 2281717760
2025-03-11 20:05:41.097503 test begin: paddle.reshape(x=Tensor([16, 80, 32, 55706],"float32"), shape=list[16,2,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 32, 55706],"float32"), shape=list[16,2,40,32,24,], ) 
 shape '[16, 2, 40, 32, 24]' is invalid for input of size 2281717760
2025-03-11 20:05:43.660777 test begin: paddle.reshape(x=Tensor([16, 80, 37138, 8, 6],"float32"), shape=list[16,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 37138, 8, 6],"float32"), shape=list[16,160,8,6,], ) 
 shape '[16, 160, 8, 6]' is invalid for input of size 2281758720
2025-03-11 20:05:45.246230 test begin: paddle.reshape(x=Tensor([16, 80, 74275, 24],"float32"), shape=list[16,2,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 74275, 24],"float32"), shape=list[16,2,40,32,24,], ) 
 shape '[16, 2, 40, 32, 24]' is invalid for input of size 2281728000
2025-03-11 20:05:46.621875 test begin: paddle.reshape(x=Tensor([16, 80, 9285, 16, 12],"float32"), shape=list[16,160,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 9285, 16, 12],"float32"), shape=list[16,160,16,12,], ) 
 shape '[16, 160, 16, 12]' is invalid for input of size 2281881600
2025-03-11 20:05:49.132041 test begin: paddle.reshape(x=Tensor([16, 8912897, 16],"float32"), shape=tuple(-1,1,12,16,), )

[torch error] paddle.reshape(x=Tensor([16, 8912897, 16],"float32"), shape=tuple(-1,1,12,16,), ) 
 shape '[-1, 1, 12, 16]' is invalid for input of size 2281701632
2025-03-11 20:05:51.029534 test begin: paddle.reshape(x=Tensor([16, 92843, 2, 32, 24],"float32"), shape=list[16,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 92843, 2, 32, 24],"float32"), shape=list[16,32,32,24,], ) 
 shape '[16, 32, 32, 24]' is invalid for input of size 2281709568
2025-03-11 20:05:52.901390 test begin: paddle.reshape(x=Tensor([16, 92843, 2, 32, 24],"float32"), shape=list[16,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 92843, 2, 32, 24],"float32"), shape=list[16,40,32,24,], ) 
 shape '[16, 40, 32, 24]' is invalid for input of size 2281709568
2025-03-11 20:05:54.804141 test begin: paddle.reshape(x=Tensor([16, 92843, 2, 32, 24],"float32"), shape=list[16,80,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 92843, 2, 32, 24],"float32"), shape=list[16,80,32,24,], ) 
 shape '[16, 80, 32, 24]' is invalid for input of size 2281709568
2025-03-11 20:05:56.760600 test begin: paddle.reshape(x=Tensor([16384, 262145],"float16"), shape=list[67108864,], )

[torch error] paddle.reshape(x=Tensor([16384, 262145],"float16"), shape=list[67108864,], ) 
 shape '[67108864]' is invalid for input of size 4294983680
2025-03-11 20:06:00.543454 test begin: paddle.reshape(x=Tensor([16520, 138120, 1],"float32"), shape=tuple(-1,), )

[Pass] paddle.reshape(x=Tensor([16520, 138120, 1],"float32"), shape=tuple(-1,), )
2025-03-11 20:08:43.165425 test begin: paddle.reshape(x=Tensor([16777217, 2, 1, 128],"float16"), shape=list[64,256,1,1,], )

[torch error] paddle.reshape(x=Tensor([16777217, 2, 1, 128],"float16"), shape=list[64,256,1,1,], ) 
 shape '[64, 256, 1, 1]' is invalid for input of size 4294967552
2025-03-11 20:08:47.370043 test begin: paddle.reshape(x=Tensor([16777217, 256, 1, 1],"float16"), shape=list[64,1,2,128,], )

[torch error] paddle.reshape(x=Tensor([16777217, 256, 1, 1],"float16"), shape=list[64,1,2,128,], ) 
 shape '[64, 1, 2, 128]' is invalid for input of size 4294967552
2025-03-11 20:08:49.795355 test begin: paddle.reshape(x=Tensor([174763, 16, 2, 32, 24],"float16"), shape=list[512,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([174763, 16, 2, 32, 24],"float16"), shape=list[512,32,32,24,], ) 
 shape '[512, 32, 32, 24]' is invalid for input of size 4294975488
2025-03-11 20:08:52.201484 test begin: paddle.reshape(x=Tensor([174763, 192, 2, 8, 8],"float16"), shape=list[64,384,8,8,], )

[torch error] paddle.reshape(x=Tensor([174763, 192, 2, 8, 8],"float16"), shape=list[64,384,8,8,], ) 
 shape '[64, 384, 8, 8]' is invalid for input of size 4294975488
2025-03-11 20:08:54.113734 test begin: paddle.reshape(x=Tensor([174763, 32, 32, 24],"float16"), shape=list[512,2,16,32,24,], )

[torch error] paddle.reshape(x=Tensor([174763, 32, 32, 24],"float16"), shape=list[512,2,16,32,24,], ) 
 shape '[512, 2, 16, 32, 24]' is invalid for input of size 4294975488
2025-03-11 20:08:56.541647 test begin: paddle.reshape(x=Tensor([174763, 384, 8, 8],"float16"), shape=list[64,2,192,8,8,], )

[torch error] paddle.reshape(x=Tensor([174763, 384, 8, 8],"float16"), shape=list[64,2,192,8,8,], ) 
 shape '[64, 2, 192, 8, 8]' is invalid for input of size 4294975488
2025-03-11 20:08:58.135019 test begin: paddle.reshape(x=Tensor([17825793, 128, 1, 1],"float32"), shape=list[64,1,2,64,], )

[torch error] paddle.reshape(x=Tensor([17825793, 128, 1, 1],"float32"), shape=list[64,1,2,64,], ) 
 shape '[64, 1, 2, 64]' is invalid for input of size 2281701504
2025-03-11 20:09:02.273961 test begin: paddle.reshape(x=Tensor([17825793, 2, 1, 64],"float32"), shape=list[64,128,1,1,], )

[torch error] paddle.reshape(x=Tensor([17825793, 2, 1, 64],"float32"), shape=list[64,128,1,1,], ) 
 shape '[64, 128, 1, 1]' is invalid for input of size 2281701504
2025-03-11 20:09:04.295422 test begin: paddle.reshape(x=Tensor([18340, 48, 2, 36, 36],"float32"), shape=list[64,96,36,36,], )

[torch error] paddle.reshape(x=Tensor([18340, 48, 2, 36, 36],"float32"), shape=list[64,96,36,36,], ) 
 shape '[64, 96, 36, 36]' is invalid for input of size 2281789440
2025-03-11 20:09:06.202218 test begin: paddle.reshape(x=Tensor([18340, 96, 36, 36],"float32"), shape=list[64,2,48,36,36,], )

[torch error] paddle.reshape(x=Tensor([18340, 96, 36, 36],"float32"), shape=list[64,2,48,36,36,], ) 
 shape '[64, 2, 48, 36, 36]' is invalid for input of size 2281789440
2025-03-11 20:09:08.133407 test begin: paddle.reshape(x=Tensor([18569, 20, 2, 64, 48],"float32"), shape=list[16,40,64,48,], )

[torch error] paddle.reshape(x=Tensor([18569, 20, 2, 64, 48],"float32"), shape=list[16,40,64,48,], ) 
 shape '[16, 40, 64, 48]' is invalid for input of size 2281758720
2025-03-11 20:09:10.729665 test begin: paddle.reshape(x=Tensor([18569, 40, 64, 48],"float32"), shape=list[16,2,20,64,48,], )

[torch error] paddle.reshape(x=Tensor([18569, 40, 64, 48],"float32"), shape=list[16,2,20,64,48,], ) 
 shape '[16, 2, 20, 64, 48]' is invalid for input of size 2281758720
2025-03-11 20:09:12.654562 test begin: paddle.reshape(x=Tensor([188907, 232, 2, 7, 7],"float16"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([188907, 232, 2, 7, 7],"float16"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 4294989552
2025-03-11 20:09:14.849087 test begin: paddle.reshape(x=Tensor([188907, 232, 2, 7, 7],"float16"), shape=list[512,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([188907, 232, 2, 7, 7],"float16"), shape=list[512,464,7,7,], ) 
 shape '[512, 464, 7, 7]' is invalid for input of size 4294989552
2025-03-11 20:09:16.713979 test begin: paddle.reshape(x=Tensor([188907, 464, 7, 7],"float16"), shape=list[1536,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([188907, 464, 7, 7],"float16"), shape=list[1536,2,232,7,7,], ) 
 shape '[1536, 2, 232, 7, 7]' is invalid for input of size 4294989552
2025-03-11 20:09:19.124854 test begin: paddle.reshape(x=Tensor([188907, 464, 7, 7],"float16"), shape=list[512,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([188907, 464, 7, 7],"float16"), shape=list[512,2,232,7,7,], ) 
 shape '[512, 2, 232, 7, 7]' is invalid for input of size 4294989552
2025-03-11 20:09:21.513924 test begin: paddle.reshape(x=Tensor([19419, 48, 2, 48, 48],"float16"), shape=list[64,96,48,48,], )

[torch error] paddle.reshape(x=Tensor([19419, 48, 2, 48, 48],"float16"), shape=list[64,96,48,48,], ) 
 shape '[64, 96, 48, 48]' is invalid for input of size 4295172096
2025-03-11 20:09:23.190634 test begin: paddle.reshape(x=Tensor([19419, 96, 48, 48],"float16"), shape=list[64,2,48,48,48,], )

[torch error] paddle.reshape(x=Tensor([19419, 96, 48, 48],"float16"), shape=list[64,2,48,48,48,], ) 
 shape '[64, 2, 48, 48, 48]' is invalid for input of size 4295172096
2025-03-11 20:09:25.361885 test begin: paddle.reshape(x=Tensor([2, 1140850690, 1],"float32"), shape=list[2,8,], )

[torch error] paddle.reshape(x=Tensor([2, 1140850690, 1],"float32"), shape=list[2,8,], ) 
 shape '[2, 8]' is invalid for input of size 2281701380
2025-03-11 20:09:27.899882 test begin: paddle.reshape(x=Tensor([2, 1140850690],"float32"), shape=list[1,-1,], )

[Pass] paddle.reshape(x=Tensor([2, 1140850690],"float32"), shape=list[1,-1,], )
2025-03-11 20:12:28.193391 test begin: paddle.reshape(x=Tensor([2, 1140850690],"float32"), shape=list[1,4,], )

[torch error] paddle.reshape(x=Tensor([2, 1140850690],"float32"), shape=list[1,4,], ) 
 shape '[1, 4]' is invalid for input of size 2281701380
2025-03-11 20:12:32.209906 test begin: paddle.reshape(x=Tensor([2, 1140850690],"float32"), shape=list[6,], )

[torch error] paddle.reshape(x=Tensor([2, 1140850690],"float32"), shape=list[6,], ) 
 shape '[6]' is invalid for input of size 2281701380
2025-03-11 20:12:34.058637 test begin: paddle.reshape(x=Tensor([2, 2, 12, 47535446],"float32"), shape=tuple(4,12,16,), )

[torch error] paddle.reshape(x=Tensor([2, 2, 12, 47535446],"float32"), shape=tuple(4,12,16,), ) 
 shape '[4, 12, 16]' is invalid for input of size 2281701408
2025-03-11 20:12:35.749970 test begin: paddle.reshape(x=Tensor([2, 2, 35651585, 16],"float32"), shape=tuple(4,12,16,), )

[torch error] paddle.reshape(x=Tensor([2, 2, 35651585, 16],"float32"), shape=tuple(4,12,16,), ) 
 shape '[4, 12, 16]' is invalid for input of size 2281701440
2025-03-11 20:12:38.013574 test begin: paddle.reshape(x=Tensor([2, 2147483649],"float16"), shape=list[1,-1,], )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f7e4d82fc10>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-11 20:22:48.416350 test begin: paddle.reshape(x=Tensor([2, 2147483649],"float16"), shape=list[1,4,], )

W0311 20:24:13.000442 18407 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 20:24:13.001858 18407 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[torch error] paddle.reshape(x=Tensor([2, 2147483649],"float16"), shape=list[1,4,], ) 
 shape '[1, 4]' is invalid for input of size 4294967298
2025-03-11 20:24:15.017922 test begin: paddle.reshape(x=Tensor([2, 2147483649],"float16"), shape=tuple(1,4,), )

[torch error] paddle.reshape(x=Tensor([2, 2147483649],"float16"), shape=tuple(1,4,), ) 
 shape '[1, 4]' is invalid for input of size 4294967298
2025-03-11 20:24:17.513377 test begin: paddle.reshape(x=Tensor([2, 5941931, 12, 16],"float32"), shape=tuple(4,12,16,), )

[torch error] paddle.reshape(x=Tensor([2, 5941931, 12, 16],"float32"), shape=tuple(4,12,16,), ) 
 shape '[4, 12, 16]' is invalid for input of size 2281701504
2025-03-11 20:25:21.797643 test begin: paddle.reshape(x=Tensor([2, 8, 142606337],"float32"), shape=list[2,8,], )

[torch error] paddle.reshape(x=Tensor([2, 8, 142606337],"float32"), shape=list[2,8,], ) 
 shape '[2, 8]' is invalid for input of size 2281701392
2025-03-11 20:25:23.835345 test begin: paddle.reshape(x=Tensor([20, 114085069],"float32"), shape=list[200,], )

[torch error] paddle.reshape(x=Tensor([20, 114085069],"float32"), shape=list[200,], ) 
 shape '[200]' is invalid for input of size 2281701380
2025-03-11 20:25:25.700650 test begin: paddle.reshape(x=Tensor([2048, 2097153],"float16"), shape=list[12582912,], )

[torch error] paddle.reshape(x=Tensor([2048, 2097153],"float16"), shape=list[12582912,], ) 
 shape '[12582912]' is invalid for input of size 4294969344
2025-03-11 20:25:30.088407 test begin: paddle.reshape(x=Tensor([2048, 2097153],"float16"), shape=list[16777216,], )

[torch error] paddle.reshape(x=Tensor([2048, 2097153],"float16"), shape=list[16777216,], ) 
 shape '[16777216]' is invalid for input of size 4294969344
2025-03-11 20:25:32.532012 test begin: paddle.reshape(x=Tensor([2048, 2097153],"float16"), shape=list[4194304,], )

[torch error] paddle.reshape(x=Tensor([2048, 2097153],"float16"), shape=list[4194304,], ) 
 shape '[4194304]' is invalid for input of size 4294969344
2025-03-11 20:25:34.360737 test begin: paddle.reshape(x=Tensor([20632, 192, 24, 24],"float32"), shape=list[64,2,96,24,24,], )

[torch error] paddle.reshape(x=Tensor([20632, 192, 24, 24],"float32"), shape=list[64,2,96,24,24,], ) 
 shape '[64, 2, 96, 24, 24]' is invalid for input of size 2281734144
2025-03-11 20:25:41.027113 test begin: paddle.reshape(x=Tensor([20632, 96, 2, 24, 24],"float32"), shape=list[64,192,24,24,], )

[torch error] paddle.reshape(x=Tensor([20632, 96, 2, 24, 24],"float32"), shape=list[64,192,24,24,], ) 
 shape '[64, 192, 24, 24]' is invalid for input of size 2281734144
2025-03-11 20:25:42.869228 test begin: paddle.reshape(x=Tensor([2097153, 2048],"float16"), shape=list[103022592,], )

[torch error] paddle.reshape(x=Tensor([2097153, 2048],"float16"), shape=list[103022592,], ) 
 shape '[103022592]' is invalid for input of size 4294969344
2025-03-11 20:25:44.743689 test begin: paddle.reshape(x=Tensor([2097153, 2048],"float16"), shape=list[2097152,], )

[torch error] paddle.reshape(x=Tensor([2097153, 2048],"float16"), shape=list[2097152,], ) 
 shape '[2097152]' is invalid for input of size 4294969344
2025-03-11 20:25:46.391679 test begin: paddle.reshape(x=Tensor([2097153, 2048],"float16"), shape=list[4194304,], )

[torch error] paddle.reshape(x=Tensor([2097153, 2048],"float16"), shape=list[4194304,], ) 
 shape '[4194304]' is invalid for input of size 4294969344
2025-03-11 20:25:47.953739 test begin: paddle.reshape(x=Tensor([2147483649, 2],"float16"), shape=list[1,-1,], )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f0e6da6c490>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-11 20:35:59.367125 test begin: paddle.reshape(x=Tensor([2147483649, 2],"float16"), shape=list[1,4,], )

W0311 20:37:18.240583 25219 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 20:37:18.241808 25219 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[torch error] paddle.reshape(x=Tensor([2147483649, 2],"float16"), shape=list[1,4,], ) 
 shape '[1, 4]' is invalid for input of size 4294967298
2025-03-11 20:37:20.178678 test begin: paddle.reshape(x=Tensor([2147483649, 2],"float16"), shape=tuple(1,4,), )

[torch error] paddle.reshape(x=Tensor([2147483649, 2],"float16"), shape=tuple(1,4,), ) 
 shape '[1, 4]' is invalid for input of size 4294967298
2025-03-11 20:37:22.620527 test begin: paddle.reshape(x=Tensor([2228225, 1024, 1, 1],"float32"), shape=list[64,1,2,512,], )

[torch error] paddle.reshape(x=Tensor([2228225, 1024, 1, 1],"float32"), shape=list[64,1,2,512,], ) 
 shape '[64, 1, 2, 512]' is invalid for input of size 2281702400
2025-03-11 20:38:26.275764 test begin: paddle.reshape(x=Tensor([2228225, 2, 1, 512],"float32"), shape=list[64,1024,1,1,], )

[torch error] paddle.reshape(x=Tensor([2228225, 2, 1, 512],"float32"), shape=list[64,1024,1,1,], ) 
 shape '[64, 1024, 1, 1]' is invalid for input of size 2281702400
2025-03-11 20:38:27.879888 test begin: paddle.reshape(x=Tensor([2281701379, 1],"float32"), shape=list[10,], )

[torch error] paddle.reshape(x=Tensor([2281701379, 1],"float32"), shape=list[10,], ) 
 shape '[10]' is invalid for input of size 2281701379
2025-03-11 20:38:29.470353 test begin: paddle.reshape(x=Tensor([2281701379],"float32"), shape=list[10,], )

[torch error] paddle.reshape(x=Tensor([2281701379],"float32"), shape=list[10,], ) 
 shape '[10]' is invalid for input of size 2281701379
2025-03-11 20:38:31.687142 test begin: paddle.reshape(x=Tensor([2281701379],"float32"), shape=list[1024,], )

[torch error] paddle.reshape(x=Tensor([2281701379],"float32"), shape=list[1024,], ) 
 shape '[1024]' is invalid for input of size 2281701379
2025-03-11 20:38:33.671857 test begin: paddle.reshape(x=Tensor([2281701379],"float32"), shape=list[2048,], )

[torch error] paddle.reshape(x=Tensor([2281701379],"float32"), shape=list[2048,], ) 
 shape '[2048]' is invalid for input of size 2281701379
2025-03-11 20:38:36.497052 test begin: paddle.reshape(x=Tensor([2281701379],"float32"), shape=list[4096,], )

[torch error] paddle.reshape(x=Tensor([2281701379],"float32"), shape=list[4096,], ) 
 shape '[4096]' is invalid for input of size 2281701379
2025-03-11 20:38:46.765684 test begin: paddle.reshape(x=Tensor([2281701379],"float32"), shape=list[8,], )

[torch error] paddle.reshape(x=Tensor([2281701379],"float32"), shape=list[8,], ) 
 shape '[8]' is invalid for input of size 2281701379
2025-03-11 20:38:49.117072 test begin: paddle.reshape(x=Tensor([228170138, 1, 10],"float32"), shape=list[5,10,], )

[torch error] paddle.reshape(x=Tensor([228170138, 1, 10],"float32"), shape=list[5,10,], ) 
 shape '[5, 10]' is invalid for input of size 2281701380
2025-03-11 20:38:51.045497 test begin: paddle.reshape(x=Tensor([228170138, 1, 10],"int32"), shape=list[5,10,], )

[torch error] paddle.reshape(x=Tensor([228170138, 1, 10],"int32"), shape=list[5,10,], ) 
 shape '[5, 10]' is invalid for input of size 2281701380
2025-03-11 20:39:45.613874 test begin: paddle.reshape(x=Tensor([228170138, 10],"float32"), shape=list[100,], )

[torch error] paddle.reshape(x=Tensor([228170138, 10],"float32"), shape=list[100,], ) 
 shape '[100]' is invalid for input of size 2281701380
2025-03-11 20:39:47.606691 test begin: paddle.reshape(x=Tensor([228170138, 10],"float32"), shape=list[200,], )

[torch error] paddle.reshape(x=Tensor([228170138, 10],"float32"), shape=list[200,], ) 
 shape '[200]' is invalid for input of size 2281701380
2025-03-11 20:39:48.770143 test begin: paddle.reshape(x=Tensor([228170138, 10],"float32"), shape=list[80,], )

[torch error] paddle.reshape(x=Tensor([228170138, 10],"float32"), shape=list[80,], ) 
 shape '[80]' is invalid for input of size 2281701380
2025-03-11 20:39:51.109517 test begin: paddle.reshape(x=Tensor([22817014, 100],"float32"), shape=list[-1,], )

[Pass] paddle.reshape(x=Tensor([22817014, 100],"float32"), shape=list[-1,], )
2025-03-11 20:43:04.140400 test begin: paddle.reshape(x=Tensor([23110, 48, 2, 44, 44],"float16"), shape=list[64,96,44,44,], )

[torch error] paddle.reshape(x=Tensor([23110, 48, 2, 44, 44],"float16"), shape=list[64,96,44,44,], ) 
 shape '[64, 96, 44, 44]' is invalid for input of size 4295132160
2025-03-11 20:43:08.494491 test begin: paddle.reshape(x=Tensor([23110, 96, 44, 44],"float16"), shape=list[64,2,48,44,44,], )

[torch error] paddle.reshape(x=Tensor([23110, 96, 44, 44],"float16"), shape=list[64,2,48,44,44,], ) 
 shape '[64, 2, 48, 44, 44]' is invalid for input of size 4295132160
2025-03-11 20:43:10.997005 test begin: paddle.reshape(x=Tensor([23211, 16, 2, 64, 48],"float32"), shape=list[16,32,64,48,], )

[torch error] paddle.reshape(x=Tensor([23211, 16, 2, 64, 48],"float32"), shape=list[16,32,64,48,], ) 
 shape '[16, 32, 64, 48]' is invalid for input of size 2281734144
2025-03-11 20:43:15.405090 test begin: paddle.reshape(x=Tensor([23211, 32, 64, 48],"float32"), shape=list[16,2,16,64,48,], )

[torch error] paddle.reshape(x=Tensor([23211, 32, 64, 48],"float32"), shape=list[16,2,16,64,48,], ) 
 shape '[16, 2, 16, 64, 48]' is invalid for input of size 2281734144
2025-03-11 20:43:17.884399 test begin: paddle.reshape(x=Tensor([23211, 48, 2, 32, 32],"float32"), shape=list[64,96,32,32,], )

[torch error] paddle.reshape(x=Tensor([23211, 48, 2, 32, 32],"float32"), shape=list[64,96,32,32,], ) 
 shape '[64, 96, 32, 32]' is invalid for input of size 2281734144
2025-03-11 20:43:19.517865 test begin: paddle.reshape(x=Tensor([23211, 96, 32, 32],"float32"), shape=list[64,2,48,32,32,], )

[torch error] paddle.reshape(x=Tensor([23211, 96, 32, 32],"float32"), shape=list[64,2,48,32,32,], ) 
 shape '[64, 2, 48, 32, 32]' is invalid for input of size 2281734144
2025-03-11 20:43:21.011607 test begin: paddle.reshape(x=Tensor([24253, 120, 28, 28],"float32"), shape=list[512,2,60,28,28,], )

[torch error] paddle.reshape(x=Tensor([24253, 120, 28, 28],"float32"), shape=list[512,2,60,28,28,], ) 
 shape '[512, 2, 60, 28, 28]' is invalid for input of size 2281722240
2025-03-11 20:43:22.874449 test begin: paddle.reshape(x=Tensor([24253, 60, 2, 28, 28],"float32"), shape=list[512,120,28,28,], )

[torch error] paddle.reshape(x=Tensor([24253, 60, 2, 28, 28],"float32"), shape=list[512,120,28,28,], ) 
 shape '[512, 120, 28, 28]' is invalid for input of size 2281722240
2025-03-11 20:43:24.802613 test begin: paddle.reshape(x=Tensor([24554, 192, 22, 22],"float32"), shape=list[64,2,96,22,22,], )

[torch error] paddle.reshape(x=Tensor([24554, 192, 22, 22],"float32"), shape=list[64,2,96,22,22,], ) 
 shape '[64, 2, 96, 22, 22]' is invalid for input of size 2281754112
2025-03-11 20:43:26.506528 test begin: paddle.reshape(x=Tensor([24554, 96, 2, 22, 22],"float32"), shape=list[64,192,22,22,], )

[torch error] paddle.reshape(x=Tensor([24554, 96, 2, 22, 22],"float32"), shape=list[64,192,22,22,], ) 
 shape '[64, 192, 22, 22]' is invalid for input of size 2281754112
2025-03-11 20:43:27.687522 test begin: paddle.reshape(x=Tensor([25090, 116, 28, 28],"float32"), shape=list[1536,2,58,28,28,], )

[torch error] paddle.reshape(x=Tensor([25090, 116, 28, 28],"float32"), shape=list[1536,2,58,28,28,], ) 
 shape '[1536, 2, 58, 28, 28]' is invalid for input of size 2281784960
2025-03-11 20:43:28.891231 test begin: paddle.reshape(x=Tensor([25090, 58, 2, 28, 28],"float32"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([25090, 58, 2, 28, 28],"float32"), shape=list[1536,116,28,28,], ) 
 shape '[1536, 116, 28, 28]' is invalid for input of size 2281784960
2025-03-11 20:43:31.165016 test begin: paddle.reshape(x=Tensor([253522376, 9],"float32"), shape=list[36,], )

[torch error] paddle.reshape(x=Tensor([253522376, 9],"float32"), shape=list[36,], ) 
 shape '[36]' is invalid for input of size 2281701384
2025-03-11 20:43:33.693513 test begin: paddle.reshape(x=Tensor([262145, 16384],"float16"), shape=list[67108864,], )

[torch error] paddle.reshape(x=Tensor([262145, 16384],"float16"), shape=list[67108864,], ) 
 shape '[67108864]' is invalid for input of size 4294983680
2025-03-11 20:43:37.931714 test begin: paddle.reshape(x=Tensor([279621, 40, 2, 16, 12],"float16"), shape=list[512,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([279621, 40, 2, 16, 12],"float16"), shape=list[512,80,16,12,], ) 
 shape '[512, 80, 16, 12]' is invalid for input of size 4294978560
2025-03-11 20:43:39.737950 test begin: paddle.reshape(x=Tensor([279621, 80, 16, 12],"float16"), shape=list[512,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([279621, 80, 16, 12],"float16"), shape=list[512,2,40,16,12,], ) 
 shape '[512, 2, 40, 16, 12]' is invalid for input of size 4294978560
2025-03-11 20:43:41.533314 test begin: paddle.reshape(x=Tensor([27963, 48, 2, 40, 40],"float16"), shape=list[64,96,40,40,], )

[torch error] paddle.reshape(x=Tensor([27963, 48, 2, 40, 40],"float16"), shape=list[64,96,40,40,], ) 
 shape '[64, 96, 40, 40]' is invalid for input of size 4295116800
2025-03-11 20:43:43.894002 test begin: paddle.reshape(x=Tensor([27963, 96, 40, 40],"float16"), shape=list[64,2,48,40,40,], )

[torch error] paddle.reshape(x=Tensor([27963, 96, 40, 40],"float16"), shape=list[64,2,48,40,40,], ) 
 shape '[64, 2, 48, 40, 40]' is invalid for input of size 4295116800
2025-03-11 20:43:46.278853 test begin: paddle.reshape(x=Tensor([285212673, 8, 1],"float32"), shape=list[2,8,], )

[torch error] paddle.reshape(x=Tensor([285212673, 8, 1],"float32"), shape=list[2,8,], ) 
 shape '[2, 8]' is invalid for input of size 2281701384
2025-03-11 20:43:48.481352 test begin: paddle.reshape(x=Tensor([285212673, 8],"float32"), shape=list[80,], )

[torch error] paddle.reshape(x=Tensor([285212673, 8],"float32"), shape=list[80,], ) 
 shape '[80]' is invalid for input of size 2281701384
2025-03-11 20:43:51.757088 test begin: paddle.reshape(x=Tensor([297097, 160, 8, 6],"float32"), shape=list[16,2,80,8,6,], )

[torch error] paddle.reshape(x=Tensor([297097, 160, 8, 6],"float32"), shape=list[16,2,80,8,6,], ) 
 shape '[16, 2, 80, 8, 6]' is invalid for input of size 2281704960
2025-03-11 20:43:53.932299 test begin: paddle.reshape(x=Tensor([297097, 160, 8, 6],"float32"), shape=list[512,2,80,8,6,], )

[torch error] paddle.reshape(x=Tensor([297097, 160, 8, 6],"float32"), shape=list[512,2,80,8,6,], ) 
 shape '[512, 2, 80, 8, 6]' is invalid for input of size 2281704960
2025-03-11 20:43:56.088821 test begin: paddle.reshape(x=Tensor([297097, 80, 2, 8, 6],"float32"), shape=list[16,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([297097, 80, 2, 8, 6],"float32"), shape=list[16,160,8,6,], ) 
 shape '[16, 160, 8, 6]' is invalid for input of size 2281704960
2025-03-11 20:43:58.156144 test begin: paddle.reshape(x=Tensor([297097, 80, 2, 8, 6],"float32"), shape=list[512,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([297097, 80, 2, 8, 6],"float32"), shape=list[512,160,8,6,], ) 
 shape '[512, 160, 8, 6]' is invalid for input of size 2281704960
2025-03-11 20:44:00.049444 test begin: paddle.reshape(x=Tensor([29710, 192, 20, 20],"float32"), shape=list[64,2,96,20,20,], )

[torch error] paddle.reshape(x=Tensor([29710, 192, 20, 20],"float32"), shape=list[64,2,96,20,20,], ) 
 shape '[64, 2, 96, 20, 20]' is invalid for input of size 2281728000
2025-03-11 20:44:02.747395 test begin: paddle.reshape(x=Tensor([29710, 96, 2, 20, 20],"float32"), shape=list[64,192,20,20,], )

[torch error] paddle.reshape(x=Tensor([29710, 96, 2, 20, 20],"float32"), shape=list[64,192,20,20,], ) 
 shape '[64, 192, 20, 20]' is invalid for input of size 2281728000
2025-03-11 20:44:04.607236 test begin: paddle.reshape(x=Tensor([3, 1, 12, 63380594],"float32"), shape=tuple(3,12,16,), )

[torch error] paddle.reshape(x=Tensor([3, 1, 12, 63380594],"float32"), shape=tuple(3,12,16,), ) 
 shape '[3, 12, 16]' is invalid for input of size 2281701384
2025-03-11 20:44:06.449802 test begin: paddle.reshape(x=Tensor([3, 1, 47535446, 16],"float32"), shape=tuple(3,12,16,), )

[torch error] paddle.reshape(x=Tensor([3, 1, 47535446, 16],"float32"), shape=tuple(3,12,16,), ) 
 shape '[3, 12, 16]' is invalid for input of size 2281701408
2025-03-11 20:44:08.362815 test begin: paddle.reshape(x=Tensor([3, 3961288, 12, 16],"float32"), shape=tuple(3,12,16,), )

[torch error] paddle.reshape(x=Tensor([3, 3961288, 12, 16],"float32"), shape=tuple(3,12,16,), ) 
 shape '[3, 12, 16]' is invalid for input of size 2281701888
2025-03-11 20:44:10.968154 test begin: paddle.reshape(x=Tensor([32, 12, 5941931],"float32"), shape=tuple(-1,2,12,16,), )

[Pass] paddle.reshape(x=Tensor([32, 12, 5941931],"float32"), shape=tuple(-1,2,12,16,), )
2025-03-11 20:47:29.869305 test begin: paddle.reshape(x=Tensor([32, 4456449, 16],"float32"), shape=tuple(-1,2,12,16,), )

[Pass] paddle.reshape(x=Tensor([32, 4456449, 16],"float32"), shape=tuple(-1,2,12,16,), )
2025-03-11 20:50:53.212282 test begin: paddle.reshape(x=Tensor([33554433, 128, 1, 1],"float16"), shape=list[64,1,2,64,], )

[torch error] paddle.reshape(x=Tensor([33554433, 128, 1, 1],"float16"), shape=list[64,1,2,64,], ) 
 shape '[64, 1, 2, 64]' is invalid for input of size 4294967424
2025-03-11 20:50:58.111106 test begin: paddle.reshape(x=Tensor([33554433, 2, 1, 64],"float16"), shape=list[64,128,1,1,], )

[torch error] paddle.reshape(x=Tensor([33554433, 2, 1, 64],"float16"), shape=list[64,128,1,1,], ) 
 shape '[64, 128, 1, 1]' is invalid for input of size 4294967424
2025-03-11 20:50:59.938413 test begin: paddle.reshape(x=Tensor([34522, 48, 2, 36, 36],"float16"), shape=list[64,96,36,36,], )

[torch error] paddle.reshape(x=Tensor([34522, 48, 2, 36, 36],"float16"), shape=list[64,96,36,36,], ) 
 shape '[64, 96, 36, 36]' is invalid for input of size 4295089152
2025-03-11 20:51:01.812006 test begin: paddle.reshape(x=Tensor([34522, 96, 36, 36],"float16"), shape=list[64,2,48,36,36,], )

[torch error] paddle.reshape(x=Tensor([34522, 96, 36, 36],"float16"), shape=list[64,2,48,36,36,], ) 
 shape '[64, 2, 48, 36, 36]' is invalid for input of size 4295089152
2025-03-11 20:51:03.650377 test begin: paddle.reshape(x=Tensor([349526, 12288],"float16"), shape=list[50331648,], )

[torch error] paddle.reshape(x=Tensor([349526, 12288],"float16"), shape=list[50331648,], ) 
 shape '[50331648]' is invalid for input of size 4294975488
2025-03-11 20:51:05.464384 test begin: paddle.reshape(x=Tensor([36679, 192, 18, 18],"float32"), shape=list[64,2,96,18,18,], )

[torch error] paddle.reshape(x=Tensor([36679, 192, 18, 18],"float32"), shape=list[64,2,96,18,18,], ) 
 shape '[64, 2, 96, 18, 18]' is invalid for input of size 2281727232
2025-03-11 20:51:09.971155 test begin: paddle.reshape(x=Tensor([36679, 96, 2, 18, 18],"float32"), shape=list[64,192,18,18,], )

[torch error] paddle.reshape(x=Tensor([36679, 96, 2, 18, 18],"float32"), shape=list[64,192,18,18,], ) 
 shape '[64, 192, 18, 18]' is invalid for input of size 2281727232
2025-03-11 20:51:11.615800 test begin: paddle.reshape(x=Tensor([37138, 40, 2, 32, 24],"float32"), shape=list[16,80,32,24,], )

[torch error] paddle.reshape(x=Tensor([37138, 40, 2, 32, 24],"float32"), shape=list[16,80,32,24,], ) 
 shape '[16, 80, 32, 24]' is invalid for input of size 2281758720
2025-03-11 20:51:12.985067 test begin: paddle.reshape(x=Tensor([37138, 80, 32, 24],"float32"), shape=list[16,2,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([37138, 80, 32, 24],"float32"), shape=list[16,2,40,32,24,], ) 
 shape '[16, 2, 40, 32, 24]' is invalid for input of size 2281758720
2025-03-11 20:51:14.743845 test begin: paddle.reshape(x=Tensor([3718, 153450, 4],"float32"), shape=tuple(-1,4,), )

[Pass] paddle.reshape(x=Tensor([3718, 153450, 4],"float32"), shape=tuple(-1,4,), )
2025-03-11 20:53:45.690152 test begin: paddle.reshape(x=Tensor([38837, 192, 24, 24],"float16"), shape=list[64,2,96,24,24,], )

[torch error] paddle.reshape(x=Tensor([38837, 192, 24, 24],"float16"), shape=list[64,2,96,24,24,], ) 
 shape '[64, 2, 96, 24, 24]' is invalid for input of size 4295061504
2025-03-11 20:53:49.975348 test begin: paddle.reshape(x=Tensor([38837, 96, 2, 24, 24],"float16"), shape=list[64,192,24,24,], )

[torch error] paddle.reshape(x=Tensor([38837, 96, 2, 24, 24],"float16"), shape=list[64,192,24,24,], ) 
 shape '[64, 192, 24, 24]' is invalid for input of size 4295061504
2025-03-11 20:53:51.771266 test begin: paddle.reshape(x=Tensor([4, 12, 47535446],"float32"), shape=tuple(-1,2,12,16,), )

[torch error] paddle.reshape(x=Tensor([4, 12, 47535446],"float32"), shape=tuple(-1,2,12,16,), ) 
 shape '[-1, 2, 12, 16]' is invalid for input of size 2281701408
2025-03-11 20:53:55.421903 test begin: paddle.reshape(x=Tensor([4, 35651585, 16],"float32"), shape=tuple(-1,2,12,16,), )

[torch error] paddle.reshape(x=Tensor([4, 35651585, 16],"float32"), shape=tuple(-1,2,12,16,), ) 
 shape '[-1, 2, 12, 16]' is invalid for input of size 2281701440
2025-03-11 20:53:56.951765 test begin: paddle.reshape(x=Tensor([4, 570425345],"float32"), shape=list[36,], )

[torch error] paddle.reshape(x=Tensor([4, 570425345],"float32"), shape=list[36,], ) 
 shape '[36]' is invalid for input of size 2281701380
2025-03-11 20:53:58.847293 test begin: paddle.reshape(x=Tensor([4096, 1048577],"float16"), shape=list[16777216,], )

[torch error] paddle.reshape(x=Tensor([4096, 1048577],"float16"), shape=list[16777216,], ) 
 shape '[16777216]' is invalid for input of size 4294971392
2025-03-11 20:54:01.078621 test begin: paddle.reshape(x=Tensor([4096, 1048577],"float16"), shape=list[50331648,], )

[torch error] paddle.reshape(x=Tensor([4096, 1048577],"float16"), shape=list[50331648,], ) 
 shape '[50331648]' is invalid for input of size 4294971392
2025-03-11 20:54:02.989460 test begin: paddle.reshape(x=Tensor([4096, 1048577],"float16"), shape=list[67108864,], )

[torch error] paddle.reshape(x=Tensor([4096, 1048577],"float16"), shape=list[67108864,], ) 
 shape '[67108864]' is invalid for input of size 4294971392
2025-03-11 20:54:04.874307 test begin: paddle.reshape(x=Tensor([41264, 192, 2, 12, 12],"float32"), shape=list[64,384,12,12,], )

[torch error] paddle.reshape(x=Tensor([41264, 192, 2, 12, 12],"float32"), shape=list[64,384,12,12,], ) 
 shape '[64, 384, 12, 12]' is invalid for input of size 2281734144
2025-03-11 20:54:06.777708 test begin: paddle.reshape(x=Tensor([41264, 384, 12, 12],"float32"), shape=list[64,2,192,12,12,], )

[torch error] paddle.reshape(x=Tensor([41264, 384, 12, 12],"float32"), shape=list[64,2,192,12,12,], ) 
 shape '[64, 2, 192, 12, 12]' is invalid for input of size 2281734144
2025-03-11 20:54:08.449718 test begin: paddle.reshape(x=Tensor([4130, 138120, 4],"float32"), shape=tuple(-1,4,), )

[Pass] paddle.reshape(x=Tensor([4130, 138120, 4],"float32"), shape=tuple(-1,4,), )
2025-03-11 20:56:58.365492 test begin: paddle.reshape(x=Tensor([4194305, 1024, 1, 1],"float16"), shape=list[64,1,2,512,], )

[torch error] paddle.reshape(x=Tensor([4194305, 1024, 1, 1],"float16"), shape=list[64,1,2,512,], ) 
 shape '[64, 1, 2, 512]' is invalid for input of size 4294968320
2025-03-11 20:57:02.501061 test begin: paddle.reshape(x=Tensor([4194305, 1024],"float16"), shape=list[1048576,], )

[torch error] paddle.reshape(x=Tensor([4194305, 1024],"float16"), shape=list[1048576,], ) 
 shape '[1048576]' is invalid for input of size 4294968320
2025-03-11 20:57:04.009795 test begin: paddle.reshape(x=Tensor([4194305, 2, 1, 512],"float16"), shape=list[64,1024,1,1,], )

[torch error] paddle.reshape(x=Tensor([4194305, 2, 1, 512],"float16"), shape=list[64,1024,1,1,], ) 
 shape '[64, 1024, 1, 1]' is invalid for input of size 4294968320
2025-03-11 20:57:05.076495 test begin: paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[1,], )

[torch error] paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[1,], ) 
 shape '[1]' is invalid for input of size 4294967297
2025-03-11 20:57:06.125503 test begin: paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[1024,], )

[torch error] paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[1024,], ) 
 shape '[1024]' is invalid for input of size 4294967297
2025-03-11 20:57:07.514105 test begin: paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[12288,], )

[torch error] paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[12288,], ) 
 shape '[12288]' is invalid for input of size 4294967297
2025-03-11 20:57:09.112577 test begin: paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[16384,], )

[torch error] paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[16384,], ) 
 shape '[16384]' is invalid for input of size 4294967297
2025-03-11 20:57:10.222874 test begin: paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[2048,], )

[torch error] paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[2048,], ) 
 shape '[2048]' is invalid for input of size 4294967297
2025-03-11 20:57:11.324745 test begin: paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[4096,], )

[torch error] paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[4096,], ) 
 shape '[4096]' is invalid for input of size 4294967297
2025-03-11 20:57:12.869127 test begin: paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[6144,], )

[torch error] paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[6144,], ) 
 shape '[6144]' is invalid for input of size 4294967297
2025-03-11 20:57:14.762444 test begin: paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[768,], )

[torch error] paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[768,], ) 
 shape '[768]' is invalid for input of size 4294967297
2025-03-11 20:57:17.237094 test begin: paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[8192,], )

[torch error] paddle.reshape(x=Tensor([4294967297],"float16"), shape=list[8192,], ) 
 shape '[8192]' is invalid for input of size 4294967297
2025-03-11 20:57:18.706818 test begin: paddle.reshape(x=Tensor([42949673, 100],"float16"), shape=list[-1,], )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f9bbda6cbe0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-11 21:07:30.782093 test begin: paddle.reshape(x=Tensor([43691, 48, 2, 32, 32],"float16"), shape=list[64,96,32,32,], )

W0311 21:09:02.472150 41887 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 21:09:02.473371 41887 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[torch error] paddle.reshape(x=Tensor([43691, 48, 2, 32, 32],"float16"), shape=list[64,96,32,32,], ) 
 shape '[64, 96, 32, 32]' is invalid for input of size 4295000064
2025-03-11 21:09:04.601610 test begin: paddle.reshape(x=Tensor([43691, 96, 32, 32],"float16"), shape=list[64,2,48,32,32,], )

[torch error] paddle.reshape(x=Tensor([43691, 96, 32, 32],"float16"), shape=list[64,2,48,32,32,], ) 
 shape '[64, 2, 48, 32, 32]' is invalid for input of size 4295000064
2025-03-11 21:09:07.493395 test begin: paddle.reshape(x=Tensor([4456449, 2, 1, 256],"float32"), shape=list[64,512,1,1,], )

[torch error] paddle.reshape(x=Tensor([4456449, 2, 1, 256],"float32"), shape=list[64,512,1,1,], ) 
 shape '[64, 512, 1, 1]' is invalid for input of size 2281701888
2025-03-11 21:10:10.025930 test begin: paddle.reshape(x=Tensor([4456449, 512, 1, 1],"float32"), shape=list[64,1,2,256,], )

[torch error] paddle.reshape(x=Tensor([4456449, 512, 1, 1],"float32"), shape=list[64,1,2,256,], ) 
 shape '[64, 1, 2, 256]' is invalid for input of size 2281701888
2025-03-11 21:10:11.229108 test begin: paddle.reshape(x=Tensor([45653, 120, 28, 28],"float16"), shape=list[512,2,60,28,28,], )

[torch error] paddle.reshape(x=Tensor([45653, 120, 28, 28],"float16"), shape=list[512,2,60,28,28,], ) 
 shape '[512, 2, 60, 28, 28]' is invalid for input of size 4295034240
2025-03-11 21:10:14.601585 test begin: paddle.reshape(x=Tensor([45653, 60, 2, 28, 28],"float16"), shape=list[512,120,28,28,], )

[torch error] paddle.reshape(x=Tensor([45653, 60, 2, 28, 28],"float16"), shape=list[512,120,28,28,], ) 
 shape '[512, 120, 28, 28]' is invalid for input of size 4295034240
2025-03-11 21:10:16.519865 test begin: paddle.reshape(x=Tensor([46219, 192, 22, 22],"float16"), shape=list[64,2,96,22,22,], )

[torch error] paddle.reshape(x=Tensor([46219, 192, 22, 22],"float16"), shape=list[64,2,96,22,22,], ) 
 shape '[64, 2, 96, 22, 22]' is invalid for input of size 4295039232
2025-03-11 21:10:18.425924 test begin: paddle.reshape(x=Tensor([46219, 96, 2, 22, 22],"float16"), shape=list[64,192,22,22,], )

[torch error] paddle.reshape(x=Tensor([46219, 96, 2, 22, 22],"float16"), shape=list[64,192,22,22,], ) 
 shape '[64, 192, 22, 22]' is invalid for input of size 4295039232
2025-03-11 21:10:20.799635 test begin: paddle.reshape(x=Tensor([46422, 192, 16, 16],"float32"), shape=list[64,2,96,16,16,], )

[torch error] paddle.reshape(x=Tensor([46422, 192, 16, 16],"float32"), shape=list[64,2,96,16,16,], ) 
 shape '[64, 2, 96, 16, 16]' is invalid for input of size 2281734144
2025-03-11 21:10:22.158237 test begin: paddle.reshape(x=Tensor([46422, 96, 2, 16, 16],"float32"), shape=list[64,192,16,16,], )

[torch error] paddle.reshape(x=Tensor([46422, 96, 2, 16, 16],"float32"), shape=list[64,192,16,16,], ) 
 shape '[64, 192, 16, 16]' is invalid for input of size 2281734144
2025-03-11 21:10:24.869994 test begin: paddle.reshape(x=Tensor([47227, 116, 28, 28],"float16"), shape=list[1536,2,58,28,28,], )

[torch error] paddle.reshape(x=Tensor([47227, 116, 28, 28],"float16"), shape=list[1536,2,58,28,28,], ) 
 shape '[1536, 2, 58, 28, 28]' is invalid for input of size 4295012288
2025-03-11 21:10:26.752406 test begin: paddle.reshape(x=Tensor([47227, 58, 2, 28, 28],"float16"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([47227, 58, 2, 28, 28],"float16"), shape=list[1536,116,28,28,], ) 
 shape '[1536, 116, 28, 28]' is invalid for input of size 4295012288
2025-03-11 21:10:28.958089 test begin: paddle.reshape(x=Tensor([49107, 192, 2, 11, 11],"float32"), shape=list[64,384,11,11,], )

[torch error] paddle.reshape(x=Tensor([49107, 192, 2, 11, 11],"float32"), shape=list[64,384,11,11,], ) 
 shape '[64, 384, 11, 11]' is invalid for input of size 2281707648
2025-03-11 21:10:31.483393 test begin: paddle.reshape(x=Tensor([49107, 384, 11, 11],"float32"), shape=list[64,2,192,11,11,], )

[torch error] paddle.reshape(x=Tensor([49107, 384, 11, 11],"float32"), shape=list[64,2,192,11,11,], ) 
 shape '[64, 2, 192, 11, 11]' is invalid for input of size 2281707648
2025-03-11 21:10:33.073650 test begin: paddle.reshape(x=Tensor([5, 1, 456340276],"float32"), shape=list[5,10,], )

[torch error] paddle.reshape(x=Tensor([5, 1, 456340276],"float32"), shape=list[5,10,], ) 
 shape '[5, 10]' is invalid for input of size 2281701380
2025-03-11 21:10:34.492265 test begin: paddle.reshape(x=Tensor([5, 1, 456340276],"int32"), shape=list[5,10,], )

[torch error] paddle.reshape(x=Tensor([5, 1, 456340276],"int32"), shape=list[5,10,], ) 
 shape '[5, 10]' is invalid for input of size 2281701380
2025-03-11 21:11:15.563911 test begin: paddle.reshape(x=Tensor([5, 45634028, 10],"float32"), shape=list[5,10,], )

[torch error] paddle.reshape(x=Tensor([5, 45634028, 10],"float32"), shape=list[5,10,], ) 
 shape '[5, 10]' is invalid for input of size 2281701400
2025-03-11 21:11:20.561699 test begin: paddle.reshape(x=Tensor([5, 45634028, 10],"int32"), shape=list[5,10,], )

[torch error] paddle.reshape(x=Tensor([5, 45634028, 10],"int32"), shape=list[5,10,], ) 
 shape '[5, 10]' is invalid for input of size 2281701400
2025-03-11 21:11:22.761079 test begin: paddle.reshape(x=Tensor([50179, 116, 2, 14, 14],"float32"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([50179, 116, 2, 14, 14],"float32"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 2281739488
2025-03-11 21:11:23.801132 test begin: paddle.reshape(x=Tensor([50179, 116, 2, 14, 14],"float32"), shape=list[512,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([50179, 116, 2, 14, 14],"float32"), shape=list[512,232,14,14,], ) 
 shape '[512, 232, 14, 14]' is invalid for input of size 2281739488
2025-03-11 21:11:25.236075 test begin: paddle.reshape(x=Tensor([50179, 232, 14, 14],"float32"), shape=list[1536,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([50179, 232, 14, 14],"float32"), shape=list[1536,2,116,14,14,], ) 
 shape '[1536, 2, 116, 14, 14]' is invalid for input of size 2281739488
2025-03-11 21:11:26.843232 test begin: paddle.reshape(x=Tensor([50179, 232, 14, 14],"float32"), shape=list[512,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([50179, 232, 14, 14],"float32"), shape=list[512,2,116,14,14,], ) 
 shape '[512, 2, 116, 14, 14]' is invalid for input of size 2281739488
2025-03-11 21:11:28.248974 test begin: paddle.reshape(x=Tensor([50304, 85381],"float16"), shape=list[103022592,], )

[torch error] paddle.reshape(x=Tensor([50304, 85381],"float16"), shape=list[103022592,], ) 
 shape '[103022592]' is invalid for input of size 4295005824
2025-03-11 21:11:31.297803 test begin: paddle.reshape(x=Tensor([50304, 85381],"float16"), shape=list[206045184,], )

[torch error] paddle.reshape(x=Tensor([50304, 85381],"float16"), shape=list[206045184,], ) 
 shape '[206045184]' is invalid for input of size 4295005824
2025-03-11 21:11:33.497139 test begin: paddle.reshape(x=Tensor([512, 10700, 28, 28],"float16"), shape=list[512,2,60,28,28,], )

[torch error] paddle.reshape(x=Tensor([512, 10700, 28, 28],"float16"), shape=list[512,2,60,28,28,], ) 
 shape '[512, 2, 60, 28, 28]' is invalid for input of size 4295065600
2025-03-11 21:11:35.614474 test begin: paddle.reshape(x=Tensor([512, 10923, 32, 24],"float16"), shape=list[512,2,16,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 10923, 32, 24],"float16"), shape=list[512,2,16,32,24,], ) 
 shape '[512, 2, 16, 32, 24]' is invalid for input of size 4295098368
2025-03-11 21:11:37.795506 test begin: paddle.reshape(x=Tensor([512, 10923, 32, 24],"float16"), shape=list[512,2,20,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 10923, 32, 24],"float16"), shape=list[512,2,20,32,24,], ) 
 shape '[512, 2, 20, 32, 24]' is invalid for input of size 4295098368
2025-03-11 21:11:39.427916 test begin: paddle.reshape(x=Tensor([512, 11369, 2, 14, 14],"float32"), shape=list[512,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([512, 11369, 2, 14, 14],"float32"), shape=list[512,232,14,14,], ) 
 shape '[512, 232, 14, 14]' is invalid for input of size 2281803776
2025-03-11 21:11:41.974906 test begin: paddle.reshape(x=Tensor([512, 116, 197, 14, 14],"float32"), shape=list[512,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([512, 116, 197, 14, 14],"float32"), shape=list[512,232,14,14,], ) 
 shape '[512, 232, 14, 14]' is invalid for input of size 2293243904
2025-03-11 21:11:43.914921 test begin: paddle.reshape(x=Tensor([512, 116, 2, 1373, 14],"float32"), shape=list[512,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([512, 116, 2, 1373, 14],"float32"), shape=list[512,232,14,14,], ) 
 shape '[512, 232, 14, 14]' is invalid for input of size 2283266048
2025-03-11 21:11:45.796982 test begin: paddle.reshape(x=Tensor([512, 116, 2, 14, 1373],"float32"), shape=list[512,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([512, 116, 2, 14, 1373],"float32"), shape=list[512,232,14,14,], ) 
 shape '[512, 232, 14, 14]' is invalid for input of size 2283266048
2025-03-11 21:11:46.998056 test begin: paddle.reshape(x=Tensor([512, 116, 2, 14, 2583],"float16"), shape=list[512,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([512, 116, 2, 14, 2583],"float16"), shape=list[512,232,14,14,], ) 
 shape '[512, 232, 14, 14]' is invalid for input of size 4295467008
2025-03-11 21:11:48.938440 test begin: paddle.reshape(x=Tensor([512, 116, 2, 2583, 14],"float16"), shape=list[512,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([512, 116, 2, 2583, 14],"float16"), shape=list[512,232,14,14,], ) 
 shape '[512, 232, 14, 14]' is invalid for input of size 4295467008
2025-03-11 21:11:50.914973 test begin: paddle.reshape(x=Tensor([512, 116, 369, 14, 14],"float16"), shape=list[512,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([512, 116, 369, 14, 14],"float16"), shape=list[512,232,14,14,], ) 
 shape '[512, 232, 14, 14]' is invalid for input of size 4295467008
2025-03-11 21:11:52.605603 test begin: paddle.reshape(x=Tensor([512, 11606, 2, 16, 12],"float32"), shape=list[512,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([512, 11606, 2, 16, 12],"float32"), shape=list[512,80,16,12,], ) 
 shape '[512, 80, 16, 12]' is invalid for input of size 2281832448
2025-03-11 21:11:54.884705 test begin: paddle.reshape(x=Tensor([512, 120, 1327, 28],"float32"), shape=list[512,2,60,28,28,], )

[torch error] paddle.reshape(x=Tensor([512, 120, 1327, 28],"float32"), shape=list[512,2,60,28,28,], ) 
 shape '[512, 2, 60, 28, 28]' is invalid for input of size 2282864640
2025-03-11 21:11:56.483599 test begin: paddle.reshape(x=Tensor([512, 120, 2497, 28],"float16"), shape=list[512,2,60,28,28,], )

[torch error] paddle.reshape(x=Tensor([512, 120, 2497, 28],"float16"), shape=list[512,2,60,28,28,], ) 
 shape '[512, 2, 60, 28, 28]' is invalid for input of size 4295639040
2025-03-11 21:11:58.638153 test begin: paddle.reshape(x=Tensor([512, 120, 28, 1327],"float32"), shape=list[512,2,60,28,28,], )

[torch error] paddle.reshape(x=Tensor([512, 120, 28, 1327],"float32"), shape=list[512,2,60,28,28,], ) 
 shape '[512, 2, 60, 28, 28]' is invalid for input of size 2282864640
2025-03-11 21:12:00.110187 test begin: paddle.reshape(x=Tensor([512, 120, 28, 2497],"float16"), shape=list[512,2,60,28,28,], )

[torch error] paddle.reshape(x=Tensor([512, 120, 28, 2497],"float16"), shape=list[512,2,60,28,28,], ) 
 shape '[512, 2, 60, 28, 28]' is invalid for input of size 4295639040
2025-03-11 21:12:02.010805 test begin: paddle.reshape(x=Tensor([512, 16, 2, 10923, 24],"float16"), shape=list[512,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 16, 2, 10923, 24],"float16"), shape=list[512,32,32,24,], ) 
 shape '[512, 32, 32, 24]' is invalid for input of size 4295098368
2025-03-11 21:12:04.461981 test begin: paddle.reshape(x=Tensor([512, 16, 2, 32, 4353],"float32"), shape=list[512,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 16, 2, 32, 4353],"float32"), shape=list[512,32,32,24,], ) 
 shape '[512, 32, 32, 24]' is invalid for input of size 2282225664
2025-03-11 21:12:07.047552 test begin: paddle.reshape(x=Tensor([512, 16, 2, 32, 8193],"float16"), shape=list[512,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 16, 2, 32, 8193],"float16"), shape=list[512,32,32,24,], ) 
 shape '[512, 32, 32, 24]' is invalid for input of size 4295491584
2025-03-11 21:12:08.614613 test begin: paddle.reshape(x=Tensor([512, 16, 2, 5803, 24],"float32"), shape=list[512,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 16, 2, 5803, 24],"float32"), shape=list[512,32,32,24,], ) 
 shape '[512, 32, 32, 24]' is invalid for input of size 2281832448
2025-03-11 21:12:10.946577 test begin: paddle.reshape(x=Tensor([512, 16, 363, 32, 24],"float32"), shape=list[512,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 16, 363, 32, 24],"float32"), shape=list[512,32,32,24,], ) 
 shape '[512, 32, 32, 24]' is invalid for input of size 2283798528
2025-03-11 21:12:12.704282 test begin: paddle.reshape(x=Tensor([512, 16, 683, 32, 24],"float16"), shape=list[512,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 16, 683, 32, 24],"float16"), shape=list[512,32,32,24,], ) 
 shape '[512, 32, 32, 24]' is invalid for input of size 4297064448
2025-03-11 21:12:14.997664 test begin: paddle.reshape(x=Tensor([512, 160, 2, 4, 3482],"float32"), shape=list[512,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([512, 160, 2, 4, 3482],"float32"), shape=list[512,320,4,3,], ) 
 shape '[512, 320, 4, 3]' is invalid for input of size 2281963520
2025-03-11 21:12:16.235153 test begin: paddle.reshape(x=Tensor([512, 160, 2, 4, 6554],"float16"), shape=list[512,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([512, 160, 2, 4, 6554],"float16"), shape=list[512,320,4,3,], ) 
 shape '[512, 320, 4, 3]' is invalid for input of size 4295229440
2025-03-11 21:12:18.024327 test begin: paddle.reshape(x=Tensor([512, 160, 2, 4643, 3],"float32"), shape=list[512,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([512, 160, 2, 4643, 3],"float32"), shape=list[512,320,4,3,], ) 
 shape '[512, 320, 4, 3]' is invalid for input of size 2282127360
2025-03-11 21:12:19.437758 test begin: paddle.reshape(x=Tensor([512, 160, 2, 8739, 3],"float16"), shape=list[512,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([512, 160, 2, 8739, 3],"float16"), shape=list[512,320,4,3,], ) 
 shape '[512, 320, 4, 3]' is invalid for input of size 4295393280
2025-03-11 21:12:21.469639 test begin: paddle.reshape(x=Tensor([512, 160, 2322, 4, 3],"float32"), shape=list[512,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([512, 160, 2322, 4, 3],"float32"), shape=list[512,320,4,3,], ) 
 shape '[512, 320, 4, 3]' is invalid for input of size 2282618880
2025-03-11 21:12:23.338758 test begin: paddle.reshape(x=Tensor([512, 160, 4370, 4, 3],"float16"), shape=list[512,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([512, 160, 4370, 4, 3],"float16"), shape=list[512,320,4,3,], ) 
 shape '[512, 320, 4, 3]' is invalid for input of size 4295884800
2025-03-11 21:12:25.735766 test begin: paddle.reshape(x=Tensor([512, 160, 4643, 6],"float32"), shape=list[512,2,80,8,6,], )

[torch error] paddle.reshape(x=Tensor([512, 160, 4643, 6],"float32"), shape=list[512,2,80,8,6,], ) 
 shape '[512, 2, 80, 8, 6]' is invalid for input of size 2282127360
2025-03-11 21:12:28.296503 test begin: paddle.reshape(x=Tensor([512, 160, 8, 3482],"float32"), shape=list[512,2,80,8,6,], )

[torch error] paddle.reshape(x=Tensor([512, 160, 8, 3482],"float32"), shape=list[512,2,80,8,6,], ) 
 shape '[512, 2, 80, 8, 6]' is invalid for input of size 2281963520
2025-03-11 21:12:30.247990 test begin: paddle.reshape(x=Tensor([512, 160, 8, 6554],"float16"), shape=list[512,2,80,8,6,], )

[torch error] paddle.reshape(x=Tensor([512, 160, 8, 6554],"float16"), shape=list[512,2,80,8,6,], ) 
 shape '[512, 2, 80, 8, 6]' is invalid for input of size 4295229440
2025-03-11 21:12:32.520346 test begin: paddle.reshape(x=Tensor([512, 160, 8739, 6],"float16"), shape=list[512,2,80,8,6,], )

[torch error] paddle.reshape(x=Tensor([512, 160, 8739, 6],"float16"), shape=list[512,2,80,8,6,], ) 
 shape '[512, 2, 80, 8, 6]' is invalid for input of size 4295393280
2025-03-11 21:12:34.719362 test begin: paddle.reshape(x=Tensor([512, 171197, 7, 7],"float16"), shape=list[512,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([512, 171197, 7, 7],"float16"), shape=list[512,2,232,7,7,], ) 
 shape '[512, 2, 232, 7, 7]' is invalid for input of size 4294990336
2025-03-11 21:12:36.177829 test begin: paddle.reshape(x=Tensor([512, 174763, 8, 6],"float16"), shape=list[512,2,80,8,6,], )

[torch error] paddle.reshape(x=Tensor([512, 174763, 8, 6],"float16"), shape=list[512,2,80,8,6,], ) 
 shape '[512, 2, 80, 8, 6]' is invalid for input of size 4294975488
2025-03-11 21:12:37.941271 test begin: paddle.reshape(x=Tensor([512, 185686, 2, 4, 3],"float32"), shape=list[512,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([512, 185686, 2, 4, 3],"float32"), shape=list[512,320,4,3,], ) 
 shape '[512, 320, 4, 3]' is invalid for input of size 2281709568
2025-03-11 21:12:39.793757 test begin: paddle.reshape(x=Tensor([512, 20, 2, 32, 3482],"float32"), shape=list[512,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 20, 2, 32, 3482],"float32"), shape=list[512,40,32,24,], ) 
 shape '[512, 40, 32, 24]' is invalid for input of size 2281963520
2025-03-11 21:12:42.308385 test begin: paddle.reshape(x=Tensor([512, 20, 2, 32, 6554],"float16"), shape=list[512,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 20, 2, 32, 6554],"float16"), shape=list[512,40,32,24,], ) 
 shape '[512, 40, 32, 24]' is invalid for input of size 4295229440
2025-03-11 21:12:44.439871 test begin: paddle.reshape(x=Tensor([512, 20, 2, 4643, 24],"float32"), shape=list[512,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 20, 2, 4643, 24],"float32"), shape=list[512,40,32,24,], ) 
 shape '[512, 40, 32, 24]' is invalid for input of size 2282127360
2025-03-11 21:12:46.068904 test begin: paddle.reshape(x=Tensor([512, 20, 2, 8739, 24],"float16"), shape=list[512,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 20, 2, 8739, 24],"float16"), shape=list[512,40,32,24,], ) 
 shape '[512, 40, 32, 24]' is invalid for input of size 4295393280
2025-03-11 21:12:48.001519 test begin: paddle.reshape(x=Tensor([512, 20, 291, 32, 24],"float32"), shape=list[512,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 20, 291, 32, 24],"float32"), shape=list[512,40,32,24,], ) 
 shape '[512, 40, 32, 24]' is invalid for input of size 2288517120
2025-03-11 21:12:49.430176 test begin: paddle.reshape(x=Tensor([512, 20, 547, 32, 24],"float16"), shape=list[512,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 20, 547, 32, 24],"float16"), shape=list[512,40,32,24,], ) 
 cannot reshape array of size 4300000000 into shape (512,20,547,32,24)
2025-03-11 21:12:49.443812 test begin: paddle.reshape(x=Tensor([512, 21400, 2, 14, 14],"float16"), shape=list[512,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([512, 21400, 2, 14, 14],"float16"), shape=list[512,232,14,14,], ) 
 shape '[512, 232, 14, 14]' is invalid for input of size 4295065600
2025-03-11 21:12:51.913346 test begin: paddle.reshape(x=Tensor([512, 21846, 2, 16, 12],"float16"), shape=list[512,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([512, 21846, 2, 16, 12],"float16"), shape=list[512,80,16,12,], ) 
 shape '[512, 80, 16, 12]' is invalid for input of size 4295098368
2025-03-11 21:12:54.086321 test begin: paddle.reshape(x=Tensor([512, 22737, 14, 14],"float32"), shape=list[512,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([512, 22737, 14, 14],"float32"), shape=list[512,2,116,14,14,], ) 
 shape '[512, 2, 116, 14, 14]' is invalid for input of size 2281703424
2025-03-11 21:12:55.941311 test begin: paddle.reshape(x=Tensor([512, 232, 1373, 14],"float32"), shape=list[512,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([512, 232, 1373, 14],"float32"), shape=list[512,2,116,14,14,], ) 
 shape '[512, 2, 116, 14, 14]' is invalid for input of size 2283266048
2025-03-11 21:12:57.978597 test begin: paddle.reshape(x=Tensor([512, 232, 14, 1373],"float32"), shape=list[512,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([512, 232, 14, 1373],"float32"), shape=list[512,2,116,14,14,], ) 
 shape '[512, 2, 116, 14, 14]' is invalid for input of size 2283266048
2025-03-11 21:13:00.724255 test begin: paddle.reshape(x=Tensor([512, 232, 14, 2583],"float16"), shape=list[512,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([512, 232, 14, 2583],"float16"), shape=list[512,2,116,14,14,], ) 
 shape '[512, 2, 116, 14, 14]' is invalid for input of size 4295467008
2025-03-11 21:13:02.293721 test begin: paddle.reshape(x=Tensor([512, 232, 2, 1373, 7],"float32"), shape=list[512,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([512, 232, 2, 1373, 7],"float32"), shape=list[512,464,7,7,], ) 
 shape '[512, 464, 7, 7]' is invalid for input of size 2283266048
2025-03-11 21:13:03.915350 test begin: paddle.reshape(x=Tensor([512, 232, 2, 2583, 7],"float16"), shape=list[512,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([512, 232, 2, 2583, 7],"float16"), shape=list[512,464,7,7,], ) 
 shape '[512, 464, 7, 7]' is invalid for input of size 4295467008
2025-03-11 21:13:05.523763 test begin: paddle.reshape(x=Tensor([512, 232, 2, 7, 1373],"float32"), shape=list[512,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([512, 232, 2, 7, 1373],"float32"), shape=list[512,464,7,7,], ) 
 shape '[512, 464, 7, 7]' is invalid for input of size 2283266048
2025-03-11 21:13:06.970115 test begin: paddle.reshape(x=Tensor([512, 232, 2, 7, 2583],"float16"), shape=list[512,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([512, 232, 2, 7, 2583],"float16"), shape=list[512,464,7,7,], ) 
 shape '[512, 464, 7, 7]' is invalid for input of size 4295467008
2025-03-11 21:13:08.577196 test begin: paddle.reshape(x=Tensor([512, 232, 2583, 14],"float16"), shape=list[512,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([512, 232, 2583, 14],"float16"), shape=list[512,2,116,14,14,], ) 
 shape '[512, 2, 116, 14, 14]' is invalid for input of size 4295467008
2025-03-11 21:13:10.809079 test begin: paddle.reshape(x=Tensor([512, 232, 393, 7, 7],"float32"), shape=list[512,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([512, 232, 393, 7, 7],"float32"), shape=list[512,464,7,7,], ) 
 shape '[512, 464, 7, 7]' is invalid for input of size 2287423488
2025-03-11 21:13:12.691980 test begin: paddle.reshape(x=Tensor([512, 232, 738, 7, 7],"float16"), shape=list[512,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([512, 232, 738, 7, 7],"float16"), shape=list[512,464,7,7,], ) 
 shape '[512, 464, 7, 7]' is invalid for input of size 4295467008
2025-03-11 21:13:14.737590 test begin: paddle.reshape(x=Tensor([512, 23211, 16, 12],"float32"), shape=list[512,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([512, 23211, 16, 12],"float32"), shape=list[512,2,40,16,12,], ) 
 shape '[512, 2, 40, 16, 12]' is invalid for input of size 2281734144
2025-03-11 21:13:17.264307 test begin: paddle.reshape(x=Tensor([512, 2843, 2, 28, 28],"float32"), shape=list[512,120,28,28,], )

[torch error] paddle.reshape(x=Tensor([512, 2843, 2, 28, 28],"float32"), shape=list[512,120,28,28,], ) 
 shape '[512, 120, 28, 28]' is invalid for input of size 2282405888
2025-03-11 21:13:19.111259 test begin: paddle.reshape(x=Tensor([512, 2902, 2, 32, 24],"float32"), shape=list[512,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 2902, 2, 32, 24],"float32"), shape=list[512,32,32,24,], ) 
 shape '[512, 32, 32, 24]' is invalid for input of size 2282225664
2025-03-11 21:13:21.628486 test begin: paddle.reshape(x=Tensor([512, 2902, 2, 32, 24],"float32"), shape=list[512,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 2902, 2, 32, 24],"float32"), shape=list[512,40,32,24,], ) 
 shape '[512, 40, 32, 24]' is invalid for input of size 2282225664
2025-03-11 21:13:24.431185 test begin: paddle.reshape(x=Tensor([512, 32, 10923, 24],"float16"), shape=list[512,2,16,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 32, 10923, 24],"float16"), shape=list[512,2,16,32,24,], ) 
 shape '[512, 2, 16, 32, 24]' is invalid for input of size 4295098368
2025-03-11 21:13:28.193278 test begin: paddle.reshape(x=Tensor([512, 32, 32, 4353],"float32"), shape=list[512,2,16,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 32, 32, 4353],"float32"), shape=list[512,2,16,32,24,], ) 
 shape '[512, 2, 16, 32, 24]' is invalid for input of size 2282225664
2025-03-11 21:13:30.024648 test begin: paddle.reshape(x=Tensor([512, 32, 32, 8193],"float16"), shape=list[512,2,16,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 32, 32, 8193],"float16"), shape=list[512,2,16,32,24,], ) 
 shape '[512, 2, 16, 32, 24]' is invalid for input of size 4295491584
2025-03-11 21:13:31.815384 test begin: paddle.reshape(x=Tensor([512, 32, 5803, 24],"float32"), shape=list[512,2,16,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 32, 5803, 24],"float32"), shape=list[512,2,16,32,24,], ) 
 shape '[512, 2, 16, 32, 24]' is invalid for input of size 2281832448
2025-03-11 21:13:33.266969 test begin: paddle.reshape(x=Tensor([512, 320, 4, 3482],"float32"), shape=list[512,2,160,4,3,], )

[torch error] paddle.reshape(x=Tensor([512, 320, 4, 3482],"float32"), shape=list[512,2,160,4,3,], ) 
 shape '[512, 2, 160, 4, 3]' is invalid for input of size 2281963520
2025-03-11 21:13:34.779224 test begin: paddle.reshape(x=Tensor([512, 320, 4, 6554],"float16"), shape=list[512,2,160,4,3,], )

[torch error] paddle.reshape(x=Tensor([512, 320, 4, 6554],"float16"), shape=list[512,2,160,4,3,], ) 
 shape '[512, 2, 160, 4, 3]' is invalid for input of size 4295229440
2025-03-11 21:13:37.135537 test begin: paddle.reshape(x=Tensor([512, 320, 4643, 3],"float32"), shape=list[512,2,160,4,3,], )

[torch error] paddle.reshape(x=Tensor([512, 320, 4643, 3],"float32"), shape=list[512,2,160,4,3,], ) 
 shape '[512, 2, 160, 4, 3]' is invalid for input of size 2282127360
2025-03-11 21:13:39.325734 test begin: paddle.reshape(x=Tensor([512, 320, 8739, 3],"float16"), shape=list[512,2,160,4,3,], )

[torch error] paddle.reshape(x=Tensor([512, 320, 8739, 3],"float16"), shape=list[512,2,160,4,3,], ) 
 shape '[512, 2, 160, 4, 3]' is invalid for input of size 4295393280
2025-03-11 21:13:40.839594 test begin: paddle.reshape(x=Tensor([512, 349526, 2, 4, 3],"float16"), shape=list[512,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([512, 349526, 2, 4, 3],"float16"), shape=list[512,320,4,3,], ) 
 shape '[512, 320, 4, 3]' is invalid for input of size 4294975488
2025-03-11 21:13:42.487650 test begin: paddle.reshape(x=Tensor([512, 371371, 4, 3],"float32"), shape=list[512,2,160,4,3,], )

[torch error] paddle.reshape(x=Tensor([512, 371371, 4, 3],"float32"), shape=list[512,2,160,4,3,], ) 
 shape '[512, 2, 160, 4, 3]' is invalid for input of size 2281703424
2025-03-11 21:13:45.097123 test begin: paddle.reshape(x=Tensor([512, 40, 1093, 16, 12],"float16"), shape=list[512,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([512, 40, 1093, 16, 12],"float16"), shape=list[512,80,16,12,], ) 
 shape '[512, 80, 16, 12]' is invalid for input of size 4297850880
2025-03-11 21:13:46.774267 test begin: paddle.reshape(x=Tensor([512, 40, 2, 16, 3482],"float32"), shape=list[512,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([512, 40, 2, 16, 3482],"float32"), shape=list[512,80,16,12,], ) 
 shape '[512, 80, 16, 12]' is invalid for input of size 2281963520
2025-03-11 21:13:48.104711 test begin: paddle.reshape(x=Tensor([512, 40, 2, 16, 6554],"float16"), shape=list[512,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([512, 40, 2, 16, 6554],"float16"), shape=list[512,80,16,12,], ) 
 shape '[512, 80, 16, 12]' is invalid for input of size 4295229440
2025-03-11 21:13:50.017496 test begin: paddle.reshape(x=Tensor([512, 40, 2, 4643, 12],"float32"), shape=list[512,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([512, 40, 2, 4643, 12],"float32"), shape=list[512,80,16,12,], ) 
 shape '[512, 80, 16, 12]' is invalid for input of size 2282127360
2025-03-11 21:13:51.629226 test begin: paddle.reshape(x=Tensor([512, 40, 2, 8739, 12],"float16"), shape=list[512,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([512, 40, 2, 8739, 12],"float16"), shape=list[512,80,16,12,], ) 
 shape '[512, 80, 16, 12]' is invalid for input of size 4295393280
2025-03-11 21:13:53.938566 test begin: paddle.reshape(x=Tensor([512, 40, 32, 3482],"float32"), shape=list[512,2,20,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 40, 32, 3482],"float32"), shape=list[512,2,20,32,24,], ) 
 shape '[512, 2, 20, 32, 24]' is invalid for input of size 2281963520
2025-03-11 21:13:56.000370 test begin: paddle.reshape(x=Tensor([512, 40, 32, 6554],"float16"), shape=list[512,2,20,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 40, 32, 6554],"float16"), shape=list[512,2,20,32,24,], ) 
 shape '[512, 2, 20, 32, 24]' is invalid for input of size 4295229440
2025-03-11 21:13:58.142809 test begin: paddle.reshape(x=Tensor([512, 40, 4643, 24],"float32"), shape=list[512,2,20,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 40, 4643, 24],"float32"), shape=list[512,2,20,32,24,], ) 
 shape '[512, 2, 20, 32, 24]' is invalid for input of size 2282127360
2025-03-11 21:14:00.887372 test begin: paddle.reshape(x=Tensor([512, 40, 581, 16, 12],"float32"), shape=list[512,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([512, 40, 581, 16, 12],"float32"), shape=list[512,80,16,12,], ) 
 shape '[512, 80, 16, 12]' is invalid for input of size 2284584960
2025-03-11 21:14:03.558567 test begin: paddle.reshape(x=Tensor([512, 40, 8739, 24],"float16"), shape=list[512,2,20,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 40, 8739, 24],"float16"), shape=list[512,2,20,32,24,], ) 
 shape '[512, 2, 20, 32, 24]' is invalid for input of size 4295393280
2025-03-11 21:14:05.750305 test begin: paddle.reshape(x=Tensor([512, 42800, 14, 14],"float16"), shape=list[512,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([512, 42800, 14, 14],"float16"), shape=list[512,2,116,14,14,], ) 
 shape '[512, 2, 116, 14, 14]' is invalid for input of size 4295065600
2025-03-11 21:14:07.566794 test begin: paddle.reshape(x=Tensor([512, 43691, 16, 12],"float16"), shape=list[512,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([512, 43691, 16, 12],"float16"), shape=list[512,2,40,16,12,], ) 
 shape '[512, 2, 40, 16, 12]' is invalid for input of size 4295000064
2025-03-11 21:14:09.812441 test begin: paddle.reshape(x=Tensor([512, 45474, 2, 7, 7],"float32"), shape=list[512,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([512, 45474, 2, 7, 7],"float32"), shape=list[512,464,7,7,], ) 
 shape '[512, 464, 7, 7]' is invalid for input of size 2281703424
2025-03-11 21:14:11.886576 test begin: paddle.reshape(x=Tensor([512, 464, 1373, 7],"float32"), shape=list[512,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([512, 464, 1373, 7],"float32"), shape=list[512,2,232,7,7,], ) 
 shape '[512, 2, 232, 7, 7]' is invalid for input of size 2283266048
2025-03-11 21:14:14.300902 test begin: paddle.reshape(x=Tensor([512, 464, 2583, 7],"float16"), shape=list[512,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([512, 464, 2583, 7],"float16"), shape=list[512,2,232,7,7,], ) 
 shape '[512, 2, 232, 7, 7]' is invalid for input of size 4295467008
2025-03-11 21:14:15.820783 test begin: paddle.reshape(x=Tensor([512, 464, 7, 1373],"float32"), shape=list[512,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([512, 464, 7, 1373],"float32"), shape=list[512,2,232,7,7,], ) 
 shape '[512, 2, 232, 7, 7]' is invalid for input of size 2283266048
2025-03-11 21:14:17.692900 test begin: paddle.reshape(x=Tensor([512, 464, 7, 2583],"float16"), shape=list[512,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([512, 464, 7, 2583],"float16"), shape=list[512,2,232,7,7,], ) 
 shape '[512, 2, 232, 7, 7]' is invalid for input of size 4295467008
2025-03-11 21:14:19.393478 test begin: paddle.reshape(x=Tensor([512, 46422, 2, 8, 6],"float32"), shape=list[512,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([512, 46422, 2, 8, 6],"float32"), shape=list[512,160,8,6,], ) 
 shape '[512, 160, 8, 6]' is invalid for input of size 2281734144
2025-03-11 21:14:21.241486 test begin: paddle.reshape(x=Tensor([512, 5350, 2, 28, 28],"float16"), shape=list[512,120,28,28,], )

[torch error] paddle.reshape(x=Tensor([512, 5350, 2, 28, 28],"float16"), shape=list[512,120,28,28,], ) 
 shape '[512, 120, 28, 28]' is invalid for input of size 4295065600
2025-03-11 21:14:23.290499 test begin: paddle.reshape(x=Tensor([512, 5462, 2, 32, 24],"float16"), shape=list[512,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 5462, 2, 32, 24],"float16"), shape=list[512,32,32,24,], ) 
 shape '[512, 32, 32, 24]' is invalid for input of size 4295491584
2025-03-11 21:14:25.611506 test begin: paddle.reshape(x=Tensor([512, 5462, 2, 32, 24],"float16"), shape=list[512,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 5462, 2, 32, 24],"float16"), shape=list[512,40,32,24,], ) 
 shape '[512, 40, 32, 24]' is invalid for input of size 4295491584
2025-03-11 21:14:27.795654 test begin: paddle.reshape(x=Tensor([512, 5685, 28, 28],"float32"), shape=list[512,2,60,28,28,], )

[torch error] paddle.reshape(x=Tensor([512, 5685, 28, 28],"float32"), shape=list[512,2,60,28,28,], ) 
 shape '[512, 2, 60, 28, 28]' is invalid for input of size 2282004480
2025-03-11 21:14:30.353945 test begin: paddle.reshape(x=Tensor([512, 5803, 32, 24],"float32"), shape=list[512,2,16,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 5803, 32, 24],"float32"), shape=list[512,2,16,32,24,], ) 
 shape '[512, 2, 16, 32, 24]' is invalid for input of size 2281832448
2025-03-11 21:14:32.907820 test begin: paddle.reshape(x=Tensor([512, 5803, 32, 24],"float32"), shape=list[512,2,20,32,24,], )

[torch error] paddle.reshape(x=Tensor([512, 5803, 32, 24],"float32"), shape=list[512,2,20,32,24,], ) 
 shape '[512, 2, 20, 32, 24]' is invalid for input of size 2281832448
2025-03-11 21:14:35.427833 test begin: paddle.reshape(x=Tensor([512, 60, 179, 28, 28],"float16"), shape=list[512,120,28,28,], )

[torch error] paddle.reshape(x=Tensor([512, 60, 179, 28, 28],"float16"), shape=list[512,120,28,28,], ) 
 cannot reshape array of size 4300000000 into shape (512,60,179,28,28)
2025-03-11 21:14:35.436710 test begin: paddle.reshape(x=Tensor([512, 60, 2, 1327, 28],"float32"), shape=list[512,120,28,28,], )

[torch error] paddle.reshape(x=Tensor([512, 60, 2, 1327, 28],"float32"), shape=list[512,120,28,28,], ) 
 shape '[512, 120, 28, 28]' is invalid for input of size 2282864640
2025-03-11 21:14:37.283776 test begin: paddle.reshape(x=Tensor([512, 60, 2, 2497, 28],"float16"), shape=list[512,120,28,28,], )

[torch error] paddle.reshape(x=Tensor([512, 60, 2, 2497, 28],"float16"), shape=list[512,120,28,28,], ) 
 shape '[512, 120, 28, 28]' is invalid for input of size 4295639040
2025-03-11 21:14:39.717555 test begin: paddle.reshape(x=Tensor([512, 60, 2, 28, 1327],"float32"), shape=list[512,120,28,28,], )

[torch error] paddle.reshape(x=Tensor([512, 60, 2, 28, 1327],"float32"), shape=list[512,120,28,28,], ) 
 shape '[512, 120, 28, 28]' is invalid for input of size 2282864640
2025-03-11 21:14:42.091358 test begin: paddle.reshape(x=Tensor([512, 60, 2, 28, 2497],"float16"), shape=list[512,120,28,28,], )

[torch error] paddle.reshape(x=Tensor([512, 60, 2, 28, 2497],"float16"), shape=list[512,120,28,28,], ) 
 shape '[512, 120, 28, 28]' is invalid for input of size 4295639040
2025-03-11 21:14:44.587973 test begin: paddle.reshape(x=Tensor([512, 60, 95, 28, 28],"float32"), shape=list[512,120,28,28,], )

[torch error] paddle.reshape(x=Tensor([512, 60, 95, 28, 28],"float32"), shape=list[512,120,28,28,], ) 
 shape '[512, 120, 28, 28]' is invalid for input of size 2288025600
2025-03-11 21:14:47.196409 test begin: paddle.reshape(x=Tensor([512, 699051, 4, 3],"float16"), shape=list[512,2,160,4,3,], )

[torch error] paddle.reshape(x=Tensor([512, 699051, 4, 3],"float16"), shape=list[512,2,160,4,3,], ) 
 shape '[512, 2, 160, 4, 3]' is invalid for input of size 4294969344
2025-03-11 21:14:49.660318 test begin: paddle.reshape(x=Tensor([512, 80, 1161, 8, 6],"float32"), shape=list[512,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([512, 80, 1161, 8, 6],"float32"), shape=list[512,160,8,6,], ) 
 shape '[512, 160, 8, 6]' is invalid for input of size 2282618880
2025-03-11 21:14:51.950836 test begin: paddle.reshape(x=Tensor([512, 80, 16, 3482],"float32"), shape=list[512,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([512, 80, 16, 3482],"float32"), shape=list[512,2,40,16,12,], ) 
 shape '[512, 2, 40, 16, 12]' is invalid for input of size 2281963520
2025-03-11 21:14:53.678934 test begin: paddle.reshape(x=Tensor([512, 80, 16, 6554],"float16"), shape=list[512,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([512, 80, 16, 6554],"float16"), shape=list[512,2,40,16,12,], ) 
 shape '[512, 2, 40, 16, 12]' is invalid for input of size 4295229440
2025-03-11 21:14:56.030735 test begin: paddle.reshape(x=Tensor([512, 80, 2, 4643, 6],"float32"), shape=list[512,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([512, 80, 2, 4643, 6],"float32"), shape=list[512,160,8,6,], ) 
 shape '[512, 160, 8, 6]' is invalid for input of size 2282127360
2025-03-11 21:14:58.502311 test begin: paddle.reshape(x=Tensor([512, 80, 2, 8, 3482],"float32"), shape=list[512,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([512, 80, 2, 8, 3482],"float32"), shape=list[512,160,8,6,], ) 
 shape '[512, 160, 8, 6]' is invalid for input of size 2281963520
2025-03-11 21:15:01.021476 test begin: paddle.reshape(x=Tensor([512, 80, 2, 8, 6554],"float16"), shape=list[512,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([512, 80, 2, 8, 6554],"float16"), shape=list[512,160,8,6,], ) 
 shape '[512, 160, 8, 6]' is invalid for input of size 4295229440
2025-03-11 21:15:03.363944 test begin: paddle.reshape(x=Tensor([512, 80, 2, 8739, 6],"float16"), shape=list[512,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([512, 80, 2, 8739, 6],"float16"), shape=list[512,160,8,6,], ) 
 shape '[512, 160, 8, 6]' is invalid for input of size 4295393280
2025-03-11 21:15:05.323158 test begin: paddle.reshape(x=Tensor([512, 80, 2185, 8, 6],"float16"), shape=list[512,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([512, 80, 2185, 8, 6],"float16"), shape=list[512,160,8,6,], ) 
 shape '[512, 160, 8, 6]' is invalid for input of size 4295884800
2025-03-11 21:15:07.613477 test begin: paddle.reshape(x=Tensor([512, 80, 4643, 12],"float32"), shape=list[512,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([512, 80, 4643, 12],"float32"), shape=list[512,2,40,16,12,], ) 
 shape '[512, 2, 40, 16, 12]' is invalid for input of size 2282127360
2025-03-11 21:15:10.297912 test begin: paddle.reshape(x=Tensor([512, 80, 8739, 12],"float16"), shape=list[512,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([512, 80, 8739, 12],"float16"), shape=list[512,2,40,16,12,], ) 
 shape '[512, 2, 40, 16, 12]' is invalid for input of size 4295393280
2025-03-11 21:15:12.480622 test begin: paddle.reshape(x=Tensor([512, 85599, 2, 7, 7],"float16"), shape=list[512,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([512, 85599, 2, 7, 7],"float16"), shape=list[512,464,7,7,], ) 
 shape '[512, 464, 7, 7]' is invalid for input of size 4295015424
2025-03-11 21:15:14.681542 test begin: paddle.reshape(x=Tensor([512, 87382, 2, 8, 6],"float16"), shape=list[512,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([512, 87382, 2, 8, 6],"float16"), shape=list[512,160,8,6,], ) 
 shape '[512, 160, 8, 6]' is invalid for input of size 4295000064
2025-03-11 21:15:16.860041 test begin: paddle.reshape(x=Tensor([512, 90948, 7, 7],"float32"), shape=list[512,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([512, 90948, 7, 7],"float32"), shape=list[512,2,232,7,7,], ) 
 shape '[512, 2, 232, 7, 7]' is invalid for input of size 2281703424
2025-03-11 21:15:20.126157 test begin: paddle.reshape(x=Tensor([512, 92843, 8, 6],"float32"), shape=list[512,2,80,8,6,], )

[torch error] paddle.reshape(x=Tensor([512, 92843, 8, 6],"float32"), shape=list[512,2,80,8,6,], ) 
 shape '[512, 2, 80, 8, 6]' is invalid for input of size 2281709568
2025-03-11 21:15:22.883868 test begin: paddle.reshape(x=Tensor([52, 1371215, 32],"float32"), shape=list[52,7,4,-1,], )

[torch error] paddle.reshape(x=Tensor([52, 1371215, 32],"float32"), shape=list[52,7,4,-1,], ) 
 shape '[52, 7, 4, -1]' is invalid for input of size 2281701760
2025-03-11 21:15:24.802453 test begin: paddle.reshape(x=Tensor([52, 7, 6268411],"float32"), shape=list[52,7,4,-1,], )

[torch error] paddle.reshape(x=Tensor([52, 7, 6268411],"float32"), shape=list[52,7,4,-1,], ) 
 shape '[52, 7, 4, -1]' is invalid for input of size 2281701604
2025-03-11 21:15:26.690215 test begin: paddle.reshape(x=Tensor([524289, 8192],"float16"), shape=list[16777216,], )

[torch error] paddle.reshape(x=Tensor([524289, 8192],"float16"), shape=list[16777216,], ) 
 shape '[16777216]' is invalid for input of size 4294975488
2025-03-11 21:15:28.239317 test begin: paddle.reshape(x=Tensor([559241, 160, 8, 6],"float16"), shape=list[512,2,80,8,6,], )

[torch error] paddle.reshape(x=Tensor([559241, 160, 8, 6],"float16"), shape=list[512,2,80,8,6,], ) 
 shape '[512, 2, 80, 8, 6]' is invalid for input of size 4294970880
2025-03-11 21:15:30.158581 test begin: paddle.reshape(x=Tensor([559241, 80, 2, 8, 6],"float16"), shape=list[512,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([559241, 80, 2, 8, 6],"float16"), shape=list[512,160,8,6,], ) 
 shape '[512, 160, 8, 6]' is invalid for input of size 4294970880
2025-03-11 21:15:32.123587 test begin: paddle.reshape(x=Tensor([55925, 192, 20, 20],"float16"), shape=list[64,2,96,20,20,], )

[torch error] paddle.reshape(x=Tensor([55925, 192, 20, 20],"float16"), shape=list[64,2,96,20,20,], ) 
 shape '[64, 2, 96, 20, 20]' is invalid for input of size 4295040000
2025-03-11 21:15:34.484717 test begin: paddle.reshape(x=Tensor([55925, 96, 2, 20, 20],"float16"), shape=list[64,192,20,20,], )

[torch error] paddle.reshape(x=Tensor([55925, 96, 2, 20, 20],"float16"), shape=list[64,192,20,20,], ) 
 shape '[64, 192, 20, 20]' is invalid for input of size 4295040000
2025-03-11 21:15:36.151968 test begin: paddle.reshape(x=Tensor([58, 140, 280998],"float32"), shape=list[-1,2,], )

[Pass] paddle.reshape(x=Tensor([58, 140, 280998],"float32"), shape=list[-1,2,], )
2025-03-11 21:18:31.794825 test begin: paddle.reshape(x=Tensor([58, 19669840, 2],"float32"), shape=list[-1,2,], )

[Pass] paddle.reshape(x=Tensor([58, 19669840, 2],"float32"), shape=list[-1,2,], )
2025-03-11 21:21:09.105683 test begin: paddle.reshape(x=Tensor([5941931, 2, 12, 16],"float32"), shape=tuple(32,12,16,), )

[torch error] paddle.reshape(x=Tensor([5941931, 2, 12, 16],"float32"), shape=tuple(32,12,16,), ) 
 shape '[32, 12, 16]' is invalid for input of size 2281701504
2025-03-11 21:21:10.848419 test begin: paddle.reshape(x=Tensor([5941931, 2, 12, 16],"float32"), shape=tuple(4,12,16,), )

[torch error] paddle.reshape(x=Tensor([5941931, 2, 12, 16],"float32"), shape=tuple(4,12,16,), ) 
 shape '[4, 12, 16]' is invalid for input of size 2281701504
2025-03-11 21:21:12.069065 test begin: paddle.reshape(x=Tensor([594194, 160, 2, 4, 3],"float32"), shape=list[16,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([594194, 160, 2, 4, 3],"float32"), shape=list[16,320,4,3,], ) 
 shape '[16, 320, 4, 3]' is invalid for input of size 2281704960
2025-03-11 21:21:13.656719 test begin: paddle.reshape(x=Tensor([594194, 160, 2, 4, 3],"float32"), shape=list[512,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([594194, 160, 2, 4, 3],"float32"), shape=list[512,320,4,3,], ) 
 shape '[512, 320, 4, 3]' is invalid for input of size 2281704960
2025-03-11 21:21:15.325264 test begin: paddle.reshape(x=Tensor([594194, 320, 4, 3],"float32"), shape=list[16,2,160,4,3,], )

[torch error] paddle.reshape(x=Tensor([594194, 320, 4, 3],"float32"), shape=list[16,2,160,4,3,], ) 
 shape '[16, 2, 160, 4, 3]' is invalid for input of size 2281704960
2025-03-11 21:21:16.798215 test begin: paddle.reshape(x=Tensor([594194, 320, 4, 3],"float32"), shape=list[512,2,160,4,3,], )

[torch error] paddle.reshape(x=Tensor([594194, 320, 4, 3],"float32"), shape=list[512,2,160,4,3,], ) 
 shape '[512, 2, 160, 4, 3]' is invalid for input of size 2281704960
2025-03-11 21:21:18.731089 test begin: paddle.reshape(x=Tensor([59420, 192, 2, 10, 10],"float32"), shape=list[64,384,10,10,], )

[torch error] paddle.reshape(x=Tensor([59420, 192, 2, 10, 10],"float32"), shape=list[64,384,10,10,], ) 
 shape '[64, 384, 10, 10]' is invalid for input of size 2281728000
2025-03-11 21:21:20.647898 test begin: paddle.reshape(x=Tensor([59420, 384, 10, 10],"float32"), shape=list[64,2,192,10,10,], )

[torch error] paddle.reshape(x=Tensor([59420, 384, 10, 10],"float32"), shape=list[64,2,192,10,10,], ) 
 shape '[64, 2, 192, 10, 10]' is invalid for input of size 2281728000
2025-03-11 21:21:22.573122 test begin: paddle.reshape(x=Tensor([64, 1024, 1, 34817],"float32"), shape=list[64,1,2,512,], )

[torch error] paddle.reshape(x=Tensor([64, 1024, 1, 34817],"float32"), shape=list[64,1,2,512,], ) 
 shape '[64, 1, 2, 512]' is invalid for input of size 2281766912
2025-03-11 21:21:24.499823 test begin: paddle.reshape(x=Tensor([64, 1024, 1, 65537],"float16"), shape=list[64,1,2,512,], )

[torch error] paddle.reshape(x=Tensor([64, 1024, 1, 65537],"float16"), shape=list[64,1,2,512,], ) 
 shape '[64, 1, 2, 512]' is invalid for input of size 4295032832
2025-03-11 21:21:28.601165 test begin: paddle.reshape(x=Tensor([64, 1024, 34817, 1],"float32"), shape=list[64,1,2,512,], )

[torch error] paddle.reshape(x=Tensor([64, 1024, 34817, 1],"float32"), shape=list[64,1,2,512,], ) 
 shape '[64, 1, 2, 512]' is invalid for input of size 2281766912
2025-03-11 21:21:30.526156 test begin: paddle.reshape(x=Tensor([64, 1024, 65537, 1],"float16"), shape=list[64,1,2,512,], )

[torch error] paddle.reshape(x=Tensor([64, 1024, 65537, 1],"float16"), shape=list[64,1,2,512,], ) 
 shape '[64, 1, 2, 512]' is invalid for input of size 4295032832
2025-03-11 21:21:31.936897 test begin: paddle.reshape(x=Tensor([64, 103564, 2, 18, 18],"float16"), shape=list[64,192,18,18,], )

[torch error] paddle.reshape(x=Tensor([64, 103564, 2, 18, 18],"float16"), shape=list[64,192,18,18,], ) 
 shape '[64, 192, 18, 18]' is invalid for input of size 4295006208
2025-03-11 21:21:33.375296 test begin: paddle.reshape(x=Tensor([64, 1048577, 1, 64],"float16"), shape=list[64,128,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 1048577, 1, 64],"float16"), shape=list[64,128,1,1,], ) 
 shape '[64, 128, 1, 1]' is invalid for input of size 4294971392
2025-03-11 21:21:35.567281 test begin: paddle.reshape(x=Tensor([64, 1048577, 8, 8],"float16"), shape=list[64,2,192,8,8,], )

[torch error] paddle.reshape(x=Tensor([64, 1048577, 8, 8],"float16"), shape=list[64,2,192,8,8,], ) 
 shape '[64, 2, 192, 8, 8]' is invalid for input of size 4294971392
2025-03-11 21:21:37.352379 test begin: paddle.reshape(x=Tensor([64, 110036, 18, 18],"float32"), shape=list[64,2,96,18,18,], )

[torch error] paddle.reshape(x=Tensor([64, 110036, 18, 18],"float32"), shape=list[64,2,96,18,18,], ) 
 shape '[64, 2, 96, 18, 18]' is invalid for input of size 2281706496
2025-03-11 21:21:39.203946 test begin: paddle.reshape(x=Tensor([64, 11142, 2, 40, 40],"float32"), shape=list[64,96,40,40,], )

[torch error] paddle.reshape(x=Tensor([64, 11142, 2, 40, 40],"float32"), shape=list[64,96,40,40,], ) 
 shape '[64, 96, 40, 40]' is invalid for input of size 2281881600
2025-03-11 21:21:40.877837 test begin: paddle.reshape(x=Tensor([64, 116509, 24, 24],"float16"), shape=list[64,2,96,24,24,], )

[torch error] paddle.reshape(x=Tensor([64, 116509, 24, 24],"float16"), shape=list[64,2,96,24,24,], ) 
 shape '[64, 2, 96, 24, 24]' is invalid for input of size 4294987776
2025-03-11 21:21:42.796487 test begin: paddle.reshape(x=Tensor([64, 123791, 2, 12, 12],"float32"), shape=list[64,384,12,12,], )

[torch error] paddle.reshape(x=Tensor([64, 123791, 2, 12, 12],"float32"), shape=list[64,384,12,12,], ) 
 shape '[64, 384, 12, 12]' is invalid for input of size 2281715712
2025-03-11 21:21:44.014207 test begin: paddle.reshape(x=Tensor([64, 128, 1, 278529],"float32"), shape=list[64,1,2,64,], )

[torch error] paddle.reshape(x=Tensor([64, 128, 1, 278529],"float32"), shape=list[64,1,2,64,], ) 
 shape '[64, 1, 2, 64]' is invalid for input of size 2281709568
2025-03-11 21:21:46.391430 test begin: paddle.reshape(x=Tensor([64, 128, 1, 524289],"float16"), shape=list[64,1,2,64,], )

[torch error] paddle.reshape(x=Tensor([64, 128, 1, 524289],"float16"), shape=list[64,1,2,64,], ) 
 shape '[64, 1, 2, 64]' is invalid for input of size 4294975488
2025-03-11 21:21:48.252767 test begin: paddle.reshape(x=Tensor([64, 128, 278529, 1],"float32"), shape=list[64,1,2,64,], )

[torch error] paddle.reshape(x=Tensor([64, 128, 278529, 1],"float32"), shape=list[64,1,2,64,], ) 
 shape '[64, 1, 2, 64]' is invalid for input of size 2281709568
2025-03-11 21:21:50.375738 test begin: paddle.reshape(x=Tensor([64, 128, 524289, 1],"float16"), shape=list[64,1,2,64,], )

[torch error] paddle.reshape(x=Tensor([64, 128, 524289, 1],"float16"), shape=list[64,1,2,64,], ) 
 shape '[64, 1, 2, 64]' is invalid for input of size 4294975488
2025-03-11 21:21:52.190488 test begin: paddle.reshape(x=Tensor([64, 131073, 1, 512],"float16"), shape=list[64,1024,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 131073, 1, 512],"float16"), shape=list[64,1024,1,1,], ) 
 shape '[64, 1024, 1, 1]' is invalid for input of size 4295000064
2025-03-11 21:21:53.983627 test begin: paddle.reshape(x=Tensor([64, 131073, 2, 16, 16],"float16"), shape=list[64,192,16,16,], )

[torch error] paddle.reshape(x=Tensor([64, 131073, 2, 16, 16],"float16"), shape=list[64,192,16,16,], ) 
 shape '[64, 192, 16, 16]' is invalid for input of size 4295000064
2025-03-11 21:21:56.287741 test begin: paddle.reshape(x=Tensor([64, 13755, 2, 36, 36],"float32"), shape=list[64,96,36,36,], )

[torch error] paddle.reshape(x=Tensor([64, 13755, 2, 36, 36],"float32"), shape=list[64,96,36,36,], ) 
 shape '[64, 96, 36, 36]' is invalid for input of size 2281789440
2025-03-11 21:21:58.092018 test begin: paddle.reshape(x=Tensor([64, 138655, 22, 22],"float16"), shape=list[64,2,96,22,22,], )

[torch error] paddle.reshape(x=Tensor([64, 138655, 22, 22],"float16"), shape=list[64,2,96,22,22,], ) 
 shape '[64, 2, 96, 22, 22]' is invalid for input of size 4294977280
2025-03-11 21:21:59.657986 test begin: paddle.reshape(x=Tensor([64, 139265, 1, 256],"float32"), shape=list[64,512,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 139265, 1, 256],"float32"), shape=list[64,512,1,1,], ) 
 shape '[64, 512, 1, 1]' is invalid for input of size 2281717760
2025-03-11 21:22:01.829192 test begin: paddle.reshape(x=Tensor([64, 139265, 16, 16],"float32"), shape=list[64,2,96,16,16,], )

[torch error] paddle.reshape(x=Tensor([64, 139265, 16, 16],"float32"), shape=list[64,2,96,16,16,], ) 
 shape '[64, 2, 96, 16, 16]' is invalid for input of size 2281717760
2025-03-11 21:22:03.427836 test begin: paddle.reshape(x=Tensor([64, 14564, 2, 48, 48],"float16"), shape=list[64,96,48,48,], )

[torch error] paddle.reshape(x=Tensor([64, 14564, 2, 48, 48],"float16"), shape=list[64,96,48,48,], ) 
 shape '[64, 96, 48, 48]' is invalid for input of size 4295098368
2025-03-11 21:22:05.777819 test begin: paddle.reshape(x=Tensor([64, 147321, 2, 11, 11],"float32"), shape=list[64,384,11,11,], )

[torch error] paddle.reshape(x=Tensor([64, 147321, 2, 11, 11],"float32"), shape=list[64,384,11,11,], ) 
 shape '[64, 384, 11, 11]' is invalid for input of size 2281707648
2025-03-11 21:22:06.886611 test begin: paddle.reshape(x=Tensor([64, 15474, 48, 48],"float32"), shape=list[64,2,48,48,48,], )

[torch error] paddle.reshape(x=Tensor([64, 15474, 48, 48],"float32"), shape=list[64,2,48,48,48,], ) 
 shape '[64, 2, 48, 48, 48]' is invalid for input of size 2281734144
2025-03-11 21:22:08.338535 test begin: paddle.reshape(x=Tensor([64, 167773, 20, 20],"float16"), shape=list[64,2,96,20,20,], )

[torch error] paddle.reshape(x=Tensor([64, 167773, 20, 20],"float16"), shape=list[64,2,96,20,20,], ) 
 shape '[64, 2, 96, 20, 20]' is invalid for input of size 4294988800
2025-03-11 21:22:09.774050 test begin: paddle.reshape(x=Tensor([64, 17332, 2, 44, 44],"float16"), shape=list[64,96,44,44,], )

[torch error] paddle.reshape(x=Tensor([64, 17332, 2, 44, 44],"float16"), shape=list[64,96,44,44,], ) 
 shape '[64, 96, 44, 44]' is invalid for input of size 4295008256
2025-03-11 21:22:11.399275 test begin: paddle.reshape(x=Tensor([64, 17409, 2, 32, 32],"float32"), shape=list[64,96,32,32,], )

[torch error] paddle.reshape(x=Tensor([64, 17409, 2, 32, 32],"float32"), shape=list[64,96,32,32,], ) 
 shape '[64, 96, 32, 32]' is invalid for input of size 2281832448
2025-03-11 21:22:13.254891 test begin: paddle.reshape(x=Tensor([64, 178258, 2, 10, 10],"float32"), shape=list[64,384,10,10,], )

[torch error] paddle.reshape(x=Tensor([64, 178258, 2, 10, 10],"float32"), shape=list[64,384,10,10,], ) 
 shape '[64, 384, 10, 10]' is invalid for input of size 2281702400
2025-03-11 21:22:14.856676 test begin: paddle.reshape(x=Tensor([64, 18416, 44, 44],"float32"), shape=list[64,2,48,44,44,], )

[torch error] paddle.reshape(x=Tensor([64, 18416, 44, 44],"float32"), shape=list[64,2,48,44,44,], ) 
 shape '[64, 2, 48, 44, 44]' is invalid for input of size 2281816064
2025-03-11 21:22:17.266935 test begin: paddle.reshape(x=Tensor([64, 192, 10316, 18],"float32"), shape=list[64,2,96,18,18,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 10316, 18],"float32"), shape=list[64,2,96,18,18,], ) 
 shape '[64, 2, 96, 18, 18]' is invalid for input of size 2281734144
2025-03-11 21:22:19.875303 test begin: paddle.reshape(x=Tensor([64, 192, 11606, 16],"float32"), shape=list[64,2,96,16,16,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 11606, 16],"float32"), shape=list[64,2,96,16,16,], ) 
 shape '[64, 2, 96, 16, 16]' is invalid for input of size 2281832448
2025-03-11 21:22:21.814656 test begin: paddle.reshape(x=Tensor([64, 192, 1290, 12, 12],"float32"), shape=list[64,384,12,12,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 1290, 12, 12],"float32"), shape=list[64,384,12,12,], ) 
 shape '[64, 384, 12, 12]' is invalid for input of size 2282618880
2025-03-11 21:22:23.732874 test begin: paddle.reshape(x=Tensor([64, 192, 14564, 24],"float16"), shape=list[64,2,96,24,24,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 14564, 24],"float16"), shape=list[64,2,96,24,24,], ) 
 shape '[64, 2, 96, 24, 24]' is invalid for input of size 4295098368
2025-03-11 21:22:25.922009 test begin: paddle.reshape(x=Tensor([64, 192, 1535, 11, 11],"float32"), shape=list[64,384,11,11,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 1535, 11, 11],"float32"), shape=list[64,384,11,11,], ) 
 shape '[64, 384, 11, 11]' is invalid for input of size 2282311680
2025-03-11 21:22:27.774905 test begin: paddle.reshape(x=Tensor([64, 192, 15888, 22],"float16"), shape=list[64,2,96,22,22,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 15888, 22],"float16"), shape=list[64,2,96,22,22,], ) 
 shape '[64, 2, 96, 22, 22]' is invalid for input of size 4295098368
2025-03-11 21:22:29.457020 test begin: paddle.reshape(x=Tensor([64, 192, 16, 11606],"float32"), shape=list[64,2,96,16,16,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 16, 11606],"float32"), shape=list[64,2,96,16,16,], ) 
 shape '[64, 2, 96, 16, 16]' is invalid for input of size 2281832448
2025-03-11 21:22:31.056147 test begin: paddle.reshape(x=Tensor([64, 192, 16, 21846],"float16"), shape=list[64,2,96,16,16,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 16, 21846],"float16"), shape=list[64,2,96,16,16,], ) 
 shape '[64, 2, 96, 16, 16]' is invalid for input of size 4295098368
2025-03-11 21:22:32.492846 test begin: paddle.reshape(x=Tensor([64, 192, 17477, 20],"float16"), shape=list[64,2,96,20,20,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 17477, 20],"float16"), shape=list[64,2,96,20,20,], ) 
 shape '[64, 2, 96, 20, 20]' is invalid for input of size 4295147520
2025-03-11 21:22:34.228696 test begin: paddle.reshape(x=Tensor([64, 192, 18, 10316],"float32"), shape=list[64,2,96,18,18,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 18, 10316],"float32"), shape=list[64,2,96,18,18,], ) 
 shape '[64, 2, 96, 18, 18]' is invalid for input of size 2281734144
2025-03-11 21:22:35.648869 test begin: paddle.reshape(x=Tensor([64, 192, 18, 19419],"float16"), shape=list[64,2,96,18,18,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 18, 19419],"float16"), shape=list[64,2,96,18,18,], ) 
 shape '[64, 2, 96, 18, 18]' is invalid for input of size 4295172096
2025-03-11 21:22:37.636159 test begin: paddle.reshape(x=Tensor([64, 192, 1857, 10, 10],"float32"), shape=list[64,384,10,10,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 1857, 10, 10],"float32"), shape=list[64,384,10,10,], ) 
 shape '[64, 384, 10, 10]' is invalid for input of size 2281881600
2025-03-11 21:22:39.528410 test begin: paddle.reshape(x=Tensor([64, 192, 19419, 18],"float16"), shape=list[64,2,96,18,18,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 19419, 18],"float16"), shape=list[64,2,96,18,18,], ) 
 shape '[64, 2, 96, 18, 18]' is invalid for input of size 4295172096
2025-03-11 21:22:41.194449 test begin: paddle.reshape(x=Tensor([64, 192, 2, 10, 17477],"float16"), shape=list[64,384,10,10,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 10, 17477],"float16"), shape=list[64,384,10,10,], ) 
 shape '[64, 384, 10, 10]' is invalid for input of size 4295147520
2025-03-11 21:22:43.260674 test begin: paddle.reshape(x=Tensor([64, 192, 2, 10, 9285],"float32"), shape=list[64,384,10,10,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 10, 9285],"float32"), shape=list[64,384,10,10,], ) 
 shape '[64, 384, 10, 10]' is invalid for input of size 2281881600
2025-03-11 21:22:44.853133 test begin: paddle.reshape(x=Tensor([64, 192, 2, 10316, 9],"float32"), shape=list[64,384,9,9,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 10316, 9],"float32"), shape=list[64,384,9,9,], ) 
 shape '[64, 384, 9, 9]' is invalid for input of size 2281734144
2025-03-11 21:22:45.981179 test begin: paddle.reshape(x=Tensor([64, 192, 2, 11, 15888],"float16"), shape=list[64,384,11,11,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 11, 15888],"float16"), shape=list[64,384,11,11,], ) 
 shape '[64, 384, 11, 11]' is invalid for input of size 4295098368
2025-03-11 21:22:47.452509 test begin: paddle.reshape(x=Tensor([64, 192, 2, 11, 8441],"float32"), shape=list[64,384,11,11,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 11, 8441],"float32"), shape=list[64,384,11,11,], ) 
 shape '[64, 384, 11, 11]' is invalid for input of size 2281906176
2025-03-11 21:22:48.579988 test begin: paddle.reshape(x=Tensor([64, 192, 2, 11606, 8],"float32"), shape=list[64,384,8,8,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 11606, 8],"float32"), shape=list[64,384,8,8,], ) 
 shape '[64, 384, 8, 8]' is invalid for input of size 2281832448
2025-03-11 21:22:49.959836 test begin: paddle.reshape(x=Tensor([64, 192, 2, 12, 14564],"float16"), shape=list[64,384,12,12,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 12, 14564],"float16"), shape=list[64,384,12,12,], ) 
 shape '[64, 384, 12, 12]' is invalid for input of size 4295098368
2025-03-11 21:22:51.635109 test begin: paddle.reshape(x=Tensor([64, 192, 2, 12, 7737],"float32"), shape=list[64,384,12,12,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 12, 7737],"float32"), shape=list[64,384,12,12,], ) 
 shape '[64, 384, 12, 12]' is invalid for input of size 2281734144
2025-03-11 21:22:53.423892 test begin: paddle.reshape(x=Tensor([64, 192, 2, 14564, 12],"float16"), shape=list[64,384,12,12,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 14564, 12],"float16"), shape=list[64,384,12,12,], ) 
 shape '[64, 384, 12, 12]' is invalid for input of size 4295098368
2025-03-11 21:22:55.219213 test begin: paddle.reshape(x=Tensor([64, 192, 2, 15888, 11],"float16"), shape=list[64,384,11,11,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 15888, 11],"float16"), shape=list[64,384,11,11,], ) 
 shape '[64, 384, 11, 11]' is invalid for input of size 4295098368
2025-03-11 21:22:57.466447 test begin: paddle.reshape(x=Tensor([64, 192, 2, 17477, 10],"float16"), shape=list[64,384,10,10,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 17477, 10],"float16"), shape=list[64,384,10,10,], ) 
 shape '[64, 384, 10, 10]' is invalid for input of size 4295147520
2025-03-11 21:22:59.302713 test begin: paddle.reshape(x=Tensor([64, 192, 2, 19419, 9],"float16"), shape=list[64,384,9,9,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 19419, 9],"float16"), shape=list[64,384,9,9,], ) 
 shape '[64, 384, 9, 9]' is invalid for input of size 4295172096
2025-03-11 21:23:01.196518 test begin: paddle.reshape(x=Tensor([64, 192, 2, 21846, 8],"float16"), shape=list[64,384,8,8,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 21846, 8],"float16"), shape=list[64,384,8,8,], ) 
 shape '[64, 384, 8, 8]' is invalid for input of size 4295098368
2025-03-11 21:23:03.300882 test begin: paddle.reshape(x=Tensor([64, 192, 2, 7737, 12],"float32"), shape=list[64,384,12,12,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 7737, 12],"float32"), shape=list[64,384,12,12,], ) 
 shape '[64, 384, 12, 12]' is invalid for input of size 2281734144
2025-03-11 21:23:04.900180 test begin: paddle.reshape(x=Tensor([64, 192, 2, 8, 11606],"float32"), shape=list[64,384,8,8,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 8, 11606],"float32"), shape=list[64,384,8,8,], ) 
 shape '[64, 384, 8, 8]' is invalid for input of size 2281832448
2025-03-11 21:23:06.299569 test begin: paddle.reshape(x=Tensor([64, 192, 2, 8, 21846],"float16"), shape=list[64,384,8,8,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 8, 21846],"float16"), shape=list[64,384,8,8,], ) 
 shape '[64, 384, 8, 8]' is invalid for input of size 4295098368
2025-03-11 21:23:08.290125 test begin: paddle.reshape(x=Tensor([64, 192, 2, 8441, 11],"float32"), shape=list[64,384,11,11,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 8441, 11],"float32"), shape=list[64,384,11,11,], ) 
 shape '[64, 384, 11, 11]' is invalid for input of size 2281906176
2025-03-11 21:23:09.900784 test begin: paddle.reshape(x=Tensor([64, 192, 2, 9, 10316],"float32"), shape=list[64,384,9,9,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 9, 10316],"float32"), shape=list[64,384,9,9,], ) 
 shape '[64, 384, 9, 9]' is invalid for input of size 2281734144
2025-03-11 21:23:11.297341 test begin: paddle.reshape(x=Tensor([64, 192, 2, 9, 19419],"float16"), shape=list[64,384,9,9,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 9, 19419],"float16"), shape=list[64,384,9,9,], ) 
 shape '[64, 384, 9, 9]' is invalid for input of size 4295172096
2025-03-11 21:23:13.460744 test begin: paddle.reshape(x=Tensor([64, 192, 2, 9285, 10],"float32"), shape=list[64,384,10,10,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2, 9285, 10],"float32"), shape=list[64,384,10,10,], ) 
 shape '[64, 384, 10, 10]' is invalid for input of size 2281881600
2025-03-11 21:23:15.969291 test begin: paddle.reshape(x=Tensor([64, 192, 20, 17477],"float16"), shape=list[64,2,96,20,20,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 20, 17477],"float16"), shape=list[64,2,96,20,20,], ) 
 shape '[64, 2, 96, 20, 20]' is invalid for input of size 4295147520
2025-03-11 21:23:18.014875 test begin: paddle.reshape(x=Tensor([64, 192, 20, 9285],"float32"), shape=list[64,2,96,20,20,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 20, 9285],"float32"), shape=list[64,2,96,20,20,], ) 
 shape '[64, 2, 96, 20, 20]' is invalid for input of size 2281881600
2025-03-11 21:23:20.523610 test begin: paddle.reshape(x=Tensor([64, 192, 21846, 16],"float16"), shape=list[64,2,96,16,16,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 21846, 16],"float16"), shape=list[64,2,96,16,16,], ) 
 shape '[64, 2, 96, 16, 16]' is invalid for input of size 4295098368
2025-03-11 21:23:22.416274 test begin: paddle.reshape(x=Tensor([64, 192, 22, 15888],"float16"), shape=list[64,2,96,22,22,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 22, 15888],"float16"), shape=list[64,2,96,22,22,], ) 
 shape '[64, 2, 96, 22, 22]' is invalid for input of size 4295098368
2025-03-11 21:23:24.875747 test begin: paddle.reshape(x=Tensor([64, 192, 22, 8441],"float32"), shape=list[64,2,96,22,22,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 22, 8441],"float32"), shape=list[64,2,96,22,22,], ) 
 shape '[64, 2, 96, 22, 22]' is invalid for input of size 2281906176
2025-03-11 21:23:26.806536 test begin: paddle.reshape(x=Tensor([64, 192, 2293, 9, 9],"float32"), shape=list[64,384,9,9,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2293, 9, 9],"float32"), shape=list[64,384,9,9,], ) 
 shape '[64, 384, 9, 9]' is invalid for input of size 2282287104
2025-03-11 21:23:28.733106 test begin: paddle.reshape(x=Tensor([64, 192, 24, 14564],"float16"), shape=list[64,2,96,24,24,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 24, 14564],"float16"), shape=list[64,2,96,24,24,], ) 
 shape '[64, 2, 96, 24, 24]' is invalid for input of size 4295098368
2025-03-11 21:23:30.909324 test begin: paddle.reshape(x=Tensor([64, 192, 24, 7737],"float32"), shape=list[64,2,96,24,24,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 24, 7737],"float32"), shape=list[64,2,96,24,24,], ) 
 shape '[64, 2, 96, 24, 24]' is invalid for input of size 2281734144
2025-03-11 21:23:32.773705 test begin: paddle.reshape(x=Tensor([64, 192, 2428, 12, 12],"float16"), shape=list[64,384,12,12,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2428, 12, 12],"float16"), shape=list[64,384,12,12,], ) 
 shape '[64, 384, 12, 12]' is invalid for input of size 4296278016
2025-03-11 21:23:34.918141 test begin: paddle.reshape(x=Tensor([64, 192, 2889, 11, 11],"float16"), shape=list[64,384,11,11,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2889, 11, 11],"float16"), shape=list[64,384,11,11,], ) 
 shape '[64, 384, 11, 11]' is invalid for input of size 4295503872
2025-03-11 21:23:36.775909 test begin: paddle.reshape(x=Tensor([64, 192, 2902, 8, 8],"float32"), shape=list[64,384,8,8,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 2902, 8, 8],"float32"), shape=list[64,384,8,8,], ) 
 shape '[64, 384, 8, 8]' is invalid for input of size 2282225664
2025-03-11 21:23:39.306236 test begin: paddle.reshape(x=Tensor([64, 192, 3496, 10, 10],"float16"), shape=list[64,384,10,10,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 3496, 10, 10],"float16"), shape=list[64,384,10,10,], ) 
 shape '[64, 384, 10, 10]' is invalid for input of size 4295884800
2025-03-11 21:23:41.215698 test begin: paddle.reshape(x=Tensor([64, 192, 4316, 9, 9],"float16"), shape=list[64,384,9,9,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 4316, 9, 9],"float16"), shape=list[64,384,9,9,], ) 
 shape '[64, 384, 9, 9]' is invalid for input of size 4295835648
2025-03-11 21:23:43.334597 test begin: paddle.reshape(x=Tensor([64, 192, 5462, 8, 8],"float16"), shape=list[64,384,8,8,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 5462, 8, 8],"float16"), shape=list[64,384,8,8,], ) 
 shape '[64, 384, 8, 8]' is invalid for input of size 4295491584
2025-03-11 21:23:45.119915 test begin: paddle.reshape(x=Tensor([64, 192, 7737, 24],"float32"), shape=list[64,2,96,24,24,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 7737, 24],"float32"), shape=list[64,2,96,24,24,], ) 
 shape '[64, 2, 96, 24, 24]' is invalid for input of size 2281734144
2025-03-11 21:23:46.761906 test begin: paddle.reshape(x=Tensor([64, 192, 8441, 22],"float32"), shape=list[64,2,96,22,22,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 8441, 22],"float32"), shape=list[64,2,96,22,22,], ) 
 shape '[64, 2, 96, 22, 22]' is invalid for input of size 2281906176
2025-03-11 21:23:49.006815 test begin: paddle.reshape(x=Tensor([64, 192, 9285, 20],"float32"), shape=list[64,2,96,20,20,], )

[torch error] paddle.reshape(x=Tensor([64, 192, 9285, 20],"float32"), shape=list[64,2,96,20,20,], ) 
 shape '[64, 2, 96, 20, 20]' is invalid for input of size 2281881600
2025-03-11 21:23:50.839568 test begin: paddle.reshape(x=Tensor([64, 2, 1, 17825793],"float32"), shape=list[64,1024,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 2, 1, 17825793],"float32"), shape=list[64,1024,1,1,], ) 
 shape '[64, 1024, 1, 1]' is invalid for input of size 2281701504
2025-03-11 21:23:53.313924 test begin: paddle.reshape(x=Tensor([64, 2, 1, 17825793],"float32"), shape=list[64,128,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 2, 1, 17825793],"float32"), shape=list[64,128,1,1,], ) 
 shape '[64, 128, 1, 1]' is invalid for input of size 2281701504
2025-03-11 21:23:55.008698 test begin: paddle.reshape(x=Tensor([64, 2, 1, 17825793],"float32"), shape=list[64,256,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 2, 1, 17825793],"float32"), shape=list[64,256,1,1,], ) 
 shape '[64, 256, 1, 1]' is invalid for input of size 2281701504
2025-03-11 21:23:56.465245 test begin: paddle.reshape(x=Tensor([64, 2, 1, 17825793],"float32"), shape=list[64,512,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 2, 1, 17825793],"float32"), shape=list[64,512,1,1,], ) 
 shape '[64, 512, 1, 1]' is invalid for input of size 2281701504
2025-03-11 21:23:59.031771 test begin: paddle.reshape(x=Tensor([64, 2, 1, 33554433],"float16"), shape=list[64,1024,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 2, 1, 33554433],"float16"), shape=list[64,1024,1,1,], ) 
 shape '[64, 1024, 1, 1]' is invalid for input of size 4294967424
2025-03-11 21:24:01.586576 test begin: paddle.reshape(x=Tensor([64, 2, 1, 33554433],"float16"), shape=list[64,128,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 2, 1, 33554433],"float16"), shape=list[64,128,1,1,], ) 
 shape '[64, 128, 1, 1]' is invalid for input of size 4294967424
2025-03-11 21:24:03.227217 test begin: paddle.reshape(x=Tensor([64, 2, 1, 33554433],"float16"), shape=list[64,256,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 2, 1, 33554433],"float16"), shape=list[64,256,1,1,], ) 
 shape '[64, 256, 1, 1]' is invalid for input of size 4294967424
2025-03-11 21:24:05.334525 test begin: paddle.reshape(x=Tensor([64, 2, 1, 33554433],"float16"), shape=list[64,512,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 2, 1, 33554433],"float16"), shape=list[64,512,1,1,], ) 
 shape '[64, 512, 1, 1]' is invalid for input of size 4294967424
2025-03-11 21:24:07.143127 test begin: paddle.reshape(x=Tensor([64, 2, 131073, 256],"float16"), shape=list[64,512,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 2, 131073, 256],"float16"), shape=list[64,512,1,1,], ) 
 shape '[64, 512, 1, 1]' is invalid for input of size 4295000064
2025-03-11 21:24:08.823011 test begin: paddle.reshape(x=Tensor([64, 2, 139265, 128],"float32"), shape=list[64,256,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 2, 139265, 128],"float32"), shape=list[64,256,1,1,], ) 
 shape '[64, 256, 1, 1]' is invalid for input of size 2281717760
2025-03-11 21:24:12.779787 test begin: paddle.reshape(x=Tensor([64, 2, 262145, 128],"float16"), shape=list[64,256,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 2, 262145, 128],"float16"), shape=list[64,256,1,1,], ) 
 shape '[64, 256, 1, 1]' is invalid for input of size 4294983680
2025-03-11 21:24:14.950198 test begin: paddle.reshape(x=Tensor([64, 2, 278529, 64],"float32"), shape=list[64,128,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 2, 278529, 64],"float32"), shape=list[64,128,1,1,], ) 
 shape '[64, 128, 1, 1]' is invalid for input of size 2281709568
2025-03-11 21:24:16.094099 test begin: paddle.reshape(x=Tensor([64, 2, 34817, 512],"float32"), shape=list[64,1024,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 2, 34817, 512],"float32"), shape=list[64,1024,1,1,], ) 
 shape '[64, 1024, 1, 1]' is invalid for input of size 2281766912
2025-03-11 21:24:18.436397 test begin: paddle.reshape(x=Tensor([64, 2, 524289, 64],"float16"), shape=list[64,128,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 2, 524289, 64],"float16"), shape=list[64,128,1,1,], ) 
 shape '[64, 128, 1, 1]' is invalid for input of size 4294975488
2025-03-11 21:24:20.026438 test begin: paddle.reshape(x=Tensor([64, 2, 65537, 512],"float16"), shape=list[64,1024,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 2, 65537, 512],"float16"), shape=list[64,1024,1,1,], ) 
 shape '[64, 1024, 1, 1]' is invalid for input of size 4295032832
2025-03-11 21:24:22.355627 test begin: paddle.reshape(x=Tensor([64, 2, 69633, 256],"float32"), shape=list[64,512,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 2, 69633, 256],"float32"), shape=list[64,512,1,1,], ) 
 shape '[64, 512, 1, 1]' is invalid for input of size 2281734144
2025-03-11 21:24:24.236544 test begin: paddle.reshape(x=Tensor([64, 207127, 18, 18],"float16"), shape=list[64,2,96,18,18,], )

[torch error] paddle.reshape(x=Tensor([64, 207127, 18, 18],"float16"), shape=list[64,2,96,18,18,], ) 
 shape '[64, 2, 96, 18, 18]' is invalid for input of size 4294985472
2025-03-11 21:24:25.931547 test begin: paddle.reshape(x=Tensor([64, 20972, 2, 40, 40],"float16"), shape=list[64,96,40,40,], )

[torch error] paddle.reshape(x=Tensor([64, 20972, 2, 40, 40],"float16"), shape=list[64,96,40,40,], ) 
 shape '[64, 96, 40, 40]' is invalid for input of size 4295065600
2025-03-11 21:24:27.859372 test begin: paddle.reshape(x=Tensor([64, 220072, 2, 9, 9],"float32"), shape=list[64,384,9,9,], )

[torch error] paddle.reshape(x=Tensor([64, 220072, 2, 9, 9],"float32"), shape=list[64,384,9,9,], ) 
 shape '[64, 384, 9, 9]' is invalid for input of size 2281706496
2025-03-11 21:24:29.723617 test begin: paddle.reshape(x=Tensor([64, 22283, 40, 40],"float32"), shape=list[64,2,48,40,40,], )

[torch error] paddle.reshape(x=Tensor([64, 22283, 40, 40],"float32"), shape=list[64,2,48,40,40,], ) 
 shape '[64, 2, 48, 40, 40]' is invalid for input of size 2281779200
2025-03-11 21:24:31.470423 test begin: paddle.reshape(x=Tensor([64, 233017, 2, 12, 12],"float16"), shape=list[64,384,12,12,], )

[torch error] paddle.reshape(x=Tensor([64, 233017, 2, 12, 12],"float16"), shape=list[64,384,12,12,], ) 
 shape '[64, 384, 12, 12]' is invalid for input of size 4294969344
2025-03-11 21:24:33.398054 test begin: paddle.reshape(x=Tensor([64, 247581, 12, 12],"float32"), shape=list[64,2,192,12,12,], )

[torch error] paddle.reshape(x=Tensor([64, 247581, 12, 12],"float32"), shape=list[64,2,192,12,12,], ) 
 shape '[64, 2, 192, 12, 12]' is invalid for input of size 2281706496
2025-03-11 21:24:34.819078 test begin: paddle.reshape(x=Tensor([64, 256, 1, 139265],"float32"), shape=list[64,1,2,128,], )

[torch error] paddle.reshape(x=Tensor([64, 256, 1, 139265],"float32"), shape=list[64,1,2,128,], ) 
 shape '[64, 1, 2, 128]' is invalid for input of size 2281717760
2025-03-11 21:24:37.201565 test begin: paddle.reshape(x=Tensor([64, 256, 1, 262145],"float16"), shape=list[64,1,2,128,], )

[torch error] paddle.reshape(x=Tensor([64, 256, 1, 262145],"float16"), shape=list[64,1,2,128,], ) 
 shape '[64, 1, 2, 128]' is invalid for input of size 4294983680
2025-03-11 21:24:39.236124 test begin: paddle.reshape(x=Tensor([64, 256, 139265, 1],"float32"), shape=list[64,1,2,128,], )

[torch error] paddle.reshape(x=Tensor([64, 256, 139265, 1],"float32"), shape=list[64,1,2,128,], ) 
 shape '[64, 1, 2, 128]' is invalid for input of size 2281717760
2025-03-11 21:24:40.870681 test begin: paddle.reshape(x=Tensor([64, 256, 262145, 1],"float16"), shape=list[64,1,2,128,], )

[torch error] paddle.reshape(x=Tensor([64, 256, 262145, 1],"float16"), shape=list[64,1,2,128,], ) 
 shape '[64, 1, 2, 128]' is invalid for input of size 4294983680
2025-03-11 21:24:42.508054 test begin: paddle.reshape(x=Tensor([64, 25891, 2, 36, 36],"float16"), shape=list[64,96,36,36,], )

[torch error] paddle.reshape(x=Tensor([64, 25891, 2, 36, 36],"float16"), shape=list[64,96,36,36,], ) 
 shape '[64, 96, 36, 36]' is invalid for input of size 4295006208
2025-03-11 21:24:44.708872 test begin: paddle.reshape(x=Tensor([64, 262145, 1, 256],"float16"), shape=list[64,512,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 262145, 1, 256],"float16"), shape=list[64,512,1,1,], ) 
 shape '[64, 512, 1, 1]' is invalid for input of size 4294983680
2025-03-11 21:24:46.999129 test begin: paddle.reshape(x=Tensor([64, 262145, 16, 16],"float16"), shape=list[64,2,96,16,16,], )

[torch error] paddle.reshape(x=Tensor([64, 262145, 16, 16],"float16"), shape=list[64,2,96,16,16,], ) 
 shape '[64, 2, 96, 16, 16]' is invalid for input of size 4294983680
2025-03-11 21:24:49.155159 test begin: paddle.reshape(x=Tensor([64, 27509, 36, 36],"float32"), shape=list[64,2,48,36,36,], )

[torch error] paddle.reshape(x=Tensor([64, 27509, 36, 36],"float32"), shape=list[64,2,48,36,36,], ) 
 shape '[64, 2, 48, 36, 36]' is invalid for input of size 2281706496
2025-03-11 21:24:50.335729 test begin: paddle.reshape(x=Tensor([64, 277310, 2, 11, 11],"float16"), shape=list[64,384,11,11,], )

[torch error] paddle.reshape(x=Tensor([64, 277310, 2, 11, 11],"float16"), shape=list[64,384,11,11,], ) 
 shape '[64, 384, 11, 11]' is invalid for input of size 4294977280
2025-03-11 21:24:52.673767 test begin: paddle.reshape(x=Tensor([64, 278529, 1, 128],"float32"), shape=list[64,256,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 278529, 1, 128],"float32"), shape=list[64,256,1,1,], ) 
 shape '[64, 256, 1, 1]' is invalid for input of size 2281709568
2025-03-11 21:24:54.107563 test begin: paddle.reshape(x=Tensor([64, 278529, 2, 8, 8],"float32"), shape=list[64,384,8,8,], )

[torch error] paddle.reshape(x=Tensor([64, 278529, 2, 8, 8],"float32"), shape=list[64,384,8,8,], ) 
 shape '[64, 384, 8, 8]' is invalid for input of size 2281709568
2025-03-11 21:24:55.951094 test begin: paddle.reshape(x=Tensor([64, 29128, 48, 48],"float16"), shape=list[64,2,48,48,48,], )

[torch error] paddle.reshape(x=Tensor([64, 29128, 48, 48],"float16"), shape=list[64,2,48,48,48,], ) 
 shape '[64, 2, 48, 48, 48]' is invalid for input of size 4295098368
2025-03-11 21:24:57.930596 test begin: paddle.reshape(x=Tensor([64, 294642, 11, 11],"float32"), shape=list[64,2,192,11,11,], )

[torch error] paddle.reshape(x=Tensor([64, 294642, 11, 11],"float32"), shape=list[64,2,192,11,11,], ) 
 shape '[64, 2, 192, 11, 11]' is invalid for input of size 2281707648
2025-03-11 21:24:59.512800 test begin: paddle.reshape(x=Tensor([64, 30948, 2, 24, 24],"float32"), shape=list[64,192,24,24,], )

[torch error] paddle.reshape(x=Tensor([64, 30948, 2, 24, 24],"float32"), shape=list[64,192,24,24,], ) 
 shape '[64, 192, 24, 24]' is invalid for input of size 2281734144
2025-03-11 21:25:00.924309 test begin: paddle.reshape(x=Tensor([64, 32769, 2, 32, 32],"float16"), shape=list[64,96,32,32,], )

[torch error] paddle.reshape(x=Tensor([64, 32769, 2, 32, 32],"float16"), shape=list[64,96,32,32,], ) 
 shape '[64, 96, 32, 32]' is invalid for input of size 4295098368
2025-03-11 21:25:02.751768 test begin: paddle.reshape(x=Tensor([64, 335545, 2, 10, 10],"float16"), shape=list[64,384,10,10,], )

[torch error] paddle.reshape(x=Tensor([64, 335545, 2, 10, 10],"float16"), shape=list[64,384,10,10,], ) 
 shape '[64, 384, 10, 10]' is invalid for input of size 4294976000
2025-03-11 21:25:04.647900 test begin: paddle.reshape(x=Tensor([64, 34664, 44, 44],"float16"), shape=list[64,2,48,44,44,], )

[torch error] paddle.reshape(x=Tensor([64, 34664, 44, 44],"float16"), shape=list[64,2,48,44,44,], ) 
 shape '[64, 2, 48, 44, 44]' is invalid for input of size 4295008256
2025-03-11 21:25:07.107771 test begin: paddle.reshape(x=Tensor([64, 34817, 32, 32],"float32"), shape=list[64,2,48,32,32,], )

[torch error] paddle.reshape(x=Tensor([64, 34817, 32, 32],"float32"), shape=list[64,2,48,32,32,], ) 
 shape '[64, 2, 48, 32, 32]' is invalid for input of size 2281766912
2025-03-11 21:25:08.928135 test begin: paddle.reshape(x=Tensor([64, 35651585, 1, 1],"float32"), shape=list[64,1,2,128,], )

[torch error] paddle.reshape(x=Tensor([64, 35651585, 1, 1],"float32"), shape=list[64,1,2,128,], ) 
 shape '[64, 1, 2, 128]' is invalid for input of size 2281701440
2025-03-11 21:25:10.507000 test begin: paddle.reshape(x=Tensor([64, 35651585, 1, 1],"float32"), shape=list[64,1,2,256,], )

[torch error] paddle.reshape(x=Tensor([64, 35651585, 1, 1],"float32"), shape=list[64,1,2,256,], ) 
 shape '[64, 1, 2, 256]' is invalid for input of size 2281701440
2025-03-11 21:25:11.934146 test begin: paddle.reshape(x=Tensor([64, 35651585, 1, 1],"float32"), shape=list[64,1,2,512,], )

[torch error] paddle.reshape(x=Tensor([64, 35651585, 1, 1],"float32"), shape=list[64,1,2,512,], ) 
 shape '[64, 1, 2, 512]' is invalid for input of size 2281701440
2025-03-11 21:25:13.755100 test begin: paddle.reshape(x=Tensor([64, 35651585, 1, 1],"float32"), shape=list[64,1,2,64,], )

[torch error] paddle.reshape(x=Tensor([64, 35651585, 1, 1],"float32"), shape=list[64,1,2,64,], ) 
 shape '[64, 1, 2, 64]' is invalid for input of size 2281701440
2025-03-11 21:25:16.346520 test begin: paddle.reshape(x=Tensor([64, 356516, 10, 10],"float32"), shape=list[64,2,192,10,10,], )

[torch error] paddle.reshape(x=Tensor([64, 356516, 10, 10],"float32"), shape=list[64,2,192,10,10,], ) 
 shape '[64, 2, 192, 10, 10]' is invalid for input of size 2281702400
2025-03-11 21:25:18.347476 test begin: paddle.reshape(x=Tensor([64, 36831, 2, 22, 22],"float32"), shape=list[64,192,22,22,], )

[torch error] paddle.reshape(x=Tensor([64, 36831, 2, 22, 22],"float32"), shape=list[64,192,22,22,], ) 
 shape '[64, 192, 22, 22]' is invalid for input of size 2281754112
2025-03-11 21:25:20.087267 test begin: paddle.reshape(x=Tensor([64, 384, 10, 17477],"float16"), shape=list[64,2,192,10,10,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 10, 17477],"float16"), shape=list[64,2,192,10,10,], ) 
 shape '[64, 2, 192, 10, 10]' is invalid for input of size 4295147520
2025-03-11 21:25:22.410159 test begin: paddle.reshape(x=Tensor([64, 384, 10, 9285],"float32"), shape=list[64,2,192,10,10,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 10, 9285],"float32"), shape=list[64,2,192,10,10,], ) 
 shape '[64, 2, 192, 10, 10]' is invalid for input of size 2281881600
2025-03-11 21:25:24.218085 test begin: paddle.reshape(x=Tensor([64, 384, 10316, 9],"float32"), shape=list[64,2,192,9,9,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 10316, 9],"float32"), shape=list[64,2,192,9,9,], ) 
 shape '[64, 2, 192, 9, 9]' is invalid for input of size 2281734144
2025-03-11 21:25:26.769693 test begin: paddle.reshape(x=Tensor([64, 384, 11, 15888],"float16"), shape=list[64,2,192,11,11,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 11, 15888],"float16"), shape=list[64,2,192,11,11,], ) 
 shape '[64, 2, 192, 11, 11]' is invalid for input of size 4295098368
2025-03-11 21:25:28.916344 test begin: paddle.reshape(x=Tensor([64, 384, 11, 8441],"float32"), shape=list[64,2,192,11,11,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 11, 8441],"float32"), shape=list[64,2,192,11,11,], ) 
 shape '[64, 2, 192, 11, 11]' is invalid for input of size 2281906176
2025-03-11 21:25:31.185405 test begin: paddle.reshape(x=Tensor([64, 384, 11606, 8],"float32"), shape=list[64,2,192,8,8,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 11606, 8],"float32"), shape=list[64,2,192,8,8,], ) 
 shape '[64, 2, 192, 8, 8]' is invalid for input of size 2281832448
2025-03-11 21:25:33.186437 test begin: paddle.reshape(x=Tensor([64, 384, 12, 14564],"float16"), shape=list[64,2,192,12,12,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 12, 14564],"float16"), shape=list[64,2,192,12,12,], ) 
 shape '[64, 2, 192, 12, 12]' is invalid for input of size 4295098368
2025-03-11 21:25:34.610264 test begin: paddle.reshape(x=Tensor([64, 384, 12, 7737],"float32"), shape=list[64,2,192,12,12,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 12, 7737],"float32"), shape=list[64,2,192,12,12,], ) 
 shape '[64, 2, 192, 12, 12]' is invalid for input of size 2281734144
2025-03-11 21:25:36.892425 test begin: paddle.reshape(x=Tensor([64, 384, 14564, 12],"float16"), shape=list[64,2,192,12,12,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 14564, 12],"float16"), shape=list[64,2,192,12,12,], ) 
 shape '[64, 2, 192, 12, 12]' is invalid for input of size 4295098368
2025-03-11 21:25:38.303206 test begin: paddle.reshape(x=Tensor([64, 384, 15888, 11],"float16"), shape=list[64,2,192,11,11,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 15888, 11],"float16"), shape=list[64,2,192,11,11,], ) 
 shape '[64, 2, 192, 11, 11]' is invalid for input of size 4295098368
2025-03-11 21:25:39.747714 test begin: paddle.reshape(x=Tensor([64, 384, 17477, 10],"float16"), shape=list[64,2,192,10,10,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 17477, 10],"float16"), shape=list[64,2,192,10,10,], ) 
 shape '[64, 2, 192, 10, 10]' is invalid for input of size 4295147520
2025-03-11 21:25:41.160045 test begin: paddle.reshape(x=Tensor([64, 384, 19419, 9],"float16"), shape=list[64,2,192,9,9,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 19419, 9],"float16"), shape=list[64,2,192,9,9,], ) 
 shape '[64, 2, 192, 9, 9]' is invalid for input of size 4295172096
2025-03-11 21:25:42.753955 test begin: paddle.reshape(x=Tensor([64, 384, 21846, 8],"float16"), shape=list[64,2,192,8,8,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 21846, 8],"float16"), shape=list[64,2,192,8,8,], ) 
 shape '[64, 2, 192, 8, 8]' is invalid for input of size 4295098368
2025-03-11 21:25:44.558880 test begin: paddle.reshape(x=Tensor([64, 384, 7737, 12],"float32"), shape=list[64,2,192,12,12,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 7737, 12],"float32"), shape=list[64,2,192,12,12,], ) 
 shape '[64, 2, 192, 12, 12]' is invalid for input of size 2281734144
2025-03-11 21:25:47.139269 test begin: paddle.reshape(x=Tensor([64, 384, 8, 11606],"float32"), shape=list[64,2,192,8,8,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 8, 11606],"float32"), shape=list[64,2,192,8,8,], ) 
 shape '[64, 2, 192, 8, 8]' is invalid for input of size 2281832448
2025-03-11 21:25:48.786672 test begin: paddle.reshape(x=Tensor([64, 384, 8, 21846],"float16"), shape=list[64,2,192,8,8,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 8, 21846],"float16"), shape=list[64,2,192,8,8,], ) 
 shape '[64, 2, 192, 8, 8]' is invalid for input of size 4295098368
2025-03-11 21:25:51.098816 test begin: paddle.reshape(x=Tensor([64, 384, 8441, 11],"float32"), shape=list[64,2,192,11,11,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 8441, 11],"float32"), shape=list[64,2,192,11,11,], ) 
 shape '[64, 2, 192, 11, 11]' is invalid for input of size 2281906176
2025-03-11 21:25:52.729320 test begin: paddle.reshape(x=Tensor([64, 384, 9, 10316],"float32"), shape=list[64,2,192,9,9,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 9, 10316],"float32"), shape=list[64,2,192,9,9,], ) 
 shape '[64, 2, 192, 9, 9]' is invalid for input of size 2281734144
2025-03-11 21:25:54.545449 test begin: paddle.reshape(x=Tensor([64, 384, 9, 19419],"float16"), shape=list[64,2,192,9,9,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 9, 19419],"float16"), shape=list[64,2,192,9,9,], ) 
 shape '[64, 2, 192, 9, 9]' is invalid for input of size 4295172096
2025-03-11 21:25:56.654907 test begin: paddle.reshape(x=Tensor([64, 384, 9285, 10],"float32"), shape=list[64,2,192,10,10,], )

[torch error] paddle.reshape(x=Tensor([64, 384, 9285, 10],"float32"), shape=list[64,2,192,10,10,], ) 
 shape '[64, 2, 192, 10, 10]' is invalid for input of size 2281881600
2025-03-11 21:25:58.240167 test begin: paddle.reshape(x=Tensor([64, 414253, 2, 9, 9],"float16"), shape=list[64,384,9,9,], )

[torch error] paddle.reshape(x=Tensor([64, 414253, 2, 9, 9],"float16"), shape=list[64,384,9,9,], ) 
 shape '[64, 384, 9, 9]' is invalid for input of size 4294975104
2025-03-11 21:25:59.684276 test begin: paddle.reshape(x=Tensor([64, 41944, 40, 40],"float16"), shape=list[64,2,48,40,40,], )

[torch error] paddle.reshape(x=Tensor([64, 41944, 40, 40],"float16"), shape=list[64,2,48,40,40,], ) 
 shape '[64, 2, 48, 40, 40]' is invalid for input of size 4295065600
2025-03-11 21:26:01.133744 test begin: paddle.reshape(x=Tensor([64, 440144, 9, 9],"float32"), shape=list[64,2,192,9,9,], )

[torch error] paddle.reshape(x=Tensor([64, 440144, 9, 9],"float32"), shape=list[64,2,192,9,9,], ) 
 shape '[64, 2, 192, 9, 9]' is invalid for input of size 2281706496
2025-03-11 21:26:02.562791 test begin: paddle.reshape(x=Tensor([64, 44565, 2, 20, 20],"float32"), shape=list[64,192,20,20,], )

[torch error] paddle.reshape(x=Tensor([64, 44565, 2, 20, 20],"float32"), shape=list[64,192,20,20,], ) 
 shape '[64, 192, 20, 20]' is invalid for input of size 2281728000
2025-03-11 21:26:04.126648 test begin: paddle.reshape(x=Tensor([64, 466034, 12, 12],"float16"), shape=list[64,2,192,12,12,], )

[torch error] paddle.reshape(x=Tensor([64, 466034, 12, 12],"float16"), shape=list[64,2,192,12,12,], ) 
 shape '[64, 2, 192, 12, 12]' is invalid for input of size 4294969344
2025-03-11 21:26:05.514431 test begin: paddle.reshape(x=Tensor([64, 48, 1079, 36, 36],"float16"), shape=list[64,96,36,36,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 1079, 36, 36],"float16"), shape=list[64,96,36,36,], ) 
 shape '[64, 96, 36, 36]' is invalid for input of size 4295835648
2025-03-11 21:26:06.920967 test begin: paddle.reshape(x=Tensor([64, 48, 1366, 32, 32],"float16"), shape=list[64,96,32,32,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 1366, 32, 32],"float16"), shape=list[64,96,32,32,], ) 
 shape '[64, 96, 32, 32]' is invalid for input of size 4297064448
2025-03-11 21:26:08.323567 test begin: paddle.reshape(x=Tensor([64, 48, 2, 10316, 36],"float32"), shape=list[64,96,36,36,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 10316, 36],"float32"), shape=list[64,96,36,36,], ) 
 shape '[64, 96, 36, 36]' is invalid for input of size 2281734144
2025-03-11 21:26:09.487621 test begin: paddle.reshape(x=Tensor([64, 48, 2, 11606, 32],"float32"), shape=list[64,96,32,32,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 11606, 32],"float32"), shape=list[64,96,32,32,], ) 
 shape '[64, 96, 32, 32]' is invalid for input of size 2281832448
2025-03-11 21:26:10.641755 test begin: paddle.reshape(x=Tensor([64, 48, 2, 14564, 48],"float16"), shape=list[64,96,48,48,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 14564, 48],"float16"), shape=list[64,96,48,48,], ) 
 shape '[64, 96, 48, 48]' is invalid for input of size 4295098368
2025-03-11 21:26:12.236523 test begin: paddle.reshape(x=Tensor([64, 48, 2, 15888, 44],"float16"), shape=list[64,96,44,44,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 15888, 44],"float16"), shape=list[64,96,44,44,], ) 
 shape '[64, 96, 44, 44]' is invalid for input of size 4295098368
2025-03-11 21:26:14.179878 test begin: paddle.reshape(x=Tensor([64, 48, 2, 17477, 40],"float16"), shape=list[64,96,40,40,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 17477, 40],"float16"), shape=list[64,96,40,40,], ) 
 shape '[64, 96, 40, 40]' is invalid for input of size 4295147520
2025-03-11 21:26:15.991206 test begin: paddle.reshape(x=Tensor([64, 48, 2, 19419, 36],"float16"), shape=list[64,96,36,36,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 19419, 36],"float16"), shape=list[64,96,36,36,], ) 
 shape '[64, 96, 36, 36]' is invalid for input of size 4295172096
2025-03-11 21:26:17.902986 test begin: paddle.reshape(x=Tensor([64, 48, 2, 21846, 32],"float16"), shape=list[64,96,32,32,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 21846, 32],"float16"), shape=list[64,96,32,32,], ) 
 shape '[64, 96, 32, 32]' is invalid for input of size 4295098368
2025-03-11 21:26:19.912805 test begin: paddle.reshape(x=Tensor([64, 48, 2, 32, 11606],"float32"), shape=list[64,96,32,32,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 32, 11606],"float32"), shape=list[64,96,32,32,], ) 
 shape '[64, 96, 32, 32]' is invalid for input of size 2281832448
2025-03-11 21:26:21.325790 test begin: paddle.reshape(x=Tensor([64, 48, 2, 32, 21846],"float16"), shape=list[64,96,32,32,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 32, 21846],"float16"), shape=list[64,96,32,32,], ) 
 shape '[64, 96, 32, 32]' is invalid for input of size 4295098368
2025-03-11 21:26:23.396776 test begin: paddle.reshape(x=Tensor([64, 48, 2, 36, 10316],"float32"), shape=list[64,96,36,36,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 36, 10316],"float32"), shape=list[64,96,36,36,], ) 
 shape '[64, 96, 36, 36]' is invalid for input of size 2281734144
2025-03-11 21:26:25.170858 test begin: paddle.reshape(x=Tensor([64, 48, 2, 36, 19419],"float16"), shape=list[64,96,36,36,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 36, 19419],"float16"), shape=list[64,96,36,36,], ) 
 shape '[64, 96, 36, 36]' is invalid for input of size 4295172096
2025-03-11 21:26:27.211911 test begin: paddle.reshape(x=Tensor([64, 48, 2, 40, 17477],"float16"), shape=list[64,96,40,40,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 40, 17477],"float16"), shape=list[64,96,40,40,], ) 
 shape '[64, 96, 40, 40]' is invalid for input of size 4295147520
2025-03-11 21:26:29.585683 test begin: paddle.reshape(x=Tensor([64, 48, 2, 40, 9285],"float32"), shape=list[64,96,40,40,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 40, 9285],"float32"), shape=list[64,96,40,40,], ) 
 shape '[64, 96, 40, 40]' is invalid for input of size 2281881600
2025-03-11 21:26:31.450276 test begin: paddle.reshape(x=Tensor([64, 48, 2, 44, 15888],"float16"), shape=list[64,96,44,44,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 44, 15888],"float16"), shape=list[64,96,44,44,], ) 
 shape '[64, 96, 44, 44]' is invalid for input of size 4295098368
2025-03-11 21:26:33.713016 test begin: paddle.reshape(x=Tensor([64, 48, 2, 44, 8441],"float32"), shape=list[64,96,44,44,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 44, 8441],"float32"), shape=list[64,96,44,44,], ) 
 shape '[64, 96, 44, 44]' is invalid for input of size 2281906176
2025-03-11 21:26:35.583934 test begin: paddle.reshape(x=Tensor([64, 48, 2, 48, 14564],"float16"), shape=list[64,96,48,48,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 48, 14564],"float16"), shape=list[64,96,48,48,], ) 
 shape '[64, 96, 48, 48]' is invalid for input of size 4295098368
2025-03-11 21:26:37.451181 test begin: paddle.reshape(x=Tensor([64, 48, 2, 48, 7737],"float32"), shape=list[64,96,48,48,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 48, 7737],"float32"), shape=list[64,96,48,48,], ) 
 shape '[64, 96, 48, 48]' is invalid for input of size 2281734144
2025-03-11 21:26:39.079977 test begin: paddle.reshape(x=Tensor([64, 48, 2, 7737, 48],"float32"), shape=list[64,96,48,48,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 7737, 48],"float32"), shape=list[64,96,48,48,], ) 
 shape '[64, 96, 48, 48]' is invalid for input of size 2281734144
2025-03-11 21:26:40.559533 test begin: paddle.reshape(x=Tensor([64, 48, 2, 8441, 44],"float32"), shape=list[64,96,44,44,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 8441, 44],"float32"), shape=list[64,96,44,44,], ) 
 shape '[64, 96, 44, 44]' is invalid for input of size 2281906176
2025-03-11 21:26:42.272556 test begin: paddle.reshape(x=Tensor([64, 48, 2, 9285, 40],"float32"), shape=list[64,96,40,40,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 2, 9285, 40],"float32"), shape=list[64,96,40,40,], ) 
 shape '[64, 96, 40, 40]' is invalid for input of size 2281881600
2025-03-11 21:26:43.642325 test begin: paddle.reshape(x=Tensor([64, 48, 323, 48, 48],"float32"), shape=list[64,96,48,48,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 323, 48, 48],"float32"), shape=list[64,96,48,48,], ) 
 shape '[64, 96, 48, 48]' is invalid for input of size 2286157824
2025-03-11 21:26:45.541168 test begin: paddle.reshape(x=Tensor([64, 48, 384, 44, 44],"float32"), shape=list[64,96,44,44,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 384, 44, 44],"float32"), shape=list[64,96,44,44,], ) 
 shape '[64, 96, 44, 44]' is invalid for input of size 2283798528
2025-03-11 21:26:47.561074 test begin: paddle.reshape(x=Tensor([64, 48, 465, 40, 40],"float32"), shape=list[64,96,40,40,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 465, 40, 40],"float32"), shape=list[64,96,40,40,], ) 
 shape '[64, 96, 40, 40]' is invalid for input of size 2285568000
2025-03-11 21:26:49.215108 test begin: paddle.reshape(x=Tensor([64, 48, 574, 36, 36],"float32"), shape=list[64,96,36,36,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 574, 36, 36],"float32"), shape=list[64,96,36,36,], ) 
 shape '[64, 96, 36, 36]' is invalid for input of size 2285273088
2025-03-11 21:26:50.416119 test begin: paddle.reshape(x=Tensor([64, 48, 607, 48, 48],"float16"), shape=list[64,96,48,48,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 607, 48, 48],"float16"), shape=list[64,96,48,48,], ) 
 shape '[64, 96, 48, 48]' is invalid for input of size 4296278016
2025-03-11 21:26:52.610309 test begin: paddle.reshape(x=Tensor([64, 48, 723, 44, 44],"float16"), shape=list[64,96,44,44,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 723, 44, 44],"float16"), shape=list[64,96,44,44,], ) 
 shape '[64, 96, 44, 44]' is invalid for input of size 4299964416
2025-03-11 21:26:54.523062 test begin: paddle.reshape(x=Tensor([64, 48, 726, 32, 32],"float32"), shape=list[64,96,32,32,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 726, 32, 32],"float32"), shape=list[64,96,32,32,], ) 
 shape '[64, 96, 32, 32]' is invalid for input of size 2283798528
2025-03-11 21:26:56.184190 test begin: paddle.reshape(x=Tensor([64, 48, 874, 40, 40],"float16"), shape=list[64,96,40,40,], )

[torch error] paddle.reshape(x=Tensor([64, 48, 874, 40, 40],"float16"), shape=list[64,96,40,40,], ) 
 shape '[64, 96, 40, 40]' is invalid for input of size 4295884800
2025-03-11 21:26:58.549311 test begin: paddle.reshape(x=Tensor([64, 512, 1, 131073],"float16"), shape=list[64,1,2,256,], )

[torch error] paddle.reshape(x=Tensor([64, 512, 1, 131073],"float16"), shape=list[64,1,2,256,], ) 
 shape '[64, 1, 2, 256]' is invalid for input of size 4295000064
2025-03-11 21:27:00.718107 test begin: paddle.reshape(x=Tensor([64, 512, 1, 69633],"float32"), shape=list[64,1,2,256,], )

[torch error] paddle.reshape(x=Tensor([64, 512, 1, 69633],"float32"), shape=list[64,1,2,256,], ) 
 shape '[64, 1, 2, 256]' is invalid for input of size 2281734144
2025-03-11 21:27:02.641514 test begin: paddle.reshape(x=Tensor([64, 512, 131073, 1],"float16"), shape=list[64,1,2,256,], )

[torch error] paddle.reshape(x=Tensor([64, 512, 131073, 1],"float16"), shape=list[64,1,2,256,], ) 
 shape '[64, 1, 2, 256]' is invalid for input of size 4295000064
2025-03-11 21:27:04.193737 test begin: paddle.reshape(x=Tensor([64, 512, 69633, 1],"float32"), shape=list[64,1,2,256,], )

[torch error] paddle.reshape(x=Tensor([64, 512, 69633, 1],"float32"), shape=list[64,1,2,256,], ) 
 shape '[64, 1, 2, 256]' is invalid for input of size 2281734144
2025-03-11 21:27:06.576306 test begin: paddle.reshape(x=Tensor([64, 51782, 36, 36],"float16"), shape=list[64,2,48,36,36,], )

[torch error] paddle.reshape(x=Tensor([64, 51782, 36, 36],"float16"), shape=list[64,2,48,36,36,], ) 
 shape '[64, 2, 48, 36, 36]' is invalid for input of size 4295006208
2025-03-11 21:27:08.537251 test begin: paddle.reshape(x=Tensor([64, 524289, 1, 128],"float16"), shape=list[64,256,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 524289, 1, 128],"float16"), shape=list[64,256,1,1,], ) 
 shape '[64, 256, 1, 1]' is invalid for input of size 4294975488
2025-03-11 21:27:10.226536 test begin: paddle.reshape(x=Tensor([64, 524289, 2, 8, 8],"float16"), shape=list[64,384,8,8,], )

[torch error] paddle.reshape(x=Tensor([64, 524289, 2, 8, 8],"float16"), shape=list[64,384,8,8,], ) 
 shape '[64, 384, 8, 8]' is invalid for input of size 4294975488
2025-03-11 21:27:11.620014 test begin: paddle.reshape(x=Tensor([64, 55018, 2, 18, 18],"float32"), shape=list[64,192,18,18,], )

[torch error] paddle.reshape(x=Tensor([64, 55018, 2, 18, 18],"float32"), shape=list[64,192,18,18,], ) 
 shape '[64, 192, 18, 18]' is invalid for input of size 2281706496
2025-03-11 21:27:13.967476 test begin: paddle.reshape(x=Tensor([64, 554619, 11, 11],"float16"), shape=list[64,2,192,11,11,], )

[torch error] paddle.reshape(x=Tensor([64, 554619, 11, 11],"float16"), shape=list[64,2,192,11,11,], ) 
 shape '[64, 2, 192, 11, 11]' is invalid for input of size 4294969536
2025-03-11 21:27:16.142824 test begin: paddle.reshape(x=Tensor([64, 557057, 1, 64],"float32"), shape=list[64,128,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 557057, 1, 64],"float32"), shape=list[64,128,1,1,], ) 
 shape '[64, 128, 1, 1]' is invalid for input of size 2281705472
2025-03-11 21:27:18.272100 test begin: paddle.reshape(x=Tensor([64, 557057, 8, 8],"float32"), shape=list[64,2,192,8,8,], )

[torch error] paddle.reshape(x=Tensor([64, 557057, 8, 8],"float32"), shape=list[64,2,192,8,8,], ) 
 shape '[64, 2, 192, 8, 8]' is invalid for input of size 2281705472
2025-03-11 21:27:20.189881 test begin: paddle.reshape(x=Tensor([64, 58255, 2, 24, 24],"float16"), shape=list[64,192,24,24,], )

[torch error] paddle.reshape(x=Tensor([64, 58255, 2, 24, 24],"float16"), shape=list[64,192,24,24,], ) 
 shape '[64, 192, 24, 24]' is invalid for input of size 4295024640
2025-03-11 21:27:22.341184 test begin: paddle.reshape(x=Tensor([64, 61896, 24, 24],"float32"), shape=list[64,2,96,24,24,], )

[torch error] paddle.reshape(x=Tensor([64, 61896, 24, 24],"float32"), shape=list[64,2,96,24,24,], ) 
 shape '[64, 2, 96, 24, 24]' is invalid for input of size 2281734144
2025-03-11 21:27:23.934122 test begin: paddle.reshape(x=Tensor([64, 65537, 32, 32],"float16"), shape=list[64,2,48,32,32,], )

[torch error] paddle.reshape(x=Tensor([64, 65537, 32, 32],"float16"), shape=list[64,2,48,32,32,], ) 
 shape '[64, 2, 48, 32, 32]' is invalid for input of size 4295032832
2025-03-11 21:27:25.326473 test begin: paddle.reshape(x=Tensor([64, 67108865, 1, 1],"float16"), shape=list[64,1,2,128,], )

[torch error] paddle.reshape(x=Tensor([64, 67108865, 1, 1],"float16"), shape=list[64,1,2,128,], ) 
 shape '[64, 1, 2, 128]' is invalid for input of size 4294967360
2025-03-11 21:27:26.757322 test begin: paddle.reshape(x=Tensor([64, 67108865, 1, 1],"float16"), shape=list[64,1,2,256,], )

[torch error] paddle.reshape(x=Tensor([64, 67108865, 1, 1],"float16"), shape=list[64,1,2,256,], ) 
 shape '[64, 1, 2, 256]' is invalid for input of size 4294967360
2025-03-11 21:27:28.581742 test begin: paddle.reshape(x=Tensor([64, 67108865, 1, 1],"float16"), shape=list[64,1,2,512,], )

[torch error] paddle.reshape(x=Tensor([64, 67108865, 1, 1],"float16"), shape=list[64,1,2,512,], ) 
 shape '[64, 1, 2, 512]' is invalid for input of size 4294967360
2025-03-11 21:27:30.186914 test begin: paddle.reshape(x=Tensor([64, 67108865, 1, 1],"float16"), shape=list[64,1,2,64,], )

[torch error] paddle.reshape(x=Tensor([64, 67108865, 1, 1],"float16"), shape=list[64,1,2,64,], ) 
 shape '[64, 1, 2, 64]' is invalid for input of size 4294967360
2025-03-11 21:27:31.604438 test begin: paddle.reshape(x=Tensor([64, 671089, 10, 10],"float16"), shape=list[64,2,192,10,10,], )

[torch error] paddle.reshape(x=Tensor([64, 671089, 10, 10],"float16"), shape=list[64,2,192,10,10,], ) 
 shape '[64, 2, 192, 10, 10]' is invalid for input of size 4294969600
2025-03-11 21:27:33.287857 test begin: paddle.reshape(x=Tensor([64, 69328, 2, 22, 22],"float16"), shape=list[64,192,22,22,], )

[torch error] paddle.reshape(x=Tensor([64, 69328, 2, 22, 22],"float16"), shape=list[64,192,22,22,], ) 
 shape '[64, 192, 22, 22]' is invalid for input of size 4295008256
2025-03-11 21:27:35.193683 test begin: paddle.reshape(x=Tensor([64, 69633, 1, 512],"float32"), shape=list[64,1024,1,1,], )

[torch error] paddle.reshape(x=Tensor([64, 69633, 1, 512],"float32"), shape=list[64,1024,1,1,], ) 
 shape '[64, 1024, 1, 1]' is invalid for input of size 2281734144
2025-03-11 21:27:36.314387 test begin: paddle.reshape(x=Tensor([64, 69633, 2, 16, 16],"float32"), shape=list[64,192,16,16,], )

[torch error] paddle.reshape(x=Tensor([64, 69633, 2, 16, 16],"float32"), shape=list[64,192,16,16,], ) 
 shape '[64, 192, 16, 16]' is invalid for input of size 2281734144
2025-03-11 21:27:37.424935 test begin: paddle.reshape(x=Tensor([64, 73661, 22, 22],"float32"), shape=list[64,2,96,22,22,], )

[torch error] paddle.reshape(x=Tensor([64, 73661, 22, 22],"float32"), shape=list[64,2,96,22,22,], ) 
 shape '[64, 2, 96, 22, 22]' is invalid for input of size 2281723136
2025-03-11 21:27:38.553877 test begin: paddle.reshape(x=Tensor([64, 7737, 2, 48, 48],"float32"), shape=list[64,96,48,48,], )

[torch error] paddle.reshape(x=Tensor([64, 7737, 2, 48, 48],"float32"), shape=list[64,96,48,48,], ) 
 shape '[64, 96, 48, 48]' is invalid for input of size 2281734144
2025-03-11 21:27:39.673198 test begin: paddle.reshape(x=Tensor([64, 828505, 9, 9],"float16"), shape=list[64,2,192,9,9,], )

[torch error] paddle.reshape(x=Tensor([64, 828505, 9, 9],"float16"), shape=list[64,2,192,9,9,], ) 
 shape '[64, 2, 192, 9, 9]' is invalid for input of size 4294969920
2025-03-11 21:27:41.590123 test begin: paddle.reshape(x=Tensor([64, 83887, 2, 20, 20],"float16"), shape=list[64,192,20,20,], )

[torch error] paddle.reshape(x=Tensor([64, 83887, 2, 20, 20],"float16"), shape=list[64,192,20,20,], ) 
 shape '[64, 192, 20, 20]' is invalid for input of size 4295014400
2025-03-11 21:27:43.284364 test begin: paddle.reshape(x=Tensor([64, 89129, 20, 20],"float32"), shape=list[64,2,96,20,20,], )

[torch error] paddle.reshape(x=Tensor([64, 89129, 20, 20],"float32"), shape=list[64,2,96,20,20,], ) 
 shape '[64, 2, 96, 20, 20]' is invalid for input of size 2281702400
2025-03-11 21:27:44.740665 test begin: paddle.reshape(x=Tensor([64, 9208, 2, 44, 44],"float32"), shape=list[64,96,44,44,], )

[torch error] paddle.reshape(x=Tensor([64, 9208, 2, 44, 44],"float32"), shape=list[64,96,44,44,], ) 
 shape '[64, 96, 44, 44]' is invalid for input of size 2281816064
2025-03-11 21:27:46.600430 test begin: paddle.reshape(x=Tensor([64, 96, 10316, 36],"float32"), shape=list[64,2,48,36,36,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 10316, 36],"float32"), shape=list[64,2,48,36,36,], ) 
 shape '[64, 2, 48, 36, 36]' is invalid for input of size 2281734144
2025-03-11 21:27:48.466846 test begin: paddle.reshape(x=Tensor([64, 96, 1147, 18, 18],"float32"), shape=list[64,192,18,18,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 1147, 18, 18],"float32"), shape=list[64,192,18,18,], ) 
 shape '[64, 192, 18, 18]' is invalid for input of size 2283282432
2025-03-11 21:27:50.085437 test begin: paddle.reshape(x=Tensor([64, 96, 11606, 32],"float32"), shape=list[64,2,48,32,32,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 11606, 32],"float32"), shape=list[64,2,48,32,32,], ) 
 shape '[64, 2, 48, 32, 32]' is invalid for input of size 2281832448
2025-03-11 21:27:51.544099 test begin: paddle.reshape(x=Tensor([64, 96, 1214, 24, 24],"float16"), shape=list[64,192,24,24,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 1214, 24, 24],"float16"), shape=list[64,192,24,24,], ) 
 shape '[64, 192, 24, 24]' is invalid for input of size 4296278016
2025-03-11 21:27:53.036393 test begin: paddle.reshape(x=Tensor([64, 96, 1445, 22, 22],"float16"), shape=list[64,192,22,22,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 1445, 22, 22],"float16"), shape=list[64,192,22,22,], ) 
 shape '[64, 192, 22, 22]' is invalid for input of size 4296990720
2025-03-11 21:27:54.593685 test begin: paddle.reshape(x=Tensor([64, 96, 1451, 16, 16],"float32"), shape=list[64,192,16,16,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 1451, 16, 16],"float32"), shape=list[64,192,16,16,], ) 
 shape '[64, 192, 16, 16]' is invalid for input of size 2282225664
2025-03-11 21:27:56.450602 test begin: paddle.reshape(x=Tensor([64, 96, 14564, 48],"float16"), shape=list[64,2,48,48,48,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 14564, 48],"float16"), shape=list[64,2,48,48,48,], ) 
 shape '[64, 2, 48, 48, 48]' is invalid for input of size 4295098368
2025-03-11 21:27:59.127315 test begin: paddle.reshape(x=Tensor([64, 96, 15888, 44],"float16"), shape=list[64,2,48,44,44,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 15888, 44],"float16"), shape=list[64,2,48,44,44,], ) 
 shape '[64, 2, 48, 44, 44]' is invalid for input of size 4295098368
2025-03-11 21:28:00.904378 test begin: paddle.reshape(x=Tensor([64, 96, 17477, 40],"float16"), shape=list[64,2,48,40,40,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 17477, 40],"float16"), shape=list[64,2,48,40,40,], ) 
 shape '[64, 2, 48, 40, 40]' is invalid for input of size 4295147520
2025-03-11 21:28:03.056551 test begin: paddle.reshape(x=Tensor([64, 96, 1748, 20, 20],"float16"), shape=list[64,192,20,20,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 1748, 20, 20],"float16"), shape=list[64,192,20,20,], ) 
 shape '[64, 192, 20, 20]' is invalid for input of size 4295884800
2025-03-11 21:28:05.013335 test begin: paddle.reshape(x=Tensor([64, 96, 19419, 36],"float16"), shape=list[64,2,48,36,36,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 19419, 36],"float16"), shape=list[64,2,48,36,36,], ) 
 shape '[64, 2, 48, 36, 36]' is invalid for input of size 4295172096
2025-03-11 21:28:07.407433 test begin: paddle.reshape(x=Tensor([64, 96, 2, 10316, 18],"float32"), shape=list[64,192,18,18,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 10316, 18],"float32"), shape=list[64,192,18,18,], ) 
 shape '[64, 192, 18, 18]' is invalid for input of size 2281734144
2025-03-11 21:28:09.900250 test begin: paddle.reshape(x=Tensor([64, 96, 2, 11606, 16],"float32"), shape=list[64,192,16,16,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 11606, 16],"float32"), shape=list[64,192,16,16,], ) 
 shape '[64, 192, 16, 16]' is invalid for input of size 2281832448
2025-03-11 21:28:11.842092 test begin: paddle.reshape(x=Tensor([64, 96, 2, 14564, 24],"float16"), shape=list[64,192,24,24,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 14564, 24],"float16"), shape=list[64,192,24,24,], ) 
 shape '[64, 192, 24, 24]' is invalid for input of size 4295098368
2025-03-11 21:28:13.729294 test begin: paddle.reshape(x=Tensor([64, 96, 2, 15888, 22],"float16"), shape=list[64,192,22,22,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 15888, 22],"float16"), shape=list[64,192,22,22,], ) 
 shape '[64, 192, 22, 22]' is invalid for input of size 4295098368
2025-03-11 21:28:15.648885 test begin: paddle.reshape(x=Tensor([64, 96, 2, 16, 11606],"float32"), shape=list[64,192,16,16,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 16, 11606],"float32"), shape=list[64,192,16,16,], ) 
 shape '[64, 192, 16, 16]' is invalid for input of size 2281832448
2025-03-11 21:28:17.537245 test begin: paddle.reshape(x=Tensor([64, 96, 2, 16, 21846],"float16"), shape=list[64,192,16,16,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 16, 21846],"float16"), shape=list[64,192,16,16,], ) 
 shape '[64, 192, 16, 16]' is invalid for input of size 4295098368
2025-03-11 21:28:19.864945 test begin: paddle.reshape(x=Tensor([64, 96, 2, 17477, 20],"float16"), shape=list[64,192,20,20,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 17477, 20],"float16"), shape=list[64,192,20,20,], ) 
 shape '[64, 192, 20, 20]' is invalid for input of size 4295147520
2025-03-11 21:28:22.026596 test begin: paddle.reshape(x=Tensor([64, 96, 2, 18, 10316],"float32"), shape=list[64,192,18,18,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 18, 10316],"float32"), shape=list[64,192,18,18,], ) 
 shape '[64, 192, 18, 18]' is invalid for input of size 2281734144
2025-03-11 21:28:24.841538 test begin: paddle.reshape(x=Tensor([64, 96, 2, 18, 19419],"float16"), shape=list[64,192,18,18,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 18, 19419],"float16"), shape=list[64,192,18,18,], ) 
 shape '[64, 192, 18, 18]' is invalid for input of size 4295172096
2025-03-11 21:28:26.948684 test begin: paddle.reshape(x=Tensor([64, 96, 2, 19419, 18],"float16"), shape=list[64,192,18,18,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 19419, 18],"float16"), shape=list[64,192,18,18,], ) 
 shape '[64, 192, 18, 18]' is invalid for input of size 4295172096
2025-03-11 21:28:28.626452 test begin: paddle.reshape(x=Tensor([64, 96, 2, 20, 17477],"float16"), shape=list[64,192,20,20,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 20, 17477],"float16"), shape=list[64,192,20,20,], ) 
 shape '[64, 192, 20, 20]' is invalid for input of size 4295147520
2025-03-11 21:28:30.288555 test begin: paddle.reshape(x=Tensor([64, 96, 2, 20, 9285],"float32"), shape=list[64,192,20,20,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 20, 9285],"float32"), shape=list[64,192,20,20,], ) 
 shape '[64, 192, 20, 20]' is invalid for input of size 2281881600
2025-03-11 21:28:33.938168 test begin: paddle.reshape(x=Tensor([64, 96, 2, 21846, 16],"float16"), shape=list[64,192,16,16,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 21846, 16],"float16"), shape=list[64,192,16,16,], ) 
 shape '[64, 192, 16, 16]' is invalid for input of size 4295098368
2025-03-11 21:28:35.351840 test begin: paddle.reshape(x=Tensor([64, 96, 2, 22, 15888],"float16"), shape=list[64,192,22,22,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 22, 15888],"float16"), shape=list[64,192,22,22,], ) 
 shape '[64, 192, 22, 22]' is invalid for input of size 4295098368
2025-03-11 21:28:37.013632 test begin: paddle.reshape(x=Tensor([64, 96, 2, 22, 8441],"float32"), shape=list[64,192,22,22,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 22, 8441],"float32"), shape=list[64,192,22,22,], ) 
 shape '[64, 192, 22, 22]' is invalid for input of size 2281906176
2025-03-11 21:28:39.241779 test begin: paddle.reshape(x=Tensor([64, 96, 2, 24, 14564],"float16"), shape=list[64,192,24,24,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 24, 14564],"float16"), shape=list[64,192,24,24,], ) 
 shape '[64, 192, 24, 24]' is invalid for input of size 4295098368
2025-03-11 21:28:40.909292 test begin: paddle.reshape(x=Tensor([64, 96, 2, 24, 7737],"float32"), shape=list[64,192,24,24,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 24, 7737],"float32"), shape=list[64,192,24,24,], ) 
 shape '[64, 192, 24, 24]' is invalid for input of size 2281734144
2025-03-11 21:28:42.858033 test begin: paddle.reshape(x=Tensor([64, 96, 2, 7737, 24],"float32"), shape=list[64,192,24,24,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 7737, 24],"float32"), shape=list[64,192,24,24,], ) 
 shape '[64, 192, 24, 24]' is invalid for input of size 2281734144
2025-03-11 21:28:44.120234 test begin: paddle.reshape(x=Tensor([64, 96, 2, 8441, 22],"float32"), shape=list[64,192,22,22,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 8441, 22],"float32"), shape=list[64,192,22,22,], ) 
 shape '[64, 192, 22, 22]' is invalid for input of size 2281906176
2025-03-11 21:28:45.247423 test begin: paddle.reshape(x=Tensor([64, 96, 2, 9285, 20],"float32"), shape=list[64,192,20,20,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2, 9285, 20],"float32"), shape=list[64,192,20,20,], ) 
 shape '[64, 192, 20, 20]' is invalid for input of size 2281881600
2025-03-11 21:28:46.402068 test begin: paddle.reshape(x=Tensor([64, 96, 2158, 18, 18],"float16"), shape=list[64,192,18,18,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2158, 18, 18],"float16"), shape=list[64,192,18,18,], ) 
 shape '[64, 192, 18, 18]' is invalid for input of size 4295835648
2025-03-11 21:28:48.096847 test begin: paddle.reshape(x=Tensor([64, 96, 21846, 32],"float16"), shape=list[64,2,48,32,32,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 21846, 32],"float16"), shape=list[64,2,48,32,32,], ) 
 shape '[64, 2, 48, 32, 32]' is invalid for input of size 4295098368
2025-03-11 21:28:49.770994 test begin: paddle.reshape(x=Tensor([64, 96, 2731, 16, 16],"float16"), shape=list[64,192,16,16,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 2731, 16, 16],"float16"), shape=list[64,192,16,16,], ) 
 shape '[64, 192, 16, 16]' is invalid for input of size 4295491584
2025-03-11 21:28:51.326877 test begin: paddle.reshape(x=Tensor([64, 96, 32, 11606],"float32"), shape=list[64,2,48,32,32,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 32, 11606],"float32"), shape=list[64,2,48,32,32,], ) 
 shape '[64, 2, 48, 32, 32]' is invalid for input of size 2281832448
2025-03-11 21:28:52.464982 test begin: paddle.reshape(x=Tensor([64, 96, 32, 21846],"float16"), shape=list[64,2,48,32,32,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 32, 21846],"float16"), shape=list[64,2,48,32,32,], ) 
 shape '[64, 2, 48, 32, 32]' is invalid for input of size 4295098368
2025-03-11 21:28:54.152210 test begin: paddle.reshape(x=Tensor([64, 96, 36, 10316],"float32"), shape=list[64,2,48,36,36,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 36, 10316],"float32"), shape=list[64,2,48,36,36,], ) 
 shape '[64, 2, 48, 36, 36]' is invalid for input of size 2281734144
2025-03-11 21:28:55.259740 test begin: paddle.reshape(x=Tensor([64, 96, 36, 19419],"float16"), shape=list[64,2,48,36,36,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 36, 19419],"float16"), shape=list[64,2,48,36,36,], ) 
 shape '[64, 2, 48, 36, 36]' is invalid for input of size 4295172096
2025-03-11 21:28:56.823735 test begin: paddle.reshape(x=Tensor([64, 96, 40, 17477],"float16"), shape=list[64,2,48,40,40,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 40, 17477],"float16"), shape=list[64,2,48,40,40,], ) 
 shape '[64, 2, 48, 40, 40]' is invalid for input of size 4295147520
2025-03-11 21:28:59.104734 test begin: paddle.reshape(x=Tensor([64, 96, 40, 9285],"float32"), shape=list[64,2,48,40,40,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 40, 9285],"float32"), shape=list[64,2,48,40,40,], ) 
 shape '[64, 2, 48, 40, 40]' is invalid for input of size 2281881600
2025-03-11 21:29:01.359875 test begin: paddle.reshape(x=Tensor([64, 96, 44, 15888],"float16"), shape=list[64,2,48,44,44,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 44, 15888],"float16"), shape=list[64,2,48,44,44,], ) 
 shape '[64, 2, 48, 44, 44]' is invalid for input of size 4295098368
2025-03-11 21:29:03.716402 test begin: paddle.reshape(x=Tensor([64, 96, 44, 8441],"float32"), shape=list[64,2,48,44,44,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 44, 8441],"float32"), shape=list[64,2,48,44,44,], ) 
 shape '[64, 2, 48, 44, 44]' is invalid for input of size 2281906176
2025-03-11 21:29:05.344960 test begin: paddle.reshape(x=Tensor([64, 96, 48, 14564],"float16"), shape=list[64,2,48,48,48,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 48, 14564],"float16"), shape=list[64,2,48,48,48,], ) 
 shape '[64, 2, 48, 48, 48]' is invalid for input of size 4295098368
2025-03-11 21:29:07.686474 test begin: paddle.reshape(x=Tensor([64, 96, 48, 7737],"float32"), shape=list[64,2,48,48,48,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 48, 7737],"float32"), shape=list[64,2,48,48,48,], ) 
 shape '[64, 2, 48, 48, 48]' is invalid for input of size 2281734144
2025-03-11 21:29:08.913645 test begin: paddle.reshape(x=Tensor([64, 96, 645, 24, 24],"float32"), shape=list[64,192,24,24,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 645, 24, 24],"float32"), shape=list[64,192,24,24,], ) 
 shape '[64, 192, 24, 24]' is invalid for input of size 2282618880
2025-03-11 21:29:10.101953 test begin: paddle.reshape(x=Tensor([64, 96, 768, 22, 22],"float32"), shape=list[64,192,22,22,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 768, 22, 22],"float32"), shape=list[64,192,22,22,], ) 
 shape '[64, 192, 22, 22]' is invalid for input of size 2283798528
2025-03-11 21:29:11.679224 test begin: paddle.reshape(x=Tensor([64, 96, 7737, 48],"float32"), shape=list[64,2,48,48,48,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 7737, 48],"float32"), shape=list[64,2,48,48,48,], ) 
 shape '[64, 2, 48, 48, 48]' is invalid for input of size 2281734144
2025-03-11 21:29:13.333949 test begin: paddle.reshape(x=Tensor([64, 96, 8441, 44],"float32"), shape=list[64,2,48,44,44,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 8441, 44],"float32"), shape=list[64,2,48,44,44,], ) 
 shape '[64, 2, 48, 44, 44]' is invalid for input of size 2281906176
2025-03-11 21:29:14.480122 test begin: paddle.reshape(x=Tensor([64, 96, 9285, 40],"float32"), shape=list[64,2,48,40,40,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 9285, 40],"float32"), shape=list[64,2,48,40,40,], ) 
 shape '[64, 2, 48, 40, 40]' is invalid for input of size 2281881600
2025-03-11 21:29:15.627311 test begin: paddle.reshape(x=Tensor([64, 96, 929, 20, 20],"float32"), shape=list[64,192,20,20,], )

[torch error] paddle.reshape(x=Tensor([64, 96, 929, 20, 20],"float32"), shape=list[64,192,20,20,], ) 
 shape '[64, 192, 20, 20]' is invalid for input of size 2283110400
2025-03-11 21:29:17.089534 test begin: paddle.reshape(x=Tensor([69043, 192, 18, 18],"float16"), shape=list[64,2,96,18,18,], )

[torch error] paddle.reshape(x=Tensor([69043, 192, 18, 18],"float16"), shape=list[64,2,96,18,18,], ) 
 shape '[64, 2, 96, 18, 18]' is invalid for input of size 4295026944
2025-03-11 21:29:19.553874 test begin: paddle.reshape(x=Tensor([69043, 96, 2, 18, 18],"float16"), shape=list[64,192,18,18,], )

[torch error] paddle.reshape(x=Tensor([69043, 96, 2, 18, 18],"float16"), shape=list[64,192,18,18,], ) 
 shape '[64, 192, 18, 18]' is invalid for input of size 4295026944
2025-03-11 21:29:21.603419 test begin: paddle.reshape(x=Tensor([699051, 6144],"float16"), shape=list[12582912,], )

[torch error] paddle.reshape(x=Tensor([699051, 6144],"float16"), shape=list[12582912,], ) 
 shape '[12582912]' is invalid for input of size 4294969344
2025-03-11 21:29:23.568209 test begin: paddle.reshape(x=Tensor([73358, 192, 2, 9, 9],"float32"), shape=list[64,384,9,9,], )

[torch error] paddle.reshape(x=Tensor([73358, 192, 2, 9, 9],"float32"), shape=list[64,384,9,9,], ) 
 shape '[64, 384, 9, 9]' is invalid for input of size 2281727232
2025-03-11 21:29:25.421871 test begin: paddle.reshape(x=Tensor([73358, 384, 9, 9],"float32"), shape=list[64,2,192,9,9,], )

[torch error] paddle.reshape(x=Tensor([73358, 384, 9, 9],"float32"), shape=list[64,2,192,9,9,], ) 
 shape '[64, 2, 192, 9, 9]' is invalid for input of size 2281727232
2025-03-11 21:29:27.109022 test begin: paddle.reshape(x=Tensor([74275, 160, 16, 12],"float32"), shape=list[16,2,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([74275, 160, 16, 12],"float32"), shape=list[16,2,80,16,12,], ) 
 shape '[16, 2, 80, 16, 12]' is invalid for input of size 2281728000
2025-03-11 21:29:28.768098 test begin: paddle.reshape(x=Tensor([74275, 20, 2, 32, 24],"float32"), shape=list[16,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([74275, 20, 2, 32, 24],"float32"), shape=list[16,40,32,24,], ) 
 shape '[16, 40, 32, 24]' is invalid for input of size 2281728000
2025-03-11 21:29:30.253165 test begin: paddle.reshape(x=Tensor([74275, 20, 2, 32, 24],"float32"), shape=list[512,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([74275, 20, 2, 32, 24],"float32"), shape=list[512,40,32,24,], ) 
 shape '[512, 40, 32, 24]' is invalid for input of size 2281728000
2025-03-11 21:29:31.934291 test begin: paddle.reshape(x=Tensor([74275, 40, 32, 24],"float32"), shape=list[16,2,20,32,24,], )

[torch error] paddle.reshape(x=Tensor([74275, 40, 32, 24],"float32"), shape=list[16,2,20,32,24,], ) 
 shape '[16, 2, 20, 32, 24]' is invalid for input of size 2281728000
2025-03-11 21:29:33.190129 test begin: paddle.reshape(x=Tensor([74275, 40, 32, 24],"float32"), shape=list[512,2,20,32,24,], )

[torch error] paddle.reshape(x=Tensor([74275, 40, 32, 24],"float32"), shape=list[512,2,20,32,24,], ) 
 shape '[512, 2, 20, 32, 24]' is invalid for input of size 2281728000
2025-03-11 21:29:34.676996 test begin: paddle.reshape(x=Tensor([74275, 80, 2, 16, 12],"float32"), shape=list[16,160,16,12,], )

[torch error] paddle.reshape(x=Tensor([74275, 80, 2, 16, 12],"float32"), shape=list[16,160,16,12,], ) 
 shape '[16, 160, 16, 12]' is invalid for input of size 2281728000
2025-03-11 21:29:36.724298 test begin: paddle.reshape(x=Tensor([760567127, 3],"float32"), shape=list[6,], )

[torch error] paddle.reshape(x=Tensor([760567127, 3],"float32"), shape=list[6,], ) 
 shape '[6]' is invalid for input of size 2281701381
2025-03-11 21:29:38.740782 test begin: paddle.reshape(x=Tensor([77673, 192, 2, 12, 12],"float16"), shape=list[64,384,12,12,], )

[torch error] paddle.reshape(x=Tensor([77673, 192, 2, 12, 12],"float16"), shape=list[64,384,12,12,], ) 
 shape '[64, 384, 12, 12]' is invalid for input of size 4295006208
2025-03-11 21:29:41.412640 test begin: paddle.reshape(x=Tensor([77673, 384, 12, 12],"float16"), shape=list[64,2,192,12,12,], )

[torch error] paddle.reshape(x=Tensor([77673, 384, 12, 12],"float16"), shape=list[64,2,192,12,12,], ) 
 shape '[64, 2, 192, 12, 12]' is invalid for input of size 4295006208
2025-03-11 21:29:43.161985 test begin: paddle.reshape(x=Tensor([8, 285212673],"float32"), shape=list[-1,], )

[Pass] paddle.reshape(x=Tensor([8, 285212673],"float32"), shape=list[-1,], )
2025-03-11 21:32:35.974673 test begin: paddle.reshape(x=Tensor([8, 285212673],"float32"), shape=list[80,], )

[torch error] paddle.reshape(x=Tensor([8, 285212673],"float32"), shape=list[80,], ) 
 shape '[80]' is invalid for input of size 2281701384
2025-03-11 21:32:39.769337 test begin: paddle.reshape(x=Tensor([8, 536870913],"float16"), shape=list[-1,], )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f29cbb1f310>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-11 21:42:51.149965 test begin: paddle.reshape(x=Tensor([8148934, 140, 2],"float32"), shape=list[-1,2,], )

W0311 21:44:15.535229 61381 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 21:44:15.536386 61381 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.reshape(x=Tensor([8148934, 140, 2],"float32"), shape=list[-1,2,], )
2025-03-11 21:46:53.510804 test begin: paddle.reshape(x=Tensor([8388609, 2, 1, 256],"float16"), shape=list[64,512,1,1,], )

[torch error] paddle.reshape(x=Tensor([8388609, 2, 1, 256],"float16"), shape=list[64,512,1,1,], ) 
 shape '[64, 512, 1, 1]' is invalid for input of size 4294967808
2025-03-11 21:48:20.013508 test begin: paddle.reshape(x=Tensor([8388609, 512, 1, 1],"float16"), shape=list[64,1,2,256,], )

[torch error] paddle.reshape(x=Tensor([8388609, 512, 1, 1],"float16"), shape=list[64,1,2,256,], ) 
 shape '[64, 1, 2, 256]' is invalid for input of size 4294967808
2025-03-11 21:48:21.785175 test begin: paddle.reshape(x=Tensor([87382, 192, 16, 16],"float16"), shape=list[64,2,96,16,16,], )

[torch error] paddle.reshape(x=Tensor([87382, 192, 16, 16],"float16"), shape=list[64,2,96,16,16,], ) 
 shape '[64, 2, 96, 16, 16]' is invalid for input of size 4295000064
2025-03-11 21:48:23.322646 test begin: paddle.reshape(x=Tensor([87382, 96, 2, 16, 16],"float16"), shape=list[64,192,16,16,], )

[torch error] paddle.reshape(x=Tensor([87382, 96, 2, 16, 16],"float16"), shape=list[64,192,16,16,], ) 
 shape '[64, 192, 16, 16]' is invalid for input of size 4295000064
2025-03-11 21:48:24.289576 test begin: paddle.reshape(x=Tensor([8912897, 2, 1, 128],"float32"), shape=list[64,256,1,1,], )

[torch error] paddle.reshape(x=Tensor([8912897, 2, 1, 128],"float32"), shape=list[64,256,1,1,], ) 
 shape '[64, 256, 1, 1]' is invalid for input of size 2281701632
2025-03-11 21:48:28.161022 test begin: paddle.reshape(x=Tensor([8912897, 256, 1, 1],"float32"), shape=list[64,1,2,128,], )

[torch error] paddle.reshape(x=Tensor([8912897, 256, 1, 1],"float32"), shape=list[64,1,2,128,], ) 
 shape '[64, 1, 2, 128]' is invalid for input of size 2281701632
2025-03-11 21:48:29.804229 test begin: paddle.reshape(x=Tensor([92437, 192, 2, 11, 11],"float16"), shape=list[64,384,11,11,], )

[torch error] paddle.reshape(x=Tensor([92437, 192, 2, 11, 11],"float16"), shape=list[64,384,11,11,], ) 
 shape '[64, 384, 11, 11]' is invalid for input of size 4294992768
2025-03-11 21:48:32.026351 test begin: paddle.reshape(x=Tensor([92437, 384, 11, 11],"float16"), shape=list[64,2,192,11,11,], )

[torch error] paddle.reshape(x=Tensor([92437, 384, 11, 11],"float16"), shape=list[64,2,192,11,11,], ) 
 shape '[64, 2, 192, 11, 11]' is invalid for input of size 4294992768
2025-03-11 21:48:34.242466 test begin: paddle.reshape(x=Tensor([92843, 16, 2, 32, 24],"float32"), shape=list[16,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([92843, 16, 2, 32, 24],"float32"), shape=list[16,32,32,24,], ) 
 shape '[16, 32, 32, 24]' is invalid for input of size 2281709568
2025-03-11 21:48:36.290781 test begin: paddle.reshape(x=Tensor([92843, 16, 2, 32, 24],"float32"), shape=list[512,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([92843, 16, 2, 32, 24],"float32"), shape=list[512,32,32,24,], ) 
 shape '[512, 32, 32, 24]' is invalid for input of size 2281709568
2025-03-11 21:48:38.397211 test begin: paddle.reshape(x=Tensor([92843, 192, 2, 8, 8],"float32"), shape=list[64,384,8,8,], )

[torch error] paddle.reshape(x=Tensor([92843, 192, 2, 8, 8],"float32"), shape=list[64,384,8,8,], ) 
 shape '[64, 384, 8, 8]' is invalid for input of size 2281709568
2025-03-11 21:48:40.623575 test begin: paddle.reshape(x=Tensor([92843, 32, 32, 24],"float32"), shape=list[16,2,16,32,24,], )

[torch error] paddle.reshape(x=Tensor([92843, 32, 32, 24],"float32"), shape=list[16,2,16,32,24,], ) 
 shape '[16, 2, 16, 32, 24]' is invalid for input of size 2281709568
2025-03-11 21:48:42.868130 test begin: paddle.reshape(x=Tensor([92843, 32, 32, 24],"float32"), shape=list[512,2,16,32,24,], )

[torch error] paddle.reshape(x=Tensor([92843, 32, 32, 24],"float32"), shape=list[512,2,16,32,24,], ) 
 shape '[512, 2, 16, 32, 24]' is invalid for input of size 2281709568
2025-03-11 21:48:45.048863 test begin: paddle.reshape(x=Tensor([92843, 384, 8, 8],"float32"), shape=list[64,2,192,8,8,], )

[torch error] paddle.reshape(x=Tensor([92843, 384, 8, 8],"float32"), shape=list[64,2,192,8,8,], ) 
 shape '[64, 2, 192, 8, 8]' is invalid for input of size 2281709568
2025-03-11 21:48:47.256203 test begin: paddle.reshape(x=Tensor([94454, 116, 2, 14, 14],"float16"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([94454, 116, 2, 14, 14],"float16"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 4295012288
2025-03-11 21:48:49.258909 test begin: paddle.reshape(x=Tensor([94454, 116, 2, 14, 14],"float16"), shape=list[512,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([94454, 116, 2, 14, 14],"float16"), shape=list[512,232,14,14,], ) 
 shape '[512, 232, 14, 14]' is invalid for input of size 4295012288
2025-03-11 21:48:50.324142 test begin: paddle.reshape(x=Tensor([94454, 232, 14, 14],"float16"), shape=list[1536,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([94454, 232, 14, 14],"float16"), shape=list[1536,2,116,14,14,], ) 
 shape '[1536, 2, 116, 14, 14]' is invalid for input of size 4295012288
2025-03-11 21:48:51.370286 test begin: paddle.reshape(x=Tensor([94454, 232, 14, 14],"float16"), shape=list[512,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([94454, 232, 14, 14],"float16"), shape=list[512,2,116,14,14,], ) 
 shape '[512, 2, 116, 14, 14]' is invalid for input of size 4295012288
2025-03-11 21:48:54.105747 test begin: paddle.roll(Tensor([1, 114131, 7, 7, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f4995a6cc10>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-11 21:59:04.420958 test begin: paddle.roll(Tensor([1, 114131, 7, 7, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )

W0311 22:00:48.582985 69654 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 22:00:48.584462 69654 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7fd53f765250>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-11 22:09:13.442659 test begin: paddle.roll(Tensor([1, 141475, 21, 768],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )

W0311 22:10:51.155309 75054 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 22:10:51.156630 75054 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 141475, 21, 768],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
2025-03-11 22:14:02.662612 test begin: paddle.roll(Tensor([1, 141475, 21, 768],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 141475, 21, 768],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
2025-03-11 22:17:46.086236 test begin: paddle.roll(Tensor([1, 16, 13264, 14, 768],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 13264, 14, 768],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
2025-03-11 22:21:38.460743 test begin: paddle.roll(Tensor([1, 16, 13264, 14, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 13264, 14, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
2025-03-11 22:25:02.050885 test begin: paddle.roll(Tensor([1, 16, 14, 13264, 768],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 14, 13264, 768],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
2025-03-11 22:28:26.366431 test begin: paddle.roll(Tensor([1, 16, 14, 13264, 768],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 14, 13264, 768],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
2025-03-11 22:31:52.116022 test begin: paddle.roll(Tensor([1, 16, 14, 14, 1369569],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7fb91d19fbb0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-11 22:42:03.017837 test begin: paddle.roll(Tensor([1, 16, 14, 14, 1369569],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )

W0311 22:43:49.705221 92185 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 22:43:49.706475 92185 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f12a45b3d60>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-11 22:52:12.684113 test begin: paddle.roll(Tensor([1, 16, 14, 14, 727584],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )

W0311 22:53:40.506067 97408 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 22:53:40.507099 97408 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 16, 14, 14, 727584],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
2025-03-11 22:56:48.313226 test begin: paddle.roll(Tensor([1, 16, 14, 14, 727584],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 14, 14, 727584],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
2025-03-11 23:00:28.044635 test begin: paddle.roll(Tensor([1, 16, 14, 24967, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f3a32e688e0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-11 23:10:39.509532 test begin: paddle.roll(Tensor([1, 16, 14, 24967, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )

W0311 23:12:26.713384 106929 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 23:12:26.714627 106929 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7ff3785b3250>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-11 23:20:50.959386 test begin: paddle.roll(Tensor([1, 16, 14, 26527, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )

W0311 23:22:31.263577 112478 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 23:22:31.264911 112478 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 16, 14, 26527, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
2025-03-11 23:25:55.529189 test begin: paddle.roll(Tensor([1, 16, 14, 26527, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 14, 26527, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
2025-03-11 23:28:54.154504 test begin: paddle.roll(Tensor([1, 16, 14, 49933, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f33e4a988e0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-11 23:39:06.629643 test begin: paddle.roll(Tensor([1, 16, 14, 49933, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )

W0311 23:41:17.023566 122218 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 23:41:17.025068 122218 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f0961a6c250>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-11 23:49:17.301884 test begin: paddle.roll(Tensor([1, 16, 14, 7, 1455167],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )

W0311 23:50:44.954823 127622 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 23:50:44.956180 127622 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 16, 14, 7, 1455167],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
2025-03-11 23:53:19.740115 test begin: paddle.roll(Tensor([1, 16, 14, 7, 1455167],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 14, 7, 1455167],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
2025-03-11 23:56:21.560379 test begin: paddle.roll(Tensor([1, 16, 14, 7, 2739138],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f1fa3e15e80>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 00:06:35.479422 test begin: paddle.roll(Tensor([1, 16, 14, 7, 2739138],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )

W0312 00:08:36.290975 136135 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 00:08:36.293013 136135 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f0e5fbf2250>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 00:16:45.047383 test begin: paddle.roll(Tensor([1, 16, 24967, 14, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )

W0312 00:18:47.077739 141674 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 00:18:47.079006 141674 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f9da7765be0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 00:26:55.790421 test begin: paddle.roll(Tensor([1, 16, 24967, 14, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )

W0312 00:28:50.257951 147227 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 00:28:50.259320 147227 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f94713a2250>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 00:37:06.119643 test begin: paddle.roll(Tensor([1, 16, 26527, 14, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )

W0312 00:38:38.916491 152933 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 00:38:38.917774 152933 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 16, 26527, 14, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
2025-03-12 00:41:16.381802 test begin: paddle.roll(Tensor([1, 16, 26527, 14, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 26527, 14, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
2025-03-12 00:44:15.425221 test begin: paddle.roll(Tensor([1, 16, 26527, 7, 768],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 26527, 7, 768],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
2025-03-12 00:47:19.560825 test begin: paddle.roll(Tensor([1, 16, 26527, 7, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 26527, 7, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
2025-03-12 00:50:10.645103 test begin: paddle.roll(Tensor([1, 16, 26527, 7, 768],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 26527, 7, 768],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
2025-03-12 00:53:00.113219 test begin: paddle.roll(Tensor([1, 16, 26527, 7, 768],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 26527, 7, 768],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
2025-03-12 00:55:56.016835 test begin: paddle.roll(Tensor([1, 16, 49933, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f59a13737c0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 01:06:10.966890 test begin: paddle.roll(Tensor([1, 16, 49933, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )

W0312 01:07:52.823634  5335 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 01:07:52.824865  5335 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f3ad3528250>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 01:16:21.526673 test begin: paddle.roll(Tensor([1, 16, 49933, 7, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )

W0312 01:18:23.585589 10879 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 01:18:23.586916 10879 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7fa3fa5b4250>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 01:26:33.169047 test begin: paddle.roll(Tensor([1, 16, 49933, 7, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )

W0312 01:28:16.131721 16318 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 01:28:16.133205 16318 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f85e5a6cc10>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 01:36:43.779211 test begin: paddle.roll(Tensor([1, 16, 49933, 7, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )

W0312 01:38:29.253850 21384 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 01:38:29.255708 21384 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f9e9582f250>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 01:46:54.038079 test begin: paddle.roll(Tensor([1, 16, 49933, 7, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )

W0312 01:48:33.696051 26428 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 01:48:33.697373 26428 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f51235e0250>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 01:57:03.726387 test begin: paddle.roll(Tensor([1, 16, 7, 14, 1455167],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )

W0312 01:58:31.806564 30947 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 01:58:31.807762 30947 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 16, 7, 14, 1455167],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
2025-03-12 02:00:59.221078 test begin: paddle.roll(Tensor([1, 16, 7, 14, 1455167],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 7, 14, 1455167],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
2025-03-12 02:04:00.911303 test begin: paddle.roll(Tensor([1, 16, 7, 14, 2739138],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f17c18e4e80>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 02:14:09.832910 test begin: paddle.roll(Tensor([1, 16, 7, 14, 2739138],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )

W0312 02:15:52.163601 39028 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 02:15:52.164777 39028 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f52baff5250>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 02:24:18.209970 test begin: paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )

W0312 02:25:43.493564 43903 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 02:25:43.494753 43903 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
2025-03-12 02:28:02.817333 test begin: paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
2025-03-12 02:30:56.687243 test begin: paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
2025-03-12 02:33:56.766739 test begin: paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
2025-03-12 02:36:56.637829 test begin: paddle.roll(Tensor([1, 16, 7, 49933, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7eff1982a4f0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 02:47:06.367190 test begin: paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )

W0312 02:48:33.482723 54518 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 02:48:33.483966 54518 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
2025-03-12 02:51:36.274966 test begin: paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
2025-03-12 02:54:43.275172 test begin: paddle.roll(Tensor([1, 16, 7, 49933, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7fcb7a496610>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 03:04:54.164463 test begin: paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )

W0312 03:06:32.986094 63192 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 03:06:32.987373 63192 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
2025-03-12 03:09:04.125456 test begin: paddle.roll(Tensor([1, 16, 7, 49933, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7fd33c9dd970>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 03:19:16.770307 test begin: paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )

W0312 03:20:59.774782 69788 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 03:20:59.776000 69788 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
2025-03-12 03:23:59.150854 test begin: paddle.roll(Tensor([1, 16, 7, 49933, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7efb3ea17970>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 03:34:12.287506 test begin: paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )

W0312 03:35:47.766157 76907 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 03:35:47.767443 76907 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 16, 7, 26527, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
2025-03-12 03:38:17.268644 test begin: paddle.roll(Tensor([1, 16, 7, 49933, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f75c32ab970>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 03:48:28.878139 test begin: paddle.roll(Tensor([1, 16, 7, 7, 2910334],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )

W0312 03:50:03.868341 84101 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 03:50:03.869767 84101 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 16, 7, 7, 2910334],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
2025-03-12 03:52:39.942141 test begin: paddle.roll(Tensor([1, 16, 7, 7, 2910334],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 16, 7, 7, 2910334],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
2025-03-12 03:55:47.166900 test begin: paddle.roll(Tensor([1, 16, 7, 7, 5478275],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f7e83894550>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 04:05:57.036055 test begin: paddle.roll(Tensor([1, 16, 7, 7, 2910334],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )

W0312 04:07:35.094959 92598 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 04:07:35.096416 92598 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 16, 7, 7, 2910334],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
2025-03-12 04:10:11.699466 test begin: paddle.roll(Tensor([1, 16, 7, 7, 5478275],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f8cb746c970>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 04:20:21.905675 test begin: paddle.roll(Tensor([1, 16, 7, 7, 2910334],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )

W0312 04:21:56.648801 98733 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 04:21:56.650378 98733 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 16, 7, 7, 2910334],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
2025-03-12 04:24:51.718957 test begin: paddle.roll(Tensor([1, 16, 7, 7, 5478275],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f695dbc4970>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 04:35:02.918865 test begin: paddle.roll(Tensor([1, 161, 126, 112477],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )

W0312 04:36:33.534819 105113 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 04:36:33.536036 105113 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 161, 126, 112477],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
2025-03-12 04:39:32.087714 test begin: paddle.roll(Tensor([1, 161, 126, 112477],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 161, 126, 112477],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
2025-03-12 04:43:27.663023 test begin: paddle.roll(Tensor([1, 161, 147626, 96],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 161, 147626, 96],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
2025-03-12 04:46:20.717685 test begin: paddle.roll(Tensor([1, 161, 147626, 96],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 161, 147626, 96],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
2025-03-12 04:49:50.764066 test begin: paddle.roll(Tensor([1, 188633, 126, 96],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 188633, 126, 96],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
2025-03-12 04:53:20.042018 test begin: paddle.roll(Tensor([1, 188633, 126, 96],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 188633, 126, 96],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
2025-03-12 04:56:31.189307 test begin: paddle.roll(Tensor([1, 192, 144, 82527],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 192, 144, 82527],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
2025-03-12 05:00:29.539935 test begin: paddle.roll(Tensor([1, 192, 144, 82527],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 192, 144, 82527],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
2025-03-12 05:04:13.547933 test begin: paddle.roll(Tensor([1, 192, 61896, 192],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 192, 61896, 192],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
2025-03-12 05:07:27.980527 test begin: paddle.roll(Tensor([1, 192, 61896, 192],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 192, 61896, 192],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
2025-03-12 05:10:47.452239 test begin: paddle.roll(Tensor([1, 21, 141475, 768],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 21, 141475, 768],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
2025-03-12 05:14:10.325094 test begin: paddle.roll(Tensor([1, 21, 141475, 768],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 21, 141475, 768],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
2025-03-12 05:17:59.226129 test begin: paddle.roll(Tensor([1, 21, 21, 5173927],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 21, 21, 5173927],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
2025-03-12 05:21:48.400126 test begin: paddle.roll(Tensor([1, 21, 21, 5173927],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 21, 21, 5173927],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
2025-03-12 05:25:38.817509 test begin: paddle.roll(Tensor([1, 24, 24, 3961288],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 24, 24, 3961288],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
2025-03-12 05:29:25.115886 test begin: paddle.roll(Tensor([1, 24, 24, 3961288],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 24, 24, 3961288],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
2025-03-12 05:33:05.520151 test begin: paddle.roll(Tensor([1, 24, 61896, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 24, 61896, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
2025-03-12 05:37:03.770401 test begin: paddle.roll(Tensor([1, 24, 61896, 1536],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 24, 61896, 1536],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
2025-03-12 05:41:02.273990 test begin: paddle.roll(Tensor([1, 30316, 14, 14, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 30316, 14, 14, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
2025-03-12 05:44:25.793243 test begin: paddle.roll(Tensor([1, 30316, 14, 14, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 30316, 14, 14, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
2025-03-12 05:48:25.027230 test begin: paddle.roll(Tensor([1, 30316, 14, 7, 768],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 30316, 14, 7, 768],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
2025-03-12 05:51:38.334860 test begin: paddle.roll(Tensor([1, 30316, 14, 7, 768],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 30316, 14, 7, 768],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
2025-03-12 05:54:46.700454 test begin: paddle.roll(Tensor([1, 30316, 7, 14, 768],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 30316, 7, 14, 768],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
2025-03-12 05:57:54.031793 test begin: paddle.roll(Tensor([1, 30316, 7, 14, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 30316, 7, 14, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
2025-03-12 06:00:51.771597 test begin: paddle.roll(Tensor([1, 57066, 14, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7fb1c73eebb0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 06:11:01.488419 test begin: paddle.roll(Tensor([1, 161, 126, 112477],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )

W0312 06:12:27.838155 144101 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 06:12:27.839351 144101 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 161, 126, 112477],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
2025-03-12 06:14:54.015753 test begin: paddle.roll(Tensor([1, 161, 147626, 96],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 161, 147626, 96],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
2025-03-12 06:18:09.409314 test begin: paddle.roll(Tensor([1, 21, 141475, 768],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 21, 141475, 768],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
2025-03-12 06:21:10.950296 test begin: paddle.roll(Tensor([1, 24, 61896, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 24, 61896, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
2025-03-12 06:24:04.649729 test begin: paddle.roll(Tensor([1, 57066, 14, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f70e5f1ebe0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 06:34:17.879624 test begin: paddle.roll(Tensor([1, 57066, 14, 7, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )

W0312 06:35:58.276767 153655 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 06:35:58.277942 153655 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7fd401a6c250>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 06:44:29.991105 test begin: paddle.roll(Tensor([1, 57066, 14, 7, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )

W0312 06:46:15.318054 157696 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 06:46:15.319465 157696 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7fcbc79b5250>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 06:54:40.986727 test begin: paddle.roll(Tensor([1, 57066, 7, 14, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )

W0312 06:56:19.691573 162500 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 06:56:19.692822 162500 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f18633a3d60>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 07:04:49.965512 test begin: paddle.roll(Tensor([1, 57066, 7, 14, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )

W0312 07:06:33.673516  3452 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 07:06:33.674588  3452 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7fc487bf2d60>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 07:14:59.004948 test begin: paddle.roll(Tensor([1, 57066, 7, 14, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )

W0312 07:16:55.696425  7778 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 07:16:55.698318  7778 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f0ad242d250>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 07:25:11.769997 test begin: paddle.roll(Tensor([1, 60632, 7, 7, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )

W0312 07:26:45.606303 11854 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 07:26:45.607712 11854 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 60632, 7, 7, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
2025-03-12 07:30:06.067886 test begin: paddle.roll(Tensor([1, 60632, 7, 7, 768],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1, 60632, 7, 7, 768],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
2025-03-12 07:33:23.689258 test begin: paddle.roll(Tensor([1, 61896, 24, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 61896, 24, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
2025-03-12 07:36:30.482439 test begin: paddle.roll(Tensor([1, 61896, 24, 1536],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 61896, 24, 1536],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
2025-03-12 07:39:38.914401 test begin: paddle.roll(Tensor([1, 82527, 144, 192],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 82527, 144, 192],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
2025-03-12 07:43:45.436069 test begin: paddle.roll(Tensor([1, 82527, 144, 192],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1, 82527, 144, 192],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
2025-03-12 07:47:33.651955 test begin: paddle.roll(Tensor([1172, 161, 126, 96],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1172, 161, 126, 96],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
2025-03-12 07:51:05.235720 test begin: paddle.roll(Tensor([1172, 161, 126, 96],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1172, 161, 126, 96],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
2025-03-12 07:54:03.875111 test begin: paddle.roll(Tensor([12, 16, 16, 742742],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([12, 16, 16, 742742],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
2025-03-12 07:56:54.826052 test begin: paddle.roll(Tensor([12, 16, 16, 742742],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([12, 16, 16, 742742],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
2025-03-12 08:00:31.569610 test begin: paddle.roll(Tensor([12, 16, 185686, 64],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([12, 16, 185686, 64],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
2025-03-12 08:04:08.161290 test begin: paddle.roll(Tensor([12, 16, 185686, 64],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([12, 16, 185686, 64],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
2025-03-12 08:07:40.222270 test begin: paddle.roll(Tensor([12, 185686, 16, 64],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([12, 185686, 16, 64],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
2025-03-12 08:11:03.305995 test begin: paddle.roll(Tensor([12, 185686, 16, 64],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([12, 185686, 16, 64],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
2025-03-12 08:14:28.792926 test begin: paddle.roll(Tensor([12, 185686, 32, 32],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([12, 185686, 32, 32],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
2025-03-12 08:18:27.800699 test begin: paddle.roll(Tensor([12, 185686, 32, 32],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([12, 185686, 32, 32],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
2025-03-12 08:22:24.411310 test begin: paddle.roll(Tensor([12, 32, 185686, 32],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([12, 32, 185686, 32],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
2025-03-12 08:25:28.491987 test begin: paddle.roll(Tensor([12, 32, 185686, 32],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([12, 32, 185686, 32],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
2025-03-12 08:29:26.476441 test begin: paddle.roll(Tensor([12, 32, 32, 185686],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([12, 32, 32, 185686],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
2025-03-12 08:32:58.839587 test begin: paddle.roll(Tensor([12, 32, 32, 185686],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([12, 32, 32, 185686],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
2025-03-12 08:36:33.061600 test begin: paddle.roll(Tensor([139265, 16, 16, 64],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([139265, 16, 16, 64],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
2025-03-12 08:39:51.515720 test begin: paddle.roll(Tensor([139265, 16, 16, 64],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([139265, 16, 16, 64],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
2025-03-12 08:43:11.668167 test begin: paddle.roll(Tensor([1431655766, 3],"float16"), shifts=1, )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f2577bf2580>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 08:53:22.174276 test begin: paddle.roll(Tensor([1, 82527, 144, 192],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )

W0312 08:54:49.397101 49287 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 08:54:49.398636 49287 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1, 82527, 144, 192],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
2025-03-12 08:57:24.716424 test begin: paddle.roll(Tensor([1172, 161, 126, 96],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([1172, 161, 126, 96],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
2025-03-12 09:00:31.563259 test begin: paddle.roll(Tensor([12, 185686, 16, 64],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([12, 185686, 16, 64],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
2025-03-12 09:04:35.903107 test begin: paddle.roll(Tensor([12, 185686, 32, 32],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([12, 185686, 32, 32],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
2025-03-12 09:07:50.208119 test begin: paddle.roll(Tensor([12, 185686, 32, 32],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([12, 185686, 32, 32],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
2025-03-12 09:11:24.111130 test begin: paddle.roll(Tensor([1431655766, 3],"float16"), shifts=1, axis=0, )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f42f3fc84f0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 09:21:36.021133 test begin: paddle.roll(Tensor([1895, 16, 14, 14, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )

W0312 09:22:59.635236 62471 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 09:22:59.636416 62471 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.roll(Tensor([1895, 16, 14, 14, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
2025-03-12 09:25:22.590117 test begin: paddle.roll(Tensor([1895, 16, 14, 14, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1895, 16, 14, 14, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
2025-03-12 09:28:02.409131 test begin: paddle.roll(Tensor([1895, 16, 14, 7, 768],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1895, 16, 14, 7, 768],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
2025-03-12 09:30:49.214194 test begin: paddle.roll(Tensor([1895, 16, 14, 7, 768],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1895, 16, 14, 7, 768],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
2025-03-12 09:33:35.198848 test begin: paddle.roll(Tensor([1895, 16, 7, 14, 768],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1895, 16, 7, 14, 768],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
2025-03-12 09:36:35.882864 test begin: paddle.roll(Tensor([1895, 16, 7, 14, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )

[Pass] paddle.roll(Tensor([1895, 16, 7, 14, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
2025-03-12 09:39:37.363666 test begin: paddle.roll(Tensor([2281701379],"float32"), -2, name=None, )

[Pass] paddle.roll(Tensor([2281701379],"float32"), -2, name=None, )
2025-03-12 09:42:37.142429 test begin: paddle.roll(Tensor([2281701379],"float32"), -5, name=None, )

[Pass] paddle.roll(Tensor([2281701379],"float32"), -5, name=None, )
2025-03-12 09:45:33.505096 test begin: paddle.roll(Tensor([2579, 24, 24, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([2579, 24, 24, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
2025-03-12 09:48:44.566942 test begin: paddle.roll(Tensor([2579, 24, 24, 1536],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )

[Pass] paddle.roll(Tensor([2579, 24, 24, 1536],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
2025-03-12 09:52:01.812213 test begin: paddle.roll(Tensor([3, 1431655766],"float16"), shifts=1, )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7fcd18cbf760>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 10:02:11.245744 test begin: paddle.roll(Tensor([3, 1431655766],"float16"), shifts=1, axis=0, )

W0312 10:03:51.382071 83486 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 10:03:51.383283 83486 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f37ddbf3d60>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 10:12:19.877142 test begin: paddle.roll(Tensor([3567, 16, 14, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )

W0312 10:13:56.349929 87456 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 10:13:56.351096 87456 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f916e42dbe0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 10:22:28.134219 test begin: paddle.roll(Tensor([3567, 16, 14, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )

W0312 10:24:14.766626 91851 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 10:24:14.767745 91851 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f55dc5b3bb0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 10:32:38.415891 test begin: paddle.roll(Tensor([3567, 16, 14, 7, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )

W0312 10:34:41.769985 97027 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 10:34:41.771202 97027 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 86, in func_timeout
    thread.join(timeout)
  File "/usr/lib/python3.9/threading.py", line 1064, in join
    self._wait_for_tstate_lock(timeout=max(timeout, 0))
  File "/usr/lib/python3.9/threading.py", line 1080, in _wait_for_tstate_lock
    if lock.acquire(block, timeout):
KeyboardInterrupt
2025-03-12 10:48:25.400901 test begin: paddle.reshape(Tensor([4, 14464, 74240],"float16"), shape=tuple(-1,232,320,), )

W0312 10:50:19.639382 104328 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 10:50:19.640609 104328 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f726b3eebb0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 10:58:33.038886 test begin: paddle.reshape(Tensor([4, 14514, 73984],"float16"), shape=tuple(-1,272,272,), )

W0312 11:00:36.897814 110373 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 11:00:36.899104 110373 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f2ec642dbb0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 11:08:40.409473 test begin: paddle.reshape(Tensor([4, 14717, 72960],"float16"), shape=tuple(-1,240,304,), )

W0312 11:10:37.987607 116105 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 11:10:37.989454 116105 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7fd1695dfbb0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 11:19:00.581998 test begin: paddle.reshape(Tensor([4, 15, 113180, 336],"float32"), shape=list[-1,280,336,], )

W0312 11:20:40.983572 121632 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 11:20:40.985805 121632 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[torch error] paddle.reshape(Tensor([4, 15, 113180, 336],"float32"), shape=list[-1,280,336,], ) 
 shape '[-1, 280, 336]' is invalid for input of size 2281708800
2025-03-12 11:20:44.009764 test begin: paddle.reshape(Tensor([4, 15, 113180, 336],"float32"), shape=list[-1,288,336,], )

[torch error] paddle.reshape(Tensor([4, 15, 113180, 336],"float32"), shape=list[-1,288,336,], ) 
 shape '[-1, 288, 336]' is invalid for input of size 2281708800
2025-03-12 11:20:47.137749 test begin: paddle.reshape(Tensor([4, 15, 115941, 328],"float32"), shape=list[-1,208,328,], )

[torch error] paddle.reshape(Tensor([4, 15, 115941, 328],"float32"), shape=list[-1,208,328,], ) 
 shape '[-1, 208, 328]' is invalid for input of size 2281718880
2025-03-12 11:20:51.699733 test begin: paddle.reshape(Tensor([4, 15, 115941, 328],"float32"), shape=list[-1,280,328,], )

[torch error] paddle.reshape(Tensor([4, 15, 115941, 328],"float32"), shape=list[-1,280,328,], ) 
 shape '[-1, 280, 328]' is invalid for input of size 2281718880
2025-03-12 11:21:01.791424 test begin: paddle.reshape(Tensor([4, 15, 115941, 328],"float32"), shape=list[-1,304,328,], )

[torch error] paddle.reshape(Tensor([4, 15, 115941, 328],"float32"), shape=list[-1,304,328,], ) 
 shape '[-1, 304, 328]' is invalid for input of size 2281718880
2025-03-12 11:21:04.345377 test begin: paddle.reshape(Tensor([4, 15, 121886, 312],"float32"), shape=list[-1,200,312,], )

[torch error] paddle.reshape(Tensor([4, 15, 121886, 312],"float32"), shape=list[-1,200,312,], ) 
 shape '[-1, 200, 312]' is invalid for input of size 2281705920
2025-03-12 11:21:06.526021 test begin: paddle.reshape(Tensor([4, 15, 121886, 312],"float32"), shape=list[-1,272,312,], )

[torch error] paddle.reshape(Tensor([4, 15, 121886, 312],"float32"), shape=list[-1,272,312,], ) 
 shape '[-1, 272, 312]' is invalid for input of size 2281705920
2025-03-12 11:21:09.870489 test begin: paddle.reshape(Tensor([4, 15, 121886, 312],"float32"), shape=list[-1,304,312,], )

[torch error] paddle.reshape(Tensor([4, 15, 121886, 312],"float32"), shape=list[-1,304,312,], ) 
 shape '[-1, 304, 312]' is invalid for input of size 2281705920
2025-03-12 11:21:12.153456 test begin: paddle.reshape(Tensor([4, 15, 125094, 304],"float32"), shape=list[-1,208,304,], )

[torch error] paddle.reshape(Tensor([4, 15, 125094, 304],"float32"), shape=list[-1,208,304,], ) 
 shape '[-1, 208, 304]' is invalid for input of size 2281714560
2025-03-12 11:21:15.218992 test begin: paddle.reshape(Tensor([4, 15, 125094, 304],"float32"), shape=list[-1,216,304,], )

[torch error] paddle.reshape(Tensor([4, 15, 125094, 304],"float32"), shape=list[-1,216,304,], ) 
 shape '[-1, 216, 304]' is invalid for input of size 2281714560
2025-03-12 11:21:17.402660 test begin: paddle.reshape(Tensor([4, 15, 125094, 304],"float32"), shape=list[-1,256,304,], )

[torch error] paddle.reshape(Tensor([4, 15, 125094, 304],"float32"), shape=list[-1,256,304,], ) 
 shape '[-1, 256, 304]' is invalid for input of size 2281714560
2025-03-12 11:21:19.830269 test begin: paddle.reshape(Tensor([4, 15, 125094, 304],"float32"), shape=list[-1,312,304,], )

[torch error] paddle.reshape(Tensor([4, 15, 125094, 304],"float32"), shape=list[-1,312,304,], ) 
 shape '[-1, 312, 304]' is invalid for input of size 2281714560
2025-03-12 11:21:22.434666 test begin: paddle.reshape(Tensor([4, 15, 125094, 304],"float32"), shape=list[-1,328,304,], )

[torch error] paddle.reshape(Tensor([4, 15, 125094, 304],"float32"), shape=list[-1,328,304,], ) 
 shape '[-1, 328, 304]' is invalid for input of size 2281714560
2025-03-12 11:21:25.725402 test begin: paddle.reshape(Tensor([4, 15, 125094, 304],"float32"), shape=list[-1,336,304,], )

[torch error] paddle.reshape(Tensor([4, 15, 125094, 304],"float32"), shape=list[-1,336,304,], ) 
 shape '[-1, 336, 304]' is invalid for input of size 2281714560
2025-03-12 11:21:28.512055 test begin: paddle.reshape(Tensor([4, 15, 128475, 296],"float32"), shape=list[-1,216,296,], )

[torch error] paddle.reshape(Tensor([4, 15, 128475, 296],"float32"), shape=list[-1,216,296,], ) 
 shape '[-1, 216, 296]' is invalid for input of size 2281716000
2025-03-12 11:21:31.673485 test begin: paddle.reshape(Tensor([4, 15, 128475, 296],"float32"), shape=list[-1,272,296,], )

[torch error] paddle.reshape(Tensor([4, 15, 128475, 296],"float32"), shape=list[-1,272,296,], ) 
 shape '[-1, 272, 296]' is invalid for input of size 2281716000
2025-03-12 11:21:34.166801 test begin: paddle.reshape(Tensor([4, 15, 128475, 296],"float32"), shape=list[-1,304,296,], )

[torch error] paddle.reshape(Tensor([4, 15, 128475, 296],"float32"), shape=list[-1,304,296,], ) 
 shape '[-1, 304, 296]' is invalid for input of size 2281716000
2025-03-12 11:21:37.269597 test begin: paddle.reshape(Tensor([4, 15, 139811, 272],"float32"), shape=list[-1,208,272,], )

[torch error] paddle.reshape(Tensor([4, 15, 139811, 272],"float32"), shape=list[-1,208,272,], ) 
 shape '[-1, 208, 272]' is invalid for input of size 2281715520
2025-03-12 11:21:39.572685 test begin: paddle.reshape(Tensor([4, 15, 139811, 272],"float32"), shape=list[-1,248,272,], )

[torch error] paddle.reshape(Tensor([4, 15, 139811, 272],"float32"), shape=list[-1,248,272,], ) 
 shape '[-1, 248, 272]' is invalid for input of size 2281715520
2025-03-12 11:21:42.961701 test begin: paddle.reshape(Tensor([4, 15, 139811, 272],"float32"), shape=list[-1,296,272,], )

[torch error] paddle.reshape(Tensor([4, 15, 139811, 272],"float32"), shape=list[-1,296,272,], ) 
 shape '[-1, 296, 272]' is invalid for input of size 2281715520
2025-03-12 11:21:45.254496 test begin: paddle.reshape(Tensor([4, 15, 139811, 272],"float32"), shape=list[-1,312,272,], )

[torch error] paddle.reshape(Tensor([4, 15, 139811, 272],"float32"), shape=list[-1,312,272,], ) 
 shape '[-1, 312, 272]' is invalid for input of size 2281715520
2025-03-12 11:21:47.750744 test begin: paddle.reshape(Tensor([4, 15, 176058, 216],"float32"), shape=list[-1,272,216,], )

[torch error] paddle.reshape(Tensor([4, 15, 176058, 216],"float32"), shape=list[-1,272,216,], ) 
 shape '[-1, 272, 216]' is invalid for input of size 2281711680
2025-03-12 11:21:49.930211 test begin: paddle.reshape(Tensor([4, 15, 190142, 200],"float32"), shape=list[-1,328,200,], )

[torch error] paddle.reshape(Tensor([4, 15, 190142, 200],"float32"), shape=list[-1,328,200,], ) 
 shape '[-1, 328, 200]' is invalid for input of size 2281704000
2025-03-12 11:21:52.319070 test begin: paddle.reshape(Tensor([4, 15, 200, 190142],"float32"), shape=list[-1,200,312,], )

[torch error] paddle.reshape(Tensor([4, 15, 200, 190142],"float32"), shape=list[-1,200,312,], ) 
 shape '[-1, 200, 312]' is invalid for input of size 2281704000
2025-03-12 11:21:55.177210 test begin: paddle.reshape(Tensor([4, 15, 208, 182829],"float32"), shape=list[-1,208,272,], )

[torch error] paddle.reshape(Tensor([4, 15, 208, 182829],"float32"), shape=list[-1,208,272,], ) 
 shape '[-1, 208, 272]' is invalid for input of size 2281705920
2025-03-12 11:21:59.199539 test begin: paddle.reshape(Tensor([4, 15, 208, 182829],"float32"), shape=list[-1,208,304,], )

[torch error] paddle.reshape(Tensor([4, 15, 208, 182829],"float32"), shape=list[-1,208,304,], ) 
 shape '[-1, 208, 304]' is invalid for input of size 2281705920
2025-03-12 11:22:01.471243 test begin: paddle.reshape(Tensor([4, 15, 208, 182829],"float32"), shape=list[-1,208,328,], )

[torch error] paddle.reshape(Tensor([4, 15, 208, 182829],"float32"), shape=list[-1,208,328,], ) 
 shape '[-1, 208, 328]' is invalid for input of size 2281705920
2025-03-12 11:22:04.155263 test begin: paddle.reshape(Tensor([4, 15, 216, 176058],"float32"), shape=list[-1,216,296,], )

[torch error] paddle.reshape(Tensor([4, 15, 216, 176058],"float32"), shape=list[-1,216,296,], ) 
 shape '[-1, 216, 296]' is invalid for input of size 2281711680
2025-03-12 11:22:06.800142 test begin: paddle.reshape(Tensor([4, 15, 216, 176058],"float32"), shape=list[-1,216,304,], )

[torch error] paddle.reshape(Tensor([4, 15, 216, 176058],"float32"), shape=list[-1,216,304,], ) 
 shape '[-1, 216, 304]' is invalid for input of size 2281711680
2025-03-12 11:22:09.481542 test begin: paddle.reshape(Tensor([4, 15, 248, 153341],"float32"), shape=list[-1,248,272,], )

[torch error] paddle.reshape(Tensor([4, 15, 248, 153341],"float32"), shape=list[-1,248,272,], ) 
 shape '[-1, 248, 272]' is invalid for input of size 2281714080
2025-03-12 11:22:11.698074 test begin: paddle.reshape(Tensor([4, 15, 256, 148549],"float32"), shape=list[-1,256,304,], )

[torch error] paddle.reshape(Tensor([4, 15, 256, 148549],"float32"), shape=list[-1,256,304,], ) 
 shape '[-1, 256, 304]' is invalid for input of size 2281712640
2025-03-12 11:22:13.762607 test begin: paddle.reshape(Tensor([4, 15, 272, 139811],"float32"), shape=list[-1,272,216,], )

[torch error] paddle.reshape(Tensor([4, 15, 272, 139811],"float32"), shape=list[-1,272,216,], ) 
 shape '[-1, 272, 216]' is invalid for input of size 2281715520
2025-03-12 11:22:16.468619 test begin: paddle.reshape(Tensor([4, 15, 272, 139811],"float32"), shape=list[-1,272,296,], )

[torch error] paddle.reshape(Tensor([4, 15, 272, 139811],"float32"), shape=list[-1,272,296,], ) 
 shape '[-1, 272, 296]' is invalid for input of size 2281715520
2025-03-12 11:22:19.546215 test begin: paddle.reshape(Tensor([4, 15, 272, 139811],"float32"), shape=list[-1,272,312,], )

[torch error] paddle.reshape(Tensor([4, 15, 272, 139811],"float32"), shape=list[-1,272,312,], ) 
 shape '[-1, 272, 312]' is invalid for input of size 2281715520
2025-03-12 11:22:21.935883 test begin: paddle.reshape(Tensor([4, 15, 280, 135816],"float32"), shape=list[-1,280,328,], )

[torch error] paddle.reshape(Tensor([4, 15, 280, 135816],"float32"), shape=list[-1,280,328,], ) 
 shape '[-1, 280, 328]' is invalid for input of size 2281708800
2025-03-12 11:22:24.489638 test begin: paddle.reshape(Tensor([4, 15, 280, 135816],"float32"), shape=list[-1,280,336,], )

[torch error] paddle.reshape(Tensor([4, 15, 280, 135816],"float32"), shape=list[-1,280,336,], ) 
 shape '[-1, 280, 336]' is invalid for input of size 2281708800
2025-03-12 11:22:26.902388 test begin: paddle.reshape(Tensor([4, 15, 288, 132043],"float32"), shape=list[-1,288,336,], )

[torch error] paddle.reshape(Tensor([4, 15, 288, 132043],"float32"), shape=list[-1,288,336,], ) 
 shape '[-1, 288, 336]' is invalid for input of size 2281703040
2025-03-12 11:22:29.318979 test begin: paddle.reshape(Tensor([4, 15, 296, 128475],"float32"), shape=list[-1,296,272,], )

[torch error] paddle.reshape(Tensor([4, 15, 296, 128475],"float32"), shape=list[-1,296,272,], ) 
 shape '[-1, 296, 272]' is invalid for input of size 2281716000
2025-03-12 11:22:32.300666 test begin: paddle.reshape(Tensor([4, 15, 304, 125094],"float32"), shape=list[-1,304,296,], )

[torch error] paddle.reshape(Tensor([4, 15, 304, 125094],"float32"), shape=list[-1,304,296,], ) 
 shape '[-1, 304, 296]' is invalid for input of size 2281714560
2025-03-12 11:22:34.716019 test begin: paddle.reshape(Tensor([4, 15, 304, 125094],"float32"), shape=list[-1,304,312,], )

[torch error] paddle.reshape(Tensor([4, 15, 304, 125094],"float32"), shape=list[-1,304,312,], ) 
 shape '[-1, 304, 312]' is invalid for input of size 2281714560
2025-03-12 11:22:37.844334 test begin: paddle.reshape(Tensor([4, 15, 304, 125094],"float32"), shape=list[-1,304,328,], )

[torch error] paddle.reshape(Tensor([4, 15, 304, 125094],"float32"), shape=list[-1,304,328,], ) 
 shape '[-1, 304, 328]' is invalid for input of size 2281714560
2025-03-12 11:22:39.955155 test begin: paddle.reshape(Tensor([4, 15, 312, 121886],"float32"), shape=list[-1,312,272,], )

[torch error] paddle.reshape(Tensor([4, 15, 312, 121886],"float32"), shape=list[-1,312,272,], ) 
 shape '[-1, 312, 272]' is invalid for input of size 2281705920
2025-03-12 11:22:43.245873 test begin: paddle.reshape(Tensor([4, 15, 312, 121886],"float32"), shape=list[-1,312,304,], )

[torch error] paddle.reshape(Tensor([4, 15, 312, 121886],"float32"), shape=list[-1,312,304,], ) 
 shape '[-1, 312, 304]' is invalid for input of size 2281705920
2025-03-12 11:22:45.635507 test begin: paddle.reshape(Tensor([4, 15, 328, 115941],"float32"), shape=list[-1,328,200,], )

[torch error] paddle.reshape(Tensor([4, 15, 328, 115941],"float32"), shape=list[-1,328,200,], ) 
 shape '[-1, 328, 200]' is invalid for input of size 2281718880
2025-03-12 11:22:47.703828 test begin: paddle.reshape(Tensor([4, 15, 328, 115941],"float32"), shape=list[-1,328,304,], )

[torch error] paddle.reshape(Tensor([4, 15, 328, 115941],"float32"), shape=list[-1,328,304,], ) 
 shape '[-1, 328, 304]' is invalid for input of size 2281718880
2025-03-12 11:22:49.982886 test begin: paddle.reshape(Tensor([4, 15, 336, 113180],"float32"), shape=list[-1,336,304,], )

[torch error] paddle.reshape(Tensor([4, 15, 336, 113180],"float32"), shape=list[-1,336,304,], ) 
 shape '[-1, 336, 304]' is invalid for input of size 2281708800
2025-03-12 11:22:52.959673 test begin: paddle.reshape(Tensor([4, 15, 38028357],"float32"), shape=tuple(-1,248,272,), )

[torch error] paddle.reshape(Tensor([4, 15, 38028357],"float32"), shape=tuple(-1,248,272,), ) 
 shape '[-1, 248, 272]' is invalid for input of size 2281701420
2025-03-12 11:22:55.792369 test begin: paddle.reshape(Tensor([4, 15, 38028357],"float32"), shape=tuple(-1,256,304,), )

[torch error] paddle.reshape(Tensor([4, 15, 38028357],"float32"), shape=tuple(-1,256,304,), ) 
 shape '[-1, 256, 304]' is invalid for input of size 2281701420
2025-03-12 11:22:58.696639 test begin: paddle.reshape(Tensor([4, 15, 38028357],"float32"), shape=tuple(-1,272,216,), )

[torch error] paddle.reshape(Tensor([4, 15, 38028357],"float32"), shape=tuple(-1,272,216,), ) 
 shape '[-1, 272, 216]' is invalid for input of size 2281701420
2025-03-12 11:23:01.095742 test begin: paddle.reshape(Tensor([4, 15, 38028357],"float32"), shape=tuple(-1,288,336,), )

[torch error] paddle.reshape(Tensor([4, 15, 38028357],"float32"), shape=tuple(-1,288,336,), ) 
 shape '[-1, 288, 336]' is invalid for input of size 2281701420
2025-03-12 11:23:04.217704 test begin: paddle.reshape(Tensor([4, 15, 38028357],"float32"), shape=tuple(-1,304,296,), )

[torch error] paddle.reshape(Tensor([4, 15, 38028357],"float32"), shape=tuple(-1,304,296,), ) 
 shape '[-1, 304, 296]' is invalid for input of size 2281701420
2025-03-12 11:23:06.677386 test begin: paddle.reshape(Tensor([4, 15, 38028357],"float32"), shape=tuple(-1,304,328,), )

[torch error] paddle.reshape(Tensor([4, 15, 38028357],"float32"), shape=tuple(-1,304,328,), ) 
 shape '[-1, 304, 328]' is invalid for input of size 2281701420
2025-03-12 11:23:09.603470 test begin: paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,208,272,), )

[torch error] paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,208,272,), ) 
 shape '[-1, 208, 272]' is invalid for input of size 4294967340
2025-03-12 11:24:51.705907 test begin: paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,208,304,), )

[torch error] paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,208,304,), ) 
 shape '[-1, 208, 304]' is invalid for input of size 4294967340
2025-03-12 11:24:53.125440 test begin: paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,208,328,), )

[torch error] paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,208,328,), ) 
 shape '[-1, 208, 328]' is invalid for input of size 4294967340
2025-03-12 11:24:55.201382 test begin: paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,216,304,), )

[torch error] paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,216,304,), ) 
 shape '[-1, 216, 304]' is invalid for input of size 4294967340
2025-03-12 11:24:57.147513 test begin: paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,248,272,), )

[torch error] paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,248,272,), ) 
 shape '[-1, 248, 272]' is invalid for input of size 4294967340
2025-03-12 11:24:58.994564 test begin: paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,256,304,), )

[torch error] paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,256,304,), ) 
 shape '[-1, 256, 304]' is invalid for input of size 4294967340
2025-03-12 11:25:00.869868 test begin: paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,272,216,), )

[torch error] paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,272,216,), ) 
 shape '[-1, 272, 216]' is invalid for input of size 4294967340
2025-03-12 11:25:02.436431 test begin: paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,280,328,), )

[torch error] paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,280,328,), ) 
 shape '[-1, 280, 328]' is invalid for input of size 4294967340
2025-03-12 11:25:03.729450 test begin: paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,288,336,), )

[torch error] paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,288,336,), ) 
 shape '[-1, 288, 336]' is invalid for input of size 4294967340
2025-03-12 11:25:05.759415 test begin: paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,296,272,), )

[torch error] paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,296,272,), ) 
 shape '[-1, 296, 272]' is invalid for input of size 4294967340
2025-03-12 11:25:07.575253 test begin: paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,304,296,), )

[torch error] paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,304,296,), ) 
 shape '[-1, 304, 296]' is invalid for input of size 4294967340
2025-03-12 11:25:09.326288 test begin: paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,304,328,), )

[torch error] paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,304,328,), ) 
 shape '[-1, 304, 328]' is invalid for input of size 4294967340
2025-03-12 11:25:11.810533 test begin: paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,312,304,), )

[torch error] paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,312,304,), ) 
 shape '[-1, 312, 304]' is invalid for input of size 4294967340
2025-03-12 11:25:14.269922 test begin: paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,328,200,), )

[torch error] paddle.reshape(Tensor([4, 15, 71582789],"float16"), shape=tuple(-1,328,200,), ) 
 shape '[-1, 328, 200]' is invalid for input of size 4294967340
2025-03-12 11:25:15.704755 test begin: paddle.reshape(Tensor([4, 15225, 70528],"float16"), shape=tuple(-1,232,304,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f0729947820>,)) (kwargs={}) timed out after 600.000000 seconds.

terminate called without an active exception


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   std::_Sp_counted_ptr_inplace<c10::SafePyObject, std::allocator<c10::SafePyObject>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()

----------------------
Error Message Summary:
----------------------
FatalError: `Process abort signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1741750517 (unix time) try "date -d @1741750517" if you are using GNU date ***]
  [SignalInfo: *** SIGABRT (@0x1db20) received by PID 121632 (TID 0x7f06bc949700) from PID 121632 ***]

2025-03-12 11:36:03.513926 test begin: paddle.reshape(Tensor([4, 1533402, 124, 3],"float32"), shape=tuple(4,-1,1,), )

W0312 11:37:32.927613 129940 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 11:37:32.929234 129940 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.reshape(Tensor([4, 1533402, 124, 3],"float32"), shape=tuple(4,-1,1,), )
2025-03-12 11:40:11.224297 test begin: paddle.reshape(Tensor([4, 15364, 69888],"float16"), shape=tuple(-1,208,336,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7fde413ad460>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 11:50:26.057258 test begin: paddle.reshape(Tensor([4, 15421, 69632],"float16"), shape=tuple(-1,256,272,), )

W0312 11:52:26.738406 136816 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 11:52:26.740724 136816 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f0eafbf2bb0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 12:00:38.125318 test begin: paddle.reshape(Tensor([4, 15739, 68224],"float16"), shape=tuple(-1,208,328,), )

W0312 12:02:30.063503 141791 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 12:02:30.064860 141791 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f05645b3bb0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 12:10:47.107408 test begin: paddle.reshape(Tensor([4, 15769, 68096],"float16"), shape=tuple(-1,224,304,), )

W0312 12:12:28.187521 146693 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 12:12:28.188616 146693 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f0eabbf2bb0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 12:20:55.171917 test begin: paddle.reshape(Tensor([4, 1584515, 120, 3],"float32"), shape=tuple(4,-1,1,), )

W0312 12:22:33.816429 151635 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 12:22:33.817696 151635 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.reshape(Tensor([4, 1584515, 120, 3],"float32"), shape=tuple(4,-1,1,), )
2025-03-12 12:25:37.419943 test begin: paddle.reshape(Tensor([4, 15918, 67456],"float16"), shape=tuple(-1,248,272,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7efc59635460>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 12:35:48.997852 test begin: paddle.reshape(Tensor([4, 15933, 67392],"float16"), shape=tuple(-1,216,312,), )

W0312 12:37:34.875514 158772 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 12:37:34.876737 158772 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f38d95dfbb0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 12:46:00.953633 test begin: paddle.reshape(Tensor([4, 15979, 67200],"float16"), shape=tuple(-1,200,336,), )

W0312 12:47:50.147276 163795 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 12:47:50.149967 163795 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f136bbf2bb0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 12:56:10.547736 test begin: paddle.reshape(Tensor([4, 15979, 67200],"float16"), shape=tuple(-1,336,200,), )

W0312 12:57:56.273643  5421 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 12:57:56.275116  5421 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7fcd66ea1bb0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 13:06:19.506302 test begin: paddle.reshape(Tensor([4, 16, 106106, 336],"float32"), shape=list[-1,256,336,], )

W0312 13:07:27.948753 10150 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 13:07:27.950222 10150 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[torch error] paddle.reshape(Tensor([4, 16, 106106, 336],"float32"), shape=list[-1,256,336,], ) 
 shape '[-1, 256, 336]' is invalid for input of size 2281703424
2025-03-12 13:07:29.939984 test begin: paddle.reshape(Tensor([4, 16, 108694, 328],"float32"), shape=list[-1,208,328,], )

[torch error] paddle.reshape(Tensor([4, 16, 108694, 328],"float32"), shape=list[-1,208,328,], ) 
 shape '[-1, 208, 328]' is invalid for input of size 2281704448
2025-03-12 13:07:32.122691 test begin: paddle.reshape(Tensor([4, 16, 108694, 328],"float32"), shape=list[-1,272,328,], )

[torch error] paddle.reshape(Tensor([4, 16, 108694, 328],"float32"), shape=list[-1,272,328,], ) 
 shape '[-1, 272, 328]' is invalid for input of size 2281704448
2025-03-12 13:07:33.887328 test begin: paddle.reshape(Tensor([4, 16, 108694, 328],"float32"), shape=list[-1,304,328,], )

[torch error] paddle.reshape(Tensor([4, 16, 108694, 328],"float32"), shape=list[-1,304,328,], ) 
 shape '[-1, 304, 328]' is invalid for input of size 2281704448
2025-03-12 13:07:36.362115 test begin: paddle.reshape(Tensor([4, 16, 111412, 320],"float32"), shape=list[-1,304,320,], )

[torch error] paddle.reshape(Tensor([4, 16, 111412, 320],"float32"), shape=list[-1,304,320,], ) 
 shape '[-1, 304, 320]' is invalid for input of size 2281717760
2025-03-12 13:07:38.554573 test begin: paddle.reshape(Tensor([4, 16, 117275, 304],"float32"), shape=list[-1,216,304,], )

[torch error] paddle.reshape(Tensor([4, 16, 117275, 304],"float32"), shape=list[-1,216,304,], ) 
 shape '[-1, 216, 304]' is invalid for input of size 2281702400
2025-03-12 13:07:41.278335 test begin: paddle.reshape(Tensor([4, 16, 117275, 304],"float32"), shape=list[-1,232,304,], )

[torch error] paddle.reshape(Tensor([4, 16, 117275, 304],"float32"), shape=list[-1,232,304,], ) 
 shape '[-1, 232, 304]' is invalid for input of size 2281702400
2025-03-12 13:07:43.968333 test begin: paddle.reshape(Tensor([4, 16, 117275, 304],"float32"), shape=list[-1,240,304,], )

[torch error] paddle.reshape(Tensor([4, 16, 117275, 304],"float32"), shape=list[-1,240,304,], ) 
 shape '[-1, 240, 304]' is invalid for input of size 2281702400
2025-03-12 13:07:46.612434 test begin: paddle.reshape(Tensor([4, 16, 117275, 304],"float32"), shape=list[-1,296,304,], )

[torch error] paddle.reshape(Tensor([4, 16, 117275, 304],"float32"), shape=list[-1,296,304,], ) 
 shape '[-1, 296, 304]' is invalid for input of size 2281702400
2025-03-12 13:07:48.942355 test begin: paddle.reshape(Tensor([4, 16, 117275, 304],"float32"), shape=list[-1,328,304,], )

[torch error] paddle.reshape(Tensor([4, 16, 117275, 304],"float32"), shape=list[-1,328,304,], ) 
 shape '[-1, 328, 304]' is invalid for input of size 2281702400
2025-03-12 13:07:51.260821 test begin: paddle.reshape(Tensor([4, 16, 117275, 304],"float32"), shape=list[-1,336,304,], )

[torch error] paddle.reshape(Tensor([4, 16, 117275, 304],"float32"), shape=list[-1,336,304,], ) 
 shape '[-1, 336, 304]' is invalid for input of size 2281702400
2025-03-12 13:07:53.850071 test begin: paddle.reshape(Tensor([4, 16, 120445, 296],"float32"), shape=list[-1,304,296,], )

[torch error] paddle.reshape(Tensor([4, 16, 120445, 296],"float32"), shape=list[-1,304,296,], ) 
 shape '[-1, 304, 296]' is invalid for input of size 2281710080
2025-03-12 13:07:57.346690 test begin: paddle.reshape(Tensor([4, 16, 120445, 296],"float32"), shape=list[-1,312,296,], )

[torch error] paddle.reshape(Tensor([4, 16, 120445, 296],"float32"), shape=list[-1,312,296,], ) 
 shape '[-1, 312, 296]' is invalid for input of size 2281710080
2025-03-12 13:07:59.888544 test begin: paddle.reshape(Tensor([4, 16, 123791, 288],"float32"), shape=list[-1,200,288,], )

[torch error] paddle.reshape(Tensor([4, 16, 123791, 288],"float32"), shape=list[-1,200,288,], ) 
 shape '[-1, 200, 288]' is invalid for input of size 2281715712
2025-03-12 13:08:02.600642 test begin: paddle.reshape(Tensor([4, 16, 123791, 288],"float32"), shape=list[-1,304,288,], )

[torch error] paddle.reshape(Tensor([4, 16, 123791, 288],"float32"), shape=list[-1,304,288,], ) 
 shape '[-1, 304, 288]' is invalid for input of size 2281715712
2025-03-12 13:08:05.044981 test begin: paddle.reshape(Tensor([4, 16, 127328, 280],"float32"), shape=list[-1,280,280,], )

[torch error] paddle.reshape(Tensor([4, 16, 127328, 280],"float32"), shape=list[-1,280,280,], ) 
 shape '[-1, 280, 280]' is invalid for input of size 2281717760
2025-03-12 13:08:07.049267 test begin: paddle.reshape(Tensor([4, 16, 127328, 280],"float32"), shape=list[-1,336,280,], )

[torch error] paddle.reshape(Tensor([4, 16, 127328, 280],"float32"), shape=list[-1,336,280,], ) 
 shape '[-1, 336, 280]' is invalid for input of size 2281717760
2025-03-12 13:08:09.403563 test begin: paddle.reshape(Tensor([4, 16, 131073, 272],"float32"), shape=list[-1,288,272,], )

[torch error] paddle.reshape(Tensor([4, 16, 131073, 272],"float32"), shape=list[-1,288,272,], ) 
 shape '[-1, 288, 272]' is invalid for input of size 2281718784
2025-03-12 13:08:11.939997 test begin: paddle.reshape(Tensor([4, 16, 16, 2228225],"float32"), shape=tuple(-1,80,), )

[Pass] paddle.reshape(Tensor([4, 16, 16, 2228225],"float32"), shape=tuple(-1,80,), )
2025-03-12 13:10:54.666937 test begin: paddle.reshape(Tensor([4, 16, 16, 4194305],"float16"), shape=tuple(-1,80,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f00f820c340>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 13:21:03.195246 test begin: paddle.reshape(Tensor([4, 16, 165054, 216],"float32"), shape=list[-1,304,216,], )

W0312 13:22:23.761857 17055 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 13:22:23.762956 17055 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[torch error] paddle.reshape(Tensor([4, 16, 165054, 216],"float32"), shape=list[-1,304,216,], ) 
 shape '[-1, 304, 216]' is invalid for input of size 2281706496
2025-03-12 13:22:25.632696 test begin: paddle.reshape(Tensor([4, 16, 178258, 200],"float32"), shape=list[-1,272,200,], )

[torch error] paddle.reshape(Tensor([4, 16, 178258, 200],"float32"), shape=list[-1,272,200,], ) 
 shape '[-1, 272, 200]' is invalid for input of size 2281702400
2025-03-12 13:22:27.725948 test begin: paddle.reshape(Tensor([4, 16, 200, 178258],"float32"), shape=list[-1,200,288,], )

[torch error] paddle.reshape(Tensor([4, 16, 200, 178258],"float32"), shape=list[-1,200,288,], ) 
 shape '[-1, 200, 288]' is invalid for input of size 2281702400
2025-03-12 13:22:29.640914 test begin: paddle.reshape(Tensor([4, 16, 208, 171402],"float32"), shape=list[-1,208,328,], )

[torch error] paddle.reshape(Tensor([4, 16, 208, 171402],"float32"), shape=list[-1,208,328,], ) 
 shape '[-1, 208, 328]' is invalid for input of size 2281703424
2025-03-12 13:22:32.555454 test begin: paddle.reshape(Tensor([4, 16, 216, 165054],"float32"), shape=list[-1,216,304,], )

[torch error] paddle.reshape(Tensor([4, 16, 216, 165054],"float32"), shape=list[-1,216,304,], ) 
 shape '[-1, 216, 304]' is invalid for input of size 2281706496
2025-03-12 13:22:34.451097 test begin: paddle.reshape(Tensor([4, 16, 232, 153671],"float32"), shape=list[-1,232,304,], )

[torch error] paddle.reshape(Tensor([4, 16, 232, 153671],"float32"), shape=list[-1,232,304,], ) 
 shape '[-1, 232, 304]' is invalid for input of size 2281707008
2025-03-12 13:22:37.007577 test begin: paddle.reshape(Tensor([4, 16, 240, 148549],"float32"), shape=list[-1,240,304,], )

[torch error] paddle.reshape(Tensor([4, 16, 240, 148549],"float32"), shape=list[-1,240,304,], ) 
 shape '[-1, 240, 304]' is invalid for input of size 2281712640
2025-03-12 13:22:39.605077 test begin: paddle.reshape(Tensor([4, 16, 256, 139265],"float32"), shape=list[-1,256,336,], )

[torch error] paddle.reshape(Tensor([4, 16, 256, 139265],"float32"), shape=list[-1,256,336,], ) 
 shape '[-1, 256, 336]' is invalid for input of size 2281717760
2025-03-12 13:22:41.490765 test begin: paddle.reshape(Tensor([4, 16, 272, 131073],"float32"), shape=list[-1,272,200,], )

[torch error] paddle.reshape(Tensor([4, 16, 272, 131073],"float32"), shape=list[-1,272,200,], ) 
 shape '[-1, 272, 200]' is invalid for input of size 2281718784
2025-03-12 13:22:43.357694 test begin: paddle.reshape(Tensor([4, 16, 272, 131073],"float32"), shape=list[-1,272,328,], )

[torch error] paddle.reshape(Tensor([4, 16, 272, 131073],"float32"), shape=list[-1,272,328,], ) 
 shape '[-1, 272, 328]' is invalid for input of size 2281718784
2025-03-12 13:22:45.258201 test begin: paddle.reshape(Tensor([4, 16, 280, 127328],"float32"), shape=list[-1,280,280,], )

[torch error] paddle.reshape(Tensor([4, 16, 280, 127328],"float32"), shape=list[-1,280,280,], ) 
 shape '[-1, 280, 280]' is invalid for input of size 2281717760
2025-03-12 13:22:47.837139 test begin: paddle.reshape(Tensor([4, 16, 288, 123791],"float32"), shape=list[-1,288,272,], )

[torch error] paddle.reshape(Tensor([4, 16, 288, 123791],"float32"), shape=list[-1,288,272,], ) 
 shape '[-1, 288, 272]' is invalid for input of size 2281715712
2025-03-12 13:22:49.477970 test begin: paddle.reshape(Tensor([4, 16, 296, 120445],"float32"), shape=list[-1,296,304,], )

[torch error] paddle.reshape(Tensor([4, 16, 296, 120445],"float32"), shape=list[-1,296,304,], ) 
 shape '[-1, 296, 304]' is invalid for input of size 2281710080
2025-03-12 13:22:51.782182 test begin: paddle.reshape(Tensor([4, 16, 304, 117275],"float32"), shape=list[-1,304,216,], )

[torch error] paddle.reshape(Tensor([4, 16, 304, 117275],"float32"), shape=list[-1,304,216,], ) 
 shape '[-1, 304, 216]' is invalid for input of size 2281702400
2025-03-12 13:22:54.336312 test begin: paddle.reshape(Tensor([4, 16, 304, 117275],"float32"), shape=list[-1,304,288,], )

[torch error] paddle.reshape(Tensor([4, 16, 304, 117275],"float32"), shape=list[-1,304,288,], ) 
 shape '[-1, 304, 288]' is invalid for input of size 2281702400
2025-03-12 13:22:55.944292 test begin: paddle.reshape(Tensor([4, 16, 304, 117275],"float32"), shape=list[-1,304,296,], )

[torch error] paddle.reshape(Tensor([4, 16, 304, 117275],"float32"), shape=list[-1,304,296,], ) 
 shape '[-1, 304, 296]' is invalid for input of size 2281702400
2025-03-12 13:22:57.410583 test begin: paddle.reshape(Tensor([4, 16, 304, 117275],"float32"), shape=list[-1,304,320,], )

[Pass] paddle.reshape(Tensor([4, 16, 304, 117275],"float32"), shape=list[-1,304,320,], )
2025-03-12 13:25:59.050195 test begin: paddle.reshape(Tensor([4, 16, 304, 117275],"float32"), shape=list[-1,304,328,], )

[torch error] paddle.reshape(Tensor([4, 16, 304, 117275],"float32"), shape=list[-1,304,328,], ) 
 shape '[-1, 304, 328]' is invalid for input of size 2281702400
2025-03-12 13:26:03.445038 test begin: paddle.reshape(Tensor([4, 16, 312, 114268],"float32"), shape=list[-1,312,296,], )

[torch error] paddle.reshape(Tensor([4, 16, 312, 114268],"float32"), shape=list[-1,312,296,], ) 
 shape '[-1, 312, 296]' is invalid for input of size 2281703424
2025-03-12 13:26:06.286706 test begin: paddle.reshape(Tensor([4, 16, 328, 108694],"float32"), shape=list[-1,328,304,], )

[torch error] paddle.reshape(Tensor([4, 16, 328, 108694],"float32"), shape=list[-1,328,304,], ) 
 shape '[-1, 328, 304]' is invalid for input of size 2281704448
2025-03-12 13:26:08.212576 test begin: paddle.reshape(Tensor([4, 16, 336, 106106],"float32"), shape=list[-1,336,280,], )

[torch error] paddle.reshape(Tensor([4, 16, 336, 106106],"float32"), shape=list[-1,336,280,], ) 
 shape '[-1, 336, 280]' is invalid for input of size 2281703424
2025-03-12 13:26:09.638905 test begin: paddle.reshape(Tensor([4, 16, 336, 106106],"float32"), shape=list[-1,336,304,], )

[torch error] paddle.reshape(Tensor([4, 16, 336, 106106],"float32"), shape=list[-1,336,304,], ) 
 shape '[-1, 336, 304]' is invalid for input of size 2281703424
2025-03-12 13:26:12.328335 test begin: paddle.reshape(Tensor([4, 16, 35651585],"float32"), shape=tuple(-1,240,304,), )

[torch error] paddle.reshape(Tensor([4, 16, 35651585],"float32"), shape=tuple(-1,240,304,), ) 
 shape '[-1, 240, 304]' is invalid for input of size 2281701440
2025-03-12 13:26:13.998564 test begin: paddle.reshape(Tensor([4, 16, 35651585],"float32"), shape=tuple(-1,272,200,), )

[torch error] paddle.reshape(Tensor([4, 16, 35651585],"float32"), shape=tuple(-1,272,200,), ) 
 shape '[-1, 272, 200]' is invalid for input of size 2281701440
2025-03-12 13:26:16.394604 test begin: paddle.reshape(Tensor([4, 16, 35651585],"float32"), shape=tuple(-1,280,280,), )

[torch error] paddle.reshape(Tensor([4, 16, 35651585],"float32"), shape=tuple(-1,280,280,), ) 
 shape '[-1, 280, 280]' is invalid for input of size 2281701440
2025-03-12 13:26:18.996617 test begin: paddle.reshape(Tensor([4, 16, 35651585],"float32"), shape=tuple(-1,304,288,), )

[torch error] paddle.reshape(Tensor([4, 16, 35651585],"float32"), shape=tuple(-1,304,288,), ) 
 shape '[-1, 304, 288]' is invalid for input of size 2281701440
2025-03-12 13:26:21.238118 test begin: paddle.reshape(Tensor([4, 16, 35651585],"float32"), shape=tuple(-1,312,296,), )

[torch error] paddle.reshape(Tensor([4, 16, 35651585],"float32"), shape=tuple(-1,312,296,), ) 
 shape '[-1, 312, 296]' is invalid for input of size 2281701440
2025-03-12 13:26:23.759118 test begin: paddle.reshape(Tensor([4, 16, 445645, 80],"float32"), shape=tuple(-1,80,), )

[Pass] paddle.reshape(Tensor([4, 16, 445645, 80],"float32"), shape=tuple(-1,80,), )
2025-03-12 13:29:31.974718 test begin: paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,200,288,), )

[torch error] paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,200,288,), ) 
 shape '[-1, 200, 288]' is invalid for input of size 4294967360
2025-03-12 13:31:01.459328 test begin: paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,208,328,), )

[torch error] paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,208,328,), ) 
 shape '[-1, 208, 328]' is invalid for input of size 4294967360
2025-03-12 13:31:03.148504 test begin: paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,240,304,), )

[torch error] paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,240,304,), ) 
 shape '[-1, 240, 304]' is invalid for input of size 4294967360
2025-03-12 13:31:04.696039 test begin: paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,272,200,), )

[torch error] paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,272,200,), ) 
 shape '[-1, 272, 200]' is invalid for input of size 4294967360
2025-03-12 13:31:06.286804 test begin: paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,280,280,), )

[torch error] paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,280,280,), ) 
 shape '[-1, 280, 280]' is invalid for input of size 4294967360
2025-03-12 13:31:07.966717 test begin: paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,288,272,), )

[torch error] paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,288,272,), ) 
 shape '[-1, 288, 272]' is invalid for input of size 4294967360
2025-03-12 13:31:09.920982 test begin: paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,304,216,), )

[torch error] paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,304,216,), ) 
 shape '[-1, 304, 216]' is invalid for input of size 4294967360
2025-03-12 13:31:12.207700 test begin: paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,304,288,), )

[torch error] paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,304,288,), ) 
 shape '[-1, 304, 288]' is invalid for input of size 4294967360
2025-03-12 13:31:14.483501 test begin: paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,304,296,), )

[torch error] paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,304,296,), ) 
 shape '[-1, 304, 296]' is invalid for input of size 4294967360
2025-03-12 13:31:17.268735 test begin: paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,304,328,), )

[torch error] paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,304,328,), ) 
 shape '[-1, 304, 328]' is invalid for input of size 4294967360
2025-03-12 13:31:19.873515 test begin: paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,312,296,), )

[torch error] paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,312,296,), ) 
 shape '[-1, 312, 296]' is invalid for input of size 4294967360
2025-03-12 13:31:22.269958 test begin: paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,336,280,), )

[torch error] paddle.reshape(Tensor([4, 16, 67108865],"float16"), shape=tuple(-1,336,280,), ) 
 shape '[-1, 336, 280]' is invalid for input of size 4294967360
2025-03-12 13:31:24.572846 test begin: paddle.reshape(Tensor([4, 16, 838861, 80],"float16"), shape=tuple(-1,80,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f59637583a0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 13:41:35.783122 test begin: paddle.reshape(Tensor([4, 16353, 65664],"float16"), shape=tuple(-1,216,304,), )

W0312 13:43:21.898291 27181 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 13:43:21.899559 27181 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f40d9a6cbb0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-03-12 13:51:45.221217 test begin: paddle.reshape(Tensor([4, 16353, 65664],"float16"), shape=tuple(-1,304,216,), )

W0312 13:53:26.416260 32226 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 13:53:26.417418 32226 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.accuracy.APITestAccuracy object at 0x7f7ab45f1bb0>,)) (kwargs={}) timed out after 600.000000 seconds.

terminate called without an active exception


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
No stack trace in paddle, may be caused by external reasons.

----------------------
Error Message Summary:
----------------------
FatalError: `Process abort signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1741759305 (unix time) try "date -d @1741759305" if you are using GNU date ***]
  [SignalInfo: *** SIGABRT (@0x7d80) received by PID 32128 (TID 0x7f7a38949700) from PID 32128 ***]

2025-03-12 14:01:51.725869 test begin: paddle.reshape(Tensor([4, 16369, 65600],"float16"), shape=tuple(-1,200,328,), )

W0312 14:03:32.125439 37123 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0312 14:03:32.126484 37123 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 86, in func_timeout
    thread.join(timeout)
  File "/usr/lib/python3.9/threading.py", line 1064, in join
    self._wait_for_tstate_lock(timeout=max(timeout, 0))
  File "/usr/lib/python3.9/threading.py", line 1080, in _wait_for_tstate_lock
    if lock.acquire(block, timeout):
KeyboardInterrupt
2025-03-13 10:09:50.191434 test begin: paddle.reshape(Tensor([4, 16369, 65600],"float16"), shape=tuple(-1,328,200,), )

W0313 10:11:40.269189 11155 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0313 10:11:40.270464 11155 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.reshape(Tensor([4, 16369, 65600],"float16"), shape=tuple(-1,328,200,), )
2025-03-13 10:28:07.615854 test begin: paddle.reshape(Tensor([4, 16777217, 1, 64],"float16"), list[4,114,-1,], )

[torch error] paddle.reshape(Tensor([4, 16777217, 1, 64],"float16"), list[4,114,-1,], ) 
 shape '[4, 114, -1]' is invalid for input of size 4294967552
2025-03-13 10:28:11.690167 test begin: paddle.reshape(Tensor([4, 16778, 64000],"float16"), shape=tuple(-1,200,320,), )

[Pass] paddle.reshape(Tensor([4, 16778, 64000],"float16"), shape=tuple(-1,200,320,), )
2025-03-13 10:44:44.356506 test begin: paddle.reshape(Tensor([4, 16795, 63936],"float16"), shape=tuple(-1,216,296,), )

[Pass] paddle.reshape(Tensor([4, 16795, 63936],"float16"), shape=tuple(-1,216,296,), )
2025-03-13 11:01:25.295846 test begin: paddle.reshape(Tensor([4, 1697695, 336],"float32"), shape=tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([4, 1697695, 336],"float32"), shape=tuple(4,-1,), )
2025-03-13 11:05:32.904431 test begin: paddle.reshape(Tensor([4, 16981, 63232],"float16"), shape=tuple(-1,208,304,), )

[Pass] paddle.reshape(Tensor([4, 16981, 63232],"float16"), shape=tuple(-1,208,304,), )
2025-03-13 11:21:30.887540 test begin: paddle.reshape(Tensor([4, 17, 102301, 328],"float32"), shape=list[-1,200,328,], )

[torch error] paddle.reshape(Tensor([4, 17, 102301, 328],"float32"), shape=list[-1,200,328,], ) 
 shape '[-1, 200, 328]' is invalid for input of size 2281721504
2025-03-13 11:21:34.974782 test begin: paddle.reshape(Tensor([4, 17, 102301, 328],"float32"), shape=list[-1,272,328,], )

[torch error] paddle.reshape(Tensor([4, 17, 102301, 328],"float32"), shape=list[-1,272,328,], ) 
 shape '[-1, 272, 328]' is invalid for input of size 2281721504
2025-03-13 11:21:37.320780 test begin: paddle.reshape(Tensor([4, 17, 102301, 328],"float32"), shape=list[-1,304,328,], )

[torch error] paddle.reshape(Tensor([4, 17, 102301, 328],"float32"), shape=list[-1,304,328,], ) 
 shape '[-1, 304, 328]' is invalid for input of size 2281721504
2025-03-13 11:21:39.532519 test begin: paddle.reshape(Tensor([4, 17, 110377, 304],"float32"), shape=list[-1,208,304,], )

[torch error] paddle.reshape(Tensor([4, 17, 110377, 304],"float32"), shape=list[-1,208,304,], ) 
 shape '[-1, 208, 304]' is invalid for input of size 2281713344
2025-03-13 11:21:41.688588 test begin: paddle.reshape(Tensor([4, 17, 110377, 304],"float32"), shape=list[-1,240,304,], )

[torch error] paddle.reshape(Tensor([4, 17, 110377, 304],"float32"), shape=list[-1,240,304,], ) 
 shape '[-1, 240, 304]' is invalid for input of size 2281713344
2025-03-13 11:21:43.845238 test begin: paddle.reshape(Tensor([4, 17, 110377, 304],"float32"), shape=list[-1,256,304,], )

[torch error] paddle.reshape(Tensor([4, 17, 110377, 304],"float32"), shape=list[-1,256,304,], ) 
 shape '[-1, 256, 304]' is invalid for input of size 2281713344
2025-03-13 11:21:45.978018 test begin: paddle.reshape(Tensor([4, 17, 110377, 304],"float32"), shape=list[-1,264,304,], )

[torch error] paddle.reshape(Tensor([4, 17, 110377, 304],"float32"), shape=list[-1,264,304,], ) 
 shape '[-1, 264, 304]' is invalid for input of size 2281713344
2025-03-13 11:21:48.160470 test begin: paddle.reshape(Tensor([4, 17, 110377, 304],"float32"), shape=list[-1,320,304,], )

[torch error] paddle.reshape(Tensor([4, 17, 110377, 304],"float32"), shape=list[-1,320,304,], ) 
 shape '[-1, 320, 304]' is invalid for input of size 2281713344
2025-03-13 11:21:50.295324 test begin: paddle.reshape(Tensor([4, 17, 113360, 296],"float32"), shape=list[-1,312,296,], )

[torch error] paddle.reshape(Tensor([4, 17, 113360, 296],"float32"), shape=list[-1,312,296,], ) 
 shape '[-1, 312, 296]' is invalid for input of size 2281710080
2025-03-13 11:21:52.556566 test begin: paddle.reshape(Tensor([4, 17, 119838, 280],"float32"), shape=list[-1,272,280,], )

[torch error] paddle.reshape(Tensor([4, 17, 119838, 280],"float32"), shape=list[-1,272,280,], ) 
 shape '[-1, 272, 280]' is invalid for input of size 2281715520
2025-03-13 11:21:54.697575 test begin: paddle.reshape(Tensor([4, 17, 119838, 280],"float32"), shape=list[-1,336,280,], )

[torch error] paddle.reshape(Tensor([4, 17, 119838, 280],"float32"), shape=list[-1,336,280,], ) 
 shape '[-1, 336, 280]' is invalid for input of size 2281715520
2025-03-13 11:21:56.884531 test begin: paddle.reshape(Tensor([4, 17, 123362, 272],"float32"), shape=list[-1,280,272,], )

[torch error] paddle.reshape(Tensor([4, 17, 123362, 272],"float32"), shape=list[-1,280,272,], ) 
 shape '[-1, 280, 272]' is invalid for input of size 2281703552
2025-03-13 11:21:59.038850 test begin: paddle.reshape(Tensor([4, 17, 123362, 272],"float32"), shape=list[-1,288,272,], )

[torch error] paddle.reshape(Tensor([4, 17, 123362, 272],"float32"), shape=list[-1,288,272,], ) 
 shape '[-1, 288, 272]' is invalid for input of size 2281703552
2025-03-13 11:22:01.381112 test begin: paddle.reshape(Tensor([4, 17, 167773, 200],"float32"), shape=list[-1,272,200,], )

[torch error] paddle.reshape(Tensor([4, 17, 167773, 200],"float32"), shape=list[-1,272,200,], ) 
 shape '[-1, 272, 200]' is invalid for input of size 2281712800
2025-03-13 11:22:03.545118 test begin: paddle.reshape(Tensor([4, 17, 167773, 200],"float32"), shape=list[-1,336,200,], )

[torch error] paddle.reshape(Tensor([4, 17, 167773, 200],"float32"), shape=list[-1,336,200,], ) 
 shape '[-1, 336, 200]' is invalid for input of size 2281712800
2025-03-13 11:22:06.164063 test begin: paddle.reshape(Tensor([4, 17, 200, 167773],"float32"), shape=list[-1,200,328,], )

[torch error] paddle.reshape(Tensor([4, 17, 200, 167773],"float32"), shape=list[-1,200,328,], ) 
 shape '[-1, 200, 328]' is invalid for input of size 2281712800
2025-03-13 11:22:07.847967 test begin: paddle.reshape(Tensor([4, 17, 208, 161320],"float32"), shape=list[-1,208,304,], )

[torch error] paddle.reshape(Tensor([4, 17, 208, 161320],"float32"), shape=list[-1,208,304,], ) 
 shape '[-1, 208, 304]' is invalid for input of size 2281710080
2025-03-13 11:22:09.886522 test begin: paddle.reshape(Tensor([4, 17, 240, 139811],"float32"), shape=list[-1,240,304,], )

[torch error] paddle.reshape(Tensor([4, 17, 240, 139811],"float32"), shape=list[-1,240,304,], ) 
 shape '[-1, 240, 304]' is invalid for input of size 2281715520
2025-03-13 11:22:11.849363 test begin: paddle.reshape(Tensor([4, 17, 256, 131073],"float32"), shape=list[-1,256,304,], )

[torch error] paddle.reshape(Tensor([4, 17, 256, 131073],"float32"), shape=list[-1,256,304,], ) 
 shape '[-1, 256, 304]' is invalid for input of size 2281718784
2025-03-13 11:22:13.815301 test begin: paddle.reshape(Tensor([4, 17, 264, 127101],"float32"), shape=list[-1,264,304,], )

[torch error] paddle.reshape(Tensor([4, 17, 264, 127101],"float32"), shape=list[-1,264,304,], ) 
 shape '[-1, 264, 304]' is invalid for input of size 2281717152
2025-03-13 11:22:15.798077 test begin: paddle.reshape(Tensor([4, 17, 272, 123362],"float32"), shape=list[-1,272,200,], )

[torch error] paddle.reshape(Tensor([4, 17, 272, 123362],"float32"), shape=list[-1,272,200,], ) 
 shape '[-1, 272, 200]' is invalid for input of size 2281703552
2025-03-13 11:22:17.782930 test begin: paddle.reshape(Tensor([4, 17, 272, 123362],"float32"), shape=list[-1,272,280,], )

[torch error] paddle.reshape(Tensor([4, 17, 272, 123362],"float32"), shape=list[-1,272,280,], ) 
 shape '[-1, 272, 280]' is invalid for input of size 2281703552
2025-03-13 11:22:19.778696 test begin: paddle.reshape(Tensor([4, 17, 272, 123362],"float32"), shape=list[-1,272,328,], )

[torch error] paddle.reshape(Tensor([4, 17, 272, 123362],"float32"), shape=list[-1,272,328,], ) 
 shape '[-1, 272, 328]' is invalid for input of size 2281703552
2025-03-13 11:22:21.984902 test begin: paddle.reshape(Tensor([4, 17, 280, 119838],"float32"), shape=list[-1,280,272,], )

[torch error] paddle.reshape(Tensor([4, 17, 280, 119838],"float32"), shape=list[-1,280,272,], ) 
 shape '[-1, 280, 272]' is invalid for input of size 2281715520
2025-03-13 11:22:23.587557 test begin: paddle.reshape(Tensor([4, 17, 288, 116509],"float32"), shape=list[-1,288,272,], )

[torch error] paddle.reshape(Tensor([4, 17, 288, 116509],"float32"), shape=list[-1,288,272,], ) 
 shape '[-1, 288, 272]' is invalid for input of size 2281712256
2025-03-13 11:22:25.562486 test begin: paddle.reshape(Tensor([4, 17, 304, 110377],"float32"), shape=list[-1,304,328,], )

[torch error] paddle.reshape(Tensor([4, 17, 304, 110377],"float32"), shape=list[-1,304,328,], ) 
 shape '[-1, 304, 328]' is invalid for input of size 2281713344
2025-03-13 11:22:27.569023 test begin: paddle.reshape(Tensor([4, 17, 312, 107547],"float32"), shape=list[-1,312,296,], )

[torch error] paddle.reshape(Tensor([4, 17, 312, 107547],"float32"), shape=list[-1,312,296,], ) 
 shape '[-1, 312, 296]' is invalid for input of size 2281717152
2025-03-13 11:22:29.545214 test begin: paddle.reshape(Tensor([4, 17, 320, 104858],"float32"), shape=list[-1,320,304,], )

[torch error] paddle.reshape(Tensor([4, 17, 320, 104858],"float32"), shape=list[-1,320,304,], ) 
 shape '[-1, 320, 304]' is invalid for input of size 2281710080
2025-03-13 11:22:31.522771 test begin: paddle.reshape(Tensor([4, 17, 33554433],"float32"), shape=tuple(-1,200,328,), )

[torch error] paddle.reshape(Tensor([4, 17, 33554433],"float32"), shape=tuple(-1,200,328,), ) 
 shape '[-1, 200, 328]' is invalid for input of size 2281701444
2025-03-13 11:22:33.489306 test begin: paddle.reshape(Tensor([4, 17, 33554433],"float32"), shape=tuple(-1,240,304,), )

[torch error] paddle.reshape(Tensor([4, 17, 33554433],"float32"), shape=tuple(-1,240,304,), ) 
 shape '[-1, 240, 304]' is invalid for input of size 2281701444
2025-03-13 11:22:35.659215 test begin: paddle.reshape(Tensor([4, 17, 33554433],"float32"), shape=tuple(-1,272,200,), )

[torch error] paddle.reshape(Tensor([4, 17, 33554433],"float32"), shape=tuple(-1,272,200,), ) 
 shape '[-1, 272, 200]' is invalid for input of size 2281701444
2025-03-13 11:22:37.859964 test begin: paddle.reshape(Tensor([4, 17, 33554433],"float32"), shape=tuple(-1,272,280,), )

[torch error] paddle.reshape(Tensor([4, 17, 33554433],"float32"), shape=tuple(-1,272,280,), ) 
 shape '[-1, 272, 280]' is invalid for input of size 2281701444
2025-03-13 11:22:39.389155 test begin: paddle.reshape(Tensor([4, 17, 33554433],"float32"), shape=tuple(-1,336,200,), )

[torch error] paddle.reshape(Tensor([4, 17, 33554433],"float32"), shape=tuple(-1,336,200,), ) 
 shape '[-1, 336, 200]' is invalid for input of size 2281701444
2025-03-13 11:22:41.514970 test begin: paddle.reshape(Tensor([4, 17, 336, 99865],"float32"), shape=list[-1,336,200,], )

[torch error] paddle.reshape(Tensor([4, 17, 336, 99865],"float32"), shape=list[-1,336,200,], ) 
 shape '[-1, 336, 200]' is invalid for input of size 2281715520
2025-03-13 11:22:43.562096 test begin: paddle.reshape(Tensor([4, 17, 336, 99865],"float32"), shape=list[-1,336,280,], )

[torch error] paddle.reshape(Tensor([4, 17, 336, 99865],"float32"), shape=list[-1,336,280,], ) 
 shape '[-1, 336, 280]' is invalid for input of size 2281715520
2025-03-13 11:22:46.177827 test begin: paddle.reshape(Tensor([4, 17, 336, 99865],"float32"), shape=list[-1,336,336,], )

[torch error] paddle.reshape(Tensor([4, 17, 336, 99865],"float32"), shape=list[-1,336,336,], ) 
 shape '[-1, 336, 336]' is invalid for input of size 2281715520
2025-03-13 11:22:49.442051 test begin: paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,200,328,), )

[torch error] paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,200,328,), ) 
 shape '[-1, 200, 328]' is invalid for input of size 4294967312
2025-03-13 11:22:53.132955 test begin: paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,240,304,), )

[torch error] paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,240,304,), ) 
 shape '[-1, 240, 304]' is invalid for input of size 4294967312
2025-03-13 11:22:55.143493 test begin: paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,256,304,), )

[torch error] paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,256,304,), ) 
 shape '[-1, 256, 304]' is invalid for input of size 4294967312
2025-03-13 11:22:57.286802 test begin: paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,264,304,), )

[torch error] paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,264,304,), ) 
 shape '[-1, 264, 304]' is invalid for input of size 4294967312
2025-03-13 11:22:59.272281 test begin: paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,272,200,), )

[torch error] paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,272,200,), ) 
 shape '[-1, 272, 200]' is invalid for input of size 4294967312
2025-03-13 11:23:01.828997 test begin: paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,272,280,), )

[torch error] paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,272,280,), ) 
 shape '[-1, 272, 280]' is invalid for input of size 4294967312
2025-03-13 11:23:04.502891 test begin: paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,280,272,), )

[torch error] paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,280,272,), ) 
 shape '[-1, 280, 272]' is invalid for input of size 4294967312
2025-03-13 11:23:07.029480 test begin: paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,312,296,), )

[torch error] paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,312,296,), ) 
 shape '[-1, 312, 296]' is invalid for input of size 4294967312
2025-03-13 11:23:09.594542 test begin: paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,336,200,), )

[torch error] paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,336,200,), ) 
 shape '[-1, 336, 200]' is invalid for input of size 4294967312
2025-03-13 11:23:11.530853 test begin: paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,336,280,), )

[torch error] paddle.reshape(Tensor([4, 17, 63161284],"float16"), shape=tuple(-1,336,280,), ) 
 shape '[-1, 336, 280]' is invalid for input of size 4294967312
2025-03-13 11:23:14.037243 test begin: paddle.reshape(Tensor([4, 17, 99865, 336],"float32"), shape=list[-1,336,336,], )

[torch error] paddle.reshape(Tensor([4, 17, 99865, 336],"float32"), shape=list[-1,336,336,], ) 
 shape '[-1, 336, 336]' is invalid for input of size 2281715520
2025-03-13 11:23:16.218556 test begin: paddle.reshape(Tensor([4, 17208, 62400],"float16"), shape=tuple(-1,200,312,), )

[Pass] paddle.reshape(Tensor([4, 17208, 62400],"float16"), shape=tuple(-1,200,312,), )
2025-03-13 11:39:21.505736 test begin: paddle.reshape(Tensor([4, 17661, 60800],"float16"), shape=tuple(-1,200,304,), )

[Pass] paddle.reshape(Tensor([4, 17661, 60800],"float16"), shape=tuple(-1,200,304,), )
2025-03-13 11:55:09.442693 test begin: paddle.reshape(Tensor([4, 17661, 60800],"float16"), shape=tuple(-1,304,200,), )

[Pass] paddle.reshape(Tensor([4, 17661, 60800],"float16"), shape=tuple(-1,304,200,), )
2025-03-13 12:11:04.059225 test begin: paddle.reshape(Tensor([4, 17825793, 32],"float32"), list[-1,128,], )

[Pass] paddle.reshape(Tensor([4, 17825793, 32],"float32"), list[-1,128,], )
2025-03-13 12:14:27.477198 test begin: paddle.reshape(Tensor([4, 17825793, 32],"float32"), list[-1,256,], )

[torch error] paddle.reshape(Tensor([4, 17825793, 32],"float32"), list[-1,256,], ) 
 shape '[-1, 256]' is invalid for input of size 2281701504
2025-03-13 12:14:31.736696 test begin: paddle.reshape(Tensor([4, 17825793, 32],"float32"), shape=list[-1,32,], )

[Pass] paddle.reshape(Tensor([4, 17825793, 32],"float32"), shape=list[-1,32,], )
2025-03-13 12:18:08.265745 test begin: paddle.reshape(Tensor([4, 18, 104245, 304],"float32"), shape=list[-1,216,304,], )

[torch error] paddle.reshape(Tensor([4, 18, 104245, 304],"float32"), shape=list[-1,216,304,], ) 
 shape '[-1, 216, 304]' is invalid for input of size 2281714560
2025-03-13 12:18:13.045414 test begin: paddle.reshape(Tensor([4, 18, 104245, 304],"float32"), shape=list[-1,232,304,], )

[torch error] paddle.reshape(Tensor([4, 18, 104245, 304],"float32"), shape=list[-1,232,304,], ) 
 shape '[-1, 232, 304]' is invalid for input of size 2281714560
2025-03-13 12:18:15.343187 test begin: paddle.reshape(Tensor([4, 18, 107062, 296],"float32"), shape=list[-1,216,296,], )

[torch error] paddle.reshape(Tensor([4, 18, 107062, 296],"float32"), shape=list[-1,216,296,], ) 
 shape '[-1, 216, 296]' is invalid for input of size 2281705344
2025-03-13 12:18:17.396278 test begin: paddle.reshape(Tensor([4, 18, 110036, 288],"float32"), shape=list[-1,200,288,], )

[torch error] paddle.reshape(Tensor([4, 18, 110036, 288],"float32"), shape=list[-1,200,288,], ) 
 shape '[-1, 200, 288]' is invalid for input of size 2281706496
2025-03-13 12:18:19.479597 test begin: paddle.reshape(Tensor([4, 18, 113180, 280],"float32"), shape=list[-1,272,280,], )

[torch error] paddle.reshape(Tensor([4, 18, 113180, 280],"float32"), shape=list[-1,272,280,], ) 
 shape '[-1, 272, 280]' is invalid for input of size 2281708800
2025-03-13 12:18:21.025077 test begin: paddle.reshape(Tensor([4, 18, 113180, 280],"float32"), shape=list[-1,280,280,], )

[torch error] paddle.reshape(Tensor([4, 18, 113180, 280],"float32"), shape=list[-1,280,280,], ) 
 shape '[-1, 280, 280]' is invalid for input of size 2281708800
2025-03-13 12:18:23.048372 test begin: paddle.reshape(Tensor([4, 18, 113180, 280],"float32"), shape=list[-1,336,280,], )

[torch error] paddle.reshape(Tensor([4, 18, 113180, 280],"float32"), shape=list[-1,336,280,], ) 
 shape '[-1, 336, 280]' is invalid for input of size 2281708800
2025-03-13 12:18:25.073327 test begin: paddle.reshape(Tensor([4, 18, 146715, 216],"float32"), shape=list[-1,272,216,], )

[torch error] paddle.reshape(Tensor([4, 18, 146715, 216],"float32"), shape=list[-1,272,216,], ) 
 shape '[-1, 272, 216]' is invalid for input of size 2281711680
2025-03-13 12:18:27.109244 test begin: paddle.reshape(Tensor([4, 18, 158452, 200],"float32"), shape=list[-1,328,200,], )

[torch error] paddle.reshape(Tensor([4, 18, 158452, 200],"float32"), shape=list[-1,328,200,], ) 
 shape '[-1, 328, 200]' is invalid for input of size 2281708800
2025-03-13 12:18:29.139023 test begin: paddle.reshape(Tensor([4, 18, 200, 158452],"float32"), shape=list[-1,200,288,], )

[Pass] paddle.reshape(Tensor([4, 18, 200, 158452],"float32"), shape=list[-1,200,288,], )
2025-03-13 12:21:32.902426 test begin: paddle.reshape(Tensor([4, 18, 216, 146715],"float32"), shape=list[-1,216,296,], )

[torch error] paddle.reshape(Tensor([4, 18, 216, 146715],"float32"), shape=list[-1,216,296,], ) 
 shape '[-1, 216, 296]' is invalid for input of size 2281711680
2025-03-13 12:21:37.044947 test begin: paddle.reshape(Tensor([4, 18, 216, 146715],"float32"), shape=list[-1,216,304,], )

[torch error] paddle.reshape(Tensor([4, 18, 216, 146715],"float32"), shape=list[-1,216,304,], ) 
 shape '[-1, 216, 304]' is invalid for input of size 2281711680
2025-03-13 12:21:39.361082 test begin: paddle.reshape(Tensor([4, 18, 232, 136597],"float32"), shape=list[-1,232,304,], )

[torch error] paddle.reshape(Tensor([4, 18, 232, 136597],"float32"), shape=list[-1,232,304,], ) 
 shape '[-1, 232, 304]' is invalid for input of size 2281716288
2025-03-13 12:21:41.377130 test begin: paddle.reshape(Tensor([4, 18, 232, 136597],"float32"), shape=list[-1,232,320,], )

[torch error] paddle.reshape(Tensor([4, 18, 232, 136597],"float32"), shape=list[-1,232,320,], ) 
 shape '[-1, 232, 320]' is invalid for input of size 2281716288
2025-03-13 12:21:42.780013 test begin: paddle.reshape(Tensor([4, 18, 272, 116509],"float32"), shape=list[-1,272,216,], )

[torch error] paddle.reshape(Tensor([4, 18, 272, 116509],"float32"), shape=list[-1,272,216,], ) 
 shape '[-1, 272, 216]' is invalid for input of size 2281712256
2025-03-13 12:21:44.734834 test begin: paddle.reshape(Tensor([4, 18, 272, 116509],"float32"), shape=list[-1,272,280,], )

[torch error] paddle.reshape(Tensor([4, 18, 272, 116509],"float32"), shape=list[-1,272,280,], ) 
 shape '[-1, 272, 280]' is invalid for input of size 2281712256
2025-03-13 12:21:46.711736 test begin: paddle.reshape(Tensor([4, 18, 280, 113180],"float32"), shape=list[-1,280,280,], )

[torch error] paddle.reshape(Tensor([4, 18, 280, 113180],"float32"), shape=list[-1,280,280,], ) 
 shape '[-1, 280, 280]' is invalid for input of size 2281708800
2025-03-13 12:21:48.711577 test begin: paddle.reshape(Tensor([4, 18, 304, 104245],"float32"), shape=list[-1,304,328,], )

[torch error] paddle.reshape(Tensor([4, 18, 304, 104245],"float32"), shape=list[-1,304,328,], ) 
 shape '[-1, 304, 328]' is invalid for input of size 2281714560
2025-03-13 12:21:50.979588 test begin: paddle.reshape(Tensor([4, 18, 31690297],"float32"), shape=tuple(-1,232,320,), )

[torch error] paddle.reshape(Tensor([4, 18, 31690297],"float32"), shape=tuple(-1,232,320,), ) 
 shape '[-1, 232, 320]' is invalid for input of size 2281701384
2025-03-13 12:21:53.103796 test begin: paddle.reshape(Tensor([4, 18, 31690297],"float32"), shape=tuple(-1,272,216,), )

[torch error] paddle.reshape(Tensor([4, 18, 31690297],"float32"), shape=tuple(-1,272,216,), ) 
 shape '[-1, 272, 216]' is invalid for input of size 2281701384
2025-03-13 12:21:55.230132 test begin: paddle.reshape(Tensor([4, 18, 328, 96617],"float32"), shape=list[-1,328,200,], )

[torch error] paddle.reshape(Tensor([4, 18, 328, 96617],"float32"), shape=list[-1,328,200,], ) 
 shape '[-1, 328, 200]' is invalid for input of size 2281707072
2025-03-13 12:21:57.760279 test begin: paddle.reshape(Tensor([4, 18, 336, 94317],"float32"), shape=list[-1,336,280,], )

[torch error] paddle.reshape(Tensor([4, 18, 336, 94317],"float32"), shape=list[-1,336,280,], ) 
 shape '[-1, 336, 280]' is invalid for input of size 2281716864
2025-03-13 12:21:59.830429 test begin: paddle.reshape(Tensor([4, 18, 336, 94317],"float32"), shape=list[-1,336,336,], )

[torch error] paddle.reshape(Tensor([4, 18, 336, 94317],"float32"), shape=list[-1,336,336,], ) 
 shape '[-1, 336, 336]' is invalid for input of size 2281716864
2025-03-13 12:22:01.952135 test begin: paddle.reshape(Tensor([4, 18, 59652324],"float16"), shape=tuple(-1,200,288,), )

[torch error] paddle.reshape(Tensor([4, 18, 59652324],"float16"), shape=tuple(-1,200,288,), ) 
 shape '[-1, 200, 288]' is invalid for input of size 4294967328
2025-03-13 12:22:05.578976 test begin: paddle.reshape(Tensor([4, 18, 59652324],"float16"), shape=tuple(-1,232,320,), )

[torch error] paddle.reshape(Tensor([4, 18, 59652324],"float16"), shape=tuple(-1,232,320,), ) 
 shape '[-1, 232, 320]' is invalid for input of size 4294967328
2025-03-13 12:22:06.799822 test begin: paddle.reshape(Tensor([4, 18, 59652324],"float16"), shape=tuple(-1,272,216,), )

[torch error] paddle.reshape(Tensor([4, 18, 59652324],"float16"), shape=tuple(-1,272,216,), ) 
 shape '[-1, 272, 216]' is invalid for input of size 4294967328
2025-03-13 12:22:07.910039 test begin: paddle.reshape(Tensor([4, 18, 59652324],"float16"), shape=tuple(-1,272,280,), )

[torch error] paddle.reshape(Tensor([4, 18, 59652324],"float16"), shape=tuple(-1,272,280,), ) 
 shape '[-1, 272, 280]' is invalid for input of size 4294967328
2025-03-13 12:22:09.502534 test begin: paddle.reshape(Tensor([4, 18, 59652324],"float16"), shape=tuple(-1,280,280,), )

[torch error] paddle.reshape(Tensor([4, 18, 59652324],"float16"), shape=tuple(-1,280,280,), ) 
 shape '[-1, 280, 280]' is invalid for input of size 4294967328
2025-03-13 12:22:11.682545 test begin: paddle.reshape(Tensor([4, 18, 59652324],"float16"), shape=tuple(-1,328,200,), )

[torch error] paddle.reshape(Tensor([4, 18, 59652324],"float16"), shape=tuple(-1,328,200,), ) 
 shape '[-1, 328, 200]' is invalid for input of size 4294967328
2025-03-13 12:22:13.598786 test begin: paddle.reshape(Tensor([4, 18, 59652324],"float16"), shape=tuple(-1,336,280,), )

[torch error] paddle.reshape(Tensor([4, 18, 59652324],"float16"), shape=tuple(-1,336,280,), ) 
 shape '[-1, 336, 280]' is invalid for input of size 4294967328
2025-03-13 12:22:15.172565 test begin: paddle.reshape(Tensor([4, 18, 94317, 336],"float32"), shape=list[-1,336,336,], )

[torch error] paddle.reshape(Tensor([4, 18, 94317, 336],"float32"), shape=list[-1,336,336,], ) 
 shape '[-1, 336, 336]' is invalid for input of size 2281716864
2025-03-13 12:22:18.221498 test begin: paddle.reshape(Tensor([4, 18, 96617, 328],"float32"), shape=list[-1,304,328,], )

[torch error] paddle.reshape(Tensor([4, 18, 96617, 328],"float32"), shape=list[-1,304,328,], ) 
 shape '[-1, 304, 328]' is invalid for input of size 2281707072
2025-03-13 12:22:20.271240 test begin: paddle.reshape(Tensor([4, 18, 99033, 320],"float32"), shape=list[-1,232,320,], )

[torch error] paddle.reshape(Tensor([4, 18, 99033, 320],"float32"), shape=list[-1,232,320,], ) 
 shape '[-1, 232, 320]' is invalid for input of size 2281720320
2025-03-13 12:22:22.370381 test begin: paddle.reshape(Tensor([4, 18138, 59200],"float16"), shape=tuple(-1,200,296,), )

[Pass] paddle.reshape(Tensor([4, 18138, 59200],"float16"), shape=tuple(-1,200,296,), )
2025-03-13 12:38:21.243878 test begin: paddle.reshape(Tensor([4, 18276, 58752],"float16"), shape=tuple(-1,272,216,), )

[Pass] paddle.reshape(Tensor([4, 18276, 58752],"float16"), shape=tuple(-1,272,216,), )
2025-03-13 12:55:35.968194 test begin: paddle.reshape(Tensor([4, 18642, 57600],"float16"), shape=tuple(-1,200,288,), )

[Pass] paddle.reshape(Tensor([4, 18642, 57600],"float16"), shape=tuple(-1,200,288,), )
2025-03-13 13:12:59.482283 test begin: paddle.reshape(Tensor([4, 18979, 56576],"float16"), shape=tuple(-1,208,272,), )

[Pass] paddle.reshape(Tensor([4, 18979, 56576],"float16"), shape=tuple(-1,208,272,), )
2025-03-13 13:29:56.392809 test begin: paddle.reshape(Tensor([4, 19, 104245, 288],"float32"), shape=list[-1,304,288,], )

[torch error] paddle.reshape(Tensor([4, 19, 104245, 288],"float32"), shape=list[-1,304,288,], ) 
 shape '[-1, 304, 288]' is invalid for input of size 2281714560
2025-03-13 13:30:01.108239 test begin: paddle.reshape(Tensor([4, 19, 107223, 280],"float32"), shape=list[-1,304,280,], )

[torch error] paddle.reshape(Tensor([4, 19, 107223, 280],"float32"), shape=list[-1,304,280,], ) 
 shape '[-1, 304, 280]' is invalid for input of size 2281705440
2025-03-13 13:30:03.424931 test begin: paddle.reshape(Tensor([4, 19, 110377, 272],"float32"), shape=list[-1,288,272,], )

[torch error] paddle.reshape(Tensor([4, 19, 110377, 272],"float32"), shape=list[-1,288,272,], ) 
 shape '[-1, 288, 272]' is invalid for input of size 2281713344
2025-03-13 13:30:05.545666 test begin: paddle.reshape(Tensor([4, 19, 216, 138993],"float32"), shape=list[-1,216,312,], )

[torch error] paddle.reshape(Tensor([4, 19, 216, 138993],"float32"), shape=list[-1,216,312,], ) 
 shape '[-1, 216, 312]' is invalid for input of size 2281709088
2025-03-13 13:30:07.177621 test begin: paddle.reshape(Tensor([4, 19, 288, 104245],"float32"), shape=list[-1,288,272,], )

[torch error] paddle.reshape(Tensor([4, 19, 288, 104245],"float32"), shape=list[-1,288,272,], ) 
 shape '[-1, 288, 272]' is invalid for input of size 2281714560
2025-03-13 13:30:09.255368 test begin: paddle.reshape(Tensor([4, 19, 30022387],"float32"), shape=tuple(-1,304,280,), )

[torch error] paddle.reshape(Tensor([4, 19, 30022387],"float32"), shape=tuple(-1,304,280,), ) 
 shape '[-1, 304, 280]' is invalid for input of size 2281701412
2025-03-13 13:30:11.317191 test begin: paddle.reshape(Tensor([4, 19, 304, 98758],"float32"), shape=list[-1,304,280,], )

[torch error] paddle.reshape(Tensor([4, 19, 304, 98758],"float32"), shape=list[-1,304,280,], ) 
 shape '[-1, 304, 280]' is invalid for input of size 2281704832
2025-03-13 13:30:13.391804 test begin: paddle.reshape(Tensor([4, 19, 304, 98758],"float32"), shape=list[-1,304,288,], )

[torch error] paddle.reshape(Tensor([4, 19, 304, 98758],"float32"), shape=list[-1,304,288,], ) 
 shape '[-1, 304, 288]' is invalid for input of size 2281704832
2025-03-13 13:30:15.463221 test begin: paddle.reshape(Tensor([4, 19, 56512728],"float16"), shape=tuple(-1,216,312,), )

[torch error] paddle.reshape(Tensor([4, 19, 56512728],"float16"), shape=tuple(-1,216,312,), ) 
 shape '[-1, 216, 312]' is invalid for input of size 4294967328
2025-03-13 13:30:19.447428 test begin: paddle.reshape(Tensor([4, 19, 56512728],"float16"), shape=tuple(-1,304,280,), )

[torch error] paddle.reshape(Tensor([4, 19, 56512728],"float16"), shape=tuple(-1,304,280,), ) 
 shape '[-1, 304, 280]' is invalid for input of size 4294967328
2025-03-13 13:30:21.288318 test begin: paddle.reshape(Tensor([4, 19, 56512728],"float16"), shape=tuple(-1,304,288,), )

[torch error] paddle.reshape(Tensor([4, 19, 56512728],"float16"), shape=tuple(-1,304,288,), ) 
 shape '[-1, 304, 288]' is invalid for input of size 4294967328
2025-03-13 13:30:23.348662 test begin: paddle.reshape(Tensor([4, 19, 96226, 312],"float32"), shape=list[-1,216,312,], )

[torch error] paddle.reshape(Tensor([4, 19, 96226, 312],"float32"), shape=list[-1,216,312,], ) 
 shape '[-1, 216, 312]' is invalid for input of size 2281710912
2025-03-13 13:30:25.867282 test begin: paddle.reshape(Tensor([4, 19174, 56000],"float16"), shape=tuple(-1,200,280,), )

[Pass] paddle.reshape(Tensor([4, 19174, 56000],"float16"), shape=tuple(-1,200,280,), )
2025-03-13 13:46:32.569184 test begin: paddle.reshape(Tensor([4, 19738, 200, 272],"float16"), shape=tuple(4,256,-1,), )

[Pass] paddle.reshape(Tensor([4, 19738, 200, 272],"float16"), shape=tuple(4,256,-1,), )
2025-03-13 14:02:42.599549 test begin: paddle.reshape(Tensor([4, 19738, 54400],"float16"), shape=tuple(-1,200,272,), )

[Pass] paddle.reshape(Tensor([4, 19738, 54400],"float16"), shape=tuple(-1,200,272,), )
2025-03-13 14:19:12.770688 test begin: paddle.reshape(Tensor([4, 19738, 54400],"float16"), shape=tuple(-1,272,200,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 86, in func_timeout
    thread.join(timeout)
  File "/usr/lib/python3.9/threading.py", line 1064, in join
    self._wait_for_tstate_lock(timeout=max(timeout, 0))
  File "/usr/lib/python3.9/threading.py", line 1080, in _wait_for_tstate_lock
    if lock.acquire(block, timeout):
KeyboardInterrupt
2025-03-14 09:07:46.137110 test begin: paddle.reshape(Tensor([4, 2, 1018617, 280],"float32"), shape=list[-1,304,280,], )

W0314 09:09:02.726830 129588 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0314 09:09:02.728535 129588 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[torch error] paddle.reshape(Tensor([4, 2, 1018617, 280],"float32"), shape=list[-1,304,280,], ) 
 shape '[-1, 304, 280]' is invalid for input of size 2281702080
2025-03-14 09:09:04.745047 test begin: paddle.reshape(Tensor([4, 2, 1048577, 272],"float32"), shape=list[-1,280,272,], )

[torch error] paddle.reshape(Tensor([4, 2, 1048577, 272],"float32"), shape=list[-1,280,272,], ) 
 shape '[-1, 280, 272]' is invalid for input of size 2281703552
2025-03-14 09:09:08.027399 test begin: paddle.reshape(Tensor([4, 2, 1048577, 272],"float32"), shape=list[-1,320,272,], )

[torch error] paddle.reshape(Tensor([4, 2, 1048577, 272],"float32"), shape=list[-1,320,272,], ) 
 shape '[-1, 320, 272]' is invalid for input of size 2281703552
2025-03-14 09:09:09.744451 test begin: paddle.reshape(Tensor([4, 2, 1426064, 200],"float32"), shape=list[-1,336,200,], )

[torch error] paddle.reshape(Tensor([4, 2, 1426064, 200],"float32"), shape=list[-1,336,200,], ) 
 shape '[-1, 336, 200]' is invalid for input of size 2281702400
2025-03-14 09:09:11.260147 test begin: paddle.reshape(Tensor([4, 2, 272, 1048577],"float32"), shape=list[-1,272,320,], )

[torch error] paddle.reshape(Tensor([4, 2, 272, 1048577],"float32"), shape=list[-1,272,320,], ) 
 shape '[-1, 272, 320]' is invalid for input of size 2281703552
2025-03-14 09:09:13.257762 test begin: paddle.reshape(Tensor([4, 2, 280, 1018617],"float32"), shape=list[-1,280,272,], )

[torch error] paddle.reshape(Tensor([4, 2, 280, 1018617],"float32"), shape=list[-1,280,272,], ) 
 shape '[-1, 280, 272]' is invalid for input of size 2281702080
2025-03-14 09:09:14.958202 test begin: paddle.reshape(Tensor([4, 2, 285212673],"float32"), shape=tuple(-1,320,272,), )

[torch error] paddle.reshape(Tensor([4, 2, 285212673],"float32"), shape=tuple(-1,320,272,), ) 
 shape '[-1, 320, 272]' is invalid for input of size 2281701384
2025-03-14 09:09:16.012801 test begin: paddle.reshape(Tensor([4, 2, 285212673],"float32"), shape=tuple(-1,320,320,), )

[torch error] paddle.reshape(Tensor([4, 2, 285212673],"float32"), shape=tuple(-1,320,320,), ) 
 shape '[-1, 320, 320]' is invalid for input of size 2281701384
2025-03-14 09:09:17.483430 test begin: paddle.reshape(Tensor([4, 2, 285212673],"float32"), shape=tuple(-1,328,296,), )

[torch error] paddle.reshape(Tensor([4, 2, 285212673],"float32"), shape=tuple(-1,328,296,), ) 
 shape '[-1, 328, 296]' is invalid for input of size 2281701384
2025-03-14 09:09:19.491320 test begin: paddle.reshape(Tensor([4, 2, 304, 938200],"float32"), shape=list[-1,304,280,], )

[torch error] paddle.reshape(Tensor([4, 2, 304, 938200],"float32"), shape=list[-1,304,280,], ) 
 shape '[-1, 304, 280]' is invalid for input of size 2281702400
2025-03-14 09:09:21.169944 test begin: paddle.reshape(Tensor([4, 2, 312, 914144],"float32"), shape=list[-1,312,304,], )

[torch error] paddle.reshape(Tensor([4, 2, 312, 914144],"float32"), shape=list[-1,312,304,], ) 
 shape '[-1, 312, 304]' is invalid for input of size 2281703424
2025-03-14 09:09:22.538541 test begin: paddle.reshape(Tensor([4, 2, 320, 891290],"float32"), shape=list[-1,320,272,], )

[torch error] paddle.reshape(Tensor([4, 2, 320, 891290],"float32"), shape=list[-1,320,272,], ) 
 shape '[-1, 320, 272]' is invalid for input of size 2281702400
2025-03-14 09:09:24.183083 test begin: paddle.reshape(Tensor([4, 2, 320, 891290],"float32"), shape=list[-1,320,320,], )

[torch error] paddle.reshape(Tensor([4, 2, 320, 891290],"float32"), shape=list[-1,320,320,], ) 
 shape '[-1, 320, 320]' is invalid for input of size 2281702400
2025-03-14 09:09:25.620998 test begin: paddle.reshape(Tensor([4, 2, 328, 869551],"float32"), shape=list[-1,328,296,], )

[torch error] paddle.reshape(Tensor([4, 2, 328, 869551],"float32"), shape=list[-1,328,296,], ) 
 shape '[-1, 328, 296]' is invalid for input of size 2281701824
2025-03-14 09:09:27.587811 test begin: paddle.reshape(Tensor([4, 2, 336, 848848],"float32"), shape=list[-1,336,200,], )

[torch error] paddle.reshape(Tensor([4, 2, 336, 848848],"float32"), shape=list[-1,336,200,], ) 
 shape '[-1, 336, 200]' is invalid for input of size 2281703424
2025-03-14 09:09:29.550693 test begin: paddle.reshape(Tensor([4, 2, 336, 848848],"float32"), shape=list[-1,336,320,], )

[torch error] paddle.reshape(Tensor([4, 2, 336, 848848],"float32"), shape=list[-1,336,320,], ) 
 shape '[-1, 336, 320]' is invalid for input of size 2281703424
2025-03-14 09:09:31.487137 test begin: paddle.reshape(Tensor([4, 2, 536870913],"float16"), shape=tuple(-1,272,320,), )

[torch error] paddle.reshape(Tensor([4, 2, 536870913],"float16"), shape=tuple(-1,272,320,), ) 
 shape '[-1, 272, 320]' is invalid for input of size 4294967304
2025-03-14 09:10:56.845899 test begin: paddle.reshape(Tensor([4, 2, 536870913],"float16"), shape=tuple(-1,320,272,), )

[torch error] paddle.reshape(Tensor([4, 2, 536870913],"float16"), shape=tuple(-1,320,272,), ) 
 shape '[-1, 320, 272]' is invalid for input of size 4294967304
2025-03-14 09:10:58.412001 test begin: paddle.reshape(Tensor([4, 2, 536870913],"float16"), shape=tuple(-1,320,320,), )

[torch error] paddle.reshape(Tensor([4, 2, 536870913],"float16"), shape=tuple(-1,320,320,), ) 
 shape '[-1, 320, 320]' is invalid for input of size 4294967304
2025-03-14 09:11:00.810589 test begin: paddle.reshape(Tensor([4, 2, 536870913],"float16"), shape=tuple(-1,328,296,), )

[torch error] paddle.reshape(Tensor([4, 2, 536870913],"float16"), shape=tuple(-1,328,296,), ) 
 shape '[-1, 328, 296]' is invalid for input of size 4294967304
2025-03-14 09:11:04.353182 test begin: paddle.reshape(Tensor([4, 2, 536870913],"float16"), shape=tuple(-1,336,200,), )

[torch error] paddle.reshape(Tensor([4, 2, 536870913],"float16"), shape=tuple(-1,336,200,), ) 
 shape '[-1, 336, 200]' is invalid for input of size 4294967304
2025-03-14 09:11:06.476042 test begin: paddle.reshape(Tensor([4, 2, 536870913],"float16"), shape=tuple(-1,336,320,), )

[torch error] paddle.reshape(Tensor([4, 2, 536870913],"float16"), shape=tuple(-1,336,320,), ) 
 shape '[-1, 336, 320]' is invalid for input of size 4294967304
2025-03-14 09:11:08.083161 test begin: paddle.reshape(Tensor([4, 2, 891290, 320],"float32"), shape=list[-1,272,320,], )

[torch error] paddle.reshape(Tensor([4, 2, 891290, 320],"float32"), shape=list[-1,272,320,], ) 
 shape '[-1, 272, 320]' is invalid for input of size 2281702400
2025-03-14 09:11:12.710137 test begin: paddle.reshape(Tensor([4, 2, 891290, 320],"float32"), shape=list[-1,320,320,], )

[torch error] paddle.reshape(Tensor([4, 2, 891290, 320],"float32"), shape=list[-1,320,320,], ) 
 shape '[-1, 320, 320]' is invalid for input of size 2281702400
2025-03-14 09:11:14.641177 test begin: paddle.reshape(Tensor([4, 2, 891290, 320],"float32"), shape=list[-1,336,320,], )

[torch error] paddle.reshape(Tensor([4, 2, 891290, 320],"float32"), shape=list[-1,336,320,], ) 
 shape '[-1, 336, 320]' is invalid for input of size 2281702400
2025-03-14 09:11:16.654248 test begin: paddle.reshape(Tensor([4, 2, 938200, 304],"float32"), shape=list[-1,312,304,], )

[torch error] paddle.reshape(Tensor([4, 2, 938200, 304],"float32"), shape=list[-1,312,304,], ) 
 shape '[-1, 312, 304]' is invalid for input of size 2281702400
2025-03-14 09:11:18.648154 test begin: paddle.reshape(Tensor([4, 2, 963557, 296],"float32"), shape=list[-1,328,296,], )

[torch error] paddle.reshape(Tensor([4, 2, 963557, 296],"float32"), shape=list[-1,328,296,], ) 
 shape '[-1, 328, 296]' is invalid for input of size 2281702976
2025-03-14 09:11:20.665175 test begin: paddle.reshape(Tensor([4, 20, 101862, 280],"float32"), shape=list[-1,272,280,], )

[torch error] paddle.reshape(Tensor([4, 20, 101862, 280],"float32"), shape=list[-1,272,280,], ) 
 shape '[-1, 272, 280]' is invalid for input of size 2281708800
2025-03-14 09:11:22.697513 test begin: paddle.reshape(Tensor([4, 20, 142607, 200],"float32"), shape=list[-1,272,200,], )

[torch error] paddle.reshape(Tensor([4, 20, 142607, 200],"float32"), shape=list[-1,272,200,], ) 
 shape '[-1, 272, 200]' is invalid for input of size 2281712000
2025-03-14 09:11:24.759857 test begin: paddle.reshape(Tensor([4, 20, 208, 137122],"float32"), shape=list[-1,208,304,], )

[torch error] paddle.reshape(Tensor([4, 20, 208, 137122],"float32"), shape=list[-1,208,304,], ) 
 shape '[-1, 208, 304]' is invalid for input of size 2281710080
2025-03-14 09:11:26.827180 test begin: paddle.reshape(Tensor([4, 20, 208, 137122],"float32"), shape=list[-1,208,336,], )

[torch error] paddle.reshape(Tensor([4, 20, 208, 137122],"float32"), shape=list[-1,208,336,], ) 
 shape '[-1, 208, 336]' is invalid for input of size 2281710080
2025-03-14 09:11:28.870019 test begin: paddle.reshape(Tensor([4, 20, 256, 111412],"float32"), shape=list[-1,256,336,], )

[torch error] paddle.reshape(Tensor([4, 20, 256, 111412],"float32"), shape=list[-1,256,336,], ) 
 shape '[-1, 256, 336]' is invalid for input of size 2281717760
2025-03-14 09:11:31.487838 test begin: paddle.reshape(Tensor([4, 20, 272, 104858],"float32"), shape=list[-1,272,200,], )

[torch error] paddle.reshape(Tensor([4, 20, 272, 104858],"float32"), shape=list[-1,272,200,], ) 
 shape '[-1, 272, 200]' is invalid for input of size 2281710080
2025-03-14 09:11:33.665395 test begin: paddle.reshape(Tensor([4, 20, 272, 104858],"float32"), shape=list[-1,272,280,], )

[torch error] paddle.reshape(Tensor([4, 20, 272, 104858],"float32"), shape=list[-1,272,280,], ) 
 shape '[-1, 272, 280]' is invalid for input of size 2281710080
2025-03-14 09:11:35.530550 test begin: paddle.reshape(Tensor([4, 20, 28521268],"float32"), shape=tuple(-1,208,336,), )

[torch error] paddle.reshape(Tensor([4, 20, 28521268],"float32"), shape=tuple(-1,208,336,), ) 
 shape '[-1, 208, 336]' is invalid for input of size 2281701440
2025-03-14 09:11:37.525739 test begin: paddle.reshape(Tensor([4, 20, 304, 93820],"float32"), shape=list[-1,304,296,], )

[torch error] paddle.reshape(Tensor([4, 20, 304, 93820],"float32"), shape=list[-1,304,296,], ) 
 shape '[-1, 304, 296]' is invalid for input of size 2281702400
2025-03-14 09:11:39.482457 test begin: paddle.reshape(Tensor([4, 20, 312, 91415],"float32"), shape=list[-1,312,296,], )

[torch error] paddle.reshape(Tensor([4, 20, 312, 91415],"float32"), shape=list[-1,312,296,], ) 
 shape '[-1, 312, 296]' is invalid for input of size 2281718400
2025-03-14 09:11:41.604389 test begin: paddle.reshape(Tensor([4, 20, 320, 89129],"float32"), shape=list[-1,320,304,], )

[Pass] paddle.reshape(Tensor([4, 20, 320, 89129],"float32"), shape=list[-1,320,304,], )
2025-03-14 09:14:39.177163 test begin: paddle.reshape(Tensor([4, 20, 328, 86956],"float32"), shape=list[-1,328,296,], )

[torch error] paddle.reshape(Tensor([4, 20, 328, 86956],"float32"), shape=list[-1,328,296,], ) 
 shape '[-1, 328, 296]' is invalid for input of size 2281725440
2025-03-14 09:14:43.138510 test begin: paddle.reshape(Tensor([4, 20, 53687092],"float16"), shape=tuple(-1,208,336,), )

[torch error] paddle.reshape(Tensor([4, 20, 53687092],"float16"), shape=tuple(-1,208,336,), ) 
 shape '[-1, 208, 336]' is invalid for input of size 4294967360
2025-03-14 09:14:47.285416 test begin: paddle.reshape(Tensor([4, 20, 53687092],"float16"), shape=tuple(-1,272,200,), )

[torch error] paddle.reshape(Tensor([4, 20, 53687092],"float16"), shape=tuple(-1,272,200,), ) 
 shape '[-1, 272, 200]' is invalid for input of size 4294967360
2025-03-14 09:14:49.004514 test begin: paddle.reshape(Tensor([4, 20, 53687092],"float16"), shape=tuple(-1,304,296,), )

[torch error] paddle.reshape(Tensor([4, 20, 53687092],"float16"), shape=tuple(-1,304,296,), ) 
 shape '[-1, 304, 296]' is invalid for input of size 4294967360
2025-03-14 09:14:51.386399 test begin: paddle.reshape(Tensor([4, 20, 53687092],"float16"), shape=tuple(-1,328,296,), )

[torch error] paddle.reshape(Tensor([4, 20, 53687092],"float16"), shape=tuple(-1,328,296,), ) 
 shape '[-1, 328, 296]' is invalid for input of size 4294967360
2025-03-14 09:14:53.013354 test begin: paddle.reshape(Tensor([4, 20, 84885, 336],"float32"), shape=list[-1,208,336,], )

[torch error] paddle.reshape(Tensor([4, 20, 84885, 336],"float32"), shape=list[-1,208,336,], ) 
 shape '[-1, 208, 336]' is invalid for input of size 2281708800
2025-03-14 09:14:54.467521 test begin: paddle.reshape(Tensor([4, 20, 84885, 336],"float32"), shape=list[-1,256,336,], )

[torch error] paddle.reshape(Tensor([4, 20, 84885, 336],"float32"), shape=list[-1,256,336,], ) 
 shape '[-1, 256, 336]' is invalid for input of size 2281708800
2025-03-14 09:14:56.124890 test begin: paddle.reshape(Tensor([4, 20, 93820, 304],"float32"), shape=list[-1,208,304,], )

[torch error] paddle.reshape(Tensor([4, 20, 93820, 304],"float32"), shape=list[-1,208,304,], ) 
 shape '[-1, 208, 304]' is invalid for input of size 2281702400
2025-03-14 09:14:58.110343 test begin: paddle.reshape(Tensor([4, 20, 93820, 304],"float32"), shape=list[-1,320,304,], )

[Pass] paddle.reshape(Tensor([4, 20, 93820, 304],"float32"), shape=list[-1,320,304,], )
2025-03-14 09:17:47.479236 test begin: paddle.reshape(Tensor([4, 20, 96356, 296],"float32"), shape=list[-1,304,296,], )

[torch error] paddle.reshape(Tensor([4, 20, 96356, 296],"float32"), shape=list[-1,304,296,], ) 
 shape '[-1, 304, 296]' is invalid for input of size 2281710080
2025-03-14 09:17:50.119410 test begin: paddle.reshape(Tensor([4, 20, 96356, 296],"float32"), shape=list[-1,312,296,], )

[torch error] paddle.reshape(Tensor([4, 20, 96356, 296],"float32"), shape=list[-1,312,296,], ) 
 shape '[-1, 312, 296]' is invalid for input of size 2281710080
2025-03-14 09:17:51.846083 test begin: paddle.reshape(Tensor([4, 20, 96356, 296],"float32"), shape=list[-1,328,296,], )

[torch error] paddle.reshape(Tensor([4, 20, 96356, 296],"float32"), shape=list[-1,328,296,], ) 
 shape '[-1, 328, 296]' is invalid for input of size 2281710080
2025-03-14 09:17:52.956609 test begin: paddle.reshape(Tensor([4, 200, 2852127],"float32"), shape=tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([4, 200, 2852127],"float32"), shape=tuple(4,-1,), )
2025-03-14 09:20:27.159348 test begin: paddle.reshape(Tensor([4, 200, 5368710],"float16"), shape=tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([4, 200, 5368710],"float16"), shape=tuple(4,-1,), )
2025-03-14 09:37:36.601816 test begin: paddle.reshape(Tensor([4, 2097153, 272],"float32"), shape=tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([4, 2097153, 272],"float32"), shape=tuple(4,-1,), )
2025-03-14 09:40:34.102623 test begin: paddle.reshape(Tensor([4, 21, 200, 135816],"float32"), shape=list[-1,200,288,], )

[Pass] paddle.reshape(Tensor([4, 21, 200, 135816],"float32"), shape=list[-1,200,288,], )
2025-03-14 09:43:38.657136 test begin: paddle.reshape(Tensor([4, 21, 208, 130592],"float32"), shape=list[-1,208,336,], )

[Pass] paddle.reshape(Tensor([4, 21, 208, 130592],"float32"), shape=list[-1,208,336,], )
2025-03-14 09:46:39.585191 test begin: paddle.reshape(Tensor([4, 21, 240, 113180],"float32"), shape=list[-1,240,304,], )

[torch error] paddle.reshape(Tensor([4, 21, 240, 113180],"float32"), shape=list[-1,240,304,], ) 
 shape '[-1, 240, 304]' is invalid for input of size 2281708800
2025-03-14 09:46:43.673225 test begin: paddle.reshape(Tensor([4, 21, 248, 109529],"float32"), shape=list[-1,248,304,], )

[torch error] paddle.reshape(Tensor([4, 21, 248, 109529],"float32"), shape=list[-1,248,304,], ) 
 shape '[-1, 248, 304]' is invalid for input of size 2281708128
2025-03-14 09:46:45.297617 test begin: paddle.reshape(Tensor([4, 21, 264, 102891],"float32"), shape=list[-1,264,320,], )

[torch error] paddle.reshape(Tensor([4, 21, 264, 102891],"float32"), shape=list[-1,264,320,], ) 
 shape '[-1, 264, 320]' is invalid for input of size 2281710816
2025-03-14 09:46:47.643593 test begin: paddle.reshape(Tensor([4, 21, 27163112],"float32"), shape=tuple(-1,264,320,), )

[torch error] paddle.reshape(Tensor([4, 21, 27163112],"float32"), shape=tuple(-1,264,320,), ) 
 shape '[-1, 264, 320]' is invalid for input of size 2281701408
2025-03-14 09:46:50.360816 test begin: paddle.reshape(Tensor([4, 21, 280, 97012],"float32"), shape=list[-1,280,280,], )

[torch error] paddle.reshape(Tensor([4, 21, 280, 97012],"float32"), shape=list[-1,280,280,], ) 
 shape '[-1, 280, 280]' is invalid for input of size 2281722240
2025-03-14 09:46:52.775245 test begin: paddle.reshape(Tensor([4, 21, 312, 87062],"float32"), shape=list[-1,312,336,], )

[torch error] paddle.reshape(Tensor([4, 21, 312, 87062],"float32"), shape=list[-1,312,336,], ) 
 shape '[-1, 312, 336]' is invalid for input of size 2281720896
2025-03-14 09:46:54.442799 test begin: paddle.reshape(Tensor([4, 21, 51130564],"float16"), shape=tuple(-1,200,288,), )

[torch error] paddle.reshape(Tensor([4, 21, 51130564],"float16"), shape=tuple(-1,200,288,), ) 
 shape '[-1, 200, 288]' is invalid for input of size 4294967376
2025-03-14 09:46:58.253979 test begin: paddle.reshape(Tensor([4, 21, 51130564],"float16"), shape=tuple(-1,208,336,), )

[torch error] paddle.reshape(Tensor([4, 21, 51130564],"float16"), shape=tuple(-1,208,336,), ) 
 shape '[-1, 208, 336]' is invalid for input of size 4294967376
2025-03-14 09:47:00.784126 test begin: paddle.reshape(Tensor([4, 21, 51130564],"float16"), shape=tuple(-1,240,304,), )

[torch error] paddle.reshape(Tensor([4, 21, 51130564],"float16"), shape=tuple(-1,240,304,), ) 
 shape '[-1, 240, 304]' is invalid for input of size 4294967376
2025-03-14 09:47:04.120273 test begin: paddle.reshape(Tensor([4, 21, 51130564],"float16"), shape=tuple(-1,248,304,), )

[torch error] paddle.reshape(Tensor([4, 21, 51130564],"float16"), shape=tuple(-1,248,304,), ) 
 shape '[-1, 248, 304]' is invalid for input of size 4294967376
2025-03-14 09:47:06.640910 test begin: paddle.reshape(Tensor([4, 21, 51130564],"float16"), shape=tuple(-1,264,320,), )

[torch error] paddle.reshape(Tensor([4, 21, 51130564],"float16"), shape=tuple(-1,264,320,), ) 
 shape '[-1, 264, 320]' is invalid for input of size 4294967376
2025-03-14 09:47:09.087099 test begin: paddle.reshape(Tensor([4, 21, 51130564],"float16"), shape=tuple(-1,312,336,), )

[torch error] paddle.reshape(Tensor([4, 21, 51130564],"float16"), shape=tuple(-1,312,336,), ) 
 shape '[-1, 312, 336]' is invalid for input of size 4294967376
2025-03-14 09:47:11.415488 test begin: paddle.reshape(Tensor([4, 21, 80843, 336],"float32"), shape=list[-1,208,336,], )

[torch error] paddle.reshape(Tensor([4, 21, 80843, 336],"float32"), shape=list[-1,208,336,], ) 
 shape '[-1, 208, 336]' is invalid for input of size 2281712832
2025-03-14 09:47:13.251607 test begin: paddle.reshape(Tensor([4, 21, 80843, 336],"float32"), shape=list[-1,312,336,], )

[torch error] paddle.reshape(Tensor([4, 21, 80843, 336],"float32"), shape=list[-1,312,336,], ) 
 shape '[-1, 312, 336]' is invalid for input of size 2281712832
2025-03-14 09:47:15.095247 test begin: paddle.reshape(Tensor([4, 21, 84885, 320],"float32"), shape=list[-1,264,320,], )

[torch error] paddle.reshape(Tensor([4, 21, 84885, 320],"float32"), shape=list[-1,264,320,], ) 
 shape '[-1, 264, 320]' is invalid for input of size 2281708800
2025-03-14 09:47:16.708114 test begin: paddle.reshape(Tensor([4, 21, 89353, 304],"float32"), shape=list[-1,240,304,], )

[torch error] paddle.reshape(Tensor([4, 21, 89353, 304],"float32"), shape=list[-1,240,304,], ) 
 shape '[-1, 240, 304]' is invalid for input of size 2281718208
2025-03-14 09:47:18.086109 test begin: paddle.reshape(Tensor([4, 21, 89353, 304],"float32"), shape=list[-1,248,304,], )

[torch error] paddle.reshape(Tensor([4, 21, 89353, 304],"float32"), shape=list[-1,248,304,], ) 
 shape '[-1, 248, 304]' is invalid for input of size 2281718208
2025-03-14 09:47:19.725643 test begin: paddle.reshape(Tensor([4, 21, 94317, 288],"float32"), shape=list[-1,200,288,], )

[torch error] paddle.reshape(Tensor([4, 21, 94317, 288],"float32"), shape=list[-1,200,288,], ) 
 shape '[-1, 200, 288]' is invalid for input of size 2281716864
2025-03-14 09:47:20.797809 test begin: paddle.reshape(Tensor([4, 21, 97012, 280],"float32"), shape=list[-1,280,280,], )

[torch error] paddle.reshape(Tensor([4, 21, 97012, 280],"float32"), shape=list[-1,280,280,], ) 
 shape '[-1, 280, 280]' is invalid for input of size 2281722240
2025-03-14 09:47:22.225872 test begin: paddle.reshape(Tensor([4, 22, 120040, 216],"float32"), shape=list[-1,304,216,], )

[torch error] paddle.reshape(Tensor([4, 22, 120040, 216],"float32"), shape=list[-1,304,216,], ) 
 shape '[-1, 304, 216]' is invalid for input of size 2281720320
2025-03-14 09:47:24.171870 test begin: paddle.reshape(Tensor([4, 22, 129643, 200],"float32"), shape=list[-1,272,200,], )

[torch error] paddle.reshape(Tensor([4, 22, 129643, 200],"float32"), shape=list[-1,272,200,], ) 
 shape '[-1, 272, 200]' is invalid for input of size 2281716800
2025-03-14 09:47:26.157759 test begin: paddle.reshape(Tensor([4, 22, 200, 129643],"float32"), shape=list[-1,200,280,], )

[torch error] paddle.reshape(Tensor([4, 22, 200, 129643],"float32"), shape=list[-1,200,280,], ) 
 shape '[-1, 200, 280]' is invalid for input of size 2281716800
2025-03-14 09:47:28.123688 test begin: paddle.reshape(Tensor([4, 22, 200, 129643],"float32"), shape=list[-1,200,288,], )

[torch error] paddle.reshape(Tensor([4, 22, 200, 129643],"float32"), shape=list[-1,200,288,], ) 
 shape '[-1, 200, 288]' is invalid for input of size 2281716800
2025-03-14 09:47:30.062556 test begin: paddle.reshape(Tensor([4, 22, 200, 129643],"float32"), shape=list[-1,200,296,], )

[torch error] paddle.reshape(Tensor([4, 22, 200, 129643],"float32"), shape=list[-1,200,296,], ) 
 shape '[-1, 200, 296]' is invalid for input of size 2281716800
2025-03-14 09:47:32.006946 test begin: paddle.reshape(Tensor([4, 22, 248, 104551],"float32"), shape=list[-1,248,336,], )

[torch error] paddle.reshape(Tensor([4, 22, 248, 104551],"float32"), shape=list[-1,248,336,], ) 
 shape '[-1, 248, 336]' is invalid for input of size 2281721024
2025-03-14 09:47:33.915061 test begin: paddle.reshape(Tensor([4, 22, 256, 101283],"float32"), shape=list[-1,256,272,], )

[torch error] paddle.reshape(Tensor([4, 22, 256, 101283],"float32"), shape=list[-1,256,272,], ) 
 shape '[-1, 256, 272]' is invalid for input of size 2281703424
2025-03-14 09:47:35.840553 test begin: paddle.reshape(Tensor([4, 22, 256, 101283],"float32"), shape=list[-1,256,304,], )

[torch error] paddle.reshape(Tensor([4, 22, 256, 101283],"float32"), shape=list[-1,256,304,], ) 
 shape '[-1, 256, 304]' is invalid for input of size 2281703424
2025-03-14 09:47:37.623838 test begin: paddle.reshape(Tensor([4, 22, 25928425],"float32"), shape=tuple(-1,200,280,), )

[torch error] paddle.reshape(Tensor([4, 22, 25928425],"float32"), shape=tuple(-1,200,280,), ) 
 shape '[-1, 200, 280]' is invalid for input of size 2281701400
2025-03-14 09:47:39.288208 test begin: paddle.reshape(Tensor([4, 22, 25928425],"float32"), shape=tuple(-1,200,296,), )

[torch error] paddle.reshape(Tensor([4, 22, 25928425],"float32"), shape=tuple(-1,200,296,), ) 
 shape '[-1, 200, 296]' is invalid for input of size 2281701400
2025-03-14 09:47:41.208016 test begin: paddle.reshape(Tensor([4, 22, 25928425],"float32"), shape=tuple(-1,248,336,), )

[torch error] paddle.reshape(Tensor([4, 22, 25928425],"float32"), shape=tuple(-1,248,336,), ) 
 shape '[-1, 248, 336]' is invalid for input of size 2281701400
2025-03-14 09:47:43.090409 test begin: paddle.reshape(Tensor([4, 22, 25928425],"float32"), shape=tuple(-1,256,272,), )

[torch error] paddle.reshape(Tensor([4, 22, 25928425],"float32"), shape=tuple(-1,256,272,), ) 
 shape '[-1, 256, 272]' is invalid for input of size 2281701400
2025-03-14 09:47:44.998609 test begin: paddle.reshape(Tensor([4, 22, 25928425],"float32"), shape=tuple(-1,264,336,), )

[torch error] paddle.reshape(Tensor([4, 22, 25928425],"float32"), shape=tuple(-1,264,336,), ) 
 shape '[-1, 264, 336]' is invalid for input of size 2281701400
2025-03-14 09:47:46.917188 test begin: paddle.reshape(Tensor([4, 22, 264, 98214],"float32"), shape=list[-1,264,320,], )

[torch error] paddle.reshape(Tensor([4, 22, 264, 98214],"float32"), shape=list[-1,264,320,], ) 
 shape '[-1, 264, 320]' is invalid for input of size 2281707648
2025-03-14 09:47:49.598732 test begin: paddle.reshape(Tensor([4, 22, 264, 98214],"float32"), shape=list[-1,264,336,], )

[torch error] paddle.reshape(Tensor([4, 22, 264, 98214],"float32"), shape=list[-1,264,336,], ) 
 shape '[-1, 264, 336]' is invalid for input of size 2281707648
2025-03-14 09:47:53.263878 test begin: paddle.reshape(Tensor([4, 22, 272, 95326],"float32"), shape=list[-1,272,200,], )

[torch error] paddle.reshape(Tensor([4, 22, 272, 95326],"float32"), shape=list[-1,272,200,], ) 
 shape '[-1, 272, 200]' is invalid for input of size 2281723136
2025-03-14 09:47:55.693270 test begin: paddle.reshape(Tensor([4, 22, 272, 95326],"float32"), shape=list[-1,272,320,], )

[torch error] paddle.reshape(Tensor([4, 22, 272, 95326],"float32"), shape=list[-1,272,320,], ) 
 shape '[-1, 272, 320]' is invalid for input of size 2281723136
2025-03-14 09:47:58.398976 test begin: paddle.reshape(Tensor([4, 22, 280, 92602],"float32"), shape=list[-1,280,280,], )

[torch error] paddle.reshape(Tensor([4, 22, 280, 92602],"float32"), shape=list[-1,280,280,], ) 
 shape '[-1, 280, 280]' is invalid for input of size 2281713280
2025-03-14 09:48:00.863042 test begin: paddle.reshape(Tensor([4, 22, 304, 85291],"float32"), shape=list[-1,304,216,], )

[torch error] paddle.reshape(Tensor([4, 22, 304, 85291],"float32"), shape=list[-1,304,216,], ) 
 shape '[-1, 304, 216]' is invalid for input of size 2281704832
2025-03-14 09:48:03.390278 test begin: paddle.reshape(Tensor([4, 22, 304, 85291],"float32"), shape=list[-1,304,288,], )

[torch error] paddle.reshape(Tensor([4, 22, 304, 85291],"float32"), shape=list[-1,304,288,], ) 
 shape '[-1, 304, 288]' is invalid for input of size 2281704832
2025-03-14 09:48:05.943595 test begin: paddle.reshape(Tensor([4, 22, 48806447],"float16"), shape=tuple(-1,200,280,), )

[torch error] paddle.reshape(Tensor([4, 22, 48806447],"float16"), shape=tuple(-1,200,280,), ) 
 shape '[-1, 200, 280]' is invalid for input of size 4294967336
2025-03-14 09:48:09.207991 test begin: paddle.reshape(Tensor([4, 22, 48806447],"float16"), shape=tuple(-1,200,296,), )

[torch error] paddle.reshape(Tensor([4, 22, 48806447],"float16"), shape=tuple(-1,200,296,), ) 
 shape '[-1, 200, 296]' is invalid for input of size 4294967336
2025-03-14 09:48:12.992828 test begin: paddle.reshape(Tensor([4, 22, 48806447],"float16"), shape=tuple(-1,248,336,), )

[torch error] paddle.reshape(Tensor([4, 22, 48806447],"float16"), shape=tuple(-1,248,336,), ) 
 shape '[-1, 248, 336]' is invalid for input of size 4294967336
2025-03-14 09:48:15.017635 test begin: paddle.reshape(Tensor([4, 22, 48806447],"float16"), shape=tuple(-1,256,272,), )

[torch error] paddle.reshape(Tensor([4, 22, 48806447],"float16"), shape=tuple(-1,256,272,), ) 
 shape '[-1, 256, 272]' is invalid for input of size 4294967336
2025-03-14 09:48:16.102636 test begin: paddle.reshape(Tensor([4, 22, 48806447],"float16"), shape=tuple(-1,264,320,), )

[torch error] paddle.reshape(Tensor([4, 22, 48806447],"float16"), shape=tuple(-1,264,320,), ) 
 shape '[-1, 264, 320]' is invalid for input of size 4294967336
2025-03-14 09:48:17.573069 test begin: paddle.reshape(Tensor([4, 22, 48806447],"float16"), shape=tuple(-1,264,336,), )

[torch error] paddle.reshape(Tensor([4, 22, 48806447],"float16"), shape=tuple(-1,264,336,), ) 
 shape '[-1, 264, 336]' is invalid for input of size 4294967336
2025-03-14 09:48:19.731738 test begin: paddle.reshape(Tensor([4, 22, 48806447],"float16"), shape=tuple(-1,304,216,), )

[torch error] paddle.reshape(Tensor([4, 22, 48806447],"float16"), shape=tuple(-1,304,216,), ) 
 shape '[-1, 304, 216]' is invalid for input of size 4294967336
2025-03-14 09:48:21.777318 test begin: paddle.reshape(Tensor([4, 22, 77168, 336],"float32"), shape=list[-1,248,336,], )

[torch error] paddle.reshape(Tensor([4, 22, 77168, 336],"float32"), shape=list[-1,248,336,], ) 
 shape '[-1, 248, 336]' is invalid for input of size 2281703424
2025-03-14 09:48:23.388836 test begin: paddle.reshape(Tensor([4, 22, 77168, 336],"float32"), shape=list[-1,264,336,], )

[torch error] paddle.reshape(Tensor([4, 22, 77168, 336],"float32"), shape=list[-1,264,336,], ) 
 shape '[-1, 264, 336]' is invalid for input of size 2281703424
2025-03-14 09:48:24.768687 test begin: paddle.reshape(Tensor([4, 22, 81027, 320],"float32"), shape=list[-1,264,320,], )

[Pass] paddle.reshape(Tensor([4, 22, 81027, 320],"float32"), shape=list[-1,264,320,], )
2025-03-14 09:51:33.549102 test begin: paddle.reshape(Tensor([4, 22, 81027, 320],"float32"), shape=list[-1,272,320,], )

[torch error] paddle.reshape(Tensor([4, 22, 81027, 320],"float32"), shape=list[-1,272,320,], ) 
 shape '[-1, 272, 320]' is invalid for input of size 2281720320
2025-03-14 09:51:37.587197 test begin: paddle.reshape(Tensor([4, 22, 85291, 304],"float32"), shape=list[-1,256,304,], )

[torch error] paddle.reshape(Tensor([4, 22, 85291, 304],"float32"), shape=list[-1,256,304,], ) 
 shape '[-1, 256, 304]' is invalid for input of size 2281704832
2025-03-14 09:51:39.292768 test begin: paddle.reshape(Tensor([4, 22, 87597, 296],"float32"), shape=list[-1,200,296,], )

[torch error] paddle.reshape(Tensor([4, 22, 87597, 296],"float32"), shape=list[-1,200,296,], ) 
 shape '[-1, 200, 296]' is invalid for input of size 2281726656
2025-03-14 09:51:41.263432 test begin: paddle.reshape(Tensor([4, 22, 90030, 288],"float32"), shape=list[-1,200,288,], )

[torch error] paddle.reshape(Tensor([4, 22, 90030, 288],"float32"), shape=list[-1,200,288,], ) 
 shape '[-1, 200, 288]' is invalid for input of size 2281720320
2025-03-14 09:51:43.230649 test begin: paddle.reshape(Tensor([4, 22, 90030, 288],"float32"), shape=list[-1,304,288,], )

[torch error] paddle.reshape(Tensor([4, 22, 90030, 288],"float32"), shape=list[-1,304,288,], ) 
 shape '[-1, 304, 288]' is invalid for input of size 2281720320
2025-03-14 09:51:45.191719 test begin: paddle.reshape(Tensor([4, 22, 92602, 280],"float32"), shape=list[-1,200,280,], )

[torch error] paddle.reshape(Tensor([4, 22, 92602, 280],"float32"), shape=list[-1,200,280,], ) 
 shape '[-1, 200, 280]' is invalid for input of size 2281713280
2025-03-14 09:51:47.833793 test begin: paddle.reshape(Tensor([4, 22, 92602, 280],"float32"), shape=list[-1,280,280,], )

[torch error] paddle.reshape(Tensor([4, 22, 92602, 280],"float32"), shape=list[-1,280,280,], ) 
 shape '[-1, 280, 280]' is invalid for input of size 2281713280
2025-03-14 09:51:49.571829 test begin: paddle.reshape(Tensor([4, 22, 95326, 272],"float32"), shape=list[-1,256,272,], )

[torch error] paddle.reshape(Tensor([4, 22, 95326, 272],"float32"), shape=list[-1,256,272,], ) 
 shape '[-1, 256, 272]' is invalid for input of size 2281723136
2025-03-14 09:51:51.007109 test begin: paddle.reshape(Tensor([4, 2228225, 128, 2],"float32"), shape=list[4,-1,2,], )

[Pass] paddle.reshape(Tensor([4, 2228225, 128, 2],"float32"), shape=list[4,-1,2,], )
2025-03-14 09:55:28.774021 test begin: paddle.reshape(Tensor([4, 2228225, 16, 16],"float32"), shape=tuple(4,256,-1,), )

[Pass] paddle.reshape(Tensor([4, 2228225, 16, 16],"float32"), shape=tuple(4,256,-1,), )
2025-03-14 09:58:25.030273 test begin: paddle.reshape(Tensor([4, 2228225, 256],"float32"), shape=tuple(-1,256,), )

[Pass] paddle.reshape(Tensor([4, 2228225, 256],"float32"), shape=tuple(-1,256,), )
2025-03-14 10:01:49.162598 test begin: paddle.reshape(Tensor([4, 23, 200, 124006],"float32"), shape=list[-1,200,296,], )

[torch error] paddle.reshape(Tensor([4, 23, 200, 124006],"float32"), shape=list[-1,200,296,], ) 
 shape '[-1, 200, 296]' is invalid for input of size 2281710400
2025-03-14 10:01:52.929042 test begin: paddle.reshape(Tensor([4, 23, 272, 91181],"float32"), shape=list[-1,272,280,], )

[torch error] paddle.reshape(Tensor([4, 23, 272, 91181],"float32"), shape=list[-1,272,280,], ) 
 shape '[-1, 272, 280]' is invalid for input of size 2281713344
2025-03-14 10:01:54.331989 test begin: paddle.reshape(Tensor([4, 23, 280, 88576],"float32"), shape=list[-1,280,328,], )

[torch error] paddle.reshape(Tensor([4, 23, 280, 88576],"float32"), shape=list[-1,280,328,], ) 
 shape '[-1, 280, 328]' is invalid for input of size 2281717760
2025-03-14 10:01:56.346410 test begin: paddle.reshape(Tensor([4, 23, 312, 79491],"float32"), shape=list[-1,312,336,], )

[torch error] paddle.reshape(Tensor([4, 23, 312, 79491],"float32"), shape=list[-1,312,336,], ) 
 shape '[-1, 312, 336]' is invalid for input of size 2281709664
2025-03-14 10:01:58.321740 test begin: paddle.reshape(Tensor([4, 23, 46684428],"float16"), shape=tuple(-1,200,296,), )

[torch error] paddle.reshape(Tensor([4, 23, 46684428],"float16"), shape=tuple(-1,200,296,), ) 
 shape '[-1, 200, 296]' is invalid for input of size 4294967376
2025-03-14 10:02:02.727577 test begin: paddle.reshape(Tensor([4, 23, 46684428],"float16"), shape=tuple(-1,280,328,), )

[torch error] paddle.reshape(Tensor([4, 23, 46684428],"float16"), shape=tuple(-1,280,328,), ) 
 shape '[-1, 280, 328]' is invalid for input of size 4294967376
2025-03-14 10:02:04.603154 test begin: paddle.reshape(Tensor([4, 23, 73813, 336],"float32"), shape=list[-1,312,336,], )

[torch error] paddle.reshape(Tensor([4, 23, 73813, 336],"float32"), shape=list[-1,312,336,], ) 
 shape '[-1, 312, 336]' is invalid for input of size 2281707456
2025-03-14 10:02:07.394828 test begin: paddle.reshape(Tensor([4, 23, 75614, 328],"float32"), shape=list[-1,280,328,], )

[torch error] paddle.reshape(Tensor([4, 23, 75614, 328],"float32"), shape=list[-1,280,328,], ) 
 shape '[-1, 280, 328]' is invalid for input of size 2281728064
2025-03-14 10:02:10.956370 test begin: paddle.reshape(Tensor([4, 23, 83788, 296],"float32"), shape=list[-1,200,296,], )

[torch error] paddle.reshape(Tensor([4, 23, 83788, 296],"float32"), shape=list[-1,200,296,], ) 
 shape '[-1, 200, 296]' is invalid for input of size 2281714816
2025-03-14 10:02:13.516924 test begin: paddle.reshape(Tensor([4, 23, 88576, 280],"float32"), shape=list[-1,272,280,], )

[torch error] paddle.reshape(Tensor([4, 23, 88576, 280],"float32"), shape=list[-1,272,280,], ) 
 shape '[-1, 272, 280]' is invalid for input of size 2281717760
2025-03-14 10:02:15.429770 test begin: paddle.reshape(Tensor([4, 24, 110036, 216],"float32"), shape=list[-1,272,216,], )

[torch error] paddle.reshape(Tensor([4, 24, 110036, 216],"float32"), shape=list[-1,272,216,], ) 
 shape '[-1, 272, 216]' is invalid for input of size 2281706496
2025-03-14 10:02:17.407101 test begin: paddle.reshape(Tensor([4, 24, 110036, 216],"float32"), shape=list[-1,304,216,], )

[torch error] paddle.reshape(Tensor([4, 24, 110036, 216],"float32"), shape=list[-1,304,216,], ) 
 shape '[-1, 304, 216]' is invalid for input of size 2281706496
2025-03-14 10:02:19.056808 test begin: paddle.reshape(Tensor([4, 24, 200, 118839],"float32"), shape=list[-1,200,296,], )

[torch error] paddle.reshape(Tensor([4, 24, 200, 118839],"float32"), shape=list[-1,200,296,], ) 
 shape '[-1, 200, 296]' is invalid for input of size 2281708800
2025-03-14 10:02:20.130554 test begin: paddle.reshape(Tensor([4, 24, 23767723],"float32"), shape=tuple(-1,248,272,), )

[torch error] paddle.reshape(Tensor([4, 24, 23767723],"float32"), shape=tuple(-1,248,272,), ) 
 shape '[-1, 248, 272]' is invalid for input of size 2281701408
2025-03-14 10:02:21.221948 test begin: paddle.reshape(Tensor([4, 24, 24, 1864136],"float16"), shape=tuple(-1,80,), )

[torch error] paddle.reshape(Tensor([4, 24, 24, 1864136],"float16"), shape=tuple(-1,80,), ) 
 shape '[-1, 80]' is invalid for input of size 4294969344
2025-03-14 10:02:23.258330 test begin: paddle.reshape(Tensor([4, 24, 24, 990322],"float32"), list[4,24,24,512,], )

[torch error] paddle.reshape(Tensor([4, 24, 24, 990322],"float32"), list[4,24,24,512,], ) 
 shape '[4, 24, 24, 512]' is invalid for input of size 2281701888
2025-03-14 10:02:24.628813 test begin: paddle.reshape(Tensor([4, 24, 24, 990322],"float32"), list[4,24,24,768,], )

[torch error] paddle.reshape(Tensor([4, 24, 24, 990322],"float32"), list[4,24,24,768,], ) 
 shape '[4, 24, 24, 768]' is invalid for input of size 2281701888
2025-03-14 10:02:26.534544 test begin: paddle.reshape(Tensor([4, 24, 240, 99033],"float32"), shape=list[-1,240,304,], )

[torch error] paddle.reshape(Tensor([4, 24, 240, 99033],"float32"), shape=list[-1,240,304,], ) 
 shape '[-1, 240, 304]' is invalid for input of size 2281720320
2025-03-14 10:02:28.135172 test begin: paddle.reshape(Tensor([4, 24, 248, 95838],"float32"), shape=list[-1,248,272,], )

[torch error] paddle.reshape(Tensor([4, 24, 248, 95838],"float32"), shape=list[-1,248,272,], ) 
 shape '[-1, 248, 272]' is invalid for input of size 2281711104
2025-03-14 10:02:29.125832 test begin: paddle.reshape(Tensor([4, 24, 256, 92843],"float32"), shape=list[-1,256,304,], )

[torch error] paddle.reshape(Tensor([4, 24, 256, 92843],"float32"), shape=list[-1,256,304,], ) 
 shape '[-1, 256, 304]' is invalid for input of size 2281709568
2025-03-14 10:02:30.475518 test begin: paddle.reshape(Tensor([4, 24, 264, 90030],"float32"), shape=list[-1,264,304,], )

[torch error] paddle.reshape(Tensor([4, 24, 264, 90030],"float32"), shape=list[-1,264,304,], ) 
 shape '[-1, 264, 304]' is invalid for input of size 2281720320
2025-03-14 10:02:32.383062 test begin: paddle.reshape(Tensor([4, 24, 272, 87382],"float32"), shape=list[-1,272,216,], )

[torch error] paddle.reshape(Tensor([4, 24, 272, 87382],"float32"), shape=list[-1,272,216,], ) 
 shape '[-1, 272, 216]' is invalid for input of size 2281718784
2025-03-14 10:02:34.288955 test begin: paddle.reshape(Tensor([4, 24, 304, 78184],"float32"), shape=list[-1,304,216,], )

[torch error] paddle.reshape(Tensor([4, 24, 304, 78184],"float32"), shape=list[-1,304,216,], ) 
 shape '[-1, 304, 216]' is invalid for input of size 2281721856
2025-03-14 10:02:36.194958 test begin: paddle.reshape(Tensor([4, 24, 304, 78184],"float32"), shape=list[-1,304,296,], )

[torch error] paddle.reshape(Tensor([4, 24, 304, 78184],"float32"), shape=list[-1,304,296,], ) 
 shape '[-1, 304, 296]' is invalid for input of size 2281721856
2025-03-14 10:02:38.093847 test begin: paddle.reshape(Tensor([4, 24, 30948, 768],"float32"), list[4,24,24,768,], )

[torch error] paddle.reshape(Tensor([4, 24, 30948, 768],"float32"), list[4,24,24,768,], ) 
 shape '[4, 24, 24, 768]' is invalid for input of size 2281734144
2025-03-14 10:02:40.012207 test begin: paddle.reshape(Tensor([4, 24, 44739243],"float16"), shape=tuple(-1,248,272,), )

[torch error] paddle.reshape(Tensor([4, 24, 44739243],"float16"), shape=tuple(-1,248,272,), ) 
 shape '[-1, 248, 272]' is invalid for input of size 4294967328
2025-03-14 10:02:43.353996 test begin: paddle.reshape(Tensor([4, 24, 44739243],"float16"), shape=tuple(-1,264,304,), )

[torch error] paddle.reshape(Tensor([4, 24, 44739243],"float16"), shape=tuple(-1,264,304,), ) 
 shape '[-1, 264, 304]' is invalid for input of size 4294967328
2025-03-14 10:02:45.443033 test begin: paddle.reshape(Tensor([4, 24, 44739243],"float16"), shape=tuple(-1,272,216,), )

[torch error] paddle.reshape(Tensor([4, 24, 44739243],"float16"), shape=tuple(-1,272,216,), ) 
 shape '[-1, 272, 216]' is invalid for input of size 4294967328
2025-03-14 10:02:47.604798 test begin: paddle.reshape(Tensor([4, 24, 44739243],"float16"), shape=tuple(-1,304,216,), )

[torch error] paddle.reshape(Tensor([4, 24, 44739243],"float16"), shape=tuple(-1,304,216,), ) 
 shape '[-1, 304, 216]' is invalid for input of size 4294967328
2025-03-14 10:02:49.723064 test begin: paddle.reshape(Tensor([4, 24, 46422, 512],"float32"), list[4,24,24,512,], )

[torch error] paddle.reshape(Tensor([4, 24, 46422, 512],"float32"), list[4,24,24,512,], ) 
 shape '[4, 24, 24, 512]' is invalid for input of size 2281734144
2025-03-14 10:02:51.604017 test begin: paddle.reshape(Tensor([4, 24, 559241, 80],"float16"), shape=tuple(-1,80,), )

[Pass] paddle.reshape(Tensor([4, 24, 559241, 80],"float16"), shape=tuple(-1,80,), )
2025-03-14 10:20:02.520290 test begin: paddle.reshape(Tensor([4, 24, 78184, 304],"float32"), shape=list[-1,240,304,], )

[torch error] paddle.reshape(Tensor([4, 24, 78184, 304],"float32"), shape=list[-1,240,304,], ) 
 shape '[-1, 240, 304]' is invalid for input of size 2281721856
2025-03-14 10:20:07.036947 test begin: paddle.reshape(Tensor([4, 24, 78184, 304],"float32"), shape=list[-1,256,304,], )

[Pass] paddle.reshape(Tensor([4, 24, 78184, 304],"float32"), shape=list[-1,256,304,], )
2025-03-14 10:23:40.381660 test begin: paddle.reshape(Tensor([4, 24, 78184, 304],"float32"), shape=list[-1,264,304,], )

[torch error] paddle.reshape(Tensor([4, 24, 78184, 304],"float32"), shape=list[-1,264,304,], ) 
 shape '[-1, 264, 304]' is invalid for input of size 2281721856
2025-03-14 10:23:44.470989 test begin: paddle.reshape(Tensor([4, 24, 80297, 296],"float32"), shape=list[-1,200,296,], )

[torch error] paddle.reshape(Tensor([4, 24, 80297, 296],"float32"), shape=list[-1,200,296,], ) 
 shape '[-1, 200, 296]' is invalid for input of size 2281719552
2025-03-14 10:23:46.171579 test begin: paddle.reshape(Tensor([4, 24, 80297, 296],"float32"), shape=list[-1,304,296,], )

[torch error] paddle.reshape(Tensor([4, 24, 80297, 296],"float32"), shape=list[-1,304,296,], ) 
 shape '[-1, 304, 296]' is invalid for input of size 2281719552
2025-03-14 10:23:48.145272 test begin: paddle.reshape(Tensor([4, 24, 87382, 272],"float32"), shape=list[-1,248,272,], )

[torch error] paddle.reshape(Tensor([4, 24, 87382, 272],"float32"), shape=list[-1,248,272,], ) 
 shape '[-1, 248, 272]' is invalid for input of size 2281718784
2025-03-14 10:23:50.078234 test begin: paddle.reshape(Tensor([4, 25, 208, 109698],"float32"), shape=list[-1,208,336,], )

[torch error] paddle.reshape(Tensor([4, 25, 208, 109698],"float32"), shape=list[-1,208,336,], ) 
 shape '[-1, 208, 336]' is invalid for input of size 2281718400
2025-03-14 10:23:51.730012 test begin: paddle.reshape(Tensor([4, 25, 22817014],"float32"), shape=tuple(-1,288,304,), )

[torch error] paddle.reshape(Tensor([4, 25, 22817014],"float32"), shape=tuple(-1,288,304,), ) 
 shape '[-1, 288, 304]' is invalid for input of size 2281701400
2025-03-14 10:23:52.946940 test begin: paddle.reshape(Tensor([4, 25, 22817014],"float32"), shape=tuple(-1,336,312,), )

[torch error] paddle.reshape(Tensor([4, 25, 22817014],"float32"), shape=tuple(-1,336,312,), ) 
 shape '[-1, 336, 312]' is invalid for input of size 2281701400
2025-03-14 10:23:54.439497 test begin: paddle.reshape(Tensor([4, 25, 264, 86429],"float32"), shape=list[-1,264,288,], )

[torch error] paddle.reshape(Tensor([4, 25, 264, 86429],"float32"), shape=list[-1,264,288,], ) 
 shape '[-1, 264, 288]' is invalid for input of size 2281725600
2025-03-14 10:23:56.410665 test begin: paddle.reshape(Tensor([4, 25, 264, 86429],"float32"), shape=list[-1,264,296,], )

[torch error] paddle.reshape(Tensor([4, 25, 264, 86429],"float32"), shape=list[-1,264,296,], ) 
 shape '[-1, 264, 296]' is invalid for input of size 2281725600
2025-03-14 10:23:58.334774 test begin: paddle.reshape(Tensor([4, 25, 288, 79226],"float32"), shape=list[-1,288,304,], )

[torch error] paddle.reshape(Tensor([4, 25, 288, 79226],"float32"), shape=list[-1,288,304,], ) 
 shape '[-1, 288, 304]' is invalid for input of size 2281708800
2025-03-14 10:24:00.283504 test begin: paddle.reshape(Tensor([4, 25, 336, 67908],"float32"), shape=list[-1,336,312,], )

[torch error] paddle.reshape(Tensor([4, 25, 336, 67908],"float32"), shape=list[-1,336,312,], ) 
 shape '[-1, 336, 312]' is invalid for input of size 2281708800
2025-03-14 10:24:02.261864 test begin: paddle.reshape(Tensor([4, 25, 42949673],"float16"), shape=tuple(-1,264,288,), )

[torch error] paddle.reshape(Tensor([4, 25, 42949673],"float16"), shape=tuple(-1,264,288,), ) 
 shape '[-1, 264, 288]' is invalid for input of size 4294967300
2025-03-14 10:24:06.770922 test begin: paddle.reshape(Tensor([4, 25, 42949673],"float16"), shape=tuple(-1,264,296,), )

[torch error] paddle.reshape(Tensor([4, 25, 42949673],"float16"), shape=tuple(-1,264,296,), ) 
 shape '[-1, 264, 296]' is invalid for input of size 4294967300
2025-03-14 10:24:08.806115 test begin: paddle.reshape(Tensor([4, 25, 42949673],"float16"), shape=tuple(-1,288,304,), )

[torch error] paddle.reshape(Tensor([4, 25, 42949673],"float16"), shape=tuple(-1,288,304,), ) 
 shape '[-1, 288, 304]' is invalid for input of size 4294967300
2025-03-14 10:24:10.611710 test begin: paddle.reshape(Tensor([4, 25, 42949673],"float16"), shape=tuple(-1,336,312,), )

[torch error] paddle.reshape(Tensor([4, 25, 42949673],"float16"), shape=tuple(-1,336,312,), ) 
 shape '[-1, 336, 312]' is invalid for input of size 4294967300
2025-03-14 10:24:12.617792 test begin: paddle.reshape(Tensor([4, 25, 67908, 336],"float32"), shape=list[-1,208,336,], )

[torch error] paddle.reshape(Tensor([4, 25, 67908, 336],"float32"), shape=list[-1,208,336,], ) 
 shape '[-1, 208, 336]' is invalid for input of size 2281708800
2025-03-14 10:24:15.718654 test begin: paddle.reshape(Tensor([4, 25, 73132, 312],"float32"), shape=list[-1,336,312,], )

[torch error] paddle.reshape(Tensor([4, 25, 73132, 312],"float32"), shape=list[-1,336,312,], ) 
 shape '[-1, 336, 312]' is invalid for input of size 2281718400
2025-03-14 10:24:17.775334 test begin: paddle.reshape(Tensor([4, 25, 75056, 304],"float32"), shape=list[-1,288,304,], )

[torch error] paddle.reshape(Tensor([4, 25, 75056, 304],"float32"), shape=list[-1,288,304,], ) 
 shape '[-1, 288, 304]' is invalid for input of size 2281702400
2025-03-14 10:24:19.736534 test begin: paddle.reshape(Tensor([4, 25, 77085, 296],"float32"), shape=list[-1,264,296,], )

[torch error] paddle.reshape(Tensor([4, 25, 77085, 296],"float32"), shape=list[-1,264,296,], ) 
 shape '[-1, 264, 296]' is invalid for input of size 2281716000
2025-03-14 10:24:21.713269 test begin: paddle.reshape(Tensor([4, 25, 79226, 288],"float32"), shape=list[-1,264,288,], )

[torch error] paddle.reshape(Tensor([4, 25, 79226, 288],"float32"), shape=list[-1,264,288,], ) 
 shape '[-1, 264, 288]' is invalid for input of size 2281708800
2025-03-14 10:24:23.684658 test begin: paddle.reshape(Tensor([4, 256, 12, 185686],"float32"), shape=tuple(4,256,-1,), )

[Pass] paddle.reshape(Tensor([4, 256, 12, 185686],"float32"), shape=tuple(4,256,-1,), )
2025-03-14 10:28:30.081477 test begin: paddle.reshape(Tensor([4, 256, 12, 349526],"float16"), shape=tuple(4,256,-1,), )

[Pass] paddle.reshape(Tensor([4, 256, 12, 349526],"float16"), shape=tuple(4,256,-1,), )
2025-03-14 10:45:06.894650 test begin: paddle.reshape(Tensor([4, 256, 139265, 16],"float32"), shape=tuple(4,256,-1,), )

[Pass] paddle.reshape(Tensor([4, 256, 139265, 16],"float32"), shape=tuple(4,256,-1,), )
2025-03-14 10:48:54.085596 test begin: paddle.reshape(Tensor([4, 256, 15421, 272],"float16"), shape=tuple(4,256,-1,), )

[Pass] paddle.reshape(Tensor([4, 256, 15421, 272],"float16"), shape=tuple(4,256,-1,), )
2025-03-14 11:05:51.455947 test begin: paddle.reshape(Tensor([4, 256, 16, 139265],"float32"), shape=tuple(4,256,-1,), )

[Pass] paddle.reshape(Tensor([4, 256, 16, 139265],"float32"), shape=tuple(4,256,-1,), )
2025-03-14 11:09:20.817439 test begin: paddle.reshape(Tensor([4, 256, 16, 262145],"float16"), shape=tuple(4,256,-1,), )

[Pass] paddle.reshape(Tensor([4, 256, 16, 262145],"float16"), shape=tuple(4,256,-1,), )
2025-03-14 11:25:45.897536 test begin: paddle.reshape(Tensor([4, 256, 185686, 12],"float32"), shape=tuple(4,256,-1,), )

[Pass] paddle.reshape(Tensor([4, 256, 185686, 12],"float32"), shape=tuple(4,256,-1,), )
2025-03-14 11:29:22.620378 test begin: paddle.reshape(Tensor([4, 256, 200, 20972],"float16"), shape=tuple(4,256,-1,), )

[Pass] paddle.reshape(Tensor([4, 256, 200, 20972],"float16"), shape=tuple(4,256,-1,), )
2025-03-14 11:46:14.560857 test begin: paddle.reshape(Tensor([4, 256, 262145, 16],"float16"), shape=tuple(4,256,-1,), )

[Pass] paddle.reshape(Tensor([4, 256, 262145, 16],"float16"), shape=tuple(4,256,-1,), )
2025-03-14 12:03:04.000833 test begin: paddle.reshape(Tensor([4, 256, 349526, 12],"float16"), shape=tuple(4,256,-1,), )

[Pass] paddle.reshape(Tensor([4, 256, 349526, 12],"float16"), shape=tuple(4,256,-1,), )
2025-03-14 12:19:26.594997 test begin: paddle.reshape(Tensor([4, 26, 109698, 200],"float32"), shape=list[-1,328,200,], )

[torch error] paddle.reshape(Tensor([4, 26, 109698, 200],"float32"), shape=list[-1,328,200,], ) 
 shape '[-1, 328, 200]' is invalid for input of size 2281718400
2025-03-14 12:19:30.842503 test begin: paddle.reshape(Tensor([4, 26, 264, 83104],"float32"), shape=list[-1,264,320,], )

[torch error] paddle.reshape(Tensor([4, 26, 264, 83104],"float32"), shape=list[-1,264,320,], ) 
 shape '[-1, 264, 320]' is invalid for input of size 2281703424
2025-03-14 12:19:32.442503 test begin: paddle.reshape(Tensor([4, 26, 280, 78356],"float32"), shape=list[-1,280,312,], )

[torch error] paddle.reshape(Tensor([4, 26, 280, 78356],"float32"), shape=list[-1,280,312,], ) 
 shape '[-1, 280, 312]' is invalid for input of size 2281726720
2025-03-14 12:19:34.336286 test begin: paddle.reshape(Tensor([4, 26, 288, 76179],"float32"), shape=list[-1,288,304,], )

[torch error] paddle.reshape(Tensor([4, 26, 288, 76179],"float32"), shape=list[-1,288,304,], ) 
 shape '[-1, 288, 304]' is invalid for input of size 2281713408
2025-03-14 12:19:36.222081 test begin: paddle.reshape(Tensor([4, 26, 304, 72170],"float32"), shape=list[-1,304,288,], )

[torch error] paddle.reshape(Tensor([4, 26, 304, 72170],"float32"), shape=list[-1,304,288,], ) 
 shape '[-1, 304, 288]' is invalid for input of size 2281726720
2025-03-14 12:19:38.083758 test begin: paddle.reshape(Tensor([4, 26, 328, 66889],"float32"), shape=list[-1,328,200,], )

[torch error] paddle.reshape(Tensor([4, 26, 328, 66889],"float32"), shape=list[-1,328,200,], ) 
 shape '[-1, 328, 200]' is invalid for input of size 2281717568
2025-03-14 12:19:40.059187 test begin: paddle.reshape(Tensor([4, 26, 328, 66889],"float32"), shape=list[-1,328,296,], )

[torch error] paddle.reshape(Tensor([4, 26, 328, 66889],"float32"), shape=list[-1,328,296,], ) 
 shape '[-1, 328, 296]' is invalid for input of size 2281717568
2025-03-14 12:19:41.987967 test begin: paddle.reshape(Tensor([4, 26, 41297763],"float16"), shape=tuple(-1,280,312,), )

[torch error] paddle.reshape(Tensor([4, 26, 41297763],"float16"), shape=tuple(-1,280,312,), ) 
 shape '[-1, 280, 312]' is invalid for input of size 4294967352
2025-03-14 12:19:45.858712 test begin: paddle.reshape(Tensor([4, 26, 41297763],"float16"), shape=tuple(-1,288,304,), )

[torch error] paddle.reshape(Tensor([4, 26, 41297763],"float16"), shape=tuple(-1,288,304,), ) 
 shape '[-1, 288, 304]' is invalid for input of size 4294967352
2025-03-14 12:19:47.386789 test begin: paddle.reshape(Tensor([4, 26, 41297763],"float16"), shape=tuple(-1,328,200,), )

[torch error] paddle.reshape(Tensor([4, 26, 41297763],"float16"), shape=tuple(-1,328,200,), ) 
 shape '[-1, 328, 200]' is invalid for input of size 4294967352
2025-03-14 12:19:48.342427 test begin: paddle.reshape(Tensor([4, 26, 68561, 320],"float32"), shape=list[-1,264,320,], )

[torch error] paddle.reshape(Tensor([4, 26, 68561, 320],"float32"), shape=list[-1,264,320,], ) 
 shape '[-1, 264, 320]' is invalid for input of size 2281710080
2025-03-14 12:19:50.064652 test begin: paddle.reshape(Tensor([4, 26, 70319, 312],"float32"), shape=list[-1,280,312,], )

[torch error] paddle.reshape(Tensor([4, 26, 70319, 312],"float32"), shape=list[-1,280,312,], ) 
 shape '[-1, 280, 312]' is invalid for input of size 2281710912
2025-03-14 12:19:51.155143 test begin: paddle.reshape(Tensor([4, 26, 72170, 304],"float32"), shape=list[-1,288,304,], )

[torch error] paddle.reshape(Tensor([4, 26, 72170, 304],"float32"), shape=list[-1,288,304,], ) 
 shape '[-1, 288, 304]' is invalid for input of size 2281726720
2025-03-14 12:19:52.830299 test begin: paddle.reshape(Tensor([4, 26, 74120, 296],"float32"), shape=list[-1,328,296,], )

[torch error] paddle.reshape(Tensor([4, 26, 74120, 296],"float32"), shape=list[-1,328,296,], ) 
 shape '[-1, 328, 296]' is invalid for input of size 2281710080
2025-03-14 12:19:54.806298 test begin: paddle.reshape(Tensor([4, 26, 76179, 288],"float32"), shape=list[-1,304,288,], )

[torch error] paddle.reshape(Tensor([4, 26, 76179, 288],"float32"), shape=list[-1,304,288,], ) 
 shape '[-1, 304, 288]' is invalid for input of size 2281713408
2025-03-14 12:19:56.823971 test begin: paddle.reshape(Tensor([4, 2640859, 6, 6, 6],"float32"), tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([4, 2640859, 6, 6, 6],"float32"), tuple(4,-1,), )
2025-03-14 12:23:38.071437 test begin: paddle.reshape(Tensor([4, 27, 272, 77673],"float32"), shape=list[-1,272,320,], )

[torch error] paddle.reshape(Tensor([4, 27, 272, 77673],"float32"), shape=list[-1,272,320,], ) 
 shape '[-1, 272, 320]' is invalid for input of size 2281722048
2025-03-14 12:23:42.932235 test begin: paddle.reshape(Tensor([4, 27, 280, 75454],"float32"), shape=list[-1,280,328,], )

[torch error] paddle.reshape(Tensor([4, 27, 280, 75454],"float32"), shape=list[-1,280,328,], ) 
 shape '[-1, 280, 328]' is invalid for input of size 2281728960
2025-03-14 12:23:44.833343 test begin: paddle.reshape(Tensor([4, 27, 39768216],"float16"), shape=tuple(-1,280,328,), )

[torch error] paddle.reshape(Tensor([4, 27, 39768216],"float16"), shape=tuple(-1,280,328,), ) 
 shape '[-1, 280, 328]' is invalid for input of size 4294967328
2025-03-14 12:23:48.945503 test begin: paddle.reshape(Tensor([4, 27, 64412, 328],"float32"), shape=list[-1,280,328,], )

[torch error] paddle.reshape(Tensor([4, 27, 64412, 328],"float32"), shape=list[-1,280,328,], ) 
 shape '[-1, 280, 328]' is invalid for input of size 2281730688
2025-03-14 12:23:50.872685 test begin: paddle.reshape(Tensor([4, 27, 66022, 320],"float32"), shape=list[-1,272,320,], )

[torch error] paddle.reshape(Tensor([4, 27, 66022, 320],"float32"), shape=list[-1,272,320,], ) 
 shape '[-1, 272, 320]' is invalid for input of size 2281720320
2025-03-14 12:23:52.491934 test begin: paddle.reshape(Tensor([4, 272, 2097153],"float32"), shape=tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([4, 272, 2097153],"float32"), shape=tuple(4,-1,), )
2025-03-14 12:27:00.421927 test begin: paddle.reshape(Tensor([4, 272, 3947581],"float16"), shape=tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([4, 272, 3947581],"float16"), shape=tuple(4,-1,), )
2025-03-14 12:43:37.769223 test begin: paddle.reshape(Tensor([4, 2796203, 128, 3],"float16"), shape=tuple(4,-1,1,), )

[Pass] paddle.reshape(Tensor([4, 2796203, 128, 3],"float16"), shape=tuple(4,-1,1,), )
2025-03-14 13:00:19.999899 test begin: paddle.reshape(Tensor([4, 28, 272, 74899],"float32"), shape=list[-1,272,216,], )

[torch error] paddle.reshape(Tensor([4, 28, 272, 74899],"float32"), shape=list[-1,272,216,], ) 
 shape '[-1, 272, 216]' is invalid for input of size 2281723136
2025-03-14 13:00:24.442634 test begin: paddle.reshape(Tensor([4, 28, 28, 727584],"float32"), list[4,28,28,384,], )

[torch error] paddle.reshape(Tensor([4, 28, 28, 727584],"float32"), list[4,28,28,384,], ) 
 shape '[4, 28, 28, 384]' is invalid for input of size 2281703424
2025-03-14 13:00:26.219290 test begin: paddle.reshape(Tensor([4, 28, 53053, 384],"float32"), list[4,28,28,384,], )

[torch error] paddle.reshape(Tensor([4, 28, 53053, 384],"float32"), list[4,28,28,384,], ) 
 shape '[4, 28, 28, 384]' is invalid for input of size 2281703424
2025-03-14 13:00:27.358325 test begin: paddle.reshape(Tensor([4, 28, 94317, 216],"float32"), shape=list[-1,272,216,], )

[torch error] paddle.reshape(Tensor([4, 28, 94317, 216],"float32"), shape=list[-1,272,216,], ) 
 shape '[-1, 272, 216]' is invalid for input of size 2281716864
2025-03-14 13:00:28.767284 test begin: paddle.reshape(Tensor([4, 2886403, 124, 3],"float16"), shape=tuple(4,-1,1,), )

[Pass] paddle.reshape(Tensor([4, 2886403, 124, 3],"float16"), shape=tuple(4,-1,1,), )
2025-03-14 13:17:16.478956 test begin: paddle.reshape(Tensor([4, 29, 200, 98350],"float32"), shape=list[-1,200,296,], )

[torch error] paddle.reshape(Tensor([4, 29, 200, 98350],"float32"), shape=list[-1,200,296,], ) 
 shape '[-1, 200, 296]' is invalid for input of size 2281720000
2025-03-14 13:17:21.106418 test begin: paddle.reshape(Tensor([4, 29, 240, 81958],"float32"), shape=list[-1,240,304,], )

[torch error] paddle.reshape(Tensor([4, 29, 240, 81958],"float32"), shape=list[-1,240,304,], ) 
 shape '[-1, 240, 304]' is invalid for input of size 2281710720
2025-03-14 13:17:22.782607 test begin: paddle.reshape(Tensor([4, 29, 288, 68299],"float32"), shape=list[-1,288,304,], )

[torch error] paddle.reshape(Tensor([4, 29, 288, 68299],"float32"), shape=list[-1,288,304,], ) 
 shape '[-1, 288, 304]' is invalid for input of size 2281732992
2025-03-14 13:17:24.208605 test begin: paddle.reshape(Tensor([4, 29, 64704, 304],"float32"), shape=list[-1,240,304,], )

[torch error] paddle.reshape(Tensor([4, 29, 64704, 304],"float32"), shape=list[-1,240,304,], ) 
 shape '[-1, 240, 304]' is invalid for input of size 2281721856
2025-03-14 13:17:26.692654 test begin: paddle.reshape(Tensor([4, 29, 64704, 304],"float32"), shape=list[-1,288,304,], )

[torch error] paddle.reshape(Tensor([4, 29, 64704, 304],"float32"), shape=list[-1,288,304,], ) 
 shape '[-1, 288, 304]' is invalid for input of size 2281721856
2025-03-14 13:17:29.716871 test begin: paddle.reshape(Tensor([4, 29, 66453, 296],"float32"), shape=list[-1,200,296,], )

[torch error] paddle.reshape(Tensor([4, 29, 66453, 296],"float32"), shape=list[-1,200,296,], ) 
 shape '[-1, 200, 296]' is invalid for input of size 2281730208
2025-03-14 13:17:32.203242 test begin: paddle.reshape(Tensor([4, 2982617, 120, 3],"float16"), shape=tuple(4,-1,1,), )

[Pass] paddle.reshape(Tensor([4, 2982617, 120, 3],"float16"), shape=tuple(4,-1,1,), )
2025-03-14 13:34:56.334018 test begin: paddle.reshape(Tensor([4, 3, 1, 190141782],"float32"), shape=list[-1,10,], )

[torch error] paddle.reshape(Tensor([4, 3, 1, 190141782],"float32"), shape=list[-1,10,], ) 
 shape '[-1, 10]' is invalid for input of size 2281701384
2025-03-14 13:35:00.567660 test begin: paddle.reshape(Tensor([4, 3, 1, 190141782],"float32"), shape=list[-1,1000,], )

[torch error] paddle.reshape(Tensor([4, 3, 1, 190141782],"float32"), shape=list[-1,1000,], ) 
 shape '[-1, 1000]' is invalid for input of size 2281701384
2025-03-14 13:35:01.858729 test begin: paddle.reshape(Tensor([4, 3, 1, 190141782],"float32"), shape=list[-1,3,10,], )

[torch error] paddle.reshape(Tensor([4, 3, 1, 190141782],"float32"), shape=list[-1,3,10,], ) 
 shape '[-1, 3, 10]' is invalid for input of size 2281701384
2025-03-14 13:35:02.950689 test begin: paddle.reshape(Tensor([4, 3, 190141782],"float32"), shape=list[-1,3,10,], )

[torch error] paddle.reshape(Tensor([4, 3, 190141782],"float32"), shape=list[-1,3,10,], ) 
 shape '[-1, 3, 10]' is invalid for input of size 2281701384
2025-03-14 13:35:04.069865 test begin: paddle.reshape(Tensor([4, 3, 190141782],"float32"), shape=list[-1,3,], )

[Pass] paddle.reshape(Tensor([4, 3, 190141782],"float32"), shape=list[-1,3,], )
2025-03-14 13:38:58.256370 test begin: paddle.reshape(Tensor([4, 3, 19014179, 10],"float32"), shape=list[-1,10,], )

[Pass] paddle.reshape(Tensor([4, 3, 19014179, 10],"float32"), shape=list[-1,10,], )
2025-03-14 13:43:27.721195 test begin: paddle.reshape(Tensor([4, 3, 19014179, 10],"float32"), shape=list[-1,3,10,], )

[Pass] paddle.reshape(Tensor([4, 3, 19014179, 10],"float32"), shape=list[-1,3,10,], )
2025-03-14 13:47:29.576136 test begin: paddle.reshape(Tensor([4, 3, 190142, 1000],"float32"), shape=list[-1,1000,], )

[Pass] paddle.reshape(Tensor([4, 3, 190142, 1000],"float32"), shape=list[-1,1000,], )
2025-03-14 13:51:37.423146 test begin: paddle.reshape(Tensor([4, 3, 208, 914144],"float32"), shape=list[-1,208,272,], )

[torch error] paddle.reshape(Tensor([4, 3, 208, 914144],"float32"), shape=list[-1,208,272,], ) 
 shape '[-1, 208, 272]' is invalid for input of size 2281703424
2025-03-14 13:51:41.537610 test begin: paddle.reshape(Tensor([4, 3, 357913942],"float16"), shape=tuple(-1,208,272,), )

[torch error] paddle.reshape(Tensor([4, 3, 357913942],"float16"), shape=tuple(-1,208,272,), ) 
 shape '[-1, 208, 272]' is invalid for input of size 4294967304
2025-03-14 13:51:45.534554 test begin: paddle.reshape(Tensor([4, 3, 699051, 272],"float32"), shape=list[-1,208,272,], )

[torch error] paddle.reshape(Tensor([4, 3, 699051, 272],"float32"), shape=list[-1,208,272,], ) 
 shape '[-1, 208, 272]' is invalid for input of size 2281702464
2025-03-14 13:51:48.719210 test begin: paddle.reshape(Tensor([4, 30, 216, 88029],"float32"), shape=list[-1,216,312,], )

[torch error] paddle.reshape(Tensor([4, 30, 216, 88029],"float32"), shape=list[-1,216,312,], ) 
 shape '[-1, 216, 312]' is invalid for input of size 2281711680
2025-03-14 13:51:50.126102 test begin: paddle.reshape(Tensor([4, 30, 248, 76671],"float32"), shape=list[-1,248,272,], )

[torch error] paddle.reshape(Tensor([4, 30, 248, 76671],"float32"), shape=list[-1,248,272,], ) 
 shape '[-1, 248, 272]' is invalid for input of size 2281728960
2025-03-14 13:51:51.505012 test begin: paddle.reshape(Tensor([4, 30, 264, 72024],"float32"), shape=list[-1,264,336,], )

[torch error] paddle.reshape(Tensor([4, 30, 264, 72024],"float32"), shape=list[-1,264,336,], ) 
 shape '[-1, 264, 336]' is invalid for input of size 2281720320
2025-03-14 13:51:53.105174 test begin: paddle.reshape(Tensor([4, 30, 312, 60943],"float32"), shape=list[-1,312,336,], )

[torch error] paddle.reshape(Tensor([4, 30, 312, 60943],"float32"), shape=list[-1,312,336,], ) 
 shape '[-1, 312, 336]' is invalid for input of size 2281705920
2025-03-14 13:51:54.303072 test begin: paddle.reshape(Tensor([4, 30, 336, 56590],"float32"), shape=list[-1,336,320,], )

[torch error] paddle.reshape(Tensor([4, 30, 336, 56590],"float32"), shape=list[-1,336,320,], ) 
 shape '[-1, 336, 320]' is invalid for input of size 2281708800
2025-03-14 13:51:55.912953 test begin: paddle.reshape(Tensor([4, 30, 35791395],"float16"), shape=tuple(-1,216,312,), )

[torch error] paddle.reshape(Tensor([4, 30, 35791395],"float16"), shape=tuple(-1,216,312,), ) 
 shape '[-1, 216, 312]' is invalid for input of size 4294967400
2025-03-14 13:51:59.345953 test begin: paddle.reshape(Tensor([4, 30, 35791395],"float16"), shape=tuple(-1,248,272,), )

[torch error] paddle.reshape(Tensor([4, 30, 35791395],"float16"), shape=tuple(-1,248,272,), ) 
 shape '[-1, 248, 272]' is invalid for input of size 4294967400
2025-03-14 13:52:01.164373 test begin: paddle.reshape(Tensor([4, 30, 35791395],"float16"), shape=tuple(-1,264,336,), )

[torch error] paddle.reshape(Tensor([4, 30, 35791395],"float16"), shape=tuple(-1,264,336,), ) 
 shape '[-1, 264, 336]' is invalid for input of size 4294967400
2025-03-14 13:52:02.726380 test begin: paddle.reshape(Tensor([4, 30, 35791395],"float16"), shape=tuple(-1,336,320,), )

[torch error] paddle.reshape(Tensor([4, 30, 35791395],"float16"), shape=tuple(-1,336,320,), ) 
 shape '[-1, 336, 320]' is invalid for input of size 4294967400
2025-03-14 13:52:04.524281 test begin: paddle.reshape(Tensor([4, 30, 56590, 336],"float32"), shape=list[-1,264,336,], )

[torch error] paddle.reshape(Tensor([4, 30, 56590, 336],"float32"), shape=list[-1,264,336,], ) 
 shape '[-1, 264, 336]' is invalid for input of size 2281708800
2025-03-14 13:52:06.417949 test begin: paddle.reshape(Tensor([4, 30, 56590, 336],"float32"), shape=list[-1,312,336,], )

[torch error] paddle.reshape(Tensor([4, 30, 56590, 336],"float32"), shape=list[-1,312,336,], ) 
 shape '[-1, 312, 336]' is invalid for input of size 2281708800
2025-03-14 13:52:08.804558 test begin: paddle.reshape(Tensor([4, 30, 59420, 320],"float32"), shape=list[-1,336,320,], )

[torch error] paddle.reshape(Tensor([4, 30, 59420, 320],"float32"), shape=list[-1,336,320,], ) 
 shape '[-1, 336, 320]' is invalid for input of size 2281728000
2025-03-14 13:52:10.689314 test begin: paddle.reshape(Tensor([4, 30, 60943, 312],"float32"), shape=list[-1,216,312,], )

[torch error] paddle.reshape(Tensor([4, 30, 60943, 312],"float32"), shape=list[-1,216,312,], ) 
 shape '[-1, 216, 312]' is invalid for input of size 2281705920
2025-03-14 13:52:12.562515 test begin: paddle.reshape(Tensor([4, 30, 69906, 272],"float32"), shape=list[-1,248,272,], )

[torch error] paddle.reshape(Tensor([4, 30, 69906, 272],"float32"), shape=list[-1,248,272,], ) 
 shape '[-1, 248, 272]' is invalid for input of size 2281731840
2025-03-14 13:52:14.478581 test begin: paddle.reshape(Tensor([4, 30948, 24, 768],"float32"), list[4,24,24,768,], )

[torch error] paddle.reshape(Tensor([4, 30948, 24, 768],"float32"), list[4,24,24,768,], ) 
 shape '[4, 24, 24, 768]' is invalid for input of size 2281734144
2025-03-14 13:52:16.114242 test begin: paddle.reshape(Tensor([4, 30948, 48, 384],"float32"), list[4,48,48,384,], )

[torch error] paddle.reshape(Tensor([4, 30948, 48, 384],"float32"), list[4,48,48,384,], ) 
 shape '[4, 48, 48, 384]' is invalid for input of size 2281734144
2025-03-14 13:52:17.472068 test begin: paddle.reshape(Tensor([4, 30948, 96, 192],"float32"), list[4,96,96,192,], )

[torch error] paddle.reshape(Tensor([4, 30948, 96, 192],"float32"), list[4,96,96,192,], ) 
 shape '[4, 96, 96, 192]' is invalid for input of size 2281734144
2025-03-14 13:52:19.357126 test begin: paddle.reshape(Tensor([4, 3195661, 336],"float16"), shape=tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([4, 3195661, 336],"float16"), shape=tuple(4,-1,), )
2025-03-14 14:08:30.229623 test begin: paddle.reshape(Tensor([4, 32, 264, 67522],"float32"), shape=list[-1,264,304,], )

[torch error] paddle.reshape(Tensor([4, 32, 264, 67522],"float32"), shape=list[-1,264,304,], ) 
 shape '[-1, 264, 304]' is invalid for input of size 2281703424
2025-03-14 14:08:34.611943 test begin: paddle.reshape(Tensor([4, 32, 33554433],"float16"), shape=tuple(-1,264,304,), )

[torch error] paddle.reshape(Tensor([4, 32, 33554433],"float16"), shape=tuple(-1,264,304,), ) 
 shape '[-1, 264, 304]' is invalid for input of size 4294967424
2025-03-14 14:08:38.883126 test begin: paddle.reshape(Tensor([4, 32, 33554433],"float16"), shape=tuple(-1,336,280,), )

[torch error] paddle.reshape(Tensor([4, 32, 33554433],"float16"), shape=tuple(-1,336,280,), ) 
 shape '[-1, 336, 280]' is invalid for input of size 4294967424
2025-03-14 14:08:40.479018 test begin: paddle.reshape(Tensor([4, 32, 336, 53053],"float32"), shape=list[-1,336,280,], )

[torch error] paddle.reshape(Tensor([4, 32, 336, 53053],"float32"), shape=list[-1,336,280,], ) 
 shape '[-1, 336, 280]' is invalid for input of size 2281703424
2025-03-14 14:08:42.426629 test begin: paddle.reshape(Tensor([4, 32, 58638, 304],"float32"), shape=list[-1,264,304,], )

[torch error] paddle.reshape(Tensor([4, 32, 58638, 304],"float32"), shape=list[-1,264,304,], ) 
 shape '[-1, 264, 304]' is invalid for input of size 2281721856
2025-03-14 14:08:44.490453 test begin: paddle.reshape(Tensor([4, 32, 63664, 280],"float32"), shape=list[-1,336,280,], )

[torch error] paddle.reshape(Tensor([4, 32, 63664, 280],"float32"), shape=list[-1,336,280,], ) 
 shape '[-1, 336, 280]' is invalid for input of size 2281717760
2025-03-14 14:08:46.573513 test begin: paddle.reshape(Tensor([4, 33, 256, 67522],"float32"), shape=list[-1,256,272,], )

[torch error] paddle.reshape(Tensor([4, 33, 256, 67522],"float32"), shape=list[-1,256,272,], ) 
 shape '[-1, 256, 272]' is invalid for input of size 2281703424
2025-03-14 14:08:48.633729 test begin: paddle.reshape(Tensor([4, 33, 264, 65476],"float32"), shape=list[-1,264,288,], )

[torch error] paddle.reshape(Tensor([4, 33, 264, 65476],"float32"), shape=list[-1,264,288,], ) 
 shape '[-1, 264, 288]' is invalid for input of size 2281707648
2025-03-14 14:08:50.609647 test begin: paddle.reshape(Tensor([4, 33, 32537632],"float16"), shape=tuple(-1,256,272,), )

[torch error] paddle.reshape(Tensor([4, 33, 32537632],"float16"), shape=tuple(-1,256,272,), ) 
 shape '[-1, 256, 272]' is invalid for input of size 4294967424
2025-03-14 14:08:52.184115 test begin: paddle.reshape(Tensor([4, 33, 32537632],"float16"), shape=tuple(-1,264,288,), )

[torch error] paddle.reshape(Tensor([4, 33, 32537632],"float16"), shape=tuple(-1,264,288,), ) 
 shape '[-1, 264, 288]' is invalid for input of size 4294967424
2025-03-14 14:08:53.834926 test begin: paddle.reshape(Tensor([4, 33, 60020, 288],"float32"), shape=list[-1,264,288,], )

[Pass] paddle.reshape(Tensor([4, 33, 60020, 288],"float32"), shape=list[-1,264,288,], )
2025-03-14 14:12:11.001786 test begin: paddle.reshape(Tensor([4, 33, 63551, 272],"float32"), shape=list[-1,256,272,], )

[torch error] paddle.reshape(Tensor([4, 33, 63551, 272],"float32"), shape=list[-1,256,272,], ) 
 shape '[-1, 256, 272]' is invalid for input of size 2281735104
2025-03-14 14:12:14.781340 test begin: paddle.reshape(Tensor([4, 34, 248, 67651],"float32"), shape=list[-1,248,304,], )

[torch error] paddle.reshape(Tensor([4, 34, 248, 67651],"float32"), shape=list[-1,248,304,], ) 
 shape '[-1, 248, 304]' is invalid for input of size 2281732928
2025-03-14 14:12:15.781086 test begin: paddle.reshape(Tensor([4, 34, 31580642],"float16"), shape=tuple(-1,328,200,), )

[torch error] paddle.reshape(Tensor([4, 34, 31580642],"float16"), shape=tuple(-1,328,200,), ) 
 shape '[-1, 328, 200]' is invalid for input of size 4294967312
2025-03-14 14:12:19.854223 test begin: paddle.reshape(Tensor([4, 34, 328, 51151],"float32"), shape=list[-1,328,200,], )

[torch error] paddle.reshape(Tensor([4, 34, 328, 51151],"float32"), shape=list[-1,328,200,], ) 
 shape '[-1, 328, 200]' is invalid for input of size 2281743808
2025-03-14 14:12:22.029380 test begin: paddle.reshape(Tensor([4, 34, 55189, 304],"float32"), shape=list[-1,248,304,], )

[torch error] paddle.reshape(Tensor([4, 34, 55189, 304],"float32"), shape=list[-1,248,304,], ) 
 shape '[-1, 248, 304]' is invalid for input of size 2281734016
2025-03-14 14:12:23.945097 test begin: paddle.reshape(Tensor([4, 34, 83887, 200],"float32"), shape=list[-1,328,200,], )

[torch error] paddle.reshape(Tensor([4, 34, 83887, 200],"float32"), shape=list[-1,328,200,], ) 
 shape '[-1, 328, 200]' is invalid for input of size 2281726400
2025-03-14 14:12:25.729945 test begin: paddle.reshape(Tensor([4, 35, 16297867],"float32"), shape=tuple(-1,200,280,), )

[torch error] paddle.reshape(Tensor([4, 35, 16297867],"float32"), shape=tuple(-1,200,280,), ) 
 shape '[-1, 200, 280]' is invalid for input of size 2281701380
2025-03-14 14:12:26.985313 test begin: paddle.reshape(Tensor([4, 35, 200, 81490],"float32"), shape=list[-1,200,280,], )

[Pass] paddle.reshape(Tensor([4, 35, 200, 81490],"float32"), shape=list[-1,200,280,], )
2025-03-14 14:15:55.271111 test begin: paddle.reshape(Tensor([4, 35, 208, 78356],"float32"), shape=list[-1,208,328,], )

[torch error] paddle.reshape(Tensor([4, 35, 208, 78356],"float32"), shape=list[-1,208,328,], ) 
 shape '[-1, 208, 328]' is invalid for input of size 2281726720
2025-03-14 14:15:59.294824 test begin: paddle.reshape(Tensor([4, 35, 248, 65718],"float32"), shape=list[-1,248,336,], )

[torch error] paddle.reshape(Tensor([4, 35, 248, 65718],"float32"), shape=list[-1,248,336,], ) 
 shape '[-1, 248, 336]' is invalid for input of size 2281728960
2025-03-14 14:16:02.219486 test begin: paddle.reshape(Tensor([4, 35, 264, 61735],"float32"), shape=list[-1,264,288,], )

[torch error] paddle.reshape(Tensor([4, 35, 264, 61735],"float32"), shape=list[-1,264,288,], ) 
 shape '[-1, 264, 288]' is invalid for input of size 2281725600
2025-03-14 14:16:04.248610 test begin: paddle.reshape(Tensor([4, 35, 30678338],"float16"), shape=tuple(-1,200,280,), )

[torch error] paddle.reshape(Tensor([4, 35, 30678338],"float16"), shape=tuple(-1,200,280,), ) 
 shape '[-1, 200, 280]' is invalid for input of size 4294967320
2025-03-14 14:16:08.274522 test begin: paddle.reshape(Tensor([4, 35, 30678338],"float16"), shape=tuple(-1,208,328,), )

[torch error] paddle.reshape(Tensor([4, 35, 30678338],"float16"), shape=tuple(-1,208,328,), ) 
 shape '[-1, 208, 328]' is invalid for input of size 4294967320
2025-03-14 14:16:09.962920 test begin: paddle.reshape(Tensor([4, 35, 30678338],"float16"), shape=tuple(-1,248,336,), )

[torch error] paddle.reshape(Tensor([4, 35, 30678338],"float16"), shape=tuple(-1,248,336,), ) 
 shape '[-1, 248, 336]' is invalid for input of size 4294967320
2025-03-14 14:16:12.313492 test begin: paddle.reshape(Tensor([4, 35, 30678338],"float16"), shape=tuple(-1,264,288,), )

[torch error] paddle.reshape(Tensor([4, 35, 30678338],"float16"), shape=tuple(-1,264,288,), ) 
 shape '[-1, 264, 288]' is invalid for input of size 4294967320
2025-03-14 14:16:14.173663 test begin: paddle.reshape(Tensor([4, 35, 48506, 336],"float32"), shape=list[-1,248,336,], )

[torch error] paddle.reshape(Tensor([4, 35, 48506, 336],"float32"), shape=list[-1,248,336,], ) 
 shape '[-1, 248, 336]' is invalid for input of size 2281722240
2025-03-14 14:16:16.250145 test begin: paddle.reshape(Tensor([4, 35, 49689, 328],"float32"), shape=list[-1,208,328,], )

[torch error] paddle.reshape(Tensor([4, 35, 49689, 328],"float32"), shape=list[-1,208,328,], ) 
 shape '[-1, 208, 328]' is invalid for input of size 2281718880
2025-03-14 14:16:18.131701 test begin: paddle.reshape(Tensor([4, 35, 56590, 288],"float32"), shape=list[-1,264,288,], )

[torch error] paddle.reshape(Tensor([4, 35, 56590, 288],"float32"), shape=list[-1,264,288,], ) 
 shape '[-1, 264, 288]' is invalid for input of size 2281708800
2025-03-14 14:16:20.720276 test begin: paddle.reshape(Tensor([4, 35, 58207, 280],"float32"), shape=list[-1,200,280,], )

[torch error] paddle.reshape(Tensor([4, 35, 58207, 280],"float32"), shape=list[-1,200,280,], ) 
 shape '[-1, 200, 280]' is invalid for input of size 2281714400
2025-03-14 14:16:22.657841 test begin: paddle.reshape(Tensor([4, 3532046, 304],"float16"), shape=tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([4, 3532046, 304],"float16"), shape=tuple(4,-1,), )
2025-03-14 14:33:05.451914 test begin: paddle.reshape(Tensor([4, 35651585, 16],"float32"), list[-1,64,], )

[Pass] paddle.reshape(Tensor([4, 35651585, 16],"float32"), list[-1,64,], )
2025-03-14 14:37:11.018566 test begin: paddle.reshape(Tensor([4, 35651585, 16],"float32"), shape=list[-1,16,], )

[Pass] paddle.reshape(Tensor([4, 35651585, 16],"float32"), shape=list[-1,16,], )
2025-03-14 14:40:23.584897 test begin: paddle.reshape(Tensor([4, 36, 264, 60020],"float32"), shape=list[-1,264,336,], )

[torch error] paddle.reshape(Tensor([4, 36, 264, 60020],"float32"), shape=list[-1,264,336,], ) 
 shape '[-1, 264, 336]' is invalid for input of size 2281720320
2025-03-14 14:40:27.353497 test begin: paddle.reshape(Tensor([4, 36, 47159, 336],"float32"), shape=list[-1,264,336,], )

[torch error] paddle.reshape(Tensor([4, 36, 47159, 336],"float32"), shape=list[-1,264,336,], ) 
 shape '[-1, 264, 336]' is invalid for input of size 2281741056
2025-03-14 14:40:28.695518 test begin: paddle.reshape(Tensor([4, 38, 248, 60530],"float32"), shape=list[-1,248,304,], )

[Pass] paddle.reshape(Tensor([4, 38, 248, 60530],"float32"), shape=list[-1,248,304,], )
2025-03-14 14:44:20.602309 test begin: paddle.reshape(Tensor([4, 38, 28256364],"float16"), shape=tuple(-1,336,320,), )

[torch error] paddle.reshape(Tensor([4, 38, 28256364],"float16"), shape=tuple(-1,336,320,), ) 
 shape '[-1, 336, 320]' is invalid for input of size 4294967328
2025-03-14 14:44:24.777108 test begin: paddle.reshape(Tensor([4, 38, 336, 44677],"float32"), shape=list[-1,336,320,], )

[torch error] paddle.reshape(Tensor([4, 38, 336, 44677],"float32"), shape=list[-1,336,320,], ) 
 shape '[-1, 336, 320]' is invalid for input of size 2281743744
2025-03-14 14:44:29.442810 test begin: paddle.reshape(Tensor([4, 38, 46910, 320],"float32"), shape=list[-1,336,320,], )

[torch error] paddle.reshape(Tensor([4, 38, 46910, 320],"float32"), shape=list[-1,336,320,], ) 
 shape '[-1, 336, 320]' is invalid for input of size 2281702400
2025-03-14 14:44:31.497749 test begin: paddle.reshape(Tensor([4, 38, 49379, 304],"float32"), shape=list[-1,248,304,], )

[torch error] paddle.reshape(Tensor([4, 38, 49379, 304],"float32"), shape=list[-1,248,304,], ) 
 shape '[-1, 248, 304]' is invalid for input of size 2281704832
2025-03-14 14:44:33.368843 test begin: paddle.reshape(Tensor([4, 383351, 124, 12],"float32"), shape=tuple(4,-1,4,), )

[Pass] paddle.reshape(Tensor([4, 383351, 124, 12],"float32"), shape=tuple(4,-1,4,), )
2025-03-14 14:48:47.141568 test begin: paddle.reshape(Tensor([4, 39, 14626291],"float32"), shape=tuple(-1,232,320,), )

[torch error] paddle.reshape(Tensor([4, 39, 14626291],"float32"), shape=tuple(-1,232,320,), ) 
 shape '[-1, 232, 320]' is invalid for input of size 2281701396
2025-03-14 14:48:51.542552 test begin: paddle.reshape(Tensor([4, 39, 200, 73132],"float32"), shape=list[-1,200,280,], )

[torch error] paddle.reshape(Tensor([4, 39, 200, 73132],"float32"), shape=list[-1,200,280,], ) 
 shape '[-1, 200, 280]' is invalid for input of size 2281718400
2025-03-14 14:48:53.908451 test begin: paddle.reshape(Tensor([4, 39, 208, 70319],"float32"), shape=list[-1,208,328,], )

[torch error] paddle.reshape(Tensor([4, 39, 208, 70319],"float32"), shape=list[-1,208,328,], ) 
 shape '[-1, 208, 328]' is invalid for input of size 2281710912
2025-03-14 14:48:54.988420 test begin: paddle.reshape(Tensor([4, 39, 232, 63045],"float32"), shape=list[-1,232,320,], )

[torch error] paddle.reshape(Tensor([4, 39, 232, 63045],"float32"), shape=list[-1,232,320,], ) 
 shape '[-1, 232, 320]' is invalid for input of size 2281724640
2025-03-14 14:48:56.061987 test begin: paddle.reshape(Tensor([4, 39, 27531842],"float16"), shape=tuple(-1,200,280,), )

[torch error] paddle.reshape(Tensor([4, 39, 27531842],"float16"), shape=tuple(-1,200,280,), ) 
 shape '[-1, 200, 280]' is invalid for input of size 4294967352
2025-03-14 14:49:00.224960 test begin: paddle.reshape(Tensor([4, 39, 27531842],"float16"), shape=tuple(-1,208,328,), )

[torch error] paddle.reshape(Tensor([4, 39, 27531842],"float16"), shape=tuple(-1,208,328,), ) 
 shape '[-1, 208, 328]' is invalid for input of size 4294967352
2025-03-14 14:49:01.391066 test begin: paddle.reshape(Tensor([4, 39, 27531842],"float16"), shape=tuple(-1,232,320,), )

[torch error] paddle.reshape(Tensor([4, 39, 27531842],"float16"), shape=tuple(-1,232,320,), ) 
 shape '[-1, 232, 320]' is invalid for input of size 4294967352
2025-03-14 14:49:02.334206 test begin: paddle.reshape(Tensor([4, 39, 27531842],"float16"), shape=tuple(-1,304,264,), )

[torch error] paddle.reshape(Tensor([4, 39, 27531842],"float16"), shape=tuple(-1,304,264,), ) 
 shape '[-1, 304, 264]' is invalid for input of size 4294967352
2025-03-14 14:49:03.310512 test begin: paddle.reshape(Tensor([4, 39, 304, 48113],"float32"), shape=list[-1,304,264,], )

[torch error] paddle.reshape(Tensor([4, 39, 304, 48113],"float32"), shape=list[-1,304,264,], ) 
 shape '[-1, 304, 264]' is invalid for input of size 2281710912
2025-03-14 14:49:05.681245 test begin: paddle.reshape(Tensor([4, 39, 44593, 328],"float32"), shape=list[-1,208,328,], )

[torch error] paddle.reshape(Tensor([4, 39, 44593, 328],"float32"), shape=list[-1,208,328,], ) 
 shape '[-1, 208, 328]' is invalid for input of size 2281734624
2025-03-14 14:49:07.544365 test begin: paddle.reshape(Tensor([4, 39, 45708, 320],"float32"), shape=list[-1,232,320,], )

[torch error] paddle.reshape(Tensor([4, 39, 45708, 320],"float32"), shape=list[-1,232,320,], ) 
 shape '[-1, 232, 320]' is invalid for input of size 2281743360
2025-03-14 14:49:09.437039 test begin: paddle.reshape(Tensor([4, 39, 52237, 280],"float32"), shape=list[-1,200,280,], )

[torch error] paddle.reshape(Tensor([4, 39, 52237, 280],"float32"), shape=list[-1,200,280,], ) 
 shape '[-1, 200, 280]' is invalid for input of size 2281712160
2025-03-14 14:49:11.306548 test begin: paddle.reshape(Tensor([4, 39, 55403, 264],"float32"), shape=list[-1,304,264,], )

[torch error] paddle.reshape(Tensor([4, 39, 55403, 264],"float32"), shape=list[-1,304,264,], ) 
 shape '[-1, 304, 264]' is invalid for input of size 2281717152
2025-03-14 14:49:13.177591 test begin: paddle.reshape(Tensor([4, 3947581, 272],"float16"), shape=tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([4, 3947581, 272],"float16"), shape=tuple(4,-1,), )
2025-03-14 15:05:16.557196 test begin: paddle.reshape(Tensor([4, 3961288, 12, 12],"float32"), shape=tuple(4,256,-1,), )

[torch error] paddle.reshape(Tensor([4, 3961288, 12, 12],"float32"), shape=tuple(4,256,-1,), ) 
 shape '[4, 256, -1]' is invalid for input of size 2281701888
2025-03-14 15:05:20.727297 test begin: paddle.reshape(Tensor([4, 396129, 120, 12],"float32"), shape=tuple(4,-1,4,), )

[Pass] paddle.reshape(Tensor([4, 396129, 120, 12],"float32"), shape=tuple(4,-1,4,), )
2025-03-14 15:08:51.937934 test begin: paddle.reshape(Tensor([4, 4, 10186167, 14],"float32"), list[4,4,14,7,], )

[torch error] paddle.reshape(Tensor([4, 4, 10186167, 14],"float32"), list[4,4,14,7,], ) 
 shape '[4, 4, 14, 7]' is invalid for input of size 2281701408
2025-03-14 15:08:55.947113 test begin: paddle.reshape(Tensor([4, 4, 13, 10969719],"float32"), list[4,4,7,13,], )

[torch error] paddle.reshape(Tensor([4, 4, 13, 10969719],"float32"), list[4,4,7,13,], ) 
 shape '[4, 4, 7, 13]' is invalid for input of size 2281701552
2025-03-14 15:08:57.356652 test begin: paddle.reshape(Tensor([4, 4, 142606337],"float32"), list[-1,128,], )

[torch error] paddle.reshape(Tensor([4, 4, 142606337],"float32"), list[-1,128,], ) 
 shape '[-1, 128]' is invalid for input of size 2281701392
2025-03-14 15:08:58.941846 test begin: paddle.reshape(Tensor([4, 4, 142606337],"float32"), list[-1,64,], )

[torch error] paddle.reshape(Tensor([4, 4, 142606337],"float32"), list[-1,64,], ) 
 shape '[-1, 64]' is invalid for input of size 2281701392
2025-03-14 15:08:59.993389 test begin: paddle.reshape(Tensor([4, 4, 142606337],"float32"), shape=list[-1,16,], )

[Pass] paddle.reshape(Tensor([4, 4, 142606337],"float32"), shape=list[-1,16,], )
2025-03-14 15:12:24.466563 test begin: paddle.reshape(Tensor([4, 4, 142606337],"float32"), shape=list[-1,32,], )

[torch error] paddle.reshape(Tensor([4, 4, 142606337],"float32"), shape=list[-1,32,], ) 
 shape '[-1, 32]' is invalid for input of size 2281701392
2025-03-14 15:12:28.946623 test begin: paddle.reshape(Tensor([4, 4, 142606337],"float32"), shape=tuple(-1,200,328,), )

[torch error] paddle.reshape(Tensor([4, 4, 142606337],"float32"), shape=tuple(-1,200,328,), ) 
 shape '[-1, 200, 328]' is invalid for input of size 2281701392
2025-03-14 15:12:30.368094 test begin: paddle.reshape(Tensor([4, 4, 142606337],"float32"), shape=tuple(-1,288,336,), )

[torch error] paddle.reshape(Tensor([4, 4, 142606337],"float32"), shape=tuple(-1,288,336,), ) 
 shape '[-1, 288, 336]' is invalid for input of size 2281701392
2025-03-14 15:12:31.752694 test begin: paddle.reshape(Tensor([4, 4, 200, 713032],"float32"), shape=list[-1,200,328,], )

[torch error] paddle.reshape(Tensor([4, 4, 200, 713032],"float32"), shape=list[-1,200,328,], ) 
 shape '[-1, 200, 328]' is invalid for input of size 2281702400
2025-03-14 15:12:33.541927 test begin: paddle.reshape(Tensor([4, 4, 20372334, 7],"float32"), list[4,4,7,13,], )

[torch error] paddle.reshape(Tensor([4, 4, 20372334, 7],"float32"), list[4,4,7,13,], ) 
 shape '[4, 4, 7, 13]' is invalid for input of size 2281701408
2025-03-14 15:12:35.175334 test begin: paddle.reshape(Tensor([4, 4, 208, 685608],"float32"), shape=list[-1,208,336,], )

[Pass] paddle.reshape(Tensor([4, 4, 208, 685608],"float32"), shape=list[-1,208,336,], )
2025-03-14 15:15:51.086980 test begin: paddle.reshape(Tensor([4, 4, 268435457],"float16"), shape=tuple(-1,200,328,), )

[torch error] paddle.reshape(Tensor([4, 4, 268435457],"float16"), shape=tuple(-1,200,328,), ) 
 shape '[-1, 200, 328]' is invalid for input of size 4294967312
2025-03-14 15:15:55.038566 test begin: paddle.reshape(Tensor([4, 4, 268435457],"float16"), shape=tuple(-1,288,336,), )

[torch error] paddle.reshape(Tensor([4, 4, 268435457],"float16"), shape=tuple(-1,288,336,), ) 
 shape '[-1, 288, 336]' is invalid for input of size 4294967312
2025-03-14 15:15:56.566407 test begin: paddle.reshape(Tensor([4, 4, 268435457],"float16"), shape=tuple(-1,304,264,), )

[torch error] paddle.reshape(Tensor([4, 4, 268435457],"float16"), shape=tuple(-1,304,264,), ) 
 shape '[-1, 304, 264]' is invalid for input of size 4294967312
2025-03-14 15:15:57.812447 test begin: paddle.reshape(Tensor([4, 4, 268435457],"float16"), shape=tuple(-1,320,320,), )

[torch error] paddle.reshape(Tensor([4, 4, 268435457],"float16"), shape=tuple(-1,320,320,), ) 
 shape '[-1, 320, 320]' is invalid for input of size 4294967312
2025-03-14 15:15:59.593014 test begin: paddle.reshape(Tensor([4, 4, 272, 524289],"float32"), shape=list[-1,272,200,], )

[torch error] paddle.reshape(Tensor([4, 4, 272, 524289],"float32"), shape=list[-1,272,200,], ) 
 shape '[-1, 272, 200]' is invalid for input of size 2281705728
2025-03-14 15:16:04.436289 test begin: paddle.reshape(Tensor([4, 4, 288, 495161],"float32"), shape=list[-1,288,304,], )

[torch error] paddle.reshape(Tensor([4, 4, 288, 495161],"float32"), shape=list[-1,288,304,], ) 
 shape '[-1, 288, 304]' is invalid for input of size 2281701888
2025-03-14 15:16:06.006513 test begin: paddle.reshape(Tensor([4, 4, 288, 495161],"float32"), shape=list[-1,288,336,], )

[torch error] paddle.reshape(Tensor([4, 4, 288, 495161],"float32"), shape=list[-1,288,336,], ) 
 shape '[-1, 288, 336]' is invalid for input of size 2281701888
2025-03-14 15:16:07.808080 test begin: paddle.reshape(Tensor([4, 4, 296, 481779],"float32"), shape=list[-1,296,272,], )

[torch error] paddle.reshape(Tensor([4, 4, 296, 481779],"float32"), shape=list[-1,296,272,], ) 
 shape '[-1, 296, 272]' is invalid for input of size 2281705344
2025-03-14 15:16:09.412578 test begin: paddle.reshape(Tensor([4, 4, 304, 469100],"float32"), shape=list[-1,304,264,], )

[torch error] paddle.reshape(Tensor([4, 4, 304, 469100],"float32"), shape=list[-1,304,264,], ) 
 shape '[-1, 304, 264]' is invalid for input of size 2281702400
2025-03-14 15:16:10.514287 test begin: paddle.reshape(Tensor([4, 4, 320, 445645],"float32"), shape=list[-1,320,320,], )

[torch error] paddle.reshape(Tensor([4, 4, 320, 445645],"float32"), shape=list[-1,320,320,], ) 
 shape '[-1, 320, 320]' is invalid for input of size 2281702400
2025-03-14 15:16:11.882547 test begin: paddle.reshape(Tensor([4, 4, 424424, 336],"float32"), shape=list[-1,208,336,], )

[Pass] paddle.reshape(Tensor([4, 4, 424424, 336],"float32"), shape=list[-1,208,336,], )
2025-03-14 15:19:26.256704 test begin: paddle.reshape(Tensor([4, 4, 424424, 336],"float32"), shape=list[-1,288,336,], )

[torch error] paddle.reshape(Tensor([4, 4, 424424, 336],"float32"), shape=list[-1,288,336,], ) 
 shape '[-1, 288, 336]' is invalid for input of size 2281703424
2025-03-14 15:19:30.573288 test begin: paddle.reshape(Tensor([4, 4, 434776, 328],"float32"), shape=list[-1,200,328,], )

[torch error] paddle.reshape(Tensor([4, 4, 434776, 328],"float32"), shape=list[-1,200,328,], ) 
 shape '[-1, 200, 328]' is invalid for input of size 2281704448
2025-03-14 15:19:32.552290 test begin: paddle.reshape(Tensor([4, 4, 445645, 320],"float32"), shape=list[-1,320,320,], )

[torch error] paddle.reshape(Tensor([4, 4, 445645, 320],"float32"), shape=list[-1,320,320,], ) 
 shape '[-1, 320, 320]' is invalid for input of size 2281702400
2025-03-14 15:19:34.412081 test begin: paddle.reshape(Tensor([4, 4, 469100, 304],"float32"), shape=list[-1,288,304,], )

[torch error] paddle.reshape(Tensor([4, 4, 469100, 304],"float32"), shape=list[-1,288,304,], ) 
 shape '[-1, 288, 304]' is invalid for input of size 2281702400
2025-03-14 15:19:36.279336 test begin: paddle.reshape(Tensor([4, 4, 524289, 272],"float32"), shape=list[-1,296,272,], )

[torch error] paddle.reshape(Tensor([4, 4, 524289, 272],"float32"), shape=list[-1,296,272,], ) 
 shape '[-1, 296, 272]' is invalid for input of size 2281705728
2025-03-14 15:19:38.134646 test begin: paddle.reshape(Tensor([4, 4, 540176, 264],"float32"), shape=list[-1,304,264,], )

[torch error] paddle.reshape(Tensor([4, 4, 540176, 264],"float32"), shape=list[-1,304,264,], ) 
 shape '[-1, 304, 264]' is invalid for input of size 2281703424
2025-03-14 15:19:40.005218 test begin: paddle.reshape(Tensor([4, 4, 7, 20372334],"float32"), list[4,4,14,7,], )

[torch error] paddle.reshape(Tensor([4, 4, 7, 20372334],"float32"), list[4,4,14,7,], ) 
 shape '[4, 4, 14, 7]' is invalid for input of size 2281701408
2025-03-14 15:19:41.901464 test begin: paddle.reshape(Tensor([4, 4, 713032, 200],"float32"), shape=list[-1,272,200,], )

[torch error] paddle.reshape(Tensor([4, 4, 713032, 200],"float32"), shape=list[-1,272,200,], ) 
 shape '[-1, 272, 200]' is invalid for input of size 2281702400
2025-03-14 15:19:43.537430 test begin: paddle.reshape(Tensor([4, 40, 200, 71304],"float32"), shape=list[-1,200,280,], )

[torch error] paddle.reshape(Tensor([4, 40, 200, 71304],"float32"), shape=list[-1,200,280,], ) 
 shape '[-1, 200, 280]' is invalid for input of size 2281728000
2025-03-14 15:19:45.742062 test begin: paddle.reshape(Tensor([4, 40, 50931, 280],"float32"), shape=list[-1,200,280,], )

[torch error] paddle.reshape(Tensor([4, 40, 50931, 280],"float32"), shape=list[-1,200,280,], ) 
 shape '[-1, 200, 280]' is invalid for input of size 2281708800
2025-03-14 15:19:47.651812 test begin: paddle.reshape(Tensor([4, 41, 280, 49689],"float32"), shape=list[-1,280,312,], )

[torch error] paddle.reshape(Tensor([4, 41, 280, 49689],"float32"), shape=list[-1,280,312,], ) 
 shape '[-1, 280, 312]' is invalid for input of size 2281718880
2025-03-14 15:19:49.275666 test begin: paddle.reshape(Tensor([4, 41, 44593, 312],"float32"), shape=list[-1,280,312,], )

[torch error] paddle.reshape(Tensor([4, 41, 44593, 312],"float32"), shape=list[-1,280,312,], ) 
 shape '[-1, 280, 312]' is invalid for input of size 2281734624
2025-03-14 15:19:50.367612 test begin: paddle.reshape(Tensor([4, 4194305, 16, 16],"float16"), shape=tuple(4,256,-1,), )

[Pass] paddle.reshape(Tensor([4, 4194305, 16, 16],"float16"), shape=tuple(4,256,-1,), )
2025-03-14 15:36:33.563658 test begin: paddle.reshape(Tensor([4, 4194305, 256],"float16"), shape=tuple(-1,256,), )

[Pass] paddle.reshape(Tensor([4, 4194305, 256],"float16"), shape=tuple(-1,256,), )
2025-03-14 15:53:59.286762 test begin: paddle.reshape(Tensor([4, 43, 24970741],"float16"), shape=tuple(-1,304,264,), )

[torch error] paddle.reshape(Tensor([4, 43, 24970741],"float16"), shape=tuple(-1,304,264,), ) 
 shape '[-1, 304, 264]' is invalid for input of size 4294967452
2025-03-14 15:54:03.401260 test begin: paddle.reshape(Tensor([4, 43, 304, 43638],"float32"), shape=list[-1,304,264,], )

[torch error] paddle.reshape(Tensor([4, 43, 304, 43638],"float32"), shape=list[-1,304,264,], ) 
 shape '[-1, 304, 264]' is invalid for input of size 2281743744
2025-03-14 15:54:07.897745 test begin: paddle.reshape(Tensor([4, 43, 50249, 264],"float32"), shape=list[-1,304,264,], )

[torch error] paddle.reshape(Tensor([4, 43, 50249, 264],"float32"), shape=list[-1,304,264,], ) 
 shape '[-1, 304, 264]' is invalid for input of size 2281706592
2025-03-14 15:54:09.651556 test begin: paddle.reshape(Tensor([4, 44, 232, 55881],"float32"), shape=list[-1,232,320,], )

[torch error] paddle.reshape(Tensor([4, 44, 232, 55881],"float32"), shape=list[-1,232,320,], ) 
 shape '[-1, 232, 320]' is invalid for input of size 2281732992
2025-03-14 15:54:11.577282 test begin: paddle.reshape(Tensor([4, 44, 24403224],"float16"), shape=tuple(-1,232,320,), )

[torch error] paddle.reshape(Tensor([4, 44, 24403224],"float16"), shape=tuple(-1,232,320,), ) 
 shape '[-1, 232, 320]' is invalid for input of size 4294967424
2025-03-14 15:54:15.465016 test begin: paddle.reshape(Tensor([4, 44, 248, 52276],"float32"), shape=list[-1,248,336,], )

[torch error] paddle.reshape(Tensor([4, 44, 248, 52276],"float32"), shape=list[-1,248,336,], ) 
 shape '[-1, 248, 336]' is invalid for input of size 2281742848
2025-03-14 15:54:17.375707 test begin: paddle.reshape(Tensor([4, 44, 256, 50642],"float32"), shape=list[-1,256,272,], )

[torch error] paddle.reshape(Tensor([4, 44, 256, 50642],"float32"), shape=list[-1,256,272,], ) 
 shape '[-1, 256, 272]' is invalid for input of size 2281725952
2025-03-14 15:54:19.255609 test begin: paddle.reshape(Tensor([4, 44, 38584, 336],"float32"), shape=list[-1,248,336,], )

[torch error] paddle.reshape(Tensor([4, 44, 38584, 336],"float32"), shape=list[-1,248,336,], ) 
 shape '[-1, 248, 336]' is invalid for input of size 2281703424
2025-03-14 15:54:21.188655 test begin: paddle.reshape(Tensor([4, 44, 40514, 320],"float32"), shape=list[-1,232,320,], )

[torch error] paddle.reshape(Tensor([4, 44, 40514, 320],"float32"), shape=list[-1,232,320,], ) 
 shape '[-1, 232, 320]' is invalid for input of size 2281748480
2025-03-14 15:54:22.950154 test begin: paddle.reshape(Tensor([4, 44, 47663, 272],"float32"), shape=list[-1,256,272,], )

[torch error] paddle.reshape(Tensor([4, 44, 47663, 272],"float32"), shape=list[-1,256,272,], ) 
 shape '[-1, 256, 272]' is invalid for input of size 2281723136
2025-03-14 15:54:24.263101 test begin: paddle.reshape(Tensor([4, 4456449, 128],"float32"), shape=list[-1,128,], )

[Pass] paddle.reshape(Tensor([4, 4456449, 128],"float32"), shape=list[-1,128,], )
2025-03-14 15:58:05.409884 test begin: paddle.reshape(Tensor([4, 445645, 16, 80],"float32"), shape=tuple(-1,80,), )

[Pass] paddle.reshape(Tensor([4, 445645, 16, 80],"float32"), shape=tuple(-1,80,), )
2025-03-14 16:01:22.306144 test begin: paddle.reshape(Tensor([4, 45, 248, 51114],"float32"), shape=list[-1,248,336,], )

[torch error] paddle.reshape(Tensor([4, 45, 248, 51114],"float32"), shape=list[-1,248,336,], ) 
 shape '[-1, 248, 336]' is invalid for input of size 2281728960
2025-03-14 16:01:26.069162 test begin: paddle.reshape(Tensor([4, 45, 37727, 336],"float32"), shape=list[-1,248,336,], )

[torch error] paddle.reshape(Tensor([4, 45, 37727, 336],"float32"), shape=list[-1,248,336,], ) 
 shape '[-1, 248, 336]' is invalid for input of size 2281728960
2025-03-14 16:01:27.276943 test begin: paddle.reshape(Tensor([4, 46, 200, 62003],"float32"), shape=list[-1,200,328,], )

[torch error] paddle.reshape(Tensor([4, 46, 200, 62003],"float32"), shape=list[-1,200,328,], ) 
 shape '[-1, 200, 328]' is invalid for input of size 2281710400
2025-03-14 16:01:28.730561 test begin: paddle.reshape(Tensor([4, 46, 23342214],"float16"), shape=tuple(-1,200,328,), )

[torch error] paddle.reshape(Tensor([4, 46, 23342214],"float16"), shape=tuple(-1,200,328,), ) 
 shape '[-1, 200, 328]' is invalid for input of size 4294967376
2025-03-14 16:01:32.780580 test begin: paddle.reshape(Tensor([4, 46, 296, 41894],"float32"), shape=list[-1,296,336,], )

[torch error] paddle.reshape(Tensor([4, 46, 296, 41894],"float32"), shape=list[-1,296,336,], ) 
 shape '[-1, 296, 336]' is invalid for input of size 2281714816
2025-03-14 16:01:35.942945 test begin: paddle.reshape(Tensor([4, 46, 36907, 336],"float32"), shape=list[-1,296,336,], )

[torch error] paddle.reshape(Tensor([4, 46, 36907, 336],"float32"), shape=list[-1,296,336,], ) 
 shape '[-1, 296, 336]' is invalid for input of size 2281738368
2025-03-14 16:01:37.023309 test begin: paddle.reshape(Tensor([4, 46, 37807, 328],"float32"), shape=list[-1,200,328,], )

[torch error] paddle.reshape(Tensor([4, 46, 37807, 328],"float32"), shape=list[-1,200,328,], ) 
 shape '[-1, 200, 328]' is invalid for input of size 2281728064
2025-03-14 16:01:38.418709 test begin: paddle.reshape(Tensor([4, 46422, 24, 512],"float32"), list[4,24,24,512,], )

[torch error] paddle.reshape(Tensor([4, 46422, 24, 512],"float32"), list[4,24,24,512,], ) 
 shape '[4, 24, 24, 512]' is invalid for input of size 2281734144
2025-03-14 16:01:40.022020 test begin: paddle.reshape(Tensor([4, 46422, 48, 256],"float32"), list[4,48,48,256,], )

[torch error] paddle.reshape(Tensor([4, 46422, 48, 256],"float32"), list[4,48,48,256,], ) 
 shape '[4, 48, 48, 256]' is invalid for input of size 2281734144
2025-03-14 16:01:41.127850 test begin: paddle.reshape(Tensor([4, 46422, 96, 128],"float32"), list[4,96,96,128,], )

[torch error] paddle.reshape(Tensor([4, 46422, 96, 128],"float32"), list[4,96,96,128,], ) 
 shape '[4, 96, 96, 128]' is invalid for input of size 2281734144
2025-03-14 16:01:42.148798 test begin: paddle.reshape(Tensor([4, 48, 30948, 384],"float32"), list[4,48,48,384,], )

[torch error] paddle.reshape(Tensor([4, 48, 30948, 384],"float32"), list[4,48,48,384,], ) 
 shape '[4, 48, 48, 384]' is invalid for input of size 2281734144
2025-03-14 16:01:43.201254 test begin: paddle.reshape(Tensor([4, 48, 46422, 256],"float32"), list[4,48,48,256,], )

[torch error] paddle.reshape(Tensor([4, 48, 46422, 256],"float32"), list[4,48,48,256,], ) 
 shape '[4, 48, 48, 256]' is invalid for input of size 2281734144
2025-03-14 16:01:44.488418 test begin: paddle.reshape(Tensor([4, 48, 48, 247581],"float32"), list[4,48,48,256,], )

[torch error] paddle.reshape(Tensor([4, 48, 48, 247581],"float32"), list[4,48,48,256,], ) 
 shape '[4, 48, 48, 256]' is invalid for input of size 2281706496
2025-03-14 16:01:46.272267 test begin: paddle.reshape(Tensor([4, 48, 48, 247581],"float32"), list[4,48,48,384,], )

[torch error] paddle.reshape(Tensor([4, 48, 48, 247581],"float32"), list[4,48,48,384,], ) 
 shape '[4, 48, 48, 384]' is invalid for input of size 2281706496
2025-03-14 16:01:47.920403 test begin: paddle.reshape(Tensor([4, 5, 114085069],"float32"), tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([4, 5, 114085069],"float32"), tuple(4,-1,), )
2025-03-14 16:04:40.133044 test begin: paddle.reshape(Tensor([4, 5, 312, 365658],"float32"), shape=list[-1,312,296,], )

[torch error] paddle.reshape(Tensor([4, 5, 312, 365658],"float32"), shape=list[-1,312,296,], ) 
 shape '[-1, 312, 296]' is invalid for input of size 2281705920
2025-03-14 16:04:43.916162 test begin: paddle.reshape(Tensor([4, 5, 3169030, 6, 6],"float32"), tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([4, 5, 3169030, 6, 6],"float32"), tuple(4,-1,), )
2025-03-14 16:07:35.899161 test begin: paddle.reshape(Tensor([4, 5, 320, 356516],"float32"), shape=list[-1,320,320,], )

[torch error] paddle.reshape(Tensor([4, 5, 320, 356516],"float32"), shape=list[-1,320,320,], ) 
 shape '[-1, 320, 320]' is invalid for input of size 2281702400
2025-03-14 16:07:40.015840 test begin: paddle.reshape(Tensor([4, 5, 356516, 320],"float32"), shape=list[-1,320,320,], )

[torch error] paddle.reshape(Tensor([4, 5, 356516, 320],"float32"), shape=list[-1,320,320,], ) 
 shape '[-1, 320, 320]' is invalid for input of size 2281702400
2025-03-14 16:07:42.140498 test begin: paddle.reshape(Tensor([4, 5, 385423, 296],"float32"), shape=list[-1,312,296,], )

[torch error] paddle.reshape(Tensor([4, 5, 385423, 296],"float32"), shape=list[-1,312,296,], ) 
 shape '[-1, 312, 296]' is invalid for input of size 2281704160
2025-03-14 16:07:43.787705 test begin: paddle.reshape(Tensor([4, 5, 6, 3169030, 6],"float32"), tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([4, 5, 6, 3169030, 6],"float32"), tuple(4,-1,), )
2025-03-14 16:11:09.165236 test begin: paddle.reshape(Tensor([4, 5, 6, 6, 3169030],"float32"), tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([4, 5, 6, 6, 3169030],"float32"), tuple(4,-1,), )
2025-03-14 16:14:07.991036 test begin: paddle.reshape(Tensor([4, 5053, 112896],"float32"), shape=tuple(-1,336,336,), )

[Pass] paddle.reshape(Tensor([4, 5053, 112896],"float32"), shape=tuple(-1,336,336,), )
2025-03-14 16:17:21.157142 test begin: paddle.reshape(Tensor([4, 5053, 336, 336],"float32"), shape=list[-1,336,336,], )

[Pass] paddle.reshape(Tensor([4, 5053, 336, 336],"float32"), shape=list[-1,336,336,], )
2025-03-14 16:20:08.901188 test begin: paddle.reshape(Tensor([4, 512, 1114113],"float32"), list[-1,1024,], )

[Pass] paddle.reshape(Tensor([4, 512, 1114113],"float32"), list[-1,1024,], )
2025-03-14 16:23:18.533283 test begin: paddle.reshape(Tensor([4, 512, 2097153],"float16"), list[-1,1024,], )

[Pass] paddle.reshape(Tensor([4, 512, 2097153],"float16"), list[-1,1024,], )
2025-03-14 16:40:09.470941 test begin: paddle.reshape(Tensor([4, 512, 512, 2177],"float32"), list[-1,150,], )

[torch error] paddle.reshape(Tensor([4, 512, 512, 2177],"float32"), list[-1,150,], ) 
 shape '[-1, 150]' is invalid for input of size 2282749952
2025-03-14 16:40:13.859422 test begin: paddle.reshape(Tensor([4, 512, 512, 2177],"float32"), list[-1,2,], )

[Pass] paddle.reshape(Tensor([4, 512, 512, 2177],"float32"), list[-1,2,], )
2025-03-14 16:44:11.265017 test begin: paddle.reshape(Tensor([4, 512, 557057, 2],"float32"), list[-1,2,], )

[Pass] paddle.reshape(Tensor([4, 512, 557057, 2],"float32"), list[-1,2,], )
2025-03-14 16:47:26.402845 test begin: paddle.reshape(Tensor([4, 512, 7428, 150],"float32"), list[-1,150,], )

[Pass] paddle.reshape(Tensor([4, 512, 7428, 150],"float32"), list[-1,150,], )
2025-03-14 16:51:05.853316 test begin: paddle.reshape(Tensor([4, 53, 200, 53814],"float32"), shape=list[-1,200,328,], )

[torch error] paddle.reshape(Tensor([4, 53, 200, 53814],"float32"), shape=list[-1,200,328,], ) 
 shape '[-1, 200, 328]' is invalid for input of size 2281713600
2025-03-14 16:51:09.863080 test begin: paddle.reshape(Tensor([4, 53, 32814, 328],"float32"), shape=list[-1,200,328,], )

[torch error] paddle.reshape(Tensor([4, 53, 32814, 328],"float32"), shape=list[-1,200,328,], ) 
 shape '[-1, 200, 328]' is invalid for input of size 2281754304
2025-03-14 16:51:11.140453 test begin: paddle.reshape(Tensor([4, 53053, 14, 768],"float32"), list[4,14,14,768,], )

[torch error] paddle.reshape(Tensor([4, 53053, 14, 768],"float32"), list[4,14,14,768,], ) 
 shape '[4, 14, 14, 768]' is invalid for input of size 2281703424
2025-03-14 16:51:12.671522 test begin: paddle.reshape(Tensor([4, 53053, 28, 384],"float32"), list[4,28,28,384,], )

[torch error] paddle.reshape(Tensor([4, 53053, 28, 384],"float32"), list[4,28,28,384,], ) 
 shape '[4, 28, 28, 384]' is invalid for input of size 2281703424
2025-03-14 16:51:14.411140 test begin: paddle.reshape(Tensor([4, 53053, 56, 192],"float32"), list[4,56,56,192,], )

[torch error] paddle.reshape(Tensor([4, 53053, 56, 192],"float32"), list[4,56,56,192,], ) 
 shape '[4, 56, 56, 192]' is invalid for input of size 2281703424
2025-03-14 16:51:16.255351 test begin: paddle.reshape(Tensor([4, 5306, 336, 320],"float32"), shape=list[-1,336,320,], )

[Pass] paddle.reshape(Tensor([4, 5306, 336, 320],"float32"), shape=list[-1,336,320,], )
2025-03-14 16:54:33.243350 test begin: paddle.reshape(Tensor([4, 5442, 104832],"float32"), shape=tuple(-1,312,336,), )

[Pass] paddle.reshape(Tensor([4, 5442, 104832],"float32"), shape=tuple(-1,312,336,), )
2025-03-14 16:57:58.074899 test begin: paddle.reshape(Tensor([4, 5442, 104832],"float32"), shape=tuple(-1,336,312,), )

[Pass] paddle.reshape(Tensor([4, 5442, 104832],"float32"), shape=tuple(-1,336,312,), )
2025-03-14 17:01:15.732085 test begin: paddle.reshape(Tensor([4, 5442, 312, 336],"float32"), shape=list[-1,312,336,], )

[Pass] paddle.reshape(Tensor([4, 5442, 312, 336],"float32"), shape=list[-1,312,336,], )
2025-03-14 17:04:47.624232 test begin: paddle.reshape(Tensor([4, 5442, 336, 312],"float32"), shape=list[-1,336,312,], )

[Pass] paddle.reshape(Tensor([4, 5442, 336, 312],"float32"), shape=list[-1,336,312,], )
2025-03-14 17:08:49.307952 test begin: paddle.reshape(Tensor([4, 557057, 1024],"float32"), list[-1,1024,], )

[Pass] paddle.reshape(Tensor([4, 557057, 1024],"float32"), list[-1,1024,], )
2025-03-14 17:12:32.682178 test begin: paddle.reshape(Tensor([4, 557057, 512, 2],"float32"), list[-1,2,], )

[Pass] paddle.reshape(Tensor([4, 557057, 512, 2],"float32"), list[-1,2,], )
2025-03-14 17:15:42.293291 test begin: paddle.reshape(Tensor([4, 5571, 102400],"float32"), shape=tuple(-1,320,320,), )

[Pass] paddle.reshape(Tensor([4, 5571, 102400],"float32"), shape=tuple(-1,320,320,), )
2025-03-14 17:19:00.259207 test begin: paddle.reshape(Tensor([4, 5571, 320, 320],"float32"), shape=list[-1,320,320,], )

[Pass] paddle.reshape(Tensor([4, 5571, 320, 320],"float32"), shape=list[-1,320,320,], )
2025-03-14 17:22:23.301580 test begin: paddle.reshape(Tensor([4, 5585, 102144],"float32"), shape=tuple(-1,304,336,), )

[Pass] paddle.reshape(Tensor([4, 5585, 102144],"float32"), shape=tuple(-1,304,336,), )
2025-03-14 17:25:55.232831 test begin: paddle.reshape(Tensor([4, 5585, 102144],"float32"), shape=tuple(-1,336,304,), )

[Pass] paddle.reshape(Tensor([4, 5585, 102144],"float32"), shape=tuple(-1,336,304,), )
2025-03-14 17:29:33.372484 test begin: paddle.reshape(Tensor([4, 5585, 304, 336],"float32"), shape=list[-1,304,336,], )

[Pass] paddle.reshape(Tensor([4, 5585, 304, 336],"float32"), shape=list[-1,304,336,], )
2025-03-14 17:33:33.973196 test begin: paddle.reshape(Tensor([4, 5585, 336, 304],"float32"), shape=list[-1,336,304,], )

[Pass] paddle.reshape(Tensor([4, 5585, 336, 304],"float32"), shape=list[-1,336,304,], )
2025-03-14 17:36:58.311771 test begin: paddle.reshape(Tensor([4, 559241, 24, 80],"float16"), shape=tuple(-1,80,), )

[Pass] paddle.reshape(Tensor([4, 559241, 24, 80],"float16"), shape=tuple(-1,80,), )
2025-03-14 17:53:52.300896 test begin: paddle.reshape(Tensor([4, 56, 200, 50931],"float32"), shape=list[-1,200,328,], )

[torch error] paddle.reshape(Tensor([4, 56, 200, 50931],"float32"), shape=list[-1,200,328,], ) 
 shape '[-1, 200, 328]' is invalid for input of size 2281708800
2025-03-14 17:53:56.349258 test begin: paddle.reshape(Tensor([4, 56, 31056, 328],"float32"), shape=list[-1,200,328,], )

[torch error] paddle.reshape(Tensor([4, 56, 31056, 328],"float32"), shape=list[-1,200,328,], ) 
 shape '[-1, 200, 328]' is invalid for input of size 2281746432
2025-03-14 17:53:57.668921 test begin: paddle.reshape(Tensor([4, 56, 53053, 192],"float32"), list[4,56,56,192,], )

[torch error] paddle.reshape(Tensor([4, 56, 53053, 192],"float32"), list[4,56,56,192,], ) 
 shape '[4, 56, 56, 192]' is invalid for input of size 2281703424
2025-03-14 17:53:58.831393 test begin: paddle.reshape(Tensor([4, 56, 56, 181896],"float32"), list[4,56,56,192,], )

[torch error] paddle.reshape(Tensor([4, 56, 56, 181896],"float32"), list[4,56,56,192,], ) 
 shape '[4, 56, 56, 192]' is invalid for input of size 2281703424
2025-03-14 17:54:00.000992 test begin: paddle.reshape(Tensor([4, 570425345, 1, 1],"float32"), shape=list[-1,1024,], )

[torch error] paddle.reshape(Tensor([4, 570425345, 1, 1],"float32"), shape=list[-1,1024,], ) 
 shape '[-1, 1024]' is invalid for input of size 2281701380
2025-03-14 17:54:01.164192 test begin: paddle.reshape(Tensor([4, 570425345, 1, 1],"float32"), shape=list[-1,1280,], )

[torch error] paddle.reshape(Tensor([4, 570425345, 1, 1],"float32"), shape=list[-1,1280,], ) 
 shape '[-1, 1280]' is invalid for input of size 2281701380
2025-03-14 17:54:02.353449 test begin: paddle.reshape(Tensor([4, 570425345, 1],"float32"), shape=list[-1,3,], )

[torch error] paddle.reshape(Tensor([4, 570425345, 1],"float32"), shape=list[-1,3,], ) 
 shape '[-1, 3]' is invalid for input of size 2281701380
2025-03-14 17:54:03.528861 test begin: paddle.reshape(Tensor([4, 570425345],"float32"), list[-1,1,], )

[Pass] paddle.reshape(Tensor([4, 570425345],"float32"), list[-1,1,], )
2025-03-14 17:57:05.133564 test begin: paddle.reshape(Tensor([4, 570425345],"float32"), list[-1,3,10,], )

[torch error] paddle.reshape(Tensor([4, 570425345],"float32"), list[-1,3,10,], ) 
 shape '[-1, 3, 10]' is invalid for input of size 2281701380
2025-03-14 17:57:10.125533 test begin: paddle.reshape(Tensor([4, 570425345],"float32"), list[4,5,4,], )

[torch error] paddle.reshape(Tensor([4, 570425345],"float32"), list[4,5,4,], ) 
 shape '[4, 5, 4]' is invalid for input of size 2281701380
2025-03-14 17:57:11.881672 test begin: paddle.reshape(Tensor([4, 570425345],"float32"), list[4,5,6,6,6,], )

[torch error] paddle.reshape(Tensor([4, 570425345],"float32"), list[4,5,6,6,6,], ) 
 shape '[4, 5, 6, 6, 6]' is invalid for input of size 2281701380
2025-03-14 17:57:13.646738 test begin: paddle.reshape(Tensor([4, 570425345],"float32"), list[4,7,], )

[torch error] paddle.reshape(Tensor([4, 570425345],"float32"), list[4,7,], ) 
 shape '[4, 7]' is invalid for input of size 2281701380
2025-03-14 17:57:15.188892 test begin: paddle.reshape(Tensor([4, 570425345],"float32"), shape=list[-1,1,10,], )

[Pass] paddle.reshape(Tensor([4, 570425345],"float32"), shape=list[-1,1,10,], )
2025-03-14 18:00:34.857663 test begin: paddle.reshape(Tensor([4, 570425345],"float32"), shape=list[1,-1,10,], )

[Pass] paddle.reshape(Tensor([4, 570425345],"float32"), shape=list[1,-1,10,], )
2025-03-14 18:04:29.139375 test begin: paddle.reshape(Tensor([4, 570425345],"float32"), tuple(-1,7,), )

[Pass] paddle.reshape(Tensor([4, 570425345],"float32"), tuple(-1,7,), )
2025-03-14 18:08:13.320662 test begin: paddle.reshape(Tensor([4, 570425345],"float32"), tuple(2,4,), )

[torch error] paddle.reshape(Tensor([4, 570425345],"float32"), tuple(2,4,), ) 
 shape '[2, 4]' is invalid for input of size 2281701380
2025-03-14 18:08:17.177684 test begin: paddle.reshape(Tensor([4, 570425345],"float32"), tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([4, 570425345],"float32"), tuple(4,-1,), )
2025-03-14 18:11:33.587782 test begin: paddle.reshape(Tensor([4, 570425345],"int64"), tuple(-1,1,), )

[Pass] paddle.reshape(Tensor([4, 570425345],"int64"), tuple(-1,1,), )
2025-03-14 18:16:02.960948 test begin: paddle.reshape(Tensor([4, 57042535, 1, 10],"float32"), shape=list[-1,10,], )

[Pass] paddle.reshape(Tensor([4, 57042535, 1, 10],"float32"), shape=list[-1,10,], )
2025-03-14 18:19:50.625787 test begin: paddle.reshape(Tensor([4, 57042535, 1, 10],"float32"), shape=list[-1,3,10,], )

[torch error] paddle.reshape(Tensor([4, 57042535, 1, 10],"float32"), shape=list[-1,3,10,], ) 
 shape '[-1, 3, 10]' is invalid for input of size 2281701400
2025-03-14 18:19:54.460901 test begin: paddle.reshape(Tensor([4, 57042535, 10],"float32"), shape=list[-1,10,], )

[Pass] paddle.reshape(Tensor([4, 57042535, 10],"float32"), shape=list[-1,10,], )
2025-03-14 18:23:16.415215 test begin: paddle.reshape(Tensor([4, 57042535, 10],"float32"), shape=list[-1,3,10,], )

[torch error] paddle.reshape(Tensor([4, 57042535, 10],"float32"), shape=list[-1,3,10,], ) 
 shape '[-1, 3, 10]' is invalid for input of size 2281701400
2025-03-14 18:23:20.396497 test begin: paddle.reshape(Tensor([4, 570426, 1, 1000],"float32"), shape=list[-1,1000,], )

[Pass] paddle.reshape(Tensor([4, 570426, 1, 1000],"float32"), shape=list[-1,1000,], )
2025-03-14 18:27:26.747175 test begin: paddle.reshape(Tensor([4, 5721, 304, 328],"float32"), shape=list[-1,304,328,], )

[Pass] paddle.reshape(Tensor([4, 5721, 304, 328],"float32"), shape=list[-1,304,328,], )
2025-03-14 18:31:01.729831 test begin: paddle.reshape(Tensor([4, 5721, 328, 304],"float32"), shape=list[-1,328,304,], )

[Pass] paddle.reshape(Tensor([4, 5721, 328, 304],"float32"), shape=list[-1,328,304,], )
2025-03-14 18:34:40.185471 test begin: paddle.reshape(Tensor([4, 5721, 99712],"float32"), shape=tuple(-1,304,328,), )

[Pass] paddle.reshape(Tensor([4, 5721, 99712],"float32"), shape=tuple(-1,304,328,), )
2025-03-14 18:37:46.583095 test begin: paddle.reshape(Tensor([4, 5721, 99712],"float32"), shape=tuple(-1,328,304,), )

[Pass] paddle.reshape(Tensor([4, 5721, 99712],"float32"), shape=tuple(-1,328,304,), )
2025-03-14 18:41:40.059173 test begin: paddle.reshape(Tensor([4, 5736, 296, 336],"float32"), shape=list[-1,296,336,], )

[Pass] paddle.reshape(Tensor([4, 5736, 296, 336],"float32"), shape=list[-1,296,336,], )
2025-03-14 18:45:39.219798 test begin: paddle.reshape(Tensor([4, 5736, 99456],"float32"), shape=tuple(-1,296,336,), )

[Pass] paddle.reshape(Tensor([4, 5736, 99456],"float32"), shape=tuple(-1,296,336,), )
2025-03-14 18:49:24.273343 test begin: paddle.reshape(Tensor([4, 58, 29271, 336],"float32"), shape=list[-1,296,336,], )

[torch error] paddle.reshape(Tensor([4, 58, 29271, 336],"float32"), shape=list[-1,296,336,], ) 
 shape '[-1, 296, 336]' is invalid for input of size 2281732992
2025-03-14 18:49:28.451169 test begin: paddle.reshape(Tensor([4, 58, 296, 33227],"float32"), shape=list[-1,296,336,], )

[torch error] paddle.reshape(Tensor([4, 58, 296, 33227],"float32"), shape=list[-1,296,336,], ) 
 shape '[-1, 296, 336]' is invalid for input of size 2281764544
2025-03-14 18:49:29.688101 test begin: paddle.reshape(Tensor([4, 5820667, 7, 14],"float32"), list[4,4,14,7,], )

[torch error] paddle.reshape(Tensor([4, 5820667, 7, 14],"float32"), list[4,4,14,7,], ) 
 shape '[4, 4, 14, 7]' is invalid for input of size 2281701464
2025-03-14 18:49:30.802409 test begin: paddle.reshape(Tensor([4, 5864, 304, 320],"float32"), shape=list[-1,304,320,], )

[Pass] paddle.reshape(Tensor([4, 5864, 304, 320],"float32"), shape=list[-1,304,320,], )
2025-03-14 18:52:53.774136 test begin: paddle.reshape(Tensor([4, 5864, 320, 304],"float32"), shape=list[-1,320,304,], )

[Pass] paddle.reshape(Tensor([4, 5864, 320, 304],"float32"), shape=list[-1,320,304,], )
2025-03-14 18:56:08.305505 test begin: paddle.reshape(Tensor([4, 5864, 97280],"float32"), shape=tuple(-1,304,320,), )

[Pass] paddle.reshape(Tensor([4, 5864, 97280],"float32"), shape=tuple(-1,304,320,), )
2025-03-14 18:59:38.650908 test begin: paddle.reshape(Tensor([4, 5864, 97280],"float32"), shape=tuple(-1,320,304,), )

[Pass] paddle.reshape(Tensor([4, 5864, 97280],"float32"), shape=tuple(-1,320,304,), )
2025-03-14 19:02:46.891769 test begin: paddle.reshape(Tensor([4, 5876, 296, 328],"float32"), shape=list[-1,296,328,], )

[Pass] paddle.reshape(Tensor([4, 5876, 296, 328],"float32"), shape=list[-1,296,328,], )
2025-03-14 19:06:27.080836 test begin: paddle.reshape(Tensor([4, 5876, 328, 296],"float32"), shape=list[-1,328,296,], )

[Pass] paddle.reshape(Tensor([4, 5876, 328, 296],"float32"), shape=list[-1,328,296,], )
2025-03-14 19:10:09.968331 test begin: paddle.reshape(Tensor([4, 5876, 97088],"float32"), shape=tuple(-1,328,296,), )

[Pass] paddle.reshape(Tensor([4, 5876, 97088],"float32"), shape=tuple(-1,328,296,), )
2025-03-14 19:13:39.008111 test begin: paddle.reshape(Tensor([4, 5895, 288, 336],"float32"), shape=list[-1,288,336,], )

[Pass] paddle.reshape(Tensor([4, 5895, 288, 336],"float32"), shape=list[-1,288,336,], )
2025-03-14 19:17:03.104973 test begin: paddle.reshape(Tensor([4, 5895, 96768],"float32"), shape=tuple(-1,288,336,), )

[Pass] paddle.reshape(Tensor([4, 5895, 96768],"float32"), shape=tuple(-1,288,336,), )
2025-03-14 19:20:26.157641 test begin: paddle.reshape(Tensor([4, 594194, 12, 80],"float32"), shape=tuple(-1,80,), )

[Pass] paddle.reshape(Tensor([4, 594194, 12, 80],"float32"), shape=tuple(-1,80,), )
2025-03-14 19:24:17.262495 test begin: paddle.reshape(Tensor([4, 594194, 960],"float32"), shape=list[-1,], )

[Pass] paddle.reshape(Tensor([4, 594194, 960],"float32"), shape=list[-1,], )
2025-03-14 19:27:56.382246 test begin: paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,208,272,), )

[torch error] paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,208,272,), ) 
 shape '[-1, 208, 272]' is invalid for input of size 4294967304
2025-03-14 19:28:00.441568 test begin: paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,224,304,), )

[torch error] paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,224,304,), ) 
 shape '[-1, 224, 304]' is invalid for input of size 4294967304
2025-03-14 19:28:01.674551 test begin: paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,264,288,), )

[torch error] paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,264,288,), ) 
 shape '[-1, 264, 288]' is invalid for input of size 4294967304
2025-03-14 19:28:03.422339 test begin: paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,280,304,), )

[torch error] paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,280,304,), ) 
 shape '[-1, 280, 304]' is invalid for input of size 4294967304
2025-03-14 19:28:05.098757 test begin: paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,280,328,), )

[torch error] paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,280,328,), ) 
 shape '[-1, 280, 328]' is invalid for input of size 4294967304
2025-03-14 19:28:06.385493 test begin: paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,288,336,), )

[torch error] paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,288,336,), ) 
 shape '[-1, 288, 336]' is invalid for input of size 4294967304
2025-03-14 19:28:07.381045 test begin: paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,296,328,), )

[torch error] paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,296,328,), ) 
 shape '[-1, 296, 328]' is invalid for input of size 4294967304
2025-03-14 19:28:08.697456 test begin: paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,304,264,), )

[torch error] paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,304,264,), ) 
 shape '[-1, 304, 264]' is invalid for input of size 4294967304
2025-03-14 19:28:10.223488 test begin: paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,328,272,), )

[torch error] paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,328,272,), ) 
 shape '[-1, 328, 272]' is invalid for input of size 4294967304
2025-03-14 19:28:11.212228 test begin: paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,336,312,), )

[torch error] paddle.reshape(Tensor([4, 6, 178956971],"float16"), shape=tuple(-1,336,312,), ) 
 shape '[-1, 336, 312]' is invalid for input of size 4294967304
2025-03-14 19:28:12.186555 test begin: paddle.reshape(Tensor([4, 6, 208, 457072],"float32"), shape=list[-1,208,272,], )

[torch error] paddle.reshape(Tensor([4, 6, 208, 457072],"float32"), shape=list[-1,208,272,], ) 
 shape '[-1, 208, 272]' is invalid for input of size 2281703424
2025-03-14 19:28:16.356876 test begin: paddle.reshape(Tensor([4, 6, 224, 424424],"float32"), shape=list[-1,224,304,], )

[torch error] paddle.reshape(Tensor([4, 6, 224, 424424],"float32"), shape=list[-1,224,304,], ) 
 shape '[-1, 224, 304]' is invalid for input of size 2281703424
2025-03-14 19:28:18.820798 test begin: paddle.reshape(Tensor([4, 6, 232, 409789],"float32"), shape=list[-1,232,320,], )

[torch error] paddle.reshape(Tensor([4, 6, 232, 409789],"float32"), shape=list[-1,232,320,], ) 
 shape '[-1, 232, 320]' is invalid for input of size 2281705152
2025-03-14 19:28:20.593963 test begin: paddle.reshape(Tensor([4, 6, 264, 360118],"float32"), shape=list[-1,264,288,], )

[torch error] paddle.reshape(Tensor([4, 6, 264, 360118],"float32"), shape=list[-1,264,288,], ) 
 shape '[-1, 264, 288]' is invalid for input of size 2281707648
2025-03-14 19:28:22.011305 test begin: paddle.reshape(Tensor([4, 6, 264, 360118],"float32"), shape=list[-1,264,296,], )

[torch error] paddle.reshape(Tensor([4, 6, 264, 360118],"float32"), shape=list[-1,264,296,], ) 
 shape '[-1, 264, 296]' is invalid for input of size 2281707648
2025-03-14 19:28:23.716524 test begin: paddle.reshape(Tensor([4, 6, 280, 339539],"float32"), shape=list[-1,280,304,], )

[torch error] paddle.reshape(Tensor([4, 6, 280, 339539],"float32"), shape=list[-1,280,304,], ) 
 shape '[-1, 280, 304]' is invalid for input of size 2281702080
2025-03-14 19:28:25.065427 test begin: paddle.reshape(Tensor([4, 6, 280, 339539],"float32"), shape=list[-1,280,328,], )

[torch error] paddle.reshape(Tensor([4, 6, 280, 339539],"float32"), shape=list[-1,280,328,], ) 
 shape '[-1, 280, 328]' is invalid for input of size 2281702080
2025-03-14 19:28:26.571818 test begin: paddle.reshape(Tensor([4, 6, 282950, 336],"float32"), shape=list[-1,288,336,], )

[torch error] paddle.reshape(Tensor([4, 6, 282950, 336],"float32"), shape=list[-1,288,336,], ) 
 shape '[-1, 288, 336]' is invalid for input of size 2281708800
2025-03-14 19:28:27.969149 test begin: paddle.reshape(Tensor([4, 6, 288, 330108],"float32"), shape=list[-1,288,336,], )

[torch error] paddle.reshape(Tensor([4, 6, 288, 330108],"float32"), shape=list[-1,288,336,], ) 
 shape '[-1, 288, 336]' is invalid for input of size 2281706496
2025-03-14 19:28:30.063864 test begin: paddle.reshape(Tensor([4, 6, 289851, 328],"float32"), shape=list[-1,280,328,], )

[torch error] paddle.reshape(Tensor([4, 6, 289851, 328],"float32"), shape=list[-1,280,328,], ) 
 shape '[-1, 280, 328]' is invalid for input of size 2281707072
2025-03-14 19:28:31.707709 test begin: paddle.reshape(Tensor([4, 6, 289851, 328],"float32"), shape=list[-1,296,328,], )

[torch error] paddle.reshape(Tensor([4, 6, 289851, 328],"float32"), shape=list[-1,296,328,], ) 
 shape '[-1, 296, 328]' is invalid for input of size 2281707072
2025-03-14 19:28:33.117729 test begin: paddle.reshape(Tensor([4, 6, 296, 321186],"float32"), shape=list[-1,296,328,], )

[torch error] paddle.reshape(Tensor([4, 6, 296, 321186],"float32"), shape=list[-1,296,328,], ) 
 shape '[-1, 296, 328]' is invalid for input of size 2281705344
2025-03-14 19:28:34.988093 test begin: paddle.reshape(Tensor([4, 6, 297097, 320],"float32"), shape=list[-1,232,320,], )

[torch error] paddle.reshape(Tensor([4, 6, 297097, 320],"float32"), shape=list[-1,232,320,], ) 
 shape '[-1, 232, 320]' is invalid for input of size 2281704960
2025-03-14 19:28:36.597180 test begin: paddle.reshape(Tensor([4, 6, 304, 312734],"float32"), shape=list[-1,304,264,], )

[torch error] paddle.reshape(Tensor([4, 6, 304, 312734],"float32"), shape=list[-1,304,264,], ) 
 shape '[-1, 304, 264]' is invalid for input of size 2281707264
2025-03-14 19:28:38.412345 test begin: paddle.reshape(Tensor([4, 6, 304715, 312],"float32"), shape=list[-1,336,312,], )

[torch error] paddle.reshape(Tensor([4, 6, 304715, 312],"float32"), shape=list[-1,336,312,], ) 
 shape '[-1, 336, 312]' is invalid for input of size 2281705920
2025-03-14 19:28:39.798837 test begin: paddle.reshape(Tensor([4, 6, 312734, 304],"float32"), shape=list[-1,224,304,], )

[torch error] paddle.reshape(Tensor([4, 6, 312734, 304],"float32"), shape=list[-1,224,304,], ) 
 shape '[-1, 224, 304]' is invalid for input of size 2281707264
2025-03-14 19:28:41.807422 test begin: paddle.reshape(Tensor([4, 6, 312734, 304],"float32"), shape=list[-1,280,304,], )

[torch error] paddle.reshape(Tensor([4, 6, 312734, 304],"float32"), shape=list[-1,280,304,], ) 
 shape '[-1, 280, 304]' is invalid for input of size 2281707264
2025-03-14 19:28:43.729703 test begin: paddle.reshape(Tensor([4, 6, 321186, 296],"float32"), shape=list[-1,264,296,], )

[torch error] paddle.reshape(Tensor([4, 6, 321186, 296],"float32"), shape=list[-1,264,296,], ) 
 shape '[-1, 264, 296]' is invalid for input of size 2281705344
2025-03-14 19:28:45.672987 test begin: paddle.reshape(Tensor([4, 6, 321186, 296],"float32"), shape=list[-1,328,296,], )

[torch error] paddle.reshape(Tensor([4, 6, 321186, 296],"float32"), shape=list[-1,328,296,], ) 
 shape '[-1, 328, 296]' is invalid for input of size 2281705344
2025-03-14 19:28:47.367520 test begin: paddle.reshape(Tensor([4, 6, 328, 289851],"float32"), shape=list[-1,328,272,], )

[torch error] paddle.reshape(Tensor([4, 6, 328, 289851],"float32"), shape=list[-1,328,272,], ) 
 shape '[-1, 328, 272]' is invalid for input of size 2281707072
2025-03-14 19:28:48.768446 test begin: paddle.reshape(Tensor([4, 6, 328, 289851],"float32"), shape=list[-1,328,296,], )

[torch error] paddle.reshape(Tensor([4, 6, 328, 289851],"float32"), shape=list[-1,328,296,], ) 
 shape '[-1, 328, 296]' is invalid for input of size 2281707072
2025-03-14 19:28:50.468285 test begin: paddle.reshape(Tensor([4, 6, 330108, 288],"float32"), shape=list[-1,264,288,], )

[torch error] paddle.reshape(Tensor([4, 6, 330108, 288],"float32"), shape=list[-1,264,288,], ) 
 shape '[-1, 264, 288]' is invalid for input of size 2281706496
2025-03-14 19:28:51.486774 test begin: paddle.reshape(Tensor([4, 6, 336, 282950],"float32"), shape=list[-1,336,200,], )

[Pass] paddle.reshape(Tensor([4, 6, 336, 282950],"float32"), shape=list[-1,336,200,], )
2025-03-14 19:32:30.747412 test begin: paddle.reshape(Tensor([4, 6, 336, 282950],"float32"), shape=list[-1,336,312,], )

[torch error] paddle.reshape(Tensor([4, 6, 336, 282950],"float32"), shape=list[-1,336,312,], ) 
 shape '[-1, 336, 312]' is invalid for input of size 2281708800
2025-03-14 19:32:34.815925 test begin: paddle.reshape(Tensor([4, 6, 349526, 272],"float32"), shape=list[-1,208,272,], )

[torch error] paddle.reshape(Tensor([4, 6, 349526, 272],"float32"), shape=list[-1,208,272,], ) 
 shape '[-1, 208, 272]' is invalid for input of size 2281705728
2025-03-14 19:32:35.842397 test begin: paddle.reshape(Tensor([4, 6, 349526, 272],"float32"), shape=list[-1,328,272,], )

[torch error] paddle.reshape(Tensor([4, 6, 349526, 272],"float32"), shape=list[-1,328,272,], ) 
 shape '[-1, 328, 272]' is invalid for input of size 2281705728
2025-03-14 19:32:36.862234 test begin: paddle.reshape(Tensor([4, 6, 360118, 264],"float32"), shape=list[-1,304,264,], )

[torch error] paddle.reshape(Tensor([4, 6, 360118, 264],"float32"), shape=list[-1,304,264,], ) 
 shape '[-1, 304, 264]' is invalid for input of size 2281707648
2025-03-14 19:32:38.166578 test begin: paddle.reshape(Tensor([4, 6, 475355, 200],"float32"), shape=list[-1,336,200,], )

[torch error] paddle.reshape(Tensor([4, 6, 475355, 200],"float32"), shape=list[-1,336,200,], ) 
 shape '[-1, 336, 200]' is invalid for input of size 2281704000
2025-03-14 19:32:40.030440 test begin: paddle.reshape(Tensor([4, 6, 95070891],"float32"), shape=tuple(-1,280,304,), )

[torch error] paddle.reshape(Tensor([4, 6, 95070891],"float32"), shape=tuple(-1,280,304,), ) 
 shape '[-1, 280, 304]' is invalid for input of size 2281701384
2025-03-14 19:32:41.606013 test begin: paddle.reshape(Tensor([4, 6015, 304, 312],"float32"), shape=list[-1,304,312,], )

[Pass] paddle.reshape(Tensor([4, 6015, 304, 312],"float32"), shape=list[-1,304,312,], )
2025-03-14 19:35:57.348433 test begin: paddle.reshape(Tensor([4, 6015, 312, 304],"float32"), shape=list[-1,312,304,], )

[Pass] paddle.reshape(Tensor([4, 6015, 312, 304],"float32"), shape=list[-1,312,304,], )
2025-03-14 19:39:46.807479 test begin: paddle.reshape(Tensor([4, 6015, 94848],"float32"), shape=tuple(-1,304,312,), )

[Pass] paddle.reshape(Tensor([4, 6015, 94848],"float32"), shape=tuple(-1,304,312,), )
2025-03-14 19:43:29.734998 test begin: paddle.reshape(Tensor([4, 6015, 94848],"float32"), shape=tuple(-1,312,304,), )

[Pass] paddle.reshape(Tensor([4, 6015, 94848],"float32"), shape=tuple(-1,312,304,), )
2025-03-14 19:47:36.836706 test begin: paddle.reshape(Tensor([4, 6064, 280, 336],"float32"), shape=list[-1,280,336,], )

[Pass] paddle.reshape(Tensor([4, 6064, 280, 336],"float32"), shape=list[-1,280,336,], )
2025-03-14 19:51:24.916414 test begin: paddle.reshape(Tensor([4, 6064, 336, 280],"float32"), shape=list[-1,336,280,], )

[Pass] paddle.reshape(Tensor([4, 6064, 336, 280],"float32"), shape=list[-1,336,280,], )
2025-03-14 19:55:10.477770 test begin: paddle.reshape(Tensor([4, 6064, 94080],"float32"), shape=tuple(-1,280,336,), )

[Pass] paddle.reshape(Tensor([4, 6064, 94080],"float32"), shape=tuple(-1,280,336,), )
2025-03-14 19:58:58.437409 test begin: paddle.reshape(Tensor([4, 6173, 304, 304],"float32"), shape=list[-1,304,304,], )

[Pass] paddle.reshape(Tensor([4, 6173, 304, 304],"float32"), shape=list[-1,304,304,], )
2025-03-14 20:03:03.194270 test begin: paddle.reshape(Tensor([4, 6173, 92416],"float32"), shape=tuple(-1,304,304,), )

[Pass] paddle.reshape(Tensor([4, 6173, 92416],"float32"), shape=tuple(-1,304,304,), )
2025-03-14 20:06:41.173684 test begin: paddle.reshape(Tensor([4, 6177, 312, 296],"float32"), shape=list[-1,312,296,], )

[Pass] paddle.reshape(Tensor([4, 6177, 312, 296],"float32"), shape=list[-1,312,296,], )
2025-03-14 20:09:45.662666 test begin: paddle.reshape(Tensor([4, 6177, 92352],"float32"), shape=tuple(-1,312,296,), )

[Pass] paddle.reshape(Tensor([4, 6177, 92352],"float32"), shape=tuple(-1,312,296,), )
2025-03-14 20:13:43.351297 test begin: paddle.reshape(Tensor([4, 6212, 280, 328],"float32"), shape=list[-1,280,328,], )

[Pass] paddle.reshape(Tensor([4, 6212, 280, 328],"float32"), shape=list[-1,280,328,], )
2025-03-14 20:17:44.919090 test begin: paddle.reshape(Tensor([4, 6242, 272, 336],"float32"), shape=list[-1,272,336,], )

[Pass] paddle.reshape(Tensor([4, 6242, 272, 336],"float32"), shape=list[-1,272,336,], )
2025-03-14 20:20:38.190432 test begin: paddle.reshape(Tensor([4, 6242, 336, 272],"float32"), shape=list[-1,336,272,], )

[Pass] paddle.reshape(Tensor([4, 6242, 336, 272],"float32"), shape=list[-1,336,272,], )
2025-03-14 20:24:10.621828 test begin: paddle.reshape(Tensor([4, 6242, 91392],"float32"), shape=tuple(-1,272,336,), )

[Pass] paddle.reshape(Tensor([4, 6242, 91392],"float32"), shape=tuple(-1,272,336,), )
2025-03-14 20:27:00.801172 test begin: paddle.reshape(Tensor([4, 6242, 91392],"float32"), shape=tuple(-1,336,272,), )

[Pass] paddle.reshape(Tensor([4, 6242, 91392],"float32"), shape=tuple(-1,336,272,), )
2025-03-14 20:30:10.259929 test begin: paddle.reshape(Tensor([4, 6268411, 13, 7],"float32"), list[4,4,7,13,], )

[torch error] paddle.reshape(Tensor([4, 6268411, 13, 7],"float32"), list[4,4,7,13,], ) 
 shape '[4, 4, 7, 13]' is invalid for input of size 2281701604
2025-03-14 20:30:14.857096 test begin: paddle.reshape(Tensor([4, 6340, 296, 304],"float32"), shape=list[-1,296,304,], )

[Pass] paddle.reshape(Tensor([4, 6340, 296, 304],"float32"), shape=list[-1,296,304,], )
2025-03-14 20:32:45.788872 test begin: paddle.reshape(Tensor([4, 6340, 304, 296],"float32"), shape=list[-1,304,296,], )

[Pass] paddle.reshape(Tensor([4, 6340, 304, 296],"float32"), shape=list[-1,304,296,], )
2025-03-14 20:36:53.049282 test begin: paddle.reshape(Tensor([4, 6340, 89984],"float32"), shape=tuple(-1,296,304,), )

[Pass] paddle.reshape(Tensor([4, 6340, 89984],"float32"), shape=tuple(-1,296,304,), )
2025-03-14 20:40:22.719755 test begin: paddle.reshape(Tensor([4, 6340, 89984],"float32"), shape=tuple(-1,304,296,), )

[Pass] paddle.reshape(Tensor([4, 6340, 89984],"float32"), shape=tuple(-1,304,296,), )
2025-03-14 20:43:11.635406 test begin: paddle.reshape(Tensor([4, 6394, 272, 328],"float32"), shape=list[-1,272,328,], )

[Pass] paddle.reshape(Tensor([4, 6394, 272, 328],"float32"), shape=list[-1,272,328,], )
2025-03-14 20:46:02.975301 test begin: paddle.reshape(Tensor([4, 6394, 328, 272],"float32"), shape=list[-1,328,272,], )

[Pass] paddle.reshape(Tensor([4, 6394, 328, 272],"float32"), shape=list[-1,328,272,], )
2025-03-14 20:48:54.889899 test begin: paddle.reshape(Tensor([4, 6394, 89216],"float32"), shape=tuple(-1,272,328,), )

[Pass] paddle.reshape(Tensor([4, 6394, 89216],"float32"), shape=tuple(-1,272,328,), )
2025-03-14 20:51:52.787152 test begin: paddle.reshape(Tensor([4, 640, 891290],"float32"), shape=list[-1,], )

[Pass] paddle.reshape(Tensor([4, 640, 891290],"float32"), shape=list[-1,], )
2025-03-14 20:55:26.330136 test begin: paddle.reshape(Tensor([4, 6431, 264, 336],"float32"), shape=list[-1,264,336,], )

[Pass] paddle.reshape(Tensor([4, 6431, 264, 336],"float32"), shape=list[-1,264,336,], )
2025-03-14 20:58:28.441174 test begin: paddle.reshape(Tensor([4, 6431, 88704],"float32"), shape=tuple(-1,264,336,), )

[Pass] paddle.reshape(Tensor([4, 6431, 88704],"float32"), shape=tuple(-1,264,336,), )
2025-03-14 21:01:32.868849 test begin: paddle.reshape(Tensor([4, 6516, 288, 304],"float32"), shape=list[-1,288,304,], )

[Pass] paddle.reshape(Tensor([4, 6516, 288, 304],"float32"), shape=list[-1,288,304,], )
2025-03-14 21:04:52.384577 test begin: paddle.reshape(Tensor([4, 6516, 304, 288],"float32"), shape=list[-1,304,288,], )

[Pass] paddle.reshape(Tensor([4, 6516, 304, 288],"float32"), shape=list[-1,304,288,], )
2025-03-14 21:08:03.807083 test begin: paddle.reshape(Tensor([4, 6516, 87552],"float32"), shape=tuple(-1,288,304,), )

[Pass] paddle.reshape(Tensor([4, 6516, 87552],"float32"), shape=tuple(-1,288,304,), )
2025-03-14 21:10:37.918237 test begin: paddle.reshape(Tensor([4, 6516, 87552],"float32"), shape=tuple(-1,304,288,), )

[Pass] paddle.reshape(Tensor([4, 6516, 87552],"float32"), shape=tuple(-1,304,288,), )
2025-03-14 21:13:32.634090 test begin: paddle.reshape(Tensor([4, 6530, 280, 312],"float32"), shape=list[-1,280,312,], )

[Pass] paddle.reshape(Tensor([4, 6530, 280, 312],"float32"), shape=list[-1,280,312,], )
2025-03-14 21:16:46.668252 test begin: paddle.reshape(Tensor([4, 6530, 87360],"float32"), shape=tuple(-1,280,312,), )

[Pass] paddle.reshape(Tensor([4, 6530, 87360],"float32"), shape=tuple(-1,280,312,), )
2025-03-14 21:19:41.181536 test begin: paddle.reshape(Tensor([4, 6554, 272, 320],"float32"), shape=list[-1,272,320,], )

[Pass] paddle.reshape(Tensor([4, 6554, 272, 320],"float32"), shape=list[-1,272,320,], )
2025-03-14 21:22:52.787033 test begin: paddle.reshape(Tensor([4, 6554, 320, 272],"float32"), shape=list[-1,320,272,], )

[Pass] paddle.reshape(Tensor([4, 6554, 320, 272],"float32"), shape=list[-1,320,272,], )
2025-03-14 21:25:46.507884 test begin: paddle.reshape(Tensor([4, 6554, 87040],"float32"), shape=tuple(-1,272,320,), )

[Pass] paddle.reshape(Tensor([4, 6554, 87040],"float32"), shape=tuple(-1,272,320,), )
2025-03-14 21:28:41.775949 test begin: paddle.reshape(Tensor([4, 6554, 87040],"float32"), shape=tuple(-1,320,272,), )

[Pass] paddle.reshape(Tensor([4, 6554, 87040],"float32"), shape=tuple(-1,320,272,), )
2025-03-14 21:31:37.479692 test begin: paddle.reshape(Tensor([4, 6632, 256, 336],"float32"), shape=list[-1,256,336,], )

[Pass] paddle.reshape(Tensor([4, 6632, 256, 336],"float32"), shape=list[-1,256,336,], )
2025-03-14 21:34:31.014556 test begin: paddle.reshape(Tensor([4, 6632, 86016],"float32"), shape=tuple(-1,256,336,), )

[Pass] paddle.reshape(Tensor([4, 6632, 86016],"float32"), shape=tuple(-1,256,336,), )
2025-03-14 21:37:42.470405 test begin: paddle.reshape(Tensor([4, 6702, 280, 304],"float32"), shape=list[-1,280,304,], )

[Pass] paddle.reshape(Tensor([4, 6702, 280, 304],"float32"), shape=list[-1,280,304,], )
2025-03-14 21:40:23.689740 test begin: paddle.reshape(Tensor([4, 6702, 304, 280],"float32"), shape=list[-1,304,280,], )

[Pass] paddle.reshape(Tensor([4, 6702, 304, 280],"float32"), shape=list[-1,304,280,], )
2025-03-14 21:43:25.102929 test begin: paddle.reshape(Tensor([4, 6702, 85120],"float32"), shape=tuple(-1,280,304,), )

[Pass] paddle.reshape(Tensor([4, 6702, 85120],"float32"), shape=tuple(-1,280,304,), )
2025-03-14 21:46:15.667107 test begin: paddle.reshape(Tensor([4, 6702, 85120],"float32"), shape=tuple(-1,304,280,), )

[Pass] paddle.reshape(Tensor([4, 6702, 85120],"float32"), shape=tuple(-1,304,280,), )
2025-03-14 21:49:35.753377 test begin: paddle.reshape(Tensor([4, 6722, 272, 312],"float32"), shape=list[-1,272,312,], )

[Pass] paddle.reshape(Tensor([4, 6722, 272, 312],"float32"), shape=list[-1,272,312,], )
2025-03-14 21:52:33.504156 test begin: paddle.reshape(Tensor([4, 6722, 312, 272],"float32"), shape=list[-1,312,272,], )

[Pass] paddle.reshape(Tensor([4, 6722, 312, 272],"float32"), shape=list[-1,312,272,], )
2025-03-14 21:55:15.168633 test begin: paddle.reshape(Tensor([4, 6722, 84864],"float32"), shape=tuple(-1,272,312,), )

[Pass] paddle.reshape(Tensor([4, 6722, 84864],"float32"), shape=tuple(-1,272,312,), )
2025-03-14 21:57:48.581665 test begin: paddle.reshape(Tensor([4, 6722, 84864],"float32"), shape=tuple(-1,312,272,), )

[Pass] paddle.reshape(Tensor([4, 6722, 84864],"float32"), shape=tuple(-1,312,272,), )
2025-03-14 22:00:50.415669 test begin: paddle.reshape(Tensor([4, 6753, 264, 320],"float32"), shape=list[-1,264,320,], )

[Pass] paddle.reshape(Tensor([4, 6753, 264, 320],"float32"), shape=list[-1,264,320,], )
2025-03-14 22:03:58.915006 test begin: paddle.reshape(Tensor([4, 6753, 84480],"float32"), shape=tuple(-1,264,320,), )

[Pass] paddle.reshape(Tensor([4, 6753, 84480],"float32"), shape=tuple(-1,264,320,), )
2025-03-14 22:07:04.556986 test begin: paddle.reshape(Tensor([4, 68, 232, 36158],"float32"), shape=list[-1,232,320,], )

[torch error] paddle.reshape(Tensor([4, 68, 232, 36158],"float32"), shape=list[-1,232,320,], ) 
 shape '[-1, 232, 320]' is invalid for input of size 2281714432
2025-03-14 22:07:08.376525 test begin: paddle.reshape(Tensor([4, 68, 26215, 320],"float32"), shape=list[-1,232,320,], )

[torch error] paddle.reshape(Tensor([4, 68, 26215, 320],"float32"), shape=list[-1,232,320,], ) 
 shape '[-1, 232, 320]' is invalid for input of size 2281753600
2025-03-14 22:07:09.887860 test begin: paddle.reshape(Tensor([4, 6846, 248, 336],"float32"), shape=list[-1,248,336,], )

[Pass] paddle.reshape(Tensor([4, 6846, 248, 336],"float32"), shape=list[-1,248,336,], )
2025-03-14 22:10:23.393075 test begin: paddle.reshape(Tensor([4, 6846, 83328],"float32"), shape=tuple(-1,248,336,), )

[Pass] paddle.reshape(Tensor([4, 6846, 83328],"float32"), shape=tuple(-1,248,336,), )
2025-03-14 22:13:51.135821 test begin: paddle.reshape(Tensor([4, 6899, 272, 304],"float32"), shape=list[-1,272,304,], )

[Pass] paddle.reshape(Tensor([4, 6899, 272, 304],"float32"), shape=list[-1,272,304,], )
2025-03-14 22:16:52.734827 test begin: paddle.reshape(Tensor([4, 6899, 304, 272],"float32"), shape=list[-1,304,272,], )

[Pass] paddle.reshape(Tensor([4, 6899, 304, 272],"float32"), shape=list[-1,304,272,], )
2025-03-14 22:20:08.794661 test begin: paddle.reshape(Tensor([4, 6899, 82688],"float32"), shape=tuple(-1,272,304,), )

[Pass] paddle.reshape(Tensor([4, 6899, 82688],"float32"), shape=tuple(-1,272,304,), )
2025-03-14 22:23:00.868464 test begin: paddle.reshape(Tensor([4, 6899, 82688],"float32"), shape=tuple(-1,304,272,), )

[Pass] paddle.reshape(Tensor([4, 6899, 82688],"float32"), shape=tuple(-1,304,272,), )
2025-03-14 22:25:47.969414 test begin: paddle.reshape(Tensor([4, 699051, 128, 12],"float16"), shape=tuple(4,-1,4,), )

[Pass] paddle.reshape(Tensor([4, 699051, 128, 12],"float16"), shape=tuple(4,-1,4,), )
2025-03-14 22:42:21.756793 test begin: paddle.reshape(Tensor([4, 7, 153391690],"float16"), shape=tuple(-1,296,328,), )

[torch error] paddle.reshape(Tensor([4, 7, 153391690],"float16"), shape=tuple(-1,296,328,), ) 
 shape '[-1, 296, 328]' is invalid for input of size 4294967320
2025-03-14 22:42:26.324305 test begin: paddle.reshape(Tensor([4, 7, 242528, 336],"float32"), shape=list[-1,288,336,], )

[torch error] paddle.reshape(Tensor([4, 7, 242528, 336],"float32"), shape=list[-1,288,336,], ) 
 shape '[-1, 288, 336]' is invalid for input of size 2281703424
2025-03-14 22:42:30.556018 test begin: paddle.reshape(Tensor([4, 7, 248, 328587],"float32"), shape=list[-1,248,272,], )

[torch error] paddle.reshape(Tensor([4, 7, 248, 328587],"float32"), shape=list[-1,248,272,], ) 
 shape '[-1, 248, 272]' is invalid for input of size 2281708128
2025-03-14 22:42:32.134202 test begin: paddle.reshape(Tensor([4, 7, 248444, 328],"float32"), shape=list[-1,296,328,], )

[torch error] paddle.reshape(Tensor([4, 7, 248444, 328],"float32"), shape=list[-1,296,328,], ) 
 shape '[-1, 296, 328]' is invalid for input of size 2281709696
2025-03-14 22:42:33.905553 test begin: paddle.reshape(Tensor([4, 7, 288, 282950],"float32"), shape=list[-1,288,336,], )

[torch error] paddle.reshape(Tensor([4, 7, 288, 282950],"float32"), shape=list[-1,288,336,], ) 
 shape '[-1, 288, 336]' is invalid for input of size 2281708800
2025-03-14 22:42:35.705384 test begin: paddle.reshape(Tensor([4, 7, 296, 275302],"float32"), shape=list[-1,296,328,], )

[torch error] paddle.reshape(Tensor([4, 7, 296, 275302],"float32"), shape=list[-1,296,328,], ) 
 shape '[-1, 296, 328]' is invalid for input of size 2281702976
2025-03-14 22:42:37.565999 test begin: paddle.reshape(Tensor([4, 7, 299594, 272],"float32"), shape=list[-1,248,272,], )

[torch error] paddle.reshape(Tensor([4, 7, 299594, 272],"float32"), shape=list[-1,248,272,], ) 
 shape '[-1, 248, 272]' is invalid for input of size 2281707904
2025-03-14 22:42:39.446648 test begin: paddle.reshape(Tensor([4, 7085, 272, 296],"float32"), shape=list[-1,272,296,], )

[Pass] paddle.reshape(Tensor([4, 7085, 272, 296],"float32"), shape=list[-1,272,296,], )
2025-03-14 22:46:04.129985 test begin: paddle.reshape(Tensor([4, 7085, 296, 272],"float32"), shape=list[-1,296,272,], )

[Pass] paddle.reshape(Tensor([4, 7085, 296, 272],"float32"), shape=list[-1,296,272,], )
2025-03-14 22:49:14.944240 test begin: paddle.reshape(Tensor([4, 7085, 80512],"float32"), shape=tuple(-1,272,296,), )

[Pass] paddle.reshape(Tensor([4, 7085, 80512],"float32"), shape=tuple(-1,272,296,), )
2025-03-14 22:52:38.128531 test begin: paddle.reshape(Tensor([4, 7085, 80512],"float32"), shape=tuple(-1,296,272,), )

[Pass] paddle.reshape(Tensor([4, 7085, 80512],"float32"), shape=tuple(-1,296,272,), )
2025-03-14 22:56:12.314413 test begin: paddle.reshape(Tensor([4, 7108, 264, 304],"float32"), shape=list[-1,264,304,], )

[Pass] paddle.reshape(Tensor([4, 7108, 264, 304],"float32"), shape=list[-1,264,304,], )
2025-03-14 22:59:27.644697 test begin: paddle.reshape(Tensor([4, 7108, 304, 264],"float32"), shape=list[-1,304,264,], )

[Pass] paddle.reshape(Tensor([4, 7108, 304, 264],"float32"), shape=list[-1,304,264,], )
2025-03-14 23:02:29.533426 test begin: paddle.reshape(Tensor([4, 721601, 124, 12],"float16"), shape=tuple(4,-1,4,), )

[Pass] paddle.reshape(Tensor([4, 721601, 124, 12],"float16"), shape=tuple(4,-1,4,), )
2025-03-14 23:19:47.054929 test begin: paddle.reshape(Tensor([4, 7276, 280, 280],"float32"), shape=list[-1,280,280,], )

[Pass] paddle.reshape(Tensor([4, 7276, 280, 280],"float32"), shape=list[-1,280,280,], )
2025-03-14 23:23:42.378760 test begin: paddle.reshape(Tensor([4, 7276, 78400],"float32"), shape=tuple(-1,280,280,), )

[Pass] paddle.reshape(Tensor([4, 7276, 78400],"float32"), shape=tuple(-1,280,280,), )
2025-03-14 23:27:00.109620 test begin: paddle.reshape(Tensor([4, 7282, 288, 272],"float32"), shape=list[-1,288,272,], )

[Pass] paddle.reshape(Tensor([4, 7282, 288, 272],"float32"), shape=list[-1,288,272,], )
2025-03-14 23:30:22.773076 test begin: paddle.reshape(Tensor([4, 7282, 78336],"float32"), shape=tuple(-1,288,272,), )

[Pass] paddle.reshape(Tensor([4, 7282, 78336],"float32"), shape=tuple(-1,288,272,), )
2025-03-14 23:33:01.042704 test begin: paddle.reshape(Tensor([4, 7300, 264, 296],"float32"), shape=list[-1,264,296,], )

[Pass] paddle.reshape(Tensor([4, 7300, 264, 296],"float32"), shape=list[-1,264,296,], )
2025-03-14 23:36:21.506309 test begin: paddle.reshape(Tensor([4, 7300, 78144],"float32"), shape=tuple(-1,264,296,), )

[Pass] paddle.reshape(Tensor([4, 7300, 78144],"float32"), shape=tuple(-1,264,296,), )
2025-03-14 23:39:25.141805 test begin: paddle.reshape(Tensor([4, 7330, 256, 304],"float32"), shape=list[-1,256,304,], )

[Pass] paddle.reshape(Tensor([4, 7330, 256, 304],"float32"), shape=list[-1,256,304,], )
2025-03-14 23:42:22.867750 test begin: paddle.reshape(Tensor([4, 7330, 77824],"float32"), shape=tuple(-1,256,304,), )

[Pass] paddle.reshape(Tensor([4, 7330, 77824],"float32"), shape=tuple(-1,256,304,), )
2025-03-14 23:45:14.819570 test begin: paddle.reshape(Tensor([4, 7428, 512, 150],"float32"), list[-1,150,], )

[Pass] paddle.reshape(Tensor([4, 7428, 512, 150],"float32"), list[-1,150,], )
2025-03-14 23:48:20.508935 test begin: paddle.reshape(Tensor([4, 7456541, 12, 12],"float16"), shape=tuple(4,256,-1,), )

[torch error] paddle.reshape(Tensor([4, 7456541, 12, 12],"float16"), shape=tuple(4,256,-1,), ) 
 shape '[4, 256, -1]' is invalid for input of size 4294967616
2025-03-14 23:48:24.677956 test begin: paddle.reshape(Tensor([4, 745655, 120, 12],"float16"), shape=tuple(4,-1,4,), )

[Pass] paddle.reshape(Tensor([4, 745655, 120, 12],"float16"), shape=tuple(4,-1,4,), )
2025-03-15 00:04:24.086851 test begin: paddle.reshape(Tensor([4, 7490, 272, 280],"float32"), shape=list[-1,272,280,], )

[Pass] paddle.reshape(Tensor([4, 7490, 272, 280],"float32"), shape=list[-1,272,280,], )
2025-03-15 00:07:25.072688 test begin: paddle.reshape(Tensor([4, 7490, 280, 272],"float32"), shape=list[-1,280,272,], )

[Pass] paddle.reshape(Tensor([4, 7490, 280, 272],"float32"), shape=list[-1,280,272,], )
2025-03-15 00:10:42.225038 test begin: paddle.reshape(Tensor([4, 7490, 76160],"float32"), shape=tuple(-1,272,280,), )

[Pass] paddle.reshape(Tensor([4, 7490, 76160],"float32"), shape=tuple(-1,272,280,), )
2025-03-15 00:13:50.231116 test begin: paddle.reshape(Tensor([4, 7490, 76160],"float32"), shape=tuple(-1,280,272,), )

[Pass] paddle.reshape(Tensor([4, 7490, 76160],"float32"), shape=tuple(-1,280,272,), )
2025-03-15 00:17:11.832358 test begin: paddle.reshape(Tensor([4, 7503, 264, 288],"float32"), shape=list[-1,264,288,], )

[Pass] paddle.reshape(Tensor([4, 7503, 264, 288],"float32"), shape=list[-1,264,288,], )
2025-03-15 00:20:31.064427 test begin: paddle.reshape(Tensor([4, 7567, 248, 304],"float32"), shape=list[-1,248,304,], )

[Pass] paddle.reshape(Tensor([4, 7567, 248, 304],"float32"), shape=list[-1,248,304,], )
2025-03-15 00:23:32.197992 test begin: paddle.reshape(Tensor([4, 7567, 75392],"float32"), shape=tuple(-1,248,304,), )

[Pass] paddle.reshape(Tensor([4, 7567, 75392],"float32"), shape=tuple(-1,248,304,), )
2025-03-15 00:26:47.416389 test begin: paddle.reshape(Tensor([4, 7684, 232, 320],"float32"), shape=list[-1,232,320,], )

[Pass] paddle.reshape(Tensor([4, 7684, 232, 320],"float32"), shape=list[-1,232,320,], )
2025-03-15 00:29:42.014278 test begin: paddle.reshape(Tensor([4, 7684, 74240],"float32"), shape=tuple(-1,232,320,), )

[Pass] paddle.reshape(Tensor([4, 7684, 74240],"float32"), shape=tuple(-1,232,320,), )
2025-03-15 00:32:36.831044 test begin: paddle.reshape(Tensor([4, 7711, 272, 272],"float32"), shape=list[-1,272,272,], )

[Pass] paddle.reshape(Tensor([4, 7711, 272, 272],"float32"), shape=list[-1,272,272,], )
2025-03-15 00:35:24.249669 test begin: paddle.reshape(Tensor([4, 7711, 73984],"float32"), shape=tuple(-1,272,272,), )

[Pass] paddle.reshape(Tensor([4, 7711, 73984],"float32"), shape=tuple(-1,272,272,), )
2025-03-15 00:38:54.927177 test begin: paddle.reshape(Tensor([4, 7819, 240, 304],"float32"), shape=list[-1,240,304,], )

[Pass] paddle.reshape(Tensor([4, 7819, 240, 304],"float32"), shape=list[-1,240,304,], )
2025-03-15 00:42:10.109909 test begin: paddle.reshape(Tensor([4, 7819, 72960],"float32"), shape=tuple(-1,240,304,), )

[Pass] paddle.reshape(Tensor([4, 7819, 72960],"float32"), shape=tuple(-1,240,304,), )
2025-03-15 00:44:56.424648 test begin: paddle.reshape(Tensor([4, 8, 134217729],"float16"), shape=tuple(-1,224,304,), )

[torch error] paddle.reshape(Tensor([4, 8, 134217729],"float16"), shape=tuple(-1,224,304,), ) 
 shape '[-1, 224, 304]' is invalid for input of size 4294967328
2025-03-15 00:45:00.802485 test begin: paddle.reshape(Tensor([4, 8, 134217729],"float16"), shape=tuple(-1,280,304,), )

[torch error] paddle.reshape(Tensor([4, 8, 134217729],"float16"), shape=tuple(-1,280,304,), ) 
 shape '[-1, 280, 304]' is invalid for input of size 4294967328
2025-03-15 00:45:02.572186 test begin: paddle.reshape(Tensor([4, 8, 134217729],"float16"), shape=tuple(-1,296,328,), )

[torch error] paddle.reshape(Tensor([4, 8, 134217729],"float16"), shape=tuple(-1,296,328,), ) 
 shape '[-1, 296, 328]' is invalid for input of size 4294967328
2025-03-15 00:45:04.348632 test begin: paddle.reshape(Tensor([4, 8, 134217729],"float16"), shape=tuple(-1,320,272,), )

[torch error] paddle.reshape(Tensor([4, 8, 134217729],"float16"), shape=tuple(-1,320,272,), ) 
 shape '[-1, 320, 272]' is invalid for input of size 4294967328
2025-03-15 00:45:05.926986 test begin: paddle.reshape(Tensor([4, 8, 134217729],"float16"), shape=tuple(-1,336,320,), )

[torch error] paddle.reshape(Tensor([4, 8, 134217729],"float16"), shape=tuple(-1,336,320,), ) 
 shape '[-1, 336, 320]' is invalid for input of size 4294967328
2025-03-15 00:45:07.324018 test begin: paddle.reshape(Tensor([4, 8, 217388, 328],"float32"), shape=list[-1,296,328,], )

[torch error] paddle.reshape(Tensor([4, 8, 217388, 328],"float32"), shape=list[-1,296,328,], ) 
 shape '[-1, 296, 328]' is invalid for input of size 2281704448
2025-03-15 00:45:11.708706 test begin: paddle.reshape(Tensor([4, 8, 222823, 320],"float32"), shape=list[-1,320,320,], )

[torch error] paddle.reshape(Tensor([4, 8, 222823, 320],"float32"), shape=list[-1,320,320,], ) 
 shape '[-1, 320, 320]' is invalid for input of size 2281707520
2025-03-15 00:45:13.406589 test begin: paddle.reshape(Tensor([4, 8, 222823, 320],"float32"), shape=list[-1,336,320,], )

[torch error] paddle.reshape(Tensor([4, 8, 222823, 320],"float32"), shape=list[-1,336,320,], ) 
 shape '[-1, 336, 320]' is invalid for input of size 2281707520
2025-03-15 00:45:15.173200 test begin: paddle.reshape(Tensor([4, 8, 224, 318318],"float32"), shape=list[-1,224,304,], )

[torch error] paddle.reshape(Tensor([4, 8, 224, 318318],"float32"), shape=list[-1,224,304,], ) 
 shape '[-1, 224, 304]' is invalid for input of size 2281703424
2025-03-15 00:45:16.962839 test begin: paddle.reshape(Tensor([4, 8, 228536, 312],"float32"), shape=list[-1,336,312,], )

[torch error] paddle.reshape(Tensor([4, 8, 228536, 312],"float32"), shape=list[-1,336,312,], ) 
 shape '[-1, 336, 312]' is invalid for input of size 2281703424
2025-03-15 00:45:18.818471 test begin: paddle.reshape(Tensor([4, 8, 234550, 304],"float32"), shape=list[-1,224,304,], )

[torch error] paddle.reshape(Tensor([4, 8, 234550, 304],"float32"), shape=list[-1,224,304,], ) 
 shape '[-1, 224, 304]' is invalid for input of size 2281702400
2025-03-15 00:45:20.434722 test begin: paddle.reshape(Tensor([4, 8, 234550, 304],"float32"), shape=list[-1,280,304,], )

[torch error] paddle.reshape(Tensor([4, 8, 234550, 304],"float32"), shape=list[-1,280,304,], ) 
 shape '[-1, 280, 304]' is invalid for input of size 2281702400
2025-03-15 00:45:21.895885 test begin: paddle.reshape(Tensor([4, 8, 262145, 272],"float32"), shape=list[-1,320,272,], )

[torch error] paddle.reshape(Tensor([4, 8, 262145, 272],"float32"), shape=list[-1,320,272,], ) 
 shape '[-1, 320, 272]' is invalid for input of size 2281710080
2025-03-15 00:45:23.732700 test begin: paddle.reshape(Tensor([4, 8, 280, 254655],"float32"), shape=list[-1,280,304,], )

[torch error] paddle.reshape(Tensor([4, 8, 280, 254655],"float32"), shape=list[-1,280,304,], ) 
 shape '[-1, 280, 304]' is invalid for input of size 2281708800
2025-03-15 00:45:26.299424 test begin: paddle.reshape(Tensor([4, 8, 296, 240890],"float32"), shape=list[-1,296,328,], )

[torch error] paddle.reshape(Tensor([4, 8, 296, 240890],"float32"), shape=list[-1,296,328,], ) 
 shape '[-1, 296, 328]' is invalid for input of size 2281710080
2025-03-15 00:45:28.298507 test begin: paddle.reshape(Tensor([4, 8, 320, 222823],"float32"), shape=list[-1,320,272,], )

[torch error] paddle.reshape(Tensor([4, 8, 320, 222823],"float32"), shape=list[-1,320,272,], ) 
 shape '[-1, 320, 272]' is invalid for input of size 2281707520
2025-03-15 00:45:30.151894 test begin: paddle.reshape(Tensor([4, 8, 320, 222823],"float32"), shape=list[-1,320,320,], )

[torch error] paddle.reshape(Tensor([4, 8, 320, 222823],"float32"), shape=list[-1,320,320,], ) 
 shape '[-1, 320, 320]' is invalid for input of size 2281707520
2025-03-15 00:45:32.008616 test begin: paddle.reshape(Tensor([4, 8, 336, 212212],"float32"), shape=list[-1,336,312,], )

[torch error] paddle.reshape(Tensor([4, 8, 336, 212212],"float32"), shape=list[-1,336,312,], ) 
 shape '[-1, 336, 312]' is invalid for input of size 2281703424
2025-03-15 00:45:33.936973 test begin: paddle.reshape(Tensor([4, 8, 336, 212212],"float32"), shape=list[-1,336,320,], )

[torch error] paddle.reshape(Tensor([4, 8, 336, 212212],"float32"), shape=list[-1,336,320,], ) 
 shape '[-1, 336, 320]' is invalid for input of size 2281703424
2025-03-15 00:45:35.893818 test begin: paddle.reshape(Tensor([4, 8, 71303169],"float32"), list[-1,256,], )

[torch error] paddle.reshape(Tensor([4, 8, 71303169],"float32"), list[-1,256,], ) 
 shape '[-1, 256]' is invalid for input of size 2281701408
2025-03-15 00:45:37.803330 test begin: paddle.reshape(Tensor([4, 8, 71303169],"float32"), shape=list[-1,32,], )

[Pass] paddle.reshape(Tensor([4, 8, 71303169],"float32"), shape=list[-1,32,], )
2025-03-15 00:48:52.444184 test begin: paddle.reshape(Tensor([4, 8088, 232, 304],"float32"), shape=list[-1,232,304,], )

[Pass] paddle.reshape(Tensor([4, 8088, 232, 304],"float32"), shape=list[-1,232,304,], )
2025-03-15 00:51:57.081001 test begin: paddle.reshape(Tensor([4, 8088, 70528],"float32"), shape=tuple(-1,232,304,), )

[Pass] paddle.reshape(Tensor([4, 8088, 70528],"float32"), shape=tuple(-1,232,304,), )
2025-03-15 00:55:01.072571 test begin: paddle.reshape(Tensor([4, 8162, 208, 336],"float32"), shape=list[-1,208,336,], )

[Pass] paddle.reshape(Tensor([4, 8162, 208, 336],"float32"), shape=list[-1,208,336,], )
2025-03-15 00:58:39.259228 test begin: paddle.reshape(Tensor([4, 8162, 69888],"float32"), shape=tuple(-1,208,336,), )

[Pass] paddle.reshape(Tensor([4, 8162, 69888],"float32"), shape=tuple(-1,208,336,), )
2025-03-15 01:02:12.125254 test begin: paddle.reshape(Tensor([4, 8193, 256, 272],"float32"), shape=list[-1,256,272,], )

[Pass] paddle.reshape(Tensor([4, 8193, 256, 272],"float32"), shape=list[-1,256,272,], )
2025-03-15 01:05:13.293331 test begin: paddle.reshape(Tensor([4, 8193, 69632],"float32"), shape=tuple(-1,256,272,), )

[Pass] paddle.reshape(Tensor([4, 8193, 69632],"float32"), shape=tuple(-1,256,272,), )
2025-03-15 01:08:24.938588 test begin: paddle.reshape(Tensor([4, 8362, 208, 328],"float32"), shape=list[-1,208,328,], )

[Pass] paddle.reshape(Tensor([4, 8362, 208, 328],"float32"), shape=list[-1,208,328,], )
2025-03-15 01:11:34.499602 test begin: paddle.reshape(Tensor([4, 8377, 224, 304],"float32"), shape=list[-1,224,304,], )

[Pass] paddle.reshape(Tensor([4, 8377, 224, 304],"float32"), shape=list[-1,224,304,], )
2025-03-15 01:14:10.831395 test begin: paddle.reshape(Tensor([4, 838861, 16, 80],"float16"), shape=tuple(-1,80,), )

[Pass] paddle.reshape(Tensor([4, 838861, 16, 80],"float16"), shape=tuple(-1,80,), )
2025-03-15 01:30:49.089471 test begin: paddle.reshape(Tensor([4, 8457, 248, 272],"float32"), shape=list[-1,248,272,], )

[Pass] paddle.reshape(Tensor([4, 8457, 248, 272],"float32"), shape=list[-1,248,272,], )
2025-03-15 01:34:03.446332 test begin: paddle.reshape(Tensor([4, 8457, 67456],"float32"), shape=tuple(-1,248,272,), )

[Pass] paddle.reshape(Tensor([4, 8457, 67456],"float32"), shape=tuple(-1,248,272,), )
2025-03-15 01:37:03.681205 test begin: paddle.reshape(Tensor([4, 8465, 216, 312],"float32"), shape=list[-1,216,312,], )

[Pass] paddle.reshape(Tensor([4, 8465, 216, 312],"float32"), shape=list[-1,216,312,], )
2025-03-15 01:39:58.342935 test begin: paddle.reshape(Tensor([4, 8489, 200, 336],"float32"), shape=list[-1,200,336,], )

[Pass] paddle.reshape(Tensor([4, 8489, 200, 336],"float32"), shape=list[-1,200,336,], )
2025-03-15 01:43:02.694717 test begin: paddle.reshape(Tensor([4, 8489, 336, 200],"float32"), shape=list[-1,336,200,], )

[Pass] paddle.reshape(Tensor([4, 8489, 336, 200],"float32"), shape=list[-1,336,200,], )
2025-03-15 01:45:57.064143 test begin: paddle.reshape(Tensor([4, 8489, 67200],"float32"), shape=tuple(-1,200,336,), )

[Pass] paddle.reshape(Tensor([4, 8489, 67200],"float32"), shape=tuple(-1,200,336,), )
2025-03-15 01:48:41.346993 test begin: paddle.reshape(Tensor([4, 8489, 67200],"float32"), shape=tuple(-1,336,200,), )

[Pass] paddle.reshape(Tensor([4, 8489, 67200],"float32"), shape=tuple(-1,336,200,), )
2025-03-15 01:51:56.372324 test begin: paddle.reshape(Tensor([4, 8688, 216, 304],"float32"), shape=list[-1,216,304,], )

[Pass] paddle.reshape(Tensor([4, 8688, 216, 304],"float32"), shape=list[-1,216,304,], )
2025-03-15 01:55:20.954923 test begin: paddle.reshape(Tensor([4, 8688, 304, 216],"float32"), shape=list[-1,304,216,], )

[Pass] paddle.reshape(Tensor([4, 8688, 304, 216],"float32"), shape=list[-1,304,216,], )
2025-03-15 01:58:23.382986 test begin: paddle.reshape(Tensor([4, 8688, 65664],"float32"), shape=tuple(-1,216,304,), )

[Pass] paddle.reshape(Tensor([4, 8688, 65664],"float32"), shape=tuple(-1,216,304,), )
2025-03-15 02:01:37.443062 test begin: paddle.reshape(Tensor([4, 8696, 200, 328],"float32"), shape=list[-1,200,328,], )

[Pass] paddle.reshape(Tensor([4, 8696, 200, 328],"float32"), shape=list[-1,200,328,], )
2025-03-15 02:04:50.229220 test begin: paddle.reshape(Tensor([4, 8696, 328, 200],"float32"), shape=list[-1,328,200,], )

[Pass] paddle.reshape(Tensor([4, 8696, 328, 200],"float32"), shape=list[-1,328,200,], )
2025-03-15 02:07:59.126168 test begin: paddle.reshape(Tensor([4, 8696, 65600],"float32"), shape=tuple(-1,200,328,), )

[Pass] paddle.reshape(Tensor([4, 8696, 65600],"float32"), shape=tuple(-1,200,328,), )
2025-03-15 02:10:59.112650 test begin: paddle.reshape(Tensor([4, 891290, 640],"float32"), shape=list[-1,], )

[Pass] paddle.reshape(Tensor([4, 891290, 640],"float32"), shape=list[-1,], )
2025-03-15 02:13:32.035585 test begin: paddle.reshape(Tensor([4, 8913, 200, 320],"float32"), shape=list[-1,200,320,], )

[Pass] paddle.reshape(Tensor([4, 8913, 200, 320],"float32"), shape=list[-1,200,320,], )
2025-03-15 02:16:31.409744 test begin: paddle.reshape(Tensor([4, 8913, 64000],"float32"), shape=tuple(-1,200,320,), )

[Pass] paddle.reshape(Tensor([4, 8913, 64000],"float32"), shape=tuple(-1,200,320,), )
2025-03-15 02:19:30.311348 test begin: paddle.reshape(Tensor([4, 8922, 216, 296],"float32"), shape=list[-1,216,296,], )

[Pass] paddle.reshape(Tensor([4, 8922, 216, 296],"float32"), shape=list[-1,216,296,], )
2025-03-15 02:23:16.140230 test begin: paddle.reshape(Tensor([4, 8922, 63936],"float32"), shape=tuple(-1,216,296,), )

[Pass] paddle.reshape(Tensor([4, 8922, 63936],"float32"), shape=tuple(-1,216,296,), )
2025-03-15 02:26:11.599695 test begin: paddle.reshape(Tensor([4, 9, 119304648],"float16"), shape=tuple(-1,328,272,), )

[torch error] paddle.reshape(Tensor([4, 9, 119304648],"float16"), shape=tuple(-1,328,272,), ) 
 shape '[-1, 328, 272]' is invalid for input of size 4294967328
2025-03-15 02:26:15.699318 test begin: paddle.reshape(Tensor([4, 9, 198065, 320],"float32"), shape=list[-1,264,320,], )

[torch error] paddle.reshape(Tensor([4, 9, 198065, 320],"float32"), shape=list[-1,264,320,], ) 
 shape '[-1, 264, 320]' is invalid for input of size 2281708800
2025-03-15 02:26:19.374613 test begin: paddle.reshape(Tensor([4, 9, 200, 316903],"float32"), shape=list[-1,200,280,], )

[torch error] paddle.reshape(Tensor([4, 9, 200, 316903],"float32"), shape=list[-1,200,280,], ) 
 shape '[-1, 200, 280]' is invalid for input of size 2281701600
2025-03-15 02:26:22.040180 test begin: paddle.reshape(Tensor([4, 9, 203143, 312],"float32"), shape=list[-1,280,312,], )

[torch error] paddle.reshape(Tensor([4, 9, 203143, 312],"float32"), shape=list[-1,280,312,], ) 
 shape '[-1, 280, 312]' is invalid for input of size 2281702176
2025-03-15 02:26:23.917492 test begin: paddle.reshape(Tensor([4, 9, 226360, 280],"float32"), shape=list[-1,200,280,], )

[torch error] paddle.reshape(Tensor([4, 9, 226360, 280],"float32"), shape=list[-1,200,280,], ) 
 shape '[-1, 200, 280]' is invalid for input of size 2281708800
2025-03-15 02:26:25.528709 test begin: paddle.reshape(Tensor([4, 9, 233017, 272],"float32"), shape=list[-1,296,272,], )

[torch error] paddle.reshape(Tensor([4, 9, 233017, 272],"float32"), shape=list[-1,296,272,], ) 
 shape '[-1, 296, 272]' is invalid for input of size 2281702464
2025-03-15 02:26:26.891641 test begin: paddle.reshape(Tensor([4, 9, 233017, 272],"float32"), shape=list[-1,328,272,], )

[torch error] paddle.reshape(Tensor([4, 9, 233017, 272],"float32"), shape=list[-1,328,272,], ) 
 shape '[-1, 328, 272]' is invalid for input of size 2281702464
2025-03-15 02:26:29.413752 test begin: paddle.reshape(Tensor([4, 9, 264, 240079],"float32"), shape=list[-1,264,320,], )

[torch error] paddle.reshape(Tensor([4, 9, 264, 240079],"float32"), shape=list[-1,264,320,], ) 
 shape '[-1, 264, 320]' is invalid for input of size 2281710816
2025-03-15 02:26:31.930915 test begin: paddle.reshape(Tensor([4, 9, 272, 233017],"float32"), shape=list[-1,272,216,], )

[torch error] paddle.reshape(Tensor([4, 9, 272, 233017],"float32"), shape=list[-1,272,216,], ) 
 shape '[-1, 272, 216]' is invalid for input of size 2281702464
2025-03-15 02:26:33.568577 test begin: paddle.reshape(Tensor([4, 9, 280, 226360],"float32"), shape=list[-1,280,312,], )

[torch error] paddle.reshape(Tensor([4, 9, 280, 226360],"float32"), shape=list[-1,280,312,], ) 
 shape '[-1, 280, 312]' is invalid for input of size 2281708800
2025-03-15 02:26:34.904932 test begin: paddle.reshape(Tensor([4, 9, 293429, 216],"float32"), shape=list[-1,272,216,], )

[torch error] paddle.reshape(Tensor([4, 9, 293429, 216],"float32"), shape=list[-1,272,216,], ) 
 shape '[-1, 272, 216]' is invalid for input of size 2281703904
2025-03-15 02:26:36.806323 test begin: paddle.reshape(Tensor([4, 9, 296, 214124],"float32"), shape=list[-1,296,272,], )

[torch error] paddle.reshape(Tensor([4, 9, 296, 214124],"float32"), shape=list[-1,296,272,], ) 
 shape '[-1, 296, 272]' is invalid for input of size 2281705344
2025-03-15 02:26:38.704303 test begin: paddle.reshape(Tensor([4, 9, 328, 193234],"float32"), shape=list[-1,328,272,], )

[torch error] paddle.reshape(Tensor([4, 9, 328, 193234],"float32"), shape=list[-1,328,272,], ) 
 shape '[-1, 328, 272]' is invalid for input of size 2281707072
2025-03-15 02:26:40.627299 test begin: paddle.reshape(Tensor([4, 9022, 208, 304],"float32"), shape=list[-1,208,304,], )

[Pass] paddle.reshape(Tensor([4, 9022, 208, 304],"float32"), shape=list[-1,208,304,], )
2025-03-15 02:29:33.924017 test begin: paddle.reshape(Tensor([4, 9022, 63232],"float32"), shape=tuple(-1,208,304,), )

[Pass] paddle.reshape(Tensor([4, 9022, 63232],"float32"), shape=tuple(-1,208,304,), )
2025-03-15 02:32:12.567306 test begin: paddle.reshape(Tensor([4, 9142, 200, 312],"float32"), shape=list[-1,200,312,], )

[Pass] paddle.reshape(Tensor([4, 9142, 200, 312],"float32"), shape=list[-1,200,312,], )
2025-03-15 02:35:22.379894 test begin: paddle.reshape(Tensor([4, 9142, 62400],"float32"), shape=tuple(-1,200,312,), )

[Pass] paddle.reshape(Tensor([4, 9142, 62400],"float32"), shape=tuple(-1,200,312,), )
2025-03-15 02:38:49.343795 test begin: paddle.reshape(Tensor([4, 9382, 200, 304],"float32"), shape=list[-1,200,304,], )

[Pass] paddle.reshape(Tensor([4, 9382, 200, 304],"float32"), shape=list[-1,200,304,], )
2025-03-15 02:41:33.774774 test begin: paddle.reshape(Tensor([4, 9382, 304, 200],"float32"), shape=list[-1,304,200,], )

[Pass] paddle.reshape(Tensor([4, 9382, 304, 200],"float32"), shape=list[-1,304,200,], )
2025-03-15 02:44:47.202121 test begin: paddle.reshape(Tensor([4, 9382, 60800],"float32"), shape=tuple(-1,200,304,), )

[Pass] paddle.reshape(Tensor([4, 9382, 60800],"float32"), shape=tuple(-1,200,304,), )
2025-03-15 02:48:14.402373 test begin: paddle.reshape(Tensor([4, 9382, 60800],"float32"), shape=tuple(-1,304,200,), )

[Pass] paddle.reshape(Tensor([4, 9382, 60800],"float32"), shape=tuple(-1,304,200,), )
2025-03-15 02:51:00.052227 test begin: paddle.reshape(Tensor([4, 9511, 112896],"float16"), shape=tuple(-1,336,336,), )

[Pass] paddle.reshape(Tensor([4, 9511, 112896],"float16"), shape=tuple(-1,336,336,), )
2025-03-15 03:07:50.374550 test begin: paddle.reshape(Tensor([4, 96, 30948, 192],"float32"), list[4,96,96,192,], )

[torch error] paddle.reshape(Tensor([4, 96, 30948, 192],"float32"), list[4,96,96,192,], ) 
 shape '[4, 96, 96, 192]' is invalid for input of size 2281734144
2025-03-15 03:07:54.440688 test begin: paddle.reshape(Tensor([4, 96, 46422, 128],"float32"), list[4,96,96,128,], )

[torch error] paddle.reshape(Tensor([4, 96, 46422, 128],"float32"), list[4,96,96,128,], ) 
 shape '[4, 96, 96, 128]' is invalid for input of size 2281734144
2025-03-15 03:07:56.386258 test begin: paddle.reshape(Tensor([4, 96, 96, 61896],"float32"), list[4,96,96,128,], )

[torch error] paddle.reshape(Tensor([4, 96, 96, 61896],"float32"), list[4,96,96,128,], ) 
 shape '[4, 96, 96, 128]' is invalid for input of size 2281734144
2025-03-15 03:07:58.272714 test begin: paddle.reshape(Tensor([4, 96, 96, 61896],"float32"), list[4,96,96,192,], )

[torch error] paddle.reshape(Tensor([4, 96, 96, 61896],"float32"), list[4,96,96,192,], ) 
 shape '[4, 96, 96, 192]' is invalid for input of size 2281734144
2025-03-15 03:07:59.889148 test begin: paddle.reshape(Tensor([4, 960, 594194],"float32"), shape=list[-1,], )

[Pass] paddle.reshape(Tensor([4, 960, 594194],"float32"), shape=list[-1,], )
2025-03-15 03:11:54.785205 test begin: paddle.reshape(Tensor([4, 9636, 200, 296],"float32"), shape=list[-1,200,296,], )

[Pass] paddle.reshape(Tensor([4, 9636, 200, 296],"float32"), shape=list[-1,200,296,], )
2025-03-15 03:15:09.768973 test begin: paddle.reshape(Tensor([4, 9636, 59200],"float32"), shape=tuple(-1,200,296,), )

[Pass] paddle.reshape(Tensor([4, 9636, 59200],"float32"), shape=tuple(-1,200,296,), )
2025-03-15 03:18:53.197171 test begin: paddle.reshape(Tensor([4, 9710, 272, 216],"float32"), shape=list[-1,272,216,], )

[Pass] paddle.reshape(Tensor([4, 9710, 272, 216],"float32"), shape=list[-1,272,216,], )
2025-03-15 03:22:18.462320 test begin: paddle.reshape(Tensor([4, 9710, 58752],"float32"), shape=tuple(-1,272,216,), )

[Pass] paddle.reshape(Tensor([4, 9710, 58752],"float32"), shape=tuple(-1,272,216,), )
2025-03-15 03:25:21.499670 test begin: paddle.reshape(Tensor([4, 9904, 200, 288],"float32"), shape=list[-1,200,288,], )

[Pass] paddle.reshape(Tensor([4, 9904, 200, 288],"float32"), shape=list[-1,200,288,], )
2025-03-15 03:29:28.711444 test begin: paddle.reshape(Tensor([4, 9904, 57600],"float32"), shape=tuple(-1,200,288,), )

[Pass] paddle.reshape(Tensor([4, 9904, 57600],"float32"), shape=tuple(-1,200,288,), )
2025-03-15 03:33:01.293175 test begin: paddle.reshape(Tensor([4, 9987, 107520],"float16"), shape=tuple(-1,336,320,), )

[Pass] paddle.reshape(Tensor([4, 9987, 107520],"float16"), shape=tuple(-1,336,320,), )
2025-03-15 03:49:43.694770 test begin: paddle.reshape(Tensor([40, 192712, 296],"float32"), shape=tuple(40,-1,), )

[Pass] paddle.reshape(Tensor([40, 192712, 296],"float32"), shape=tuple(40,-1,), )
2025-03-15 03:52:19.944631 test begin: paddle.reshape(Tensor([40, 200, 285213],"float32"), shape=tuple(40,-1,), )

[Pass] paddle.reshape(Tensor([40, 200, 285213],"float32"), shape=tuple(40,-1,), )
2025-03-15 03:55:21.031965 test begin: paddle.reshape(Tensor([40, 200, 536871],"float16"), shape=tuple(40,-1,), )

[Pass] paddle.reshape(Tensor([40, 200, 536871],"float16"), shape=tuple(40,-1,), )
2025-03-15 04:11:21.986513 test begin: paddle.reshape(Tensor([40, 209716, 272],"float32"), shape=tuple(40,-1,), )

[Pass] paddle.reshape(Tensor([40, 209716, 272],"float32"), shape=tuple(40,-1,), )
2025-03-15 04:14:26.618469 test begin: paddle.reshape(Tensor([40, 2376773, 24],"float32"), list[1960,24,], )

[torch error] paddle.reshape(Tensor([40, 2376773, 24],"float32"), list[1960,24,], ) 
 shape '[1960, 24]' is invalid for input of size 2281702080
2025-03-15 04:14:30.752934 test begin: paddle.reshape(Tensor([40, 2376773, 6, 4],"float32"), list[-1,4,], )

[Pass] paddle.reshape(Tensor([40, 2376773, 6, 4],"float32"), list[-1,4,], )
2025-03-15 04:17:22.973271 test begin: paddle.reshape(Tensor([40, 353205, 304],"float16"), shape=tuple(40,-1,), )

[Pass] paddle.reshape(Tensor([40, 353205, 304],"float16"), shape=tuple(40,-1,), )
2025-03-15 04:33:31.536910 test begin: paddle.reshape(Tensor([40, 362751, 296],"float16"), shape=tuple(40,-1,), )

[Pass] paddle.reshape(Tensor([40, 362751, 296],"float16"), shape=tuple(40,-1,), )
2025-03-15 04:49:32.733320 test begin: paddle.reshape(Tensor([40, 394759, 272],"float16"), shape=tuple(40,-1,), )

[Pass] paddle.reshape(Tensor([40, 394759, 272],"float16"), shape=tuple(40,-1,), )
2025-03-15 05:05:50.669957 test begin: paddle.reshape(Tensor([40, 40, 356516, 4],"float32"), list[-1,4,], )

[Pass] paddle.reshape(Tensor([40, 40, 356516, 4],"float32"), list[-1,4,], )
2025-03-15 05:09:37.221198 test begin: paddle.reshape(Tensor([40, 40, 6, 237678],"float32"), list[-1,4,], )

[Pass] paddle.reshape(Tensor([40, 40, 6, 237678],"float32"), list[-1,4,], )
2025-03-15 05:13:18.710711 test begin: paddle.reshape(Tensor([40, 49, 1164134],"float32"), list[1960,24,], )

[torch error] paddle.reshape(Tensor([40, 49, 1164134],"float32"), list[1960,24,], ) 
 shape '[1960, 24]' is invalid for input of size 2281702640
2025-03-15 05:13:22.851179 test begin: paddle.reshape(Tensor([40, 7, 8148934],"float32"), list[1960,], )

[torch error] paddle.reshape(Tensor([40, 7, 8148934],"float32"), list[1960,], ) 
 shape '[1960]' is invalid for input of size 2281701520
2025-03-15 05:13:24.728422 test begin: paddle.reshape(Tensor([40, 8148934, 7],"float32"), list[1960,], )

[torch error] paddle.reshape(Tensor([40, 8148934, 7],"float32"), list[1960,], ) 
 shape '[1960]' is invalid for input of size 2281701520
2025-03-15 05:13:26.668921 test begin: paddle.reshape(Tensor([4012, 12, 89216],"float16"), shape=tuple(-1,272,328,), )

[Pass] paddle.reshape(Tensor([4012, 12, 89216],"float16"), shape=tuple(-1,272,328,), )
2025-03-15 05:29:54.525082 test begin: paddle.reshape(Tensor([4012, 12, 89216],"float16"), shape=tuple(-1,328,272,), )

[Pass] paddle.reshape(Tensor([4012, 12, 89216],"float16"), shape=tuple(-1,328,272,), )
2025-03-15 05:46:23.843638 test begin: paddle.reshape(Tensor([4022, 11, 97088],"float16"), shape=tuple(-1,296,328,), )

[Pass] paddle.reshape(Tensor([4022, 11, 97088],"float16"), shape=tuple(-1,296,328,), )
2025-03-15 06:02:10.329858 test begin: paddle.reshape(Tensor([4033, 10, 208, 272],"float32"), shape=list[-1,208,272,], )

[Pass] paddle.reshape(Tensor([4033, 10, 208, 272],"float32"), shape=list[-1,208,272,], )
2025-03-15 06:04:49.987189 test begin: paddle.reshape(Tensor([40330, 208, 272],"float32"), shape=tuple(12,-1,), )

[torch error] paddle.reshape(Tensor([40330, 208, 272],"float32"), shape=tuple(12,-1,), ) 
 shape '[12, -1]' is invalid for input of size 2281710080
2025-03-15 06:04:54.342730 test begin: paddle.reshape(Tensor([4035, 12, 88704],"float16"), shape=tuple(-1,264,336,), )

[Pass] paddle.reshape(Tensor([4035, 12, 88704],"float16"), shape=tuple(-1,264,336,), )
2025-03-15 06:20:48.800475 test begin: paddle.reshape(Tensor([4035, 14, 76032],"float16"), shape=tuple(-1,264,288,), )

[Pass] paddle.reshape(Tensor([4035, 14, 76032],"float16"), shape=tuple(-1,264,288,), )
2025-03-15 06:36:33.544241 test begin: paddle.reshape(Tensor([4062, 18, 58752],"float16"), shape=tuple(-1,272,216,), )

[Pass] paddle.reshape(Tensor([4062, 18, 58752],"float16"), shape=tuple(-1,272,216,), )
2025-03-15 06:52:25.364344 test begin: paddle.reshape(Tensor([4063, 9, 200, 312],"float32"), shape=list[-1,200,312,], )

[Pass] paddle.reshape(Tensor([4063, 9, 200, 312],"float32"), shape=list[-1,200,312,], )
2025-03-15 06:55:48.883055 test begin: paddle.reshape(Tensor([4063, 9, 62400],"float32"), shape=tuple(-1,200,312,), )

[Pass] paddle.reshape(Tensor([4063, 9, 62400],"float32"), shape=tuple(-1,200,312,), )
2025-03-15 06:58:55.348350 test begin: paddle.reshape(Tensor([40744668, 7, 8],"float32"), tuple(-1,8,), )

[Pass] paddle.reshape(Tensor([40744668, 7, 8],"float32"), tuple(-1,8,), )
2025-03-15 07:01:48.925448 test begin: paddle.reshape(Tensor([40744668, 7, 8],"float32"), tuple(13,4,-1,8,), )

[torch error] paddle.reshape(Tensor([40744668, 7, 8],"float32"), tuple(13,4,-1,8,), ) 
 shape '[13, 4, -1, 8]' is invalid for input of size 2281701408
2025-03-15 07:01:53.792733 test begin: paddle.reshape(Tensor([40744668, 7, 8],"float32"), tuple(13,4,7,8,), )

[torch error] paddle.reshape(Tensor([40744668, 7, 8],"float32"), tuple(13,4,7,8,), ) 
 shape '[13, 4, 7, 8]' is invalid for input of size 2281701408
2025-03-15 07:01:55.445792 test begin: paddle.reshape(Tensor([40744668, 7, 8],"float32"), tuple(2,-1,7,8,), )

[Pass] paddle.reshape(Tensor([40744668, 7, 8],"float32"), tuple(2,-1,7,8,), )
2025-03-15 07:04:32.397034 test begin: paddle.reshape(Tensor([4074467, 4, 4, 5, 7],"float32"), list[1,12,2,5,14,], )

[torch error] paddle.reshape(Tensor([4074467, 4, 4, 5, 7],"float32"), list[1,12,2,5,14,], ) 
 shape '[1, 12, 2, 5, 14]' is invalid for input of size 2281701520
2025-03-15 07:04:36.610500 test begin: paddle.reshape(Tensor([4074467, 4, 4, 5, 7],"int64"), list[1,12,2,5,14,], )

[torch error] paddle.reshape(Tensor([4074467, 4, 4, 5, 7],"int64"), list[1,12,2,5,14,], ) 
 shape '[1, 12, 2, 5, 14]' is invalid for input of size 2281701520
2025-03-15 07:04:43.953476 test begin: paddle.reshape(Tensor([40745, 200, 280],"float32"), shape=tuple(140,-1,), )

[Pass] paddle.reshape(Tensor([40745, 200, 280],"float32"), shape=tuple(140,-1,), )
2025-03-15 07:07:43.034357 test begin: paddle.reshape(Tensor([40745, 200, 280],"float32"), shape=tuple(156,-1,), )

[torch error] paddle.reshape(Tensor([40745, 200, 280],"float32"), shape=tuple(156,-1,), ) 
 shape '[156, -1]' is invalid for input of size 2281720000
2025-03-15 07:07:47.575752 test begin: paddle.reshape(Tensor([40745, 200, 280],"float32"), shape=tuple(160,-1,), )

[Pass] paddle.reshape(Tensor([40745, 200, 280],"float32"), shape=tuple(160,-1,), )
2025-03-15 07:10:47.108415 test begin: paddle.reshape(Tensor([40745, 200, 280],"float32"), shape=tuple(36,-1,), )

[torch error] paddle.reshape(Tensor([40745, 200, 280],"float32"), shape=tuple(36,-1,), ) 
 shape '[36, -1]' is invalid for input of size 2281720000
2025-03-15 07:10:51.271755 test begin: paddle.reshape(Tensor([40745, 200, 280],"float32"), shape=tuple(88,-1,), )

[torch error] paddle.reshape(Tensor([40745, 200, 280],"float32"), shape=tuple(88,-1,), ) 
 shape '[88, -1]' is invalid for input of size 2281720000
2025-03-15 07:10:52.761819 test begin: paddle.reshape(Tensor([4089, 12, 87552],"float16"), shape=tuple(-1,288,304,), )

[Pass] paddle.reshape(Tensor([4089, 12, 87552],"float16"), shape=tuple(-1,288,304,), )
2025-03-15 07:27:25.882684 test begin: paddle.reshape(Tensor([4089, 12, 87552],"float16"), shape=tuple(-1,304,288,), )

[Pass] paddle.reshape(Tensor([4089, 12, 87552],"float16"), shape=tuple(-1,304,288,), )
2025-03-15 07:44:17.021161 test begin: paddle.reshape(Tensor([4089, 16, 65664],"float16"), shape=tuple(-1,304,216,), )

[Pass] paddle.reshape(Tensor([4089, 16, 65664],"float16"), shape=tuple(-1,304,216,), )
2025-03-15 08:00:06.420003 test begin: paddle.reshape(Tensor([4098, 10, 104832],"float16"), shape=tuple(-1,312,336,), )

[Pass] paddle.reshape(Tensor([4098, 10, 104832],"float16"), shape=tuple(-1,312,336,), )
2025-03-15 08:16:42.029599 test begin: paddle.reshape(Tensor([4113, 12, 87040],"float16"), shape=tuple(-1,272,320,), )

[Pass] paddle.reshape(Tensor([4113, 12, 87040],"float16"), shape=tuple(-1,272,320,), )
2025-03-15 08:33:29.422558 test begin: paddle.reshape(Tensor([4113, 12, 87040],"float16"), shape=tuple(-1,320,272,), )

[Pass] paddle.reshape(Tensor([4113, 12, 87040],"float16"), shape=tuple(-1,320,272,), )
2025-03-15 08:50:31.386748 test begin: paddle.reshape(Tensor([4117, 11, 94848],"float16"), shape=tuple(-1,304,312,), )

[Pass] paddle.reshape(Tensor([4117, 11, 94848],"float16"), shape=tuple(-1,304,312,), )
2025-03-15 09:07:35.568583 test begin: paddle.reshape(Tensor([4117, 11, 94848],"float16"), shape=tuple(-1,312,304,), )

[Pass] paddle.reshape(Tensor([4117, 11, 94848],"float16"), shape=tuple(-1,312,304,), )
2025-03-15 09:24:19.794205 test begin: paddle.reshape(Tensor([4141, 6, 280, 328],"float32"), shape=list[-1,280,328,], )

[Pass] paddle.reshape(Tensor([4141, 6, 280, 328],"float32"), shape=list[-1,280,328,], )
2025-03-15 09:27:25.692265 test begin: paddle.reshape(Tensor([4143, 18, 57600],"float16"), shape=tuple(-1,200,288,), )

[Pass] paddle.reshape(Tensor([4143, 18, 57600],"float16"), shape=tuple(-1,200,288,), )
2025-03-15 09:43:44.841173 test begin: paddle.reshape(Tensor([415535, 4, 19, 34, 4],"float16"), list[-1,4,], )

[Pass] paddle.reshape(Tensor([415535, 4, 19, 34, 4],"float16"), list[-1,4,], )
2025-03-15 09:59:33.841288 test begin: paddle.reshape(Tensor([4162, 12, 86016],"float16"), shape=tuple(-1,256,336,), )

[Pass] paddle.reshape(Tensor([4162, 12, 86016],"float16"), shape=tuple(-1,256,336,), )
2025-03-15 10:15:27.762043 test begin: paddle.reshape(Tensor([4170, 9, 200, 304],"float32"), shape=list[-1,200,304,], )

[Pass] paddle.reshape(Tensor([4170, 9, 200, 304],"float32"), shape=list[-1,200,304,], )
2025-03-15 10:18:39.219008 test begin: paddle.reshape(Tensor([4170, 9, 304, 200],"float32"), shape=list[-1,304,200,], )

[Pass] paddle.reshape(Tensor([4170, 9, 304, 200],"float32"), shape=list[-1,304,200,], )
2025-03-15 10:21:41.241419 test begin: paddle.reshape(Tensor([4170, 9, 60800],"float32"), shape=tuple(-1,200,304,), )

[Pass] paddle.reshape(Tensor([4170, 9, 60800],"float32"), shape=tuple(-1,200,304,), )
2025-03-15 10:24:37.589944 test begin: paddle.reshape(Tensor([4170, 9, 60800],"float32"), shape=tuple(-1,304,200,), )

[Pass] paddle.reshape(Tensor([4170, 9, 60800],"float32"), shape=tuple(-1,304,200,), )
2025-03-15 10:27:57.733867 test begin: paddle.reshape(Tensor([4189, 8, 224, 304],"float32"), shape=list[-1,224,304,], )

[Pass] paddle.reshape(Tensor([4189, 8, 224, 304],"float32"), shape=list[-1,224,304,], )
2025-03-15 10:31:02.039445 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(104,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(104,-1,), ) 
 shape '[104, -1]' is invalid for input of size 2281753600
2025-03-15 10:31:06.474107 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(108,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(108,-1,), ) 
 shape '[108, -1]' is invalid for input of size 2281753600
2025-03-15 10:31:09.161000 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(112,-1,), )

[Pass] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(112,-1,), )
2025-03-15 10:34:24.591838 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(116,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(116,-1,), ) 
 shape '[116, -1]' is invalid for input of size 2281753600
2025-03-15 10:34:29.228938 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(120,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(120,-1,), ) 
 shape '[120, -1]' is invalid for input of size 2281753600
2025-03-15 10:34:31.146988 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(124,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(124,-1,), ) 
 shape '[124, -1]' is invalid for input of size 2281753600
2025-03-15 10:34:33.653783 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(132,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(132,-1,), ) 
 shape '[132, -1]' is invalid for input of size 2281753600
2025-03-15 10:34:35.543283 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(136,-1,), )

[Pass] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(136,-1,), )
2025-03-15 10:37:58.497443 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(144,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(144,-1,), ) 
 shape '[144, -1]' is invalid for input of size 2281753600
2025-03-15 10:38:02.868518 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(152,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(152,-1,), ) 
 shape '[152, -1]' is invalid for input of size 2281753600
2025-03-15 10:38:05.025533 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(160,-1,), )

[Pass] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(160,-1,), )
2025-03-15 10:41:21.265882 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(172,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(172,-1,), ) 
 shape '[172, -1]' is invalid for input of size 2281753600
2025-03-15 10:41:25.665810 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(180,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(180,-1,), ) 
 shape '[180, -1]' is invalid for input of size 2281753600
2025-03-15 10:41:27.815703 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(184,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(184,-1,), ) 
 shape '[184, -1]' is invalid for input of size 2281753600
2025-03-15 10:41:29.602473 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(204,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(204,-1,), ) 
 shape '[204, -1]' is invalid for input of size 2281753600
2025-03-15 10:41:31.537034 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(208,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(208,-1,), ) 
 shape '[208, -1]' is invalid for input of size 2281753600
2025-03-15 10:41:33.238506 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(212,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(212,-1,), ) 
 shape '[212, -1]' is invalid for input of size 2281753600
2025-03-15 10:41:34.684931 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(224,-1,), )

[Pass] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(224,-1,), )
2025-03-15 10:44:12.555170 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(232,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(232,-1,), ) 
 shape '[232, -1]' is invalid for input of size 2281753600
2025-03-15 10:44:16.715880 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(236,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(236,-1,), ) 
 shape '[236, -1]' is invalid for input of size 2281753600
2025-03-15 10:44:18.409750 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(24,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(24,-1,), ) 
 shape '[24, -1]' is invalid for input of size 2281753600
2025-03-15 10:44:19.911352 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(244,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(244,-1,), ) 
 shape '[244, -1]' is invalid for input of size 2281753600
2025-03-15 10:44:22.495011 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(248,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(248,-1,), ) 
 shape '[248, -1]' is invalid for input of size 2281753600
2025-03-15 10:44:24.962223 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(256,-1,), )

[Pass] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(256,-1,), )
2025-03-15 10:47:23.069489 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(268,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(268,-1,), ) 
 shape '[268, -1]' is invalid for input of size 2281753600
2025-03-15 10:47:27.254487 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(32,-1,), )

[Pass] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(32,-1,), )
2025-03-15 10:50:41.747416 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(36,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(36,-1,), ) 
 shape '[36, -1]' is invalid for input of size 2281753600
2025-03-15 10:50:45.561015 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(40,-1,), )

[Pass] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(40,-1,), )
2025-03-15 10:53:35.500916 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(44,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(44,-1,), ) 
 shape '[44, -1]' is invalid for input of size 2281753600
2025-03-15 10:53:39.619703 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(48,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(48,-1,), ) 
 shape '[48, -1]' is invalid for input of size 2281753600
2025-03-15 10:53:41.507774 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(52,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(52,-1,), ) 
 shape '[52, -1]' is invalid for input of size 2281753600
2025-03-15 10:53:43.131176 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(56,-1,), )

[Pass] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(56,-1,), )
2025-03-15 10:56:16.872089 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(60,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(60,-1,), ) 
 shape '[60, -1]' is invalid for input of size 2281753600
2025-03-15 10:56:20.440463 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(64,-1,), )

[Pass] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(64,-1,), )
2025-03-15 10:59:18.177441 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(68,-1,), )

[Pass] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(68,-1,), )
2025-03-15 11:02:19.281884 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(72,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(72,-1,), ) 
 shape '[72, -1]' is invalid for input of size 2281753600
2025-03-15 11:02:23.158416 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(76,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(76,-1,), ) 
 shape '[76, -1]' is invalid for input of size 2281753600
2025-03-15 11:02:25.444195 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(80,-1,), )

[Pass] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(80,-1,), )
2025-03-15 11:05:33.273680 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(84,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(84,-1,), ) 
 shape '[84, -1]' is invalid for input of size 2281753600
2025-03-15 11:05:37.899881 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(88,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(88,-1,), ) 
 shape '[88, -1]' is invalid for input of size 2281753600
2025-03-15 11:05:39.475285 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(9,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(9,-1,), ) 
 shape '[9, -1]' is invalid for input of size 2281753600
2025-03-15 11:05:40.822020 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(92,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(92,-1,), ) 
 shape '[92, -1]' is invalid for input of size 2281753600
2025-03-15 11:05:42.707930 test begin: paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(96,-1,), )

[torch error] paddle.reshape(Tensor([41944, 200, 272],"float32"), shape=tuple(96,-1,), ) 
 shape '[96, -1]' is invalid for input of size 2281753600
2025-03-15 11:05:44.603496 test begin: paddle.reshape(Tensor([4195, 10, 200, 272],"float32"), shape=list[-1,200,272,], )

[Pass] paddle.reshape(Tensor([4195, 10, 200, 272],"float32"), shape=list[-1,200,272,], )
2025-03-15 11:08:54.708705 test begin: paddle.reshape(Tensor([4195, 10, 54400],"float32"), shape=tuple(-1,200,272,), )

[Pass] paddle.reshape(Tensor([4195, 10, 54400],"float32"), shape=tuple(-1,200,272,), )
2025-03-15 11:12:03.926347 test begin: paddle.reshape(Tensor([4197, 15, 68224],"float16"), shape=tuple(-1,208,328,), )

[Pass] paddle.reshape(Tensor([4197, 15, 68224],"float16"), shape=tuple(-1,208,328,), )
2025-03-15 11:28:34.128274 test begin: paddle.reshape(Tensor([42049, 1, 102144],"float16"), shape=tuple(-1,304,336,), )

[Pass] paddle.reshape(Tensor([42049, 1, 102144],"float16"), shape=tuple(-1,304,336,), )
2025-03-15 11:44:50.032449 test begin: paddle.reshape(Tensor([42049, 304, 336],"float16"), shape=tuple(228,-1,), )

[Pass] paddle.reshape(Tensor([42049, 304, 336],"float16"), shape=tuple(228,-1,), )
2025-03-15 12:02:17.658476 test begin: paddle.reshape(Tensor([42049, 304, 336],"float16"), shape=tuple(240,-1,), )

[torch error] paddle.reshape(Tensor([42049, 304, 336],"float16"), shape=tuple(240,-1,), ) 
 shape '[240, -1]' is invalid for input of size 4295053056
2025-03-15 12:02:21.252890 test begin: paddle.reshape(Tensor([42049, 304, 336],"float16"), shape=tuple(248,-1,), )

[torch error] paddle.reshape(Tensor([42049, 304, 336],"float16"), shape=tuple(248,-1,), ) 
 shape '[248, -1]' is invalid for input of size 4295053056
2025-03-15 12:02:22.250925 test begin: paddle.reshape(Tensor([42049, 304, 336],"float16"), shape=tuple(260,-1,), )

[torch error] paddle.reshape(Tensor([42049, 304, 336],"float16"), shape=tuple(260,-1,), ) 
 shape '[260, -1]' is invalid for input of size 4295053056
2025-03-15 12:02:23.244554 test begin: paddle.reshape(Tensor([42049, 304, 336],"float16"), shape=tuple(332,-1,), )

[torch error] paddle.reshape(Tensor([42049, 304, 336],"float16"), shape=tuple(332,-1,), ) 
 shape '[332, -1]' is invalid for input of size 4295053056
2025-03-15 12:02:24.517100 test begin: paddle.reshape(Tensor([42049, 304, 336],"float16"), shape=tuple(364,-1,), )

[torch error] paddle.reshape(Tensor([42049, 304, 336],"float16"), shape=tuple(364,-1,), ) 
 shape '[364, -1]' is invalid for input of size 4295053056
2025-03-15 12:02:26.310261 test begin: paddle.reshape(Tensor([42049, 304, 336],"float16"), shape=tuple(372,-1,), )

[torch error] paddle.reshape(Tensor([42049, 304, 336],"float16"), shape=tuple(372,-1,), ) 
 shape '[372, -1]' is invalid for input of size 4295053056
2025-03-15 12:02:27.844170 test begin: paddle.reshape(Tensor([4205, 10, 102144],"float16"), shape=tuple(-1,304,336,), )

[Pass] paddle.reshape(Tensor([4205, 10, 102144],"float16"), shape=tuple(-1,304,336,), )
2025-03-15 12:19:18.097296 test begin: paddle.reshape(Tensor([4205, 10, 102144],"float16"), shape=tuple(-1,336,304,), )

[Pass] paddle.reshape(Tensor([4205, 10, 102144],"float16"), shape=tuple(-1,336,304,), )
2025-03-15 12:36:14.738105 test begin: paddle.reshape(Tensor([4205, 12, 85120],"float16"), shape=tuple(-1,280,304,), )

[Pass] paddle.reshape(Tensor([4205, 12, 85120],"float16"), shape=tuple(-1,280,304,), )
2025-03-15 12:53:26.654976 test begin: paddle.reshape(Tensor([4205, 12, 85120],"float16"), shape=tuple(-1,304,280,), )

[Pass] paddle.reshape(Tensor([4205, 12, 85120],"float16"), shape=tuple(-1,304,280,), )
2025-03-15 13:09:35.813797 test begin: paddle.reshape(Tensor([4218, 12, 84864],"float16"), shape=tuple(-1,272,312,), )

[Pass] paddle.reshape(Tensor([4218, 12, 84864],"float16"), shape=tuple(-1,272,312,), )
2025-03-15 13:26:54.322974 test begin: paddle.reshape(Tensor([4218, 13, 78336],"float16"), shape=tuple(-1,288,272,), )

[Pass] paddle.reshape(Tensor([4218, 13, 78336],"float16"), shape=tuple(-1,288,272,), )
2025-03-15 13:43:01.430523 test begin: paddle.reshape(Tensor([4225, 11, 92416],"float16"), shape=tuple(-1,304,304,), )

[Pass] paddle.reshape(Tensor([4225, 11, 92416],"float16"), shape=tuple(-1,304,304,), )
2025-03-15 13:58:52.689672 test begin: paddle.reshape(Tensor([4245, 15, 67456],"float16"), shape=tuple(-1,248,272,), )

[Pass] paddle.reshape(Tensor([4245, 15, 67456],"float16"), shape=tuple(-1,248,272,), )
2025-03-15 14:14:59.989136 test begin: paddle.reshape(Tensor([4263, 6, 328, 272],"float32"), shape=list[-1,328,272,], )

[Pass] paddle.reshape(Tensor([4263, 6, 328, 272],"float32"), shape=list[-1,328,272,], )
2025-03-15 14:18:12.897965 test begin: paddle.reshape(Tensor([4273, 11, 91392],"float16"), shape=tuple(-1,272,336,), )

[Pass] paddle.reshape(Tensor([4273, 11, 91392],"float16"), shape=tuple(-1,272,336,), )
2025-03-15 14:34:30.045829 test begin: paddle.reshape(Tensor([4273, 11, 91392],"float16"), shape=tuple(-1,336,272,), )

[Pass] paddle.reshape(Tensor([4273, 11, 91392],"float16"), shape=tuple(-1,336,272,), )
2025-03-15 14:50:49.029347 test begin: paddle.reshape(Tensor([42800, 14, 14, 512],"float16"), list[128,14,14,512,], )

[torch error] paddle.reshape(Tensor([42800, 14, 14, 512],"float16"), list[128,14,14,512,], ) 
 shape '[128, 14, 14, 512]' is invalid for input of size 4295065600
2025-03-15 14:50:52.938403 test begin: paddle.reshape(Tensor([4294967297, 1],"float16"), shape=list[-1,3,], )

[torch error] paddle.reshape(Tensor([4294967297, 1],"float16"), shape=list[-1,3,], ) 
 shape '[-1, 3]' is invalid for input of size 4294967297
2025-03-15 14:50:54.718482 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[-1,], )

[Pass] paddle.reshape(Tensor([4294967297],"float16"), list[-1,], )
2025-03-15 15:06:43.061761 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[1,1,1,1,1,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[1,1,1,1,1,], ) 
 shape '[1, 1, 1, 1, 1]' is invalid for input of size 4294967297
2025-03-15 15:06:46.970099 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[1,1,1,1,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[1,1,1,1,], ) 
 shape '[1, 1, 1, 1]' is invalid for input of size 4294967297
2025-03-15 15:06:48.808505 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[1,1,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[1,1,], ) 
 shape '[1, 1]' is invalid for input of size 4294967297
2025-03-15 15:06:50.643651 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[1,128,1,1,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[1,128,1,1,], ) 
 shape '[1, 128, 1, 1]' is invalid for input of size 4294967297
2025-03-15 15:06:52.449869 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[1,2,1,1,1,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[1,2,1,1,1,], ) 
 shape '[1, 2, 1, 1, 1]' is invalid for input of size 4294967297
2025-03-15 15:06:54.276857 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[1,2,1,1,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[1,2,1,1,], ) 
 shape '[1, 2, 1, 1]' is invalid for input of size 4294967297
2025-03-15 15:06:56.419367 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[1,24,1,1,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[1,24,1,1,], ) 
 shape '[1, 24, 1, 1]' is invalid for input of size 4294967297
2025-03-15 15:06:57.962435 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[1,256,1,1,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[1,256,1,1,], ) 
 shape '[1, 256, 1, 1]' is invalid for input of size 4294967297
2025-03-15 15:06:59.682151 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[1,3,1,1,1,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[1,3,1,1,1,], ) 
 shape '[1, 3, 1, 1, 1]' is invalid for input of size 4294967297
2025-03-15 15:07:01.893403 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[1,3,1,1,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[1,3,1,1,], ) 
 shape '[1, 3, 1, 1]' is invalid for input of size 4294967297
2025-03-15 15:07:03.839263 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[1,3,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[1,3,], ) 
 shape '[1, 3]' is invalid for input of size 4294967297
2025-03-15 15:07:05.586020 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[1,32,1,1,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[1,32,1,1,], ) 
 shape '[1, 32, 1, 1]' is invalid for input of size 4294967297
2025-03-15 15:07:07.007990 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[1,6,1,1,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[1,6,1,1,], ) 
 shape '[1, 6, 1, 1]' is invalid for input of size 4294967297
2025-03-15 15:07:08.804162 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[1,64,1,1,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[1,64,1,1,], ) 
 shape '[1, 64, 1, 1]' is invalid for input of size 4294967297
2025-03-15 15:07:10.997672 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[106,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[106,28,28,], ) 
 shape '[106, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:07:12.332363 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[110,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[110,14,14,], ) 
 shape '[110, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:07:14.529394 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[112,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[112,14,14,], ) 
 shape '[112, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:07:16.220461 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[113,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[113,28,28,], ) 
 shape '[113, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:07:18.238818 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[114,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[114,14,14,], ) 
 shape '[114, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:07:20.115783 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[116,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[116,28,28,], ) 
 shape '[116, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:07:21.994517 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[117,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[117,28,28,], ) 
 shape '[117, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:07:23.885751 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[120,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[120,14,14,], ) 
 shape '[120, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:07:25.899826 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[122,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[122,28,28,], ) 
 shape '[122, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:07:27.788235 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[123,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[123,14,14,], ) 
 shape '[123, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:07:29.823146 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[123,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[123,28,28,], ) 
 shape '[123, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:07:31.725488 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[124,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[124,14,14,], ) 
 shape '[124, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:07:33.742500 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[124,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[124,28,28,], ) 
 shape '[124, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:07:35.636218 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[125,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[125,28,28,], ) 
 shape '[125, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:07:37.533335 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[127,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[127,28,28,], ) 
 shape '[127, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:07:39.430665 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[129,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[129,28,28,], ) 
 shape '[129, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:07:41.719648 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[131,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[131,14,14,], ) 
 shape '[131, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:07:43.846298 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[131,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[131,28,28,], ) 
 shape '[131, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:07:45.879938 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[132,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[132,14,14,], ) 
 shape '[132, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:07:47.873617 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[132,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[132,28,28,], ) 
 shape '[132, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:07:49.878104 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[133,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[133,14,14,], ) 
 shape '[133, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:07:51.879926 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[133,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[133,28,28,], ) 
 shape '[133, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:07:53.403058 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[134,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[134,28,28,], ) 
 shape '[134, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:07:55.210688 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[135,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[135,28,28,], ) 
 shape '[135, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:07:57.101935 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[136,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[136,28,28,], ) 
 shape '[136, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:07:59.009894 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[137,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[137,28,28,], ) 
 shape '[137, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:00.908661 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[140,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[140,14,14,], ) 
 shape '[140, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:08:02.839595 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[141,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[141,28,28,], ) 
 shape '[141, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:04.685039 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[142,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[142,14,14,], ) 
 shape '[142, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:08:06.591958 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[142,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[142,28,28,], ) 
 shape '[142, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:08.485474 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[143,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[143,28,28,], ) 
 shape '[143, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:10.372660 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[144,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[144,28,28,], ) 
 shape '[144, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:12.600521 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[145,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[145,28,28,], ) 
 shape '[145, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:14.523588 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[147,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[147,14,14,], ) 
 shape '[147, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:08:16.453345 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[148,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[148,14,14,], ) 
 shape '[148, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:08:17.777747 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[148,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[148,28,28,], ) 
 shape '[148, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:19.757691 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[149,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[149,28,28,], ) 
 shape '[149, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:21.832665 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[150,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[150,14,14,], ) 
 shape '[150, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:08:23.154281 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[150,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[150,28,28,], ) 
 shape '[150, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:24.964806 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[151,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[151,28,28,], ) 
 shape '[151, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:26.781877 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[152,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[152,28,28,], ) 
 shape '[152, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:28.569781 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[153,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[153,14,14,], ) 
 shape '[153, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:08:30.363527 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[153,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[153,28,28,], ) 
 shape '[153, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:32.188772 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[154,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[154,28,28,], ) 
 shape '[154, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:34.379769 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[157,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[157,14,14,], ) 
 shape '[157, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:08:35.709016 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[157,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[157,28,28,], ) 
 shape '[157, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:37.909581 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[158,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[158,14,14,], ) 
 shape '[158, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:08:39.236934 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[158,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[158,28,28,], ) 
 shape '[158, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:41.432214 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[159,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[159,14,14,], ) 
 shape '[159, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:08:42.765843 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[159,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[159,28,28,], ) 
 shape '[159, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:44.572744 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[160,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[160,14,14,], ) 
 shape '[160, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:08:46.560728 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[160,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[160,28,28,], ) 
 shape '[160, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:48.702484 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[161,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[161,28,28,], ) 
 shape '[161, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:50.502653 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[162,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[162,14,14,], ) 
 shape '[162, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:08:52.779429 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[162,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[162,28,28,], ) 
 shape '[162, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:54.266971 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[163,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[163,28,28,], ) 
 shape '[163, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:08:56.558246 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[164,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[164,14,14,], ) 
 shape '[164, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:08:58.054628 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[165,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[165,28,28,], ) 
 shape '[165, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:00.384238 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[166,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[166,28,28,], ) 
 shape '[166, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:02.363402 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[167,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[167,14,14,], ) 
 shape '[167, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:09:04.240758 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[167,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[167,28,28,], ) 
 shape '[167, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:06.500792 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[168,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[168,14,14,], ) 
 shape '[168, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:09:08.546649 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[168,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[168,28,28,], ) 
 shape '[168, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:10.529932 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[169,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[169,14,14,], ) 
 shape '[169, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:09:12.521348 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[169,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[169,28,28,], ) 
 shape '[169, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:14.522556 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[171,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[171,14,14,], ) 
 shape '[171, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:09:16.504634 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[171,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[171,28,28,], ) 
 shape '[171, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:18.487211 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[172,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[172,14,14,], ) 
 shape '[172, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:09:20.428664 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[172,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[172,28,28,], ) 
 shape '[172, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:22.362538 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[173,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[173,14,14,], ) 
 shape '[173, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:09:23.692932 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[173,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[173,28,28,], ) 
 shape '[173, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:25.511170 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[174,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[174,14,14,], ) 
 shape '[174, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:09:27.354503 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[174,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[174,28,28,], ) 
 shape '[174, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:29.281714 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[175,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[175,28,28,], ) 
 shape '[175, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:31.108196 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[176,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[176,14,14,], ) 
 shape '[176, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:09:32.974245 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[176,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[176,28,28,], ) 
 shape '[176, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:34.800071 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[177,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[177,28,28,], ) 
 shape '[177, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:36.625149 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[178,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[178,14,14,], ) 
 shape '[178, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:09:38.452661 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[178,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[178,28,28,], ) 
 shape '[178, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:40.315507 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[179,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[179,28,28,], ) 
 shape '[179, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:42.176559 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[180,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[180,28,28,], ) 
 shape '[180, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:44.362819 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[181,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[181,14,14,], ) 
 shape '[181, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:09:45.731243 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[181,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[181,28,28,], ) 
 shape '[181, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:47.622795 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[182,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[182,14,14,], ) 
 shape '[182, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:09:49.419198 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[182,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[182,28,28,], ) 
 shape '[182, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:51.292949 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[183,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[183,14,14,], ) 
 shape '[183, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:09:53.180494 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[183,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[183,28,28,], ) 
 shape '[183, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:54.996249 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[184,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[184,14,14,], ) 
 shape '[184, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:09:56.816442 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[184,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[184,28,28,], ) 
 shape '[184, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:09:58.620913 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[186,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[186,14,14,], ) 
 shape '[186, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:10:00.431301 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[186,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[186,28,28,], ) 
 shape '[186, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:10:02.265010 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[187,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[187,28,28,], ) 
 shape '[187, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:10:04.089625 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[188,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[188,28,28,], ) 
 shape '[188, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:10:05.897290 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[189,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[189,28,28,], ) 
 shape '[189, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:10:08.064717 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[190,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[190,28,28,], ) 
 shape '[190, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:10:09.452036 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[191,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[191,14,14,], ) 
 shape '[191, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:10:11.341952 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[191,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[191,28,28,], ) 
 shape '[191, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:10:13.262040 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[192,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[192,28,28,], ) 
 shape '[192, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:10:15.309123 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[193,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[193,28,28,], ) 
 shape '[193, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:10:17.827085 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[194,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[194,14,14,], ) 
 shape '[194, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:10:19.713656 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[194,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[194,28,28,], ) 
 shape '[194, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:10:21.608504 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[195,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[195,14,14,], ) 
 shape '[195, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:10:23.498869 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[195,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[195,28,28,], ) 
 shape '[195, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:10:25.468616 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[196,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[196,14,14,], ) 
 shape '[196, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:10:27.370746 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[196,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[196,28,28,], ) 
 shape '[196, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:10:29.299281 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[197,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[197,14,14,], ) 
 shape '[197, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:10:31.215616 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[197,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[197,28,28,], ) 
 shape '[197, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:10:33.104613 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[198,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[198,14,14,], ) 
 shape '[198, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:10:34.999044 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[198,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[198,28,28,], ) 
 shape '[198, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:10:36.908469 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[199,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[199,14,14,], ) 
 shape '[199, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:10:38.794586 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[199,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[199,28,28,], ) 
 shape '[199, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:10:40.687715 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[2,2,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[2,2,], ) 
 shape '[2, 2]' is invalid for input of size 4294967297
2025-03-15 15:10:42.543383 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[2,3,3,2,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[2,3,3,2,], ) 
 shape '[2, 3, 3, 2]' is invalid for input of size 4294967297
2025-03-15 15:10:44.800318 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[2,3,4,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[2,3,4,], ) 
 shape '[2, 3, 4]' is invalid for input of size 4294967297
2025-03-15 15:10:46.309716 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[2,3,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[2,3,], ) 
 shape '[2, 3]' is invalid for input of size 4294967297
2025-03-15 15:10:48.204033 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[2,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[2,], ) 
 shape '[2]' is invalid for input of size 4294967297
2025-03-15 15:10:50.525662 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[200,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[200,28,28,], ) 
 shape '[200, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:10:51.865933 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[201,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[201,14,14,], ) 
 shape '[201, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:10:53.691958 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[202,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[202,14,14,], ) 
 shape '[202, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:10:55.508043 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[202,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[202,28,28,], ) 
 shape '[202, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:10:57.560865 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[203,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[203,14,14,], ) 
 shape '[203, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:10:59.101906 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[204,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[204,14,14,], ) 
 shape '[204, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:11:00.987211 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[204,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[204,28,28,], ) 
 shape '[204, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:02.890080 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[205,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[205,28,28,], ) 
 shape '[205, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:04.755145 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[206,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[206,14,14,], ) 
 shape '[206, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:11:06.634612 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[206,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[206,28,28,], ) 
 shape '[206, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:08.865334 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[207,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[207,14,14,], ) 
 shape '[207, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:11:10.225834 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[207,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[207,28,28,], ) 
 shape '[207, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:12.461395 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[208,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[208,14,14,], ) 
 shape '[208, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:11:14.400191 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[208,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[208,28,28,], ) 
 shape '[208, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:15.745560 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[209,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[209,28,28,], ) 
 shape '[209, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:17.776839 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[210,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[210,14,14,], ) 
 shape '[210, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:11:19.335527 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[210,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[210,28,28,], ) 
 shape '[210, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:21.134674 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[211,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[211,14,14,], ) 
 shape '[211, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:11:22.932886 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[212,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[212,28,28,], ) 
 shape '[212, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:24.739805 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[213,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[213,14,14,], ) 
 shape '[213, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:11:26.546545 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[213,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[213,28,28,], ) 
 shape '[213, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:28.351262 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[214,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[214,14,14,], ) 
 shape '[214, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:11:30.177637 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[215,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[215,14,14,], ) 
 shape '[215, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:11:31.959170 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[215,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[215,28,28,], ) 
 shape '[215, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:33.755534 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[216,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[216,14,14,], ) 
 shape '[216, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:11:35.590197 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[216,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[216,28,28,], ) 
 shape '[216, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:37.425704 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[217,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[217,14,14,], ) 
 shape '[217, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:11:39.633398 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[218,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[218,14,14,], ) 
 shape '[218, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:11:40.999192 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[218,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[218,28,28,], ) 
 shape '[218, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:42.820455 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[219,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[219,28,28,], ) 
 shape '[219, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:44.724201 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[220,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[220,14,14,], ) 
 shape '[220, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:11:46.628569 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[220,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[220,28,28,], ) 
 shape '[220, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:48.879355 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[221,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[221,28,28,], ) 
 shape '[221, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:50.344107 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[222,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[222,28,28,], ) 
 shape '[222, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:52.230686 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[223,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[223,14,14,], ) 
 shape '[223, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:11:54.486626 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[223,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[223,28,28,], ) 
 shape '[223, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:56.549705 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[224,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[224,14,14,], ) 
 shape '[224, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:11:57.960560 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[224,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[224,28,28,], ) 
 shape '[224, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:11:59.856422 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[225,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[225,14,14,], ) 
 shape '[225, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:12:01.744400 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[225,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[225,28,28,], ) 
 shape '[225, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:03.633572 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[226,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[226,14,14,], ) 
 shape '[226, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:12:05.516957 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[226,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[226,28,28,], ) 
 shape '[226, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:07.397472 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[227,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[227,14,14,], ) 
 shape '[227, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:12:09.323637 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[227,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[227,28,28,], ) 
 shape '[227, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:11.219280 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[228,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[228,14,14,], ) 
 shape '[228, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:12:13.485999 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[228,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[228,28,28,], ) 
 shape '[228, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:14.911040 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[229,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[229,28,28,], ) 
 shape '[229, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:17.231525 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[230,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[230,14,14,], ) 
 shape '[230, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:12:18.711398 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[230,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[230,28,28,], ) 
 shape '[230, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:20.610408 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[231,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[231,28,28,], ) 
 shape '[231, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:22.513697 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[232,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[232,14,14,], ) 
 shape '[232, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:12:24.412850 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[232,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[232,28,28,], ) 
 shape '[232, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:26.324647 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[233,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[233,14,14,], ) 
 shape '[233, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:12:28.347734 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[233,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[233,28,28,], ) 
 shape '[233, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:30.276563 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[234,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[234,14,14,], ) 
 shape '[234, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:12:32.422602 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[234,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[234,28,28,], ) 
 shape '[234, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:34.479992 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[235,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[235,14,14,], ) 
 shape '[235, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:12:36.411056 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[235,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[235,28,28,], ) 
 shape '[235, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:37.790458 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[236,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[236,28,28,], ) 
 shape '[236, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:39.799612 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[237,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[237,14,14,], ) 
 shape '[237, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:12:41.404747 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[237,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[237,28,28,], ) 
 shape '[237, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:43.261605 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[238,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[238,14,14,], ) 
 shape '[238, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:12:45.098165 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[238,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[238,28,28,], ) 
 shape '[238, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:46.928575 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[239,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[239,14,14,], ) 
 shape '[239, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:12:49.149010 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[239,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[239,28,28,], ) 
 shape '[239, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:50.497505 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[240,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[240,28,28,], ) 
 shape '[240, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:52.316596 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[241,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[241,28,28,], ) 
 shape '[241, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:54.125886 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[242,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[242,14,14,], ) 
 shape '[242, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:12:55.937095 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[242,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[242,28,28,], ) 
 shape '[242, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:12:57.755545 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[243,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[243,14,14,], ) 
 shape '[243, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:12:59.575898 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[243,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[243,28,28,], ) 
 shape '[243, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:01.396299 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[244,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[244,14,14,], ) 
 shape '[244, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:13:03.232779 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[244,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[244,28,28,], ) 
 shape '[244, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:05.425434 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[245,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[245,14,14,], ) 
 shape '[245, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:13:06.837267 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[245,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[245,28,28,], ) 
 shape '[245, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:08.712583 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[246,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[246,28,28,], ) 
 shape '[246, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:10.928393 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[247,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[247,14,14,], ) 
 shape '[247, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:13:12.295428 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[247,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[247,28,28,], ) 
 shape '[247, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:14.111712 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[249,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[249,14,14,], ) 
 shape '[249, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:13:15.941779 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[249,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[249,28,28,], ) 
 shape '[249, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:17.784558 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[250,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[250,14,14,], ) 
 shape '[250, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:13:19.730191 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[250,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[250,28,28,], ) 
 shape '[250, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:21.653926 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[251,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[251,14,14,], ) 
 shape '[251, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:13:23.566858 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[251,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[251,28,28,], ) 
 shape '[251, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:25.493423 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[252,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[252,14,14,], ) 
 shape '[252, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:13:27.442110 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[252,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[252,28,28,], ) 
 shape '[252, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:29.338864 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[253,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[253,14,14,], ) 
 shape '[253, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:13:31.243849 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[253,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[253,28,28,], ) 
 shape '[253, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:33.172794 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[254,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[254,14,14,], ) 
 shape '[254, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:13:35.450646 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[254,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[254,28,28,], ) 
 shape '[254, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:36.961969 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[255,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[255,28,28,], ) 
 shape '[255, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:38.865952 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[256,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[256,14,14,], ) 
 shape '[256, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:13:40.747128 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[256,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[256,28,28,], ) 
 shape '[256, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:42.645767 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[257,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[257,28,28,], ) 
 shape '[257, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:44.532244 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[258,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[258,14,14,], ) 
 shape '[258, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:13:46.502962 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[258,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[258,28,28,], ) 
 shape '[258, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:48.457628 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[259,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[259,28,28,], ) 
 shape '[259, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:50.349231 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[260,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[260,14,14,], ) 
 shape '[260, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:13:52.616456 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[260,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[260,28,28,], ) 
 shape '[260, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:54.025807 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[261,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[261,14,14,], ) 
 shape '[261, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:13:55.982191 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[261,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[261,28,28,], ) 
 shape '[261, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:13:57.862944 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[262,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[262,14,14,], ) 
 shape '[262, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:13:59.717713 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[262,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[262,28,28,], ) 
 shape '[262, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:01.607754 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[263,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[263,28,28,], ) 
 shape '[263, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:03.891683 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[264,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[264,14,14,], ) 
 shape '[264, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:14:05.370212 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[264,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[264,28,28,], ) 
 shape '[264, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:07.690593 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[265,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[265,14,14,], ) 
 shape '[265, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:14:09.092384 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[265,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[265,28,28,], ) 
 shape '[265, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:10.917867 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[266,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[266,28,28,], ) 
 shape '[266, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:13.118880 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[267,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[267,14,14,], ) 
 shape '[267, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:14:14.473238 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[267,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[267,28,28,], ) 
 shape '[267, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:16.351618 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[268,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[268,28,28,], ) 
 shape '[268, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:18.059916 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[269,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[269,14,14,], ) 
 shape '[269, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:14:19.855199 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[269,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[269,28,28,], ) 
 shape '[269, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:21.686752 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[270,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[270,14,14,], ) 
 shape '[270, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:14:23.530324 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[270,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[270,28,28,], ) 
 shape '[270, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:25.377454 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[271,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[271,14,14,], ) 
 shape '[271, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:14:27.176876 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[271,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[271,28,28,], ) 
 shape '[271, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:29.111197 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[272,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[272,28,28,], ) 
 shape '[272, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:30.922808 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[273,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[273,14,14,], ) 
 shape '[273, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:14:32.742834 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[273,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[273,28,28,], ) 
 shape '[273, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:34.566138 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[274,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[274,14,14,], ) 
 shape '[274, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:14:36.535600 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[275,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[275,14,14,], ) 
 shape '[275, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:14:38.369459 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[275,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[275,28,28,], ) 
 shape '[275, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:40.204933 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[276,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[276,14,14,], ) 
 shape '[276, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:14:42.032017 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[276,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[276,28,28,], ) 
 shape '[276, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:43.824931 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[277,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[277,14,14,], ) 
 shape '[277, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:14:45.625353 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[277,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[277,28,28,], ) 
 shape '[277, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:47.837179 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[278,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[278,14,14,], ) 
 shape '[278, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:14:49.213546 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[278,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[278,28,28,], ) 
 shape '[278, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:51.043939 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[279,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[279,28,28,], ) 
 shape '[279, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:52.888420 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[280,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[280,14,14,], ) 
 shape '[280, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:14:54.761093 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[280,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[280,28,28,], ) 
 shape '[280, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:56.556753 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[281,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[281,28,28,], ) 
 shape '[281, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:14:58.387844 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[282,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[282,14,14,], ) 
 shape '[282, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:15:00.613354 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[282,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[282,28,28,], ) 
 shape '[282, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:01.973742 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[283,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[283,14,14,], ) 
 shape '[283, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:15:03.879233 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[283,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[283,28,28,], ) 
 shape '[283, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:05.797326 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[284,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[284,28,28,], ) 
 shape '[284, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:07.697157 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[285,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[285,14,14,], ) 
 shape '[285, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:15:09.603510 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[285,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[285,28,28,], ) 
 shape '[285, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:11.530406 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[286,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[286,14,14,], ) 
 shape '[286, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:15:13.546705 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[286,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[286,28,28,], ) 
 shape '[286, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:15.830343 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[287,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[287,14,14,], ) 
 shape '[287, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:15:17.343140 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[287,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[287,28,28,], ) 
 shape '[287, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:19.265842 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[288,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[288,14,14,], ) 
 shape '[288, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:15:21.557669 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[288,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[288,28,28,], ) 
 shape '[288, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:23.622798 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[289,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[289,14,14,], ) 
 shape '[289, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:15:25.021846 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[289,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[289,28,28,], ) 
 shape '[289, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:26.880212 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[290,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[290,14,14,], ) 
 shape '[290, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:15:28.793090 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[290,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[290,28,28,], ) 
 shape '[290, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:30.691658 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[291,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[291,28,28,], ) 
 shape '[291, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:32.591938 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[292,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[292,14,14,], ) 
 shape '[292, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:15:34.495157 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[292,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[292,28,28,], ) 
 shape '[292, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:36.764439 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[293,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[293,14,14,], ) 
 shape '[293, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:15:38.261667 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[293,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[293,28,28,], ) 
 shape '[293, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:40.183844 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[294,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[294,14,14,], ) 
 shape '[294, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:15:42.077093 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[294,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[294,28,28,], ) 
 shape '[294, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:43.992260 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[295,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[295,14,14,], ) 
 shape '[295, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:15:45.892943 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[295,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[295,28,28,], ) 
 shape '[295, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:48.186919 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[296,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[296,14,14,], ) 
 shape '[296, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:15:49.683386 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[296,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[296,28,28,], ) 
 shape '[296, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:51.606970 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[297,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[297,14,14,], ) 
 shape '[297, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:15:53.898596 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[297,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[297,28,28,], ) 
 shape '[297, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:55.288481 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[298,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[298,14,14,], ) 
 shape '[298, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:15:57.146854 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[298,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[298,28,28,], ) 
 shape '[298, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:15:58.978043 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[299,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[299,14,14,], ) 
 shape '[299, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:16:00.835412 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[299,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[299,28,28,], ) 
 shape '[299, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:16:02.721612 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[3,2,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[3,2,], ) 
 shape '[3, 2]' is invalid for input of size 4294967297
2025-03-15 15:16:04.976600 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[3,3,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[3,3,], ) 
 shape '[3, 3]' is invalid for input of size 4294967297
2025-03-15 15:16:06.924803 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[300,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[300,14,14,], ) 
 shape '[300, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:16:08.271738 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[300,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[300,28,28,], ) 
 shape '[300, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:16:10.147240 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[301,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[301,14,14,], ) 
 shape '[301, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:16:11.979275 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[301,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[301,28,28,], ) 
 shape '[301, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:16:13.798637 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[302,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[302,14,14,], ) 
 shape '[302, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:16:15.603500 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[302,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[302,28,28,], ) 
 shape '[302, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:16:17.423913 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[303,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[303,14,14,], ) 
 shape '[303, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:16:19.375339 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[303,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[303,28,28,], ) 
 shape '[303, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:16:20.982967 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[304,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[304,14,14,], ) 
 shape '[304, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:16:22.836953 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[304,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[304,28,28,], ) 
 shape '[304, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:16:24.772594 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[305,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[305,14,14,], ) 
 shape '[305, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:16:26.568243 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[306,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[306,28,28,], ) 
 shape '[306, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:16:28.378301 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[307,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[307,14,14,], ) 
 shape '[307, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:16:30.192250 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[307,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[307,28,28,], ) 
 shape '[307, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:16:32.002284 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[308,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[308,14,14,], ) 
 shape '[308, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:16:33.812905 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[308,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[308,28,28,], ) 
 shape '[308, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:16:35.614179 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[309,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[309,14,14,], ) 
 shape '[309, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:16:37.806727 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[310,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[310,14,14,], ) 
 shape '[310, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:16:39.134753 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[310,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[310,28,28,], ) 
 shape '[310, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:16:40.938094 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[311,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[311,14,14,], ) 
 shape '[311, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:16:42.816768 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[311,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[311,28,28,], ) 
 shape '[311, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:16:44.715851 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[312,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[312,14,14,], ) 
 shape '[312, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:16:46.601446 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[312,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[312,28,28,], ) 
 shape '[312, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:16:48.514541 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[313,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[313,28,28,], ) 
 shape '[313, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:16:50.420330 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[314,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[314,14,14,], ) 
 shape '[314, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:16:52.341255 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[314,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[314,28,28,], ) 
 shape '[314, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:16:54.286041 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[315,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[315,14,14,], ) 
 shape '[315, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:16:56.198382 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[315,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[315,28,28,], ) 
 shape '[315, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:16:58.102436 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[316,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[316,14,14,], ) 
 shape '[316, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:16:59.993743 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[316,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[316,28,28,], ) 
 shape '[316, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:01.923321 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[317,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[317,14,14,], ) 
 shape '[317, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:17:04.190482 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[317,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[317,28,28,], ) 
 shape '[317, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:05.703612 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[318,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[318,14,14,], ) 
 shape '[318, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:17:07.597202 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[318,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[318,28,28,], ) 
 shape '[318, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:09.902557 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[319,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[319,14,14,], ) 
 shape '[319, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:17:11.314918 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[319,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[319,28,28,], ) 
 shape '[319, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:13.677146 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[320,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[320,14,14,], ) 
 shape '[320, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:17:15.101254 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[320,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[320,28,28,], ) 
 shape '[320, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:17.087488 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[321,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[321,14,14,], ) 
 shape '[321, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:17:19.022245 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[321,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[321,28,28,], ) 
 shape '[321, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:20.880558 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[322,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[322,14,14,], ) 
 shape '[322, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:17:22.783746 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[322,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[322,28,28,], ) 
 shape '[322, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:24.678032 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[323,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[323,14,14,], ) 
 shape '[323, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:17:26.582964 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[323,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[323,28,28,], ) 
 shape '[323, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:28.481744 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[324,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[324,14,14,], ) 
 shape '[324, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:17:30.360914 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[324,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[324,28,28,], ) 
 shape '[324, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:32.285255 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[325,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[325,14,14,], ) 
 shape '[325, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:17:34.182111 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[325,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[325,28,28,], ) 
 shape '[325, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:35.983913 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[326,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[326,14,14,], ) 
 shape '[326, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:17:37.779972 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[326,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[326,28,28,], ) 
 shape '[326, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:39.586295 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[327,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[327,14,14,], ) 
 shape '[327, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:17:41.799349 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[327,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[327,28,28,], ) 
 shape '[327, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:43.110414 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[328,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[328,14,14,], ) 
 shape '[328, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:17:44.912462 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[328,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[328,28,28,], ) 
 shape '[328, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:46.710428 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[329,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[329,14,14,], ) 
 shape '[329, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:17:48.544768 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[329,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[329,28,28,], ) 
 shape '[329, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:50.490622 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[330,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[330,28,28,], ) 
 shape '[330, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:52.697265 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[331,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[331,14,14,], ) 
 shape '[331, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:17:54.006408 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[331,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[331,28,28,], ) 
 shape '[331, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:55.816136 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[332,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[332,14,14,], ) 
 shape '[332, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:17:57.629255 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[332,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[332,28,28,], ) 
 shape '[332, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:17:59.812636 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[333,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[333,28,28,], ) 
 shape '[333, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:01.164956 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[334,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[334,28,28,], ) 
 shape '[334, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:02.978243 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[335,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[335,28,28,], ) 
 shape '[335, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:04.765882 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[336,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[336,14,14,], ) 
 shape '[336, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:18:06.580701 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[336,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[336,28,28,], ) 
 shape '[336, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:08.509168 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[337,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[337,14,14,], ) 
 shape '[337, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:18:10.336337 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[337,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[337,28,28,], ) 
 shape '[337, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:12.140654 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[338,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[338,28,28,], ) 
 shape '[338, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:13.967639 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[339,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[339,14,14,], ) 
 shape '[339, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:18:15.770144 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[339,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[339,28,28,], ) 
 shape '[339, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:17.572196 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[340,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[340,14,14,], ) 
 shape '[340, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:18:19.767876 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[340,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[340,28,28,], ) 
 shape '[340, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:21.096407 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[341,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[341,28,28,], ) 
 shape '[341, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:22.904716 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[342,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[342,14,14,], ) 
 shape '[342, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:18:24.706340 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[342,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[342,28,28,], ) 
 shape '[342, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:26.513134 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[343,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[343,14,14,], ) 
 shape '[343, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:18:28.545414 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[343,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[343,28,28,], ) 
 shape '[343, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:30.630855 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[344,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[344,14,14,], ) 
 shape '[344, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:18:33.085155 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[344,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[344,28,28,], ) 
 shape '[344, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:34.967562 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[345,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[345,14,14,], ) 
 shape '[345, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:18:36.858607 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[346,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[346,14,14,], ) 
 shape '[346, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:18:39.163585 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[346,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[346,28,28,], ) 
 shape '[346, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:40.555463 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[347,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[347,14,14,], ) 
 shape '[347, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:18:42.881790 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[348,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[348,28,28,], ) 
 shape '[348, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:44.296608 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[349,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[349,28,28,], ) 
 shape '[349, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:46.268399 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[350,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[350,14,14,], ) 
 shape '[350, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:18:48.152456 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[350,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[350,28,28,], ) 
 shape '[350, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:50.051594 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[352,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[352,28,28,], ) 
 shape '[352, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:51.931159 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[353,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[353,14,14,], ) 
 shape '[353, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:18:53.830120 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[353,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[353,28,28,], ) 
 shape '[353, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:55.713652 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[354,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[354,14,14,], ) 
 shape '[354, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:18:57.610537 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[354,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[354,28,28,], ) 
 shape '[354, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:18:59.515418 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[355,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[355,14,14,], ) 
 shape '[355, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:19:01.780615 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[355,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[355,28,28,], ) 
 shape '[355, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:19:03.240037 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[356,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[356,14,14,], ) 
 shape '[356, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:19:05.121519 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[356,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[356,28,28,], ) 
 shape '[356, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:19:06.950235 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[357,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[357,28,28,], ) 
 shape '[357, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:19:08.875771 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[358,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[358,14,14,], ) 
 shape '[358, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:19:10.520257 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[358,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[358,28,28,], ) 
 shape '[358, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:19:12.732987 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[359,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[359,14,14,], ) 
 shape '[359, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:19:14.677537 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[359,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[359,28,28,], ) 
 shape '[359, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:19:16.026064 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[360,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[360,14,14,], ) 
 shape '[360, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:19:17.838108 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[360,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[360,28,28,], ) 
 shape '[360, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:19:20.059970 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[361,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[361,14,14,], ) 
 shape '[361, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:19:21.391884 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[362,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[362,14,14,], ) 
 shape '[362, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:19:23.219524 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[362,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[362,28,28,], ) 
 shape '[362, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:19:25.013716 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[363,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[363,14,14,], ) 
 shape '[363, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:19:26.830561 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[364,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[364,28,28,], ) 
 shape '[364, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:19:28.642002 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[365,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[365,14,14,], ) 
 shape '[365, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:19:30.458541 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[365,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[365,28,28,], ) 
 shape '[365, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:19:32.293187 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[366,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[366,14,14,], ) 
 shape '[366, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:19:34.107639 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[366,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[366,28,28,], ) 
 shape '[366, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:19:35.927465 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[367,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[367,14,14,], ) 
 shape '[367, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:19:38.135569 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[367,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[367,28,28,], ) 
 shape '[367, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:19:39.469987 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[368,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[368,14,14,], ) 
 shape '[368, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:19:41.692888 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[368,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[368,28,28,], ) 
 shape '[368, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:19:43.670113 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[369,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[369,14,14,], ) 
 shape '[369, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:19:45.073269 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[369,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[369,28,28,], ) 
 shape '[369, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:19:46.866917 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[370,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[370,14,14,], ) 
 shape '[370, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:19:48.711094 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[371,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[371,28,28,], ) 
 shape '[371, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:19:50.669904 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[372,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[372,28,28,], ) 
 shape '[372, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:19:52.899151 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[373,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[373,14,14,], ) 
 shape '[373, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:19:54.206482 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[374,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[374,14,14,], ) 
 shape '[374, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:19:56.234424 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[374,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[374,28,28,], ) 
 shape '[374, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:19:58.510288 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[375,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[375,14,14,], ) 
 shape '[375, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:20:00.592436 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[375,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[375,28,28,], ) 
 shape '[375, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:02.074205 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[376,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[376,14,14,], ) 
 shape '[376, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:20:04.116364 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[376,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[376,28,28,], ) 
 shape '[376, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:06.511782 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[377,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[377,14,14,], ) 
 shape '[377, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:20:08.840357 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[377,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[377,28,28,], ) 
 shape '[377, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:10.903022 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[378,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[378,28,28,], ) 
 shape '[378, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:12.900217 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[379,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[379,14,14,], ) 
 shape '[379, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:20:14.908608 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[379,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[379,28,28,], ) 
 shape '[379, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:16.249602 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[380,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[380,28,28,], ) 
 shape '[380, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:18.243452 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[381,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[381,14,14,], ) 
 shape '[381, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:20:20.144110 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[381,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[381,28,28,], ) 
 shape '[381, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:22.047753 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[382,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[382,14,14,], ) 
 shape '[382, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:20:23.977252 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[382,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[382,28,28,], ) 
 shape '[382, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:25.902406 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[383,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[383,14,14,], ) 
 shape '[383, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:20:27.800353 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[383,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[383,28,28,], ) 
 shape '[383, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:29.705821 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[384,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[384,14,14,], ) 
 shape '[384, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:20:31.731173 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[384,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[384,28,28,], ) 
 shape '[384, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:33.995127 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[385,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[385,14,14,], ) 
 shape '[385, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:20:35.462878 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[385,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[385,28,28,], ) 
 shape '[385, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:37.375311 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[386,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[386,14,14,], ) 
 shape '[386, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:20:39.195864 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[386,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[386,28,28,], ) 
 shape '[386, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:41.095312 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[387,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[387,14,14,], ) 
 shape '[387, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:20:42.937172 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[387,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[387,28,28,], ) 
 shape '[387, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:45.127220 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[388,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[388,14,14,], ) 
 shape '[388, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:20:46.475445 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[388,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[388,28,28,], ) 
 shape '[388, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:48.283440 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[389,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[389,28,28,], ) 
 shape '[389, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:50.513433 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[390,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[390,14,14,], ) 
 shape '[390, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:20:52.456367 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[392,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[392,14,14,], ) 
 shape '[392, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:20:53.809962 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[392,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[392,28,28,], ) 
 shape '[392, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:55.626132 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[393,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[393,14,14,], ) 
 shape '[393, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:20:57.810862 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[393,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[393,28,28,], ) 
 shape '[393, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:20:59.274007 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[394,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[394,14,14,], ) 
 shape '[394, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:21:01.124034 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[394,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[394,28,28,], ) 
 shape '[394, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:02.963267 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[395,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[395,28,28,], ) 
 shape '[395, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:04.765011 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[396,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[396,28,28,], ) 
 shape '[396, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:06.616492 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[397,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[397,28,28,], ) 
 shape '[397, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:08.476670 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[398,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[398,28,28,], ) 
 shape '[398, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:10.322767 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[399,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[399,28,28,], ) 
 shape '[399, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:12.120606 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[4,1,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[4,1,], ) 
 shape '[4, 1]' is invalid for input of size 4294967297
2025-03-15 15:21:13.970506 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[4,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[4,], ) 
 shape '[4]' is invalid for input of size 4294967297
2025-03-15 15:21:15.788360 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[400,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[400,14,14,], ) 
 shape '[400, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:21:18.017154 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[400,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[400,28,28,], ) 
 shape '[400, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:19.475244 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[401,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[401,14,14,], ) 
 shape '[401, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:21:21.292224 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[401,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[401,28,28,], ) 
 shape '[401, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:23.120215 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[402,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[402,28,28,], ) 
 shape '[402, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:24.926588 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[403,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[403,28,28,], ) 
 shape '[403, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:26.732704 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[404,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[404,14,14,], ) 
 shape '[404, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:21:28.559887 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[405,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[405,14,14,], ) 
 shape '[405, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:21:30.504901 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[405,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[405,28,28,], ) 
 shape '[405, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:32.391601 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[406,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[406,28,28,], ) 
 shape '[406, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:34.307819 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[407,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[407,28,28,], ) 
 shape '[407, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:36.219171 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[408,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[408,14,14,], ) 
 shape '[408, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:21:38.113785 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[408,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[408,28,28,], ) 
 shape '[408, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:39.994538 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[409,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[409,14,14,], ) 
 shape '[409, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:21:41.917598 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[410,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[410,14,14,], ) 
 shape '[410, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:21:44.136748 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[410,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[410,28,28,], ) 
 shape '[410, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:45.724066 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[411,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[411,14,14,], ) 
 shape '[411, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:21:47.989867 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[411,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[411,28,28,], ) 
 shape '[411, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:49.476119 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[413,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[413,14,14,], ) 
 shape '[413, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:21:51.384368 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[413,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[413,28,28,], ) 
 shape '[413, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:53.293613 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[414,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[414,28,28,], ) 
 shape '[414, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:55.189370 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[415,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[415,28,28,], ) 
 shape '[415, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:21:57.289666 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[417,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[417,14,14,], ) 
 shape '[417, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:21:59.571758 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[417,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[417,28,28,], ) 
 shape '[417, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:00.973643 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[418,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[418,14,14,], ) 
 shape '[418, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:22:02.982528 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[418,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[418,28,28,], ) 
 shape '[418, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:04.887781 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[419,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[419,14,14,], ) 
 shape '[419, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:22:07.157270 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[419,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[419,28,28,], ) 
 shape '[419, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:08.656236 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[421,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[421,14,14,], ) 
 shape '[421, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:22:10.930030 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[421,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[421,28,28,], ) 
 shape '[421, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:12.993282 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[422,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[422,28,28,], ) 
 shape '[422, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:14.980002 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[423,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[423,14,14,], ) 
 shape '[423, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:22:16.939697 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[423,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[423,28,28,], ) 
 shape '[423, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:18.636279 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[424,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[424,28,28,], ) 
 shape '[424, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:20.547451 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[425,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[425,28,28,], ) 
 shape '[425, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:22.367220 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[426,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[426,28,28,], ) 
 shape '[426, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:24.161078 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[427,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[427,28,28,], ) 
 shape '[427, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:25.979651 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[428,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[428,14,14,], ) 
 shape '[428, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:22:27.790836 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[428,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[428,28,28,], ) 
 shape '[428, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:29.617067 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[429,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[429,14,14,], ) 
 shape '[429, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:22:31.458575 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[429,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[429,28,28,], ) 
 shape '[429, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:33.270881 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[430,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[430,14,14,], ) 
 shape '[430, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:22:35.224021 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[431,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[431,14,14,], ) 
 shape '[431, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:22:37.053263 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[431,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[431,28,28,], ) 
 shape '[431, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:38.899960 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[432,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[432,28,28,], ) 
 shape '[432, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:40.721587 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[433,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[433,28,28,], ) 
 shape '[433, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:42.555103 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[434,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[434,14,14,], ) 
 shape '[434, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:22:44.393933 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[436,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[436,28,28,], ) 
 shape '[436, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:46.243697 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[439,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[439,14,14,], ) 
 shape '[439, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:22:48.043449 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[440,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[440,28,28,], ) 
 shape '[440, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:49.845637 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[441,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[441,28,28,], ) 
 shape '[441, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:51.676537 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[444,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[444,28,28,], ) 
 shape '[444, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:53.877823 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[445,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[445,28,28,], ) 
 shape '[445, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:55.214323 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[448,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[448,14,14,], ) 
 shape '[448, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:22:57.418266 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[448,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[448,28,28,], ) 
 shape '[448, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:22:58.773804 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[449,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[449,14,14,], ) 
 shape '[449, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:23:00.595677 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[449,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[449,28,28,], ) 
 shape '[449, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:02.418938 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[450,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[450,28,28,], ) 
 shape '[450, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:04.220319 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[452,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[452,14,14,], ) 
 shape '[452, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:23:06.046676 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[452,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[452,28,28,], ) 
 shape '[452, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:07.870993 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[453,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[453,14,14,], ) 
 shape '[453, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:23:09.735982 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[455,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[455,28,28,], ) 
 shape '[455, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:11.577750 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[457,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[457,28,28,], ) 
 shape '[457, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:13.442883 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[461,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[461,28,28,], ) 
 shape '[461, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:15.233654 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[464,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[464,28,28,], ) 
 shape '[464, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:17.130000 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[467,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[467,28,28,], ) 
 shape '[467, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:19.051643 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[469,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[469,14,14,], ) 
 shape '[469, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:23:21.345691 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[470,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[470,14,14,], ) 
 shape '[470, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:23:22.849366 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[470,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[470,28,28,], ) 
 shape '[470, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:24.798645 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[472,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[472,28,28,], ) 
 shape '[472, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:27.306342 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[478,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[478,28,28,], ) 
 shape '[478, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:29.193790 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[482,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[482,14,14,], ) 
 shape '[482, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:23:31.117887 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[483,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[483,28,28,], ) 
 shape '[483, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:33.103629 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[484,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[484,28,28,], ) 
 shape '[484, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:34.999624 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[486,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[486,28,28,], ) 
 shape '[486, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:36.891457 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[494,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[494,28,28,], ) 
 shape '[494, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:38.796046 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[495,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[495,14,14,], ) 
 shape '[495, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:23:40.823458 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[498,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[498,14,14,], ) 
 shape '[498, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:23:42.591541 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[499,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[499,28,28,], ) 
 shape '[499, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:44.475868 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[505,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[505,28,28,], ) 
 shape '[505, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:46.359940 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[510,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[510,28,28,], ) 
 shape '[510, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:48.289152 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[512,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[512,14,14,], ) 
 shape '[512, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:23:50.196000 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[512,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[512,28,28,], ) 
 shape '[512, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:52.096480 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[6,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[6,], ) 
 shape '[6]' is invalid for input of size 4294967297
2025-03-15 15:23:54.004442 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[80,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[80,28,28,], ) 
 shape '[80, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:55.881248 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[94,14,14,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[94,14,14,], ) 
 shape '[94, 14, 14]' is invalid for input of size 4294967297
2025-03-15 15:23:57.811991 test begin: paddle.reshape(Tensor([4294967297],"float16"), list[97,28,28,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), list[97,28,28,], ) 
 shape '[97, 28, 28]' is invalid for input of size 4294967297
2025-03-15 15:23:59.697694 test begin: paddle.reshape(Tensor([4294967297],"float16"), shape=list[-1,128,], )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), shape=list[-1,128,], ) 
 shape '[-1, 128]' is invalid for input of size 4294967297
2025-03-15 15:24:01.498451 test begin: paddle.reshape(Tensor([4294967297],"float16"), shape=list[1,-1,], )

[Pass] paddle.reshape(Tensor([4294967297],"float16"), shape=list[1,-1,], )
2025-03-15 15:40:27.809532 test begin: paddle.reshape(Tensor([4294967297],"float16"), tuple(-1,1,), )

[Pass] paddle.reshape(Tensor([4294967297],"float16"), tuple(-1,1,), )
2025-03-15 15:57:16.834616 test begin: paddle.reshape(Tensor([4294967297],"float16"), tuple(1,-1,), )

[Pass] paddle.reshape(Tensor([4294967297],"float16"), tuple(1,-1,), )
2025-03-15 16:13:18.242406 test begin: paddle.reshape(Tensor([4294967297],"float16"), tuple(128,-1,), )

[torch error] paddle.reshape(Tensor([4294967297],"float16"), tuple(128,-1,), ) 
 shape '[128, -1]' is invalid for input of size 4294967297
2025-03-15 16:13:22.133299 test begin: paddle.reshape(Tensor([4294968, 1, 1000],"float16"), shape=list[-1,1000,], )

[Pass] paddle.reshape(Tensor([4294968, 1, 1000],"float16"), shape=list[-1,1000,], )
2025-03-15 16:29:36.496256 test begin: paddle.reshape(Tensor([4294968, 1000],"float16"), shape=list[-1,1000,], )

[Pass] paddle.reshape(Tensor([4294968, 1000],"float16"), shape=list[-1,1000,], )
2025-03-15 16:46:02.030866 test begin: paddle.reshape(Tensor([4296, 12, 83328],"float16"), shape=tuple(-1,248,336,), )

[Pass] paddle.reshape(Tensor([4296, 12, 83328],"float16"), shape=tuple(-1,248,336,), )
2025-03-15 17:02:07.462075 test begin: paddle.reshape(Tensor([4308, 10, 99712],"float16"), shape=tuple(-1,328,304,), )

[Pass] paddle.reshape(Tensor([4308, 10, 99712],"float16"), shape=tuple(-1,328,304,), )
2025-03-15 17:18:19.933748 test begin: paddle.reshape(Tensor([4316, 9, 272, 216],"float32"), shape=list[-1,272,216,], )

[Pass] paddle.reshape(Tensor([4316, 9, 272, 216],"float32"), shape=list[-1,272,216,], )
2025-03-15 17:21:19.004073 test begin: paddle.reshape(Tensor([43185, 296, 336],"float16"), shape=tuple(232,-1,), )

[torch error] paddle.reshape(Tensor([43185, 296, 336],"float16"), shape=tuple(232,-1,), ) 
 shape '[232, -1]' is invalid for input of size 4295007360
2025-03-15 17:21:22.900675 test begin: paddle.reshape(Tensor([4319, 10, 99456],"float16"), shape=tuple(-1,296,336,), )

[Pass] paddle.reshape(Tensor([4319, 10, 99456],"float16"), shape=tuple(-1,296,336,), )
2025-03-15 17:37:44.943015 test begin: paddle.reshape(Tensor([432, 152, 272, 128],"float32"), shape=list[20,-1,128,], )

[torch error] paddle.reshape(Tensor([432, 152, 272, 128],"float32"), shape=list[20,-1,128,], ) 
 shape '[20, -1, 128]' is invalid for input of size 2286157824
2025-03-15 17:37:48.955673 test begin: paddle.reshape(Tensor([4329, 12, 82688],"float16"), shape=tuple(-1,304,272,), )

[Pass] paddle.reshape(Tensor([4329, 12, 82688],"float16"), shape=tuple(-1,304,272,), )
2025-03-15 17:54:42.281390 test begin: paddle.reshape(Tensor([4339, 13, 76160],"float16"), shape=tuple(-1,280,272,), )

[Pass] paddle.reshape(Tensor([4339, 13, 76160],"float16"), shape=tuple(-1,280,272,), )
2025-03-15 18:11:24.589081 test begin: paddle.reshape(Tensor([4353, 1024, 512],"float32"), list[1024,512,1,1,], )

[torch error] paddle.reshape(Tensor([4353, 1024, 512],"float32"), list[1024,512,1,1,], ) 
 shape '[1024, 512, 1, 1]' is invalid for input of size 2282225664
2025-03-15 18:11:28.421152 test begin: paddle.reshape(Tensor([4353, 512, 1024],"float32"), list[-1,1024,], )

[Pass] paddle.reshape(Tensor([4353, 512, 1024],"float32"), list[-1,1024,], )
2025-03-15 18:14:30.063611 test begin: paddle.reshape(Tensor([4353, 512, 512, 2],"float32"), list[-1,2,], )

[Pass] paddle.reshape(Tensor([4353, 512, 512, 2],"float32"), list[-1,2,], )
2025-03-15 18:17:17.287156 test begin: paddle.reshape(Tensor([4361, 15, 65664],"float16"), shape=tuple(-1,216,304,), )

[Pass] paddle.reshape(Tensor([4361, 15, 65664],"float16"), shape=tuple(-1,216,304,), )
2025-03-15 18:33:28.675352 test begin: paddle.reshape(Tensor([4365, 15, 65600],"float16"), shape=tuple(-1,328,200,), )

[Pass] paddle.reshape(Tensor([4365, 15, 65600],"float16"), shape=tuple(-1,328,200,), )
2025-03-15 18:49:42.942076 test begin: paddle.reshape(Tensor([43691, 128, 768],"float16"), list[-1,768,], )

[Pass] paddle.reshape(Tensor([43691, 128, 768],"float16"), list[-1,768,], )
2025-03-15 19:06:48.184212 test begin: paddle.reshape(Tensor([44, 170582, 304],"float32"), shape=tuple(44,-1,), )

[Pass] paddle.reshape(Tensor([44, 170582, 304],"float32"), shape=tuple(44,-1,), )
2025-03-15 19:09:48.661352 test begin: paddle.reshape(Tensor([44, 190651, 272],"float32"), shape=tuple(44,-1,), )

[Pass] paddle.reshape(Tensor([44, 190651, 272],"float32"), shape=tuple(44,-1,), )
2025-03-15 19:12:35.647730 test begin: paddle.reshape(Tensor([44, 200, 259285],"float32"), shape=tuple(44,-1,), )

[Pass] paddle.reshape(Tensor([44, 200, 259285],"float32"), shape=tuple(44,-1,), )
2025-03-15 19:15:20.408168 test begin: paddle.reshape(Tensor([44, 200, 488065],"float16"), shape=tuple(44,-1,), )

[Pass] paddle.reshape(Tensor([44, 200, 488065],"float16"), shape=tuple(44,-1,), )
2025-03-15 19:31:53.255155 test begin: paddle.reshape(Tensor([44, 305041, 320],"float16"), shape=tuple(44,-1,), )

[Pass] paddle.reshape(Tensor([44, 305041, 320],"float16"), shape=tuple(44,-1,), )
2025-03-15 19:49:11.872729 test begin: paddle.reshape(Tensor([44, 321096, 304],"float16"), shape=tuple(44,-1,), )

[Pass] paddle.reshape(Tensor([44, 321096, 304],"float16"), shape=tuple(44,-1,), )
2025-03-15 20:06:04.157232 test begin: paddle.reshape(Tensor([44, 358871, 272],"float16"), shape=tuple(44,-1,), )

[Pass] paddle.reshape(Tensor([44, 358871, 272],"float16"), shape=tuple(44,-1,), )
2025-03-15 20:23:35.810791 test begin: paddle.reshape(Tensor([441506, 4, 19, 34, 2],"float32"), list[-1,2,], )

[Pass] paddle.reshape(Tensor([441506, 4, 19, 34, 2],"float32"), list[-1,2,], )
2025-03-15 20:26:23.609662 test begin: paddle.reshape(Tensor([44151, 1, 97280],"float16"), shape=tuple(-1,320,304,), )

[Pass] paddle.reshape(Tensor([44151, 1, 97280],"float16"), shape=tuple(-1,320,304,), )
2025-03-15 20:43:03.523048 test begin: paddle.reshape(Tensor([4416, 10, 97280],"float16"), shape=tuple(-1,304,320,), )

[Pass] paddle.reshape(Tensor([4416, 10, 97280],"float16"), shape=tuple(-1,304,320,), )
2025-03-15 20:59:41.405545 test begin: paddle.reshape(Tensor([4416, 10, 97280],"float16"), shape=tuple(-1,320,304,), )

[Pass] paddle.reshape(Tensor([4416, 10, 97280],"float16"), shape=tuple(-1,320,304,), )
2025-03-15 21:16:23.344912 test begin: paddle.reshape(Tensor([4446, 12, 80512],"float16"), shape=tuple(-1,272,296,), )

[Pass] paddle.reshape(Tensor([4446, 12, 80512],"float16"), shape=tuple(-1,272,296,), )
2025-03-15 21:32:56.964818 test begin: paddle.reshape(Tensor([4456449, 1, 8, 64],"float32"), shape=list[13,-1,64,], )

[torch error] paddle.reshape(Tensor([4456449, 1, 8, 64],"float32"), shape=list[13,-1,64,], ) 
 shape '[13, -1, 64]' is invalid for input of size 2281701888
2025-03-15 21:33:00.967656 test begin: paddle.reshape(Tensor([4456449, 16, 16, 2],"float32"), shape=tuple(-1,2,), )

[Pass] paddle.reshape(Tensor([4456449, 16, 16, 2],"float32"), shape=tuple(-1,2,), )
2025-03-15 21:36:07.119836 test begin: paddle.reshape(Tensor([4456449, 16, 2, 16],"float32"), shape=list[13,-1,32,], )

[torch error] paddle.reshape(Tensor([4456449, 16, 2, 16],"float32"), shape=list[13,-1,32,], ) 
 shape '[13, -1, 32]' is invalid for input of size 2281701888
2025-03-15 21:36:10.952924 test begin: paddle.reshape(Tensor([4456449, 256, 1, 2],"float32"), shape=tuple(512,-1,), )

[Pass] paddle.reshape(Tensor([4456449, 256, 1, 2],"float32"), shape=tuple(512,-1,), )
2025-03-15 21:39:08.783202 test begin: paddle.reshape(Tensor([4456449, 4, 8, 16],"float32"), list[14,4,16,8,], )

[torch error] paddle.reshape(Tensor([4456449, 4, 8, 16],"float32"), list[14,4,16,8,], ) 
 shape '[14, 4, 16, 8]' is invalid for input of size 2281701888
2025-03-15 21:39:13.155366 test begin: paddle.reshape(Tensor([4456449, 512, 1, 1],"float32"), shape=list[-1,512,], )

[Pass] paddle.reshape(Tensor([4456449, 512, 1, 1],"float32"), shape=list[-1,512,], )
2025-03-15 21:42:25.023645 test begin: paddle.reshape(Tensor([4456449, 512],"float32"), list[1,512,1,1,], )

[torch error] paddle.reshape(Tensor([4456449, 512],"float32"), list[1,512,1,1,], ) 
 shape '[1, 512, 1, 1]' is invalid for input of size 2281701888
2025-03-15 21:42:29.447547 test begin: paddle.reshape(Tensor([4456449, 512],"float32"), list[8,512,1,1,], )

[torch error] paddle.reshape(Tensor([4456449, 512],"float32"), list[8,512,1,1,], ) 
 shape '[8, 512, 1, 1]' is invalid for input of size 2281701888
2025-03-15 21:42:31.093302 test begin: paddle.reshape(Tensor([4457, 5, 320, 320],"float32"), shape=list[-1,320,320,], )

[Pass] paddle.reshape(Tensor([4457, 5, 320, 320],"float32"), shape=list[-1,320,320,], )
2025-03-15 21:45:10.475836 test begin: paddle.reshape(Tensor([4460, 12, 80256],"float16"), shape=tuple(-1,264,304,), )

[Pass] paddle.reshape(Tensor([4460, 12, 80256],"float16"), shape=tuple(-1,264,304,), )
2025-03-15 22:02:19.897064 test begin: paddle.reshape(Tensor([4468, 6, 280, 304],"float32"), shape=list[-1,280,304,], )

[Pass] paddle.reshape(Tensor([4468, 6, 280, 304],"float32"), shape=list[-1,280,304,], )
2025-03-15 22:06:58.676345 test begin: paddle.reshape(Tensor([4468, 6, 85120],"float32"), shape=tuple(-1,280,304,), )

[Pass] paddle.reshape(Tensor([4468, 6, 85120],"float32"), shape=tuple(-1,280,304,), )
2025-03-15 22:11:05.820660 test begin: paddle.reshape(Tensor([447744, 13, 28, 14],"int32"), tuple(-1,14,), )

[Pass] paddle.reshape(Tensor([447744, 13, 28, 14],"int32"), tuple(-1,14,), )
2025-03-15 22:14:16.588457 test begin: paddle.reshape(Tensor([447744, 52, 7, 14],"float32"), tuple(2,13,4,7,-1,), )

[Pass] paddle.reshape(Tensor([447744, 52, 7, 14],"float32"), tuple(2,13,4,7,-1,), )
2025-03-15 22:17:38.369410 test begin: paddle.reshape(Tensor([45, 50704476],"float32"), list[5,3,3,3,], )

[torch error] paddle.reshape(Tensor([45, 50704476],"float32"), list[5,3,3,3,], ) 
 shape '[5, 3, 3, 3]' is invalid for input of size 2281701420
2025-03-15 22:17:43.044249 test begin: paddle.reshape(Tensor([45000, 50705],"int64"), list[9,5000,10,], name="Categorical_sample", )

[torch error] paddle.reshape(Tensor([45000, 50705],"int64"), list[9,5000,10,], name="Categorical_sample", ) 
 shape '[9, 5000, 10]' is invalid for input of size 2281725000
2025-03-15 22:17:50.339464 test begin: paddle.reshape(Tensor([452, 68, 232, 320],"float32"), shape=list[-1,232,320,], )

[Pass] paddle.reshape(Tensor([452, 68, 232, 320],"float32"), shape=list[-1,232,320,], )
2025-03-15 22:20:50.233725 test begin: paddle.reshape(Tensor([4528, 9, 200, 280],"float32"), shape=list[-1,200,280,], )

[Pass] paddle.reshape(Tensor([4528, 9, 200, 280],"float32"), shape=list[-1,200,280,], )
2025-03-15 22:23:48.823643 test begin: paddle.reshape(Tensor([4529, 10, 94848],"float16"), shape=tuple(-1,304,312,), )

[Pass] paddle.reshape(Tensor([4529, 10, 94848],"float16"), shape=tuple(-1,304,312,), )
2025-03-15 22:41:32.496699 test begin: paddle.reshape(Tensor([4529, 10, 94848],"float16"), shape=tuple(-1,312,304,), )

[Pass] paddle.reshape(Tensor([4529, 10, 94848],"float16"), shape=tuple(-1,312,304,), )
2025-03-15 22:59:17.144781 test begin: paddle.reshape(Tensor([4529, 15, 63232],"float16"), shape=tuple(-1,208,304,), )

[Pass] paddle.reshape(Tensor([4529, 15, 63232],"float16"), shape=tuple(-1,208,304,), )
2025-03-15 23:15:42.183450 test begin: paddle.reshape(Tensor([45474, 1024, 7, 7],"float32"), list[8,1024,-1,], )

[torch error] paddle.reshape(Tensor([45474, 1024, 7, 7],"float32"), list[8,1024,-1,], ) 
 shape '[8, 1024, -1]' is invalid for input of size 2281703424
2025-03-15 23:15:46.725874 test begin: paddle.reshape(Tensor([456340276, 5, 1],"float32"), list[13,5,1,1,], )

[torch error] paddle.reshape(Tensor([456340276, 5, 1],"float32"), list[13,5,1,1,], ) 
 shape '[13, 5, 1, 1]' is invalid for input of size 2281701380
2025-03-15 23:15:48.242040 test begin: paddle.reshape(Tensor([456340276, 5, 1],"float32"), list[52,5,1,1,], )

[torch error] paddle.reshape(Tensor([456340276, 5, 1],"float32"), list[52,5,1,1,], ) 
 shape '[52, 5, 1, 1]' is invalid for input of size 2281701380
2025-03-15 23:15:49.837233 test begin: paddle.reshape(Tensor([456340276, 5],"float32"), list[10,], )

[torch error] paddle.reshape(Tensor([456340276, 5],"float32"), list[10,], ) 
 shape '[10]' is invalid for input of size 2281701380
2025-03-15 23:15:51.220164 test begin: paddle.reshape(Tensor([456340276, 5],"float32"), list[15,4,], )

[torch error] paddle.reshape(Tensor([456340276, 5],"float32"), list[15,4,], ) 
 shape '[15, 4]' is invalid for input of size 2281701380
2025-03-15 23:15:53.205637 test begin: paddle.reshape(Tensor([456340276, 5],"float32"), list[2,25,], )

[torch error] paddle.reshape(Tensor([456340276, 5],"float32"), list[2,25,], ) 
 shape '[2, 25]' is invalid for input of size 2281701380
2025-03-15 23:15:55.194803 test begin: paddle.reshape(Tensor([456340276, 5],"float32"), list[3,5,], )

[torch error] paddle.reshape(Tensor([456340276, 5],"float32"), list[3,5,], ) 
 shape '[3, 5]' is invalid for input of size 2281701380
2025-03-15 23:15:57.165646 test begin: paddle.reshape(Tensor([456340276, 5],"float32"), tuple(3,-1,), )

[torch error] paddle.reshape(Tensor([456340276, 5],"float32"), tuple(3,-1,), ) 
 shape '[3, -1]' is invalid for input of size 2281701380
2025-03-15 23:15:59.154824 test begin: paddle.reshape(Tensor([456340276, 5],"int64"), list[10,], )

[torch error] paddle.reshape(Tensor([456340276, 5],"int64"), list[10,], ) 
 shape '[10]' is invalid for input of size 2281701380
2025-03-15 23:16:07.035823 test begin: paddle.reshape(Tensor([456340276, 5],"int64"), list[15,4,], )

[torch error] paddle.reshape(Tensor([456340276, 5],"int64"), list[15,4,], ) 
 shape '[15, 4]' is invalid for input of size 2281701380
2025-03-15 23:16:10.947143 test begin: paddle.reshape(Tensor([456340276, 5],"int64"), list[2,25,], )

[torch error] paddle.reshape(Tensor([456340276, 5],"int64"), list[2,25,], ) 
 shape '[2, 25]' is invalid for input of size 2281701380
2025-03-15 23:16:14.721957 test begin: paddle.reshape(Tensor([456341, 50, 50, 2],"float32"), tuple(-1,2,), )

[Pass] paddle.reshape(Tensor([456341, 50, 50, 2],"float32"), tuple(-1,2,), )
2025-03-15 23:20:30.376449 test begin: paddle.reshape(Tensor([45653, 280, 336],"float16"), shape=tuple(264,-1,), )

[torch error] paddle.reshape(Tensor([45653, 280, 336],"float16"), shape=tuple(264,-1,), ) 
 shape '[264, -1]' is invalid for input of size 4295034240
2025-03-15 23:20:34.712149 test begin: paddle.reshape(Tensor([4566, 10, 94080],"float16"), shape=tuple(-1,280,336,), )

[Pass] paddle.reshape(Tensor([4566, 10, 94080],"float16"), shape=tuple(-1,280,336,), )
2025-03-15 23:37:44.442932 test begin: paddle.reshape(Tensor([4566, 10, 94080],"float16"), shape=tuple(-1,336,280,), )

[Pass] paddle.reshape(Tensor([4566, 10, 94080],"float16"), shape=tuple(-1,336,280,), )
2025-03-15 23:55:07.066144 test begin: paddle.reshape(Tensor([4601, 11, 84864],"float16"), shape=tuple(-1,272,312,), )

[Pass] paddle.reshape(Tensor([4601, 11, 84864],"float16"), shape=tuple(-1,272,312,), )
2025-03-16 00:11:46.174880 test begin: paddle.reshape(Tensor([4601, 11, 84864],"float16"), shape=tuple(-1,312,272,), )

[Pass] paddle.reshape(Tensor([4601, 11, 84864],"float16"), shape=tuple(-1,312,272,), )
2025-03-16 00:28:46.517524 test begin: paddle.reshape(Tensor([4645, 17, 54400],"float16"), shape=tuple(-1,272,200,), )

[Pass] paddle.reshape(Tensor([4645, 17, 54400],"float16"), shape=tuple(-1,272,200,), )
2025-03-16 00:46:09.865787 test begin: paddle.reshape(Tensor([46475, 1, 92416],"float16"), shape=tuple(-1,304,304,), )

[Pass] paddle.reshape(Tensor([46475, 1, 92416],"float16"), shape=tuple(-1,304,304,), )
2025-03-16 01:02:47.165408 test begin: paddle.reshape(Tensor([46475, 304, 304],"float16"), shape=tuple(200,-1,), )

[Pass] paddle.reshape(Tensor([46475, 304, 304],"float16"), shape=tuple(200,-1,), )
2025-03-16 01:19:47.616554 test begin: paddle.reshape(Tensor([46475, 304, 304],"float16"), shape=tuple(216,-1,), )

[torch error] paddle.reshape(Tensor([46475, 304, 304],"float16"), shape=tuple(216,-1,), ) 
 shape '[216, -1]' is invalid for input of size 4295033600
2025-03-16 01:19:51.330737 test begin: paddle.reshape(Tensor([46475, 304, 304],"float16"), shape=tuple(240,-1,), )

[torch error] paddle.reshape(Tensor([46475, 304, 304],"float16"), shape=tuple(240,-1,), ) 
 shape '[240, -1]' is invalid for input of size 4295033600
2025-03-16 01:19:52.681057 test begin: paddle.reshape(Tensor([46475, 304, 304],"float16"), shape=tuple(264,-1,), )

[torch error] paddle.reshape(Tensor([46475, 304, 304],"float16"), shape=tuple(264,-1,), ) 
 shape '[264, -1]' is invalid for input of size 4295033600
2025-03-16 01:19:54.210092 test begin: paddle.reshape(Tensor([46475, 304, 304],"float16"), shape=tuple(268,-1,), )

[torch error] paddle.reshape(Tensor([46475, 304, 304],"float16"), shape=tuple(268,-1,), ) 
 shape '[268, -1]' is invalid for input of size 4295033600
2025-03-16 01:19:55.204192 test begin: paddle.reshape(Tensor([46475, 304, 304],"float16"), shape=tuple(308,-1,), )

[torch error] paddle.reshape(Tensor([46475, 304, 304],"float16"), shape=tuple(308,-1,), ) 
 shape '[308, -1]' is invalid for input of size 4295033600
2025-03-16 01:19:57.279240 test begin: paddle.reshape(Tensor([4648, 10, 92416],"float16"), shape=tuple(-1,304,304,), )

[Pass] paddle.reshape(Tensor([4648, 10, 92416],"float16"), shape=tuple(-1,304,304,), )
2025-03-16 01:36:14.059696 test begin: paddle.reshape(Tensor([46565335, 7, 7],"float32"), list[1960,], )

[torch error] paddle.reshape(Tensor([46565335, 7, 7],"float32"), list[1960,], ) 
 shape '[1960]' is invalid for input of size 2281701415
2025-03-16 01:36:18.255196 test begin: paddle.reshape(Tensor([46565335, 7, 7],"float32"), tuple(13,4,7,-1,), )

[torch error] paddle.reshape(Tensor([46565335, 7, 7],"float32"), tuple(13,4,7,-1,), ) 
 shape '[13, 4, 7, -1]' is invalid for input of size 2281701415
2025-03-16 01:36:19.784607 test begin: paddle.reshape(Tensor([4661, 16, 57600],"float16"), shape=tuple(-1,200,288,), )

[Pass] paddle.reshape(Tensor([4661, 16, 57600],"float16"), shape=tuple(-1,200,288,), )
2025-03-16 01:53:03.268560 test begin: paddle.reshape(Tensor([4661, 9, 200, 272],"float32"), shape=list[-1,200,272,], )

[Pass] paddle.reshape(Tensor([4661, 9, 200, 272],"float32"), shape=list[-1,200,272,], )
2025-03-16 01:56:36.445723 test begin: paddle.reshape(Tensor([4661, 9, 54400],"float32"), shape=tuple(-1,200,272,), )

[Pass] paddle.reshape(Tensor([4661, 9, 54400],"float32"), shape=tuple(-1,200,272,), )
2025-03-16 02:00:10.545286 test begin: paddle.reshape(Tensor([4673, 14, 65664],"float16"), shape=tuple(-1,216,304,), )

[Pass] paddle.reshape(Tensor([4673, 14, 65664],"float16"), shape=tuple(-1,216,304,), )
2025-03-16 02:17:08.658651 test begin: paddle.reshape(Tensor([4685, 13, 70528],"float16"), shape=tuple(-1,232,304,), )

[Pass] paddle.reshape(Tensor([4685, 13, 70528],"float16"), shape=tuple(-1,232,304,), )
2025-03-16 02:34:21.094916 test begin: paddle.reshape(Tensor([46996, 272, 336],"float16"), shape=tuple(196,-1,), )

[torch error] paddle.reshape(Tensor([46996, 272, 336],"float16"), shape=tuple(196,-1,), ) 
 shape '[196, -1]' is invalid for input of size 4295058432
2025-03-16 02:34:25.061922 test begin: paddle.reshape(Tensor([46996, 272, 336],"float16"), shape=tuple(292,-1,), )

[torch error] paddle.reshape(Tensor([46996, 272, 336],"float16"), shape=tuple(292,-1,), ) 
 shape '[292, -1]' is invalid for input of size 4295058432
2025-03-16 02:34:26.877401 test begin: paddle.reshape(Tensor([46996, 272, 336],"float16"), shape=tuple(320,-1,), )

[torch error] paddle.reshape(Tensor([46996, 272, 336],"float16"), shape=tuple(320,-1,), ) 
 shape '[320, -1]' is invalid for input of size 4295058432
2025-03-16 02:34:28.452877 test begin: paddle.reshape(Tensor([4700, 10, 91392],"float16"), shape=tuple(-1,272,336,), )

[Pass] paddle.reshape(Tensor([4700, 10, 91392],"float16"), shape=tuple(-1,272,336,), )
2025-03-16 02:50:56.858355 test begin: paddle.reshape(Tensor([4700, 10, 91392],"float16"), shape=tuple(-1,336,272,), )

[Pass] paddle.reshape(Tensor([4700, 10, 91392],"float16"), shape=tuple(-1,336,272,), )
2025-03-16 03:07:56.021420 test begin: paddle.reshape(Tensor([4700, 12, 76160],"float16"), shape=tuple(-1,272,280,), )

[Pass] paddle.reshape(Tensor([4700, 12, 76160],"float16"), shape=tuple(-1,272,280,), )
2025-03-16 03:24:53.074356 test begin: paddle.reshape(Tensor([4700, 12, 76160],"float16"), shape=tuple(-1,280,272,), )

[Pass] paddle.reshape(Tensor([4700, 12, 76160],"float16"), shape=tuple(-1,280,272,), )
2025-03-16 03:41:53.395300 test begin: paddle.reshape(Tensor([4722, 11, 82688],"float16"), shape=tuple(-1,272,304,), )

[Pass] paddle.reshape(Tensor([4722, 11, 82688],"float16"), shape=tuple(-1,272,304,), )
2025-03-16 03:59:18.398176 test begin: paddle.reshape(Tensor([4722, 11, 82688],"float16"), shape=tuple(-1,304,272,), )

[Pass] paddle.reshape(Tensor([4722, 11, 82688],"float16"), shape=tuple(-1,304,272,), )
2025-03-16 04:16:31.722647 test begin: paddle.reshape(Tensor([4739, 6, 304, 264],"float32"), shape=list[-1,304,264,], )

[Pass] paddle.reshape(Tensor([4739, 6, 304, 264],"float32"), shape=list[-1,304,264,], )
2025-03-16 04:19:18.028080 test begin: paddle.reshape(Tensor([4748, 12, 75392],"float16"), shape=tuple(-1,248,304,), )

[Pass] paddle.reshape(Tensor([4748, 12, 75392],"float16"), shape=tuple(-1,248,304,), )
2025-03-16 04:36:55.037289 test begin: paddle.reshape(Tensor([47535446, 4, 6, 2],"float32"), list[13,4,2,6,], )

[torch error] paddle.reshape(Tensor([47535446, 4, 6, 2],"float32"), list[13,4,2,6,], ) 
 shape '[13, 4, 2, 6]' is invalid for input of size 2281701408
2025-03-16 04:36:58.903164 test begin: paddle.reshape(Tensor([4753545, 10, 16, 3],"float32"), shape=tuple(1,-1,1,), )

[Pass] paddle.reshape(Tensor([4753545, 10, 16, 3],"float32"), shape=tuple(1,-1,1,), )
2025-03-16 04:40:05.622867 test begin: paddle.reshape(Tensor([4753545, 4, 15, 8],"float32"), list[14,4,8,15,], )

[torch error] paddle.reshape(Tensor([4753545, 4, 15, 8],"float32"), list[14,4,8,15,], ) 
 shape '[14, 4, 8, 15]' is invalid for input of size 2281701600
2025-03-16 04:40:10.197327 test begin: paddle.reshape(Tensor([475355, 1, 3, 40, 40],"float32"), shape=list[3,1,3,40,40,], )

[torch error] paddle.reshape(Tensor([475355, 1, 3, 40, 40],"float32"), shape=list[3,1,3,40,40,], ) 
 shape '[3, 1, 3, 40, 40]' is invalid for input of size 2281704000
2025-03-16 04:40:11.786580 test begin: paddle.reshape(Tensor([475355, 1, 40, 40, 3],"float32"), shape=list[3,1,40,40,3,], )

[torch error] paddle.reshape(Tensor([475355, 1, 40, 40, 3],"float32"), shape=list[3,1,40,40,3,], ) 
 shape '[3, 1, 40, 40, 3]' is invalid for input of size 2281704000
2025-03-16 04:40:12.805092 test begin: paddle.reshape(Tensor([475355, 3, 40, 40],"float32"), list[3,3,40,40,], )

[torch error] paddle.reshape(Tensor([475355, 3, 40, 40],"float32"), list[3,3,40,40,], ) 
 shape '[3, 3, 40, 40]' is invalid for input of size 2281704000
2025-03-16 04:40:14.151496 test begin: paddle.reshape(Tensor([475355, 40, 40, 3],"float32"), list[3,40,40,3,], )

[torch error] paddle.reshape(Tensor([475355, 40, 40, 3],"float32"), list[3,40,40,3,], ) 
 shape '[3, 40, 40, 3]' is invalid for input of size 2281704000
2025-03-16 04:40:16.061107 test begin: paddle.reshape(Tensor([47711, 488, 2, 7, 7],"float32"), shape=list[2,976,7,7,], )

[torch error] paddle.reshape(Tensor([47711, 488, 2, 7, 7],"float32"), shape=list[2,976,7,7,], ) 
 shape '[2, 976, 7, 7]' is invalid for input of size 2281730864
2025-03-16 04:40:17.671425 test begin: paddle.reshape(Tensor([47711, 976, 7, 7],"float32"), shape=list[2,2,488,7,7,], )

[torch error] paddle.reshape(Tensor([47711, 976, 7, 7],"float32"), shape=list[2,2,488,7,7,], ) 
 shape '[2, 2, 488, 7, 7]' is invalid for input of size 2281730864
2025-03-16 04:40:18.676952 test begin: paddle.reshape(Tensor([4774, 10, 89984],"float16"), shape=tuple(-1,296,304,), )

[Pass] paddle.reshape(Tensor([4774, 10, 89984],"float16"), shape=tuple(-1,296,304,), )
2025-03-16 04:58:08.347085 test begin: paddle.reshape(Tensor([4799, 14, 63936],"float16"), shape=tuple(-1,216,296,), )

[Pass] paddle.reshape(Tensor([4799, 14, 63936],"float16"), shape=tuple(-1,216,296,), )
2025-03-16 05:14:57.725961 test begin: paddle.reshape(Tensor([48, 165054, 288],"float32"), shape=tuple(48,-1,), )

[Pass] paddle.reshape(Tensor([48, 165054, 288],"float32"), shape=tuple(48,-1,), )
2025-03-16 05:17:43.308921 test begin: paddle.reshape(Tensor([48, 174763, 272],"float32"), shape=tuple(48,-1,), )

[Pass] paddle.reshape(Tensor([48, 174763, 272],"float32"), shape=tuple(48,-1,), )
2025-03-16 05:20:42.086682 test begin: paddle.reshape(Tensor([48, 200, 237678],"float32"), shape=tuple(48,-1,), )

[Pass] paddle.reshape(Tensor([48, 200, 237678],"float32"), shape=tuple(48,-1,), )
2025-03-16 05:23:46.218339 test begin: paddle.reshape(Tensor([48, 200, 447393],"float16"), shape=tuple(48,-1,), )

[Pass] paddle.reshape(Tensor([48, 200, 447393],"float16"), shape=tuple(48,-1,), )
2025-03-16 05:40:12.847963 test begin: paddle.reshape(Tensor([48, 2048, 1, 23211],"float32"), list[-1,3,2048,], )

[Pass] paddle.reshape(Tensor([48, 2048, 1, 23211],"float32"), list[-1,3,2048,], )
2025-03-16 05:43:52.015271 test begin: paddle.reshape(Tensor([48, 2048, 1, 43691],"float16"), list[-1,3,2048,], )

[Pass] paddle.reshape(Tensor([48, 2048, 1, 43691],"float16"), list[-1,3,2048,], )
2025-03-16 05:59:49.092277 test begin: paddle.reshape(Tensor([48, 2048, 23211, 1],"float32"), list[-1,3,2048,], )

[Pass] paddle.reshape(Tensor([48, 2048, 23211, 1],"float32"), list[-1,3,2048,], )
2025-03-16 06:02:46.557242 test begin: paddle.reshape(Tensor([48, 2048, 43691, 1],"float16"), list[-1,3,2048,], )

[Pass] paddle.reshape(Tensor([48, 2048, 43691, 1],"float16"), list[-1,3,2048,], )
2025-03-16 06:19:09.352070 test begin: paddle.reshape(Tensor([48, 294338, 304],"float16"), shape=tuple(48,-1,), )

[Pass] paddle.reshape(Tensor([48, 294338, 304],"float16"), shape=tuple(48,-1,), )
2025-03-16 06:35:12.361937 test begin: paddle.reshape(Tensor([48, 310690, 288],"float16"), shape=tuple(48,-1,), )

[Pass] paddle.reshape(Tensor([48, 310690, 288],"float16"), shape=tuple(48,-1,), )
2025-03-16 06:51:08.019371 test begin: paddle.reshape(Tensor([48, 328966, 272],"float16"), shape=tuple(48,-1,), )

[Pass] paddle.reshape(Tensor([48, 328966, 272],"float16"), shape=tuple(48,-1,), )
2025-03-16 07:08:05.900226 test begin: paddle.reshape(Tensor([48, 47535446, 1, 1],"float32"), list[-1,3,2048,], )

[torch error] paddle.reshape(Tensor([48, 47535446, 1, 1],"float32"), list[-1,3,2048,], ) 
 shape '[-1, 3, 2048]' is invalid for input of size 2281701408
2025-03-16 07:08:10.024471 test begin: paddle.reshape(Tensor([48, 89478486, 1, 1],"float16"), list[-1,3,2048,], )

[torch error] paddle.reshape(Tensor([48, 89478486, 1, 1],"float16"), list[-1,3,2048,], ) 
 shape '[-1, 3, 2048]' is invalid for input of size 4294967328
2025-03-16 07:08:14.229939 test begin: paddle.reshape(Tensor([4815, 10, 89216],"float16"), shape=tuple(-1,272,328,), )

[Pass] paddle.reshape(Tensor([4815, 10, 89216],"float16"), shape=tuple(-1,272,328,), )
2025-03-16 07:24:20.085651 test begin: paddle.reshape(Tensor([4833, 7, 248, 272],"float32"), shape=list[-1,248,272,], )

[Pass] paddle.reshape(Tensor([4833, 7, 248, 272],"float32"), shape=list[-1,248,272,], )
2025-03-16 07:27:15.804619 test begin: paddle.reshape(Tensor([4850, 11, 80512],"float16"), shape=tuple(-1,272,296,), )

[Pass] paddle.reshape(Tensor([4850, 11, 80512],"float16"), shape=tuple(-1,272,296,), )
2025-03-16 07:43:10.717591 test begin: paddle.reshape(Tensor([485056, 48, 2, 7, 7],"float32"), shape=list[2,96,7,7,], )

[torch error] paddle.reshape(Tensor([485056, 48, 2, 7, 7],"float32"), shape=list[2,96,7,7,], ) 
 shape '[2, 96, 7, 7]' is invalid for input of size 2281703424
2025-03-16 07:43:14.641108 test begin: paddle.reshape(Tensor([485056, 96, 7, 7],"float32"), shape=list[2,2,48,7,7,], )

[torch error] paddle.reshape(Tensor([485056, 96, 7, 7],"float32"), shape=list[2,2,48,7,7,], ) 
 shape '[2, 2, 48, 7, 7]' is invalid for input of size 2281703424
2025-03-16 07:43:16.227886 test begin: paddle.reshape(Tensor([4867, 6, 264, 296],"float32"), shape=list[-1,264,296,], )

[Pass] paddle.reshape(Tensor([4867, 6, 264, 296],"float32"), shape=list[-1,264,296,], )
2025-03-16 07:46:21.029327 test begin: paddle.reshape(Tensor([4874, 15, 58752],"float16"), shape=tuple(-1,272,216,), )

[Pass] paddle.reshape(Tensor([4874, 15, 58752],"float16"), shape=tuple(-1,272,216,), )
2025-03-16 08:02:34.710403 test begin: paddle.reshape(Tensor([49165, 1, 87360],"float16"), shape=tuple(-1,280,312,), )

[Pass] paddle.reshape(Tensor([49165, 1, 87360],"float16"), shape=tuple(-1,280,312,), )
2025-03-16 08:18:42.454179 test begin: paddle.reshape(Tensor([4917, 14, 62400],"float16"), shape=tuple(-1,200,312,), )

[Pass] paddle.reshape(Tensor([4917, 14, 62400],"float16"), shape=tuple(-1,200,312,), )
2025-03-16 08:35:41.511687 test begin: paddle.reshape(Tensor([4935, 10, 87040],"float16"), shape=tuple(-1,272,320,), )

[Pass] paddle.reshape(Tensor([4935, 10, 87040],"float16"), shape=tuple(-1,272,320,), )
2025-03-16 08:52:09.301429 test begin: paddle.reshape(Tensor([4935, 16, 54400],"float16"), shape=tuple(-1,272,200,), )

[Pass] paddle.reshape(Tensor([4935, 16, 54400],"float16"), shape=tuple(-1,272,200,), )
2025-03-16 09:08:12.083473 test begin: paddle.reshape(Tensor([4942, 5, 312, 296],"float32"), shape=list[-1,312,296,], )

[Pass] paddle.reshape(Tensor([4942, 5, 312, 296],"float32"), shape=list[-1,312,296,], )
2025-03-16 09:11:08.057707 test begin: paddle.reshape(Tensor([49517, 128, 120, 3],"float32"), shape=tuple(2,-1,1,), )

[Pass] paddle.reshape(Tensor([49517, 128, 120, 3],"float32"), shape=tuple(2,-1,1,), )
2025-03-16 09:14:09.435977 test begin: paddle.reshape(Tensor([499, 46, 296, 336],"float32"), shape=list[-1,296,336,], )

[Pass] paddle.reshape(Tensor([499, 46, 296, 336],"float32"), shape=list[-1,296,336,], )
2025-03-16 09:17:10.955321 test begin: paddle.reshape(Tensor([4994, 10, 86016],"float16"), shape=tuple(-1,256,336,), )

[Pass] paddle.reshape(Tensor([4994, 10, 86016],"float16"), shape=tuple(-1,256,336,), )
2025-03-16 09:33:39.836804 test begin: paddle.reshape(Tensor([4994, 8, 107520],"float16"), shape=tuple(-1,336,320,), )

[Pass] paddle.reshape(Tensor([4994, 8, 107520],"float16"), shape=tuple(-1,336,320,), )
2025-03-16 09:50:01.176970 test begin: paddle.reshape(Tensor([4997, 11, 78144],"float16"), shape=tuple(-1,264,296,), )

[Pass] paddle.reshape(Tensor([4997, 11, 78144],"float16"), shape=tuple(-1,264,296,), )
2025-03-16 10:06:17.649696 test begin: paddle.reshape(Tensor([5, 10, 45634028],"float32"), list[5,10,8,], name="Normal_sample", )

[torch error] paddle.reshape(Tensor([5, 10, 45634028],"float32"), list[5,10,8,], name="Normal_sample", ) 
 shape '[5, 10, 8]' is invalid for input of size 2281701400
2025-03-16 10:06:21.736996 test begin: paddle.reshape(Tensor([5, 16901492, 3, 3, 3],"float32"), tuple(5,-1,), )

[Pass] paddle.reshape(Tensor([5, 16901492, 3, 3, 3],"float32"), tuple(5,-1,), )
2025-03-16 10:08:56.961603 test begin: paddle.reshape(Tensor([5, 20, 22817014],"float32"), list[-1,10,], )

[Pass] paddle.reshape(Tensor([5, 20, 22817014],"float32"), list[-1,10,], )
2025-03-16 10:12:00.580182 test begin: paddle.reshape(Tensor([5, 2112687, 6, 6, 6],"float32"), tuple(-1,6,), )

[Pass] paddle.reshape(Tensor([5, 2112687, 6, 6, 6],"float32"), tuple(-1,6,), )
2025-03-16 10:14:56.600573 test begin: paddle.reshape(Tensor([5, 228170138, 2],"float32"), tuple(5,-1,), )

[Pass] paddle.reshape(Tensor([5, 228170138, 2],"float32"), tuple(5,-1,), )
2025-03-16 10:18:06.209494 test begin: paddle.reshape(Tensor([5, 3, 16901492, 3, 3],"float32"), tuple(5,-1,), )

[Pass] paddle.reshape(Tensor([5, 3, 16901492, 3, 3],"float32"), tuple(5,-1,), )
2025-03-16 10:21:13.795273 test begin: paddle.reshape(Tensor([5, 3, 3, 16901492, 3],"float32"), tuple(5,-1,), )

[Pass] paddle.reshape(Tensor([5, 3, 3, 16901492, 3],"float32"), tuple(5,-1,), )
2025-03-16 10:24:12.567232 test begin: paddle.reshape(Tensor([5, 3, 3, 3, 16901492],"float32"), tuple(5,-1,), )

[Pass] paddle.reshape(Tensor([5, 3, 3, 3, 16901492],"float32"), tuple(5,-1,), )
2025-03-16 10:27:06.324055 test begin: paddle.reshape(Tensor([5, 3, 3, 50704476],"float32"), tuple(-1,3,), )

[Pass] paddle.reshape(Tensor([5, 3, 3, 50704476],"float32"), tuple(-1,3,), )
2025-03-16 10:30:22.084009 test begin: paddle.reshape(Tensor([5, 3, 3, 50704476],"float32"), tuple(5,-1,), )

[Pass] paddle.reshape(Tensor([5, 3, 3, 50704476],"float32"), tuple(5,-1,), )
2025-03-16 10:33:05.287488 test begin: paddle.reshape(Tensor([5, 3, 50704476, 3],"float32"), tuple(-1,3,), )

[Pass] paddle.reshape(Tensor([5, 3, 50704476, 3],"float32"), tuple(-1,3,), )
2025-03-16 10:36:16.915689 test begin: paddle.reshape(Tensor([5, 3, 50704476, 3],"float32"), tuple(5,-1,), )

[Pass] paddle.reshape(Tensor([5, 3, 50704476, 3],"float32"), tuple(5,-1,), )
2025-03-16 10:39:17.671962 test begin: paddle.reshape(Tensor([5, 4, 114085069],"float32"), tuple(5,-1,), )

[Pass] paddle.reshape(Tensor([5, 4, 114085069],"float32"), tuple(5,-1,), )
2025-03-16 10:42:40.804261 test begin: paddle.reshape(Tensor([5, 4, 3169030, 6, 6],"float32"), tuple(-1,6,), )

[Pass] paddle.reshape(Tensor([5, 4, 3169030, 6, 6],"float32"), tuple(-1,6,), )
2025-03-16 10:45:44.225127 test begin: paddle.reshape(Tensor([5, 4, 4, 4, 7130317],"float32"), tuple(5,-1,), )

[Pass] paddle.reshape(Tensor([5, 4, 4, 4, 7130317],"float32"), tuple(5,-1,), )
2025-03-16 10:48:56.075735 test begin: paddle.reshape(Tensor([5, 4, 4, 7130317, 4],"float32"), tuple(5,-1,), )

[Pass] paddle.reshape(Tensor([5, 4, 4, 7130317, 4],"float32"), tuple(5,-1,), )
2025-03-16 10:52:07.863226 test begin: paddle.reshape(Tensor([5, 4, 6, 3169030, 6],"float32"), tuple(-1,6,), )

[Pass] paddle.reshape(Tensor([5, 4, 6, 3169030, 6],"float32"), tuple(-1,6,), )
2025-03-16 10:55:13.817302 test begin: paddle.reshape(Tensor([5, 4, 6, 6, 3169030],"float32"), tuple(-1,6,), )

[Pass] paddle.reshape(Tensor([5, 4, 6, 6, 3169030],"float32"), tuple(-1,6,), )
2025-03-16 10:58:12.078186 test begin: paddle.reshape(Tensor([5, 4, 7130317, 4, 4],"float32"), tuple(5,-1,), )

[Pass] paddle.reshape(Tensor([5, 4, 7130317, 4, 4],"float32"), tuple(5,-1,), )
2025-03-16 11:01:30.341588 test begin: paddle.reshape(Tensor([5, 456340276],"float32"), list[5,3,3,3,3,], )

[torch error] paddle.reshape(Tensor([5, 456340276],"float32"), list[5,3,3,3,3,], ) 
 shape '[5, 3, 3, 3, 3]' is invalid for input of size 2281701380
2025-03-16 11:01:34.611586 test begin: paddle.reshape(Tensor([5, 456340276],"float32"), list[5,3,3,3,], )

[torch error] paddle.reshape(Tensor([5, 456340276],"float32"), list[5,3,3,3,], ) 
 shape '[5, 3, 3, 3]' is invalid for input of size 2281701380
2025-03-16 11:01:36.884108 test begin: paddle.reshape(Tensor([5, 456340276],"float32"), list[5,4,2,], )

[torch error] paddle.reshape(Tensor([5, 456340276],"float32"), list[5,4,2,], ) 
 shape '[5, 4, 2]' is invalid for input of size 2281701380
2025-03-16 11:01:38.618648 test begin: paddle.reshape(Tensor([5, 456340276],"float32"), list[5,4,4,4,4,], )

[torch error] paddle.reshape(Tensor([5, 456340276],"float32"), list[5,4,4,4,4,], ) 
 shape '[5, 4, 4, 4, 4]' is invalid for input of size 2281701380
2025-03-16 11:01:40.293839 test begin: paddle.reshape(Tensor([5, 456340276],"float32"), shape=list[5,-1,], )

[Pass] paddle.reshape(Tensor([5, 456340276],"float32"), shape=list[5,-1,], )
2025-03-16 11:05:00.910253 test begin: paddle.reshape(Tensor([5, 456340276],"int32"), shape=tuple(7,5,), )

[torch error] paddle.reshape(Tensor([5, 456340276],"int32"), shape=tuple(7,5,), ) 
 shape '[7, 5]' is invalid for input of size 2281701380
2025-03-16 11:05:04.780362 test begin: paddle.reshape(Tensor([5, 45634028, 10],"float32"), list[-1,10,], )

[Pass] paddle.reshape(Tensor([5, 45634028, 10],"float32"), list[-1,10,], )
2025-03-16 11:08:07.577971 test begin: paddle.reshape(Tensor([5, 50704476, 3, 3],"float32"), tuple(-1,3,), )

[Pass] paddle.reshape(Tensor([5, 50704476, 3, 3],"float32"), tuple(-1,3,), )
2025-03-16 11:11:17.320977 test begin: paddle.reshape(Tensor([5, 50704476, 3, 3],"float32"), tuple(5,-1,), )

[Pass] paddle.reshape(Tensor([5, 50704476, 3, 3],"float32"), tuple(5,-1,), )
2025-03-16 11:14:18.092093 test begin: paddle.reshape(Tensor([5, 57042535, 8],"float32"), list[5,10,8,], name="Normal_sample", )

[torch error] paddle.reshape(Tensor([5, 57042535, 8],"float32"), list[5,10,8,], name="Normal_sample", ) 
 shape '[5, 10, 8]' is invalid for input of size 2281701400
2025-03-16 11:14:22.283469 test begin: paddle.reshape(Tensor([5, 7130317, 4, 4, 4],"float32"), tuple(5,-1,), )

[Pass] paddle.reshape(Tensor([5, 7130317, 4, 4, 4],"float32"), tuple(5,-1,), )
2025-03-16 11:17:45.823375 test begin: paddle.reshape(Tensor([5002, 6, 264, 288],"float32"), shape=list[-1,264,288,], )

[Pass] paddle.reshape(Tensor([5002, 6, 264, 288],"float32"), shape=list[-1,264,288,], )
2025-03-16 11:20:35.836536 test begin: paddle.reshape(Tensor([50038, 100, 152, 3],"float32"), shape=tuple(1,-1,1,), )

[Pass] paddle.reshape(Tensor([50038, 100, 152, 3],"float32"), shape=tuple(1,-1,1,), )
2025-03-16 11:23:33.723079 test begin: paddle.reshape(Tensor([50179, 116, 2, 14, 14],"float32"), shape=list[2,232,14,14,], )

[torch error] paddle.reshape(Tensor([50179, 116, 2, 14, 14],"float32"), shape=list[2,232,14,14,], ) 
 shape '[2, 232, 14, 14]' is invalid for input of size 2281739488
2025-03-16 11:23:37.936750 test begin: paddle.reshape(Tensor([50179, 232, 14, 14],"float32"), shape=list[2,2,116,14,14,], )

[torch error] paddle.reshape(Tensor([50179, 232, 14, 14],"float32"), shape=list[2,2,116,14,14,], ) 
 shape '[2, 2, 116, 14, 14]' is invalid for input of size 2281739488
2025-03-16 11:23:39.387980 test begin: paddle.reshape(Tensor([5032, 13, 65664],"float16"), shape=tuple(-1,216,304,), )

[Pass] paddle.reshape(Tensor([5032, 13, 65664],"float16"), shape=tuple(-1,216,304,), )
2025-03-16 11:40:15.452424 test begin: paddle.reshape(Tensor([5032, 13, 65664],"float16"), shape=tuple(-1,304,216,), )

[Pass] paddle.reshape(Tensor([5032, 13, 65664],"float16"), shape=tuple(-1,304,216,), )
2025-03-16 11:56:50.668386 test begin: paddle.reshape(Tensor([5046, 10, 85120],"float16"), shape=tuple(-1,304,280,), )

[Pass] paddle.reshape(Tensor([5046, 10, 85120],"float16"), shape=tuple(-1,304,280,), )
2025-03-16 12:13:27.530106 test begin: paddle.reshape(Tensor([50611, 1, 84864],"float16"), shape=tuple(-1,312,272,), )

[Pass] paddle.reshape(Tensor([50611, 1, 84864],"float16"), shape=tuple(-1,312,272,), )
2025-03-16 12:29:40.045335 test begin: paddle.reshape(Tensor([5062, 10, 84864],"float16"), shape=tuple(-1,272,312,), )

[Pass] paddle.reshape(Tensor([5062, 10, 84864],"float16"), shape=tuple(-1,272,312,), )
2025-03-16 12:46:18.352228 test begin: paddle.reshape(Tensor([5062, 10, 84864],"float16"), shape=tuple(-1,312,272,), )

[Pass] paddle.reshape(Tensor([5062, 10, 84864],"float16"), shape=tuple(-1,312,272,), )
2025-03-16 13:02:43.388950 test begin: paddle.reshape(Tensor([5062, 15, 56576],"float16"), shape=tuple(-1,208,272,), )

[Pass] paddle.reshape(Tensor([5062, 15, 56576],"float16"), shape=tuple(-1,208,272,), )
2025-03-16 13:19:07.414175 test begin: paddle.reshape(Tensor([50704476, 3, 5, 3],"float32"), tuple(3,-1,), )

[Pass] paddle.reshape(Tensor([50704476, 3, 5, 3],"float32"), tuple(3,-1,), )
2025-03-16 13:22:05.941084 test begin: paddle.reshape(Tensor([50704476, 45],"float32"), list[3,3,5,3,], )

[torch error] paddle.reshape(Tensor([50704476, 45],"float32"), list[3,3,5,3,], ) 
 shape '[3, 3, 5, 3]' is invalid for input of size 2281701420
2025-03-16 13:22:10.146676 test begin: paddle.reshape(Tensor([50704476, 45],"float32"), list[3,5,3,3,], )

[torch error] paddle.reshape(Tensor([50704476, 45],"float32"), list[3,5,3,3,], ) 
 shape '[3, 5, 3, 3]' is invalid for input of size 2281701420
2025-03-16 13:22:11.650708 test begin: paddle.reshape(Tensor([50704476, 5, 3, 3],"float32"), tuple(3,-1,), )

[Pass] paddle.reshape(Tensor([50704476, 5, 3, 3],"float32"), tuple(3,-1,), )
2025-03-16 13:25:49.651106 test begin: paddle.reshape(Tensor([5070448, 10, 15, 3],"float32"), shape=tuple(1,-1,1,), )

[Pass] paddle.reshape(Tensor([5070448, 10, 15, 3],"float32"), shape=tuple(1,-1,1,), )
2025-03-16 13:28:56.486886 test begin: paddle.reshape(Tensor([5075, 12, 70528],"float16"), shape=tuple(-1,232,304,), )

[Pass] paddle.reshape(Tensor([5075, 12, 70528],"float16"), shape=tuple(-1,232,304,), )
2025-03-16 13:45:28.986641 test begin: paddle.reshape(Tensor([5093084, 14, 32],"float32"), list[1,14,4,-1,], )

[Pass] paddle.reshape(Tensor([5093084, 14, 32],"float32"), list[1,14,4,-1,], )
2025-03-16 13:48:17.306635 test begin: paddle.reshape(Tensor([5093084, 14, 32],"float32"), shape=list[14,-1,4,8,], )

[Pass] paddle.reshape(Tensor([5093084, 14, 32],"float32"), shape=list[14,-1,4,8,], )
2025-03-16 13:51:39.839612 test begin: paddle.reshape(Tensor([5093084, 14, 32],"float32"), shape=list[14,14,4,8,], )

[torch error] paddle.reshape(Tensor([5093084, 14, 32],"float32"), shape=list[14,14,4,8,], ) 
 shape '[14, 14, 4, 8]' is invalid for input of size 2281701632
2025-03-16 13:51:43.746785 test begin: paddle.reshape(Tensor([5093084, 14, 32],"float32"), shape=list[16,14,4,8,], )

[torch error] paddle.reshape(Tensor([5093084, 14, 32],"float32"), shape=list[16,14,4,8,], ) 
 shape '[16, 14, 4, 8]' is invalid for input of size 2281701632
2025-03-16 13:51:44.965042 test begin: paddle.reshape(Tensor([5093084, 14, 32],"float32"), shape=list[7,14,4,8,], )

[torch error] paddle.reshape(Tensor([5093084, 14, 32],"float32"), shape=list[7,14,4,8,], ) 
 shape '[7, 14, 4, 8]' is invalid for input of size 2281701632
2025-03-16 13:51:46.171704 test begin: paddle.reshape(Tensor([5093084, 14, 32],"float32"), shape=list[8,14,4,8,], )

[torch error] paddle.reshape(Tensor([5093084, 14, 32],"float32"), shape=list[8,14,4,8,], ) 
 shape '[8, 14, 4, 8]' is invalid for input of size 2281701632
2025-03-16 13:51:47.370808 test begin: paddle.reshape(Tensor([5093084, 14, 32],"float32"), tuple(13,2,7,-1,), )

[torch error] paddle.reshape(Tensor([5093084, 14, 32],"float32"), tuple(13,2,7,-1,), ) 
 shape '[13, 2, 7, -1]' is invalid for input of size 2281701632
2025-03-16 13:51:48.586578 test begin: paddle.reshape(Tensor([5093084, 2, 7, 4, 8],"float32"), tuple(13,2,7,32,), )

[torch error] paddle.reshape(Tensor([5093084, 2, 7, 4, 8],"float32"), tuple(13,2,7,32,), ) 
 shape '[13, 2, 7, 32]' is invalid for input of size 2281701632
2025-03-16 13:51:49.829386 test begin: paddle.reshape(Tensor([5093084, 4, 8, 14],"float32"), list[14,4,14,8,], )

[torch error] paddle.reshape(Tensor([5093084, 4, 8, 14],"float32"), list[14,4,14,8,], ) 
 shape '[14, 4, 14, 8]' is invalid for input of size 2281701632
2025-03-16 13:51:51.025698 test begin: paddle.reshape(Tensor([512, 1280, 1, 3482],"float32"), shape=list[-1,1280,], )

[Pass] paddle.reshape(Tensor([512, 1280, 1, 3482],"float32"), shape=list[-1,1280,], )
2025-03-16 13:55:15.260665 test begin: paddle.reshape(Tensor([512, 1280, 1, 6554],"float16"), shape=list[-1,1280,], )

[Pass] paddle.reshape(Tensor([512, 1280, 1, 6554],"float16"), shape=list[-1,1280,], )
2025-03-16 14:11:36.216978 test begin: paddle.reshape(Tensor([512, 1280, 3482, 1],"float32"), shape=list[-1,1280,], )

[Pass] paddle.reshape(Tensor([512, 1280, 3482, 1],"float32"), shape=list[-1,1280,], )
2025-03-16 14:15:05.885389 test begin: paddle.reshape(Tensor([512, 1280, 6554, 1],"float16"), shape=list[-1,1280,], )

[Pass] paddle.reshape(Tensor([512, 1280, 6554, 1],"float16"), shape=list[-1,1280,], )
2025-03-16 14:31:00.667397 test begin: paddle.reshape(Tensor([512, 2228225, 1, 2],"float32"), shape=tuple(512,-1,), )

[Pass] paddle.reshape(Tensor([512, 2228225, 1, 2],"float32"), shape=tuple(512,-1,), )
2025-03-16 14:34:00.188400 test begin: paddle.reshape(Tensor([512, 2228225, 2],"float32"), shape=list[-1,32,100,2,], )

[Pass] paddle.reshape(Tensor([512, 2228225, 2],"float32"), shape=list[-1,32,100,2,], )
2025-03-16 14:37:31.372706 test begin: paddle.reshape(Tensor([512, 256, 1, 17409],"float32"), shape=tuple(512,-1,), )

[Pass] paddle.reshape(Tensor([512, 256, 1, 17409],"float32"), shape=tuple(512,-1,), )
2025-03-16 14:40:39.499991 test begin: paddle.reshape(Tensor([512, 256, 1, 32769],"float16"), shape=tuple(512,-1,), )

[Pass] paddle.reshape(Tensor([512, 256, 1, 32769],"float16"), shape=tuple(512,-1,), )
2025-03-16 14:56:40.372797 test begin: paddle.reshape(Tensor([512, 256, 16385, 2],"float16"), shape=tuple(512,-1,), )

[Pass] paddle.reshape(Tensor([512, 256, 16385, 2],"float16"), shape=tuple(512,-1,), )
2025-03-16 15:13:14.106192 test begin: paddle.reshape(Tensor([512, 256, 8705, 2],"float32"), shape=tuple(512,-1,), )

[Pass] paddle.reshape(Tensor([512, 256, 8705, 2],"float32"), shape=tuple(512,-1,), )
2025-03-16 15:15:53.952968 test begin: paddle.reshape(Tensor([512, 3200, 1393],"float32"), shape=list[-1,32,100,2,], )

[Pass] paddle.reshape(Tensor([512, 3200, 1393],"float32"), shape=list[-1,32,100,2,], )
2025-03-16 15:19:18.367315 test begin: paddle.reshape(Tensor([512, 3200, 2622],"float16"), shape=list[-1,32,100,2,], )

[Pass] paddle.reshape(Tensor([512, 3200, 2622],"float16"), shape=list[-1,32,100,2,], )
2025-03-16 15:36:08.770820 test begin: paddle.reshape(Tensor([512, 4194305, 1, 2],"float16"), shape=tuple(512,-1,), )

[Pass] paddle.reshape(Tensor([512, 4194305, 1, 2],"float16"), shape=tuple(512,-1,), )
2025-03-16 15:52:50.748472 test begin: paddle.reshape(Tensor([512, 4194305, 2],"float16"), shape=list[-1,32,100,2,], )

[torch error] paddle.reshape(Tensor([512, 4194305, 2],"float16"), shape=list[-1,32,100,2,], ) 
 shape '[-1, 32, 100, 2]' is invalid for input of size 4294968320
2025-03-16 15:52:54.911729 test begin: paddle.reshape(Tensor([512, 4456449, 1, 1],"float32"), shape=list[-1,1280,], )

[torch error] paddle.reshape(Tensor([512, 4456449, 1, 1],"float32"), shape=list[-1,1280,], ) 
 shape '[-1, 1280]' is invalid for input of size 2281701888
2025-03-16 15:52:58.691788 test begin: paddle.reshape(Tensor([512, 4456449],"float32"), shape=list[-1,20,2,], )

[torch error] paddle.reshape(Tensor([512, 4456449],"float32"), shape=list[-1,20,2,], ) 
 shape '[-1, 20, 2]' is invalid for input of size 2281701888
2025-03-16 15:53:01.124327 test begin: paddle.reshape(Tensor([512, 8388609, 1, 1],"float16"), shape=list[-1,1280,], )

[torch error] paddle.reshape(Tensor([512, 8388609, 1, 1],"float16"), shape=list[-1,1280,], ) 
 shape '[-1, 1280]' is invalid for input of size 4294967808
2025-03-16 15:53:02.947054 test begin: paddle.reshape(Tensor([512, 8388609],"float16"), shape=list[-1,20,2,], )

[torch error] paddle.reshape(Tensor([512, 8388609],"float16"), shape=list[-1,20,2,], ) 
 shape '[-1, 20, 2]' is invalid for input of size 4294967808
2025-03-16 15:53:04.471132 test begin: paddle.reshape(Tensor([5122, 12, 69888],"float16"), shape=tuple(-1,208,336,), )

[Pass] paddle.reshape(Tensor([5122, 12, 69888],"float16"), shape=tuple(-1,208,336,), )
2025-03-16 16:09:28.336989 test begin: paddle.reshape(Tensor([5123, 6, 232, 320],"float32"), shape=list[-1,232,320,], )

[Pass] paddle.reshape(Tensor([5123, 6, 232, 320],"float32"), shape=list[-1,232,320,], )
2025-03-16 16:12:40.487470 test begin: paddle.reshape(Tensor([5158, 24, 24, 768],"float32"), list[28,24,24,768,], )

[torch error] paddle.reshape(Tensor([5158, 24, 24, 768],"float32"), list[28,24,24,768,], ) 
 shape '[28, 24, 24, 768]' is invalid for input of size 2281734144
2025-03-16 16:12:44.728021 test begin: paddle.reshape(Tensor([5158, 24, 24, 768],"float32"), list[32,24,24,768,], )

[torch error] paddle.reshape(Tensor([5158, 24, 24, 768],"float32"), list[32,24,24,768,], ) 
 shape '[32, 24, 24, 768]' is invalid for input of size 2281734144
2025-03-16 16:12:47.006135 test begin: paddle.reshape(Tensor([5158, 24, 24, 768],"float32"), list[4,24,24,768,], )

[torch error] paddle.reshape(Tensor([5158, 24, 24, 768],"float32"), list[4,24,24,768,], ) 
 shape '[4, 24, 24, 768]' is invalid for input of size 2281734144
2025-03-16 16:12:48.830084 test begin: paddle.reshape(Tensor([5179, 11, 75392],"float16"), shape=tuple(-1,248,304,), )

[Pass] paddle.reshape(Tensor([5179, 11, 75392],"float16"), shape=tuple(-1,248,304,), )
2025-03-16 16:28:57.336519 test begin: paddle.reshape(Tensor([51942, 1, 82688],"float16"), shape=tuple(-1,272,304,), )

[Pass] paddle.reshape(Tensor([51942, 1, 82688],"float16"), shape=tuple(-1,272,304,), )
2025-03-16 16:45:41.375648 test begin: paddle.reshape(Tensor([51942, 152, 272, 2],"float16"), shape=list[20,-1,2,], )

[torch error] paddle.reshape(Tensor([51942, 152, 272, 2],"float16"), shape=list[20,-1,2,], ) 
 shape '[20, -1, 2]' is invalid for input of size 4294980096
2025-03-16 16:45:45.114496 test begin: paddle.reshape(Tensor([51942, 272, 304],"float16"), shape=tuple(200,-1,), )

[torch error] paddle.reshape(Tensor([51942, 272, 304],"float16"), shape=tuple(200,-1,), ) 
 shape '[200, -1]' is invalid for input of size 4294980096
2025-03-16 16:45:46.192431 test begin: paddle.reshape(Tensor([51942, 272, 304],"float16"), shape=tuple(228,-1,), )

[Pass] paddle.reshape(Tensor([51942, 272, 304],"float16"), shape=tuple(228,-1,), )
2025-03-16 17:02:34.352921 test begin: paddle.reshape(Tensor([51942, 272, 304],"float16"), shape=tuple(240,-1,), )

[torch error] paddle.reshape(Tensor([51942, 272, 304],"float16"), shape=tuple(240,-1,), ) 
 shape '[240, -1]' is invalid for input of size 4294980096
2025-03-16 17:02:38.012249 test begin: paddle.reshape(Tensor([51942, 272, 304],"float16"), shape=tuple(244,-1,), )

[torch error] paddle.reshape(Tensor([51942, 272, 304],"float16"), shape=tuple(244,-1,), ) 
 shape '[244, -1]' is invalid for input of size 4294980096
2025-03-16 17:02:38.953758 test begin: paddle.reshape(Tensor([51942, 272, 304],"float16"), shape=tuple(252,-1,), )

[torch error] paddle.reshape(Tensor([51942, 272, 304],"float16"), shape=tuple(252,-1,), ) 
 shape '[252, -1]' is invalid for input of size 4294980096
2025-03-16 17:02:40.233390 test begin: paddle.reshape(Tensor([51942, 272, 304],"float16"), shape=tuple(280,-1,), )

[torch error] paddle.reshape(Tensor([51942, 272, 304],"float16"), shape=tuple(280,-1,), ) 
 shape '[280, -1]' is invalid for input of size 4294980096
2025-03-16 17:02:41.759000 test begin: paddle.reshape(Tensor([51942, 272, 304],"float16"), shape=tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([51942, 272, 304],"float16"), shape=tuple(4,-1,), )
2025-03-16 17:19:05.230493 test begin: paddle.reshape(Tensor([51942, 304, 272],"float16"), shape=tuple(192,-1,), )

[Pass] paddle.reshape(Tensor([51942, 304, 272],"float16"), shape=tuple(192,-1,), )
2025-03-16 17:35:08.445800 test begin: paddle.reshape(Tensor([51942, 304, 272],"float16"), shape=tuple(260,-1,), )

[torch error] paddle.reshape(Tensor([51942, 304, 272],"float16"), shape=tuple(260,-1,), ) 
 shape '[260, -1]' is invalid for input of size 4294980096
2025-03-16 17:35:12.274338 test begin: paddle.reshape(Tensor([51942, 304, 272],"float16"), shape=tuple(264,-1,), )

[Pass] paddle.reshape(Tensor([51942, 304, 272],"float16"), shape=tuple(264,-1,), )
2025-03-16 17:51:02.775736 test begin: paddle.reshape(Tensor([51942, 304, 272],"float16"), shape=tuple(268,-1,), )

[torch error] paddle.reshape(Tensor([51942, 304, 272],"float16"), shape=tuple(268,-1,), ) 
 shape '[268, -1]' is invalid for input of size 4294980096
2025-03-16 17:51:06.677082 test begin: paddle.reshape(Tensor([51942, 4, 76, 136, 2],"float16"), list[-1,2,], )

[Pass] paddle.reshape(Tensor([51942, 4, 76, 136, 2],"float16"), list[-1,2,], )
2025-03-16 18:07:26.022668 test begin: paddle.reshape(Tensor([5195, 10, 82688],"float16"), shape=tuple(-1,272,304,), )

[Pass] paddle.reshape(Tensor([5195, 10, 82688],"float16"), shape=tuple(-1,272,304,), )
2025-03-16 18:23:37.355044 test begin: paddle.reshape(Tensor([5195, 10, 82688],"float16"), shape=tuple(-1,304,272,), )

[Pass] paddle.reshape(Tensor([5195, 10, 82688],"float16"), shape=tuple(-1,304,272,), )
2025-03-16 18:40:17.359341 test begin: paddle.reshape(Tensor([52, 1, 1, 43878873],"float32"), list[52,7,1,], )

[torch error] paddle.reshape(Tensor([52, 1, 1, 43878873],"float32"), list[52,7,1,], ) 
 shape '[52, 7, 1]' is invalid for input of size 2281701396
2025-03-16 18:40:21.609640 test begin: paddle.reshape(Tensor([52, 1, 43878873, 1],"float32"), list[52,7,1,], )

[torch error] paddle.reshape(Tensor([52, 1, 43878873, 1],"float32"), list[52,7,1,], ) 
 shape '[52, 7, 1]' is invalid for input of size 2281701396
2025-03-16 18:40:22.831076 test begin: paddle.reshape(Tensor([52, 1, 43878873],"float32"), list[52,1,1,1,], )

[torch error] paddle.reshape(Tensor([52, 1, 43878873],"float32"), list[52,1,1,1,], ) 
 shape '[52, 1, 1, 1]' is invalid for input of size 2281701396
2025-03-16 18:40:24.097959 test begin: paddle.reshape(Tensor([52, 1, 6268411, 7],"float32"), list[52,7,1,], )

[torch error] paddle.reshape(Tensor([52, 1, 6268411, 7],"float32"), list[52,7,1,], ) 
 shape '[52, 7, 1]' is invalid for input of size 2281701604
2025-03-16 18:40:25.359272 test begin: paddle.reshape(Tensor([52, 1, 7, 6268411],"float32"), list[52,7,1,], )

[torch error] paddle.reshape(Tensor([52, 1, 7, 6268411],"float32"), list[52,7,1,], ) 
 shape '[52, 7, 1]' is invalid for input of size 2281701604
2025-03-16 18:40:26.612734 test begin: paddle.reshape(Tensor([52, 1096972, 5, 1, 8],"float32"), list[52,4,5,-1,], )

[Pass] paddle.reshape(Tensor([52, 1096972, 5, 1, 8],"float32"), list[52,4,5,-1,], )
2025-03-16 18:43:02.447584 test begin: paddle.reshape(Tensor([52, 1371215, 32],"float32"), list[52,7,4,-1,], )

[torch error] paddle.reshape(Tensor([52, 1371215, 32],"float32"), list[52,7,4,-1,], ) 
 shape '[52, 7, 4, -1]' is invalid for input of size 2281701760
2025-03-16 18:43:06.097893 test begin: paddle.reshape(Tensor([52, 1371215, 4, 8],"float32"), list[52,7,-1,], )

[torch error] paddle.reshape(Tensor([52, 1371215, 4, 8],"float32"), list[52,7,-1,], ) 
 shape '[52, 7, -1]' is invalid for input of size 2281701760
2025-03-16 18:43:07.507669 test begin: paddle.reshape(Tensor([52, 144339, 304],"float32"), shape=tuple(52,-1,), )

[Pass] paddle.reshape(Tensor([52, 144339, 304],"float32"), shape=tuple(52,-1,), )
2025-03-16 18:46:08.527003 test begin: paddle.reshape(Tensor([52, 161320, 272],"float32"), shape=tuple(52,-1,), )

[Pass] paddle.reshape(Tensor([52, 161320, 272],"float32"), shape=tuple(52,-1,), )
2025-03-16 18:48:51.887706 test begin: paddle.reshape(Tensor([52, 200, 219395],"float32"), shape=tuple(52,-1,), )

[Pass] paddle.reshape(Tensor([52, 200, 219395],"float32"), shape=tuple(52,-1,), )
2025-03-16 18:51:35.538166 test begin: paddle.reshape(Tensor([52, 200, 412978],"float16"), shape=tuple(52,-1,), )

[Pass] paddle.reshape(Tensor([52, 200, 412978],"float16"), shape=tuple(52,-1,), )
2025-03-16 19:07:53.974554 test begin: paddle.reshape(Tensor([52, 21, 2089471],"float32"), tuple(13,4,21,8,), )

[torch error] paddle.reshape(Tensor([52, 21, 2089471],"float32"), tuple(13,4,21,8,), ) 
 shape '[13, 4, 21, 8]' is invalid for input of size 2281702332
2025-03-16 19:07:57.955110 test begin: paddle.reshape(Tensor([52, 219395, 5, 5, 1, 8],"float32"), list[52,4,5,5,-1,], )

[Pass] paddle.reshape(Tensor([52, 219395, 5, 5, 1, 8],"float32"), list[52,4,5,5,-1,], )
2025-03-16 19:11:53.557681 test begin: paddle.reshape(Tensor([52, 264730, 312],"float16"), shape=tuple(52,-1,), )

[Pass] paddle.reshape(Tensor([52, 264730, 312],"float16"), shape=tuple(52,-1,), )
2025-03-16 19:27:58.961488 test begin: paddle.reshape(Tensor([52, 271696, 304],"float16"), shape=tuple(52,-1,), )

[Pass] paddle.reshape(Tensor([52, 271696, 304],"float16"), shape=tuple(52,-1,), )
2025-03-16 19:44:12.969467 test begin: paddle.reshape(Tensor([52, 303661, 272],"float16"), shape=tuple(52,-1,), )

[Pass] paddle.reshape(Tensor([52, 303661, 272],"float16"), shape=tuple(52,-1,), )
2025-03-16 20:00:33.812319 test begin: paddle.reshape(Tensor([52, 4, 1371215, 1, 8],"float32"), list[52,4,5,-1,], )

[Pass] paddle.reshape(Tensor([52, 4, 1371215, 1, 8],"float32"), list[52,4,5,-1,], )
2025-03-16 20:03:24.842948 test begin: paddle.reshape(Tensor([52, 4, 1371215, 8],"float32"), list[52,4,7,1,-1,], )

[torch error] paddle.reshape(Tensor([52, 4, 1371215, 8],"float32"), list[52,4,7,1,-1,], ) 
 shape '[52, 4, 7, 1, -1]' is invalid for input of size 2281701760
2025-03-16 20:03:29.401859 test begin: paddle.reshape(Tensor([52, 4, 274243, 5, 1, 8],"float32"), list[52,4,5,5,-1,], )

[torch error] paddle.reshape(Tensor([52, 4, 274243, 5, 1, 8],"float32"), list[52,4,5,5,-1,], ) 
 shape '[52, 4, 5, 5, -1]' is invalid for input of size 2281701760
2025-03-16 20:03:31.091624 test begin: paddle.reshape(Tensor([52, 4, 5, 1, 2193944],"float32"), list[52,4,5,-1,], )

[Pass] paddle.reshape(Tensor([52, 4, 5, 1, 2193944],"float32"), list[52,4,5,-1,], )
2025-03-16 20:06:33.370361 test begin: paddle.reshape(Tensor([52, 4, 5, 274243, 1, 8],"float32"), list[52,4,5,5,-1,], )

[torch error] paddle.reshape(Tensor([52, 4, 5, 274243, 1, 8],"float32"), list[52,4,5,5,-1,], ) 
 shape '[52, 4, 5, 5, -1]' is invalid for input of size 2281701760
2025-03-16 20:06:37.482111 test begin: paddle.reshape(Tensor([52, 4, 5, 274243, 8],"float32"), list[52,4,5,-1,], )

[Pass] paddle.reshape(Tensor([52, 4, 5, 274243, 8],"float32"), list[52,4,5,-1,], )
2025-03-16 20:09:29.727665 test begin: paddle.reshape(Tensor([52, 4, 5, 5, 1, 438789],"float32"), list[52,4,5,5,-1,], )

[Pass] paddle.reshape(Tensor([52, 4, 5, 5, 1, 438789],"float32"), list[52,4,5,5,-1,], )
2025-03-16 20:12:30.905565 test begin: paddle.reshape(Tensor([52, 4, 5, 5, 54849, 8],"float32"), list[52,4,5,5,-1,], )

[Pass] paddle.reshape(Tensor([52, 4, 5, 5, 54849, 8],"float32"), list[52,4,5,5,-1,], )
2025-03-16 20:15:18.838943 test begin: paddle.reshape(Tensor([52, 4, 7, 1567103],"float32"), list[52,4,7,1,-1,], )

[Pass] paddle.reshape(Tensor([52, 4, 7, 1567103],"float32"), list[52,4,7,1,-1,], )
2025-03-16 20:18:18.817953 test begin: paddle.reshape(Tensor([52, 43878873, 1],"float32"), list[52,1,1,1,], )

[torch error] paddle.reshape(Tensor([52, 43878873, 1],"float32"), list[52,1,1,1,], ) 
 shape '[52, 1, 1, 1]' is invalid for input of size 2281701396
2025-03-16 20:18:22.971422 test begin: paddle.reshape(Tensor([52, 43878873, 1],"float32"), list[52,5,1,1,], )

[torch error] paddle.reshape(Tensor([52, 43878873, 1],"float32"), list[52,5,1,1,], ) 
 shape '[52, 5, 1, 1]' is invalid for input of size 2281701396
2025-03-16 20:18:24.495977 test begin: paddle.reshape(Tensor([52, 457072, 96],"float32"), list[52,7,4,-1,], )

[Pass] paddle.reshape(Tensor([52, 457072, 96],"float32"), list[52,7,4,-1,], )
2025-03-16 20:20:57.489614 test begin: paddle.reshape(Tensor([52, 5, 8775775],"float32"), list[52,5,1,1,], )

[torch error] paddle.reshape(Tensor([52, 5, 8775775],"float32"), list[52,5,1,1,], ) 
 shape '[52, 5, 1, 1]' is invalid for input of size 2281701500
2025-03-16 20:21:01.227016 test begin: paddle.reshape(Tensor([52, 5484860, 8],"float32"), tuple(-1,8,), )

[Pass] paddle.reshape(Tensor([52, 5484860, 8],"float32"), tuple(-1,8,), )
2025-03-16 20:23:49.358786 test begin: paddle.reshape(Tensor([52, 5484860, 8],"float32"), tuple(13,4,-1,8,), )

[Pass] paddle.reshape(Tensor([52, 5484860, 8],"float32"), tuple(13,4,-1,8,), )
2025-03-16 20:26:47.417976 test begin: paddle.reshape(Tensor([52, 5484860, 8],"float32"), tuple(13,4,21,8,), )

[torch error] paddle.reshape(Tensor([52, 5484860, 8],"float32"), tuple(13,4,21,8,), ) 
 shape '[13, 4, 21, 8]' is invalid for input of size 2281701760
2025-03-16 20:26:51.478130 test begin: paddle.reshape(Tensor([52, 5484860, 8],"float32"), tuple(13,4,7,8,), )

[torch error] paddle.reshape(Tensor([52, 5484860, 8],"float32"), tuple(13,4,7,8,), ) 
 shape '[13, 4, 7, 8]' is invalid for input of size 2281701760
2025-03-16 20:26:53.333820 test begin: paddle.reshape(Tensor([52, 6268411, 1, 7],"float32"), list[52,7,1,], )

[torch error] paddle.reshape(Tensor([52, 6268411, 1, 7],"float32"), list[52,7,1,], ) 
 shape '[52, 7, 1]' is invalid for input of size 2281701604
2025-03-16 20:26:55.213006 test begin: paddle.reshape(Tensor([52, 6268411, 7, 1],"float32"), list[52,7,1,], )

[torch error] paddle.reshape(Tensor([52, 6268411, 7, 1],"float32"), list[52,7,1,], ) 
 shape '[52, 7, 1]' is invalid for input of size 2281701604
2025-03-16 20:26:57.114669 test begin: paddle.reshape(Tensor([52, 6268411, 7],"float32"), tuple(13,4,7,-1,), )

[Pass] paddle.reshape(Tensor([52, 6268411, 7],"float32"), tuple(13,4,7,-1,), )
2025-03-16 20:29:53.700983 test begin: paddle.reshape(Tensor([52, 7, 4, 1567103],"float32"), list[52,7,-1,], )

[Pass] paddle.reshape(Tensor([52, 7, 4, 1567103],"float32"), list[52,7,-1,], )
2025-03-16 20:32:56.758237 test begin: paddle.reshape(Tensor([52, 7, 6268411],"float32"), list[52,7,4,-1,], )

[torch error] paddle.reshape(Tensor([52, 7, 6268411],"float32"), list[52,7,4,-1,], ) 
 shape '[52, 7, 4, -1]' is invalid for input of size 2281701604
2025-03-16 20:33:00.906657 test begin: paddle.reshape(Tensor([52, 7, 6268411],"float32"), tuple(-1,8,), )

[torch error] paddle.reshape(Tensor([52, 7, 6268411],"float32"), tuple(-1,8,), ) 
 shape '[-1, 8]' is invalid for input of size 2281701604
2025-03-16 20:33:02.779214 test begin: paddle.reshape(Tensor([52, 7, 6268411],"float32"), tuple(13,4,-1,8,), )

[torch error] paddle.reshape(Tensor([52, 7, 6268411],"float32"), tuple(13,4,-1,8,), ) 
 shape '[13, 4, -1, 8]' is invalid for input of size 2281701604
2025-03-16 20:33:04.119047 test begin: paddle.reshape(Tensor([52, 7, 6268411],"float32"), tuple(13,4,7,-1,), )

[Pass] paddle.reshape(Tensor([52, 7, 6268411],"float32"), tuple(13,4,7,-1,), )
2025-03-16 20:35:41.638006 test begin: paddle.reshape(Tensor([52, 7, 6268411],"float32"), tuple(13,4,7,8,), )

[torch error] paddle.reshape(Tensor([52, 7, 6268411],"float32"), tuple(13,4,7,8,), ) 
 shape '[13, 4, 7, 8]' is invalid for input of size 2281701604
2025-03-16 20:35:45.470427 test begin: paddle.reshape(Tensor([52, 7, 783552, 8],"float32"), list[52,7,-1,], )

[Pass] paddle.reshape(Tensor([52, 7, 783552, 8],"float32"), list[52,7,-1,], )
2025-03-16 20:38:59.338529 test begin: paddle.reshape(Tensor([52, 783552, 7, 8],"float32"), list[52,4,7,1,-1,], )

[Pass] paddle.reshape(Tensor([52, 783552, 7, 8],"float32"), list[52,4,7,1,-1,], )
2025-03-16 20:41:58.914604 test begin: paddle.reshape(Tensor([520, 1, 4387888],"float32"), list[13,4,5,2,-1,], )

[Pass] paddle.reshape(Tensor([520, 1, 4387888],"float32"), list[13,4,5,2,-1,], )
2025-03-16 20:44:46.693718 test begin: paddle.reshape(Tensor([520, 4387888],"float32"), list[13,4,5,-1,], )

[Pass] paddle.reshape(Tensor([520, 4387888],"float32"), list[13,4,5,-1,], )
2025-03-16 20:47:22.867767 test begin: paddle.reshape(Tensor([520, 548486, 8],"float32"), list[13,4,5,2,-1,], )

[Pass] paddle.reshape(Tensor([520, 548486, 8],"float32"), list[13,4,5,2,-1,], )
2025-03-16 20:50:26.361278 test begin: paddle.reshape(Tensor([5257, 12, 68096],"float16"), shape=tuple(-1,224,304,), )

[Pass] paddle.reshape(Tensor([5257, 12, 68096],"float16"), shape=tuple(-1,224,304,), )
2025-03-16 21:06:31.477220 test begin: paddle.reshape(Tensor([5278, 11, 73984],"float16"), shape=tuple(-1,272,272,), )

[Pass] paddle.reshape(Tensor([5278, 11, 73984],"float16"), shape=tuple(-1,272,272,), )
2025-03-16 21:22:26.763834 test begin: paddle.reshape(Tensor([5295, 13, 62400],"float16"), shape=tuple(-1,200,312,), )

[Pass] paddle.reshape(Tensor([5295, 13, 62400],"float16"), shape=tuple(-1,200,312,), )
2025-03-16 21:38:26.867259 test begin: paddle.reshape(Tensor([53346, 1, 80512],"float16"), shape=tuple(-1,296,272,), )

[Pass] paddle.reshape(Tensor([53346, 1, 80512],"float16"), shape=tuple(-1,296,272,), )
2025-03-16 21:54:46.669826 test begin: paddle.reshape(Tensor([5335, 10, 80512],"float16"), shape=tuple(-1,272,296,), )

[Pass] paddle.reshape(Tensor([5335, 10, 80512],"float16"), shape=tuple(-1,272,296,), )
2025-03-16 22:10:54.411412 test begin: paddle.reshape(Tensor([5335, 10, 80512],"float16"), shape=tuple(-1,296,272,), )

[Pass] paddle.reshape(Tensor([5335, 10, 80512],"float16"), shape=tuple(-1,296,272,), )
2025-03-16 22:26:51.761141 test begin: paddle.reshape(Tensor([53351, 108, 132, 3],"float32"), shape=tuple(2,-1,1,), )

[Pass] paddle.reshape(Tensor([53351, 108, 132, 3],"float32"), shape=tuple(2,-1,1,), )
2025-03-16 22:30:04.851731 test begin: paddle.reshape(Tensor([5350, 9, 89216],"float16"), shape=tuple(-1,328,272,), )

[Pass] paddle.reshape(Tensor([5350, 9, 89216],"float16"), shape=tuple(-1,328,272,), )
2025-03-16 22:45:56.263892 test begin: paddle.reshape(Tensor([536870913, 2, 4],"float16"), shape=list[6,8,], )

[torch error] paddle.reshape(Tensor([536870913, 2, 4],"float16"), shape=list[6,8,], ) 
 shape '[6, 8]' is invalid for input of size 4294967304
2025-03-16 22:46:00.346852 test begin: paddle.reshape(Tensor([5368710, 50, 4, 4],"float16"), shape=list[-1,800,], )

[Pass] paddle.reshape(Tensor([5368710, 50, 4, 4],"float16"), shape=list[-1,800,], )
2025-03-16 23:02:02.777294 test begin: paddle.reshape(Tensor([54, 42253730],"int64"), list[9,6,10,], name="Categorical_sample", )

[torch error] paddle.reshape(Tensor([54, 42253730],"int64"), list[9,6,10,], name="Categorical_sample", ) 
 shape '[9, 6, 10]' is invalid for input of size 2281701420
2025-03-16 23:02:12.567044 test begin: paddle.reshape(Tensor([5432623, 10, 14, 3],"float32"), shape=tuple(1,-1,1,), )

[Pass] paddle.reshape(Tensor([5432623, 10, 14, 3],"float32"), shape=tuple(1,-1,1,), )
2025-03-16 23:05:11.549320 test begin: paddle.reshape(Tensor([54327, 100, 140, 3],"float32"), shape=tuple(8,-1,1,), )

[Pass] paddle.reshape(Tensor([54327, 100, 140, 3],"float32"), shape=tuple(8,-1,1,), )
2025-03-16 23:08:07.953836 test begin: paddle.reshape(Tensor([5451, 12, 65664],"float16"), shape=tuple(-1,304,216,), )

[Pass] paddle.reshape(Tensor([5451, 12, 65664],"float16"), shape=tuple(-1,304,216,), )
2025-03-16 23:24:16.632685 test begin: paddle.reshape(Tensor([5479, 10, 78400],"float16"), shape=tuple(-1,280,280,), )

[Pass] paddle.reshape(Tensor([5479, 10, 78400],"float16"), shape=tuple(-1,280,280,), )
2025-03-16 23:40:34.048089 test begin: paddle.reshape(Tensor([5483, 10, 78336],"float16"), shape=tuple(-1,288,272,), )

[Pass] paddle.reshape(Tensor([5483, 10, 78336],"float16"), shape=tuple(-1,288,272,), )
2025-03-16 23:56:46.264481 test begin: paddle.reshape(Tensor([5484860, 4, 13, 8],"float32"), list[14,4,8,13,], )

[torch error] paddle.reshape(Tensor([5484860, 4, 13, 8],"float32"), list[14,4,8,13,], ) 
 shape '[14, 4, 8, 13]' is invalid for input of size 2281701760
2025-03-16 23:56:50.610411 test begin: paddle.reshape(Tensor([5497, 10, 78144],"float16"), shape=tuple(-1,264,296,), )

[Pass] paddle.reshape(Tensor([5497, 10, 78144],"float16"), shape=tuple(-1,264,296,), )
2025-03-17 00:12:27.721721 test begin: paddle.reshape(Tensor([55189, 4, 38, 68, 4],"float32"), list[-1,4,], )

[Pass] paddle.reshape(Tensor([55189, 4, 38, 68, 4],"float32"), list[-1,4,], )
2025-03-17 00:15:26.584939 test begin: paddle.reshape(Tensor([5530, 8, 97088],"float16"), shape=tuple(-1,296,328,), )

[Pass] paddle.reshape(Tensor([5530, 8, 97088],"float16"), shape=tuple(-1,296,328,), )
2025-03-17 00:31:28.149544 test begin: paddle.reshape(Tensor([557057, 64, 64],"float32"), list[64,64,1,1,], )

[torch error] paddle.reshape(Tensor([557057, 64, 64],"float32"), list[64,64,1,1,], ) 
 shape '[64, 64, 1, 1]' is invalid for input of size 2281705472
2025-03-17 00:31:32.139415 test begin: paddle.reshape(Tensor([5571, 4, 320, 320],"float32"), shape=list[-1,320,320,], )

[Pass] paddle.reshape(Tensor([5571, 4, 320, 320],"float32"), shape=list[-1,320,320,], )
2025-03-17 00:34:07.762836 test begin: paddle.reshape(Tensor([5571, 640, 640],"float32"), shape=list[-1,], )

[Pass] paddle.reshape(Tensor([5571, 640, 640],"float32"), shape=list[-1,], )
2025-03-17 00:37:01.292991 test begin: paddle.reshape(Tensor([5585, 6, 224, 304],"float32"), shape=list[-1,224,304,], )

[Pass] paddle.reshape(Tensor([5585, 6, 224, 304],"float32"), shape=list[-1,224,304,], )
2025-03-17 00:39:56.950143 test begin: paddle.reshape(Tensor([559, 38, 336, 320],"float32"), shape=list[-1,336,320,], )

[Pass] paddle.reshape(Tensor([559, 38, 336, 320],"float32"), shape=list[-1,336,320,], )
2025-03-17 00:42:38.085700 test begin: paddle.reshape(Tensor([55925, 100, 136, 3],"float32"), shape=tuple(8,-1,1,), )

[Pass] paddle.reshape(Tensor([55925, 100, 136, 3],"float32"), shape=tuple(8,-1,1,), )
2025-03-17 00:45:29.308777 test begin: paddle.reshape(Tensor([5593, 12, 64000],"float16"), shape=tuple(-1,200,320,), )

[Pass] paddle.reshape(Tensor([5593, 12, 64000],"float16"), shape=tuple(-1,200,320,), )
2025-03-17 01:01:27.335861 test begin: paddle.reshape(Tensor([5599, 12, 63936],"float16"), shape=tuple(-1,216,296,), )

[Pass] paddle.reshape(Tensor([5599, 12, 63936],"float16"), shape=tuple(-1,216,296,), )
2025-03-17 01:18:16.395483 test begin: paddle.reshape(Tensor([56, 134029, 304],"float32"), shape=tuple(56,-1,), )

[Pass] paddle.reshape(Tensor([56, 134029, 304],"float32"), shape=tuple(56,-1,), )
2025-03-17 01:21:50.822524 test begin: paddle.reshape(Tensor([56, 149797, 272],"float32"), shape=tuple(56,-1,), )

[Pass] paddle.reshape(Tensor([56, 149797, 272],"float32"), shape=tuple(56,-1,), )
2025-03-17 01:26:05.628760 test begin: paddle.reshape(Tensor([56, 200, 203724],"float32"), shape=tuple(56,-1,), )

[Pass] paddle.reshape(Tensor([56, 200, 203724],"float32"), shape=tuple(56,-1,), )
2025-03-17 01:30:31.024991 test begin: paddle.reshape(Tensor([56, 200, 383480],"float16"), shape=tuple(56,-1,), )

[Pass] paddle.reshape(Tensor([56, 200, 383480],"float16"), shape=tuple(56,-1,), )
2025-03-17 01:47:11.050500 test begin: paddle.reshape(Tensor([56, 245821, 312],"float16"), shape=tuple(56,-1,), )

[Pass] paddle.reshape(Tensor([56, 245821, 312],"float16"), shape=tuple(56,-1,), )
2025-03-17 02:03:03.078969 test begin: paddle.reshape(Tensor([56, 252289, 304],"float16"), shape=tuple(56,-1,), )

[Pass] paddle.reshape(Tensor([56, 252289, 304],"float16"), shape=tuple(56,-1,), )
2025-03-17 02:19:47.034513 test begin: paddle.reshape(Tensor([56, 281971, 272],"float16"), shape=tuple(56,-1,), )

[Pass] paddle.reshape(Tensor([56, 281971, 272],"float16"), shape=tuple(56,-1,), )
2025-03-17 02:36:09.727744 test begin: paddle.reshape(Tensor([56, 4, 13, 783552],"float32"), list[56,4,7,13,], )

[torch error] paddle.reshape(Tensor([56, 4, 13, 783552],"float32"), list[56,4,7,13,], ) 
 shape '[56, 4, 7, 13]' is invalid for input of size 2281703424
2025-03-17 02:36:13.584140 test begin: paddle.reshape(Tensor([56, 4, 1455167, 7],"float32"), list[56,4,7,13,], )

[torch error] paddle.reshape(Tensor([56, 4, 1455167, 7],"float32"), list[56,4,7,13,], ) 
 shape '[56, 4, 7, 13]' is invalid for input of size 2281701856
2025-03-17 02:36:14.984523 test begin: paddle.reshape(Tensor([56, 4, 7, 1455167],"float32"), list[56,4,14,7,], )

[torch error] paddle.reshape(Tensor([56, 4, 7, 1455167],"float32"), list[56,4,14,7,], ) 
 shape '[56, 4, 14, 7]' is invalid for input of size 2281701856
2025-03-17 02:36:16.752165 test begin: paddle.reshape(Tensor([56, 4, 727584, 14],"float32"), list[56,4,14,7,], )

[torch error] paddle.reshape(Tensor([56, 4, 727584, 14],"float32"), list[56,4,14,7,], ) 
 shape '[56, 4, 14, 7]' is invalid for input of size 2281703424
2025-03-17 02:36:18.328148 test begin: paddle.reshape(Tensor([56, 415762, 7, 14],"float32"), list[56,4,14,7,], )

[torch error] paddle.reshape(Tensor([56, 415762, 7, 14],"float32"), list[56,4,14,7,], ) 
 shape '[56, 4, 14, 7]' is invalid for input of size 2281701856
2025-03-17 02:36:19.444258 test begin: paddle.reshape(Tensor([56, 447744, 13, 7],"float32"), list[56,4,7,13,], )

[torch error] paddle.reshape(Tensor([56, 447744, 13, 7],"float32"), list[56,4,7,13,], ) 
 shape '[56, 4, 7, 13]' is invalid for input of size 2281703424
2025-03-17 02:36:20.830800 test begin: paddle.reshape(Tensor([56395, 280, 272],"float16"), shape=tuple(248,-1,), )

[torch error] paddle.reshape(Tensor([56395, 280, 272],"float16"), shape=tuple(248,-1,), ) 
 shape '[248, -1]' is invalid for input of size 4295043200
2025-03-17 02:36:24.330055 test begin: paddle.reshape(Tensor([5640, 10, 76160],"float16"), shape=tuple(-1,280,272,), )

[Pass] paddle.reshape(Tensor([5640, 10, 76160],"float16"), shape=tuple(-1,280,272,), )
2025-03-17 02:52:57.110865 test begin: paddle.reshape(Tensor([5659, 6, 336, 200],"float32"), shape=list[-1,336,200,], )

[Pass] paddle.reshape(Tensor([5659, 6, 336, 200],"float32"), shape=list[-1,336,200,], )
2025-03-17 02:56:54.467813 test begin: paddle.reshape(Tensor([5685, 56, 56, 128],"float32"), list[12,56,56,128,], )

[torch error] paddle.reshape(Tensor([5685, 56, 56, 128],"float32"), list[12,56,56,128,], ) 
 shape '[12, 56, 56, 128]' is invalid for input of size 2282004480
2025-03-17 02:56:58.567472 test begin: paddle.reshape(Tensor([5685, 56, 56, 128],"float32"), list[16,56,56,128,], )

[torch error] paddle.reshape(Tensor([5685, 56, 56, 128],"float32"), list[16,56,56,128,], ) 
 shape '[16, 56, 56, 128]' is invalid for input of size 2282004480
2025-03-17 02:57:00.501305 test begin: paddle.reshape(Tensor([5685, 56, 56, 128],"float32"), list[60,56,56,128,], )

[torch error] paddle.reshape(Tensor([5685, 56, 56, 128],"float32"), list[60,56,56,128,], ) 
 shape '[60, 56, 56, 128]' is invalid for input of size 2282004480
2025-03-17 02:57:02.386758 test begin: paddle.reshape(Tensor([5685, 56, 56, 128],"float32"), list[64,56,56,128,], )

[torch error] paddle.reshape(Tensor([5685, 56, 56, 128],"float32"), list[64,56,56,128,], ) 
 shape '[64, 56, 56, 128]' is invalid for input of size 2282004480
2025-03-17 02:57:04.043278 test begin: paddle.reshape(Tensor([570425345, 1, 4],"float32"), shape=list[-1,4,], )

[Pass] paddle.reshape(Tensor([570425345, 1, 4],"float32"), shape=list[-1,4,], )
2025-03-17 02:59:37.801881 test begin: paddle.reshape(Tensor([570425345, 2, 2],"float32"), list[-1,], )

[Pass] paddle.reshape(Tensor([570425345, 2, 2],"float32"), list[-1,], )
2025-03-17 03:02:50.102922 test begin: paddle.reshape(Tensor([570425345, 4],"float32"), list[-1,1,4,], )

[Pass] paddle.reshape(Tensor([570425345, 4],"float32"), list[-1,1,4,], )
2025-03-17 03:06:07.522283 test begin: paddle.reshape(Tensor([570425345, 4],"float32"), list[-1,4,], )

[Pass] paddle.reshape(Tensor([570425345, 4],"float32"), list[-1,4,], )
2025-03-17 03:09:04.966700 test begin: paddle.reshape(Tensor([570425345, 4],"float32"), list[-1,], )

[Pass] paddle.reshape(Tensor([570425345, 4],"float32"), list[-1,], )
2025-03-17 03:12:06.016920 test begin: paddle.reshape(Tensor([570425345, 4],"float32"), list[1,-1,4,], )

[Pass] paddle.reshape(Tensor([570425345, 4],"float32"), list[1,-1,4,], )
2025-03-17 03:15:27.976192 test begin: paddle.reshape(Tensor([570425345, 4],"float32"), list[15,4,4,], )

[torch error] paddle.reshape(Tensor([570425345, 4],"float32"), list[15,4,4,], ) 
 shape '[15, 4, 4]' is invalid for input of size 2281701380
2025-03-17 03:15:32.007752 test begin: paddle.reshape(Tensor([570425345, 4],"float32"), list[2,2,3,], )

[torch error] paddle.reshape(Tensor([570425345, 4],"float32"), list[2,2,3,], ) 
 shape '[2, 2, 3]' is invalid for input of size 2281701380
2025-03-17 03:15:33.258895 test begin: paddle.reshape(Tensor([570425345, 4],"float32"), shape=tuple(-1,4,), )

[Pass] paddle.reshape(Tensor([570425345, 4],"float32"), shape=tuple(-1,4,), )
2025-03-17 03:18:26.282994 test begin: paddle.reshape(Tensor([57042535, 4, 10],"float32"), shape=list[-1,10,], )

[Pass] paddle.reshape(Tensor([57042535, 4, 10],"float32"), shape=list[-1,10,], )
2025-03-17 03:21:35.050115 test begin: paddle.reshape(Tensor([57042535, 4, 10],"float32"), shape=list[1,-1,10,], )

[Pass] paddle.reshape(Tensor([57042535, 4, 10],"float32"), shape=list[1,-1,10,], )
2025-03-17 03:24:39.644214 test begin: paddle.reshape(Tensor([57042535, 40],"float32"), shape=list[-1,20,2,], )

[Pass] paddle.reshape(Tensor([57042535, 40],"float32"), shape=list[-1,20,2,], )
2025-03-17 03:27:30.949846 test begin: paddle.reshape(Tensor([5704254, 1, 1, 1, 400],"float32"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([5704254, 1, 1, 1, 400],"float32"), shape=tuple(8,-1,), )
2025-03-17 03:30:24.906582 test begin: paddle.reshape(Tensor([5704254, 400],"float32"), list[-1,8,400,], )

[torch error] paddle.reshape(Tensor([5704254, 400],"float32"), list[-1,8,400,], ) 
 shape '[-1, 8, 400]' is invalid for input of size 2281701600
2025-03-17 03:30:28.741795 test begin: paddle.reshape(Tensor([5704254, 400],"float32"), list[80,80,5,], )

[torch error] paddle.reshape(Tensor([5704254, 400],"float32"), list[80,80,5,], ) 
 shape '[80, 80, 5]' is invalid for input of size 2281701600
2025-03-17 03:30:30.309165 test begin: paddle.reshape(Tensor([5704254, 400],"float32"), shape=list[-1,400,], )

[Pass] paddle.reshape(Tensor([5704254, 400],"float32"), shape=list[-1,400,], )
2025-03-17 03:33:06.158778 test begin: paddle.reshape(Tensor([5704254, 80, 5],"float32"), tuple(80,-1,), )

[Pass] paddle.reshape(Tensor([5704254, 80, 5],"float32"), tuple(80,-1,), )
2025-03-17 03:36:13.501492 test begin: paddle.reshape(Tensor([57066, 14, 14, 384],"float16"), list[128,14,14,384,], )

[torch error] paddle.reshape(Tensor([57066, 14, 14, 384],"float16"), list[128,14,14,384,], ) 
 shape '[128, 14, 14, 384]' is invalid for input of size 4295015424
2025-03-17 03:36:17.453479 test begin: paddle.reshape(Tensor([5736, 12, 62400],"float16"), shape=tuple(-1,200,312,), )

[Pass] paddle.reshape(Tensor([5736, 12, 62400],"float16"), shape=tuple(-1,200,312,), )
2025-03-17 03:52:27.684784 test begin: paddle.reshape(Tensor([57853, 232, 320],"float16"), shape=tuple(176,-1,), )

[torch error] paddle.reshape(Tensor([57853, 232, 320],"float16"), shape=tuple(176,-1,), ) 
 shape '[176, -1]' is invalid for input of size 4295006720
2025-03-17 03:52:31.448074 test begin: paddle.reshape(Tensor([57853, 232, 320],"float16"), shape=tuple(272,-1,), )

[torch error] paddle.reshape(Tensor([57853, 232, 320],"float16"), shape=tuple(272,-1,), ) 
 shape '[272, -1]' is invalid for input of size 4295006720
2025-03-17 03:52:32.927130 test begin: paddle.reshape(Tensor([58, 1, 39339679],"float32"), shape=list[-1,2,], )

[Pass] paddle.reshape(Tensor([58, 1, 39339679],"float32"), shape=list[-1,2,], )
2025-03-17 03:55:11.933959 test begin: paddle.reshape(Tensor([58, 19669840, 2],"float32"), shape=list[-1,2,], )

[Pass] paddle.reshape(Tensor([58, 19669840, 2],"float32"), shape=list[-1,2,], )
2025-03-17 03:57:55.495487 test begin: paddle.reshape(Tensor([58, 39339679],"int64"), list[58,], )

[torch error] paddle.reshape(Tensor([58, 39339679],"int64"), list[58,], ) 
 shape '[58]' is invalid for input of size 2281701382
2025-03-17 03:58:04.152487 test begin: paddle.reshape(Tensor([58053, 1, 73984],"float16"), shape=tuple(-1,272,272,), )

[Pass] paddle.reshape(Tensor([58053, 1, 73984],"float16"), shape=tuple(-1,272,272,), )
2025-03-17 04:13:50.486656 test begin: paddle.reshape(Tensor([58053, 272, 272],"float16"), shape=tuple(12,-1,), )

[Pass] paddle.reshape(Tensor([58053, 272, 272],"float16"), shape=tuple(12,-1,), )
2025-03-17 04:30:29.609061 test begin: paddle.reshape(Tensor([58053, 272, 272],"float16"), shape=tuple(168,-1,), )

[torch error] paddle.reshape(Tensor([58053, 272, 272],"float16"), shape=tuple(168,-1,), ) 
 shape '[168, -1]' is invalid for input of size 4294993152
2025-03-17 04:30:33.513463 test begin: paddle.reshape(Tensor([58053, 272, 272],"float16"), shape=tuple(188,-1,), )

[torch error] paddle.reshape(Tensor([58053, 272, 272],"float16"), shape=tuple(188,-1,), ) 
 shape '[188, -1]' is invalid for input of size 4294993152
2025-03-17 04:30:34.964390 test begin: paddle.reshape(Tensor([58053, 272, 272],"float16"), shape=tuple(288,-1,), )

[torch error] paddle.reshape(Tensor([58053, 272, 272],"float16"), shape=tuple(288,-1,), ) 
 shape '[288, -1]' is invalid for input of size 4294993152
2025-03-17 04:30:36.264691 test begin: paddle.reshape(Tensor([58053, 272, 272],"float16"), shape=tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([58053, 272, 272],"float16"), shape=tuple(4,-1,), )
2025-03-17 04:46:34.802127 test begin: paddle.reshape(Tensor([58053, 272, 272],"float16"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([58053, 272, 272],"float16"), shape=tuple(8,-1,), )
2025-03-17 05:02:35.223775 test begin: paddle.reshape(Tensor([5806, 10, 73984],"float16"), shape=tuple(-1,272,272,), )

[Pass] paddle.reshape(Tensor([5806, 10, 73984],"float16"), shape=tuple(-1,272,272,), )
2025-03-17 05:18:28.331807 test begin: paddle.reshape(Tensor([5811, 11, 67200],"float16"), shape=tuple(-1,200,336,), )

[Pass] paddle.reshape(Tensor([5811, 11, 67200],"float16"), shape=tuple(-1,200,336,), )
2025-03-17 05:34:37.844486 test begin: paddle.reshape(Tensor([5820667, 4, 7, 14],"float32"), list[10,4,14,7,], )

[torch error] paddle.reshape(Tensor([5820667, 4, 7, 14],"float32"), list[10,4,14,7,], ) 
 shape '[10, 4, 14, 7]' is invalid for input of size 2281701464
2025-03-17 05:34:42.011233 test begin: paddle.reshape(Tensor([5820667, 4, 7, 14],"float32"), list[11,4,14,7,], )

[torch error] paddle.reshape(Tensor([5820667, 4, 7, 14],"float32"), list[11,4,14,7,], ) 
 shape '[11, 4, 14, 7]' is invalid for input of size 2281701464
2025-03-17 05:34:44.536972 test begin: paddle.reshape(Tensor([5820667, 4, 7, 14],"float32"), list[13,4,14,7,], )

[torch error] paddle.reshape(Tensor([5820667, 4, 7, 14],"float32"), list[13,4,14,7,], ) 
 shape '[13, 4, 14, 7]' is invalid for input of size 2281701464
2025-03-17 05:34:46.002759 test begin: paddle.reshape(Tensor([5820667, 4, 7, 14],"float32"), list[14,4,14,7,], )

[torch error] paddle.reshape(Tensor([5820667, 4, 7, 14],"float32"), list[14,4,14,7,], ) 
 shape '[14, 4, 14, 7]' is invalid for input of size 2281701464
2025-03-17 05:34:48.005526 test begin: paddle.reshape(Tensor([5820667, 4, 7, 14],"float32"), list[4,4,14,7,], )

[torch error] paddle.reshape(Tensor([5820667, 4, 7, 14],"float32"), list[4,4,14,7,], ) 
 shape '[4, 4, 14, 7]' is invalid for input of size 2281701464
2025-03-17 05:34:50.003275 test begin: paddle.reshape(Tensor([5820667, 4, 7, 14],"float32"), list[56,4,14,7,], )

[torch error] paddle.reshape(Tensor([5820667, 4, 7, 14],"float32"), list[56,4,14,7,], ) 
 shape '[56, 4, 14, 7]' is invalid for input of size 2281701464
2025-03-17 05:34:52.072518 test begin: paddle.reshape(Tensor([5820667, 4, 7, 14],"float32"), list[7,4,14,7,], )

[torch error] paddle.reshape(Tensor([5820667, 4, 7, 14],"float32"), list[7,4,14,7,], ) 
 shape '[7, 4, 14, 7]' is invalid for input of size 2281701464
2025-03-17 05:34:53.994397 test begin: paddle.reshape(Tensor([588675, 114, 1, 64],"float16"), list[4,114,-1,], )

[Pass] paddle.reshape(Tensor([588675, 114, 1, 64],"float16"), list[4,114,-1,], )
2025-03-17 05:51:06.390183 test begin: paddle.reshape(Tensor([58868, 240, 304],"float16"), shape=tuple(252,-1,), )

[torch error] paddle.reshape(Tensor([58868, 240, 304],"float16"), shape=tuple(252,-1,), ) 
 shape '[252, -1]' is invalid for input of size 4295009280
2025-03-17 05:51:10.287371 test begin: paddle.reshape(Tensor([5895, 4, 288, 336],"float32"), shape=list[-1,288,336,], )

[Pass] paddle.reshape(Tensor([5895, 4, 288, 336],"float32"), shape=list[-1,288,336,], )
2025-03-17 05:53:54.870498 test begin: paddle.reshape(Tensor([5895, 4, 96768],"float32"), shape=tuple(-1,288,336,), )

[Pass] paddle.reshape(Tensor([5895, 4, 96768],"float32"), shape=tuple(-1,288,336,), )
2025-03-17 05:57:06.180810 test begin: paddle.reshape(Tensor([59, 38672905],"int64"), list[59,], )

[torch error] paddle.reshape(Tensor([59, 38672905],"int64"), list[59,], ) 
 shape '[59]' is invalid for input of size 2281701395
2025-03-17 05:57:14.331958 test begin: paddle.reshape(Tensor([59, 512, 512, 150],"float32"), list[-1,150,], )

[Pass] paddle.reshape(Tensor([59, 512, 512, 150],"float32"), list[-1,150,], )
2025-03-17 05:59:59.458375 test begin: paddle.reshape(Tensor([6, 100, 100, 38029],"float32"), tuple(-1,11,), )

[torch error] paddle.reshape(Tensor([6, 100, 100, 38029],"float32"), tuple(-1,11,), ) 
 shape '[-1, 11]' is invalid for input of size 2281740000
2025-03-17 06:00:01.718845 test begin: paddle.reshape(Tensor([6, 100, 100, 38029],"float32"), tuple(-1,2,), )

[Pass] paddle.reshape(Tensor([6, 100, 100, 38029],"float32"), tuple(-1,2,), )
2025-03-17 06:02:55.146210 test begin: paddle.reshape(Tensor([6, 100, 1901418, 2],"float32"), tuple(-1,2,), )

[Pass] paddle.reshape(Tensor([6, 100, 1901418, 2],"float32"), tuple(-1,2,), )
2025-03-17 06:05:47.531880 test begin: paddle.reshape(Tensor([6, 100, 345713, 11],"float32"), tuple(-1,11,), )

[Pass] paddle.reshape(Tensor([6, 100, 345713, 11],"float32"), tuple(-1,11,), )
2025-03-17 06:08:32.090973 test begin: paddle.reshape(Tensor([6, 11883862, 1, 32],"float32"), shape=list[-1,32,], )

[Pass] paddle.reshape(Tensor([6, 11883862, 1, 32],"float32"), shape=list[-1,32,], )
2025-03-17 06:11:40.102153 test begin: paddle.reshape(Tensor([6, 1250933, 304],"float32"), shape=tuple(6,-1,), )

[Pass] paddle.reshape(Tensor([6, 1250933, 304],"float32"), shape=tuple(6,-1,), )
2025-03-17 06:14:46.130098 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[-1,1,3,], )

[Pass] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[-1,1,3,], )
2025-03-17 06:18:19.654214 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[-1,3,2,], )

[Pass] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[-1,3,2,], )
2025-03-17 06:20:57.844798 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[-1,6,2,], )

[Pass] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[-1,6,2,], )
2025-03-17 06:24:19.341223 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[-1,9,1,], )

[Pass] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[-1,9,1,], )
2025-03-17 06:27:02.300427 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[-1,9,2,], )

[Pass] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[-1,9,2,], )
2025-03-17 06:30:23.131194 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[1,-1,2,], )

[Pass] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[1,-1,2,], )
2025-03-17 06:33:30.852839 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[1,18,2,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[1,18,2,], ) 
 shape '[1, 18, 2]' is invalid for input of size 2281701384
2025-03-17 06:33:34.917969 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[1,2,2,3,3,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[1,2,2,3,3,], ) 
 shape '[1, 2, 2, 3, 3]' is invalid for input of size 2281701384
2025-03-17 06:33:36.533375 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[12,1,3,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[12,1,3,], ) 
 shape '[12, 1, 3]' is invalid for input of size 2281701384
2025-03-17 06:33:37.884553 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[2,-1,18,], )

[Pass] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[2,-1,18,], )
2025-03-17 06:36:18.821815 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[2,1,18,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[2,1,18,], ) 
 shape '[2, 1, 18]' is invalid for input of size 2281701384
2025-03-17 06:36:22.819970 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[2,3,3,2,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[2,3,3,2,], ) 
 shape '[2, 3, 3, 2]' is invalid for input of size 2281701384
2025-03-17 06:36:23.981794 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[2,6,3,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[2,6,3,], ) 
 shape '[2, 6, 3]' is invalid for input of size 2281701384
2025-03-17 06:36:25.327985 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[2,9,2,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[2,9,2,], ) 
 shape '[2, 9, 2]' is invalid for input of size 2281701384
2025-03-17 06:36:26.920391 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[3,6,2,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[3,6,2,], ) 
 shape '[3, 6, 2]' is invalid for input of size 2281701384
2025-03-17 06:36:27.989356 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[4,9,1,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[4,9,1,], ) 
 shape '[4, 9, 1]' is invalid for input of size 2281701384
2025-03-17 06:36:28.988446 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[6,2,3,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[6,2,3,], ) 
 shape '[6, 2, 3]' is invalid for input of size 2281701384
2025-03-17 06:36:30.015164 test begin: paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[6,3,2,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"float32"), list[6,3,2,], ) 
 shape '[6, 3, 2]' is invalid for input of size 2281701384
2025-03-17 06:36:31.366791 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[-1,1,3,], )

[Pass] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[-1,1,3,], )
2025-03-17 06:39:52.614915 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[-1,3,2,], )

[Pass] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[-1,3,2,], )
2025-03-17 06:42:46.511584 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[-1,6,2,], )

[Pass] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[-1,6,2,], )
2025-03-17 06:45:32.621482 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[-1,9,1,], )

[Pass] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[-1,9,1,], )
2025-03-17 06:49:07.129285 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[-1,9,2,], )

[Pass] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[-1,9,2,], )
2025-03-17 06:51:51.020933 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[1,-1,2,], )

[Pass] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[1,-1,2,], )
2025-03-17 06:54:39.016839 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[1,18,2,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[1,18,2,], ) 
 shape '[1, 18, 2]' is invalid for input of size 2281701384
2025-03-17 06:54:47.126167 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[1,2,2,3,3,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[1,2,2,3,3,], ) 
 shape '[1, 2, 2, 3, 3]' is invalid for input of size 2281701384
2025-03-17 06:54:50.506023 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[12,1,3,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[12,1,3,], ) 
 shape '[12, 1, 3]' is invalid for input of size 2281701384
2025-03-17 06:54:54.280067 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[2,-1,18,], )

[Pass] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[2,-1,18,], )
2025-03-17 06:57:33.946073 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[2,1,18,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[2,1,18,], ) 
 shape '[2, 1, 18]' is invalid for input of size 2281701384
2025-03-17 06:57:40.661109 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[2,3,3,2,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[2,3,3,2,], ) 
 shape '[2, 3, 3, 2]' is invalid for input of size 2281701384
2025-03-17 06:57:45.507859 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[2,6,3,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[2,6,3,], ) 
 shape '[2, 6, 3]' is invalid for input of size 2281701384
2025-03-17 06:57:49.101839 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[2,9,2,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[2,9,2,], ) 
 shape '[2, 9, 2]' is invalid for input of size 2281701384
2025-03-17 06:57:51.762193 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[3,6,2,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[3,6,2,], ) 
 shape '[3, 6, 2]' is invalid for input of size 2281701384
2025-03-17 06:57:54.520814 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[4,9,1,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[4,9,1,], ) 
 shape '[4, 9, 1]' is invalid for input of size 2281701384
2025-03-17 06:57:58.031811 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[6,2,3,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[6,2,3,], ) 
 shape '[6, 2, 3]' is invalid for input of size 2281701384
2025-03-17 06:58:01.313019 test begin: paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[6,3,2,], )

[torch error] paddle.reshape(Tensor([6, 126761188, 3],"int64"), list[6,3,2,], ) 
 shape '[6, 3, 2]' is invalid for input of size 2281701384
2025-03-17 06:58:04.319541 test begin: paddle.reshape(Tensor([6, 1382850, 25, 11],"float32"), tuple(-1,11,), )

[Pass] paddle.reshape(Tensor([6, 1382850, 25, 11],"float32"), tuple(-1,11,), )
2025-03-17 07:01:17.596578 test begin: paddle.reshape(Tensor([6, 178956971, 4],"float16"), shape=list[6,8,], )

[torch error] paddle.reshape(Tensor([6, 178956971, 4],"float16"), shape=list[6,8,], ) 
 shape '[6, 8]' is invalid for input of size 4294967304
2025-03-17 07:01:22.038618 test begin: paddle.reshape(Tensor([6, 1901418, 100, 2],"float32"), tuple(-1,2,), )

[Pass] paddle.reshape(Tensor([6, 1901418, 100, 2],"float32"), tuple(-1,2,), )
2025-03-17 07:04:06.819963 test begin: paddle.reshape(Tensor([6, 1901418, 200],"float32"), shape=tuple(6,-1,), )

[Pass] paddle.reshape(Tensor([6, 1901418, 200],"float32"), shape=tuple(6,-1,), )
2025-03-17 07:07:22.455514 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[-1,1,3,], )

[Pass] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[-1,1,3,], )
2025-03-17 07:10:20.509222 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[-1,3,2,], )

[Pass] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[-1,3,2,], )
2025-03-17 07:13:23.316230 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[-1,6,2,], )

[Pass] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[-1,6,2,], )
2025-03-17 07:16:28.239747 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[-1,9,1,], )

[Pass] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[-1,9,1,], )
2025-03-17 07:19:27.981843 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[-1,9,2,], )

[Pass] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[-1,9,2,], )
2025-03-17 07:22:13.005086 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[1,-1,2,], )

[Pass] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[1,-1,2,], )
2025-03-17 07:24:52.290363 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[1,18,2,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[1,18,2,], ) 
 shape '[1, 18, 2]' is invalid for input of size 2281701384
2025-03-17 07:24:56.338766 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[1,2,2,3,3,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[1,2,2,3,3,], ) 
 shape '[1, 2, 2, 3, 3]' is invalid for input of size 2281701384
2025-03-17 07:24:58.212426 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[12,1,3,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[12,1,3,], ) 
 shape '[12, 1, 3]' is invalid for input of size 2281701384
2025-03-17 07:25:00.746907 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[2,-1,18,], )

[Pass] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[2,-1,18,], )
2025-03-17 07:27:53.786166 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[2,1,18,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[2,1,18,], ) 
 shape '[2, 1, 18]' is invalid for input of size 2281701384
2025-03-17 07:27:57.662890 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[2,3,3,2,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[2,3,3,2,], ) 
 shape '[2, 3, 3, 2]' is invalid for input of size 2281701384
2025-03-17 07:27:59.298858 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[2,6,3,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[2,6,3,], ) 
 shape '[2, 6, 3]' is invalid for input of size 2281701384
2025-03-17 07:28:01.410587 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[2,9,2,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[2,9,2,], ) 
 shape '[2, 9, 2]' is invalid for input of size 2281701384
2025-03-17 07:28:03.409997 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[3,6,2,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[3,6,2,], ) 
 shape '[3, 6, 2]' is invalid for input of size 2281701384
2025-03-17 07:28:05.397884 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[4,9,1,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[4,9,1,], ) 
 shape '[4, 9, 1]' is invalid for input of size 2281701384
2025-03-17 07:28:07.072317 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[6,2,3,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[6,2,3,], ) 
 shape '[6, 2, 3]' is invalid for input of size 2281701384
2025-03-17 07:28:08.436171 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[6,3,2,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"float32"), list[6,3,2,], ) 
 shape '[6, 3, 2]' is invalid for input of size 2281701384
2025-03-17 07:28:10.554548 test begin: paddle.reshape(Tensor([6, 2, 190141782],"float32"), shape=list[6,8,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"float32"), shape=list[6,8,], ) 
 shape '[6, 8]' is invalid for input of size 2281701384
2025-03-17 07:28:12.526348 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[-1,1,3,], )

[Pass] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[-1,1,3,], )
2025-03-17 07:31:13.835050 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[-1,3,2,], )

[Pass] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[-1,3,2,], )
2025-03-17 07:34:39.797793 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[-1,6,2,], )

[Pass] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[-1,6,2,], )
2025-03-17 07:37:44.443049 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[-1,9,1,], )

[Pass] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[-1,9,1,], )
2025-03-17 07:41:08.661394 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[-1,9,2,], )

[Pass] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[-1,9,2,], )
2025-03-17 07:44:01.096349 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[1,-1,2,], )

[Pass] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[1,-1,2,], )
2025-03-17 07:46:41.015900 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[1,18,2,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[1,18,2,], ) 
 shape '[1, 18, 2]' is invalid for input of size 2281701384
2025-03-17 07:46:49.217183 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[1,2,2,3,3,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[1,2,2,3,3,], ) 
 shape '[1, 2, 2, 3, 3]' is invalid for input of size 2281701384
2025-03-17 07:46:52.816620 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[12,1,3,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[12,1,3,], ) 
 shape '[12, 1, 3]' is invalid for input of size 2281701384
2025-03-17 07:46:56.808000 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[2,-1,18,], )

[Pass] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[2,-1,18,], )
2025-03-17 07:49:34.757347 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[2,1,18,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[2,1,18,], ) 
 shape '[2, 1, 18]' is invalid for input of size 2281701384
2025-03-17 07:49:42.282804 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[2,3,3,2,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[2,3,3,2,], ) 
 shape '[2, 3, 3, 2]' is invalid for input of size 2281701384
2025-03-17 07:49:47.238117 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[2,6,3,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[2,6,3,], ) 
 shape '[2, 6, 3]' is invalid for input of size 2281701384
2025-03-17 07:49:51.230620 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[2,9,2,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[2,9,2,], ) 
 shape '[2, 9, 2]' is invalid for input of size 2281701384
2025-03-17 07:49:54.532143 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[3,6,2,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[3,6,2,], ) 
 shape '[3, 6, 2]' is invalid for input of size 2281701384
2025-03-17 07:49:57.666278 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[4,9,1,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[4,9,1,], ) 
 shape '[4, 9, 1]' is invalid for input of size 2281701384
2025-03-17 07:50:01.158624 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[6,2,3,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[6,2,3,], ) 
 shape '[6, 2, 3]' is invalid for input of size 2281701384
2025-03-17 07:50:04.233828 test begin: paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[6,3,2,], )

[torch error] paddle.reshape(Tensor([6, 2, 190141782],"int64"), list[6,3,2,], ) 
 shape '[6, 3, 2]' is invalid for input of size 2281701384
2025-03-17 07:50:08.140684 test begin: paddle.reshape(Tensor([6, 2, 357913942],"float16"), shape=list[6,8,], )

[torch error] paddle.reshape(Tensor([6, 2, 357913942],"float16"), shape=list[6,8,], ) 
 shape '[6, 8]' is invalid for input of size 4294967304
2025-03-17 07:50:12.472849 test begin: paddle.reshape(Tensor([6, 200, 1901418],"float32"), shape=tuple(6,-1,), )

[Pass] paddle.reshape(Tensor([6, 200, 1901418],"float32"), shape=tuple(6,-1,), )
2025-03-17 07:53:08.036147 test begin: paddle.reshape(Tensor([6, 2112687, 5, 6, 6],"float32"), tuple(6,-1,), )

[Pass] paddle.reshape(Tensor([6, 2112687, 5, 6, 6],"float32"), tuple(6,-1,), )
2025-03-17 07:56:04.758799 test begin: paddle.reshape(Tensor([6, 2112687, 6, 5, 6],"float32"), tuple(6,-1,), )

[Pass] paddle.reshape(Tensor([6, 2112687, 6, 5, 6],"float32"), tuple(6,-1,), )
2025-03-17 07:59:03.671947 test begin: paddle.reshape(Tensor([6, 25, 1382850, 11],"float32"), tuple(-1,11,), )

[Pass] paddle.reshape(Tensor([6, 25, 1382850, 11],"float32"), tuple(-1,11,), )
2025-03-17 08:02:02.084737 test begin: paddle.reshape(Tensor([6, 25, 25, 608454],"float32"), tuple(-1,11,), )

[Pass] paddle.reshape(Tensor([6, 25, 25, 608454],"float32"), tuple(-1,11,), )
2025-03-17 08:04:57.072165 test begin: paddle.reshape(Tensor([6, 25, 25, 608454],"float32"), tuple(-1,2,), )

[Pass] paddle.reshape(Tensor([6, 25, 25, 608454],"float32"), tuple(-1,2,), )
2025-03-17 08:07:37.068573 test begin: paddle.reshape(Tensor([6, 25, 7605672, 2],"float32"), tuple(-1,2,), )

[Pass] paddle.reshape(Tensor([6, 25, 7605672, 2],"float32"), tuple(-1,2,), )
2025-03-17 08:10:11.467168 test begin: paddle.reshape(Tensor([6, 3, 1, 126761188],"float32"), shape=list[-1,32,], )

[torch error] paddle.reshape(Tensor([6, 3, 1, 126761188],"float32"), shape=list[-1,32,], ) 
 shape '[-1, 32]' is invalid for input of size 2281701384
2025-03-17 08:10:15.321812 test begin: paddle.reshape(Tensor([6, 3, 3961288, 32],"float32"), shape=list[-1,32,], )

[Pass] paddle.reshape(Tensor([6, 3, 3961288, 32],"float32"), shape=list[-1,32,], )
2025-03-17 08:13:13.422731 test begin: paddle.reshape(Tensor([6, 304, 1250933],"float32"), shape=tuple(6,-1,), )

[Pass] paddle.reshape(Tensor([6, 304, 1250933],"float32"), shape=tuple(6,-1,), )
2025-03-17 08:15:54.477074 test begin: paddle.reshape(Tensor([6, 345713, 100, 11],"float32"), tuple(-1,11,), )

[Pass] paddle.reshape(Tensor([6, 345713, 100, 11],"float32"), tuple(-1,11,), )
2025-03-17 08:18:30.527122 test begin: paddle.reshape(Tensor([6, 380283564],"float32"), list[-1,3,8,], )

[Pass] paddle.reshape(Tensor([6, 380283564],"float32"), list[-1,3,8,], )
2025-03-17 08:21:24.308799 test begin: paddle.reshape(Tensor([6, 380283564],"float32"), list[6,4,5,6,6,], )

[torch error] paddle.reshape(Tensor([6, 380283564],"float32"), list[6,4,5,6,6,], ) 
 shape '[6, 4, 5, 6, 6]' is invalid for input of size 2281701384
2025-03-17 08:21:28.373837 test begin: paddle.reshape(Tensor([6, 380283564],"float32"), list[6,4,6,5,6,], )

[torch error] paddle.reshape(Tensor([6, 380283564],"float32"), list[6,4,6,5,6,], ) 
 shape '[6, 4, 6, 5, 6]' is invalid for input of size 2281701384
2025-03-17 08:21:30.243664 test begin: paddle.reshape(Tensor([6, 380283564],"float32"), shape=list[-1,3,], )

[Pass] paddle.reshape(Tensor([6, 380283564],"float32"), shape=list[-1,3,], )
2025-03-17 08:24:13.762988 test begin: paddle.reshape(Tensor([6, 380283564],"float32"), shape=list[1,-1,256,], )

[torch error] paddle.reshape(Tensor([6, 380283564],"float32"), shape=list[1,-1,256,], ) 
 shape '[1, -1, 256]' is invalid for input of size 2281701384
2025-03-17 08:24:18.259944 test begin: paddle.reshape(Tensor([6, 380283564],"int32"), shape=tuple(3,2,), )

[torch error] paddle.reshape(Tensor([6, 380283564],"int32"), shape=tuple(3,2,), ) 
 shape '[3, 2]' is invalid for input of size 2281701384
2025-03-17 08:24:22.350131 test begin: paddle.reshape(Tensor([6, 3802836, 50, 2],"float32"), tuple(-1,2,), )

[Pass] paddle.reshape(Tensor([6, 3802836, 50, 2],"float32"), tuple(-1,2,), )
2025-03-17 08:27:20.307988 test begin: paddle.reshape(Tensor([6, 4, 2640859, 6, 6],"float32"), tuple(6,-1,), )

[Pass] paddle.reshape(Tensor([6, 4, 2640859, 6, 6],"float32"), tuple(6,-1,), )
2025-03-17 08:30:10.729830 test begin: paddle.reshape(Tensor([6, 4, 3169030, 5, 6],"float32"), tuple(6,-1,), )

[Pass] paddle.reshape(Tensor([6, 4, 3169030, 5, 6],"float32"), tuple(6,-1,), )
2025-03-17 08:32:50.808114 test begin: paddle.reshape(Tensor([6, 4, 5, 3169030, 6],"float32"), tuple(6,-1,), )

[Pass] paddle.reshape(Tensor([6, 4, 5, 3169030, 6],"float32"), tuple(6,-1,), )
2025-03-17 08:35:44.429875 test begin: paddle.reshape(Tensor([6, 4, 5, 6, 3169030],"float32"), tuple(6,-1,), )

[Pass] paddle.reshape(Tensor([6, 4, 5, 6, 3169030],"float32"), tuple(6,-1,), )
2025-03-17 08:38:54.230146 test begin: paddle.reshape(Tensor([6, 4, 6, 2640859, 6],"float32"), tuple(6,-1,), )

[Pass] paddle.reshape(Tensor([6, 4, 6, 2640859, 6],"float32"), tuple(6,-1,), )
2025-03-17 08:41:51.060009 test begin: paddle.reshape(Tensor([6, 4, 6, 5, 3169030],"float32"), tuple(6,-1,), )

[Pass] paddle.reshape(Tensor([6, 4, 6, 5, 3169030],"float32"), tuple(6,-1,), )
2025-03-17 08:44:32.413297 test begin: paddle.reshape(Tensor([6, 50, 3802836, 2],"float32"), tuple(-1,2,), )

[Pass] paddle.reshape(Tensor([6, 50, 3802836, 2],"float32"), tuple(-1,2,), )
2025-03-17 08:47:38.990680 test begin: paddle.reshape(Tensor([6, 50, 50, 152114],"float32"), tuple(-1,11,), )

[torch error] paddle.reshape(Tensor([6, 50, 50, 152114],"float32"), tuple(-1,11,), ) 
 shape '[-1, 11]' is invalid for input of size 2281710000
2025-03-17 08:47:43.119743 test begin: paddle.reshape(Tensor([6, 50, 50, 152114],"float32"), tuple(-1,2,), )

[Pass] paddle.reshape(Tensor([6, 50, 50, 152114],"float32"), tuple(-1,2,), )
2025-03-17 08:50:12.576367 test begin: paddle.reshape(Tensor([6, 50, 691425, 11],"float32"), tuple(-1,11,), )

[Pass] paddle.reshape(Tensor([6, 50, 691425, 11],"float32"), tuple(-1,11,), )
2025-03-17 08:53:04.816167 test begin: paddle.reshape(Tensor([6, 691425, 50, 11],"float32"), tuple(-1,11,), )

[Pass] paddle.reshape(Tensor([6, 691425, 50, 11],"float32"), tuple(-1,11,), )
2025-03-17 08:55:52.306513 test begin: paddle.reshape(Tensor([6, 95070891, 4],"float32"), shape=list[6,8,], )

[torch error] paddle.reshape(Tensor([6, 95070891, 4],"float32"), shape=list[6,8,], ) 
 shape '[6, 8]' is invalid for input of size 2281701384
2025-03-17 08:55:56.485380 test begin: paddle.reshape(Tensor([60, 125094, 304],"float32"), shape=tuple(60,-1,), )

[Pass] paddle.reshape(Tensor([60, 125094, 304],"float32"), shape=tuple(60,-1,), )
2025-03-17 08:59:00.937000 test begin: paddle.reshape(Tensor([60, 139811, 272],"float32"), shape=tuple(60,-1,), )

[Pass] paddle.reshape(Tensor([60, 139811, 272],"float32"), shape=tuple(60,-1,), )
2025-03-17 09:01:54.996474 test begin: paddle.reshape(Tensor([60, 14, 14, 194023],"float32"), list[60,14,14,384,], )

[torch error] paddle.reshape(Tensor([60, 14, 14, 194023],"float32"), list[60,14,14,384,], ) 
 shape '[60, 14, 14, 384]' is invalid for input of size 2281710480
2025-03-17 09:01:59.061587 test begin: paddle.reshape(Tensor([60, 14, 14, 194023],"float32"), list[60,14,14,512,], )

[torch error] paddle.reshape(Tensor([60, 14, 14, 194023],"float32"), list[60,14,14,512,], ) 
 shape '[60, 14, 14, 512]' is invalid for input of size 2281710480
2025-03-17 09:02:01.208187 test begin: paddle.reshape(Tensor([60, 14, 5306, 512],"float32"), list[60,14,14,512,], )

[torch error] paddle.reshape(Tensor([60, 14, 5306, 512],"float32"), list[60,14,14,512,], ) 
 shape '[60, 14, 14, 512]' is invalid for input of size 2282004480
2025-03-17 09:02:03.255117 test begin: paddle.reshape(Tensor([60, 14, 7074, 384],"float32"), list[60,14,14,384,], )

[torch error] paddle.reshape(Tensor([60, 14, 7074, 384],"float32"), list[60,14,14,384,], ) 
 shape '[60, 14, 14, 384]' is invalid for input of size 2281789440
2025-03-17 09:02:05.241699 test begin: paddle.reshape(Tensor([60, 200, 190142],"float32"), shape=tuple(60,-1,), )

[Pass] paddle.reshape(Tensor([60, 200, 190142],"float32"), shape=tuple(60,-1,), )
2025-03-17 09:05:03.615674 test begin: paddle.reshape(Tensor([60, 200, 357914],"float16"), shape=tuple(60,-1,), )

[Pass] paddle.reshape(Tensor([60, 200, 357914],"float16"), shape=tuple(60,-1,), )
2025-03-17 09:21:28.222126 test begin: paddle.reshape(Tensor([60, 229433, 312],"float16"), shape=tuple(60,-1,), )

[Pass] paddle.reshape(Tensor([60, 229433, 312],"float16"), shape=tuple(60,-1,), )
2025-03-17 09:37:22.185081 test begin: paddle.reshape(Tensor([60, 235470, 304],"float16"), shape=tuple(60,-1,), )

[Pass] paddle.reshape(Tensor([60, 235470, 304],"float16"), shape=tuple(60,-1,), )
2025-03-17 09:53:20.921525 test begin: paddle.reshape(Tensor([60, 24, 24, 66022],"float32"), list[60,24,24,512,], )

[torch error] paddle.reshape(Tensor([60, 24, 24, 66022],"float32"), list[60,24,24,512,], ) 
 shape '[60, 24, 24, 512]' is invalid for input of size 2281720320
2025-03-17 09:53:25.241836 test begin: paddle.reshape(Tensor([60, 24, 3095, 512],"float32"), list[60,24,24,512,], )

[torch error] paddle.reshape(Tensor([60, 24, 3095, 512],"float32"), list[60,24,24,512,], ) 
 shape '[60, 24, 24, 512]' is invalid for input of size 2281881600
2025-03-17 09:53:26.628918 test begin: paddle.reshape(Tensor([60, 263173, 272],"float16"), shape=tuple(60,-1,), )

[Pass] paddle.reshape(Tensor([60, 263173, 272],"float16"), shape=tuple(60,-1,), )
2025-03-17 10:09:48.924835 test begin: paddle.reshape(Tensor([60, 28, 28, 48506],"float32"), list[60,28,28,192,], )

[torch error] paddle.reshape(Tensor([60, 28, 28, 48506],"float32"), list[60,28,28,192,], ) 
 shape '[60, 28, 28, 192]' is invalid for input of size 2281722240
2025-03-17 10:09:53.426921 test begin: paddle.reshape(Tensor([60, 28, 28, 48506],"float32"), list[60,28,28,256,], )

[torch error] paddle.reshape(Tensor([60, 28, 28, 48506],"float32"), list[60,28,28,256,], ) 
 shape '[60, 28, 28, 256]' is invalid for input of size 2281722240
2025-03-17 10:09:55.323215 test begin: paddle.reshape(Tensor([60, 28, 5306, 256],"float32"), list[60,28,28,256,], )

[torch error] paddle.reshape(Tensor([60, 28, 5306, 256],"float32"), list[60,28,28,256,], ) 
 shape '[60, 28, 28, 256]' is invalid for input of size 2282004480
2025-03-17 10:09:57.178905 test begin: paddle.reshape(Tensor([60, 28, 7074, 192],"float32"), list[60,28,28,192,], )

[torch error] paddle.reshape(Tensor([60, 28, 7074, 192],"float32"), list[60,28,28,192,], ) 
 shape '[60, 28, 28, 192]' is invalid for input of size 2281789440
2025-03-17 10:09:59.055023 test begin: paddle.reshape(Tensor([60, 3095, 24, 512],"float32"), list[60,24,24,512,], )

[torch error] paddle.reshape(Tensor([60, 3095, 24, 512],"float32"), list[60,24,24,512,], ) 
 shape '[60, 24, 24, 512]' is invalid for input of size 2281881600
2025-03-17 10:10:01.561121 test begin: paddle.reshape(Tensor([60, 3095, 48, 256],"float32"), list[60,48,48,256,], )

[torch error] paddle.reshape(Tensor([60, 3095, 48, 256],"float32"), list[60,48,48,256,], ) 
 shape '[60, 48, 48, 256]' is invalid for input of size 2281881600
2025-03-17 10:10:03.485020 test begin: paddle.reshape(Tensor([60, 3095, 96, 128],"float32"), list[60,96,96,128,], )

[torch error] paddle.reshape(Tensor([60, 3095, 96, 128],"float32"), list[60,96,96,128,], ) 
 shape '[60, 96, 96, 128]' is invalid for input of size 2281881600
2025-03-17 10:10:05.355620 test begin: paddle.reshape(Tensor([60, 38028357],"float32"), list[15,4,4,], )

[torch error] paddle.reshape(Tensor([60, 38028357],"float32"), list[15,4,4,], ) 
 shape '[15, 4, 4]' is invalid for input of size 2281701420
2025-03-17 10:10:07.256495 test begin: paddle.reshape(Tensor([60, 38028357],"int64"), list[60,], )

[torch error] paddle.reshape(Tensor([60, 38028357],"int64"), list[60,], ) 
 shape '[60]' is invalid for input of size 2281701420
2025-03-17 10:10:16.355413 test begin: paddle.reshape(Tensor([60, 48, 3095, 256],"float32"), list[60,48,48,256,], )

[torch error] paddle.reshape(Tensor([60, 48, 3095, 256],"float32"), list[60,48,48,256,], ) 
 shape '[60, 48, 48, 256]' is invalid for input of size 2281881600
2025-03-17 10:10:20.701775 test begin: paddle.reshape(Tensor([60, 48, 48, 16506],"float32"), list[60,48,48,256,], )

[torch error] paddle.reshape(Tensor([60, 48, 48, 16506],"float32"), list[60,48,48,256,], ) 
 shape '[60, 48, 48, 256]' is invalid for input of size 2281789440
2025-03-17 10:10:22.239887 test begin: paddle.reshape(Tensor([60, 5306, 14, 512],"float32"), list[60,14,14,512,], )

[torch error] paddle.reshape(Tensor([60, 5306, 14, 512],"float32"), list[60,14,14,512,], ) 
 shape '[60, 14, 14, 512]' is invalid for input of size 2282004480
2025-03-17 10:10:24.100683 test begin: paddle.reshape(Tensor([60, 5306, 28, 256],"float32"), list[60,28,28,256,], )

[torch error] paddle.reshape(Tensor([60, 5306, 28, 256],"float32"), list[60,28,28,256,], ) 
 shape '[60, 28, 28, 256]' is invalid for input of size 2282004480
2025-03-17 10:10:26.010874 test begin: paddle.reshape(Tensor([60, 5306, 56, 128],"float32"), list[60,56,56,128,], )

[torch error] paddle.reshape(Tensor([60, 5306, 56, 128],"float32"), list[60,56,56,128,], ) 
 shape '[60, 56, 56, 128]' is invalid for input of size 2282004480
2025-03-17 10:10:27.950776 test begin: paddle.reshape(Tensor([60, 56, 5306, 128],"float32"), list[60,56,56,128,], )

[torch error] paddle.reshape(Tensor([60, 56, 5306, 128],"float32"), list[60,56,56,128,], ) 
 shape '[60, 56, 56, 128]' is invalid for input of size 2282004480
2025-03-17 10:10:29.833951 test begin: paddle.reshape(Tensor([60, 56, 56, 12127],"float32"), list[60,56,56,128,], )

[torch error] paddle.reshape(Tensor([60, 56, 56, 12127],"float32"), list[60,56,56,128,], ) 
 shape '[60, 56, 56, 128]' is invalid for input of size 2281816320
2025-03-17 10:10:31.732585 test begin: paddle.reshape(Tensor([60, 56, 56, 12127],"float32"), list[60,56,56,96,], )

[torch error] paddle.reshape(Tensor([60, 56, 56, 12127],"float32"), list[60,56,56,96,], ) 
 shape '[60, 56, 56, 96]' is invalid for input of size 2281816320
2025-03-17 10:10:34.258840 test begin: paddle.reshape(Tensor([60, 56, 7074, 96],"float32"), list[60,56,56,96,], )

[torch error] paddle.reshape(Tensor([60, 56, 7074, 96],"float32"), list[60,56,56,96,], ) 
 shape '[60, 56, 56, 96]' is invalid for input of size 2281789440
2025-03-17 10:10:36.156415 test begin: paddle.reshape(Tensor([60, 7074, 14, 384],"float32"), list[60,14,14,384,], )

[torch error] paddle.reshape(Tensor([60, 7074, 14, 384],"float32"), list[60,14,14,384,], ) 
 shape '[60, 14, 14, 384]' is invalid for input of size 2281789440
2025-03-17 10:10:38.035908 test begin: paddle.reshape(Tensor([60, 7074, 28, 192],"float32"), list[60,28,28,192,], )

[torch error] paddle.reshape(Tensor([60, 7074, 28, 192],"float32"), list[60,28,28,192,], ) 
 shape '[60, 28, 28, 192]' is invalid for input of size 2281789440
2025-03-17 10:10:39.892052 test begin: paddle.reshape(Tensor([60, 7074, 56, 96],"float32"), list[60,56,56,96,], )

[torch error] paddle.reshape(Tensor([60, 7074, 56, 96],"float32"), list[60,56,56,96,], ) 
 shape '[60, 56, 56, 96]' is invalid for input of size 2281789440
2025-03-17 10:10:41.464283 test begin: paddle.reshape(Tensor([60, 96, 3095, 128],"float32"), list[60,96,96,128,], )

[torch error] paddle.reshape(Tensor([60, 96, 3095, 128],"float32"), list[60,96,96,128,], ) 
 shape '[60, 96, 96, 128]' is invalid for input of size 2281881600
2025-03-17 10:10:43.109767 test begin: paddle.reshape(Tensor([60, 96, 96, 4127],"float32"), list[60,96,96,128,], )

[torch error] paddle.reshape(Tensor([60, 96, 96, 4127],"float32"), list[60,96,96,128,], ) 
 shape '[60, 96, 96, 128]' is invalid for input of size 2282065920
2025-03-17 10:10:44.984492 test begin: paddle.reshape(Tensor([60632, 24, 2, 28, 28],"float32"), shape=list[2,48,28,28,], )

[torch error] paddle.reshape(Tensor([60632, 24, 2, 28, 28],"float32"), shape=list[2,48,28,28,], ) 
 shape '[2, 48, 28, 28]' is invalid for input of size 2281703424
2025-03-17 10:10:47.492947 test begin: paddle.reshape(Tensor([60632, 48, 28, 28],"float32"), shape=list[2,2,24,28,28,], )

[torch error] paddle.reshape(Tensor([60632, 48, 28, 28],"float32"), shape=list[2,2,24,28,28,], ) 
 shape '[2, 2, 24, 28, 28]' is invalid for input of size 2281703424
2025-03-17 10:10:49.981578 test begin: paddle.reshape(Tensor([609, 45, 248, 336],"float32"), shape=list[-1,248,336,], )

[Pass] paddle.reshape(Tensor([609, 45, 248, 336],"float32"), shape=list[-1,248,336,], )
2025-03-17 10:14:23.168687 test begin: paddle.reshape(Tensor([6090, 10, 70528],"float16"), shape=tuple(-1,232,304,), )

[Pass] paddle.reshape(Tensor([6090, 10, 70528],"float16"), shape=tuple(-1,232,304,), )
2025-03-17 10:31:11.757371 test begin: paddle.reshape(Tensor([61, 37404941],"int64"), list[61,], )

[torch error] paddle.reshape(Tensor([61, 37404941],"int64"), list[61,], ) 
 shape '[61]' is invalid for input of size 2281701401
2025-03-17 10:31:20.661622 test begin: paddle.reshape(Tensor([6101, 11, 64000],"float16"), shape=tuple(-1,200,320,), )

[Pass] paddle.reshape(Tensor([6101, 11, 64000],"float16"), shape=tuple(-1,200,320,), )
2025-03-17 10:47:54.294870 test begin: paddle.reshape(Tensor([61337, 100, 124, 3],"float32"), shape=tuple(4,-1,1,), )

[Pass] paddle.reshape(Tensor([61337, 100, 124, 3],"float32"), shape=tuple(4,-1,1,), )
2025-03-17 10:51:02.559463 test begin: paddle.reshape(Tensor([6169, 10, 69632],"float16"), shape=tuple(-1,256,272,), )

[Pass] paddle.reshape(Tensor([6169, 10, 69632],"float16"), shape=tuple(-1,256,272,), )
2025-03-17 11:07:41.077262 test begin: paddle.reshape(Tensor([6169, 8, 87040],"float16"), shape=tuple(-1,320,272,), )

[Pass] paddle.reshape(Tensor([6169, 8, 87040],"float16"), shape=tuple(-1,320,272,), )
2025-03-17 11:24:14.778411 test begin: paddle.reshape(Tensor([6175, 11, 63232],"float16"), shape=tuple(-1,208,304,), )

[Pass] paddle.reshape(Tensor([6175, 11, 63232],"float16"), shape=tuple(-1,208,304,), )
2025-03-17 11:40:52.011479 test begin: paddle.reshape(Tensor([61896, 144, 256],"float32"), shape=tuple(-1,256,), )

[Pass] paddle.reshape(Tensor([61896, 144, 256],"float32"), shape=tuple(-1,256,), )
2025-03-17 11:43:57.868120 test begin: paddle.reshape(Tensor([61896, 256, 12, 12],"float32"), shape=tuple(1,256,-1,), )

[Pass] paddle.reshape(Tensor([61896, 256, 12, 12],"float32"), shape=tuple(1,256,-1,), )
2025-03-17 11:47:00.116702 test begin: paddle.reshape(Tensor([61896, 256, 12, 12],"float32"), shape=tuple(4,256,-1,), )

[Pass] paddle.reshape(Tensor([61896, 256, 12, 12],"float32"), shape=tuple(4,256,-1,), )
2025-03-17 11:50:06.061775 test begin: paddle.reshape(Tensor([61896, 64, 576],"float32"), list[64,64,3,3,], )

[torch error] paddle.reshape(Tensor([61896, 64, 576],"float32"), list[64,64,3,3,], ) 
 shape '[64, 64, 3, 3]' is invalid for input of size 2281734144
2025-03-17 11:50:09.965975 test begin: paddle.reshape(Tensor([6214, 12, 57600],"float16"), shape=tuple(-1,200,288,), )

[Pass] paddle.reshape(Tensor([6214, 12, 57600],"float16"), shape=tuple(-1,200,288,), )
2025-03-17 12:06:10.887340 test begin: paddle.reshape(Tensor([622, 56, 200, 328],"float32"), shape=list[-1,200,328,], )

[Pass] paddle.reshape(Tensor([622, 56, 200, 328],"float32"), shape=list[-1,200,328,], )
2025-03-17 12:09:17.293216 test begin: paddle.reshape(Tensor([623, 44, 248, 336],"float32"), shape=list[-1,248,336,], )

[Pass] paddle.reshape(Tensor([623, 44, 248, 336],"float32"), shape=list[-1,248,336,], )
2025-03-17 12:12:01.717929 test begin: paddle.reshape(Tensor([6255, 6, 200, 304],"float32"), shape=list[-1,200,304,], )

[Pass] paddle.reshape(Tensor([6255, 6, 200, 304],"float32"), shape=list[-1,200,304,], )
2025-03-17 12:14:53.983881 test begin: paddle.reshape(Tensor([6255, 6, 304, 200],"float32"), shape=list[-1,304,200,], )

[Pass] paddle.reshape(Tensor([6255, 6, 304, 200],"float32"), shape=list[-1,304,200,], )
2025-03-17 12:18:21.756581 test begin: paddle.reshape(Tensor([6255, 6, 60800],"float32"), shape=tuple(-1,200,304,), )

[Pass] paddle.reshape(Tensor([6255, 6, 60800],"float32"), shape=tuple(-1,200,304,), )
2025-03-17 12:21:15.571853 test begin: paddle.reshape(Tensor([6255, 6, 60800],"float32"), shape=tuple(-1,304,200,), )

[Pass] paddle.reshape(Tensor([6255, 6, 60800],"float32"), shape=tuple(-1,304,200,), )
2025-03-17 12:25:13.094658 test begin: paddle.reshape(Tensor([6268411, 4, 13, 7],"float32"), list[10,4,7,13,], )

[torch error] paddle.reshape(Tensor([6268411, 4, 13, 7],"float32"), list[10,4,7,13,], ) 
 shape '[10, 4, 7, 13]' is invalid for input of size 2281701604
2025-03-17 12:25:18.201793 test begin: paddle.reshape(Tensor([6268411, 4, 13, 7],"float32"), list[11,4,7,13,], )

[torch error] paddle.reshape(Tensor([6268411, 4, 13, 7],"float32"), list[11,4,7,13,], ) 
 shape '[11, 4, 7, 13]' is invalid for input of size 2281701604
2025-03-17 12:25:19.876651 test begin: paddle.reshape(Tensor([6268411, 4, 13, 7],"float32"), list[13,4,7,13,], )

[torch error] paddle.reshape(Tensor([6268411, 4, 13, 7],"float32"), list[13,4,7,13,], ) 
 shape '[13, 4, 7, 13]' is invalid for input of size 2281701604
2025-03-17 12:25:21.756220 test begin: paddle.reshape(Tensor([6268411, 4, 13, 7],"float32"), list[14,4,7,13,], )

[torch error] paddle.reshape(Tensor([6268411, 4, 13, 7],"float32"), list[14,4,7,13,], ) 
 shape '[14, 4, 7, 13]' is invalid for input of size 2281701604
2025-03-17 12:25:24.279361 test begin: paddle.reshape(Tensor([6268411, 4, 13, 7],"float32"), list[4,4,7,13,], )

[torch error] paddle.reshape(Tensor([6268411, 4, 13, 7],"float32"), list[4,4,7,13,], ) 
 shape '[4, 4, 7, 13]' is invalid for input of size 2281701604
2025-03-17 12:25:25.907555 test begin: paddle.reshape(Tensor([6268411, 4, 13, 7],"float32"), list[56,4,7,13,], )

[torch error] paddle.reshape(Tensor([6268411, 4, 13, 7],"float32"), list[56,4,7,13,], ) 
 shape '[56, 4, 7, 13]' is invalid for input of size 2281701604
2025-03-17 12:25:27.299927 test begin: paddle.reshape(Tensor([6268411, 4, 13, 7],"float32"), list[7,4,7,13,], )

[torch error] paddle.reshape(Tensor([6268411, 4, 13, 7],"float32"), list[7,4,7,13,], ) 
 shape '[7, 4, 7, 13]' is invalid for input of size 2281701604
2025-03-17 12:25:29.177461 test begin: paddle.reshape(Tensor([6308, 8, 85120],"float16"), shape=tuple(-1,280,304,), )

[Pass] paddle.reshape(Tensor([6308, 8, 85120],"float16"), shape=tuple(-1,280,304,), )
2025-03-17 12:42:14.539477 test begin: paddle.reshape(Tensor([6320, 7, 97088],"float16"), shape=tuple(-1,296,328,), )

[Pass] paddle.reshape(Tensor([6320, 7, 97088],"float16"), shape=tuple(-1,296,328,), )
2025-03-17 12:58:30.441758 test begin: paddle.reshape(Tensor([63381, 100, 120, 3],"float32"), shape=tuple(4,-1,1,), )

[Pass] paddle.reshape(Tensor([63381, 100, 120, 3],"float32"), shape=tuple(4,-1,1,), )
2025-03-17 13:01:39.227664 test begin: paddle.reshape(Tensor([6374, 10, 67392],"float16"), shape=tuple(-1,216,312,), )

[Pass] paddle.reshape(Tensor([6374, 10, 67392],"float16"), shape=tuple(-1,216,312,), )
2025-03-17 13:18:05.954527 test begin: paddle.reshape(Tensor([638, 41, 280, 312],"float32"), shape=list[-1,280,312,], )

[Pass] paddle.reshape(Tensor([638, 41, 280, 312],"float32"), shape=list[-1,280,312,], )
2025-03-17 13:21:30.525645 test begin: paddle.reshape(Tensor([63914, 1, 67200],"float16"), shape=tuple(-1,200,336,), )

[Pass] paddle.reshape(Tensor([63914, 1, 67200],"float16"), shape=tuple(-1,200,336,), )
2025-03-17 13:39:28.476505 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(100,-1,), )

[Pass] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(100,-1,), )
2025-03-17 13:56:39.079049 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(104,-1,), )

[torch error] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(104,-1,), ) 
 shape '[104, -1]' is invalid for input of size 4295020800
2025-03-17 13:56:43.287887 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(132,-1,), )

[torch error] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(132,-1,), ) 
 shape '[132, -1]' is invalid for input of size 4295020800
2025-03-17 13:56:44.810754 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(148,-1,), )

[torch error] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(148,-1,), ) 
 shape '[148, -1]' is invalid for input of size 4295020800
2025-03-17 13:56:45.867559 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(164,-1,), )

[torch error] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(164,-1,), ) 
 shape '[164, -1]' is invalid for input of size 4295020800
2025-03-17 13:56:46.951701 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(172,-1,), )

[torch error] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(172,-1,), ) 
 shape '[172, -1]' is invalid for input of size 4295020800
2025-03-17 13:56:48.001147 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(188,-1,), )

[torch error] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(188,-1,), ) 
 shape '[188, -1]' is invalid for input of size 4295020800
2025-03-17 13:56:49.061721 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(192,-1,), )

[Pass] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(192,-1,), )
2025-03-17 14:13:01.054855 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(196,-1,), )

[torch error] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(196,-1,), ) 
 shape '[196, -1]' is invalid for input of size 4295020800
2025-03-17 14:13:04.806184 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(20,-1,), )

[Pass] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(20,-1,), )
2025-03-17 14:32:32.689397 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(204,-1,), )

[torch error] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(204,-1,), ) 
 shape '[204, -1]' is invalid for input of size 4295020800
2025-03-17 14:32:37.475346 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(208,-1,), )

[torch error] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(208,-1,), ) 
 shape '[208, -1]' is invalid for input of size 4295020800
2025-03-17 14:32:38.801476 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(220,-1,), )

[torch error] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(220,-1,), ) 
 shape '[220, -1]' is invalid for input of size 4295020800
2025-03-17 14:32:40.227961 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(228,-1,), )

[torch error] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(228,-1,), ) 
 shape '[228, -1]' is invalid for input of size 4295020800
2025-03-17 14:32:42.070057 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(232,-1,), )

[torch error] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(232,-1,), ) 
 shape '[232, -1]' is invalid for input of size 4295020800
2025-03-17 14:32:43.561625 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(304,-1,), )

[torch error] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(304,-1,), ) 
 shape '[304, -1]' is invalid for input of size 4295020800
2025-03-17 14:32:44.893617 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(360,-1,), )

[torch error] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(360,-1,), ) 
 shape '[360, -1]' is invalid for input of size 4295020800
2025-03-17 14:32:46.319533 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(4,-1,), )

[Pass] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(4,-1,), )
2025-03-17 14:50:10.734062 test begin: paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([63914, 200, 336],"float16"), shape=tuple(8,-1,), )
2025-03-17 15:07:04.709777 test begin: paddle.reshape(Tensor([6392, 10, 67200],"float16"), shape=tuple(-1,200,336,), )

[Pass] paddle.reshape(Tensor([6392, 10, 67200],"float16"), shape=tuple(-1,200,336,), )
2025-03-17 15:23:50.926625 test begin: paddle.reshape(Tensor([6392, 10, 67200],"float16"), shape=tuple(-1,336,200,), )

[Pass] paddle.reshape(Tensor([6392, 10, 67200],"float16"), shape=tuple(-1,336,200,), )
2025-03-17 15:40:27.383565 test begin: paddle.reshape(Tensor([64, 1, 35651585],"float32"), tuple(64,-1,), )

[Pass] paddle.reshape(Tensor([64, 1, 35651585],"float32"), tuple(64,-1,), )
2025-03-17 15:43:28.892859 test begin: paddle.reshape(Tensor([64, 11883862, 3],"float32"), tuple(64,-1,), )

[Pass] paddle.reshape(Tensor([64, 11883862, 3],"float32"), tuple(64,-1,), )
2025-03-17 15:46:31.613466 test begin: paddle.reshape(Tensor([64, 123791, 288],"float32"), shape=tuple(64,-1,), )

[Pass] paddle.reshape(Tensor([64, 123791, 288],"float32"), shape=tuple(64,-1,), )
2025-03-17 15:49:35.080366 test begin: paddle.reshape(Tensor([64, 128, 524289],"float16"), list[-1,768,], )

[Pass] paddle.reshape(Tensor([64, 128, 524289],"float16"), list[-1,768,], )
2025-03-17 16:05:48.536631 test begin: paddle.reshape(Tensor([64, 1280, 1, 27853],"float32"), list[-1,8,1280,], )

[Pass] paddle.reshape(Tensor([64, 1280, 1, 27853],"float32"), list[-1,8,1280,], )
2025-03-17 16:08:48.363901 test begin: paddle.reshape(Tensor([64, 1280, 27853, 1],"float32"), list[-1,8,1280,], )

[Pass] paddle.reshape(Tensor([64, 1280, 27853, 1],"float32"), list[-1,8,1280,], )
2025-03-17 16:11:50.488883 test begin: paddle.reshape(Tensor([64, 131073, 272],"float32"), shape=tuple(64,-1,), )

[Pass] paddle.reshape(Tensor([64, 131073, 272],"float32"), shape=tuple(64,-1,), )
2025-03-17 16:14:34.047638 test begin: paddle.reshape(Tensor([64, 14, 14, 181896],"float32"), list[64,14,14,384,], )

[torch error] paddle.reshape(Tensor([64, 14, 14, 181896],"float32"), list[64,14,14,384,], ) 
 shape '[64, 14, 14, 384]' is invalid for input of size 2281703424
2025-03-17 16:14:37.939873 test begin: paddle.reshape(Tensor([64, 14, 14, 181896],"float32"), list[64,14,14,512,], )

[torch error] paddle.reshape(Tensor([64, 14, 14, 181896],"float32"), list[64,14,14,512,], ) 
 shape '[64, 14, 14, 512]' is invalid for input of size 2281703424
2025-03-17 16:14:39.289899 test begin: paddle.reshape(Tensor([64, 14, 4974, 512],"float32"), list[64,14,14,512,], )

[torch error] paddle.reshape(Tensor([64, 14, 4974, 512],"float32"), list[64,14,14,512,], ) 
 shape '[64, 14, 14, 512]' is invalid for input of size 2281832448
2025-03-17 16:14:41.174902 test begin: paddle.reshape(Tensor([64, 14, 6632, 384],"float32"), list[64,14,14,384,], )

[torch error] paddle.reshape(Tensor([64, 14, 6632, 384],"float32"), list[64,14,14,384,], ) 
 shape '[64, 14, 14, 384]' is invalid for input of size 2281832448
2025-03-17 16:14:42.746080 test begin: paddle.reshape(Tensor([64, 200, 178258],"float32"), shape=tuple(64,-1,), )

[Pass] paddle.reshape(Tensor([64, 200, 178258],"float32"), shape=tuple(64,-1,), )
2025-03-17 16:17:59.749773 test begin: paddle.reshape(Tensor([64, 200, 335545],"float16"), shape=tuple(64,-1,), )

[Pass] paddle.reshape(Tensor([64, 200, 335545],"float16"), shape=tuple(64,-1,), )
2025-03-17 16:34:05.868223 test begin: paddle.reshape(Tensor([64, 2048, 1, 17409],"float32"), list[-1,8,2048,], )

[Pass] paddle.reshape(Tensor([64, 2048, 1, 17409],"float32"), list[-1,8,2048,], )
2025-03-17 16:37:09.253618 test begin: paddle.reshape(Tensor([64, 2048, 1, 17409],"float32"), shape=list[-1,2048,], )

[Pass] paddle.reshape(Tensor([64, 2048, 1, 17409],"float32"), shape=list[-1,2048,], )
2025-03-17 16:40:10.946978 test begin: paddle.reshape(Tensor([64, 2048, 1, 32769],"float16"), shape=list[-1,2048,], )

[Pass] paddle.reshape(Tensor([64, 2048, 1, 32769],"float16"), shape=list[-1,2048,], )
2025-03-17 16:56:18.652905 test begin: paddle.reshape(Tensor([64, 2048, 17409, 1],"float32"), list[-1,8,2048,], )

[Pass] paddle.reshape(Tensor([64, 2048, 17409, 1],"float32"), list[-1,8,2048,], )
2025-03-17 16:59:24.733163 test begin: paddle.reshape(Tensor([64, 2048, 17409, 1],"float32"), shape=list[-1,2048,], )

[Pass] paddle.reshape(Tensor([64, 2048, 17409, 1],"float32"), shape=list[-1,2048,], )
2025-03-17 17:02:26.195000 test begin: paddle.reshape(Tensor([64, 2048, 32769, 1],"float16"), shape=list[-1,2048,], )

[Pass] paddle.reshape(Tensor([64, 2048, 32769, 1],"float16"), shape=list[-1,2048,], )
2025-03-17 17:18:30.414519 test begin: paddle.reshape(Tensor([64, 220753, 304],"float16"), shape=tuple(64,-1,), )

[paddle error] paddle.reshape(Tensor([64, 220753, 304],"float16"), shape=tuple(64,-1,), ) 
 

--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   egr::Grad(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, bool, bool, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&)
1   egr::RunBackward(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&)
2   egr::GradTensorHolder::CopyValueFromTensor(unsigned long, unsigned long, paddle::Tensor const&, bool)
3   paddle::Tensor::copy_(paddle::Tensor const&, phi::Place const&, bool)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   phi::DeviceContext::Alloc(phi::TensorBase*, phi::DataType, unsigned long, bool, bool) const
6   phi::DeviceContext::Impl::Alloc(phi::TensorBase*, phi::Place const&, phi::DataType, unsigned long, bool, bool) const
7   phi::DenseTensor::AllocateFrom(phi::Allocator*, phi::DataType, unsigned long, bool)
8   paddle::memory::allocation::Allocator::Allocate(unsigned long)
9   paddle::memory::allocation::CUDAAllocator::AllocateImpl(unsigned long)
10  std::string phi::enforce::GetCompleteTraceBackString<std::string >(std::string&&, char const*, int)
11  common::enforce::GetCurrentTraceBackString[abi:cxx11](bool)

----------------------
Error Message Summary:
----------------------
ResourceExhaustedError: 

Out of memory error on GPU 0. Cannot allocate 8.000006GB memory on GPU 0, 73.293884GB memory has been allocated and available memory is only 5.890991GB.

Please check whether there is any other process using GPU 0.
1. If yes, please stop them, or start PaddlePaddle on another GPU.
2. If no, please decrease the batch size of your model. 
 (at ../paddle/phi/core/memory/allocation/cuda_allocator.cc:84)

2025-03-17 17:27:03.549109 test begin: paddle.reshape(Tensor([64, 2228225, 4, 4],"float32"), shape=list[-1,800,], )

[paddle error] paddle.reshape(Tensor([64, 2228225, 4, 4],"float32"), shape=list[-1,800,], ) 
 

--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   egr::Grad(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, bool, bool, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&)
1   egr::RunBackward(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&)
2   egr::GradTensorHolder::CopyValueFromTensor(unsigned long, unsigned long, paddle::Tensor const&, bool)
3   paddle::Tensor::copy_(paddle::Tensor const&, phi::Place const&, bool)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   phi::DeviceContext::Alloc(phi::TensorBase*, phi::DataType, unsigned long, bool, bool) const
6   phi::DeviceContext::Impl::Alloc(phi::TensorBase*, phi::Place const&, phi::DataType, unsigned long, bool, bool) const
7   phi::DenseTensor::AllocateFrom(phi::Allocator*, phi::DataType, unsigned long, bool)
8   paddle::memory::allocation::Allocator::Allocate(unsigned long)
9   paddle::memory::allocation::CUDAAllocator::AllocateImpl(unsigned long)
10  std::string phi::enforce::GetCompleteTraceBackString<std::string >(std::string&&, char const*, int)
11  common::enforce::GetCurrentTraceBackString[abi:cxx11](bool)

----------------------
Error Message Summary:
----------------------
ResourceExhaustedError: 

Out of memory error on GPU 0. Cannot allocate 8.500004GB memory on GPU 0, 74.293884GB memory has been allocated and available memory is only 4.890991GB.

Please check whether there is any other process using GPU 0.
1. If yes, please stop them, or start PaddlePaddle on another GPU.
2. If no, please decrease the batch size of your model. 
 (at ../paddle/phi/core/memory/allocation/cuda_allocator.cc:84)

2025-03-17 17:28:57.132304 test begin: paddle.reshape(Tensor([64, 233017, 288],"float16"), shape=tuple(64,-1,), )

[Pass] paddle.reshape(Tensor([64, 233017, 288],"float16"), shape=tuple(64,-1,), )
2025-03-17 17:46:18.031166 test begin: paddle.reshape(Tensor([64, 24, 1485483],"float32"), list[-1,6626,], )

[torch error] paddle.reshape(Tensor([64, 24, 1485483],"float32"), list[-1,6626,], ) 
 shape '[-1, 6626]' is invalid for input of size 2281701888
2025-03-17 17:46:22.770246 test begin: paddle.reshape(Tensor([64, 24, 24, 61896],"float32"), list[64,24,24,512,], )

[torch error] paddle.reshape(Tensor([64, 24, 24, 61896],"float32"), list[64,24,24,512,], ) 
 shape '[64, 24, 24, 512]' is invalid for input of size 2281734144
2025-03-17 17:46:26.820410 test begin: paddle.reshape(Tensor([64, 24, 2902, 512],"float32"), list[64,24,24,512,], )

[torch error] paddle.reshape(Tensor([64, 24, 2902, 512],"float32"), list[64,24,24,512,], ) 
 shape '[64, 24, 24, 512]' is invalid for input of size 2282225664
2025-03-17 17:46:28.342666 test begin: paddle.reshape(Tensor([64, 246724, 272],"float16"), shape=tuple(64,-1,), )

[Pass] paddle.reshape(Tensor([64, 246724, 272],"float16"), shape=tuple(64,-1,), )
2025-03-17 18:04:01.238700 test begin: paddle.reshape(Tensor([64, 262145, 16, 16],"float16"), list[64,96,-1,], )

[torch error] paddle.reshape(Tensor([64, 262145, 16, 16],"float16"), list[64,96,-1,], ) 
 shape '[64, 96, -1]' is invalid for input of size 4294983680
2025-03-17 18:04:05.334598 test begin: paddle.reshape(Tensor([64, 28, 28, 45474],"float32"), list[64,28,28,192,], )

[torch error] paddle.reshape(Tensor([64, 28, 28, 45474],"float32"), list[64,28,28,192,], ) 
 shape '[64, 28, 28, 192]' is invalid for input of size 2281703424
2025-03-17 18:04:10.550627 test begin: paddle.reshape(Tensor([64, 28, 28, 45474],"float32"), list[64,28,28,256,], )

[torch error] paddle.reshape(Tensor([64, 28, 28, 45474],"float32"), list[64,28,28,256,], ) 
 shape '[64, 28, 28, 256]' is invalid for input of size 2281703424
2025-03-17 18:04:12.853532 test begin: paddle.reshape(Tensor([64, 28, 4974, 256],"float32"), list[64,28,28,256,], )

[torch error] paddle.reshape(Tensor([64, 28, 4974, 256],"float32"), list[64,28,28,256,], ) 
 shape '[64, 28, 28, 256]' is invalid for input of size 2281832448
2025-03-17 18:04:14.917852 test begin: paddle.reshape(Tensor([64, 28, 6632, 192],"float32"), list[64,28,28,192,], )

[torch error] paddle.reshape(Tensor([64, 28, 6632, 192],"float32"), list[64,28,28,192,], ) 
 shape '[64, 28, 28, 192]' is invalid for input of size 2281832448
2025-03-17 18:04:16.882398 test begin: paddle.reshape(Tensor([64, 2902, 24, 512],"float32"), list[64,24,24,512,], )

[torch error] paddle.reshape(Tensor([64, 2902, 24, 512],"float32"), list[64,24,24,512,], ) 
 shape '[64, 24, 24, 512]' is invalid for input of size 2282225664
2025-03-17 18:04:18.908379 test begin: paddle.reshape(Tensor([64, 2902, 48, 256],"float32"), list[64,48,48,256,], )

[torch error] paddle.reshape(Tensor([64, 2902, 48, 256],"float32"), list[64,48,48,256,], ) 
 shape '[64, 48, 48, 256]' is invalid for input of size 2282225664
2025-03-17 18:04:20.930970 test begin: paddle.reshape(Tensor([64, 2902, 96, 128],"float32"), list[64,96,96,128,], )

[torch error] paddle.reshape(Tensor([64, 2902, 96, 128],"float32"), list[64,96,96,128,], ) 
 shape '[64, 96, 96, 128]' is invalid for input of size 2282225664
2025-03-17 18:04:22.948406 test begin: paddle.reshape(Tensor([64, 35651585, 1, 1],"float32"), list[-1,8,1280,], )

[torch error] paddle.reshape(Tensor([64, 35651585, 1, 1],"float32"), list[-1,8,1280,], ) 
 shape '[-1, 8, 1280]' is invalid for input of size 2281701440
2025-03-17 18:04:24.958687 test begin: paddle.reshape(Tensor([64, 35651585, 1, 1],"float32"), list[-1,8,2048,], )

[torch error] paddle.reshape(Tensor([64, 35651585, 1, 1],"float32"), list[-1,8,2048,], ) 
 shape '[-1, 8, 2048]' is invalid for input of size 2281701440
2025-03-17 18:04:26.928482 test begin: paddle.reshape(Tensor([64, 35651585, 1, 1],"float32"), shape=list[-1,2048,], )

[torch error] paddle.reshape(Tensor([64, 35651585, 1, 1],"float32"), shape=list[-1,2048,], ) 
 shape '[-1, 2048]' is invalid for input of size 2281701440
2025-03-17 18:04:28.944058 test begin: paddle.reshape(Tensor([64, 35651585, 1],"float32"), tuple(64,-1,), )

[Pass] paddle.reshape(Tensor([64, 35651585, 1],"float32"), tuple(64,-1,), )
2025-03-17 18:07:52.010728 test begin: paddle.reshape(Tensor([64, 35651585],"float32"), list[16,-1,], )

[Pass] paddle.reshape(Tensor([64, 35651585],"float32"), list[16,-1,], )
2025-03-17 18:11:00.743254 test begin: paddle.reshape(Tensor([64, 35651585],"float32"), list[64,1,1,], )

[torch error] paddle.reshape(Tensor([64, 35651585],"float32"), list[64,1,1,], ) 
 shape '[64, 1, 1]' is invalid for input of size 2281701440
2025-03-17 18:11:04.671394 test begin: paddle.reshape(Tensor([64, 35651585],"float32"), list[64,1,3,], )

[torch error] paddle.reshape(Tensor([64, 35651585],"float32"), list[64,1,3,], ) 
 shape '[64, 1, 3]' is invalid for input of size 2281701440
2025-03-17 18:11:06.256134 test begin: paddle.reshape(Tensor([64, 35651585],"float32"), list[64,64,1,], )

[torch error] paddle.reshape(Tensor([64, 35651585],"float32"), list[64,64,1,], ) 
 shape '[64, 64, 1]' is invalid for input of size 2281701440
2025-03-17 18:11:08.232598 test begin: paddle.reshape(Tensor([64, 35651585],"float32"), list[64,64,3,], )

[torch error] paddle.reshape(Tensor([64, 35651585],"float32"), list[64,64,3,], ) 
 shape '[64, 64, 3]' is invalid for input of size 2281701440
2025-03-17 18:11:09.936343 test begin: paddle.reshape(Tensor([64, 35651585],"float32"), shape=list[-1,1000,], )

[torch error] paddle.reshape(Tensor([64, 35651585],"float32"), shape=list[-1,1000,], ) 
 shape '[-1, 1000]' is invalid for input of size 2281701440
2025-03-17 18:11:11.431481 test begin: paddle.reshape(Tensor([64, 35651585],"int64"), tuple(-1,1,), )

[Pass] paddle.reshape(Tensor([64, 35651585],"int64"), tuple(-1,1,), )
2025-03-17 18:14:30.305400 test begin: paddle.reshape(Tensor([64, 4194305, 4, 4],"float16"), shape=list[-1,800,], )

[torch error] paddle.reshape(Tensor([64, 4194305, 4, 4],"float16"), shape=list[-1,800,], ) 
 shape '[-1, 800]' is invalid for input of size 4294968320
2025-03-17 18:14:35.088446 test begin: paddle.reshape(Tensor([64, 48, 2902, 256],"float32"), list[64,48,48,256,], )

[torch error] paddle.reshape(Tensor([64, 48, 2902, 256],"float32"), list[64,48,48,256,], ) 
 shape '[64, 48, 48, 256]' is invalid for input of size 2282225664
2025-03-17 18:14:40.377142 test begin: paddle.reshape(Tensor([64, 48, 48, 15474],"float32"), list[64,48,48,256,], )

[torch error] paddle.reshape(Tensor([64, 48, 48, 15474],"float32"), list[64,48,48,256,], ) 
 shape '[64, 48, 48, 256]' is invalid for input of size 2281734144
2025-03-17 18:14:44.279528 test begin: paddle.reshape(Tensor([64, 4974, 14, 512],"float32"), list[64,14,14,512,], )

[torch error] paddle.reshape(Tensor([64, 4974, 14, 512],"float32"), list[64,14,14,512,], ) 
 shape '[64, 14, 14, 512]' is invalid for input of size 2281832448
2025-03-17 18:14:46.383670 test begin: paddle.reshape(Tensor([64, 4974, 28, 256],"float32"), list[64,28,28,256,], )

[torch error] paddle.reshape(Tensor([64, 4974, 28, 256],"float32"), list[64,28,28,256,], ) 
 shape '[64, 28, 28, 256]' is invalid for input of size 2281832448
2025-03-17 18:14:48.364327 test begin: paddle.reshape(Tensor([64, 4974, 56, 128],"float32"), list[64,56,56,128,], )

[torch error] paddle.reshape(Tensor([64, 4974, 56, 128],"float32"), list[64,56,56,128,], ) 
 shape '[64, 56, 56, 128]' is invalid for input of size 2281832448
2025-03-17 18:14:50.371885 test begin: paddle.reshape(Tensor([64, 50, 178258, 4],"float32"), shape=list[-1,800,], )

[Pass] paddle.reshape(Tensor([64, 50, 178258, 4],"float32"), shape=list[-1,800,], )
2025-03-17 18:17:44.951192 test begin: paddle.reshape(Tensor([64, 50, 335545, 4],"float16"), shape=list[-1,800,], )

[Pass] paddle.reshape(Tensor([64, 50, 335545, 4],"float16"), shape=list[-1,800,], )
2025-03-17 18:34:42.681718 test begin: paddle.reshape(Tensor([64, 50, 4, 178258],"float32"), shape=list[-1,800,], )

[Pass] paddle.reshape(Tensor([64, 50, 4, 178258],"float32"), shape=list[-1,800,], )
2025-03-17 18:38:19.798651 test begin: paddle.reshape(Tensor([64, 50, 4, 335545],"float16"), shape=list[-1,800,], )

[Pass] paddle.reshape(Tensor([64, 50, 4, 335545],"float16"), shape=list[-1,800,], )
2025-03-17 18:55:19.334050 test begin: paddle.reshape(Tensor([64, 5381, 6626],"float32"), list[-1,6626,], )

[Pass] paddle.reshape(Tensor([64, 5381, 6626],"float32"), list[-1,6626,], )
2025-03-17 18:58:45.033747 test begin: paddle.reshape(Tensor([64, 56, 4974, 128],"float32"), list[64,56,56,128,], )

[torch error] paddle.reshape(Tensor([64, 56, 4974, 128],"float32"), list[64,56,56,128,], ) 
 shape '[64, 56, 56, 128]' is invalid for input of size 2281832448
2025-03-17 18:58:48.827874 test begin: paddle.reshape(Tensor([64, 56, 56, 11369],"float32"), list[64,56,56,128,], )

[torch error] paddle.reshape(Tensor([64, 56, 56, 11369],"float32"), list[64,56,56,128,], ) 
 shape '[64, 56, 56, 128]' is invalid for input of size 2281803776
2025-03-17 18:58:49.818911 test begin: paddle.reshape(Tensor([64, 56, 56, 11369],"float32"), list[64,56,56,96,], )

[torch error] paddle.reshape(Tensor([64, 56, 56, 11369],"float32"), list[64,56,56,96,], ) 
 shape '[64, 56, 56, 96]' is invalid for input of size 2281803776
2025-03-17 18:58:50.828135 test begin: paddle.reshape(Tensor([64, 56, 6632, 96],"float32"), list[64,56,56,96,], )

[torch error] paddle.reshape(Tensor([64, 56, 6632, 96],"float32"), list[64,56,56,96,], ) 
 shape '[64, 56, 56, 96]' is invalid for input of size 2281832448
2025-03-17 18:58:52.192381 test begin: paddle.reshape(Tensor([64, 64, 557057],"float32"), tuple(64,-1,), )

[Pass] paddle.reshape(Tensor([64, 64, 557057],"float32"), tuple(64,-1,), )
2025-03-17 19:02:18.819561 test begin: paddle.reshape(Tensor([64, 6632, 14, 384],"float32"), list[64,14,14,384,], )

[torch error] paddle.reshape(Tensor([64, 6632, 14, 384],"float32"), list[64,14,14,384,], ) 
 shape '[64, 14, 14, 384]' is invalid for input of size 2281832448
2025-03-17 19:02:23.603076 test begin: paddle.reshape(Tensor([64, 6632, 28, 192],"float32"), list[64,28,28,192,], )

[torch error] paddle.reshape(Tensor([64, 6632, 28, 192],"float32"), list[64,28,28,192,], ) 
 shape '[64, 28, 28, 192]' is invalid for input of size 2281832448
2025-03-17 19:02:25.262759 test begin: paddle.reshape(Tensor([64, 6632, 56, 96],"float32"), list[64,56,56,96,], )

[torch error] paddle.reshape(Tensor([64, 6632, 56, 96],"float32"), list[64,56,56,96,], ) 
 shape '[64, 56, 56, 96]' is invalid for input of size 2281832448
2025-03-17 19:02:27.145804 test begin: paddle.reshape(Tensor([64, 67108865, 1, 1],"float16"), shape=list[-1,2048,], )

[torch error] paddle.reshape(Tensor([64, 67108865, 1, 1],"float16"), shape=list[-1,2048,], ) 
 shape '[-1, 2048]' is invalid for input of size 4294967360
2025-03-17 19:02:30.759810 test begin: paddle.reshape(Tensor([64, 67108865],"float16"), shape=list[-1,1000,], )

[torch error] paddle.reshape(Tensor([64, 67108865],"float16"), shape=list[-1,1000,], ) 
 shape '[-1, 1000]' is invalid for input of size 4294967360
2025-03-17 19:02:32.111994 test begin: paddle.reshape(Tensor([64, 67108865],"float16"), tuple(1,1,64,64,), )

[torch error] paddle.reshape(Tensor([64, 67108865],"float16"), tuple(1,1,64,64,), ) 
 shape '[1, 1, 64, 64]' is invalid for input of size 4294967360
2025-03-17 19:02:33.614353 test begin: paddle.reshape(Tensor([64, 87382, 768],"float16"), list[-1,768,], )

[Pass] paddle.reshape(Tensor([64, 87382, 768],"float16"), list[-1,768,], )
2025-03-17 19:19:51.745331 test begin: paddle.reshape(Tensor([64, 96, 16, 43691],"float16"), list[64,96,-1,], )

[paddle error] paddle.reshape(Tensor([64, 96, 16, 43691],"float16"), list[64,96,-1,], ) 
 

--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   egr::Grad(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, bool, bool, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&)
1   egr::RunBackward(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&)
2   egr::GradTensorHolder::CopyValueFromTensor(unsigned long, unsigned long, paddle::Tensor const&, bool)
3   paddle::Tensor::copy_(paddle::Tensor const&, phi::Place const&, bool)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   phi::DeviceContext::Alloc(phi::TensorBase*, phi::DataType, unsigned long, bool, bool) const
6   phi::DeviceContext::Impl::Alloc(phi::TensorBase*, phi::Place const&, phi::DataType, unsigned long, bool, bool) const
7   phi::DenseTensor::AllocateFrom(phi::Allocator*, phi::DataType, unsigned long, bool)
8   paddle::memory::allocation::Allocator::Allocate(unsigned long)
9   paddle::memory::allocation::CUDAAllocator::AllocateImpl(unsigned long)
10  std::string phi::enforce::GetCompleteTraceBackString<std::string >(std::string&&, char const*, int)
11  common::enforce::GetCurrentTraceBackString[abi:cxx11](bool)

----------------------
Error Message Summary:
----------------------
ResourceExhaustedError: 

Out of memory error on GPU 0. Cannot allocate 8.000061GB memory on GPU 0, 73.254822GB memory has been allocated and available memory is only 5.930054GB.

Please check whether there is any other process using GPU 0.
1. If yes, please stop them, or start PaddlePaddle on another GPU.
2. If no, please decrease the batch size of your model. 
 (at ../paddle/phi/core/memory/allocation/cuda_allocator.cc:84)

2025-03-17 19:29:14.033532 test begin: paddle.reshape(Tensor([64, 96, 2902, 128],"float32"), list[64,96,96,128,], )

[torch error] paddle.reshape(Tensor([64, 96, 2902, 128],"float32"), list[64,96,96,128,], ) 
 shape '[64, 96, 96, 128]' is invalid for input of size 2282225664
2025-03-17 19:29:18.451088 test begin: paddle.reshape(Tensor([64, 96, 43691, 16],"float16"), list[64,96,-1,], )

[Pass] paddle.reshape(Tensor([64, 96, 43691, 16],"float16"), list[64,96,-1,], )
2025-03-17 19:45:21.873682 test begin: paddle.reshape(Tensor([64, 96, 96, 3869],"float32"), list[64,96,96,128,], )

[torch error] paddle.reshape(Tensor([64, 96, 96, 3869],"float32"), list[64,96,96,128,], ) 
 shape '[64, 96, 96, 128]' is invalid for input of size 2282029056
2025-03-17 19:45:26.251591 test begin: paddle.reshape(Tensor([6422, 11, 60800],"float16"), shape=tuple(-1,200,304,), )

[Pass] paddle.reshape(Tensor([6422, 11, 60800],"float16"), shape=tuple(-1,200,304,), )
2025-03-17 20:02:27.268608 test begin: paddle.reshape(Tensor([6422, 11, 60800],"float16"), shape=tuple(-1,304,200,), )

[Pass] paddle.reshape(Tensor([6422, 11, 60800],"float16"), shape=tuple(-1,304,200,), )
2025-03-17 20:18:31.348457 test begin: paddle.reshape(Tensor([6482107, 11, 32],"float32"), shape=list[14,-1,4,8,], )

[torch error] paddle.reshape(Tensor([6482107, 11, 32],"float32"), shape=list[14,-1,4,8,], ) 
 shape '[14, -1, 4, 8]' is invalid for input of size 2281701664
2025-03-17 20:18:35.632556 test begin: paddle.reshape(Tensor([6482107, 11, 32],"float32"), shape=list[7,11,4,8,], )

[torch error] paddle.reshape(Tensor([6482107, 11, 32],"float32"), shape=list[7,11,4,8,], ) 
 shape '[7, 11, 4, 8]' is invalid for input of size 2281701664
2025-03-17 20:18:37.136297 test begin: paddle.reshape(Tensor([65, 66076420],"float16"), tuple(1,1,65,64,), )

[torch error] paddle.reshape(Tensor([65, 66076420],"float16"), tuple(1,1,65,64,), ) 
 shape '[1, 1, 65, 64]' is invalid for input of size 4294967300
2025-03-17 20:18:40.975367 test begin: paddle.reshape(Tensor([6516, 4, 288, 304],"float32"), shape=list[-1,288,304,], )

[Pass] paddle.reshape(Tensor([6516, 4, 288, 304],"float32"), shape=list[-1,288,304,], )
2025-03-17 20:21:38.234084 test begin: paddle.reshape(Tensor([65409, 216, 304],"float16"), shape=tuple(164,-1,), )

[torch error] paddle.reshape(Tensor([65409, 216, 304],"float16"), shape=tuple(164,-1,), ) 
 shape '[164, -1]' is invalid for input of size 4295016576
2025-03-17 20:21:42.421052 test begin: paddle.reshape(Tensor([65473, 200, 328],"float16"), shape=tuple(184,-1,), )

[torch error] paddle.reshape(Tensor([65473, 200, 328],"float16"), shape=tuple(184,-1,), ) 
 shape '[184, -1]' is invalid for input of size 4295028800
2025-03-17 20:21:44.236219 test begin: paddle.reshape(Tensor([65537, 256, 16, 16],"float16"), shape=tuple(4,256,-1,), )

[Pass] paddle.reshape(Tensor([65537, 256, 16, 16],"float16"), shape=tuple(4,256,-1,), )
2025-03-17 20:37:47.176000 test begin: paddle.reshape(Tensor([657, 53, 200, 328],"float32"), shape=list[-1,200,328,], )

[Pass] paddle.reshape(Tensor([657, 53, 200, 328],"float32"), shape=list[-1,200,328,], )
2025-03-17 20:40:44.910500 test begin: paddle.reshape(Tensor([66144, 352, 2, 7, 7],"float32"), shape=list[2,704,7,7,], )

[torch error] paddle.reshape(Tensor([66144, 352, 2, 7, 7],"float32"), shape=list[2,704,7,7,], ) 
 shape '[2, 704, 7, 7]' is invalid for input of size 2281703424
2025-03-17 20:40:49.016961 test begin: paddle.reshape(Tensor([66144, 704, 7, 7],"float32"), shape=list[2,2,352,7,7,], )

[torch error] paddle.reshape(Tensor([66144, 704, 7, 7],"float32"), shape=list[2,2,352,7,7,], ) 
 shape '[2, 2, 352, 7, 7]' is invalid for input of size 2281703424
2025-03-17 20:40:51.611328 test begin: paddle.reshape(Tensor([662, 43, 304, 264],"float32"), shape=list[-1,304,264,], )

[Pass] paddle.reshape(Tensor([662, 43, 304, 264],"float32"), shape=list[-1,304,264,], )
2025-03-17 20:44:03.778782 test begin: paddle.reshape(Tensor([66670, 124, 92, 3],"float32"), shape=tuple(2,-1,1,), )

[Pass] paddle.reshape(Tensor([66670, 124, 92, 3],"float32"), shape=tuple(2,-1,1,), )
2025-03-17 20:47:07.305598 test begin: paddle.reshape(Tensor([67108865, 1, 1, 32, 2],"float16"), list[1,1,1,64,], )

[torch error] paddle.reshape(Tensor([67108865, 1, 1, 32, 2],"float16"), list[1,1,1,64,], ) 
 shape '[1, 1, 1, 64]' is invalid for input of size 4294967360
2025-03-17 20:47:11.260598 test begin: paddle.reshape(Tensor([67108865, 64],"float16"), tuple(1,1,64,64,), )

[torch error] paddle.reshape(Tensor([67108865, 64],"float16"), tuple(1,1,64,64,), ) 
 shape '[1, 1, 64, 64]' is invalid for input of size 4294967360
2025-03-17 20:47:13.032513 test begin: paddle.reshape(Tensor([67108865, 64],"float16"), tuple(1,1,65,64,), )

[torch error] paddle.reshape(Tensor([67108865, 64],"float16"), tuple(1,1,65,64,), ) 
 shape '[1, 1, 65, 64]' is invalid for input of size 4294967360
2025-03-17 20:47:14.783350 test begin: paddle.reshape(Tensor([671089, 3200, 2],"float16"), shape=list[-1,32,100,2,], )

[Pass] paddle.reshape(Tensor([671089, 3200, 2],"float16"), shape=list[-1,32,100,2,], )
2025-03-17 21:03:29.221496 test begin: paddle.reshape(Tensor([67109, 200, 320],"float16"), shape=tuple(16,-1,), )

[Pass] paddle.reshape(Tensor([67109, 200, 320],"float16"), shape=tuple(16,-1,), )
2025-03-17 21:19:37.538783 test begin: paddle.reshape(Tensor([67109, 200, 320],"float16"), shape=tuple(180,-1,), )

[torch error] paddle.reshape(Tensor([67109, 200, 320],"float16"), shape=tuple(180,-1,), ) 
 shape '[180, -1]' is invalid for input of size 4294976000
2025-03-17 21:19:41.646483 test begin: paddle.reshape(Tensor([67109, 200, 320],"float16"), shape=tuple(20,-1,), )

[Pass] paddle.reshape(Tensor([67109, 200, 320],"float16"), shape=tuple(20,-1,), )
2025-03-17 21:36:20.025520 test begin: paddle.reshape(Tensor([67109, 200, 320],"float16"), shape=tuple(28,-1,), )

[Pass] paddle.reshape(Tensor([67109, 200, 320],"float16"), shape=tuple(28,-1,), )
2025-03-17 21:52:30.753128 test begin: paddle.reshape(Tensor([67109, 200, 320],"float16"), shape=tuple(44,-1,), )

[torch error] paddle.reshape(Tensor([67109, 200, 320],"float16"), shape=tuple(44,-1,), ) 
 shape '[44, -1]' is invalid for input of size 4294976000
2025-03-17 21:52:34.762525 test begin: paddle.reshape(Tensor([67109, 200, 320],"float16"), shape=tuple(68,-1,), )

[torch error] paddle.reshape(Tensor([67109, 200, 320],"float16"), shape=tuple(68,-1,), ) 
 shape '[68, -1]' is invalid for input of size 4294976000
2025-03-17 21:52:36.303057 test begin: paddle.reshape(Tensor([6711, 10, 64000],"float16"), shape=tuple(-1,200,320,), )

[Pass] paddle.reshape(Tensor([6711, 10, 64000],"float16"), shape=tuple(-1,200,320,), )
2025-03-17 22:08:40.828874 test begin: paddle.reshape(Tensor([6718, 10, 63936],"float16"), shape=tuple(-1,216,296,), )

[Pass] paddle.reshape(Tensor([6718, 10, 63936],"float16"), shape=tuple(-1,216,296,), )
2025-03-17 22:24:38.558015 test begin: paddle.reshape(Tensor([6722, 6, 208, 272],"float32"), shape=list[-1,208,272,], )

[Pass] paddle.reshape(Tensor([6722, 6, 208, 272],"float32"), shape=list[-1,208,272,], )
2025-03-17 22:27:30.182576 test begin: paddle.reshape(Tensor([67924, 208, 304],"float16"), shape=tuple(220,-1,), )

[torch error] paddle.reshape(Tensor([67924, 208, 304],"float16"), shape=tuple(220,-1,), ) 
 shape '[220, -1]' is invalid for input of size 4294970368
2025-03-17 22:27:33.955453 test begin: paddle.reshape(Tensor([67924, 208, 304],"float16"), shape=tuple(28,-1,), )

[torch error] paddle.reshape(Tensor([67924, 208, 304],"float16"), shape=tuple(28,-1,), ) 
 shape '[28, -1]' is invalid for input of size 4294970368
2025-03-17 22:27:35.071599 test begin: paddle.reshape(Tensor([6793, 10, 63232],"float16"), shape=tuple(-1,208,304,), )

[Pass] paddle.reshape(Tensor([6793, 10, 63232],"float16"), shape=tuple(-1,208,304,), )
2025-03-17 22:43:58.947204 test begin: paddle.reshape(Tensor([68, 110377, 304],"float32"), shape=tuple(68,-1,), )

[Pass] paddle.reshape(Tensor([68, 110377, 304],"float32"), shape=tuple(68,-1,), )
2025-03-17 22:46:54.723922 test begin: paddle.reshape(Tensor([68, 123362, 272],"float32"), shape=tuple(68,-1,), )

[Pass] paddle.reshape(Tensor([68, 123362, 272],"float32"), shape=tuple(68,-1,), )
2025-03-17 22:49:55.847696 test begin: paddle.reshape(Tensor([68, 197380, 320],"float16"), shape=tuple(68,-1,), )

[Pass] paddle.reshape(Tensor([68, 197380, 320],"float16"), shape=tuple(68,-1,), )
2025-03-17 23:06:27.005863 test begin: paddle.reshape(Tensor([68, 200, 167773],"float32"), shape=tuple(68,-1,), )

[Pass] paddle.reshape(Tensor([68, 200, 167773],"float32"), shape=tuple(68,-1,), )
2025-03-17 23:09:31.724370 test begin: paddle.reshape(Tensor([68, 200, 315807],"float16"), shape=tuple(68,-1,), )

[Pass] paddle.reshape(Tensor([68, 200, 315807],"float16"), shape=tuple(68,-1,), )
2025-03-17 23:25:30.985801 test begin: paddle.reshape(Tensor([68, 207768, 304],"float16"), shape=tuple(68,-1,), )

[Pass] paddle.reshape(Tensor([68, 207768, 304],"float16"), shape=tuple(68,-1,), )
2025-03-17 23:41:29.611298 test begin: paddle.reshape(Tensor([68, 232211, 272],"float16"), shape=tuple(68,-1,), )

[Pass] paddle.reshape(Tensor([68, 232211, 272],"float16"), shape=tuple(68,-1,), )
2025-03-17 23:57:27.786472 test begin: paddle.reshape(Tensor([6829, 6, 104832],"float16"), shape=tuple(-1,336,312,), )

[Pass] paddle.reshape(Tensor([6829, 6, 104832],"float16"), shape=tuple(-1,336,312,), )
2025-03-18 00:13:25.601295 test begin: paddle.reshape(Tensor([6878, 1296, 256],"float32"), shape=tuple(-1,256,), )

[Pass] paddle.reshape(Tensor([6878, 1296, 256],"float32"), shape=tuple(-1,256,), )
2025-03-18 00:16:27.860483 test begin: paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(100,-1,), )

[Pass] paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(100,-1,), )
2025-03-18 00:32:35.506630 test begin: paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(112,-1,), )

[torch error] paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(112,-1,), ) 
 shape '[112, -1]' is invalid for input of size 4294992000
2025-03-18 00:32:39.153136 test begin: paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(124,-1,), )

[torch error] paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(124,-1,), ) 
 shape '[124, -1]' is invalid for input of size 4294992000
2025-03-18 00:32:40.112729 test begin: paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(136,-1,), )

[torch error] paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(136,-1,), ) 
 shape '[136, -1]' is invalid for input of size 4294992000
2025-03-18 00:32:41.074094 test begin: paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(152,-1,), )

[torch error] paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(152,-1,), ) 
 shape '[152, -1]' is invalid for input of size 4294992000
2025-03-18 00:32:42.318309 test begin: paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(156,-1,), )

[Pass] paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(156,-1,), )
2025-03-18 00:48:42.061744 test begin: paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(16,-1,), )

[Pass] paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(16,-1,), )
2025-03-18 01:05:01.240088 test begin: paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(176,-1,), )

[torch error] paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(176,-1,), ) 
 shape '[176, -1]' is invalid for input of size 4294992000
2025-03-18 01:05:05.382321 test begin: paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(204,-1,), )

[torch error] paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(204,-1,), ) 
 shape '[204, -1]' is invalid for input of size 4294992000
2025-03-18 01:05:07.136321 test begin: paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(32,-1,), )

[Pass] paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(32,-1,), )
2025-03-18 01:21:40.637632 test begin: paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(52,-1,), )

[Pass] paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(52,-1,), )
2025-03-18 01:38:53.833387 test begin: paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(56,-1,), )

[torch error] paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(56,-1,), ) 
 shape '[56, -1]' is invalid for input of size 4294992000
2025-03-18 01:38:58.347824 test begin: paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(60,-1,), )

[Pass] paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(60,-1,), )
2025-03-18 01:55:09.733236 test begin: paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(76,-1,), )

[torch error] paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(76,-1,), ) 
 shape '[76, -1]' is invalid for input of size 4294992000
2025-03-18 01:55:13.685169 test begin: paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(80,-1,), )

[Pass] paddle.reshape(Tensor([68830, 200, 312],"float16"), shape=tuple(80,-1,), )
2025-03-18 02:11:54.839766 test begin: paddle.reshape(Tensor([6899, 19, 34, 512],"float32"), list[-1,512,], )

[Pass] paddle.reshape(Tensor([6899, 19, 34, 512],"float32"), list[-1,512,], )
2025-03-18 02:14:56.945276 test begin: paddle.reshape(Tensor([69633, 128, 128, 2],"float32"), shape=list[4,-1,2,], )

[Pass] paddle.reshape(Tensor([69633, 128, 128, 2],"float32"), shape=list[4,-1,2,], )
2025-03-18 02:17:51.082314 test begin: paddle.reshape(Tensor([69633, 128, 256],"float32"), list[128,256,1,1,], )

[torch error] paddle.reshape(Tensor([69633, 128, 256],"float32"), list[128,256,1,1,], ) 
 shape '[128, 256, 1, 1]' is invalid for input of size 2281734144
2025-03-18 02:17:55.229734 test begin: paddle.reshape(Tensor([699, 44, 232, 320],"float32"), shape=list[-1,232,320,], )

[Pass] paddle.reshape(Tensor([699, 44, 232, 320],"float32"), shape=list[-1,232,320,], )
2025-03-18 02:20:34.320572 test begin: paddle.reshape(Tensor([7, 10, 32595734],"float32"), shape=list[7,10,4,8,], )

[torch error] paddle.reshape(Tensor([7, 10, 32595734],"float32"), shape=list[7,10,4,8,], ) 
 shape '[7, 10, 4, 8]' is invalid for input of size 2281701380
2025-03-18 02:20:36.232385 test begin: paddle.reshape(Tensor([7, 10186167, 32],"float32"), shape=list[7,10,4,8,], )

[torch error] paddle.reshape(Tensor([7, 10186167, 32],"float32"), shape=list[7,10,4,8,], ) 
 shape '[7, 10, 4, 8]' is invalid for input of size 2281701408
2025-03-18 02:20:38.214204 test begin: paddle.reshape(Tensor([7, 10186167, 32],"float32"), shape=list[7,11,4,8,], )

[torch error] paddle.reshape(Tensor([7, 10186167, 32],"float32"), shape=list[7,11,4,8,], ) 
 shape '[7, 11, 4, 8]' is invalid for input of size 2281701408
2025-03-18 02:20:40.184988 test begin: paddle.reshape(Tensor([7, 10186167, 32],"float32"), shape=list[7,14,4,8,], )

[torch error] paddle.reshape(Tensor([7, 10186167, 32],"float32"), shape=list[7,14,4,8,], ) 
 shape '[7, 14, 4, 8]' is invalid for input of size 2281701408
2025-03-18 02:20:42.148926 test begin: paddle.reshape(Tensor([7, 10186167, 32],"float32"), shape=list[7,4,4,8,], )

[torch error] paddle.reshape(Tensor([7, 10186167, 32],"float32"), shape=list[7,4,4,8,], ) 
 shape '[7, 4, 4, 8]' is invalid for input of size 2281701408
2025-03-18 02:20:44.139235 test begin: paddle.reshape(Tensor([7, 10186167, 32],"float32"), shape=list[7,56,4,8,], )

[torch error] paddle.reshape(Tensor([7, 10186167, 32],"float32"), shape=list[7,56,4,8,], ) 
 shape '[7, 56, 4, 8]' is invalid for input of size 2281701408
2025-03-18 02:20:46.728489 test begin: paddle.reshape(Tensor([7, 10186167, 32],"float32"), shape=list[7,7,4,8,], )

[torch error] paddle.reshape(Tensor([7, 10186167, 32],"float32"), shape=list[7,7,4,8,], ) 
 shape '[7, 7, 4, 8]' is invalid for input of size 2281701408
2025-03-18 02:20:48.838151 test begin: paddle.reshape(Tensor([7, 11, 29632486],"float32"), shape=list[7,11,4,8,], )

[torch error] paddle.reshape(Tensor([7, 11, 29632486],"float32"), shape=list[7,11,4,8,], ) 
 shape '[7, 11, 4, 8]' is invalid for input of size 2281701422
2025-03-18 02:20:51.474534 test begin: paddle.reshape(Tensor([7, 14, 23282668],"float32"), shape=list[7,14,4,8,], )

[torch error] paddle.reshape(Tensor([7, 14, 23282668],"float32"), shape=list[7,14,4,8,], ) 
 shape '[7, 14, 4, 8]' is invalid for input of size 2281701464
2025-03-18 02:20:53.851892 test begin: paddle.reshape(Tensor([7, 14, 43826197],"float16"), shape=list[7,14,4,8,], )

[torch error] paddle.reshape(Tensor([7, 14, 43826197],"float16"), shape=list[7,14,4,8,], ) 
 shape '[7, 14, 4, 8]' is invalid for input of size 4294967306
2025-03-18 02:20:58.212784 test begin: paddle.reshape(Tensor([7, 165, 1975500],"float32"), list[-1,50000,], )

[torch error] paddle.reshape(Tensor([7, 165, 1975500],"float32"), list[-1,50000,], ) 
 shape '[-1, 50000]' is invalid for input of size 2281702500
2025-03-18 02:21:00.690262 test begin: paddle.reshape(Tensor([7, 186, 1752459],"float32"), list[-1,50000,], )

[torch error] paddle.reshape(Tensor([7, 186, 1752459],"float32"), list[-1,50000,], ) 
 shape '[-1, 50000]' is invalid for input of size 2281701618
2025-03-18 02:21:02.790682 test begin: paddle.reshape(Tensor([7, 19173962, 32],"float16"), shape=list[7,14,4,8,], )

[torch error] paddle.reshape(Tensor([7, 19173962, 32],"float16"), shape=list[7,14,4,8,], ) 
 shape '[7, 14, 4, 8]' is invalid for input of size 4294967488
2025-03-18 02:21:04.590372 test begin: paddle.reshape(Tensor([7, 206, 1582318],"float32"), list[-1,50000,], )

[torch error] paddle.reshape(Tensor([7, 206, 1582318],"float32"), list[-1,50000,], ) 
 shape '[-1, 50000]' is invalid for input of size 2281702556
2025-03-18 02:21:06.627466 test begin: paddle.reshape(Tensor([7, 209, 1559605],"float32"), list[-1,50000,], )

[torch error] paddle.reshape(Tensor([7, 209, 1559605],"float32"), list[-1,50000,], ) 
 shape '[-1, 50000]' is invalid for input of size 2281702115
2025-03-18 02:21:08.591920 test begin: paddle.reshape(Tensor([7, 3326096, 7, 14],"float32"), list[7,4,14,7,], )

[torch error] paddle.reshape(Tensor([7, 3326096, 7, 14],"float32"), list[7,4,14,7,], ) 
 shape '[7, 4, 14, 7]' is invalid for input of size 2281701856
2025-03-18 02:21:10.486452 test begin: paddle.reshape(Tensor([7, 3581949, 13, 7],"float32"), list[7,4,7,13,], )

[torch error] paddle.reshape(Tensor([7, 3581949, 13, 7],"float32"), list[7,4,7,13,], ) 
 shape '[7, 4, 7, 13]' is invalid for input of size 2281701513
2025-03-18 02:21:12.384505 test begin: paddle.reshape(Tensor([7, 4, 11641334, 7],"float32"), list[7,4,7,13,], )

[torch error] paddle.reshape(Tensor([7, 4, 11641334, 7],"float32"), list[7,4,7,13,], ) 
 shape '[7, 4, 7, 13]' is invalid for input of size 2281701464
2025-03-18 02:21:14.251395 test begin: paddle.reshape(Tensor([7, 4, 13, 6268411],"float32"), list[7,4,7,13,], )

[torch error] paddle.reshape(Tensor([7, 4, 13, 6268411],"float32"), list[7,4,7,13,], ) 
 shape '[7, 4, 7, 13]' is invalid for input of size 2281701604
2025-03-18 02:21:16.133977 test begin: paddle.reshape(Tensor([7, 4, 5820667, 14],"float32"), list[7,4,14,7,], )

[torch error] paddle.reshape(Tensor([7, 4, 5820667, 14],"float32"), list[7,4,14,7,], ) 
 shape '[7, 4, 14, 7]' is invalid for input of size 2281701464
2025-03-18 02:21:18.033638 test begin: paddle.reshape(Tensor([7, 4, 7, 11641334],"float32"), list[7,4,14,7,], )

[torch error] paddle.reshape(Tensor([7, 4, 7, 11641334],"float32"), list[7,4,14,7,], ) 
 shape '[7, 4, 14, 7]' is invalid for input of size 2281701464
2025-03-18 02:21:19.919089 test begin: paddle.reshape(Tensor([7, 4, 81489335],"float32"), shape=list[7,4,4,8,], )

[torch error] paddle.reshape(Tensor([7, 4, 81489335],"float32"), shape=list[7,4,4,8,], ) 
 shape '[7, 4, 4, 8]' is invalid for input of size 2281701380
2025-03-18 02:21:21.804174 test begin: paddle.reshape(Tensor([7, 56, 5820667],"float32"), shape=list[7,56,4,8,], )

[torch error] paddle.reshape(Tensor([7, 56, 5820667],"float32"), shape=list[7,56,4,8,], ) 
 shape '[7, 56, 4, 8]' is invalid for input of size 2281701464
2025-03-18 02:21:23.680721 test begin: paddle.reshape(Tensor([7, 6520, 50000],"float32"), list[-1,50000,], )

[Pass] paddle.reshape(Tensor([7, 6520, 50000],"float32"), list[-1,50000,], )
2025-03-18 02:24:29.986939 test begin: paddle.reshape(Tensor([7, 7, 46565335],"float32"), shape=list[7,7,4,8,], )

[torch error] paddle.reshape(Tensor([7, 7, 46565335],"float32"), shape=list[7,7,4,8,], ) 
 shape '[7, 7, 4, 8]' is invalid for input of size 2281701415
2025-03-18 02:24:34.663108 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(100,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(100,-1,), )
2025-03-18 02:40:28.286994 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(104,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(104,-1,), ) 
 shape '[104, -1]' is invalid for input of size 4294972800
2025-03-18 02:40:31.917516 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(108,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(108,-1,), ) 
 shape '[108, -1]' is invalid for input of size 4294972800
2025-03-18 02:40:32.869321 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(112,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(112,-1,), ) 
 shape '[112, -1]' is invalid for input of size 4294972800
2025-03-18 02:40:33.862177 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(116,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(116,-1,), ) 
 shape '[116, -1]' is invalid for input of size 4294972800
2025-03-18 02:40:35.121497 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(12,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(12,-1,), )
2025-03-18 02:56:30.397388 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(120,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(120,-1,), )
2025-03-18 03:12:39.022567 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(124,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(124,-1,), ) 
 shape '[124, -1]' is invalid for input of size 4294972800
2025-03-18 03:12:43.034472 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(128,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(128,-1,), )
2025-03-18 03:28:41.510360 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(132,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(132,-1,), ) 
 shape '[132, -1]' is invalid for input of size 4294972800
2025-03-18 03:28:45.450923 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(136,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(136,-1,), ) 
 shape '[136, -1]' is invalid for input of size 4294972800
2025-03-18 03:28:47.228352 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(140,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(140,-1,), ) 
 shape '[140, -1]' is invalid for input of size 4294972800
2025-03-18 03:28:48.989482 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(144,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(144,-1,), )
2025-03-18 03:44:41.452465 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(148,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(148,-1,), ) 
 shape '[148, -1]' is invalid for input of size 4294972800
2025-03-18 03:44:45.407134 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(152,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(152,-1,), )
2025-03-18 04:00:50.743744 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(156,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(156,-1,), ) 
 shape '[156, -1]' is invalid for input of size 4294972800
2025-03-18 04:00:54.717942 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(16,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(16,-1,), )
2025-03-18 04:16:43.898358 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(160,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(160,-1,), )
2025-03-18 04:32:27.536691 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(164,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(164,-1,), ) 
 shape '[164, -1]' is invalid for input of size 4294972800
2025-03-18 04:32:31.458070 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(168,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(168,-1,), ) 
 shape '[168, -1]' is invalid for input of size 4294972800
2025-03-18 04:32:33.151117 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(172,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(172,-1,), ) 
 shape '[172, -1]' is invalid for input of size 4294972800
2025-03-18 04:32:34.481273 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(176,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(176,-1,), ) 
 shape '[176, -1]' is invalid for input of size 4294972800
2025-03-18 04:32:36.532416 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(180,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(180,-1,), )
2025-03-18 04:48:38.612621 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(184,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(184,-1,), ) 
 shape '[184, -1]' is invalid for input of size 4294972800
2025-03-18 04:48:42.257740 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(188,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(188,-1,), )
2025-03-18 05:04:28.721318 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(192,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(192,-1,), )
2025-03-18 05:20:36.693175 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(196,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(196,-1,), ) 
 shape '[196, -1]' is invalid for input of size 4294972800
2025-03-18 05:20:40.629987 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(20,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(20,-1,), )
2025-03-18 05:37:35.733535 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(200,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(200,-1,), )
2025-03-18 05:54:04.004138 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(208,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(208,-1,), ) 
 shape '[208, -1]' is invalid for input of size 4294972800
2025-03-18 05:54:07.956360 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(212,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(212,-1,), ) 
 shape '[212, -1]' is invalid for input of size 4294972800
2025-03-18 05:54:09.717903 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(216,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(216,-1,), ) 
 shape '[216, -1]' is invalid for input of size 4294972800
2025-03-18 05:54:12.089188 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(220,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(220,-1,), ) 
 shape '[220, -1]' is invalid for input of size 4294972800
2025-03-18 05:54:13.609623 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(224,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(224,-1,), ) 
 shape '[224, -1]' is invalid for input of size 4294972800
2025-03-18 05:54:14.881593 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(236,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(236,-1,), ) 
 shape '[236, -1]' is invalid for input of size 4294972800
2025-03-18 05:54:16.669354 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(24,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(24,-1,), )
2025-03-18 06:11:18.015259 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(244,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(244,-1,), ) 
 shape '[244, -1]' is invalid for input of size 4294972800
2025-03-18 06:11:22.705073 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(252,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(252,-1,), ) 
 shape '[252, -1]' is invalid for input of size 4294972800
2025-03-18 06:11:24.598948 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(256,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(256,-1,), ) 
 shape '[256, -1]' is invalid for input of size 4294972800
2025-03-18 06:11:26.537432 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(260,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(260,-1,), ) 
 shape '[260, -1]' is invalid for input of size 4294972800
2025-03-18 06:11:28.318851 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(272,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(272,-1,), ) 
 shape '[272, -1]' is invalid for input of size 4294972800
2025-03-18 06:11:30.162423 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(28,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(28,-1,), ) 
 shape '[28, -1]' is invalid for input of size 4294972800
2025-03-18 06:11:32.552613 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(280,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(280,-1,), ) 
 shape '[280, -1]' is invalid for input of size 4294972800
2025-03-18 06:11:34.492178 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(292,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(292,-1,), ) 
 shape '[292, -1]' is invalid for input of size 4294972800
2025-03-18 06:11:36.080893 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(296,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(296,-1,), ) 
 shape '[296, -1]' is invalid for input of size 4294972800
2025-03-18 06:11:37.426532 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(32,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(32,-1,), )
2025-03-18 06:27:43.969035 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(332,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(332,-1,), ) 
 shape '[332, -1]' is invalid for input of size 4294972800
2025-03-18 06:27:47.930216 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(40,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(40,-1,), )
2025-03-18 06:43:42.968895 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(44,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(44,-1,), ) 
 shape '[44, -1]' is invalid for input of size 4294972800
2025-03-18 06:43:46.753953 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(48,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(48,-1,), )
2025-03-18 07:00:17.900869 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(52,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(52,-1,), ) 
 shape '[52, -1]' is invalid for input of size 4294972800
2025-03-18 07:00:22.062851 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(56,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(56,-1,), ) 
 shape '[56, -1]' is invalid for input of size 4294972800
2025-03-18 07:00:24.647256 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(60,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(60,-1,), )
2025-03-18 07:16:25.056414 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(64,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(64,-1,), )
2025-03-18 07:32:33.581664 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(68,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(68,-1,), ) 
 shape '[68, -1]' is invalid for input of size 4294972800
2025-03-18 07:32:37.328683 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(72,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(72,-1,), )
2025-03-18 07:48:35.521478 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(76,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(76,-1,), )
2025-03-18 08:04:35.211081 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(8,-1,), )
2025-03-18 08:20:42.455939 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(80,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(80,-1,), )
2025-03-18 08:36:32.563166 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(84,-1,), )

[torch error] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(84,-1,), ) 
 shape '[84, -1]' is invalid for input of size 4294972800
2025-03-18 08:36:36.335278 test begin: paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(96,-1,), )

[Pass] paddle.reshape(Tensor([70641, 200, 304],"float16"), shape=tuple(96,-1,), )
2025-03-18 08:52:35.953837 test begin: paddle.reshape(Tensor([7065, 10, 60800],"float16"), shape=tuple(-1,200,304,), )

[Pass] paddle.reshape(Tensor([7065, 10, 60800],"float16"), shape=tuple(-1,200,304,), )
2025-03-18 09:08:34.120906 test begin: paddle.reshape(Tensor([7065, 10, 60800],"float16"), shape=tuple(-1,304,200,), )

[Pass] paddle.reshape(Tensor([7065, 10, 60800],"float16"), shape=tuple(-1,304,200,), )
2025-03-18 09:24:31.821163 test begin: paddle.reshape(Tensor([708, 30, 336, 320],"float32"), shape=list[-1,336,320,], )

[Pass] paddle.reshape(Tensor([708, 30, 336, 320],"float32"), shape=list[-1,336,320,], )
2025-03-18 09:27:33.705525 test begin: paddle.reshape(Tensor([7085, 4, 296, 272],"float32"), shape=list[-1,296,272,], )

[Pass] paddle.reshape(Tensor([7085, 4, 296, 272],"float32"), shape=list[-1,296,272,], )
2025-03-18 09:30:37.934307 test begin: paddle.reshape(Tensor([7108, 4, 304, 264],"float32"), shape=list[-1,304,264,], )

[Pass] paddle.reshape(Tensor([7108, 4, 304, 264],"float32"), shape=list[-1,304,264,], )
2025-03-18 09:33:42.562551 test begin: paddle.reshape(Tensor([71303169, 1, 32],"float32"), list[1,1,4,-1,], )

[Pass] paddle.reshape(Tensor([71303169, 1, 32],"float32"), list[1,1,4,-1,], )
2025-03-18 09:36:42.194340 test begin: paddle.reshape(Tensor([71303169, 1, 32],"int64"), shape=list[13,1,-1,4,], )

[torch error] paddle.reshape(Tensor([71303169, 1, 32],"int64"), shape=list[13,1,-1,4,], ) 
 shape '[13, 1, -1, 4]' is invalid for input of size 2281701408
2025-03-18 09:36:50.327139 test begin: paddle.reshape(Tensor([71303169, 2, 16],"float32"), tuple(13,2,4,4,), )

[torch error] paddle.reshape(Tensor([71303169, 2, 16],"float32"), tuple(13,2,4,4,), ) 
 shape '[13, 2, 4, 4]' is invalid for input of size 2281701408
2025-03-18 09:36:53.979723 test begin: paddle.reshape(Tensor([71303169, 32],"bool"), list[-1,32,1,], )

[Pass] paddle.reshape(Tensor([71303169, 32],"bool"), list[-1,32,1,], )
2025-03-18 09:38:26.683383 test begin: paddle.reshape(Tensor([71303169, 32],"float32"), list[16,-1,], )

[Pass] paddle.reshape(Tensor([71303169, 32],"float32"), list[16,-1,], )
2025-03-18 09:41:31.096012 test begin: paddle.reshape(Tensor([71303169, 32],"float32"), shape=list[-1,4,32,], )

[torch error] paddle.reshape(Tensor([71303169, 32],"float32"), shape=list[-1,4,32,], ) 
 shape '[-1, 4, 32]' is invalid for input of size 2281701408
2025-03-18 09:41:35.291905 test begin: paddle.reshape(Tensor([71303169, 32],"float32"), shape=list[-1,8,32,], )

[torch error] paddle.reshape(Tensor([71303169, 32],"float32"), shape=list[-1,8,32,], ) 
 shape '[-1, 8, 32]' is invalid for input of size 2281701408
2025-03-18 09:41:36.456530 test begin: paddle.reshape(Tensor([71303169, 32],"int64"), shape=list[-1,1,], )

[Pass] paddle.reshape(Tensor([71303169, 32],"int64"), shape=list[-1,1,], )
2025-03-18 09:45:41.485622 test begin: paddle.reshape(Tensor([71303169, 4, 2, 4],"float32"), list[13,4,4,2,], )

[torch error] paddle.reshape(Tensor([71303169, 4, 2, 4],"float32"), list[13,4,4,2,], ) 
 shape '[13, 4, 4, 2]' is invalid for input of size 2281701408
2025-03-18 09:45:45.888889 test begin: paddle.reshape(Tensor([7130317, 10, 32],"float32"), shape=list[14,-1,4,8,], )

[torch error] paddle.reshape(Tensor([7130317, 10, 32],"float32"), shape=list[14,-1,4,8,], ) 
 shape '[14, -1, 4, 8]' is invalid for input of size 2281701440
2025-03-18 09:45:49.222465 test begin: paddle.reshape(Tensor([7130317, 10, 32],"float32"), shape=list[7,10,4,8,], )

[torch error] paddle.reshape(Tensor([7130317, 10, 32],"float32"), shape=list[7,10,4,8,], ) 
 shape '[7, 10, 4, 8]' is invalid for input of size 2281701440
2025-03-18 09:45:51.312490 test begin: paddle.reshape(Tensor([713032, 40, 40, 2],"float32"), shape=tuple(-1,2,), )

[Pass] paddle.reshape(Tensor([713032, 40, 40, 2],"float32"), shape=tuple(-1,2,), )
2025-03-18 09:49:01.290695 test begin: paddle.reshape(Tensor([715, 36, 264, 336],"float32"), shape=list[-1,264,336,], )

[accuracy error] paddle.reshape(Tensor([715, 36, 264, 336],"float32"), shape=list[-1,264,336,], ) 
 Unable to allocate 2.13 GiB for an array with shape (2283240960,) and data type bool
2025-03-18 09:51:01.835998 test begin: paddle.reshape(Tensor([715827883, 2, 1, 3],"float16"), list[-1,3,], )

[accuracy error] paddle.reshape(Tensor([715827883, 2, 1, 3],"float16"), list[-1,3,], ) 
 
Not equal to tolerance rtol=0.01, atol=0.01

x and y +inf location mismatch:
 x: array([[ 0.2286  , -0.2272  , -0.1772  ],
       [ 0.4507  , -0.202   , -0.06915 ],
       [-0.1814  , -0.11273 , -0.4978  ],...
 y: array([[ 0.2286  , -0.2272  , -0.1772  ],
       [ 0.4507  , -0.202   , -0.06915 ],
       [-0.1814  , -0.11273 , -0.4978  ],...
2025-03-18 09:53:08.975368 test begin: paddle.reshape(Tensor([715827883, 2, 3],"float16"), list[-1,], )

[accuracy error] paddle.reshape(Tensor([715827883, 2, 3],"float16"), list[-1,], ) 
 Unable to allocate 4.00 GiB for an array with shape (4294967298,) and data type bool
2025-03-18 09:53:44.509201 test begin: paddle.reshape(Tensor([715827883, 3, 2],"float16"), list[-1,], )

[accuracy error] paddle.reshape(Tensor([715827883, 3, 2],"float16"), list[-1,], ) 
 Unable to allocate 8.00 GiB for an array with shape (4294967298,) and data type float16
2025-03-18 09:58:31.638574 test begin: paddle.reshape(Tensor([715827883, 6],"float16"), shape=list[1,3,5,6,], )

[torch error] paddle.reshape(Tensor([715827883, 6],"float16"), shape=list[1,3,5,6,], ) 
 shape '[1, 3, 5, 6]' is invalid for input of size 4294967298
2025-03-18 09:58:35.799176 test begin: paddle.reshape(Tensor([715827883, 6],"float16"), shape=list[2,3,5,6,], )

[torch error] paddle.reshape(Tensor([715827883, 6],"float16"), shape=list[2,3,5,6,], ) 
 shape '[2, 3, 5, 6]' is invalid for input of size 4294967298
2025-03-18 09:58:37.327206 test begin: paddle.reshape(Tensor([7178, 11, 54400],"float16"), shape=tuple(-1,200,272,), )

[accuracy error] paddle.reshape(Tensor([7178, 11, 54400],"float16"), shape=tuple(-1,200,272,), ) 
 Unable to allocate 4.00 GiB for an array with shape (78958, 200, 272) and data type bool
2025-03-18 09:59:05.381944 test begin: paddle.reshape(Tensor([72, 110036, 288],"float32"), shape=tuple(72,-1,), )

[accuracy error] paddle.reshape(Tensor([72, 110036, 288],"float32"), shape=tuple(72,-1,), ) 
 Unable to allocate 2.13 GiB for an array with shape (72, 31690368) and data type bool
2025-03-18 09:59:40.873582 test begin: paddle.reshape(Tensor([72, 116509, 272],"float32"), shape=tuple(72,-1,), )

[accuracy error] paddle.reshape(Tensor([72, 116509, 272],"float32"), shape=tuple(72,-1,), ) 
 Unable to allocate 2.13 GiB for an array with shape (72, 31690448) and data type bool
2025-03-18 10:00:14.277770 test begin: paddle.reshape(Tensor([72, 196225, 304],"float16"), shape=tuple(72,-1,), )

[accuracy error] paddle.reshape(Tensor([72, 196225, 304],"float16"), shape=tuple(72,-1,), ) 
 Unable to allocate 4.00 GiB for an array with shape (72, 59652400) and data type bool
2025-03-18 10:00:54.231296 test begin: paddle.reshape(Tensor([72, 200, 158452],"float32"), shape=tuple(72,-1,), )

[accuracy error] paddle.reshape(Tensor([72, 200, 158452],"float32"), shape=tuple(72,-1,), ) 
 Unable to allocate 8.50 GiB for an array with shape (2281708800,) and data type float32
2025-03-18 10:02:05.494241 test begin: paddle.reshape(Tensor([72, 200, 298262],"float16"), shape=tuple(72,-1,), )

2025-03-18 10:02:16.108995 test begin: paddle.reshape(Tensor([72, 207127, 288],"float16"), shape=tuple(72,-1,), )

2025-03-18 10:02:19.396340 test begin: paddle.reshape(Tensor([72, 219311, 272],"float16"), shape=tuple(72,-1,), )

[accuracy error] paddle.reshape(Tensor([72, 219311, 272],"float16"), shape=tuple(72,-1,), ) 
 Unable to allocate 8.00 GiB for an array with shape (4294986624,) and data type float16
2025-03-18 10:07:47.778904 test begin: paddle.reshape(Tensor([720, 3169030],"float32"), list[5,4,6,6,6,], )

[torch error] paddle.reshape(Tensor([720, 3169030],"float32"), list[5,4,6,6,6,], ) 
 shape '[5, 4, 6, 6, 6]' is invalid for input of size 2281701600
2025-03-18 10:07:51.912980 test begin: paddle.reshape(Tensor([72024, 120, 88, 3],"float32"), shape=tuple(2,-1,1,), )

[accuracy error] paddle.reshape(Tensor([72024, 120, 88, 3],"float32"), shape=tuple(2,-1,1,), ) 
 Unable to allocate 8.50 GiB for an array with shape (2281720320,) and data type float32
2025-03-18 10:09:27.409390 test begin: paddle.reshape(Tensor([72551, 200, 296],"float16"), shape=tuple(116,-1,), )

[torch error] paddle.reshape(Tensor([72551, 200, 296],"float16"), shape=tuple(116,-1,), ) 
 shape '[116, -1]' is invalid for input of size 4295019200
2025-03-18 10:09:31.686137 test begin: paddle.reshape(Tensor([72551, 200, 296],"float16"), shape=tuple(128,-1,), )

[torch error] paddle.reshape(Tensor([72551, 200, 296],"float16"), shape=tuple(128,-1,), ) 
 shape '[128, -1]' is invalid for input of size 4295019200
2025-03-18 10:09:33.867503 test begin: paddle.reshape(Tensor([72551, 200, 296],"float16"), shape=tuple(148,-1,), )

[accuracy error] paddle.reshape(Tensor([72551, 200, 296],"float16"), shape=tuple(148,-1,), ) 
 Unable to allocate 4.00 GiB for an array with shape (148, 29020400) and data type bool
2025-03-18 10:10:15.931836 test begin: paddle.reshape(Tensor([72551, 200, 296],"float16"), shape=tuple(224,-1,), )

[torch error] paddle.reshape(Tensor([72551, 200, 296],"float16"), shape=tuple(224,-1,), ) 
 shape '[224, -1]' is invalid for input of size 4295019200
2025-03-18 10:10:18.428482 test begin: paddle.reshape(Tensor([72551, 200, 296],"float16"), shape=tuple(36,-1,), )

[torch error] paddle.reshape(Tensor([72551, 200, 296],"float16"), shape=tuple(36,-1,), ) 
 shape '[36, -1]' is invalid for input of size 4295019200
2025-03-18 10:10:20.196749 test begin: paddle.reshape(Tensor([72551, 200, 296],"float16"), shape=tuple(40,-1,), )

[accuracy error] paddle.reshape(Tensor([72551, 200, 296],"float16"), shape=tuple(40,-1,), ) 
 (ResourceExhausted) Fail to alloc memory of 8590038400 size, error code is 12.
  [Hint: Expected error == 0, but received error:12 != 0:0.] (at ../paddle/phi/core/memory/allocation/cpu_allocator.cc:48)

2025-03-18 10:10:44.468434 test begin: paddle.reshape(Tensor([72551, 200, 296],"float16"), shape=tuple(92,-1,), )

[torch error] paddle.reshape(Tensor([72551, 200, 296],"float16"), shape=tuple(92,-1,), ) 
 shape '[92, -1]' is invalid for input of size 4295019200
2025-03-18 10:10:46.440466 test begin: paddle.reshape(Tensor([72551, 200, 296],"float16"), shape=tuple(96,-1,), )

[torch error] paddle.reshape(Tensor([72551, 200, 296],"float16"), shape=tuple(96,-1,), ) 
 shape '[96, -1]' is invalid for input of size 4295019200
2025-03-18 10:10:48.260908 test begin: paddle.reshape(Tensor([7256, 10, 59200],"float16"), shape=tuple(-1,200,296,), )

2025-03-18 10:10:57.399541 test begin: paddle.reshape(Tensor([726, 30, 312, 336],"float32"), shape=list[-1,312,336,], )

[accuracy error] paddle.reshape(Tensor([726, 30, 312, 336],"float32"), shape=list[-1,312,336,], ) 
 (ResourceExhausted) Fail to alloc memory of 9132963840 size, error code is 12.
  [Hint: Expected error == 0, but received error:12 != 0:0.] (at ../paddle/phi/core/memory/allocation/cpu_allocator.cc:48)

2025-03-18 10:11:22.242762 test begin: paddle.reshape(Tensor([727584, 64, 49],"float32"), list[64,1,7,7,], )

[torch error] paddle.reshape(Tensor([727584, 64, 49],"float32"), list[64,1,7,7,], ) 
 shape '[64, 1, 7, 7]' is invalid for input of size 2281703424
2025-03-18 10:11:23.966975 test begin: paddle.reshape(Tensor([728, 3134206],"float32"), tuple(2,52,7,-1,), )

2025-03-18 10:11:35.480308 test begin: paddle.reshape(Tensor([729, 39, 304, 264],"float32"), shape=list[-1,304,264,], )

2025-03-18 10:11:40.349607 test begin: paddle.reshape(Tensor([7373, 6, 97088],"float16"), shape=tuple(-1,296,328,), )

2025-03-18 10:11:45.365004 test begin: paddle.reshape(Tensor([7398, 6, 96768],"float16"), shape=tuple(-1,288,336,), )

2025-03-18 10:11:48.460413 test begin: paddle.reshape(Tensor([742742, 3, 32, 32],"float32"), list[-1,3072,], )

2025-03-18 10:12:05.374863 test begin: paddle.reshape(Tensor([742742, 3072],"float32"), list[2,3,32,32,], )

W0318 10:13:14.556007 34605 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0318 10:13:14.558257 34605 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[torch error] paddle.reshape(Tensor([742742, 3072],"float32"), list[2,3,32,32,], ) 
 shape '[2, 3, 32, 32]' is invalid for input of size 2281703424
2025-03-18 10:13:18.342330 test begin: paddle.reshape(Tensor([745, 44, 256, 272],"float32"), shape=list[-1,256,272,], )

[Pass] paddle.reshape(Tensor([745, 44, 256, 272],"float32"), shape=list[-1,256,272,], )
2025-03-18 10:16:05.703985 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(108,-1,), )

[torch error] paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(108,-1,), ) 
 shape '[108, -1]' is invalid for input of size 4295001600
2025-03-18 10:17:27.225856 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(120,-1,), )

[Pass] paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(120,-1,), )
2025-03-18 10:33:42.625617 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(128,-1,), )

[Pass] paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(128,-1,), )
2025-03-18 10:49:48.927658 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(140,-1,), )

[torch error] paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(140,-1,), ) 
 shape '[140, -1]' is invalid for input of size 4295001600
2025-03-18 10:49:52.700922 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(144,-1,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 86, in func_timeout
    thread.join(timeout)
  File "/usr/lib/python3.9/threading.py", line 1064, in join
    self._wait_for_tstate_lock(timeout=max(timeout, 0))
  File "/usr/lib/python3.9/threading.py", line 1080, in _wait_for_tstate_lock
    if lock.acquire(block, timeout):
KeyboardInterrupt
2025-03-18 11:13:07.234754 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(168,-1,), )

W0318 11:14:38.256632 161079 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0318 11:14:38.257650 161079 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[torch error] paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(168,-1,), ) 
 shape '[168, -1]' is invalid for input of size 4295001600
2025-03-18 11:14:40.239287 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(212,-1,), )

[torch error] paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(212,-1,), ) 
 shape '[212, -1]' is invalid for input of size 4295001600
2025-03-18 11:14:42.786898 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(24,-1,), )

[Pass] paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(24,-1,), )
2025-03-18 11:30:37.086693 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(48,-1,), )

[Pass] paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(48,-1,), )
2025-03-18 11:46:56.000280 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(64,-1,), )

[Pass] paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(64,-1,), )
2025-03-18 12:03:12.292408 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(72,-1,), )

[paddle error] paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(72,-1,), ) 
 

--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   egr::Grad(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, bool, bool, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&)
1   egr::RunBackward(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&)
2   egr::GradTensorHolder::CopyValueFromTensor(unsigned long, unsigned long, paddle::Tensor const&, bool)
3   paddle::Tensor::copy_(paddle::Tensor const&, phi::Place const&, bool)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   phi::DeviceContext::Alloc(phi::TensorBase*, phi::DataType, unsigned long, bool, bool) const
6   phi::DeviceContext::Impl::Alloc(phi::TensorBase*, phi::Place const&, phi::DataType, unsigned long, bool, bool) const
7   phi::DenseTensor::AllocateFrom(phi::Allocator*, phi::DataType, unsigned long, bool)
8   paddle::memory::allocation::Allocator::Allocate(unsigned long)
9   paddle::memory::allocation::CUDAAllocator::AllocateImpl(unsigned long)
10  std::string phi::enforce::GetCompleteTraceBackString<std::string >(std::string&&, char const*, int)
11  common::enforce::GetCurrentTraceBackString[abi:cxx11](bool)

----------------------
Error Message Summary:
----------------------
ResourceExhaustedError: 

Out of memory error on GPU 0. Cannot allocate 8.000064GB memory on GPU 0, 73.254822GB memory has been allocated and available memory is only 5.930054GB.

Please check whether there is any other process using GPU 0.
1. If yes, please stop them, or start PaddlePaddle on another GPU.
2. If no, please decrease the batch size of your model. 
 (at ../paddle/phi/core/memory/allocation/cuda_allocator.cc:84)

2025-03-18 12:11:21.796690 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(84,-1,), )

[torch error] paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(84,-1,), ) 
 shape '[84, -1]' is invalid for input of size 4295001600
2025-03-18 12:11:25.698826 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(88,-1,), )

[torch error] paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(88,-1,), ) 
 shape '[88, -1]' is invalid for input of size 4295001600
2025-03-18 12:11:28.212779 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(92,-1,), )

[paddle error] paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(92,-1,), ) 
 

--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   egr::Grad(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, bool, bool, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&)
1   egr::RunBackward(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&)
2   egr::GradTensorHolder::CopyValueFromTensor(unsigned long, unsigned long, paddle::Tensor const&, bool)
3   paddle::Tensor::copy_(paddle::Tensor const&, phi::Place const&, bool)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   phi::DeviceContext::Alloc(phi::TensorBase*, phi::DataType, unsigned long, bool, bool) const
6   phi::DeviceContext::Impl::Alloc(phi::TensorBase*, phi::Place const&, phi::DataType, unsigned long, bool, bool) const
7   phi::DenseTensor::AllocateFrom(phi::Allocator*, phi::DataType, unsigned long, bool)
8   paddle::memory::allocation::Allocator::Allocate(unsigned long)
9   paddle::memory::allocation::CUDAAllocator::AllocateImpl(unsigned long)
10  std::string phi::enforce::GetCompleteTraceBackString<std::string >(std::string&&, char const*, int)
11  common::enforce::GetCurrentTraceBackString[abi:cxx11](bool)

----------------------
Error Message Summary:
----------------------
ResourceExhaustedError: 

Out of memory error on GPU 0. Cannot allocate 8.000064GB memory on GPU 0, 73.254822GB memory has been allocated and available memory is only 5.930054GB.

Please check whether there is any other process using GPU 0.
1. If yes, please stop them, or start PaddlePaddle on another GPU.
2. If no, please decrease the batch size of your model. 
 (at ../paddle/phi/core/memory/allocation/cuda_allocator.cc:84)

2025-03-18 12:19:25.114090 test begin: paddle.reshape(Tensor([757, 46, 200, 328],"float32"), shape=list[-1,200,328,], )

[paddle error] paddle.reshape(Tensor([757, 46, 200, 328],"float32"), shape=list[-1,200,328,], ) 
 

--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   egr::Grad(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, bool, bool, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&)
1   egr::RunBackward(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&)
2   egr::GradTensorHolder::CopyValueFromTensor(unsigned long, unsigned long, paddle::Tensor const&, bool)
3   paddle::Tensor::copy_(paddle::Tensor const&, phi::Place const&, bool)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   phi::DeviceContext::Alloc(phi::TensorBase*, phi::DataType, unsigned long, bool, bool) const
6   phi::DeviceContext::Impl::Alloc(phi::TensorBase*, phi::Place const&, phi::DataType, unsigned long, bool, bool) const
7   phi::DenseTensor::AllocateFrom(phi::Allocator*, phi::DataType, unsigned long, bool)
8   paddle::memory::allocation::Allocator::Allocate(unsigned long)
9   paddle::memory::allocation::CUDAAllocator::AllocateImpl(unsigned long)
10  std::string phi::enforce::GetCompleteTraceBackString<std::string >(std::string&&, char const*, int)
11  common::enforce::GetCurrentTraceBackString[abi:cxx11](bool)

----------------------
Error Message Summary:
----------------------
ResourceExhaustedError: 

Out of memory error on GPU 0. Cannot allocate 8.509767GB memory on GPU 0, 74.274353GB memory has been allocated and available memory is only 4.910522GB.

Please check whether there is any other process using GPU 0.
1. If yes, please stop them, or start PaddlePaddle on another GPU.
2. If no, please decrease the batch size of your model. 
 (at ../paddle/phi/core/memory/allocation/cuda_allocator.cc:84)

2025-03-18 12:22:18.062604 test begin: paddle.reshape(Tensor([7579, 28, 28, 384],"float32"), list[124,28,28,384,], )

[torch error] paddle.reshape(Tensor([7579, 28, 28, 384],"float32"), list[124,28,28,384,], ) 
 shape '[124, 28, 28, 384]' is invalid for input of size 2281703424
2025-03-18 12:22:21.967234 test begin: paddle.reshape(Tensor([7579, 28, 28, 384],"float32"), list[128,28,28,384,], )

[torch error] paddle.reshape(Tensor([7579, 28, 28, 384],"float32"), list[128,28,28,384,], ) 
 shape '[128, 28, 28, 384]' is invalid for input of size 2281703424
2025-03-18 12:22:23.682155 test begin: paddle.reshape(Tensor([7579, 28, 28, 384],"float32"), list[4,28,28,384,], )

[torch error] paddle.reshape(Tensor([7579, 28, 28, 384],"float32"), list[4,28,28,384,], ) 
 shape '[4, 28, 28, 384]' is invalid for input of size 2281703424
2025-03-18 12:22:26.043894 test begin: paddle.reshape(Tensor([7579, 28, 28, 384],"float32"), list[8,28,28,384,], )

[torch error] paddle.reshape(Tensor([7579, 28, 28, 384],"float32"), list[8,28,28,384,], ) 
 shape '[8, 28, 28, 384]' is invalid for input of size 2281703424
2025-03-18 12:22:28.082156 test begin: paddle.reshape(Tensor([7579, 56, 56, 96],"float32"), list[124,56,56,96,], )

[torch error] paddle.reshape(Tensor([7579, 56, 56, 96],"float32"), list[124,56,56,96,], ) 
 shape '[124, 56, 56, 96]' is invalid for input of size 2281703424
2025-03-18 12:22:30.127256 test begin: paddle.reshape(Tensor([7579, 56, 56, 96],"float32"), list[128,56,56,96,], )

[torch error] paddle.reshape(Tensor([7579, 56, 56, 96],"float32"), list[128,56,56,96,], ) 
 shape '[128, 56, 56, 96]' is invalid for input of size 2281703424
2025-03-18 12:22:32.002805 test begin: paddle.reshape(Tensor([7579, 56, 56, 96],"float32"), list[60,56,56,96,], )

[torch error] paddle.reshape(Tensor([7579, 56, 56, 96],"float32"), list[60,56,56,96,], ) 
 shape '[60, 56, 56, 96]' is invalid for input of size 2281703424
2025-03-18 12:22:34.225199 test begin: paddle.reshape(Tensor([7579, 56, 56, 96],"float32"), list[64,56,56,96,], )

[torch error] paddle.reshape(Tensor([7579, 56, 56, 96],"float32"), list[64,56,56,96,], ) 
 shape '[64, 56, 56, 96]' is invalid for input of size 2281703424
2025-03-18 12:22:36.301879 test begin: paddle.reshape(Tensor([758, 32, 336, 280],"float32"), shape=list[-1,336,280,], )

[paddle error] paddle.reshape(Tensor([758, 32, 336, 280],"float32"), shape=list[-1,336,280,], ) 
 

--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   egr::Grad(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, bool, bool, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&)
1   egr::RunBackward(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&)
2   egr::GradTensorHolder::CopyValueFromTensor(unsigned long, unsigned long, paddle::Tensor const&, bool)
3   paddle::Tensor::copy_(paddle::Tensor const&, phi::Place const&, bool)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   phi::DeviceContext::Alloc(phi::TensorBase*, phi::DataType, unsigned long, bool, bool) const
6   phi::DeviceContext::Impl::Alloc(phi::TensorBase*, phi::Place const&, phi::DataType, unsigned long, bool, bool) const
7   phi::DenseTensor::AllocateFrom(phi::Allocator*, phi::DataType, unsigned long, bool)
8   paddle::memory::allocation::Allocator::Allocate(unsigned long)
9   paddle::memory::allocation::CUDAAllocator::AllocateImpl(unsigned long)
10  std::string phi::enforce::GetCompleteTraceBackString<std::string >(std::string&&, char const*, int)
11  common::enforce::GetCurrentTraceBackString[abi:cxx11](bool)

----------------------
Error Message Summary:
----------------------
ResourceExhaustedError: 

Out of memory error on GPU 0. Cannot allocate 8.501129GB memory on GPU 0, 74.254822GB memory has been allocated and available memory is only 4.930054GB.

Please check whether there is any other process using GPU 0.
1. If yes, please stop them, or start PaddlePaddle on another GPU.
2. If no, please decrease the batch size of your model. 
 (at ../paddle/phi/core/memory/allocation/cuda_allocator.cc:84)

2025-03-18 12:24:09.120792 test begin: paddle.reshape(Tensor([75916, 208, 272],"float16"), shape=tuple(12,-1,), )

[torch error] paddle.reshape(Tensor([75916, 208, 272],"float16"), shape=tuple(12,-1,), ) 
 shape '[12, -1]' is invalid for input of size 4295023616
2025-03-18 12:24:12.754547 test begin: paddle.reshape(Tensor([7592, 10, 56576],"float16"), shape=tuple(-1,208,272,), )

[paddle error] paddle.reshape(Tensor([7592, 10, 56576],"float16"), shape=tuple(-1,208,272,), ) 
 

--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   egr::Grad(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, bool, bool, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&)
1   egr::RunBackward(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, bool, std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&)
2   egr::GradTensorHolder::CopyValueFromTensor(unsigned long, unsigned long, paddle::Tensor const&, bool)
3   paddle::Tensor::copy_(paddle::Tensor const&, phi::Place const&, bool)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   phi::DeviceContext::Alloc(phi::TensorBase*, phi::DataType, unsigned long, bool, bool) const
6   phi::DeviceContext::Impl::Alloc(phi::TensorBase*, phi::Place const&, phi::DataType, unsigned long, bool, bool) const
7   phi::DenseTensor::AllocateFrom(phi::Allocator*, phi::DataType, unsigned long, bool)
8   paddle::memory::allocation::Allocator::Allocate(unsigned long)
9   paddle::memory::allocation::CUDAAllocator::AllocateImpl(unsigned long)
10  std::string phi::enforce::GetCompleteTraceBackString<std::string >(std::string&&, char const*, int)
11  common::enforce::GetCurrentTraceBackString[abi:cxx11](bool)

----------------------
Error Message Summary:
----------------------
ResourceExhaustedError: 

Out of memory error on GPU 0. Cannot allocate 8.000526GB memory on GPU 0, 73.254822GB memory has been allocated and available memory is only 5.930054GB.

Please check whether there is any other process using GPU 0.
1. If yes, please stop them, or start PaddlePaddle on another GPU.
2. If no, please decrease the batch size of your model. 
 (at ../paddle/phi/core/memory/allocation/cuda_allocator.cc:84)

2025-03-18 12:32:20.670973 test begin: paddle.reshape(Tensor([76, 110377, 272],"float32"), shape=tuple(76,-1,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 86, in func_timeout
    thread.join(timeout)
  File "/usr/lib/python3.9/threading.py", line 1064, in join
    self._wait_for_tstate_lock(timeout=max(timeout, 0))
  File "/usr/lib/python3.9/threading.py", line 1080, in _wait_for_tstate_lock
    if lock.acquire(block, timeout):
KeyboardInterrupt
2025-03-18 14:06:57.777313 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(84,-1,), )

W0318 14:08:17.105962 149552 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0318 14:08:17.107144 149552 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[torch error] paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(84,-1,), ) 
 shape '[84, -1]' is invalid for input of size 4295001600
2025-03-18 14:08:21.601141 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(88,-1,), )

[torch error] paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(88,-1,), ) 
 shape '[88, -1]' is invalid for input of size 4295001600
2025-03-18 14:08:22.949105 test begin: paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(92,-1,), )

[Pass] paddle.reshape(Tensor([74566, 200, 288],"float16"), shape=tuple(92,-1,), )
2025-03-18 14:24:03.439490 test begin: paddle.reshape(Tensor([757, 46, 200, 328],"float32"), shape=list[-1,200,328,], )

[Pass] paddle.reshape(Tensor([757, 46, 200, 328],"float32"), shape=list[-1,200,328,], )
2025-03-18 14:27:50.819249 test begin: paddle.reshape(Tensor([7579, 28, 28, 384],"float32"), list[124,28,28,384,], )

[torch error] paddle.reshape(Tensor([7579, 28, 28, 384],"float32"), list[124,28,28,384,], ) 
 shape '[124, 28, 28, 384]' is invalid for input of size 2281703424
2025-03-18 14:27:54.786055 test begin: paddle.reshape(Tensor([7579, 28, 28, 384],"float32"), list[128,28,28,384,], )

[torch error] paddle.reshape(Tensor([7579, 28, 28, 384],"float32"), list[128,28,28,384,], ) 
 shape '[128, 28, 28, 384]' is invalid for input of size 2281703424
2025-03-18 14:27:56.632589 test begin: paddle.reshape(Tensor([7579, 28, 28, 384],"float32"), list[4,28,28,384,], )

[torch error] paddle.reshape(Tensor([7579, 28, 28, 384],"float32"), list[4,28,28,384,], ) 
 shape '[4, 28, 28, 384]' is invalid for input of size 2281703424
2025-03-18 14:27:58.564225 test begin: paddle.reshape(Tensor([7579, 28, 28, 384],"float32"), list[8,28,28,384,], )

[torch error] paddle.reshape(Tensor([7579, 28, 28, 384],"float32"), list[8,28,28,384,], ) 
 shape '[8, 28, 28, 384]' is invalid for input of size 2281703424
2025-03-18 14:28:00.508010 test begin: paddle.reshape(Tensor([7579, 56, 56, 96],"float32"), list[124,56,56,96,], )

[torch error] paddle.reshape(Tensor([7579, 56, 56, 96],"float32"), list[124,56,56,96,], ) 
 shape '[124, 56, 56, 96]' is invalid for input of size 2281703424
2025-03-18 14:28:02.506639 test begin: paddle.reshape(Tensor([7579, 56, 56, 96],"float32"), list[128,56,56,96,], )

[torch error] paddle.reshape(Tensor([7579, 56, 56, 96],"float32"), list[128,56,56,96,], ) 
 shape '[128, 56, 56, 96]' is invalid for input of size 2281703424
2025-03-18 14:28:04.457620 test begin: paddle.reshape(Tensor([7579, 56, 56, 96],"float32"), list[60,56,56,96,], )

[torch error] paddle.reshape(Tensor([7579, 56, 56, 96],"float32"), list[60,56,56,96,], ) 
 shape '[60, 56, 56, 96]' is invalid for input of size 2281703424
2025-03-18 14:28:06.444013 test begin: paddle.reshape(Tensor([7579, 56, 56, 96],"float32"), list[64,56,56,96,], )

[torch error] paddle.reshape(Tensor([7579, 56, 56, 96],"float32"), list[64,56,56,96,], ) 
 shape '[64, 56, 56, 96]' is invalid for input of size 2281703424
2025-03-18 14:28:08.377544 test begin: paddle.reshape(Tensor([758, 32, 336, 280],"float32"), shape=list[-1,336,280,], )

[Pass] paddle.reshape(Tensor([758, 32, 336, 280],"float32"), shape=list[-1,336,280,], )
2025-03-18 14:30:58.813853 test begin: paddle.reshape(Tensor([75916, 208, 272],"float16"), shape=tuple(12,-1,), )

[torch error] paddle.reshape(Tensor([75916, 208, 272],"float16"), shape=tuple(12,-1,), ) 
 shape '[12, -1]' is invalid for input of size 4295023616
2025-03-18 14:31:02.715310 test begin: paddle.reshape(Tensor([7592, 10, 56576],"float16"), shape=tuple(-1,208,272,), )

[Pass] paddle.reshape(Tensor([7592, 10, 56576],"float16"), shape=tuple(-1,208,272,), )
2025-03-18 14:46:46.565965 test begin: paddle.reshape(Tensor([76, 110377, 272],"float32"), shape=tuple(76,-1,), )

[Pass] paddle.reshape(Tensor([76, 110377, 272],"float32"), shape=tuple(76,-1,), )
2025-03-18 14:49:38.195264 test begin: paddle.reshape(Tensor([76, 181131, 312],"float16"), shape=tuple(76,-1,), )

[Pass] paddle.reshape(Tensor([76, 181131, 312],"float16"), shape=tuple(76,-1,), )
2025-03-18 15:05:57.582384 test begin: paddle.reshape(Tensor([76, 185898, 304],"float16"), shape=tuple(76,-1,), )

[Pass] paddle.reshape(Tensor([76, 185898, 304],"float16"), shape=tuple(76,-1,), )
2025-03-18 15:26:37.055013 test begin: paddle.reshape(Tensor([76, 200, 150112],"float32"), shape=tuple(76,-1,), )

[Pass] paddle.reshape(Tensor([76, 200, 150112],"float32"), shape=tuple(76,-1,), )
2025-03-18 15:29:31.966862 test begin: paddle.reshape(Tensor([76, 200, 282564],"float16"), shape=tuple(76,-1,), )

[Pass] paddle.reshape(Tensor([76, 200, 282564],"float16"), shape=tuple(76,-1,), )
2025-03-18 15:46:24.689902 test begin: paddle.reshape(Tensor([76, 207768, 272],"float16"), shape=tuple(76,-1,), )

[Pass] paddle.reshape(Tensor([76, 207768, 272],"float16"), shape=tuple(76,-1,), )
2025-03-18 16:03:04.617296 test begin: paddle.reshape(Tensor([76, 98758, 304],"float32"), shape=tuple(76,-1,), )

[Pass] paddle.reshape(Tensor([76, 98758, 304],"float32"), shape=tuple(76,-1,), )
2025-03-18 16:06:22.691487 test begin: paddle.reshape(Tensor([760567127, 1, 1, 3],"float32"), list[-1,3,], )

[Pass] paddle.reshape(Tensor([760567127, 1, 1, 3],"float32"), list[-1,3,], )
2025-03-18 16:09:28.796008 test begin: paddle.reshape(Tensor([760567127, 1, 3],"float32"), tuple(64,-1,), )

[torch error] paddle.reshape(Tensor([760567127, 1, 3],"float32"), tuple(64,-1,), ) 
 shape '[64, -1]' is invalid for input of size 2281701381
2025-03-18 16:09:33.176138 test begin: paddle.reshape(Tensor([760567127, 3, 1],"float32"), shape=list[-1,3,], )

[Pass] paddle.reshape(Tensor([760567127, 3, 1],"float32"), shape=list[-1,3,], )
2025-03-18 16:12:09.881060 test begin: paddle.reshape(Tensor([760567127, 3],"float32"), list[1,1,1,-1,1,3,], )

[Pass] paddle.reshape(Tensor([760567127, 3],"float32"), list[1,1,1,-1,1,3,], )
2025-03-18 16:15:24.288554 test begin: paddle.reshape(Tensor([760567127, 3],"float32"), list[3,2,], )

[torch error] paddle.reshape(Tensor([760567127, 3],"float32"), list[3,2,], ) 
 shape '[3, 2]' is invalid for input of size 2281701381
2025-03-18 16:15:28.686189 test begin: paddle.reshape(Tensor([760567127, 3],"float32"), list[5,3,3,3,], )

[torch error] paddle.reshape(Tensor([760567127, 3],"float32"), list[5,3,3,3,], ) 
 shape '[5, 3, 3, 3]' is invalid for input of size 2281701381
2025-03-18 16:15:30.412780 test begin: paddle.reshape(Tensor([760567127, 3],"float32"), list[64,1,3,], )

[torch error] paddle.reshape(Tensor([760567127, 3],"float32"), list[64,1,3,], ) 
 shape '[64, 1, 3]' is invalid for input of size 2281701381
2025-03-18 16:15:32.276005 test begin: paddle.reshape(Tensor([760567127, 3],"int32"), shape=tuple(-1,1,), )

[Pass] paddle.reshape(Tensor([760567127, 3],"int32"), shape=tuple(-1,1,), )
2025-03-18 16:18:13.895934 test begin: paddle.reshape(Tensor([760567127, 3],"int64"), list[-1,1,], )

[Pass] paddle.reshape(Tensor([760567127, 3],"int64"), list[-1,1,], )
2025-03-18 16:21:39.784490 test begin: paddle.reshape(Tensor([760567127, 3],"int64"), list[2,4,3,], name="Categorical_sample", )

[torch error] paddle.reshape(Tensor([760567127, 3],"int64"), list[2,4,3,], name="Categorical_sample", ) 
 shape '[2, 4, 3]' is invalid for input of size 2281701381
2025-03-18 16:21:47.042309 test begin: paddle.reshape(Tensor([76056713, 3, 1, 10],"float32"), shape=list[-1,10,], )

[Pass] paddle.reshape(Tensor([76056713, 3, 1, 10],"float32"), shape=list[-1,10,], )
2025-03-18 16:24:49.724974 test begin: paddle.reshape(Tensor([76056713, 3, 1, 10],"float32"), shape=list[-1,3,10,], )

[Pass] paddle.reshape(Tensor([76056713, 3, 1, 10],"float32"), shape=list[-1,3,10,], )
2025-03-18 16:27:59.887556 test begin: paddle.reshape(Tensor([76056713, 3, 10],"float32"), shape=list[-1,3,10,], )

[Pass] paddle.reshape(Tensor([76056713, 3, 10],"float32"), shape=list[-1,3,10,], )
2025-03-18 16:30:33.852653 test begin: paddle.reshape(Tensor([76056713, 30],"float32"), list[-1,3,10,], )

[Pass] paddle.reshape(Tensor([76056713, 30],"float32"), list[-1,3,10,], )
2025-03-18 16:33:27.808675 test begin: paddle.reshape(Tensor([760568, 3, 1, 1000],"float32"), shape=list[-1,1000,], )

[Pass] paddle.reshape(Tensor([760568, 3, 1, 1000],"float32"), shape=list[-1,1000,], )
2025-03-18 16:36:47.574685 test begin: paddle.reshape(Tensor([76696, 200, 280],"float16"), shape=tuple(140,-1,), )

[Pass] paddle.reshape(Tensor([76696, 200, 280],"float16"), shape=tuple(140,-1,), )
2025-03-18 16:53:11.278298 test begin: paddle.reshape(Tensor([76696, 200, 280],"float16"), shape=tuple(156,-1,), )

[torch error] paddle.reshape(Tensor([76696, 200, 280],"float16"), shape=tuple(156,-1,), ) 
 shape '[156, -1]' is invalid for input of size 4294976000
2025-03-18 16:53:15.131653 test begin: paddle.reshape(Tensor([76696, 200, 280],"float16"), shape=tuple(160,-1,), )

[Pass] paddle.reshape(Tensor([76696, 200, 280],"float16"), shape=tuple(160,-1,), )
2025-03-18 17:10:28.091530 test begin: paddle.reshape(Tensor([76696, 200, 280],"float16"), shape=tuple(36,-1,), )

[torch error] paddle.reshape(Tensor([76696, 200, 280],"float16"), shape=tuple(36,-1,), ) 
 shape '[36, -1]' is invalid for input of size 4294976000
2025-03-18 17:10:31.721868 test begin: paddle.reshape(Tensor([76696, 200, 280],"float16"), shape=tuple(88,-1,), )

[torch error] paddle.reshape(Tensor([76696, 200, 280],"float16"), shape=tuple(88,-1,), ) 
 shape '[88, -1]' is invalid for input of size 4294976000
2025-03-18 17:10:32.811173 test begin: paddle.reshape(Tensor([7737, 24, 24, 512],"float32"), list[4,24,24,512,], )

[torch error] paddle.reshape(Tensor([7737, 24, 24, 512],"float32"), list[4,24,24,512,], ) 
 shape '[4, 24, 24, 512]' is invalid for input of size 2281734144
2025-03-18 17:10:36.765990 test begin: paddle.reshape(Tensor([7737, 24, 24, 512],"float32"), list[60,24,24,512,], )

[torch error] paddle.reshape(Tensor([7737, 24, 24, 512],"float32"), list[60,24,24,512,], ) 
 shape '[60, 24, 24, 512]' is invalid for input of size 2281734144
2025-03-18 17:10:38.792431 test begin: paddle.reshape(Tensor([7737, 24, 24, 512],"float32"), list[64,24,24,512,], )

[torch error] paddle.reshape(Tensor([7737, 24, 24, 512],"float32"), list[64,24,24,512,], ) 
 shape '[64, 24, 24, 512]' is invalid for input of size 2281734144
2025-03-18 17:10:40.770456 test begin: paddle.reshape(Tensor([7795, 6, 91840],"float16"), shape=tuple(-1,280,328,), )

[Pass] paddle.reshape(Tensor([7795, 6, 91840],"float16"), shape=tuple(-1,280,328,), )
2025-03-18 17:27:15.487499 test begin: paddle.reshape(Tensor([783, 35, 248, 336],"float32"), shape=list[-1,248,336,], )

[Pass] paddle.reshape(Tensor([783, 35, 248, 336],"float32"), shape=list[-1,248,336,], )
2025-03-18 17:29:53.529202 test begin: paddle.reshape(Tensor([783552, 13, 4, 7, 8],"float32"), tuple(104,7,-1,), )

[Pass] paddle.reshape(Tensor([783552, 13, 4, 7, 8],"float32"), tuple(104,7,-1,), )
2025-03-18 17:32:37.780277 test begin: paddle.reshape(Tensor([783552, 13, 7, 32],"float32"), list[2,13,7,8,4,], )

[torch error] paddle.reshape(Tensor([783552, 13, 7, 32],"float32"), list[2,13,7,8,4,], ) 
 shape '[2, 13, 7, 8, 4]' is invalid for input of size 2281703424
2025-03-18 17:32:41.508077 test begin: paddle.reshape(Tensor([783552, 52, 7, 8],"float32"), tuple(2,13,4,7,8,), )

[torch error] paddle.reshape(Tensor([783552, 52, 7, 8],"float32"), tuple(2,13,4,7,8,), ) 
 shape '[2, 13, 4, 7, 8]' is invalid for input of size 2281703424
2025-03-18 17:32:42.861623 test begin: paddle.reshape(Tensor([7885, 8, 68096],"float16"), shape=tuple(-1,224,304,), )

[Pass] paddle.reshape(Tensor([7885, 8, 68096],"float16"), shape=tuple(-1,224,304,), )
2025-03-18 17:49:00.386577 test begin: paddle.reshape(Tensor([789, 39, 232, 320],"float32"), shape=list[-1,232,320,], )

[Pass] paddle.reshape(Tensor([789, 39, 232, 320],"float32"), shape=list[-1,232,320,], )
2025-03-18 17:52:14.301976 test begin: paddle.reshape(Tensor([789, 39, 74240],"float32"), shape=tuple(-1,232,320,), )

[Pass] paddle.reshape(Tensor([789, 39, 74240],"float32"), shape=tuple(-1,232,320,), )
2025-03-18 17:55:22.175870 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(104,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(104,-1,), ) 
 shape '[104, -1]' is invalid for input of size 4294988800
2025-03-18 17:55:26.416760 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(108,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(108,-1,), ) 
 shape '[108, -1]' is invalid for input of size 4294988800
2025-03-18 17:55:27.696558 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(112,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(112,-1,), ) 
 shape '[112, -1]' is invalid for input of size 4294988800
2025-03-18 17:55:28.973124 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(116,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(116,-1,), ) 
 shape '[116, -1]' is invalid for input of size 4294988800
2025-03-18 17:55:30.524135 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(120,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(120,-1,), ) 
 shape '[120, -1]' is invalid for input of size 4294988800
2025-03-18 17:55:31.769600 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(124,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(124,-1,), ) 
 shape '[124, -1]' is invalid for input of size 4294988800
2025-03-18 17:55:33.272283 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(132,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(132,-1,), ) 
 shape '[132, -1]' is invalid for input of size 4294988800
2025-03-18 17:55:34.520751 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(136,-1,), )

[Pass] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(136,-1,), )
2025-03-18 18:12:24.057051 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(144,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(144,-1,), ) 
 shape '[144, -1]' is invalid for input of size 4294988800
2025-03-18 18:12:28.207267 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(152,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(152,-1,), ) 
 shape '[152, -1]' is invalid for input of size 4294988800
2025-03-18 18:12:29.983267 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(160,-1,), )

[Pass] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(160,-1,), )
2025-03-18 18:28:59.872399 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(172,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(172,-1,), ) 
 shape '[172, -1]' is invalid for input of size 4294988800
2025-03-18 18:29:03.848551 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(180,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(180,-1,), ) 
 shape '[180, -1]' is invalid for input of size 4294988800
2025-03-18 18:29:05.215600 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(184,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(184,-1,), ) 
 shape '[184, -1]' is invalid for input of size 4294988800
2025-03-18 18:29:06.608524 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(204,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(204,-1,), ) 
 shape '[204, -1]' is invalid for input of size 4294988800
2025-03-18 18:29:07.994350 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(208,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(208,-1,), ) 
 shape '[208, -1]' is invalid for input of size 4294988800
2025-03-18 18:29:09.379041 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(212,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(212,-1,), ) 
 shape '[212, -1]' is invalid for input of size 4294988800
2025-03-18 18:29:10.780818 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(224,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(224,-1,), ) 
 shape '[224, -1]' is invalid for input of size 4294988800
2025-03-18 18:29:12.144829 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(232,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(232,-1,), ) 
 shape '[232, -1]' is invalid for input of size 4294988800
2025-03-18 18:29:13.509227 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(236,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(236,-1,), ) 
 shape '[236, -1]' is invalid for input of size 4294988800
2025-03-18 18:29:14.909440 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(24,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(24,-1,), ) 
 shape '[24, -1]' is invalid for input of size 4294988800
2025-03-18 18:29:16.427756 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(244,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(244,-1,), ) 
 shape '[244, -1]' is invalid for input of size 4294988800
2025-03-18 18:29:18.081049 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(248,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(248,-1,), ) 
 shape '[248, -1]' is invalid for input of size 4294988800
2025-03-18 18:29:19.547121 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(256,-1,), )

[Pass] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(256,-1,), )
2025-03-18 18:45:41.576766 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(268,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(268,-1,), ) 
 shape '[268, -1]' is invalid for input of size 4294988800
2025-03-18 18:45:45.611133 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(32,-1,), )

[Pass] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(32,-1,), )
2025-03-18 19:02:09.348358 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(36,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(36,-1,), ) 
 shape '[36, -1]' is invalid for input of size 4294988800
2025-03-18 19:02:13.027225 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(40,-1,), )

[Pass] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(40,-1,), )
2025-03-18 19:19:10.178793 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(44,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(44,-1,), ) 
 shape '[44, -1]' is invalid for input of size 4294988800
2025-03-18 19:19:14.301567 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(48,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(48,-1,), ) 
 shape '[48, -1]' is invalid for input of size 4294988800
2025-03-18 19:19:16.128348 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(52,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(52,-1,), ) 
 shape '[52, -1]' is invalid for input of size 4294988800
2025-03-18 19:19:18.001880 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(56,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(56,-1,), ) 
 shape '[56, -1]' is invalid for input of size 4294988800
2025-03-18 19:19:19.860180 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(60,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(60,-1,), ) 
 shape '[60, -1]' is invalid for input of size 4294988800
2025-03-18 19:19:21.733885 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(64,-1,), )

[Pass] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(64,-1,), )
2025-03-18 19:35:37.490971 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(68,-1,), )

[Pass] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(68,-1,), )
2025-03-18 19:51:43.578524 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(72,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(72,-1,), ) 
 shape '[72, -1]' is invalid for input of size 4294988800
2025-03-18 19:51:47.621152 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(76,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(76,-1,), ) 
 shape '[76, -1]' is invalid for input of size 4294988800
2025-03-18 19:51:49.396721 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(80,-1,), )

[accuracy error] backward  paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(80,-1,), ) 
 Unable to allocate 4.00 GiB for an array with shape (4294988800,) and data type bool
2025-03-18 20:04:10.722349 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(84,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(84,-1,), ) 
 shape '[84, -1]' is invalid for input of size 4294988800
2025-03-18 20:04:14.783017 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(88,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(88,-1,), ) 
 shape '[88, -1]' is invalid for input of size 4294988800
2025-03-18 20:04:16.551044 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(92,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(92,-1,), ) 
 shape '[92, -1]' is invalid for input of size 4294988800
2025-03-18 20:04:18.338336 test begin: paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(96,-1,), )

[torch error] paddle.reshape(Tensor([78952, 200, 272],"float16"), shape=tuple(96,-1,), ) 
 shape '[96, -1]' is invalid for input of size 4294988800
2025-03-18 20:04:20.098385 test begin: paddle.reshape(Tensor([7896, 10, 54400],"float16"), shape=tuple(-1,200,272,), )

[Pass] paddle.reshape(Tensor([7896, 10, 54400],"float16"), shape=tuple(-1,200,272,), )
2025-03-18 20:21:06.612622 test begin: paddle.reshape(Tensor([7922575, 12, 12, 2],"float32"), shape=tuple(-1,2,), )

[Pass] paddle.reshape(Tensor([7922575, 12, 12, 2],"float32"), shape=tuple(-1,2,), )
2025-03-18 20:23:57.815972 test begin: paddle.reshape(Tensor([792258, 10, 8, 36],"float32"), shape=tuple(1,-1,4,), )

[Pass] paddle.reshape(Tensor([792258, 10, 8, 36],"float32"), shape=tuple(1,-1,4,), )
2025-03-18 20:27:24.708057 test begin: paddle.reshape(Tensor([797, 38, 248, 304],"float32"), shape=list[-1,248,304,], )

[Pass] paddle.reshape(Tensor([797, 38, 248, 304],"float32"), shape=list[-1,248,304,], )
2025-03-18 20:30:33.707448 test begin: paddle.reshape(Tensor([8, 1, 1, 1, 285212673],"float32"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([8, 1, 1, 1, 285212673],"float32"), shape=tuple(8,-1,), )
2025-03-18 20:33:56.415382 test begin: paddle.reshape(Tensor([8, 1, 1, 1, 536870913],"float16"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([8, 1, 1, 1, 536870913],"float16"), shape=tuple(8,-1,), )
2025-03-18 20:50:07.036171 test begin: paddle.reshape(Tensor([8, 1, 1, 1342178, 400],"float16"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([8, 1, 1, 1342178, 400],"float16"), shape=tuple(8,-1,), )
2025-03-18 21:06:09.599222 test begin: paddle.reshape(Tensor([8, 1, 1, 713032, 400],"float32"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([8, 1, 1, 713032, 400],"float32"), shape=tuple(8,-1,), )
2025-03-18 21:09:17.204907 test begin: paddle.reshape(Tensor([8, 1, 1342178, 1, 400],"float16"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([8, 1, 1342178, 1, 400],"float16"), shape=tuple(8,-1,), )
2025-03-18 21:25:30.094473 test begin: paddle.reshape(Tensor([8, 1, 285212673],"float32"), shape=list[-1,128,], )

[torch error] paddle.reshape(Tensor([8, 1, 285212673],"float32"), shape=list[-1,128,], ) 
 shape '[-1, 128]' is invalid for input of size 2281701384
2025-03-18 21:25:34.542955 test begin: paddle.reshape(Tensor([8, 1, 713032, 1, 400],"float32"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([8, 1, 713032, 1, 400],"float32"), shape=tuple(8,-1,), )
2025-03-18 21:28:46.581390 test begin: paddle.reshape(Tensor([8, 100, 136, 20972],"float32"), shape=tuple(8,-1,1,), )

[Pass] paddle.reshape(Tensor([8, 100, 136, 20972],"float32"), shape=tuple(8,-1,1,), )
2025-03-18 21:32:21.454516 test begin: paddle.reshape(Tensor([8, 100, 136, 20972],"float32"), shape=tuple(8,-1,4,), )

[Pass] paddle.reshape(Tensor([8, 100, 136, 20972],"float32"), shape=tuple(8,-1,4,), )
2025-03-18 21:35:28.031347 test begin: paddle.reshape(Tensor([8, 100, 136, 39476],"float16"), shape=tuple(8,-1,1,), )

[Pass] paddle.reshape(Tensor([8, 100, 136, 39476],"float16"), shape=tuple(8,-1,1,), )
2025-03-18 21:52:29.159210 test begin: paddle.reshape(Tensor([8, 100, 136, 39476],"float16"), shape=tuple(8,-1,4,), )

[Pass] paddle.reshape(Tensor([8, 100, 136, 39476],"float16"), shape=tuple(8,-1,4,), )
2025-03-18 22:08:52.936022 test begin: paddle.reshape(Tensor([8, 100, 140, 20373],"float32"), shape=tuple(8,-1,1,), )

[Pass] paddle.reshape(Tensor([8, 100, 140, 20373],"float32"), shape=tuple(8,-1,1,), )
2025-03-18 22:12:31.921236 test begin: paddle.reshape(Tensor([8, 100, 140, 20373],"float32"), shape=tuple(8,-1,4,), )

[Pass] paddle.reshape(Tensor([8, 100, 140, 20373],"float32"), shape=tuple(8,-1,4,), )
2025-03-18 22:15:46.386234 test begin: paddle.reshape(Tensor([8, 100, 140, 38348],"float16"), shape=tuple(8,-1,1,), )

[Pass] paddle.reshape(Tensor([8, 100, 140, 38348],"float16"), shape=tuple(8,-1,1,), )
2025-03-18 22:32:22.967076 test begin: paddle.reshape(Tensor([8, 100, 140, 38348],"float16"), shape=tuple(8,-1,4,), )

[Pass] paddle.reshape(Tensor([8, 100, 140, 38348],"float16"), shape=tuple(8,-1,4,), )
2025-03-18 22:48:22.786178 test begin: paddle.reshape(Tensor([8, 100, 144, 37283],"float16"), shape=tuple(8,-1,1,), )

[Pass] paddle.reshape(Tensor([8, 100, 144, 37283],"float16"), shape=tuple(8,-1,1,), )
2025-03-18 23:04:37.039905 test begin: paddle.reshape(Tensor([8, 100, 144, 37283],"float16"), shape=tuple(8,-1,4,), )

[Pass] paddle.reshape(Tensor([8, 100, 144, 37283],"float16"), shape=tuple(8,-1,4,), )
2025-03-18 23:20:40.330160 test begin: paddle.reshape(Tensor([8, 100, 1789570, 3],"float16"), shape=tuple(8,-1,1,), )

[Pass] paddle.reshape(Tensor([8, 100, 1789570, 3],"float16"), shape=tuple(8,-1,1,), )
2025-03-18 23:36:32.472239 test begin: paddle.reshape(Tensor([8, 100, 237678, 12],"float32"), shape=tuple(8,-1,4,), )

[Pass] paddle.reshape(Tensor([8, 100, 237678, 12],"float32"), shape=tuple(8,-1,4,), )
2025-03-18 23:39:38.692345 test begin: paddle.reshape(Tensor([8, 100, 447393, 12],"float16"), shape=tuple(8,-1,4,), )

[Pass] paddle.reshape(Tensor([8, 100, 447393, 12],"float16"), shape=tuple(8,-1,4,), )
2025-03-18 23:56:30.052812 test begin: paddle.reshape(Tensor([8, 100, 950709, 3],"float32"), shape=tuple(8,-1,1,), )

[Pass] paddle.reshape(Tensor([8, 100, 950709, 3],"float32"), shape=tuple(8,-1,1,), )
2025-03-19 00:00:10.374765 test begin: paddle.reshape(Tensor([8, 1024, 1, 278529],"float32"), shape=list[-1,1024,], )

[Pass] paddle.reshape(Tensor([8, 1024, 1, 278529],"float32"), shape=list[-1,1024,], )
2025-03-19 00:03:21.919730 test begin: paddle.reshape(Tensor([8, 1024, 278529, 1],"float32"), shape=list[-1,1024,], )

[Pass] paddle.reshape(Tensor([8, 1024, 278529, 1],"float32"), shape=list[-1,1024,], )
2025-03-19 00:06:41.818121 test begin: paddle.reshape(Tensor([8, 1024, 39790, 7],"float32"), list[8,1024,-1,], )

[Pass] paddle.reshape(Tensor([8, 1024, 39790, 7],"float32"), list[8,1024,-1,], )
2025-03-19 00:09:57.610816 test begin: paddle.reshape(Tensor([8, 1024, 7, 39790],"float32"), list[8,1024,-1,], )

[Pass] paddle.reshape(Tensor([8, 1024, 7, 39790],"float32"), list[8,1024,-1,], )
2025-03-19 00:13:15.645769 test begin: paddle.reshape(Tensor([8, 1188387, 4, 4, 5, 3],"float32"), list[24,8,10,3,], )

[torch error] paddle.reshape(Tensor([8, 1188387, 4, 4, 5, 3],"float32"), list[24,8,10,3,], ) 
 shape '[24, 8, 10, 3]' is invalid for input of size 2281703040
2025-03-19 00:13:19.735356 test begin: paddle.reshape(Tensor([8, 1188387, 4, 4, 5, 3],"int64"), list[24,8,10,3,], )

[torch error] paddle.reshape(Tensor([8, 1188387, 4, 4, 5, 3],"int64"), list[24,8,10,3,], ) 
 shape '[24, 8, 10, 3]' is invalid for input of size 2281703040
2025-03-19 00:13:27.759207 test begin: paddle.reshape(Tensor([8, 1242757, 144, 3],"float16"), shape=tuple(8,-1,1,), )

[Pass] paddle.reshape(Tensor([8, 1242757, 144, 3],"float16"), shape=tuple(8,-1,1,), )
2025-03-19 00:30:01.458052 test begin: paddle.reshape(Tensor([8, 1278265, 140, 3],"float16"), shape=tuple(8,-1,1,), )

[Pass] paddle.reshape(Tensor([8, 1278265, 140, 3],"float16"), shape=tuple(8,-1,1,), )
2025-03-19 00:46:52.765041 test begin: paddle.reshape(Tensor([8, 1315861, 136, 3],"float16"), shape=tuple(8,-1,1,), )

[Pass] paddle.reshape(Tensor([8, 1315861, 136, 3],"float16"), shape=tuple(8,-1,1,), )
2025-03-19 01:03:21.487714 test begin: paddle.reshape(Tensor([8, 1342178, 1, 1, 400],"float16"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([8, 1342178, 1, 1, 400],"float16"), shape=tuple(8,-1,), )
2025-03-19 01:19:21.681532 test begin: paddle.reshape(Tensor([8, 14, 14, 1455167],"float32"), list[8,14,14,768,], )

[torch error] paddle.reshape(Tensor([8, 14, 14, 1455167],"float32"), list[8,14,14,768,], ) 
 shape '[8, 14, 14, 768]' is invalid for input of size 2281701856
2025-03-19 01:19:26.233914 test begin: paddle.reshape(Tensor([8, 14, 20372334],"float32"), shape=list[8,14,4,8,], )

[torch error] paddle.reshape(Tensor([8, 14, 20372334],"float32"), shape=list[8,14,4,8,], ) 
 shape '[8, 14, 4, 8]' is invalid for input of size 2281701408
2025-03-19 01:19:28.127289 test begin: paddle.reshape(Tensor([8, 14, 26527, 768],"float32"), list[8,14,14,768,], )

[torch error] paddle.reshape(Tensor([8, 14, 26527, 768],"float32"), list[8,14,14,768,], ) 
 shape '[8, 14, 14, 768]' is invalid for input of size 2281746432
2025-03-19 01:19:29.962141 test begin: paddle.reshape(Tensor([8, 145, 280998, 7],"float32"), list[8,5,29,7,7,], )

[torch error] paddle.reshape(Tensor([8, 145, 280998, 7],"float32"), list[8,5,29,7,7,], ) 
 shape '[8, 5, 29, 7, 7]' is invalid for input of size 2281703760
2025-03-19 01:19:31.800208 test begin: paddle.reshape(Tensor([8, 145, 7, 280998],"float32"), list[8,5,29,7,7,], )

[torch error] paddle.reshape(Tensor([8, 145, 7, 280998],"float32"), list[8,5,29,7,7,], ) 
 shape '[8, 5, 29, 7, 7]' is invalid for input of size 2281703760
2025-03-19 01:19:33.658360 test begin: paddle.reshape(Tensor([8, 1597831, 336],"float16"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([8, 1597831, 336],"float16"), shape=tuple(8,-1,), )
2025-03-19 01:36:20.648002 test begin: paddle.reshape(Tensor([8, 16777217, 32],"float16"), shape=list[-1,32,], )

[Pass] paddle.reshape(Tensor([8, 16777217, 32],"float16"), shape=list[-1,32,], )
2025-03-19 01:52:48.800506 test begin: paddle.reshape(Tensor([8, 169770, 140, 12],"float32"), shape=tuple(8,-1,4,), )

[Pass] paddle.reshape(Tensor([8, 169770, 140, 12],"float32"), shape=tuple(8,-1,4,), )
2025-03-19 01:55:44.301142 test begin: paddle.reshape(Tensor([8, 174763, 136, 12],"float32"), shape=tuple(8,-1,4,), )

[Pass] paddle.reshape(Tensor([8, 174763, 136, 12],"float32"), shape=tuple(8,-1,4,), )
2025-03-19 01:58:39.128086 test begin: paddle.reshape(Tensor([8, 1766023, 304],"float16"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([8, 1766023, 304],"float16"), shape=tuple(8,-1,), )
2025-03-19 02:14:52.780541 test begin: paddle.reshape(Tensor([8, 1973791, 272],"float16"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([8, 1973791, 272],"float16"), shape=tuple(8,-1,), )
2025-03-19 02:31:41.115063 test begin: paddle.reshape(Tensor([8, 200, 1426064],"float32"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([8, 200, 1426064],"float32"), shape=tuple(8,-1,), )
2025-03-19 02:35:01.987132 test begin: paddle.reshape(Tensor([8, 200, 2684355],"float16"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([8, 200, 2684355],"float16"), shape=tuple(8,-1,), )
2025-03-19 02:50:55.120526 test begin: paddle.reshape(Tensor([8, 2228225, 128],"float32"), shape=list[-1,128,], )

[Pass] paddle.reshape(Tensor([8, 2228225, 128],"float32"), shape=list[-1,128,], )
2025-03-19 02:54:17.944124 test begin: paddle.reshape(Tensor([8, 24, 11883862],"float32"), list[-1,6626,], )

[torch error] paddle.reshape(Tensor([8, 24, 11883862],"float32"), list[-1,6626,], ) 
 shape '[-1, 6626]' is invalid for input of size 2281701504
2025-03-19 02:54:22.260465 test begin: paddle.reshape(Tensor([8, 242528, 24, 7, 7],"float32"), list[40,24,49,], )

[torch error] paddle.reshape(Tensor([8, 242528, 24, 7, 7],"float32"), list[40,24,49,], ) 
 shape '[40, 24, 49]' is invalid for input of size 2281703424
2025-03-19 02:54:23.905742 test begin: paddle.reshape(Tensor([8, 256, 1, 1114113],"float32"), shape=list[-1,256,], )

[Pass] paddle.reshape(Tensor([8, 256, 1, 1114113],"float32"), shape=list[-1,256,], )
2025-03-19 02:57:47.558763 test begin: paddle.reshape(Tensor([8, 256, 1114113, 1],"float32"), shape=list[-1,256,], )

[Pass] paddle.reshape(Tensor([8, 256, 1114113, 1],"float32"), shape=list[-1,256,], )
2025-03-19 03:00:47.461710 test begin: paddle.reshape(Tensor([8, 26527, 14, 768],"float32"), list[8,14,14,768,], )

[torch error] paddle.reshape(Tensor([8, 26527, 14, 768],"float32"), list[8,14,14,768,], ) 
 shape '[8, 14, 14, 768]' is invalid for input of size 2281746432
2025-03-19 03:00:52.042309 test begin: paddle.reshape(Tensor([8, 26527, 28, 384],"float32"), list[8,28,28,384,], )

[torch error] paddle.reshape(Tensor([8, 26527, 28, 384],"float32"), list[8,28,28,384,], ) 
 shape '[8, 28, 28, 384]' is invalid for input of size 2281746432
2025-03-19 03:00:53.614041 test begin: paddle.reshape(Tensor([8, 26527, 56, 192],"float32"), list[8,56,56,192,], )

[torch error] paddle.reshape(Tensor([8, 26527, 56, 192],"float32"), list[8,56,56,192,], ) 
 shape '[8, 56, 56, 192]' is invalid for input of size 2281746432
2025-03-19 03:00:55.196280 test begin: paddle.reshape(Tensor([8, 272, 1973791],"float16"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([8, 272, 1973791],"float16"), shape=tuple(8,-1,), )
2025-03-19 03:17:37.456762 test begin: paddle.reshape(Tensor([8, 28, 26527, 384],"float32"), list[8,28,28,384,], )

[torch error] paddle.reshape(Tensor([8, 28, 26527, 384],"float32"), list[8,28,28,384,], ) 
 shape '[8, 28, 28, 384]' is invalid for input of size 2281746432
2025-03-19 03:17:42.111784 test begin: paddle.reshape(Tensor([8, 28, 28, 363792],"float32"), list[8,28,28,384,], )

[torch error] paddle.reshape(Tensor([8, 28, 28, 363792],"float32"), list[8,28,28,384,], ) 
 shape '[8, 28, 28, 384]' is invalid for input of size 2281703424
2025-03-19 03:17:44.013017 test begin: paddle.reshape(Tensor([8, 285212673, 1, 1],"float32"), shape=list[-1,1024,], )

[torch error] paddle.reshape(Tensor([8, 285212673, 1, 1],"float32"), shape=list[-1,1024,], ) 
 shape '[-1, 1024]' is invalid for input of size 2281701384
2025-03-19 03:17:45.755052 test begin: paddle.reshape(Tensor([8, 285212673, 1, 1],"float32"), shape=list[-1,256,], )

[torch error] paddle.reshape(Tensor([8, 285212673, 1, 1],"float32"), shape=list[-1,256,], ) 
 shape '[-1, 256]' is invalid for input of size 2281701384
2025-03-19 03:17:47.366079 test begin: paddle.reshape(Tensor([8, 285212673, 1, 1],"float32"), shape=list[-1,512,], )

[torch error] paddle.reshape(Tensor([8, 285212673, 1, 1],"float32"), shape=list[-1,512,], ) 
 shape '[-1, 512]' is invalid for input of size 2281701384
2025-03-19 03:17:49.287308 test begin: paddle.reshape(Tensor([8, 285212673],"float32"), list[8,1024,1,1,], )

[torch error] paddle.reshape(Tensor([8, 285212673],"float32"), list[8,1024,1,1,], ) 
 shape '[8, 1024, 1, 1]' is invalid for input of size 2281701384
2025-03-19 03:17:51.181304 test begin: paddle.reshape(Tensor([8, 285212673],"float32"), list[8,2048,1,1,], )

[torch error] paddle.reshape(Tensor([8, 285212673],"float32"), list[8,2048,1,1,], ) 
 shape '[8, 2048, 1, 1]' is invalid for input of size 2281701384
2025-03-19 03:17:53.062716 test begin: paddle.reshape(Tensor([8, 285212673],"float32"), list[8,256,1,1,], )

[torch error] paddle.reshape(Tensor([8, 285212673],"float32"), list[8,256,1,1,], ) 
 shape '[8, 256, 1, 1]' is invalid for input of size 2281701384
2025-03-19 03:17:54.968844 test begin: paddle.reshape(Tensor([8, 285212673],"float32"), list[8,512,1,1,], )

[torch error] paddle.reshape(Tensor([8, 285212673],"float32"), list[8,512,1,1,], ) 
 shape '[8, 512, 1, 1]' is invalid for input of size 2281701384
2025-03-19 03:17:56.859716 test begin: paddle.reshape(Tensor([8, 285212673],"float32"), shape=list[-1,1280,], )

[torch error] paddle.reshape(Tensor([8, 285212673],"float32"), shape=list[-1,1280,], ) 
 shape '[-1, 1280]' is invalid for input of size 2281701384
2025-03-19 03:17:58.746922 test begin: paddle.reshape(Tensor([8, 285212673],"float32"), shape=list[-1,2048,], )

[torch error] paddle.reshape(Tensor([8, 285212673],"float32"), shape=list[-1,2048,], ) 
 shape '[-1, 2048]' is invalid for input of size 2281701384
2025-03-19 03:18:00.545347 test begin: paddle.reshape(Tensor([8, 285212673],"int64"), list[2,4,3,2,], name="Categorical_sample", )

[torch error] paddle.reshape(Tensor([8, 285212673],"int64"), list[2,4,3,2,], name="Categorical_sample", ) 
 shape '[2, 4, 3, 2]' is invalid for input of size 2281701384
2025-03-19 03:18:09.400975 test begin: paddle.reshape(Tensor([8, 285212673],"int64"), list[2,4,3,], name="Categorical_sample", )

[torch error] paddle.reshape(Tensor([8, 285212673],"int64"), list[2,4,3,], name="Categorical_sample", ) 
 shape '[2, 4, 3]' is invalid for input of size 2281701384
2025-03-19 03:18:13.315419 test begin: paddle.reshape(Tensor([8, 285212673],"int64"), tuple(-1,1,), )

[Pass] paddle.reshape(Tensor([8, 285212673],"int64"), tuple(-1,1,), )
2025-03-19 03:20:58.493709 test begin: paddle.reshape(Tensor([8, 297097, 960],"float32"), shape=list[-1,], )

[Pass] paddle.reshape(Tensor([8, 297097, 960],"float32"), shape=list[-1,], )
2025-03-19 03:24:22.141956 test begin: paddle.reshape(Tensor([8, 3, 1584515, 4, 5, 3],"float32"), list[24,8,10,3,], )

[torch error] paddle.reshape(Tensor([8, 3, 1584515, 4, 5, 3],"float32"), list[24,8,10,3,], ) 
 shape '[24, 8, 10, 3]' is invalid for input of size 2281701600
2025-03-19 03:24:26.009111 test begin: paddle.reshape(Tensor([8, 3, 1584515, 4, 5, 3],"int64"), list[24,8,10,3,], )

[torch error] paddle.reshape(Tensor([8, 3, 1584515, 4, 5, 3],"int64"), list[24,8,10,3,], ) 
 shape '[24, 8, 10, 3]' is invalid for input of size 2281701600
2025-03-19 03:24:34.574224 test begin: paddle.reshape(Tensor([8, 3, 4, 1584515, 5, 3],"float32"), list[24,8,10,3,], )

[torch error] paddle.reshape(Tensor([8, 3, 4, 1584515, 5, 3],"float32"), list[24,8,10,3,], ) 
 shape '[24, 8, 10, 3]' is invalid for input of size 2281701600
2025-03-19 03:24:36.176502 test begin: paddle.reshape(Tensor([8, 3, 4, 1584515, 5, 3],"int64"), list[24,8,10,3,], )

[torch error] paddle.reshape(Tensor([8, 3, 4, 1584515, 5, 3],"int64"), list[24,8,10,3,], ) 
 shape '[24, 8, 10, 3]' is invalid for input of size 2281701600
2025-03-19 03:24:41.569405 test begin: paddle.reshape(Tensor([8, 3, 4, 4, 1980644, 3],"float32"), list[24,8,10,3,], )

[torch error] paddle.reshape(Tensor([8, 3, 4, 4, 1980644, 3],"float32"), list[24,8,10,3,], ) 
 shape '[24, 8, 10, 3]' is invalid for input of size 2281701888
2025-03-19 03:24:43.507316 test begin: paddle.reshape(Tensor([8, 3, 4, 4, 1980644, 3],"int64"), list[24,8,10,3,], )

[torch error] paddle.reshape(Tensor([8, 3, 4, 4, 1980644, 3],"int64"), list[24,8,10,3,], ) 
 shape '[24, 8, 10, 3]' is invalid for input of size 2281701888
2025-03-19 03:24:46.427611 test begin: paddle.reshape(Tensor([8, 3, 4, 4, 5, 1188387],"float32"), list[24,8,10,3,], )

[torch error] paddle.reshape(Tensor([8, 3, 4, 4, 5, 1188387],"float32"), list[24,8,10,3,], ) 
 shape '[24, 8, 10, 3]' is invalid for input of size 2281703040
2025-03-19 03:24:48.050465 test begin: paddle.reshape(Tensor([8, 3, 4, 4, 5, 1188387],"int64"), list[24,8,10,3,], )

[torch error] paddle.reshape(Tensor([8, 3, 4, 4, 5, 1188387],"int64"), list[24,8,10,3,], ) 
 shape '[24, 8, 10, 3]' is invalid for input of size 2281703040
2025-03-19 03:24:52.050182 test begin: paddle.reshape(Tensor([8, 310690, 144, 12],"float16"), shape=tuple(8,-1,4,), )

[Pass] paddle.reshape(Tensor([8, 310690, 144, 12],"float16"), shape=tuple(8,-1,4,), )
2025-03-19 03:40:58.636405 test begin: paddle.reshape(Tensor([8, 319567, 140, 12],"float16"), shape=tuple(8,-1,4,), )

[Pass] paddle.reshape(Tensor([8, 319567, 140, 12],"float16"), shape=tuple(8,-1,4,), )
2025-03-19 03:57:49.050581 test begin: paddle.reshape(Tensor([8, 328966, 136, 12],"float16"), shape=tuple(8,-1,4,), )

[Pass] paddle.reshape(Tensor([8, 328966, 136, 12],"float16"), shape=tuple(8,-1,4,), )
2025-03-19 04:14:12.310085 test begin: paddle.reshape(Tensor([8, 4, 134217729],"float16"), list[-1,400,], )

[torch error] paddle.reshape(Tensor([8, 4, 134217729],"float16"), list[-1,400,], ) 
 shape '[-1, 400]' is invalid for input of size 4294967328
2025-03-19 04:14:15.967256 test begin: paddle.reshape(Tensor([8, 4, 134217729],"float16"), shape=list[-1,32,], )

[Pass] paddle.reshape(Tensor([8, 4, 134217729],"float16"), shape=list[-1,32,], )
2025-03-19 04:30:59.645504 test begin: paddle.reshape(Tensor([8, 43045, 6626],"float32"), list[-1,6626,], )

[Pass] paddle.reshape(Tensor([8, 43045, 6626],"float32"), list[-1,6626,], )
2025-03-19 04:34:38.671349 test begin: paddle.reshape(Tensor([8, 445645, 640],"float32"), shape=list[-1,], )

[Pass] paddle.reshape(Tensor([8, 445645, 640],"float32"), shape=list[-1,], )
2025-03-19 04:37:47.216927 test begin: paddle.reshape(Tensor([8, 5, 1, 7, 8148934],"float32"), list[8,5,7,7,], )

[torch error] paddle.reshape(Tensor([8, 5, 1, 7, 8148934],"float32"), list[8,5,7,7,], ) 
 shape '[8, 5, 7, 7]' is invalid for input of size 2281701520
2025-03-19 04:37:51.146387 test begin: paddle.reshape(Tensor([8, 5, 1, 8148934, 7],"float32"), list[8,5,7,7,], )

[torch error] paddle.reshape(Tensor([8, 5, 1, 8148934, 7],"float32"), list[8,5,7,7,], ) 
 shape '[8, 5, 7, 7]' is invalid for input of size 2281701520
2025-03-19 04:37:52.510597 test begin: paddle.reshape(Tensor([8, 5, 1164134, 7, 7],"float32"), list[40,24,49,], )

[torch error] paddle.reshape(Tensor([8, 5, 1164134, 7, 7],"float32"), list[40,24,49,], ) 
 shape '[40, 24, 49]' is invalid for input of size 2281702640
2025-03-19 04:37:54.216280 test begin: paddle.reshape(Tensor([8, 5, 1164134, 7, 7],"float32"), list[8,5,7,7,], )

[torch error] paddle.reshape(Tensor([8, 5, 1164134, 7, 7],"float32"), list[8,5,7,7,], ) 
 shape '[8, 5, 7, 7]' is invalid for input of size 2281702640
2025-03-19 04:37:55.358276 test begin: paddle.reshape(Tensor([8, 5, 24, 339539, 7],"float32"), list[40,24,49,], )

[torch error] paddle.reshape(Tensor([8, 5, 24, 339539, 7],"float32"), list[40,24,49,], ) 
 shape '[40, 24, 49]' is invalid for input of size 2281702080
2025-03-19 04:37:56.809147 test begin: paddle.reshape(Tensor([8, 5, 24, 7, 339539],"float32"), list[40,24,49,], )

[torch error] paddle.reshape(Tensor([8, 5, 24, 7, 339539],"float32"), list[40,24,49,], ) 
 shape '[40, 24, 49]' is invalid for input of size 2281702080
2025-03-19 04:37:58.509249 test begin: paddle.reshape(Tensor([8, 5, 7, 8148934],"bool"), list[-1,1,], )

[Pass] paddle.reshape(Tensor([8, 5, 7, 8148934],"bool"), list[-1,1,], )
2025-03-19 04:39:54.347179 test begin: paddle.reshape(Tensor([8, 5, 7, 8148934],"bool"), list[-1,], )

[Pass] paddle.reshape(Tensor([8, 5, 7, 8148934],"bool"), list[-1,], )
2025-03-19 04:40:28.986198 test begin: paddle.reshape(Tensor([8, 5, 7, 8148934],"float32"), list[-1,], )

[Pass] paddle.reshape(Tensor([8, 5, 7, 8148934],"float32"), list[-1,], )
2025-03-19 04:43:30.473946 test begin: paddle.reshape(Tensor([8, 5, 7, 8148934],"float32"), list[8,-1,], )

[Pass] paddle.reshape(Tensor([8, 5, 7, 8148934],"float32"), list[8,-1,], )
2025-03-19 04:47:14.252906 test begin: paddle.reshape(Tensor([8, 5, 8148934, 7],"bool"), list[-1,1,], )

[Pass] paddle.reshape(Tensor([8, 5, 8148934, 7],"bool"), list[-1,1,], )
2025-03-19 04:47:47.979367 test begin: paddle.reshape(Tensor([8, 5, 8148934, 7],"bool"), list[-1,], )

[Pass] paddle.reshape(Tensor([8, 5, 8148934, 7],"bool"), list[-1,], )
2025-03-19 04:48:21.374071 test begin: paddle.reshape(Tensor([8, 5, 8148934, 7],"float32"), list[-1,], )

[Pass] paddle.reshape(Tensor([8, 5, 8148934, 7],"float32"), list[-1,], )
2025-03-19 04:52:22.754852 test begin: paddle.reshape(Tensor([8, 5, 8148934, 7],"float32"), list[8,-1,], )

[Pass] paddle.reshape(Tensor([8, 5, 8148934, 7],"float32"), list[8,-1,], )
2025-03-19 04:55:44.408322 test begin: paddle.reshape(Tensor([8, 512, 1, 557057],"float32"), shape=list[-1,512,], )

[Pass] paddle.reshape(Tensor([8, 512, 1, 557057],"float32"), shape=list[-1,512,], )
2025-03-19 04:58:31.427396 test begin: paddle.reshape(Tensor([8, 512, 557057, 1],"float32"), shape=list[-1,512,], )

[Pass] paddle.reshape(Tensor([8, 512, 557057, 1],"float32"), shape=list[-1,512,], )
2025-03-19 05:01:43.068503 test begin: paddle.reshape(Tensor([8, 5368710, 100],"float16"), list[-1,400,], )

[Pass] paddle.reshape(Tensor([8, 5368710, 100],"float16"), list[-1,400,], )
2025-03-19 05:17:51.858333 test begin: paddle.reshape(Tensor([8, 56, 26527, 192],"float32"), list[8,56,56,192,], )

[torch error] paddle.reshape(Tensor([8, 56, 26527, 192],"float32"), list[8,56,56,192,], ) 
 shape '[8, 56, 56, 192]' is invalid for input of size 2281746432
2025-03-19 05:17:55.931171 test begin: paddle.reshape(Tensor([8, 56, 56, 90948],"float32"), list[8,56,56,192,], )

[torch error] paddle.reshape(Tensor([8, 56, 56, 90948],"float32"), list[8,56,56,192,], ) 
 shape '[8, 56, 56, 192]' is invalid for input of size 2281703424
2025-03-19 05:17:57.543970 test begin: paddle.reshape(Tensor([8, 5820667, 1, 7, 7],"float32"), list[8,5,7,7,], )

[torch error] paddle.reshape(Tensor([8, 5820667, 1, 7, 7],"float32"), list[8,5,7,7,], ) 
 shape '[8, 5, 7, 7]' is invalid for input of size 2281701464
2025-03-19 05:17:58.909876 test begin: paddle.reshape(Tensor([8, 5820667, 7, 7],"bool"), list[-1,1,], )

[Pass] paddle.reshape(Tensor([8, 5820667, 7, 7],"bool"), list[-1,1,], )
2025-03-19 05:18:32.876246 test begin: paddle.reshape(Tensor([8, 5820667, 7, 7],"bool"), list[-1,], )

[Pass] paddle.reshape(Tensor([8, 5820667, 7, 7],"bool"), list[-1,], )
2025-03-19 05:19:05.632132 test begin: paddle.reshape(Tensor([8, 5820667, 7, 7],"float32"), list[-1,], )

[Pass] paddle.reshape(Tensor([8, 5820667, 7, 7],"float32"), list[-1,], )
2025-03-19 05:22:07.570346 test begin: paddle.reshape(Tensor([8, 5820667, 7, 7],"float32"), list[8,-1,], )

[Pass] paddle.reshape(Tensor([8, 5820667, 7, 7],"float32"), list[8,-1,], )
2025-03-19 05:25:29.503891 test begin: paddle.reshape(Tensor([8, 5820667, 7, 7],"float32"), list[8,1024,-1,], )

[torch error] paddle.reshape(Tensor([8, 5820667, 7, 7],"float32"), list[8,1024,-1,], ) 
 shape '[8, 1024, -1]' is invalid for input of size 2281701464
2025-03-19 05:25:33.296554 test begin: paddle.reshape(Tensor([8, 5820667, 7, 7],"float32"), list[8,5,29,7,7,], )

[torch error] paddle.reshape(Tensor([8, 5820667, 7, 7],"float32"), list[8,5,29,7,7,], ) 
 shape '[8, 5, 29, 7, 7]' is invalid for input of size 2281701464
2025-03-19 05:25:34.635308 test begin: paddle.reshape(Tensor([8, 640, 445645],"float32"), shape=list[-1,], )

[Pass] paddle.reshape(Tensor([8, 640, 445645],"float32"), shape=list[-1,], )
2025-03-19 05:29:07.725097 test begin: paddle.reshape(Tensor([8, 679078, 140, 3],"float32"), shape=tuple(8,-1,1,), )

[Pass] paddle.reshape(Tensor([8, 679078, 140, 3],"float32"), shape=tuple(8,-1,1,), )
2025-03-19 05:33:24.589841 test begin: paddle.reshape(Tensor([8, 699051, 136, 3],"float32"), shape=tuple(8,-1,1,), )

[Pass] paddle.reshape(Tensor([8, 699051, 136, 3],"float32"), shape=tuple(8,-1,1,), )
2025-03-19 05:36:40.399762 test begin: paddle.reshape(Tensor([8, 713032, 1, 1, 400],"float32"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([8, 713032, 1, 1, 400],"float32"), shape=tuple(8,-1,), )
2025-03-19 05:40:08.281974 test begin: paddle.reshape(Tensor([8, 848848, 336],"float32"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([8, 848848, 336],"float32"), shape=tuple(8,-1,), )
2025-03-19 05:42:48.247821 test begin: paddle.reshape(Tensor([8, 8912897, 32],"float32"), shape=list[8,14,4,8,], )

[torch error] paddle.reshape(Tensor([8, 8912897, 32],"float32"), shape=list[8,14,4,8,], ) 
 shape '[8, 14, 4, 8]' is invalid for input of size 2281701632
2025-03-19 05:42:51.684527 test begin: paddle.reshape(Tensor([8, 938200, 304],"float32"), shape=tuple(8,-1,), )

[Pass] paddle.reshape(Tensor([8, 938200, 304],"float32"), shape=tuple(8,-1,), )
2025-03-19 05:46:50.291565 test begin: paddle.reshape(Tensor([8, 960, 297097],"float32"), shape=list[-1,], )

[Pass] paddle.reshape(Tensor([8, 960, 297097],"float32"), shape=list[-1,], )
2025-03-19 05:50:25.744185 test begin: paddle.reshape(Tensor([80, 104858, 272],"float32"), shape=tuple(80,-1,), )

[Pass] paddle.reshape(Tensor([80, 104858, 272],"float32"), shape=tuple(80,-1,), )
2025-03-19 05:53:05.901366 test begin: paddle.reshape(Tensor([80, 172075, 312],"float16"), shape=tuple(80,-1,), )

[Pass] paddle.reshape(Tensor([80, 172075, 312],"float16"), shape=tuple(80,-1,), )
2025-03-19 06:09:23.828312 test begin: paddle.reshape(Tensor([80, 176603, 304],"float16"), shape=tuple(80,-1,), )

[Pass] paddle.reshape(Tensor([80, 176603, 304],"float16"), shape=tuple(80,-1,), )
2025-03-19 06:25:35.380552 test begin: paddle.reshape(Tensor([80, 197380, 272],"float16"), shape=tuple(80,-1,), )

[Pass] paddle.reshape(Tensor([80, 197380, 272],"float16"), shape=tuple(80,-1,), )
2025-03-19 06:41:54.199033 test begin: paddle.reshape(Tensor([80, 200, 142607],"float32"), shape=tuple(80,-1,), )

[Pass] paddle.reshape(Tensor([80, 200, 142607],"float32"), shape=tuple(80,-1,), )
2025-03-19 06:44:53.767678 test begin: paddle.reshape(Tensor([80, 200, 268436],"float16"), shape=tuple(80,-1,), )

[Pass] paddle.reshape(Tensor([80, 200, 268436],"float16"), shape=tuple(80,-1,), )
2025-03-19 07:01:19.115002 test begin: paddle.reshape(Tensor([80, 28521268],"float32"), list[80,80,5,], )

[torch error] paddle.reshape(Tensor([80, 28521268],"float32"), list[80,80,5,], ) 
 shape '[80, 80, 5]' is invalid for input of size 2281701440
2025-03-19 07:01:23.264461 test begin: paddle.reshape(Tensor([80, 3565159, 2, 4],"float32"), list[-1,4,], )

[Pass] paddle.reshape(Tensor([80, 3565159, 2, 4],"float32"), list[-1,4,], )
2025-03-19 07:04:22.257857 test begin: paddle.reshape(Tensor([80, 5704254, 5],"float32"), tuple(80,-1,), )

[Pass] paddle.reshape(Tensor([80, 5704254, 5],"float32"), tuple(80,-1,), )
2025-03-19 07:08:11.135370 test begin: paddle.reshape(Tensor([80, 80, 2, 178258],"float32"), list[-1,4,], )

[Pass] paddle.reshape(Tensor([80, 80, 2, 178258],"float32"), list[-1,4,], )
2025-03-19 07:10:54.224693 test begin: paddle.reshape(Tensor([80, 80, 356516],"float32"), tuple(80,-1,), )

[Pass] paddle.reshape(Tensor([80, 80, 356516],"float32"), tuple(80,-1,), )
2025-03-19 07:13:57.915233 test begin: paddle.reshape(Tensor([80, 80, 89129, 4],"float32"), list[-1,4,], )

[Pass] paddle.reshape(Tensor([80, 80, 89129, 4],"float32"), list[-1,4,], )
2025-03-19 07:16:57.803906 test begin: paddle.reshape(Tensor([80, 93820, 304],"float32"), shape=tuple(80,-1,), )

[Pass] paddle.reshape(Tensor([80, 93820, 304],"float32"), shape=tuple(80,-1,), )
2025-03-19 07:20:04.928686 test begin: paddle.reshape(Tensor([80239, 28437],"bool"), list[-1,20,1,], )

[torch error] paddle.reshape(Tensor([80239, 28437],"bool"), list[-1,20,1,], ) 
 shape '[-1, 20, 1]' is invalid for input of size 2281756443
2025-03-19 07:20:06.051039 test begin: paddle.reshape(Tensor([8024, 6, 89216],"float16"), shape=tuple(-1,328,272,), )

[Pass] paddle.reshape(Tensor([8024, 6, 89216],"float16"), shape=tuple(-1,328,272,), )
2025-03-19 07:37:01.327874 test begin: paddle.reshape(Tensor([80843, 112, 84, 3],"float32"), shape=tuple(2,-1,1,), )

[Pass] paddle.reshape(Tensor([80843, 112, 84, 3],"float32"), shape=tuple(2,-1,1,), )
2025-03-19 07:40:03.141717 test begin: paddle.reshape(Tensor([812, 152, 272, 128],"float16"), shape=list[20,-1,128,], )

[torch error] paddle.reshape(Tensor([812, 152, 272, 128],"float16"), shape=list[20,-1,128,], ) 
 shape '[20, -1, 128]' is invalid for input of size 4297129984
2025-03-19 07:40:06.943087 test begin: paddle.reshape(Tensor([812, 76, 136, 512],"float16"), list[-1,512,], )

[Pass] paddle.reshape(Tensor([812, 76, 136, 512],"float16"), list[-1,512,], )
2025-03-19 07:56:27.064352 test begin: paddle.reshape(Tensor([8162, 4, 208, 336],"float32"), shape=list[-1,208,336,], )

[Pass] paddle.reshape(Tensor([8162, 4, 208, 336],"float32"), shape=list[-1,208,336,], )
2025-03-19 08:00:30.452271 test begin: paddle.reshape(Tensor([8193, 512, 1024],"float16"), list[-1,1024,], )

[Pass] paddle.reshape(Tensor([8193, 512, 1024],"float16"), list[-1,1024,], )
2025-03-19 08:17:27.466219 test begin: paddle.reshape(Tensor([82971, 50, 50, 11],"float32"), tuple(-1,11,), )

[Pass] paddle.reshape(Tensor([82971, 50, 50, 11],"float32"), tuple(-1,11,), )
2025-03-19 08:20:15.634022 test begin: paddle.reshape(Tensor([831070, 4, 19, 34, 2],"float16"), list[-1,2,], )

[Pass] paddle.reshape(Tensor([831070, 4, 19, 34, 2],"float16"), list[-1,2,], )
2025-03-19 08:37:21.263043 test begin: paddle.reshape(Tensor([8388609, 256, 1, 2],"float16"), shape=tuple(512,-1,), )

[Pass] paddle.reshape(Tensor([8388609, 256, 1, 2],"float16"), shape=tuple(512,-1,), )
2025-03-19 08:53:58.627492 test begin: paddle.reshape(Tensor([84, 168193, 304],"float16"), shape=tuple(84,-1,), )

[Pass] paddle.reshape(Tensor([84, 168193, 304],"float16"), shape=tuple(84,-1,), )
2025-03-19 09:10:42.742933 test begin: paddle.reshape(Tensor([84, 177537, 288],"float16"), shape=tuple(84,-1,), )

[Pass] paddle.reshape(Tensor([84, 177537, 288],"float16"), shape=tuple(84,-1,), )
2025-03-19 09:27:34.270240 test begin: paddle.reshape(Tensor([84, 187981, 272],"float16"), shape=tuple(84,-1,), )

[Pass] paddle.reshape(Tensor([84, 187981, 272],"float16"), shape=tuple(84,-1,), )
2025-03-19 09:44:13.609908 test begin: paddle.reshape(Tensor([84, 200, 135816],"float32"), shape=tuple(84,-1,), )

[Pass] paddle.reshape(Tensor([84, 200, 135816],"float32"), shape=tuple(84,-1,), )
2025-03-19 09:46:54.243485 test begin: paddle.reshape(Tensor([84, 200, 255653],"float16"), shape=tuple(84,-1,), )

[Pass] paddle.reshape(Tensor([84, 200, 255653],"float16"), shape=tuple(84,-1,), )
2025-03-19 10:03:24.151735 test begin: paddle.reshape(Tensor([84, 94317, 288],"float32"), shape=tuple(84,-1,), )

[Pass] paddle.reshape(Tensor([84, 94317, 288],"float32"), shape=tuple(84,-1,), )
2025-03-19 10:07:22.381149 test begin: paddle.reshape(Tensor([84, 99865, 272],"float32"), shape=tuple(84,-1,), )

[Pass] paddle.reshape(Tensor([84, 99865, 272],"float32"), shape=tuple(84,-1,), )
2025-03-19 10:10:07.241004 test begin: paddle.reshape(Tensor([8410, 6, 85120],"float16"), shape=tuple(-1,280,304,), )

[Pass] paddle.reshape(Tensor([8410, 6, 85120],"float16"), shape=tuple(-1,280,304,), )
2025-03-19 10:27:07.898150 test begin: paddle.reshape(Tensor([84507459, 27],"float32"), list[2,3,3,3,], )

[torch error] paddle.reshape(Tensor([84507459, 27],"float32"), list[2,3,3,3,], ) 
 shape '[2, 3, 3, 3]' is invalid for input of size 2281701393
2025-03-19 10:27:11.772219 test begin: paddle.reshape(Tensor([84507459, 27],"float32"), list[5,3,3,3,], )

[torch error] paddle.reshape(Tensor([84507459, 27],"float32"), list[5,3,3,3,], ) 
 shape '[5, 3, 3, 3]' is invalid for input of size 2281701393
2025-03-19 10:27:13.022221 test begin: paddle.reshape(Tensor([84507459, 3, 3, 3],"float32"), tuple(-1,3,), )

[Pass] paddle.reshape(Tensor([84507459, 3, 3, 3],"float32"), tuple(-1,3,), )
2025-03-19 10:30:18.789320 test begin: paddle.reshape(Tensor([84507459, 3, 3, 3],"float32"), tuple(2,-1,), )

[torch error] paddle.reshape(Tensor([84507459, 3, 3, 3],"float32"), tuple(2,-1,), ) 
 shape '[2, -1]' is invalid for input of size 2281701393
2025-03-19 10:30:22.897633 test begin: paddle.reshape(Tensor([84507459, 3, 3, 3],"float32"), tuple(5,-1,), )

[torch error] paddle.reshape(Tensor([84507459, 3, 3, 3],"float32"), tuple(5,-1,), ) 
 shape '[5, -1]' is invalid for input of size 2281701393
2025-03-19 10:30:24.370227 test begin: paddle.reshape(Tensor([858, 30, 264, 336],"float32"), shape=list[-1,264,336,], )

[Pass] paddle.reshape(Tensor([858, 30, 264, 336],"float32"), shape=list[-1,264,336,], )
2025-03-19 10:33:40.633170 test begin: paddle.reshape(Tensor([858, 35, 264, 288],"float32"), shape=list[-1,264,288,], )

[Pass] paddle.reshape(Tensor([858, 35, 264, 288],"float32"), shape=list[-1,264,288,], )
2025-03-19 10:36:46.843503 test begin: paddle.reshape(Tensor([858, 39, 208, 328],"float32"), shape=list[-1,208,328,], )

[Pass] paddle.reshape(Tensor([858, 39, 208, 328],"float32"), shape=list[-1,208,328,], )
2025-03-19 10:40:16.674315 test begin: paddle.reshape(Tensor([858993460, 5],"float16"), list[3,5,], )

[torch error] paddle.reshape(Tensor([858993460, 5],"float16"), list[3,5,], ) 
 shape '[3, 5]' is invalid for input of size 4294967300
2025-03-19 10:40:20.427018 test begin: paddle.reshape(Tensor([8696, 4, 200, 328],"float32"), shape=list[-1,200,328,], )

[Pass] paddle.reshape(Tensor([8696, 4, 200, 328],"float32"), shape=list[-1,200,328,], )
2025-03-19 10:43:33.819171 test begin: paddle.reshape(Tensor([8696, 4, 65600],"float32"), shape=tuple(-1,200,328,), )

[Pass] paddle.reshape(Tensor([8696, 4, 65600],"float32"), shape=tuple(-1,200,328,), )
2025-03-19 10:47:19.519649 test begin: paddle.reshape(Tensor([8705, 1024, 256],"float32"), list[1024,256,1,1,], )

[torch error] paddle.reshape(Tensor([8705, 1024, 256],"float32"), list[1024,256,1,1,], ) 
 shape '[1024, 256, 1, 1]' is invalid for input of size 2281963520
2025-03-19 10:47:23.624270 test begin: paddle.reshape(Tensor([8705, 256, 1024],"float32"), list[256,1024,1,1,], )

[torch error] paddle.reshape(Tensor([8705, 256, 1024],"float32"), list[256,1024,1,1,], ) 
 shape '[256, 1024, 1, 1]' is invalid for input of size 2281963520
2025-03-19 10:47:25.256846 test begin: paddle.reshape(Tensor([871, 25, 104832],"float32"), shape=tuple(-1,336,312,), )

[Pass] paddle.reshape(Tensor([871, 25, 104832],"float32"), shape=tuple(-1,336,312,), )
2025-03-19 10:50:48.904158 test begin: paddle.reshape(Tensor([871, 25, 336, 312],"float32"), shape=list[-1,336,312,], )

[Pass] paddle.reshape(Tensor([871, 25, 336, 312],"float32"), shape=list[-1,336,312,], )
2025-03-19 10:54:36.513653 test begin: paddle.reshape(Tensor([88, 169467, 288],"float16"), shape=tuple(88,-1,), )

[Pass] paddle.reshape(Tensor([88, 169467, 288],"float16"), shape=tuple(88,-1,), )
2025-03-19 11:11:05.655289 test begin: paddle.reshape(Tensor([88, 174309, 280],"float16"), shape=tuple(88,-1,), )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 86, in func_timeout
    thread.join(timeout)
  File "/usr/lib/python3.9/threading.py", line 1064, in join
    self._wait_for_tstate_lock(timeout=max(timeout, 0))
  File "/usr/lib/python3.9/threading.py", line 1080, in _wait_for_tstate_lock
    if lock.acquire(block, timeout):
KeyboardInterrupt
2025-03-19 12:15:41.499170 test begin: paddle.reshape(Tensor([88, 179436, 272],"float16"), shape=tuple(88,-1,), )

W0319 12:17:22.842073 73701 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0319 12:17:22.844131 73701 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.reshape(Tensor([88, 179436, 272],"float16"), shape=tuple(88,-1,), )
2025-03-19 12:32:53.595416 test begin: paddle.reshape(Tensor([88, 200, 129643],"float32"), shape=tuple(88,-1,), )

[Pass] paddle.reshape(Tensor([88, 200, 129643],"float32"), shape=tuple(88,-1,), )
2025-03-19 12:37:26.116903 test begin: paddle.reshape(Tensor([88, 200, 244033],"float16"), shape=tuple(88,-1,), )

[Pass] paddle.reshape(Tensor([88, 200, 244033],"float16"), shape=tuple(88,-1,), )
2025-03-19 12:53:52.560977 test begin: paddle.reshape(Tensor([88, 92602, 280],"float32"), shape=tuple(88,-1,), )

[Pass] paddle.reshape(Tensor([88, 92602, 280],"float32"), shape=tuple(88,-1,), )
2025-03-19 12:57:21.366568 test begin: paddle.reshape(Tensor([88, 95326, 272],"float32"), shape=tuple(88,-1,), )

[Pass] paddle.reshape(Tensor([88, 95326, 272],"float32"), shape=tuple(88,-1,), )
2025-03-19 13:00:36.598306 test begin: paddle.reshape(Tensor([880287, 36, 36, 2],"float32"), shape=tuple(-1,2,), )

[Pass] paddle.reshape(Tensor([880287, 36, 36, 2],"float32"), shape=tuple(-1,2,), )
2025-03-19 13:03:34.657721 test begin: paddle.reshape(Tensor([889, 32, 264, 304],"float32"), shape=list[-1,264,304,], )

[Pass] paddle.reshape(Tensor([889, 32, 264, 304],"float32"), shape=list[-1,264,304,], )
2025-03-19 13:06:34.802658 test begin: paddle.reshape(Tensor([891, 34, 248, 304],"float32"), shape=list[-1,248,304,], )

[Pass] paddle.reshape(Tensor([891, 34, 248, 304],"float32"), shape=list[-1,248,304,], )
2025-03-19 13:09:50.065173 test begin: paddle.reshape(Tensor([8912897, 256, 1, 1],"float32"), shape=list[-1,256,], )

[Pass] paddle.reshape(Tensor([8912897, 256, 1, 1],"float32"), shape=list[-1,256,], )
2025-03-19 13:13:39.050638 test begin: paddle.reshape(Tensor([8912897, 256],"float32"), list[1,256,1,1,], )

[torch error] paddle.reshape(Tensor([8912897, 256],"float32"), list[1,256,1,1,], ) 
 shape '[1, 256, 1, 1]' is invalid for input of size 2281701632
2025-03-19 13:13:42.876494 test begin: paddle.reshape(Tensor([8912897, 256],"float32"), list[5,4,4,4,4,], )

[torch error] paddle.reshape(Tensor([8912897, 256],"float32"), list[5,4,4,4,4,], ) 
 shape '[5, 4, 4, 4, 4]' is invalid for input of size 2281701632
2025-03-19 13:13:44.881009 test begin: paddle.reshape(Tensor([8912897, 256],"float32"), list[8,256,1,1,], )

[torch error] paddle.reshape(Tensor([8912897, 256],"float32"), list[8,256,1,1,], ) 
 shape '[8, 256, 1, 1]' is invalid for input of size 2281701632
2025-03-19 13:13:46.534835 test begin: paddle.reshape(Tensor([8912897, 256],"float32"), shape=list[1,-1,256,], )

[Pass] paddle.reshape(Tensor([8912897, 256],"float32"), shape=list[1,-1,256,], )
2025-03-19 13:16:57.146095 test begin: paddle.reshape(Tensor([8912897, 256],"float32"), shape=list[4,-1,256,], )

[torch error] paddle.reshape(Tensor([8912897, 256],"float32"), shape=list[4,-1,256,], ) 
 shape '[4, -1, 256]' is invalid for input of size 2281701632
2025-03-19 13:17:00.860115 test begin: paddle.reshape(Tensor([8912897, 256],"int64"), shape=list[-1,], )

[Pass] paddle.reshape(Tensor([8912897, 256],"int64"), shape=list[-1,], )
2025-03-19 13:21:27.484279 test begin: paddle.reshape(Tensor([8912897, 4, 4, 4, 4],"float32"), tuple(5,-1,), )

[torch error] paddle.reshape(Tensor([8912897, 4, 4, 4, 4],"float32"), tuple(5,-1,), ) 
 shape '[5, -1]' is invalid for input of size 2281701632
2025-03-19 13:21:31.262907 test begin: paddle.reshape(Tensor([8912897, 8, 16, 2],"float32"), list[-1,8,32,], )

[Pass] paddle.reshape(Tensor([8912897, 8, 16, 2],"float32"), list[-1,8,32,], )
2025-03-19 13:24:34.401579 test begin: paddle.reshape(Tensor([8912897, 8, 32],"float32"), list[-1,256,], )

[Pass] paddle.reshape(Tensor([8912897, 8, 32],"float32"), list[-1,256,], )
2025-03-19 13:27:32.904889 test begin: paddle.reshape(Tensor([8912897, 8, 32],"float32"), shape=list[-1,32,], )

[Pass] paddle.reshape(Tensor([8912897, 8, 32],"float32"), shape=list[-1,32,], )
2025-03-19 13:30:11.642467 test begin: paddle.reshape(Tensor([8920, 6, 80256],"float16"), shape=tuple(-1,304,264,), )

[Pass] paddle.reshape(Tensor([8920, 6, 80256],"float16"), shape=tuple(-1,304,264,), )
2025-03-19 13:46:44.329976 test begin: paddle.reshape(Tensor([899, 29, 288, 304],"float32"), shape=list[-1,288,304,], )

[Pass] paddle.reshape(Tensor([899, 29, 288, 304],"float32"), shape=list[-1,288,304,], )
2025-03-19 13:49:37.297607 test begin: paddle.reshape(Tensor([9, 1, 253522376],"float32"), shape=tuple(-1,), )

[Pass] paddle.reshape(Tensor([9, 1, 253522376],"float32"), shape=tuple(-1,), )
2025-03-19 13:53:08.809284 test begin: paddle.reshape(Tensor([9, 1267612, 200],"float32"), shape=tuple(9,-1,), )

[Pass] paddle.reshape(Tensor([9, 1267612, 200],"float32"), shape=tuple(9,-1,), )
2025-03-19 13:56:33.956352 test begin: paddle.reshape(Tensor([9, 200, 1267612],"float32"), shape=tuple(9,-1,), )

[Pass] paddle.reshape(Tensor([9, 200, 1267612],"float32"), shape=tuple(9,-1,), )
2025-03-19 14:00:05.354482 test begin: paddle.reshape(Tensor([9, 253522376, 1],"float32"), shape=tuple(-1,), )

[Pass] paddle.reshape(Tensor([9, 253522376, 1],"float32"), shape=tuple(-1,), )
2025-03-19 14:04:06.943975 test begin: paddle.reshape(Tensor([9, 253522376],"float32"), list[18,4,], )

[torch error] paddle.reshape(Tensor([9, 253522376],"float32"), list[18,4,], ) 
 shape '[18, 4]' is invalid for input of size 2281701384
2025-03-19 14:04:10.680868 test begin: paddle.reshape(Tensor([9, 253522376],"float32"), shape=list[1,-1,256,], )

[torch error] paddle.reshape(Tensor([9, 253522376],"float32"), shape=list[1,-1,256,], ) 
 shape '[1, -1, 256]' is invalid for input of size 2281701384
2025-03-19 14:04:11.963768 test begin: paddle.reshape(Tensor([9, 253522376],"int64"), list[18,4,], )

[torch error] paddle.reshape(Tensor([9, 253522376],"int64"), list[18,4,], ) 
 shape '[18, 4]' is invalid for input of size 2281701384
2025-03-19 14:04:20.487018 test begin: paddle.reshape(Tensor([9, 253522376],"int64"), list[9,10,], name="Categorical_sample", )

[torch error] paddle.reshape(Tensor([9, 253522376],"int64"), list[9,10,], name="Categorical_sample", ) 
 shape '[9, 10]' is invalid for input of size 2281701384
2025-03-19 14:04:23.686380 test begin: paddle.reshape(Tensor([9, 304, 833956],"float32"), shape=tuple(9,-1,), )

[Pass] paddle.reshape(Tensor([9, 304, 833956],"float32"), shape=tuple(9,-1,), )
2025-03-19 14:08:23.502993 test begin: paddle.reshape(Tensor([9, 812572, 312],"float32"), shape=tuple(9,-1,), )

[Pass] paddle.reshape(Tensor([9, 812572, 312],"float32"), shape=tuple(9,-1,), )
2025-03-19 14:11:59.799531 test begin: paddle.reshape(Tensor([9, 833956, 304],"float32"), shape=tuple(9,-1,), )

[Pass] paddle.reshape(Tensor([9, 833956, 304],"float32"), shape=tuple(9,-1,), )
2025-03-19 14:16:09.554112 test begin: paddle.reshape(Tensor([9, 932068, 272],"float32"), shape=tuple(9,-1,), )

[Pass] paddle.reshape(Tensor([9, 932068, 272],"float32"), shape=tuple(9,-1,), )
2025-03-19 14:19:53.084968 test begin: paddle.reshape(Tensor([904, 26, 328, 296],"float32"), shape=list[-1,328,296,], )

[Pass] paddle.reshape(Tensor([904, 26, 328, 296],"float32"), shape=list[-1,328,296,], )
2025-03-19 14:23:51.789520 test begin: paddle.reshape(Tensor([90948, 16, 2, 28, 28],"float32"), shape=list[2,32,28,28,], )

[torch error] paddle.reshape(Tensor([90948, 16, 2, 28, 28],"float32"), shape=list[2,32,28,28,], ) 
 shape '[2, 32, 28, 28]' is invalid for input of size 2281703424
2025-03-19 14:23:55.660728 test begin: paddle.reshape(Tensor([90948, 32, 28, 28],"float32"), shape=list[2,2,16,28,28,], )

[torch error] paddle.reshape(Tensor([90948, 32, 28, 28],"float32"), shape=list[2,2,16,28,28,], ) 
 shape '[2, 2, 16, 28, 28]' is invalid for input of size 2281703424
2025-03-19 14:23:56.616784 test begin: paddle.reshape(Tensor([910, 33, 264, 288],"float32"), shape=list[-1,264,288,], )

[Pass] paddle.reshape(Tensor([910, 33, 264, 288],"float32"), shape=list[-1,264,288,], )
2025-03-19 14:26:54.394074 test begin: paddle.reshape(Tensor([91268056, 25],"float32"), list[2,5,5,], )

[torch error] paddle.reshape(Tensor([91268056, 25],"float32"), list[2,5,5,], ) 
 shape '[2, 5, 5]' is invalid for input of size 2281701400
2025-03-19 14:26:58.105973 test begin: paddle.reshape(Tensor([92, 157718, 296],"float16"), shape=tuple(92,-1,), )

[Pass] paddle.reshape(Tensor([92, 157718, 296],"float16"), shape=tuple(92,-1,), )
2025-03-19 14:42:48.808638 test begin: paddle.reshape(Tensor([92, 162099, 288],"float16"), shape=tuple(92,-1,), )

[Pass] paddle.reshape(Tensor([92, 162099, 288],"float16"), shape=tuple(92,-1,), )
2025-03-19 14:58:55.367713 test begin: paddle.reshape(Tensor([92, 171634, 272],"float16"), shape=tuple(92,-1,), )

[Pass] paddle.reshape(Tensor([92, 171634, 272],"float16"), shape=tuple(92,-1,), )
2025-03-19 15:14:46.153960 test begin: paddle.reshape(Tensor([92, 200, 124006],"float32"), shape=tuple(92,-1,), )

[Pass] paddle.reshape(Tensor([92, 200, 124006],"float32"), shape=tuple(92,-1,), )
2025-03-19 15:17:39.980348 test begin: paddle.reshape(Tensor([92, 200, 233423],"float16"), shape=tuple(92,-1,), )

[Pass] paddle.reshape(Tensor([92, 200, 233423],"float16"), shape=tuple(92,-1,), )
2025-03-19 15:34:25.592790 test begin: paddle.reshape(Tensor([92, 86115, 288],"float32"), shape=tuple(92,-1,), )

[Pass] paddle.reshape(Tensor([92, 86115, 288],"float32"), shape=tuple(92,-1,), )
2025-03-19 15:37:56.687739 test begin: paddle.reshape(Tensor([921, 27, 280, 328],"float32"), shape=list[-1,280,328,], )

[Pass] paddle.reshape(Tensor([921, 27, 280, 328],"float32"), shape=list[-1,280,328,], )
2025-03-19 15:41:24.165980 test begin: paddle.reshape(Tensor([92843, 96, 16, 16],"float32"), list[24,96,-1,], )

[torch error] paddle.reshape(Tensor([92843, 96, 16, 16],"float32"), list[24,96,-1,], ) 
 shape '[24, 96, -1]' is invalid for input of size 2281709568
2025-03-19 15:41:27.906721 test begin: paddle.reshape(Tensor([9313067, 5, 1, 7, 7],"float32"), list[8,5,7,7,], )

[torch error] paddle.reshape(Tensor([9313067, 5, 1, 7, 7],"float32"), list[8,5,7,7,], ) 
 shape '[8, 5, 7, 7]' is invalid for input of size 2281701415
2025-03-19 15:41:29.224180 test begin: paddle.reshape(Tensor([9313067, 5, 7, 7],"float32"), list[-1,], )

[Pass] paddle.reshape(Tensor([9313067, 5, 7, 7],"float32"), list[-1,], )
2025-03-19 15:44:29.724230 test begin: paddle.reshape(Tensor([9313067, 5, 7, 7],"float32"), list[8,-1,], )

[torch error] paddle.reshape(Tensor([9313067, 5, 7, 7],"float32"), list[8,-1,], ) 
 shape '[8, -1]' is invalid for input of size 2281701415
2025-03-19 15:44:33.682047 test begin: paddle.reshape(Tensor([93207, 24, 24, 80],"float16"), shape=tuple(-1,80,), )

[Pass] paddle.reshape(Tensor([93207, 24, 24, 80],"float16"), shape=tuple(-1,80,), )
2025-03-19 16:00:33.607630 test begin: paddle.reshape(Tensor([9415, 6, 76032],"float16"), shape=tuple(-1,264,288,), )

[Pass] paddle.reshape(Tensor([9415, 6, 76032],"float16"), shape=tuple(-1,264,288,), )
2025-03-19 16:16:30.051796 test begin: paddle.reshape(Tensor([947, 23, 312, 336],"float32"), shape=list[-1,312,336,], )

[Pass] paddle.reshape(Tensor([947, 23, 312, 336],"float32"), shape=list[-1,312,336,], )
2025-03-19 16:19:11.922655 test begin: paddle.reshape(Tensor([95070891, 4, 3, 2],"float32"), list[13,4,2,3,], )

[torch error] paddle.reshape(Tensor([95070891, 4, 3, 2],"float32"), list[13,4,2,3,], ) 
 shape '[13, 4, 2, 3]' is invalid for input of size 2281701384
2025-03-19 16:19:15.208755 test begin: paddle.reshape(Tensor([95070891, 4, 6],"float32"), shape=list[8,6,], )

[torch error] paddle.reshape(Tensor([95070891, 4, 6],"float32"), shape=list[8,6,], ) 
 shape '[8, 6]' is invalid for input of size 2281701384
2025-03-19 16:19:16.752556 test begin: paddle.reshape(Tensor([950709, 12, 2, 10, 10],"float32"), shape=list[1,24,10,10,], )

[torch error] paddle.reshape(Tensor([950709, 12, 2, 10, 10],"float32"), shape=list[1,24,10,10,], ) 
 shape '[1, 24, 10, 10]' is invalid for input of size 2281701600
2025-03-19 16:19:18.347914 test begin: paddle.reshape(Tensor([950709, 24, 10, 10],"float32"), shape=list[1,2,12,10,10,], )

[torch error] paddle.reshape(Tensor([950709, 24, 10, 10],"float32"), shape=list[1,2,12,10,10,], ) 
 shape '[1, 2, 12, 10, 10]' is invalid for input of size 2281701600
2025-03-19 16:19:19.323199 test begin: paddle.reshape(Tensor([9507090, 4, 4, 15],"float32"), list[13,4,15,4,], )

[torch error] paddle.reshape(Tensor([9507090, 4, 4, 15],"float32"), list[13,4,15,4,], ) 
 shape '[13, 4, 15, 4]' is invalid for input of size 2281701600
2025-03-19 16:19:20.339277 test begin: paddle.reshape(Tensor([956, 35, 208, 328],"float32"), shape=list[-1,208,328,], )

[Pass] paddle.reshape(Tensor([956, 35, 208, 328],"float32"), shape=list[-1,208,328,], )
2025-03-19 16:21:54.668728 test begin: paddle.reshape(Tensor([9586981, 14, 32],"float16"), shape=list[7,14,4,8,], )

[torch error] paddle.reshape(Tensor([9586981, 14, 32],"float16"), shape=list[7,14,4,8,], ) 
 shape '[7, 14, 4, 8]' is invalid for input of size 4294967488
2025-03-19 16:21:58.893662 test begin: paddle.reshape(Tensor([96, 147169, 304],"float16"), shape=tuple(96,-1,), )

[Pass] paddle.reshape(Tensor([96, 147169, 304],"float16"), shape=tuple(96,-1,), )
2025-03-19 16:38:15.677628 test begin: paddle.reshape(Tensor([96, 151147, 296],"float16"), shape=tuple(96,-1,), )

[Pass] paddle.reshape(Tensor([96, 151147, 296],"float16"), shape=tuple(96,-1,), )
2025-03-19 16:54:17.286058 test begin: paddle.reshape(Tensor([96, 164483, 272],"float16"), shape=tuple(96,-1,), )

[Pass] paddle.reshape(Tensor([96, 164483, 272],"float16"), shape=tuple(96,-1,), )
2025-03-19 17:10:23.424427 test begin: paddle.reshape(Tensor([96, 200, 118839],"float32"), shape=tuple(96,-1,), )

[Pass] paddle.reshape(Tensor([96, 200, 118839],"float32"), shape=tuple(96,-1,), )
2025-03-19 17:13:01.470499 test begin: paddle.reshape(Tensor([96, 200, 223697],"float16"), shape=tuple(96,-1,), )

[Pass] paddle.reshape(Tensor([96, 200, 223697],"float16"), shape=tuple(96,-1,), )
2025-03-19 17:29:06.844633 test begin: paddle.reshape(Tensor([96, 2048, 1, 11606],"float32"), list[-1,3,2048,], )

[Pass] paddle.reshape(Tensor([96, 2048, 1, 11606],"float32"), list[-1,3,2048,], )
2025-03-19 17:32:03.430991 test begin: paddle.reshape(Tensor([96, 2048, 1, 21846],"float16"), list[-1,3,2048,], )

[Pass] paddle.reshape(Tensor([96, 2048, 1, 21846],"float16"), list[-1,3,2048,], )
2025-03-19 17:49:13.365063 test begin: paddle.reshape(Tensor([96, 2048, 11606, 1],"float32"), list[-1,3,2048,], )

[Pass] paddle.reshape(Tensor([96, 2048, 11606, 1],"float32"), list[-1,3,2048,], )
2025-03-19 17:52:19.764358 test begin: paddle.reshape(Tensor([96, 2048, 21846, 1],"float16"), list[-1,3,2048,], )

[Pass] paddle.reshape(Tensor([96, 2048, 21846, 1],"float16"), list[-1,3,2048,], )
2025-03-19 18:08:22.303477 test begin: paddle.reshape(Tensor([96, 23767723, 1, 1],"float32"), list[-1,3,2048,], )

[torch error] paddle.reshape(Tensor([96, 23767723, 1, 1],"float32"), list[-1,3,2048,], ) 
 shape '[-1, 3, 2048]' is invalid for input of size 2281701408
2025-03-19 18:08:25.999611 test begin: paddle.reshape(Tensor([96, 44739243, 1, 1],"float16"), list[-1,3,2048,], )

[torch error] paddle.reshape(Tensor([96, 44739243, 1, 1],"float16"), list[-1,3,2048,], ) 
 shape '[-1, 3, 2048]' is invalid for input of size 4294967328
2025-03-19 18:08:29.440698 test begin: paddle.reshape(Tensor([96, 80297, 296],"float32"), shape=tuple(96,-1,), )

[Pass] paddle.reshape(Tensor([96, 80297, 296],"float32"), shape=tuple(96,-1,), )
2025-03-19 18:11:05.980974 test begin: paddle.reshape(Tensor([971, 27, 272, 320],"float32"), shape=list[-1,272,320,], )

[Pass] paddle.reshape(Tensor([971, 27, 272, 320],"float32"), shape=list[-1,272,320,], )
2025-03-19 18:14:03.515366 test begin: paddle.reshape(Tensor([993, 33, 256, 272],"float32"), shape=list[-1,256,272,], )

[Pass] paddle.reshape(Tensor([993, 33, 256, 272],"float32"), shape=list[-1,256,272,], )
2025-03-19 18:16:39.681189 test begin: paddle.reshape(Tensor([99421, 100, 144, 3],"float16"), shape=tuple(8,-1,1,), )

[Pass] paddle.reshape(Tensor([99421, 100, 144, 3],"float16"), shape=tuple(8,-1,1,), )
2025-03-19 18:32:47.920298 test begin: paddle.reshape(x=Tensor([1, 158580, 14389],"float32"), shape=tuple(-1,), )

[Pass] paddle.reshape(x=Tensor([1, 158580, 14389],"float32"), shape=tuple(-1,), )
2025-03-19 18:35:43.777818 test begin: paddle.reshape(x=Tensor([1, 158580, 14389],"float32"), shape=tuple(-1,4,), )

[Pass] paddle.reshape(x=Tensor([1, 158580, 14389],"float32"), shape=tuple(-1,4,), )
2025-03-19 18:38:22.776860 test begin: paddle.reshape(x=Tensor([1, 168795, 13518],"float32"), shape=tuple(-1,), )

[Pass] paddle.reshape(x=Tensor([1, 168795, 13518],"float32"), shape=tuple(-1,), )
2025-03-19 18:41:10.897102 test begin: paddle.reshape(x=Tensor([1, 168795, 13518],"float32"), shape=tuple(-1,4,), )

[torch error] paddle.reshape(x=Tensor([1, 168795, 13518],"float32"), shape=tuple(-1,4,), ) 
 shape '[-1, 4]' is invalid for input of size 2281770810
2025-03-19 18:41:14.637448 test begin: paddle.reshape(x=Tensor([1, 171888, 13275],"float32"), shape=tuple(-1,), )

[Pass] paddle.reshape(x=Tensor([1, 171888, 13275],"float32"), shape=tuple(-1,), )
2025-03-19 18:44:17.161136 test begin: paddle.reshape(x=Tensor([1, 171888, 13275],"float32"), shape=tuple(-1,4,), )

[Pass] paddle.reshape(x=Tensor([1, 171888, 13275],"float32"), shape=tuple(-1,4,), )
2025-03-19 18:46:56.788950 test begin: paddle.reshape(x=Tensor([10, 228170138],"float32"), shape=list[10,], )

[torch error] paddle.reshape(x=Tensor([10, 228170138],"float32"), shape=list[10,], ) 
 shape '[10]' is invalid for input of size 2281701380
2025-03-19 18:47:00.672662 test begin: paddle.reshape(x=Tensor([10, 228170138],"float32"), shape=list[100,], )

[torch error] paddle.reshape(x=Tensor([10, 228170138],"float32"), shape=list[100,], ) 
 shape '[100]' is invalid for input of size 2281701380
2025-03-19 18:47:02.495250 test begin: paddle.reshape(x=Tensor([10, 228170138],"float32"), shape=list[80,], )

[torch error] paddle.reshape(x=Tensor([10, 228170138],"float32"), shape=list[80,], ) 
 shape '[80]' is invalid for input of size 2281701380
2025-03-19 18:47:04.096038 test begin: paddle.reshape(x=Tensor([100357, 232, 2, 7, 7],"float32"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([100357, 232, 2, 7, 7],"float32"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 2281716752
2025-03-19 18:47:05.089419 test begin: paddle.reshape(x=Tensor([100357, 232, 2, 7, 7],"float32"), shape=list[512,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([100357, 232, 2, 7, 7],"float32"), shape=list[512,464,7,7,], ) 
 shape '[512, 464, 7, 7]' is invalid for input of size 2281716752
2025-03-19 18:47:06.081744 test begin: paddle.reshape(x=Tensor([100357, 464, 7, 7],"float32"), shape=list[1536,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([100357, 464, 7, 7],"float32"), shape=list[1536,2,232,7,7,], ) 
 shape '[1536, 2, 232, 7, 7]' is invalid for input of size 2281716752
2025-03-19 18:47:07.080117 test begin: paddle.reshape(x=Tensor([100357, 464, 7, 7],"float32"), shape=list[512,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([100357, 464, 7, 7],"float32"), shape=list[512,2,232,7,7,], ) 
 shape '[512, 2, 232, 7, 7]' is invalid for input of size 2281716752
2025-03-19 18:47:08.415887 test begin: paddle.reshape(x=Tensor([10186167, 7, 32],"float32"), shape=list[13,7,4,-1,], )

[torch error] paddle.reshape(x=Tensor([10186167, 7, 32],"float32"), shape=list[13,7,4,-1,], ) 
 shape '[13, 7, 4, -1]' is invalid for input of size 2281701408
2025-03-19 18:47:10.280426 test begin: paddle.reshape(x=Tensor([10186167, 7, 32],"float32"), shape=list[52,7,4,-1,], )

[torch error] paddle.reshape(x=Tensor([10186167, 7, 32],"float32"), shape=list[52,7,4,-1,], ) 
 shape '[52, 7, 4, -1]' is invalid for input of size 2281701408
2025-03-19 18:47:11.894334 test begin: paddle.reshape(x=Tensor([1024, 4194305],"float16"), shape=list[1048576,], )

[torch error] paddle.reshape(x=Tensor([1024, 4194305],"float16"), shape=list[1048576,], ) 
 shape '[1048576]' is invalid for input of size 4294968320
2025-03-19 18:47:15.363417 test begin: paddle.reshape(x=Tensor([1024, 4194305],"float16"), shape=list[2097152,], )

[torch error] paddle.reshape(x=Tensor([1024, 4194305],"float16"), shape=list[2097152,], ) 
 shape '[2097152]' is invalid for input of size 4294968320
2025-03-19 18:47:16.344923 test begin: paddle.reshape(x=Tensor([1024, 4194305],"float16"), shape=list[4194304,], )

[torch error] paddle.reshape(x=Tensor([1024, 4194305],"float16"), shape=list[4194304,], ) 
 shape '[4194304]' is invalid for input of size 4294968320
2025-03-19 18:47:17.298944 test begin: paddle.reshape(x=Tensor([10316, 48, 2, 48, 48],"float32"), shape=list[64,96,48,48,], )

[torch error] paddle.reshape(x=Tensor([10316, 48, 2, 48, 48],"float32"), shape=list[64,96,48,48,], ) 
 shape '[64, 96, 48, 48]' is invalid for input of size 2281734144
2025-03-19 18:47:18.277876 test begin: paddle.reshape(x=Tensor([10316, 96, 48, 48],"float32"), shape=list[64,2,48,48,48,], )

[torch error] paddle.reshape(x=Tensor([10316, 96, 48, 48],"float32"), shape=list[64,2,48,48,48,], ) 
 shape '[64, 2, 48, 48, 48]' is invalid for input of size 2281734144
2025-03-19 18:47:19.308121 test begin: paddle.reshape(x=Tensor([1048577, 4096],"float16"), shape=list[16777216,], )

[torch error] paddle.reshape(x=Tensor([1048577, 4096],"float16"), shape=list[16777216,], ) 
 shape '[16777216]' is invalid for input of size 4294971392
2025-03-19 18:47:20.298355 test begin: paddle.reshape(x=Tensor([1048577, 4096],"float16"), shape=list[206045184,], )

[torch error] paddle.reshape(x=Tensor([1048577, 4096],"float16"), shape=list[206045184,], ) 
 shape '[206045184]' is invalid for input of size 4294971392
2025-03-19 18:47:21.541822 test begin: paddle.reshape(x=Tensor([1048577, 4096],"float16"), shape=list[4194304,], )

[torch error] paddle.reshape(x=Tensor([1048577, 4096],"float16"), shape=list[4194304,], ) 
 shape '[4194304]' is invalid for input of size 4294971392
2025-03-19 18:47:23.321723 test begin: paddle.reshape(x=Tensor([1048577, 4096],"float16"), shape=list[67108864,], )

[torch error] paddle.reshape(x=Tensor([1048577, 4096],"float16"), shape=list[67108864,], ) 
 shape '[67108864]' is invalid for input of size 4294971392
2025-03-19 18:47:25.699272 test begin: paddle.reshape(x=Tensor([1118482, 160, 2, 4, 3],"float16"), shape=list[512,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([1118482, 160, 2, 4, 3],"float16"), shape=list[512,320,4,3,], ) 
 shape '[512, 320, 4, 3]' is invalid for input of size 4294970880
2025-03-19 18:47:27.279212 test begin: paddle.reshape(x=Tensor([1118482, 320, 4, 3],"float16"), shape=list[512,2,160,4,3,], )

[torch error] paddle.reshape(x=Tensor([1118482, 320, 4, 3],"float16"), shape=list[512,2,160,4,3,], ) 
 shape '[512, 2, 160, 4, 3]' is invalid for input of size 4294970880
2025-03-19 18:47:28.363238 test begin: paddle.reshape(x=Tensor([111849, 192, 2, 10, 10],"float16"), shape=list[64,384,10,10,], )

[torch error] paddle.reshape(x=Tensor([111849, 192, 2, 10, 10],"float16"), shape=list[64,384,10,10,], ) 
 shape '[64, 384, 10, 10]' is invalid for input of size 4295001600
2025-03-19 18:47:29.312263 test begin: paddle.reshape(x=Tensor([111849, 384, 10, 10],"float16"), shape=list[64,2,192,10,10,], )

[torch error] paddle.reshape(x=Tensor([111849, 384, 10, 10],"float16"), shape=list[64,2,192,10,10,], ) 
 shape '[64, 2, 192, 10, 10]' is invalid for input of size 4295001600
2025-03-19 18:47:30.304199 test begin: paddle.reshape(x=Tensor([1140850690, 2],"float32"), shape=list[1,4,], )

[torch error] paddle.reshape(x=Tensor([1140850690, 2],"float32"), shape=list[1,4,], ) 
 shape '[1, 4]' is invalid for input of size 2281701380
2025-03-19 18:47:31.292100 test begin: paddle.reshape(x=Tensor([1140850690, 2],"int32"), shape=list[1,-1,], )

element 0 of tensors does not require grad and does not have a grad_fn
[Pass] paddle.reshape(x=Tensor([1140850690, 2],"int32"), shape=list[1,-1,], )
2025-03-19 18:50:14.620530 test begin: paddle.reshape(x=Tensor([1140850690, 2],"int32"), shape=list[1,4,], )

[torch error] paddle.reshape(x=Tensor([1140850690, 2],"int32"), shape=list[1,4,], ) 
 shape '[1, 4]' is invalid for input of size 2281701380
2025-03-19 18:50:16.286350 test begin: paddle.reshape(x=Tensor([1140850690, 2],"int64"), shape=list[1,-1,], )

element 0 of tensors does not require grad and does not have a grad_fn
[Pass] paddle.reshape(x=Tensor([1140850690, 2],"int64"), shape=list[1,-1,], )
2025-03-19 18:53:47.376101 test begin: paddle.reshape(x=Tensor([1140850690, 2],"int64"), shape=list[1,4,], )

[torch error] paddle.reshape(x=Tensor([1140850690, 2],"int64"), shape=list[1,4,], ) 
 shape '[1, 4]' is invalid for input of size 2281701380
2025-03-19 18:53:56.551431 test begin: paddle.reshape(x=Tensor([11883862, 1, 12, 16],"float32"), shape=tuple(13,12,16,), )

[torch error] paddle.reshape(x=Tensor([11883862, 1, 12, 16],"float32"), shape=tuple(13,12,16,), ) 
 shape '[13, 12, 16]' is invalid for input of size 2281701504
2025-03-19 18:54:00.103926 test begin: paddle.reshape(x=Tensor([11883862, 1, 12, 16],"float32"), shape=tuple(16,12,16,), )

[torch error] paddle.reshape(x=Tensor([11883862, 1, 12, 16],"float32"), shape=tuple(16,12,16,), ) 
 shape '[16, 12, 16]' is invalid for input of size 2281701504
2025-03-19 18:54:01.135772 test begin: paddle.reshape(x=Tensor([11883862, 1, 12, 16],"float32"), shape=tuple(3,12,16,), )

[torch error] paddle.reshape(x=Tensor([11883862, 1, 12, 16],"float32"), shape=tuple(3,12,16,), ) 
 shape '[3, 12, 16]' is invalid for input of size 2281701504
2025-03-19 18:54:02.441605 test begin: paddle.reshape(x=Tensor([12277, 48, 2, 44, 44],"float32"), shape=list[64,96,44,44,], )

[torch error] paddle.reshape(x=Tensor([12277, 48, 2, 44, 44],"float32"), shape=list[64,96,44,44,], ) 
 shape '[64, 96, 44, 44]' is invalid for input of size 2281754112
2025-03-19 18:54:04.843893 test begin: paddle.reshape(x=Tensor([12277, 96, 44, 44],"float32"), shape=list[64,2,48,44,44,], )

[torch error] paddle.reshape(x=Tensor([12277, 96, 44, 44],"float32"), shape=list[64,2,48,44,44,], ) 
 shape '[64, 2, 48, 44, 44]' is invalid for input of size 2281754112
2025-03-19 18:54:06.435511 test begin: paddle.reshape(x=Tensor([13, 1, 10969719, 16],"float32"), shape=tuple(13,12,16,), )

[torch error] paddle.reshape(x=Tensor([13, 1, 10969719, 16],"float32"), shape=tuple(13,12,16,), ) 
 shape '[13, 12, 16]' is invalid for input of size 2281701552
2025-03-19 18:54:07.764698 test begin: paddle.reshape(x=Tensor([13, 1, 12, 14626291],"float32"), shape=tuple(13,12,16,), )

[torch error] paddle.reshape(x=Tensor([13, 1, 12, 14626291],"float32"), shape=tuple(13,12,16,), ) 
 shape '[13, 12, 16]' is invalid for input of size 2281701396
2025-03-19 18:54:09.361784 test begin: paddle.reshape(x=Tensor([13, 10969719, 16],"float32"), shape=tuple(-1,1,12,16,), )

[torch error] paddle.reshape(x=Tensor([13, 10969719, 16],"float32"), shape=tuple(-1,1,12,16,), ) 
 shape '[-1, 1, 12, 16]' is invalid for input of size 2281701552
2025-03-19 18:54:10.673309 test begin: paddle.reshape(x=Tensor([13, 12, 14626291],"float32"), shape=tuple(-1,1,12,16,), )

[torch error] paddle.reshape(x=Tensor([13, 12, 14626291],"float32"), shape=tuple(-1,1,12,16,), ) 
 shape '[-1, 1, 12, 16]' is invalid for input of size 2281701396
2025-03-19 18:54:12.512639 test begin: paddle.reshape(x=Tensor([13, 5484860, 32],"float32"), shape=list[13,7,4,-1,], )

[torch error] paddle.reshape(x=Tensor([13, 5484860, 32],"float32"), shape=list[13,7,4,-1,], ) 
 shape '[13, 7, 4, -1]' is invalid for input of size 2281701760
2025-03-19 18:54:14.091316 test begin: paddle.reshape(x=Tensor([13, 7, 25073642],"float32"), shape=list[13,7,4,-1,], )

[torch error] paddle.reshape(x=Tensor([13, 7, 25073642],"float32"), shape=list[13,7,4,-1,], ) 
 shape '[13, 7, 4, -1]' is invalid for input of size 2281701422
2025-03-19 18:54:16.313565 test begin: paddle.reshape(x=Tensor([13, 914144, 12, 16],"float32"), shape=tuple(13,12,16,), )

[torch error] paddle.reshape(x=Tensor([13, 914144, 12, 16],"float32"), shape=tuple(13,12,16,), ) 
 shape '[13, 12, 16]' is invalid for input of size 2281703424
2025-03-19 18:54:17.904178 test begin: paddle.reshape(x=Tensor([13275, 171888, 1],"float32"), shape=tuple(-1,), )

[Pass] paddle.reshape(x=Tensor([13275, 171888, 1],"float32"), shape=tuple(-1,), )
2025-03-19 18:57:58.398191 test begin: paddle.reshape(x=Tensor([13518, 168795, 1],"float32"), shape=tuple(-1,), )

[Pass] paddle.reshape(x=Tensor([13518, 168795, 1],"float32"), shape=tuple(-1,), )
2025-03-19 19:01:50.535309 test begin: paddle.reshape(x=Tensor([138085, 192, 2, 9, 9],"float16"), shape=list[64,384,9,9,], )

[torch error] paddle.reshape(x=Tensor([138085, 192, 2, 9, 9],"float16"), shape=list[64,384,9,9,], ) 
 shape '[64, 384, 9, 9]' is invalid for input of size 4294995840
2025-03-19 19:01:54.468158 test begin: paddle.reshape(x=Tensor([138085, 384, 9, 9],"float16"), shape=list[64,2,192,9,9,], )

[torch error] paddle.reshape(x=Tensor([138085, 384, 9, 9],"float16"), shape=list[64,2,192,9,9,], ) 
 shape '[64, 2, 192, 9, 9]' is invalid for input of size 4294995840
2025-03-19 19:01:55.857045 test begin: paddle.reshape(x=Tensor([139811, 20, 2, 32, 24],"float16"), shape=list[512,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([139811, 20, 2, 32, 24],"float16"), shape=list[512,40,32,24,], ) 
 shape '[512, 40, 32, 24]' is invalid for input of size 4294993920
2025-03-19 19:01:56.839765 test begin: paddle.reshape(x=Tensor([139811, 40, 32, 24],"float16"), shape=list[512,2,20,32,24,], )

[torch error] paddle.reshape(x=Tensor([139811, 40, 32, 24],"float16"), shape=list[512,2,20,32,24,], ) 
 shape '[512, 2, 20, 32, 24]' is invalid for input of size 4294993920
2025-03-19 19:01:57.782474 test begin: paddle.reshape(x=Tensor([14389, 158580, 1],"float32"), shape=tuple(-1,), )

[Pass] paddle.reshape(x=Tensor([14389, 158580, 1],"float32"), shape=tuple(-1,), )
2025-03-19 19:04:34.734081 test begin: paddle.reshape(x=Tensor([148549, 160, 2, 8, 6],"float32"), shape=list[16,320,8,6,], )

[torch error] paddle.reshape(x=Tensor([148549, 160, 2, 8, 6],"float32"), shape=list[16,320,8,6,], ) 
 shape '[16, 320, 8, 6]' is invalid for input of size 2281712640
2025-03-19 19:04:37.807817 test begin: paddle.reshape(x=Tensor([148549, 320, 8, 6],"float32"), shape=list[16,2,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([148549, 320, 8, 6],"float32"), shape=list[16,2,160,8,6,], ) 
 shape '[16, 2, 160, 8, 6]' is invalid for input of size 2281712640
2025-03-19 19:04:39.124229 test begin: paddle.reshape(x=Tensor([148549, 40, 2, 16, 12],"float32"), shape=list[16,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([148549, 40, 2, 16, 12],"float32"), shape=list[16,80,16,12,], ) 
 shape '[16, 80, 16, 12]' is invalid for input of size 2281712640
2025-03-19 19:04:40.728068 test begin: paddle.reshape(x=Tensor([148549, 40, 2, 16, 12],"float32"), shape=list[512,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([148549, 40, 2, 16, 12],"float32"), shape=list[512,80,16,12,], ) 
 shape '[512, 80, 16, 12]' is invalid for input of size 2281712640
2025-03-19 19:04:42.052985 test begin: paddle.reshape(x=Tensor([148549, 80, 16, 12],"float32"), shape=list[16,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([148549, 80, 16, 12],"float32"), shape=list[16,2,40,16,12,], ) 
 shape '[16, 2, 40, 16, 12]' is invalid for input of size 2281712640
2025-03-19 19:04:43.927055 test begin: paddle.reshape(x=Tensor([148549, 80, 16, 12],"float32"), shape=list[512,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([148549, 80, 16, 12],"float32"), shape=list[512,2,40,16,12,], ) 
 shape '[512, 2, 40, 16, 12]' is invalid for input of size 2281712640
2025-03-19 19:04:46.430563 test begin: paddle.reshape(x=Tensor([14855, 48, 2, 40, 40],"float32"), shape=list[64,96,40,40,], )

[torch error] paddle.reshape(x=Tensor([14855, 48, 2, 40, 40],"float32"), shape=list[64,96,40,40,], ) 
 shape '[64, 96, 40, 40]' is invalid for input of size 2281728000
2025-03-19 19:04:48.022463 test begin: paddle.reshape(x=Tensor([14855, 96, 40, 40],"float32"), shape=list[64,2,48,40,40,], )

[torch error] paddle.reshape(x=Tensor([14855, 96, 40, 40],"float32"), shape=list[64,2,48,40,40,], ) 
 shape '[64, 2, 48, 40, 40]' is invalid for input of size 2281728000
2025-03-19 19:04:49.048274 test begin: paddle.reshape(x=Tensor([1536, 116, 123, 14, 14],"float16"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 123, 14, 14],"float16"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 4295467008
2025-03-19 19:04:50.956469 test begin: paddle.reshape(x=Tensor([1536, 116, 2, 14, 458],"float32"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 2, 14, 458],"float32"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 2284929024
2025-03-19 19:04:52.295149 test begin: paddle.reshape(x=Tensor([1536, 116, 2, 14, 861],"float16"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 2, 14, 861],"float16"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 4295467008
2025-03-19 19:04:53.589125 test begin: paddle.reshape(x=Tensor([1536, 116, 2, 458, 14],"float32"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 2, 458, 14],"float32"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 2284929024
2025-03-19 19:04:55.448474 test begin: paddle.reshape(x=Tensor([1536, 116, 2, 861, 14],"float16"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 2, 861, 14],"float16"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 4295467008
2025-03-19 19:04:57.672700 test begin: paddle.reshape(x=Tensor([1536, 116, 28, 458],"float32"), shape=list[1536,2,58,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 28, 458],"float32"), shape=list[1536,2,58,28,28,], ) 
 shape '[1536, 2, 58, 28, 28]' is invalid for input of size 2284929024
2025-03-19 19:04:59.548611 test begin: paddle.reshape(x=Tensor([1536, 116, 28, 861],"float16"), shape=list[1536,2,58,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 28, 861],"float16"), shape=list[1536,2,58,28,28,], ) 
 shape '[1536, 2, 58, 28, 28]' is invalid for input of size 4295467008
2025-03-19 19:05:02.090010 test begin: paddle.reshape(x=Tensor([1536, 116, 458, 28],"float32"), shape=list[1536,2,58,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 458, 28],"float32"), shape=list[1536,2,58,28,28,], ) 
 shape '[1536, 2, 58, 28, 28]' is invalid for input of size 2284929024
2025-03-19 19:05:03.731036 test begin: paddle.reshape(x=Tensor([1536, 116, 66, 14, 14],"float32"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 66, 14, 14],"float32"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 2304884736
2025-03-19 19:05:06.023924 test begin: paddle.reshape(x=Tensor([1536, 116, 861, 28],"float16"), shape=list[1536,2,58,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 116, 861, 28],"float16"), shape=list[1536,2,58,28,28,], ) 
 shape '[1536, 2, 58, 28, 28]' is invalid for input of size 4295467008
2025-03-19 19:05:08.145365 test begin: paddle.reshape(x=Tensor([1536, 14267, 14, 14],"float16"), shape=list[1536,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 14267, 14, 14],"float16"), shape=list[1536,2,116,14,14,], ) 
 shape '[1536, 2, 116, 14, 14]' is invalid for input of size 4295165952
2025-03-19 19:05:09.767400 test begin: paddle.reshape(x=Tensor([1536, 15158, 2, 7, 7],"float32"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 15158, 2, 7, 7],"float32"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 2281703424
2025-03-19 19:05:12.288799 test begin: paddle.reshape(x=Tensor([1536, 1784, 2, 28, 28],"float16"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 1784, 2, 28, 28],"float16"), shape=list[1536,116,28,28,], ) 
 shape '[1536, 116, 28, 28]' is invalid for input of size 4296671232
2025-03-19 19:05:14.085753 test begin: paddle.reshape(x=Tensor([1536, 1895, 28, 28],"float32"), shape=list[1536,2,58,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 1895, 28, 28],"float32"), shape=list[1536,2,58,28,28,], ) 
 shape '[1536, 2, 58, 28, 28]' is invalid for input of size 2282004480
2025-03-19 19:05:15.691243 test begin: paddle.reshape(x=Tensor([1536, 232, 131, 7, 7],"float32"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 131, 7, 7],"float32"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 2287423488
2025-03-19 19:05:17.021056 test begin: paddle.reshape(x=Tensor([1536, 232, 14, 458],"float32"), shape=list[1536,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 14, 458],"float32"), shape=list[1536,2,116,14,14,], ) 
 shape '[1536, 2, 116, 14, 14]' is invalid for input of size 2284929024
2025-03-19 19:05:18.664951 test begin: paddle.reshape(x=Tensor([1536, 232, 14, 861],"float16"), shape=list[1536,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 14, 861],"float16"), shape=list[1536,2,116,14,14,], ) 
 shape '[1536, 2, 116, 14, 14]' is invalid for input of size 4295467008
2025-03-19 19:05:20.205250 test begin: paddle.reshape(x=Tensor([1536, 232, 2, 458, 7],"float32"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 2, 458, 7],"float32"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 2284929024
2025-03-19 19:05:22.437142 test begin: paddle.reshape(x=Tensor([1536, 232, 2, 7, 458],"float32"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 2, 7, 458],"float32"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 2284929024
2025-03-19 19:05:24.147734 test begin: paddle.reshape(x=Tensor([1536, 232, 2, 7, 861],"float16"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 2, 7, 861],"float16"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 4295467008
2025-03-19 19:05:25.918705 test begin: paddle.reshape(x=Tensor([1536, 232, 2, 861, 7],"float16"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 2, 861, 7],"float16"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 4295467008
2025-03-19 19:05:28.285339 test begin: paddle.reshape(x=Tensor([1536, 232, 246, 7, 7],"float16"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 246, 7, 7],"float16"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 4295467008
2025-03-19 19:05:30.049579 test begin: paddle.reshape(x=Tensor([1536, 232, 458, 14],"float32"), shape=list[1536,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 458, 14],"float32"), shape=list[1536,2,116,14,14,], ) 
 shape '[1536, 2, 116, 14, 14]' is invalid for input of size 2284929024
2025-03-19 19:05:31.268286 test begin: paddle.reshape(x=Tensor([1536, 232, 861, 14],"float16"), shape=list[1536,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 232, 861, 14],"float16"), shape=list[1536,2,116,14,14,], ) 
 shape '[1536, 2, 116, 14, 14]' is invalid for input of size 4295467008
2025-03-19 19:05:33.034747 test begin: paddle.reshape(x=Tensor([1536, 28533, 2, 7, 7],"float16"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 28533, 2, 7, 7],"float16"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 4295015424
2025-03-19 19:05:34.589900 test begin: paddle.reshape(x=Tensor([1536, 30316, 7, 7],"float32"), shape=list[1536,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 30316, 7, 7],"float32"), shape=list[1536,2,232,7,7,], ) 
 shape '[1536, 2, 232, 7, 7]' is invalid for input of size 2281703424
2025-03-19 19:05:35.590633 test begin: paddle.reshape(x=Tensor([1536, 3567, 28, 28],"float16"), shape=list[1536,2,58,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 3567, 28, 28],"float16"), shape=list[1536,2,58,28,28,], ) 
 shape '[1536, 2, 58, 28, 28]' is invalid for input of size 4295467008
2025-03-19 19:05:36.549266 test begin: paddle.reshape(x=Tensor([1536, 3790, 2, 14, 14],"float32"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 3790, 2, 14, 14],"float32"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 2282004480
2025-03-19 19:05:37.891108 test begin: paddle.reshape(x=Tensor([1536, 464, 458, 7],"float32"), shape=list[1536,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 464, 458, 7],"float32"), shape=list[1536,2,232,7,7,], ) 
 shape '[1536, 2, 232, 7, 7]' is invalid for input of size 2284929024
2025-03-19 19:05:39.756423 test begin: paddle.reshape(x=Tensor([1536, 464, 7, 458],"float32"), shape=list[1536,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 464, 7, 458],"float32"), shape=list[1536,2,232,7,7,], ) 
 shape '[1536, 2, 232, 7, 7]' is invalid for input of size 2284929024
2025-03-19 19:05:41.353015 test begin: paddle.reshape(x=Tensor([1536, 464, 7, 861],"float16"), shape=list[1536,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 464, 7, 861],"float16"), shape=list[1536,2,232,7,7,], ) 
 shape '[1536, 2, 232, 7, 7]' is invalid for input of size 4295467008
2025-03-19 19:05:42.316497 test begin: paddle.reshape(x=Tensor([1536, 464, 861, 7],"float16"), shape=list[1536,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 464, 861, 7],"float16"), shape=list[1536,2,232,7,7,], ) 
 shape '[1536, 2, 232, 7, 7]' is invalid for input of size 4295467008
2025-03-19 19:05:43.287356 test begin: paddle.reshape(x=Tensor([1536, 57066, 7, 7],"float16"), shape=list[1536,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([1536, 57066, 7, 7],"float16"), shape=list[1536,2,232,7,7,], ) 
 shape '[1536, 2, 232, 7, 7]' is invalid for input of size 4295015424
2025-03-19 19:05:44.249290 test begin: paddle.reshape(x=Tensor([1536, 58, 2, 28, 458],"float32"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 58, 2, 28, 458],"float32"), shape=list[1536,116,28,28,], ) 
 shape '[1536, 116, 28, 28]' is invalid for input of size 2284929024
2025-03-19 19:05:45.598159 test begin: paddle.reshape(x=Tensor([1536, 58, 2, 28, 861],"float16"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 58, 2, 28, 861],"float16"), shape=list[1536,116,28,28,], ) 
 shape '[1536, 116, 28, 28]' is invalid for input of size 4295467008
2025-03-19 19:05:46.567050 test begin: paddle.reshape(x=Tensor([1536, 58, 2, 458, 28],"float32"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 58, 2, 458, 28],"float32"), shape=list[1536,116,28,28,], ) 
 shape '[1536, 116, 28, 28]' is invalid for input of size 2284929024
2025-03-19 19:05:49.096782 test begin: paddle.reshape(x=Tensor([1536, 58, 2, 861, 28],"float16"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 58, 2, 861, 28],"float16"), shape=list[1536,116,28,28,], ) 
 shape '[1536, 116, 28, 28]' is invalid for input of size 4295467008
2025-03-19 19:05:50.046142 test begin: paddle.reshape(x=Tensor([1536, 58, 33, 28, 28],"float32"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 58, 33, 28, 28],"float32"), shape=list[1536,116,28,28,], ) 
 shape '[1536, 116, 28, 28]' is invalid for input of size 2304884736
2025-03-19 19:05:51.932454 test begin: paddle.reshape(x=Tensor([1536, 58, 62, 28, 28],"float16"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 58, 62, 28, 28],"float16"), shape=list[1536,116,28,28,], ) 
 cannot reshape array of size 4300000000 into shape (1536,58,62,28,28)
2025-03-19 19:05:51.946149 test begin: paddle.reshape(x=Tensor([1536, 7134, 2, 14, 14],"float16"), shape=list[1536,232,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 7134, 2, 14, 14],"float16"), shape=list[1536,232,14,14,], ) 
 shape '[1536, 232, 14, 14]' is invalid for input of size 4295467008
2025-03-19 19:05:53.272879 test begin: paddle.reshape(x=Tensor([1536, 7579, 14, 14],"float32"), shape=list[1536,2,116,14,14,], )

[torch error] paddle.reshape(x=Tensor([1536, 7579, 14, 14],"float32"), shape=list[1536,2,116,14,14,], ) 
 shape '[1536, 2, 116, 14, 14]' is invalid for input of size 2281703424
2025-03-19 19:05:54.861921 test begin: paddle.reshape(x=Tensor([1536, 948, 2, 28, 28],"float32"), shape=list[1536,116,28,28,], )

[torch error] paddle.reshape(x=Tensor([1536, 948, 2, 28, 28],"float32"), shape=list[1536,116,28,28,], ) 
 shape '[1536, 116, 28, 28]' is invalid for input of size 2283208704
2025-03-19 19:05:56.087392 test begin: paddle.reshape(x=Tensor([16, 1, 12, 11883862],"float32"), shape=tuple(16,12,16,), )

[torch error] paddle.reshape(x=Tensor([16, 1, 12, 11883862],"float32"), shape=tuple(16,12,16,), ) 
 shape '[16, 12, 16]' is invalid for input of size 2281701504
2025-03-19 19:05:57.297999 test begin: paddle.reshape(x=Tensor([16, 1, 8912897, 16],"float32"), shape=tuple(16,12,16,), )

[torch error] paddle.reshape(x=Tensor([16, 1, 8912897, 16],"float32"), shape=tuple(16,12,16,), ) 
 shape '[16, 12, 16]' is invalid for input of size 2281701632
2025-03-19 19:05:58.292180 test begin: paddle.reshape(x=Tensor([16, 11883862, 4, 3],"float32"), shape=list[16,2,160,4,3,], )

[torch error] paddle.reshape(x=Tensor([16, 11883862, 4, 3],"float32"), shape=list[16,2,160,4,3,], ) 
 shape '[16, 2, 160, 4, 3]' is invalid for input of size 2281701504
2025-03-19 19:05:59.289504 test begin: paddle.reshape(x=Tensor([16, 1485483, 2, 8, 6],"float32"), shape=list[16,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 1485483, 2, 8, 6],"float32"), shape=list[16,160,8,6,], ) 
 shape '[16, 160, 8, 6]' is invalid for input of size 2281701888
2025-03-19 19:06:00.276993 test begin: paddle.reshape(x=Tensor([16, 1485483, 2, 8, 6],"float32"), shape=list[16,320,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 1485483, 2, 8, 6],"float32"), shape=list[16,320,8,6,], ) 
 shape '[16, 320, 8, 6]' is invalid for input of size 2281701888
2025-03-19 19:06:01.287000 test begin: paddle.reshape(x=Tensor([16, 16, 11606, 32, 24],"float32"), shape=list[16,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 16, 11606, 32, 24],"float32"), shape=list[16,32,32,24,], ) 
 shape '[16, 32, 32, 24]' is invalid for input of size 2281832448
2025-03-19 19:06:02.599862 test begin: paddle.reshape(x=Tensor([16, 16, 2, 185686, 24],"float32"), shape=list[16,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 16, 2, 185686, 24],"float32"), shape=list[16,32,32,24,], ) 
 shape '[16, 32, 32, 24]' is invalid for input of size 2281709568
2025-03-19 19:06:04.226860 test begin: paddle.reshape(x=Tensor([16, 16, 2, 32, 139265],"float32"), shape=list[16,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 16, 2, 32, 139265],"float32"), shape=list[16,32,32,24,], ) 
 shape '[16, 32, 32, 24]' is invalid for input of size 2281717760
2025-03-19 19:06:05.204687 test begin: paddle.reshape(x=Tensor([16, 16, 2, 64, 69633],"float32"), shape=list[16,32,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 16, 2, 64, 69633],"float32"), shape=list[16,32,64,48,], ) 
 shape '[16, 32, 64, 48]' is invalid for input of size 2281734144
2025-03-19 19:06:06.510848 test begin: paddle.reshape(x=Tensor([16, 16, 2, 92843, 48],"float32"), shape=list[16,32,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 16, 2, 92843, 48],"float32"), shape=list[16,32,64,48,], ) 
 shape '[16, 32, 64, 48]' is invalid for input of size 2281709568
2025-03-19 19:06:08.403578 test begin: paddle.reshape(x=Tensor([16, 16, 2902, 64, 48],"float32"), shape=list[16,32,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 16, 2902, 64, 48],"float32"), shape=list[16,32,64,48,], ) 
 shape '[16, 32, 64, 48]' is invalid for input of size 2282225664
2025-03-19 19:06:10.081488 test begin: paddle.reshape(x=Tensor([16, 160, 148549, 6],"float32"), shape=list[16,2,80,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 148549, 6],"float32"), shape=list[16,2,80,8,6,], ) 
 shape '[16, 2, 80, 8, 6]' is invalid for input of size 2281712640
2025-03-19 19:06:11.105470 test begin: paddle.reshape(x=Tensor([16, 160, 16, 55706],"float32"), shape=list[16,2,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 16, 55706],"float32"), shape=list[16,2,80,16,12,], ) 
 shape '[16, 2, 80, 16, 12]' is invalid for input of size 2281717760
2025-03-19 19:06:12.105280 test begin: paddle.reshape(x=Tensor([16, 160, 18569, 8, 6],"float32"), shape=list[16,320,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 18569, 8, 6],"float32"), shape=list[16,320,8,6,], ) 
 shape '[16, 320, 8, 6]' is invalid for input of size 2281758720
2025-03-19 19:06:13.079101 test begin: paddle.reshape(x=Tensor([16, 160, 2, 148549, 3],"float32"), shape=list[16,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 2, 148549, 3],"float32"), shape=list[16,320,4,3,], ) 
 shape '[16, 320, 4, 3]' is invalid for input of size 2281712640
2025-03-19 19:06:14.101598 test begin: paddle.reshape(x=Tensor([16, 160, 2, 4, 111412],"float32"), shape=list[16,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 2, 4, 111412],"float32"), shape=list[16,320,4,3,], ) 
 shape '[16, 320, 4, 3]' is invalid for input of size 2281717760
2025-03-19 19:06:15.094330 test begin: paddle.reshape(x=Tensor([16, 160, 2, 74275, 6],"float32"), shape=list[16,320,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 2, 74275, 6],"float32"), shape=list[16,320,8,6,], ) 
 shape '[16, 320, 8, 6]' is invalid for input of size 2281728000
2025-03-19 19:06:16.126379 test begin: paddle.reshape(x=Tensor([16, 160, 2, 8, 55706],"float32"), shape=list[16,320,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 2, 8, 55706],"float32"), shape=list[16,320,8,6,], ) 
 shape '[16, 320, 8, 6]' is invalid for input of size 2281717760
2025-03-19 19:06:17.153590 test begin: paddle.reshape(x=Tensor([16, 160, 74275, 12],"float32"), shape=list[16,2,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 74275, 12],"float32"), shape=list[16,2,80,16,12,], ) 
 shape '[16, 2, 80, 16, 12]' is invalid for input of size 2281728000
2025-03-19 19:06:18.506645 test begin: paddle.reshape(x=Tensor([16, 160, 74275, 4, 3],"float32"), shape=list[16,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 74275, 4, 3],"float32"), shape=list[16,320,4,3,], ) 
 shape '[16, 320, 4, 3]' is invalid for input of size 2281728000
2025-03-19 19:06:20.404427 test begin: paddle.reshape(x=Tensor([16, 160, 8, 111412],"float32"), shape=list[16,2,80,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 160, 8, 111412],"float32"), shape=list[16,2,80,8,6,], ) 
 shape '[16, 2, 80, 8, 6]' is invalid for input of size 2281717760
2025-03-19 19:06:22.273576 test begin: paddle.reshape(x=Tensor([16, 185686, 32, 24],"float32"), shape=list[16,2,16,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 185686, 32, 24],"float32"), shape=list[16,2,16,32,24,], ) 
 shape '[16, 2, 16, 32, 24]' is invalid for input of size 2281709568
2025-03-19 19:06:24.157170 test begin: paddle.reshape(x=Tensor([16, 185686, 32, 24],"float32"), shape=list[16,2,20,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 185686, 32, 24],"float32"), shape=list[16,2,20,32,24,], ) 
 shape '[16, 2, 20, 32, 24]' is invalid for input of size 2281709568
2025-03-19 19:06:27.115528 test begin: paddle.reshape(x=Tensor([16, 185686, 32, 24],"float32"), shape=list[16,2,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 185686, 32, 24],"float32"), shape=list[16,2,40,32,24,], ) 
 shape '[16, 2, 40, 32, 24]' is invalid for input of size 2281709568
2025-03-19 19:06:28.781905 test begin: paddle.reshape(x=Tensor([16, 2, 12, 5941931],"float32"), shape=tuple(32,12,16,), )

[torch error] paddle.reshape(x=Tensor([16, 2, 12, 5941931],"float32"), shape=tuple(32,12,16,), ) 
 shape '[32, 12, 16]' is invalid for input of size 2281701504
2025-03-19 19:06:30.208839 test begin: paddle.reshape(x=Tensor([16, 2, 4456449, 16],"float32"), shape=tuple(32,12,16,), )

[torch error] paddle.reshape(x=Tensor([16, 2, 4456449, 16],"float32"), shape=tuple(32,12,16,), ) 
 shape '[32, 12, 16]' is invalid for input of size 2281701888
2025-03-19 19:06:32.172313 test begin: paddle.reshape(x=Tensor([16, 20, 2, 148549, 24],"float32"), shape=list[16,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 20, 2, 148549, 24],"float32"), shape=list[16,40,32,24,], ) 
 shape '[16, 40, 32, 24]' is invalid for input of size 2281712640
2025-03-19 19:06:34.153109 test begin: paddle.reshape(x=Tensor([16, 20, 2, 32, 111412],"float32"), shape=list[16,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 20, 2, 32, 111412],"float32"), shape=list[16,40,32,24,], ) 
 shape '[16, 40, 32, 24]' is invalid for input of size 2281717760
2025-03-19 19:06:36.132970 test begin: paddle.reshape(x=Tensor([16, 20, 2, 64, 55706],"float32"), shape=list[16,40,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 20, 2, 64, 55706],"float32"), shape=list[16,40,64,48,], ) 
 shape '[16, 40, 64, 48]' is invalid for input of size 2281717760
2025-03-19 19:06:38.155073 test begin: paddle.reshape(x=Tensor([16, 20, 2, 74275, 48],"float32"), shape=list[16,40,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 20, 2, 74275, 48],"float32"), shape=list[16,40,64,48,], ) 
 shape '[16, 40, 64, 48]' is invalid for input of size 2281728000
2025-03-19 19:06:39.887960 test begin: paddle.reshape(x=Tensor([16, 20, 2322, 64, 48],"float32"), shape=list[16,40,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 20, 2322, 64, 48],"float32"), shape=list[16,40,64,48,], ) 
 shape '[16, 40, 64, 48]' is invalid for input of size 2282618880
2025-03-19 19:06:41.122331 test begin: paddle.reshape(x=Tensor([16, 20, 9285, 32, 24],"float32"), shape=list[16,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 20, 9285, 32, 24],"float32"), shape=list[16,40,32,24,], ) 
 shape '[16, 40, 32, 24]' is invalid for input of size 2281881600
2025-03-19 19:06:42.201222 test begin: paddle.reshape(x=Tensor([16, 23211, 2, 64, 48],"float32"), shape=list[16,32,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 23211, 2, 64, 48],"float32"), shape=list[16,32,64,48,], ) 
 shape '[16, 32, 64, 48]' is invalid for input of size 2281734144
2025-03-19 19:06:43.623445 test begin: paddle.reshape(x=Tensor([16, 23211, 2, 64, 48],"float32"), shape=list[16,40,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 23211, 2, 64, 48],"float32"), shape=list[16,40,64,48,], ) 
 shape '[16, 40, 64, 48]' is invalid for input of size 2281734144
2025-03-19 19:06:45.385891 test begin: paddle.reshape(x=Tensor([16, 2970966, 8, 6],"float32"), shape=list[16,2,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 2970966, 8, 6],"float32"), shape=list[16,2,160,8,6,], ) 
 shape '[16, 2, 160, 8, 6]' is invalid for input of size 2281701888
2025-03-19 19:06:46.380634 test begin: paddle.reshape(x=Tensor([16, 2970966, 8, 6],"float32"), shape=list[16,2,80,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 2970966, 8, 6],"float32"), shape=list[16,2,80,8,6,], ) 
 shape '[16, 2, 80, 8, 6]' is invalid for input of size 2281701888
2025-03-19 19:06:47.360890 test begin: paddle.reshape(x=Tensor([16, 32, 185686, 24],"float32"), shape=list[16,2,16,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 32, 185686, 24],"float32"), shape=list[16,2,16,32,24,], ) 
 shape '[16, 2, 16, 32, 24]' is invalid for input of size 2281709568
2025-03-19 19:06:48.377657 test begin: paddle.reshape(x=Tensor([16, 32, 32, 139265],"float32"), shape=list[16,2,16,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 32, 32, 139265],"float32"), shape=list[16,2,16,32,24,], ) 
 shape '[16, 2, 16, 32, 24]' is invalid for input of size 2281717760
2025-03-19 19:06:49.447420 test begin: paddle.reshape(x=Tensor([16, 32, 64, 69633],"float32"), shape=list[16,2,16,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 32, 64, 69633],"float32"), shape=list[16,2,16,64,48,], ) 
 shape '[16, 2, 16, 64, 48]' is invalid for input of size 2281734144
2025-03-19 19:06:50.531453 test begin: paddle.reshape(x=Tensor([16, 32, 92843, 48],"float32"), shape=list[16,2,16,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 32, 92843, 48],"float32"), shape=list[16,2,16,64,48,], ) 
 shape '[16, 2, 16, 64, 48]' is invalid for input of size 2281709568
2025-03-19 19:06:51.600782 test begin: paddle.reshape(x=Tensor([16, 320, 148549, 3],"float32"), shape=list[16,2,160,4,3,], )

[torch error] paddle.reshape(x=Tensor([16, 320, 148549, 3],"float32"), shape=list[16,2,160,4,3,], ) 
 shape '[16, 2, 160, 4, 3]' is invalid for input of size 2281712640
2025-03-19 19:06:52.671301 test begin: paddle.reshape(x=Tensor([16, 320, 4, 111412],"float32"), shape=list[16,2,160,4,3,], )

[torch error] paddle.reshape(x=Tensor([16, 320, 4, 111412],"float32"), shape=list[16,2,160,4,3,], ) 
 shape '[16, 2, 160, 4, 3]' is invalid for input of size 2281717760
2025-03-19 19:06:54.142984 test begin: paddle.reshape(x=Tensor([16, 320, 74275, 6],"float32"), shape=list[16,2,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 320, 74275, 6],"float32"), shape=list[16,2,160,8,6,], ) 
 shape '[16, 2, 160, 8, 6]' is invalid for input of size 2281728000
2025-03-19 19:06:56.075865 test begin: paddle.reshape(x=Tensor([16, 320, 8, 55706],"float32"), shape=list[16,2,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 320, 8, 55706],"float32"), shape=list[16,2,160,8,6,], ) 
 shape '[16, 2, 160, 8, 6]' is invalid for input of size 2281717760
2025-03-19 19:06:57.757341 test begin: paddle.reshape(x=Tensor([16, 371371, 2, 16, 12],"float32"), shape=list[16,160,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 371371, 2, 16, 12],"float32"), shape=list[16,160,16,12,], ) 
 shape '[16, 160, 16, 12]' is invalid for input of size 2281703424
2025-03-19 19:06:59.143950 test begin: paddle.reshape(x=Tensor([16, 371371, 2, 16, 12],"float32"), shape=list[16,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 371371, 2, 16, 12],"float32"), shape=list[16,80,16,12,], ) 
 shape '[16, 80, 16, 12]' is invalid for input of size 2281703424
2025-03-19 19:07:01.121229 test begin: paddle.reshape(x=Tensor([16, 40, 148549, 24],"float32"), shape=list[16,2,20,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 148549, 24],"float32"), shape=list[16,2,20,32,24,], ) 
 shape '[16, 2, 20, 32, 24]' is invalid for input of size 2281712640
2025-03-19 19:07:02.762165 test begin: paddle.reshape(x=Tensor([16, 40, 18569, 16, 12],"float32"), shape=list[16,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 18569, 16, 12],"float32"), shape=list[16,80,16,12,], ) 
 shape '[16, 80, 16, 12]' is invalid for input of size 2281758720
2025-03-19 19:07:04.162626 test begin: paddle.reshape(x=Tensor([16, 40, 2, 148549, 12],"float32"), shape=list[16,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 2, 148549, 12],"float32"), shape=list[16,80,16,12,], ) 
 shape '[16, 80, 16, 12]' is invalid for input of size 2281712640
2025-03-19 19:07:06.041572 test begin: paddle.reshape(x=Tensor([16, 40, 2, 16, 111412],"float32"), shape=list[16,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 2, 16, 111412],"float32"), shape=list[16,80,16,12,], ) 
 shape '[16, 80, 16, 12]' is invalid for input of size 2281717760
2025-03-19 19:07:07.624173 test begin: paddle.reshape(x=Tensor([16, 40, 2, 32, 55706],"float32"), shape=list[16,80,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 2, 32, 55706],"float32"), shape=list[16,80,32,24,], ) 
 shape '[16, 80, 32, 24]' is invalid for input of size 2281717760
2025-03-19 19:07:08.940009 test begin: paddle.reshape(x=Tensor([16, 40, 2, 74275, 24],"float32"), shape=list[16,80,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 2, 74275, 24],"float32"), shape=list[16,80,32,24,], ) 
 shape '[16, 80, 32, 24]' is invalid for input of size 2281728000
2025-03-19 19:07:10.839623 test begin: paddle.reshape(x=Tensor([16, 40, 32, 111412],"float32"), shape=list[16,2,20,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 32, 111412],"float32"), shape=list[16,2,20,32,24,], ) 
 shape '[16, 2, 20, 32, 24]' is invalid for input of size 2281717760
2025-03-19 19:07:12.420606 test begin: paddle.reshape(x=Tensor([16, 40, 4643, 32, 24],"float32"), shape=list[16,80,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 4643, 32, 24],"float32"), shape=list[16,80,32,24,], ) 
 shape '[16, 80, 32, 24]' is invalid for input of size 2282127360
2025-03-19 19:07:13.749306 test begin: paddle.reshape(x=Tensor([16, 40, 64, 55706],"float32"), shape=list[16,2,20,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 64, 55706],"float32"), shape=list[16,2,20,64,48,], ) 
 shape '[16, 2, 20, 64, 48]' is invalid for input of size 2281717760
2025-03-19 19:07:15.613233 test begin: paddle.reshape(x=Tensor([16, 40, 74275, 48],"float32"), shape=list[16,2,20,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 40, 74275, 48],"float32"), shape=list[16,2,20,64,48,], ) 
 shape '[16, 2, 20, 64, 48]' is invalid for input of size 2281728000
2025-03-19 19:07:18.105958 test begin: paddle.reshape(x=Tensor([16, 46422, 64, 48],"float32"), shape=list[16,2,16,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 46422, 64, 48],"float32"), shape=list[16,2,16,64,48,], ) 
 shape '[16, 2, 16, 64, 48]' is invalid for input of size 2281734144
2025-03-19 19:07:19.966590 test begin: paddle.reshape(x=Tensor([16, 46422, 64, 48],"float32"), shape=list[16,2,20,64,48,], )

[torch error] paddle.reshape(x=Tensor([16, 46422, 64, 48],"float32"), shape=list[16,2,20,64,48,], ) 
 shape '[16, 2, 20, 64, 48]' is invalid for input of size 2281734144
2025-03-19 19:07:21.587111 test begin: paddle.reshape(x=Tensor([16, 5941931, 2, 4, 3],"float32"), shape=list[16,320,4,3,], )

[torch error] paddle.reshape(x=Tensor([16, 5941931, 2, 4, 3],"float32"), shape=list[16,320,4,3,], ) 
 shape '[16, 320, 4, 3]' is invalid for input of size 2281701504
2025-03-19 19:07:22.947156 test begin: paddle.reshape(x=Tensor([16, 742742, 12, 16],"float32"), shape=tuple(16,12,16,), )

[torch error] paddle.reshape(x=Tensor([16, 742742, 12, 16],"float32"), shape=tuple(16,12,16,), ) 
 shape '[16, 12, 16]' is invalid for input of size 2281703424
2025-03-19 19:07:25.450422 test begin: paddle.reshape(x=Tensor([16, 742742, 12, 16],"float32"), shape=tuple(32,12,16,), )

[torch error] paddle.reshape(x=Tensor([16, 742742, 12, 16],"float32"), shape=tuple(32,12,16,), ) 
 shape '[32, 12, 16]' is invalid for input of size 2281703424
2025-03-19 19:07:27.021455 test begin: paddle.reshape(x=Tensor([16, 742742, 16, 12],"float32"), shape=list[16,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 742742, 16, 12],"float32"), shape=list[16,2,40,16,12,], ) 
 shape '[16, 2, 40, 16, 12]' is invalid for input of size 2281703424
2025-03-19 19:07:28.051201 test begin: paddle.reshape(x=Tensor([16, 742742, 16, 12],"float32"), shape=list[16,2,80,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 742742, 16, 12],"float32"), shape=list[16,2,80,16,12,], ) 
 shape '[16, 2, 80, 16, 12]' is invalid for input of size 2281703424
2025-03-19 19:07:29.052092 test begin: paddle.reshape(x=Tensor([16, 80, 148549, 12],"float32"), shape=list[16,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 148549, 12],"float32"), shape=list[16,2,40,16,12,], ) 
 shape '[16, 2, 40, 16, 12]' is invalid for input of size 2281712640
2025-03-19 19:07:30.030236 test begin: paddle.reshape(x=Tensor([16, 80, 16, 111412],"float32"), shape=list[16,2,40,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 16, 111412],"float32"), shape=list[16,2,40,16,12,], ) 
 shape '[16, 2, 40, 16, 12]' is invalid for input of size 2281717760
2025-03-19 19:07:31.057404 test begin: paddle.reshape(x=Tensor([16, 80, 2, 148549, 6],"float32"), shape=list[16,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 2, 148549, 6],"float32"), shape=list[16,160,8,6,], ) 
 shape '[16, 160, 8, 6]' is invalid for input of size 2281712640
2025-03-19 19:07:32.056054 test begin: paddle.reshape(x=Tensor([16, 80, 2, 16, 55706],"float32"), shape=list[16,160,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 2, 16, 55706],"float32"), shape=list[16,160,16,12,], ) 
 shape '[16, 160, 16, 12]' is invalid for input of size 2281717760
2025-03-19 19:07:33.026181 test begin: paddle.reshape(x=Tensor([16, 80, 2, 74275, 12],"float32"), shape=list[16,160,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 2, 74275, 12],"float32"), shape=list[16,160,16,12,], ) 
 shape '[16, 160, 16, 12]' is invalid for input of size 2281728000
2025-03-19 19:07:34.051178 test begin: paddle.reshape(x=Tensor([16, 80, 2, 8, 111412],"float32"), shape=list[16,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 2, 8, 111412],"float32"), shape=list[16,160,8,6,], ) 
 shape '[16, 160, 8, 6]' is invalid for input of size 2281717760
2025-03-19 19:07:35.024266 test begin: paddle.reshape(x=Tensor([16, 80, 32, 55706],"float32"), shape=list[16,2,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 32, 55706],"float32"), shape=list[16,2,40,32,24,], ) 
 shape '[16, 2, 40, 32, 24]' is invalid for input of size 2281717760
2025-03-19 19:07:35.993986 test begin: paddle.reshape(x=Tensor([16, 80, 37138, 8, 6],"float32"), shape=list[16,160,8,6,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 37138, 8, 6],"float32"), shape=list[16,160,8,6,], ) 
 shape '[16, 160, 8, 6]' is invalid for input of size 2281758720
2025-03-19 19:07:37.302101 test begin: paddle.reshape(x=Tensor([16, 80, 74275, 24],"float32"), shape=list[16,2,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 74275, 24],"float32"), shape=list[16,2,40,32,24,], ) 
 shape '[16, 2, 40, 32, 24]' is invalid for input of size 2281728000
2025-03-19 19:07:38.875310 test begin: paddle.reshape(x=Tensor([16, 80, 9285, 16, 12],"float32"), shape=list[16,160,16,12,], )

[torch error] paddle.reshape(x=Tensor([16, 80, 9285, 16, 12],"float32"), shape=list[16,160,16,12,], ) 
 shape '[16, 160, 16, 12]' is invalid for input of size 2281881600
2025-03-19 19:07:39.911570 test begin: paddle.reshape(x=Tensor([16, 8912897, 16],"float32"), shape=tuple(-1,1,12,16,), )

[torch error] paddle.reshape(x=Tensor([16, 8912897, 16],"float32"), shape=tuple(-1,1,12,16,), ) 
 shape '[-1, 1, 12, 16]' is invalid for input of size 2281701632
2025-03-19 19:07:40.874976 test begin: paddle.reshape(x=Tensor([16, 92843, 2, 32, 24],"float32"), shape=list[16,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 92843, 2, 32, 24],"float32"), shape=list[16,32,32,24,], ) 
 shape '[16, 32, 32, 24]' is invalid for input of size 2281709568
2025-03-19 19:07:41.850393 test begin: paddle.reshape(x=Tensor([16, 92843, 2, 32, 24],"float32"), shape=list[16,40,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 92843, 2, 32, 24],"float32"), shape=list[16,40,32,24,], ) 
 shape '[16, 40, 32, 24]' is invalid for input of size 2281709568
2025-03-19 19:07:42.882381 test begin: paddle.reshape(x=Tensor([16, 92843, 2, 32, 24],"float32"), shape=list[16,80,32,24,], )

[torch error] paddle.reshape(x=Tensor([16, 92843, 2, 32, 24],"float32"), shape=list[16,80,32,24,], ) 
 shape '[16, 80, 32, 24]' is invalid for input of size 2281709568
2025-03-19 19:07:43.849188 test begin: paddle.reshape(x=Tensor([16384, 262145],"float16"), shape=list[67108864,], )

[torch error] paddle.reshape(x=Tensor([16384, 262145],"float16"), shape=list[67108864,], ) 
 shape '[67108864]' is invalid for input of size 4294983680
2025-03-19 19:07:45.091688 test begin: paddle.reshape(x=Tensor([16777217, 2, 1, 128],"float16"), shape=list[64,256,1,1,], )

[torch error] paddle.reshape(x=Tensor([16777217, 2, 1, 128],"float16"), shape=list[64,256,1,1,], ) 
 shape '[64, 256, 1, 1]' is invalid for input of size 4294967552
2025-03-19 19:07:46.049858 test begin: paddle.reshape(x=Tensor([16777217, 256, 1, 1],"float16"), shape=list[64,1,2,128,], )

[torch error] paddle.reshape(x=Tensor([16777217, 256, 1, 1],"float16"), shape=list[64,1,2,128,], ) 
 shape '[64, 1, 2, 128]' is invalid for input of size 4294967552
2025-03-19 19:07:46.996209 test begin: paddle.reshape(x=Tensor([174763, 16, 2, 32, 24],"float16"), shape=list[512,32,32,24,], )

[torch error] paddle.reshape(x=Tensor([174763, 16, 2, 32, 24],"float16"), shape=list[512,32,32,24,], ) 
 shape '[512, 32, 32, 24]' is invalid for input of size 4294975488
2025-03-19 19:07:48.259888 test begin: paddle.reshape(x=Tensor([174763, 192, 2, 8, 8],"float16"), shape=list[64,384,8,8,], )

[torch error] paddle.reshape(x=Tensor([174763, 192, 2, 8, 8],"float16"), shape=list[64,384,8,8,], ) 
 shape '[64, 384, 8, 8]' is invalid for input of size 4294975488
2025-03-19 19:07:49.754734 test begin: paddle.reshape(x=Tensor([174763, 32, 32, 24],"float16"), shape=list[512,2,16,32,24,], )

[torch error] paddle.reshape(x=Tensor([174763, 32, 32, 24],"float16"), shape=list[512,2,16,32,24,], ) 
 shape '[512, 2, 16, 32, 24]' is invalid for input of size 4294975488
2025-03-19 19:07:50.719631 test begin: paddle.reshape(x=Tensor([174763, 384, 8, 8],"float16"), shape=list[64,2,192,8,8,], )

[torch error] paddle.reshape(x=Tensor([174763, 384, 8, 8],"float16"), shape=list[64,2,192,8,8,], ) 
 shape '[64, 2, 192, 8, 8]' is invalid for input of size 4294975488
2025-03-19 19:07:51.709806 test begin: paddle.reshape(x=Tensor([17825793, 128, 1, 1],"float32"), shape=list[64,1,2,64,], )

[torch error] paddle.reshape(x=Tensor([17825793, 128, 1, 1],"float32"), shape=list[64,1,2,64,], ) 
 shape '[64, 1, 2, 64]' is invalid for input of size 2281701504
2025-03-19 19:07:52.698181 test begin: paddle.reshape(x=Tensor([17825793, 2, 1, 64],"float32"), shape=list[64,128,1,1,], )

[torch error] paddle.reshape(x=Tensor([17825793, 2, 1, 64],"float32"), shape=list[64,128,1,1,], ) 
 shape '[64, 128, 1, 1]' is invalid for input of size 2281701504
2025-03-19 19:07:54.010610 test begin: paddle.reshape(x=Tensor([18340, 48, 2, 36, 36],"float32"), shape=list[64,96,36,36,], )

[torch error] paddle.reshape(x=Tensor([18340, 48, 2, 36, 36],"float32"), shape=list[64,96,36,36,], ) 
 shape '[64, 96, 36, 36]' is invalid for input of size 2281789440
2025-03-19 19:07:55.617454 test begin: paddle.reshape(x=Tensor([18340, 96, 36, 36],"float32"), shape=list[64,2,48,36,36,], )

[torch error] paddle.reshape(x=Tensor([18340, 96, 36, 36],"float32"), shape=list[64,2,48,36,36,], ) 
 shape '[64, 2, 48, 36, 36]' is invalid for input of size 2281789440
2025-03-19 19:07:56.927576 test begin: paddle.reshape(x=Tensor([18569, 20, 2, 64, 48],"float32"), shape=list[16,40,64,48,], )

[torch error] paddle.reshape(x=Tensor([18569, 20, 2, 64, 48],"float32"), shape=list[16,40,64,48,], ) 
 shape '[16, 40, 64, 48]' is invalid for input of size 2281758720
2025-03-19 19:07:58.827434 test begin: paddle.reshape(x=Tensor([18569, 40, 64, 48],"float32"), shape=list[16,2,20,64,48,], )

[torch error] paddle.reshape(x=Tensor([18569, 40, 64, 48],"float32"), shape=list[16,2,20,64,48,], ) 
 shape '[16, 2, 20, 64, 48]' is invalid for input of size 2281758720
2025-03-19 19:08:00.434655 test begin: paddle.reshape(x=Tensor([188907, 232, 2, 7, 7],"float16"), shape=list[1536,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([188907, 232, 2, 7, 7],"float16"), shape=list[1536,464,7,7,], ) 
 shape '[1536, 464, 7, 7]' is invalid for input of size 4294989552
2025-03-19 19:08:01.692242 test begin: paddle.reshape(x=Tensor([188907, 232, 2, 7, 7],"float16"), shape=list[512,464,7,7,], )

[torch error] paddle.reshape(x=Tensor([188907, 232, 2, 7, 7],"float16"), shape=list[512,464,7,7,], ) 
 shape '[512, 464, 7, 7]' is invalid for input of size 4294989552
2025-03-19 19:08:03.558129 test begin: paddle.reshape(x=Tensor([188907, 464, 7, 7],"float16"), shape=list[1536,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([188907, 464, 7, 7],"float16"), shape=list[1536,2,232,7,7,], ) 
 shape '[1536, 2, 232, 7, 7]' is invalid for input of size 4294989552
2025-03-19 19:08:05.148543 test begin: paddle.reshape(x=Tensor([188907, 464, 7, 7],"float16"), shape=list[512,2,232,7,7,], )

[torch error] paddle.reshape(x=Tensor([188907, 464, 7, 7],"float16"), shape=list[512,2,232,7,7,], ) 
 shape '[512, 2, 232, 7, 7]' is invalid for input of size 4294989552
2025-03-19 19:08:06.207613 test begin: paddle.reshape(x=Tensor([19419, 48, 2, 48, 48],"float16"), shape=list[64,96,48,48,], )

[torch error] paddle.reshape(x=Tensor([19419, 48, 2, 48, 48],"float16"), shape=list[64,96,48,48,], ) 
 shape '[64, 96, 48, 48]' is invalid for input of size 4295172096
2025-03-19 19:08:07.566848 test begin: paddle.reshape(x=Tensor([19419, 96, 48, 48],"float16"), shape=list[64,2,48,48,48,], )

[torch error] paddle.reshape(x=Tensor([19419, 96, 48, 48],"float16"), shape=list[64,2,48,48,48,], ) 
 shape '[64, 2, 48, 48, 48]' is invalid for input of size 4295172096
2025-03-20 10:24:06.589737 test begin: paddle.reshape(Tensor([2, 12, 2, 28, 1697695],"float32"), shape=list[2,24,28,28,], )

W0320 10:25:12.625172 113308 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0320 10:25:12.626334 113308 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[torch error] paddle.reshape(Tensor([2, 12, 2, 28, 1697695],"float32"), shape=list[2,24,28,28,], ) 
 shape '[2, 24, 28, 28]' is invalid for input of size 2281702080
2025-03-20 10:25:14.643955 test begin: paddle.reshape(Tensor([2, 120, 3169030, 3],"float32"), shape=tuple(2,-1,1,), )

[Pass] paddle.reshape(Tensor([2, 120, 3169030, 3],"float32"), shape=tuple(2,-1,1,), )
2025-03-20 10:28:38.744297 test begin: paddle.reshape(Tensor([2, 120, 792258, 12],"float32"), shape=tuple(2,-1,4,), )

[Pass] paddle.reshape(Tensor([2, 120, 792258, 12],"float32"), shape=tuple(2,-1,4,), )
2025-03-20 10:31:29.178450 test begin: paddle.reshape(Tensor([2, 120, 88, 108036],"float32"), shape=tuple(2,-1,1,), )

[Pass] paddle.reshape(Tensor([2, 120, 88, 108036],"float32"), shape=tuple(2,-1,1,), )
2025-03-20 10:34:56.869881 test begin: paddle.reshape(Tensor([2, 120, 88, 108036],"float32"), shape=tuple(2,-1,4,), )

[Pass] paddle.reshape(Tensor([2, 120, 88, 108036],"float32"), shape=tuple(2,-1,4,), )
2025-03-20 10:37:59.218483 test begin: paddle.reshape(Tensor([2, 124, 3066803, 3],"float32"), shape=tuple(2,-1,1,), )

[Pass] paddle.reshape(Tensor([2, 124, 3066803, 3],"float32"), shape=tuple(2,-1,1,), )
2025-03-20 10:41:28.659948 test begin: paddle.reshape(Tensor([2, 124, 766701, 12],"float32"), shape=tuple(2,-1,4,), )

[Pass] paddle.reshape(Tensor([2, 124, 766701, 12],"float32"), shape=tuple(2,-1,4,), )
2025-03-20 10:44:37.845207 test begin: paddle.reshape(Tensor([2, 124, 92, 100005],"float32"), shape=tuple(2,-1,1,), )

[Pass] paddle.reshape(Tensor([2, 124, 92, 100005],"float32"), shape=tuple(2,-1,1,), )
2025-03-20 10:47:37.731985 test begin: paddle.reshape(Tensor([2, 124, 92, 100005],"float32"), shape=tuple(2,-1,4,), )

[Pass] paddle.reshape(Tensor([2, 124, 92, 100005],"float32"), shape=tuple(2,-1,4,), )
2025-03-20 10:51:14.192892 test begin: paddle.reshape(Tensor([2, 126761188, 3, 3],"float32"), tuple(2,-1,), )

[Pass] paddle.reshape(Tensor([2, 126761188, 3, 3],"float32"), tuple(2,-1,), )
2025-03-20 10:54:19.263661 test begin: paddle.reshape(Tensor([2, 128, 120, 74275],"float32"), shape=tuple(2,-1,1,), )

[Pass] paddle.reshape(Tensor([2, 128, 120, 74275],"float32"), shape=tuple(2,-1,1,), )
2025-03-20 10:57:22.766837 test begin: paddle.reshape(Tensor([2, 128, 120, 74275],"float32"), shape=tuple(2,-1,4,), )

[Pass] paddle.reshape(Tensor([2, 128, 120, 74275],"float32"), shape=tuple(2,-1,4,), )
2025-03-20 11:01:09.896367 test begin: paddle.reshape(Tensor([2, 128, 1273271, 7],"float32"), shape=list[2,2,64,7,7,], )

[torch error] paddle.reshape(Tensor([2, 128, 1273271, 7],"float32"), shape=list[2,2,64,7,7,], ) 
 shape '[2, 2, 64, 7, 7]' is invalid for input of size 2281701632
2025-03-20 11:01:14.130852 test begin: paddle.reshape(Tensor([2, 128, 2970966, 3],"float32"), shape=tuple(2,-1,1,), )

[Pass] paddle.reshape(Tensor([2, 128, 2970966, 3],"float32"), shape=tuple(2,-1,1,), )
2025-03-20 11:03:53.400549 test begin: paddle.reshape(Tensor([2, 128, 7, 1273271],"float32"), shape=list[2,2,64,7,7,], )

[torch error] paddle.reshape(Tensor([2, 128, 7, 1273271],"float32"), shape=list[2,2,64,7,7,], ) 
 shape '[2, 2, 64, 7, 7]' is invalid for input of size 2281701632
2025-03-20 11:03:56.501103 test begin: paddle.reshape(Tensor([2, 128, 742742, 12],"float32"), shape=tuple(2,-1,4,), )

[Pass] paddle.reshape(Tensor([2, 128, 742742, 12],"float32"), shape=tuple(2,-1,4,), )
2025-03-20 11:07:12.968301 test begin: paddle.reshape(Tensor([2, 128, 8912897],"float32"), list[-1,60,], )

[torch error] paddle.reshape(Tensor([2, 128, 8912897],"float32"), list[-1,60,], ) 
 shape '[-1, 60]' is invalid for input of size 2281701632
2025-03-20 11:07:16.791661 test begin: paddle.reshape(Tensor([2, 13, 1567103, 7, 8],"float32"), tuple(104,7,-1,), )

[Pass] paddle.reshape(Tensor([2, 13, 1567103, 7, 8],"float32"), tuple(104,7,-1,), )
2025-03-20 11:10:29.515413 test begin: paddle.reshape(Tensor([2, 13, 2742430, 32],"float32"), list[2,13,7,8,4,], )

[torch error] paddle.reshape(Tensor([2, 13, 2742430, 32],"float32"), list[2,13,7,8,4,], ) 
 shape '[2, 13, 7, 8, 4]' is invalid for input of size 2281701760
2025-03-20 11:10:33.626535 test begin: paddle.reshape(Tensor([2, 13, 28, 3134206],"int32"), tuple(-1,14,), )

[Pass] paddle.reshape(Tensor([2, 13, 28, 3134206],"int32"), tuple(-1,14,), )
2025-03-20 11:13:21.606686 test begin: paddle.reshape(Tensor([2, 13, 4, 2742430, 8],"float32"), tuple(104,7,-1,), )

[torch error] paddle.reshape(Tensor([2, 13, 4, 2742430, 8],"float32"), tuple(104,7,-1,), ) 
 shape '[104, 7, -1]' is invalid for input of size 2281701760
2025-03-20 11:13:25.587068 test begin: paddle.reshape(Tensor([2, 13, 4, 7, 3134206],"float32"), tuple(104,7,-1,), )

[Pass] paddle.reshape(Tensor([2, 13, 4, 7, 3134206],"float32"), tuple(104,7,-1,), )
2025-03-20 11:16:26.789704 test begin: paddle.reshape(Tensor([2, 13, 6268411, 14],"int32"), tuple(-1,14,), )

[Pass] paddle.reshape(Tensor([2, 13, 6268411, 14],"int32"), tuple(-1,14,), )
2025-03-20 11:18:49.123051 test begin: paddle.reshape(Tensor([2, 13, 7, 12536821],"float32"), list[2,13,7,8,4,], )

[torch error] paddle.reshape(Tensor([2, 13, 7, 12536821],"float32"), list[2,13,7,8,4,], ) 
 shape '[2, 13, 7, 8, 4]' is invalid for input of size 2281701422
2025-03-20 11:18:53.001491 test begin: paddle.reshape(Tensor([2, 142606337, 8],"float32"), list[-1,8,], )

[Pass] paddle.reshape(Tensor([2, 142606337, 8],"float32"), list[-1,8,], )
2025-03-20 11:22:29.011262 test begin: paddle.reshape(Tensor([2, 1455167, 28, 28],"float32"), shape=list[2,2,112,28,28,], )

[torch error] paddle.reshape(Tensor([2, 1455167, 28, 28],"float32"), shape=list[2,2,112,28,28,], ) 
 shape '[2, 2, 112, 28, 28]' is invalid for input of size 2281701856
2025-03-20 11:22:33.142160 test begin: paddle.reshape(Tensor([2, 1455167, 28, 28],"float32"), shape=list[2,2,12,28,28,], )

[torch error] paddle.reshape(Tensor([2, 1455167, 28, 28],"float32"), shape=list[2,2,12,28,28,], ) 
 shape '[2, 2, 12, 28, 28]' is invalid for input of size 2281701856
2025-03-20 11:22:35.644638 test begin: paddle.reshape(Tensor([2, 1455167, 28, 28],"float32"), shape=list[2,2,16,28,28,], )

[torch error] paddle.reshape(Tensor([2, 1455167, 28, 28],"float32"), shape=list[2,2,16,28,28,], ) 
 shape '[2, 2, 16, 28, 28]' is invalid for input of size 2281701856
2025-03-20 11:22:37.552255 test begin: paddle.reshape(Tensor([2, 1455167, 28, 28],"float32"), shape=list[2,2,24,28,28,], )

[torch error] paddle.reshape(Tensor([2, 1455167, 28, 28],"float32"), shape=list[2,2,24,28,28,], ) 
 shape '[2, 2, 24, 28, 28]' is invalid for input of size 2281701856
2025-03-20 11:22:39.422609 test begin: paddle.reshape(Tensor([2, 1455167, 28, 28],"float32"), shape=list[2,2,58,28,28,], )

[torch error] paddle.reshape(Tensor([2, 1455167, 28, 28],"float32"), shape=list[2,2,58,28,28,], ) 
 shape '[2, 2, 58, 28, 28]' is invalid for input of size 2281701856
2025-03-20 11:22:41.409077 test begin: paddle.reshape(Tensor([2, 1455167, 28, 28],"float32"), shape=list[2,2,88,28,28,], )

[torch error] paddle.reshape(Tensor([2, 1455167, 28, 28],"float32"), shape=list[2,2,88,28,28,], ) 
 shape '[2, 2, 88, 28, 28]' is invalid for input of size 2281701856
2025-03-20 11:22:43.003441 test begin: paddle.reshape(Tensor([2, 16, 2, 1273271, 28],"float32"), shape=list[2,32,28,28,], )

[torch error] paddle.reshape(Tensor([2, 16, 2, 1273271, 28],"float32"), shape=list[2,32,28,28,], ) 
 shape '[2, 32, 28, 28]' is invalid for input of size 2281701632
2025-03-20 11:22:45.499112 test begin: paddle.reshape(Tensor([2, 16, 2, 28, 1273271],"float32"), shape=list[2,32,28,28,], )

[torch error] paddle.reshape(Tensor([2, 16, 2, 28, 1273271],"float32"), shape=list[2,32,28,28,], ) 
 shape '[2, 32, 28, 28]' is invalid for input of size 2281701632
2025-03-20 11:22:47.405522 test begin: paddle.reshape(Tensor([2, 16, 90948, 28, 28],"float32"), shape=list[2,32,28,28,], )

[torch error] paddle.reshape(Tensor([2, 16, 90948, 28, 28],"float32"), shape=list[2,32,28,28,], ) 
 shape '[2, 32, 28, 28]' is invalid for input of size 2281703424
2025-03-20 11:22:49.288906 test begin: paddle.reshape(Tensor([2, 176, 2, 14, 231504],"float32"), shape=list[2,352,14,14,], )

[torch error] paddle.reshape(Tensor([2, 176, 2, 14, 231504],"float32"), shape=list[2,352,14,14,], ) 
 shape '[2, 352, 14, 14]' is invalid for input of size 2281703424
2025-03-20 11:22:51.165375 test begin: paddle.reshape(Tensor([2, 176, 2, 231504, 14],"float32"), shape=list[2,352,14,14,], )

[torch error] paddle.reshape(Tensor([2, 176, 2, 231504, 14],"float32"), shape=list[2,352,14,14,], ) 
 shape '[2, 352, 14, 14]' is invalid for input of size 2281703424
2025-03-20 11:22:53.666090 test begin: paddle.reshape(Tensor([2, 176, 231504, 28],"float32"), shape=list[2,2,88,28,28,], )

[torch error] paddle.reshape(Tensor([2, 176, 231504, 28],"float32"), shape=list[2,2,88,28,28,], ) 
 shape '[2, 2, 88, 28, 28]' is invalid for input of size 2281703424
2025-03-20 11:22:56.174346 test begin: paddle.reshape(Tensor([2, 176, 28, 231504],"float32"), shape=list[2,2,88,28,28,], )

[torch error] paddle.reshape(Tensor([2, 176, 28, 231504],"float32"), shape=list[2,2,88,28,28,], ) 
 shape '[2, 2, 88, 28, 28]' is invalid for input of size 2281703424
2025-03-20 11:22:58.811009 test begin: paddle.reshape(Tensor([2, 176, 33072, 14, 14],"float32"), shape=list[2,352,14,14,], )

[torch error] paddle.reshape(Tensor([2, 176, 33072, 14, 14],"float32"), shape=list[2,352,14,14,], ) 
 shape '[2, 352, 14, 14]' is invalid for input of size 2281703424
2025-03-20 11:23:00.860871 test begin: paddle.reshape(Tensor([2, 190141782, 6],"float32"), shape=list[8,6,], )

[torch error] paddle.reshape(Tensor([2, 190141782, 6],"float32"), shape=list[8,6,], ) 
 shape '[8, 6]' is invalid for input of size 2281701384
2025-03-20 11:23:03.449223 test begin: paddle.reshape(Tensor([2, 19014179, 60],"float32"), list[-1,60,], )

[Pass] paddle.reshape(Tensor([2, 19014179, 60],"float32"), list[-1,60,], )
2025-03-20 11:26:15.903369 test begin: paddle.reshape(Tensor([2, 192, 7, 848848],"float32"), shape=list[2,2,96,7,7,], )

[torch error] paddle.reshape(Tensor([2, 192, 7, 848848],"float32"), shape=list[2,2,96,7,7,], ) 
 shape '[2, 2, 96, 7, 7]' is invalid for input of size 2281703424
2025-03-20 11:26:20.091829 test begin: paddle.reshape(Tensor([2, 192, 848848, 7],"float32"), shape=list[2,2,96,7,7,], )

[torch error] paddle.reshape(Tensor([2, 192, 848848, 7],"float32"), shape=list[2,2,96,7,7,], ) 
 shape '[2, 2, 96, 7, 7]' is invalid for input of size 2281703424
2025-03-20 11:26:21.438112 test begin: paddle.reshape(Tensor([2, 2, 1, 1073741825],"float16"), list[-1,3,], )

[torch error] paddle.reshape(Tensor([2, 2, 1, 1073741825],"float16"), list[-1,3,], ) 
 shape '[-1, 3]' is invalid for input of size 4294967300
2025-03-20 11:27:50.155521 test begin: paddle.reshape(Tensor([2, 2, 1, 570425345],"int64"), list[-1,3,], )

[torch error] paddle.reshape(Tensor([2, 2, 1, 570425345],"int64"), list[-1,3,], ) 
 shape '[-1, 3]' is invalid for input of size 2281701380
2025-03-20 11:28:46.033453 test begin: paddle.reshape(Tensor([2, 2, 190141782, 3],"int64"), list[-1,3,], )

[Pass] paddle.reshape(Tensor([2, 2, 190141782, 3],"int64"), list[-1,3,], )
2025-03-20 11:31:55.369886 test begin: paddle.reshape(Tensor([2, 2, 357913942, 3],"float16"), list[-1,3,], )

[Pass] paddle.reshape(Tensor([2, 2, 357913942, 3],"float16"), list[-1,3,], )
2025-03-20 11:48:36.743408 test begin: paddle.reshape(Tensor([2, 20372334, 7, 8],"float32"), tuple(2,13,4,7,8,), )

[torch error] paddle.reshape(Tensor([2, 20372334, 7, 8],"float32"), tuple(2,13,4,7,8,), ) 
 shape '[2, 13, 4, 7, 8]' is invalid for input of size 2281701408
2025-03-20 11:48:41.005146 test begin: paddle.reshape(Tensor([2, 2048, 1, 1048577],"float16"), shape=list[-1,2048,], )

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 147, in <module>
    main()
  File "/host_home/wanghuan29/APItest3/PaddleAPITest/engine.py", line 122, in main
    case.test()
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.9/dist-packages/func_timeout/dafunc.py", line 86, in func_timeout
    thread.join(timeout)
  File "/usr/lib/python3.9/threading.py", line 1064, in join
    self._wait_for_tstate_lock(timeout=max(timeout, 0))
  File "/usr/lib/python3.9/threading.py", line 1080, in _wait_for_tstate_lock
    if lock.acquire(block, timeout):
KeyboardInterrupt
2025-03-20 11:49:30.206004 test begin: paddle.reshape(Tensor([2, 2048, 1, 557057],"float32"), shape=list[-1,2048,], )

W0320 11:50:57.618707 139214 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0320 11:50:57.620086 139214 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.reshape(Tensor([2, 2048, 1, 557057],"float32"), shape=list[-1,2048,], )
2025-03-20 11:53:37.725983 test begin: paddle.reshape(Tensor([2, 2048, 1048577, 1],"float16"), shape=list[-1,2048,], )

[Pass] paddle.reshape(Tensor([2, 2048, 1048577, 1],"float16"), shape=list[-1,2048,], )
2025-03-20 12:11:05.691512 test begin: paddle.reshape(Tensor([2, 2048, 557057, 1],"float32"), shape=list[-1,2048,], )

[Pass] paddle.reshape(Tensor([2, 2048, 557057, 1],"float32"), shape=list[-1,2048,], )
2025-03-20 12:14:05.258446 test begin: paddle.reshape(Tensor([2, 2147483649, 1, 1],"float16"), shape=list[-1,2048,], )

[torch error] paddle.reshape(Tensor([2, 2147483649, 1, 1],"float16"), shape=list[-1,2048,], ) 
 shape '[-1, 2048]' is invalid for input of size 4294967298
2025-03-20 12:14:09.187319 test begin: paddle.reshape(Tensor([2, 2147483649],"float16"), list[2,3,], )

[torch error] paddle.reshape(Tensor([2, 2147483649],"float16"), list[2,3,], ) 
 shape '[2, 3]' is invalid for input of size 4294967298
2025-03-20 12:14:11.571114 test begin: paddle.reshape(Tensor([2, 224, 181896, 28],"float32"), shape=list[2,2,112,28,28,], )

[torch error] paddle.reshape(Tensor([2, 224, 181896, 28],"float32"), shape=list[2,2,112,28,28,], ) 
 shape '[2, 2, 112, 28, 28]' is invalid for input of size 2281703424
2025-03-20 14:07:52.646175 test begin: paddle.sinh(Tensor([10, 20, 11408507],"float32"), )

W0320 14:09:51.502055 17763 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0320 14:09:51.503898 17763 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.sinh(Tensor([10, 20, 11408507],"float32"), )
2025-03-20 14:13:08.334878 test begin: paddle.sinh(Tensor([10, 228170138, 1],"float32"), )

[Pass] paddle.sinh(Tensor([10, 228170138, 1],"float32"), )
2025-03-20 14:16:10.062686 test begin: paddle.sinh(Tensor([114085069, 20, 1],"float32"), )

[Pass] paddle.sinh(Tensor([114085069, 20, 1],"float32"), )
2025-03-20 14:19:52.618199 test begin: paddle.sinh(Tensor([4456449, 16, 32],"float32"), )

[Pass] paddle.sinh(Tensor([4456449, 16, 32],"float32"), )
2025-03-20 14:23:21.193968 test begin: paddle.sinh(Tensor([8, 16, 17825793],"float32"), )

[Pass] paddle.sinh(Tensor([8, 16, 17825793],"float32"), )
2025-03-20 14:26:16.929907 test begin: paddle.sinh(Tensor([8, 16, 33554433],"float16"), )

[Pass] paddle.sinh(Tensor([8, 16, 33554433],"float16"), )
2025-03-20 14:45:02.306890 test begin: paddle.sinh(Tensor([8, 16777217, 32],"float16"), )

[Pass] paddle.sinh(Tensor([8, 16777217, 32],"float16"), )
2025-03-20 15:01:56.137115 test begin: paddle.sinh(Tensor([8, 8912897, 32],"float32"), )

[Pass] paddle.sinh(Tensor([8, 8912897, 32],"float32"), )
2025-03-20 15:04:49.785922 test begin: paddle.sinh(Tensor([8388609, 16, 32],"float16"), )

[Pass] paddle.sinh(Tensor([8388609, 16, 32],"float16"), )
2025-03-20 15:21:41.954098 test begin: paddle.sinh(x=Tensor([1, 2281701379],"float32"), )

[Pass] paddle.sinh(x=Tensor([1, 2281701379],"float32"), )
2025-03-20 15:24:36.948907 test begin: paddle.sinh(x=Tensor([1, 4294967297],"float16"), )

[Pass] paddle.sinh(x=Tensor([1, 4294967297],"float16"), )
2025-03-20 15:41:03.020768 test begin: paddle.sinh(x=Tensor([1140850690, 2],"float32"), )

[Pass] paddle.sinh(x=Tensor([1140850690, 2],"float32"), )
2025-03-20 15:43:54.308566 test begin: paddle.sinh(x=Tensor([2, 2147483649],"float16"), )

[Pass] paddle.sinh(x=Tensor([2, 2147483649],"float16"), )
2025-03-20 16:00:46.705214 test begin: paddle.sinh(x=Tensor([2, 3, 2, 357913942],"float16"), )

[Pass] paddle.sinh(x=Tensor([2, 3, 2, 357913942],"float16"), )
2025-03-20 16:17:43.904781 test begin: paddle.sinh(x=Tensor([2, 3, 357913942, 2],"float16"), )

[Pass] paddle.sinh(x=Tensor([2, 3, 357913942, 2],"float16"), )
2025-03-20 16:34:14.252704 test begin: paddle.sinh(x=Tensor([2, 536870913, 2, 2],"float16"), )

[Pass] paddle.sinh(x=Tensor([2, 536870913, 2, 2],"float16"), )
2025-03-20 16:50:40.618687 test begin: paddle.sinh(x=Tensor([2147483649, 2],"float16"), )

[Pass] paddle.sinh(x=Tensor([2147483649, 2],"float16"), )
2025-03-20 17:07:18.708429 test begin: paddle.sinh(x=Tensor([357913942, 3, 2, 2],"float16"), )

[Pass] paddle.sinh(x=Tensor([357913942, 3, 2, 2],"float16"), )
2025-03-20 17:23:23.943927 test begin: paddle.sinh(x=Tensor([4294967297],"float16"), )

[Pass] paddle.sinh(x=Tensor([4294967297],"float16"), )
2025-03-20 17:39:27.566374 test begin: paddle.squeeze(Tensor([3, 1, 3, 1600, 158452],"float32"), axis=1, )

W0320 17:40:52.637457 83205 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0320 17:40:52.638598 83205 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.squeeze(Tensor([3, 1, 3, 1600, 158452],"float32"), axis=1, )
2025-03-20 17:43:09.675859 test begin: paddle.squeeze(Tensor([3, 1, 3, 3, 84507459],"float32"), axis=1, )

[Pass] paddle.squeeze(Tensor([3, 1, 3, 3, 84507459],"float32"), axis=1, )
2025-03-20 17:46:08.064065 test begin: paddle.squeeze(Tensor([3, 1, 3, 40, 6338060],"float32"), axis=1, )

[Pass] paddle.squeeze(Tensor([3, 1, 3, 40, 6338060],"float32"), axis=1, )
2025-03-20 17:49:03.046911 test begin: paddle.squeeze(Tensor([3, 1, 3, 6338060, 40],"float32"), axis=1, )

[Pass] paddle.squeeze(Tensor([3, 1, 3, 6338060, 40],"float32"), axis=1, )
2025-03-20 17:51:59.584511 test begin: paddle.squeeze(Tensor([3, 1, 3, 84507459, 3],"float32"), axis=1, )

[Pass] paddle.squeeze(Tensor([3, 1, 3, 84507459, 3],"float32"), axis=1, )
2025-03-20 17:54:46.088201 test begin: paddle.squeeze(Tensor([3, 1, 40, 40, 475355],"float32"), axis=1, )

[Pass] paddle.squeeze(Tensor([3, 1, 40, 40, 475355],"float32"), axis=1, )
2025-03-20 17:57:29.461101 test begin: paddle.squeeze(Tensor([3, 1, 40, 6338060, 3],"float32"), axis=1, )

[Pass] paddle.squeeze(Tensor([3, 1, 40, 6338060, 3],"float32"), axis=1, )
2025-03-20 18:00:14.794146 test begin: paddle.squeeze(Tensor([3, 1, 475355, 40, 40],"float32"), axis=1, )

[Pass] paddle.squeeze(Tensor([3, 1, 475355, 40, 40],"float32"), axis=1, )
2025-03-20 18:03:01.687412 test begin: paddle.squeeze(Tensor([3, 1, 6338060, 40, 3],"float32"), axis=1, )

[Pass] paddle.squeeze(Tensor([3, 1, 6338060, 40, 3],"float32"), axis=1, )
2025-03-20 18:06:09.486228 test begin: paddle.squeeze(Tensor([3, 158452, 3, 40, 40],"float32"), axis=1, )

[Pass] paddle.squeeze(Tensor([3, 158452, 3, 40, 40],"float32"), axis=1, )
2025-03-20 18:09:20.364872 test begin: paddle.squeeze(Tensor([3, 158452, 40, 40, 3],"float32"), axis=1, )

[Pass] paddle.squeeze(Tensor([3, 158452, 40, 40, 3],"float32"), axis=1, )
2025-03-20 18:12:11.532315 test begin: paddle.squeeze(Tensor([3, 2, 380283564],"float32"), axis=2, )

[Pass] paddle.squeeze(Tensor([3, 2, 380283564],"float32"), axis=2, )
2025-03-20 18:15:15.055187 test begin: paddle.squeeze(Tensor([3, 23860930, 3, 4, 1, 5],"float16"), axis=4, )

[Pass] paddle.squeeze(Tensor([3, 23860930, 3, 4, 1, 5],"float16"), axis=4, )
2025-03-20 18:34:05.828455 test begin: paddle.squeeze(Tensor([3, 47721859, 3, 1, 2, 5],"float16"), axis=3, )

[Pass] paddle.squeeze(Tensor([3, 47721859, 3, 1, 2, 5],"float16"), axis=3, )
2025-03-20 18:50:02.780876 test begin: paddle.squeeze(Tensor([3, 52818, 3, 1600, 3],"float32"), axis=1, )

[Pass] paddle.squeeze(Tensor([3, 52818, 3, 1600, 3],"float32"), axis=1, )
2025-03-20 18:52:46.943485 test begin: paddle.squeeze(Tensor([3, 52818, 3, 3, 1600],"float32"), axis=1, )

[Pass] paddle.squeeze(Tensor([3, 52818, 3, 3, 1600],"float32"), axis=1, )
2025-03-20 18:55:33.598116 test begin: paddle.squeeze(Tensor([3, 59652324, 3, 4, 2, 1],"float16"), axis=5, )

[Pass] paddle.squeeze(Tensor([3, 59652324, 3, 4, 2, 1],"float16"), axis=5, )
2025-03-20 19:12:55.263576 test begin: paddle.squeeze(Tensor([3, 6, 11930465, 4, 1, 5],"float16"), axis=4, )

[Pass] paddle.squeeze(Tensor([3, 6, 11930465, 4, 1, 5],"float16"), axis=4, )
2025-03-20 19:29:59.666795 test begin: paddle.squeeze(Tensor([3, 6, 23860930, 1, 2, 5],"float16"), axis=3, )

[Pass] paddle.squeeze(Tensor([3, 6, 23860930, 1, 2, 5],"float16"), axis=3, )
2025-03-20 19:46:56.153534 test begin: paddle.squeeze(Tensor([3, 6, 29826162, 4, 2, 1],"float16"), axis=5, )

[Pass] paddle.squeeze(Tensor([3, 6, 29826162, 4, 2, 1],"float16"), axis=5, )
2025-03-20 20:03:36.926909 test begin: paddle.squeeze(Tensor([3, 6, 3, 1, 15907287, 5],"float16"), axis=3, )

[Pass] paddle.squeeze(Tensor([3, 6, 3, 1, 15907287, 5],"float16"), axis=3, )
2025-03-20 20:20:11.564525 test begin: paddle.squeeze(Tensor([3, 6, 3, 1, 2, 39768216],"float16"), axis=3, )

[Pass] paddle.squeeze(Tensor([3, 6, 3, 1, 2, 39768216],"float16"), axis=3, )
2025-03-20 20:36:38.367220 test begin: paddle.squeeze(Tensor([3, 6, 3, 15907287, 1, 5],"float16"), axis=4, )

[Pass] paddle.squeeze(Tensor([3, 6, 3, 15907287, 1, 5],"float16"), axis=4, )
2025-03-20 20:52:50.570135 test begin: paddle.squeeze(Tensor([3, 6, 3, 39768216, 2, 1],"float16"), axis=5, )

[Pass] paddle.squeeze(Tensor([3, 6, 3, 39768216, 2, 1],"float16"), axis=5, )
2025-03-20 21:09:16.081708 test begin: paddle.squeeze(Tensor([3, 6, 3, 4, 1, 19884108],"float16"), axis=4, )

[Pass] paddle.squeeze(Tensor([3, 6, 3, 4, 1, 19884108],"float16"), axis=4, )
2025-03-20 21:25:19.457046 test begin: paddle.squeeze(Tensor([3, 6, 3, 4, 19884108, 1],"float16"), axis=5, )

[Pass] paddle.squeeze(Tensor([3, 6, 3, 4, 19884108, 1],"float16"), axis=5, )
2025-03-20 21:41:32.092564 test begin: paddle.squeeze(Tensor([3, 6, 3, 4, 2, 9942054],"float16"), axis=5, )

[Pass] paddle.squeeze(Tensor([3, 6, 3, 4, 2, 9942054],"float16"), axis=5, )
2025-03-20 21:57:39.817311 test begin: paddle.squeeze(Tensor([3, 6, 3, 4, 3976822, 5],"float16"), axis=4, )

[Pass] paddle.squeeze(Tensor([3, 6, 3, 4, 3976822, 5],"float16"), axis=4, )
2025-03-20 22:13:46.590145 test begin: paddle.squeeze(Tensor([3, 6, 3, 7953644, 2, 5],"float16"), axis=3, )

[Pass] paddle.squeeze(Tensor([3, 6, 3, 7953644, 2, 5],"float16"), axis=3, )
2025-03-20 22:30:11.635748 test begin: paddle.squeeze(Tensor([3, 760567127, 1],"float32"), axis=2, )

[Pass] paddle.squeeze(Tensor([3, 760567127, 1],"float32"), axis=2, )
