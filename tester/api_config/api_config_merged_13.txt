paddle.abs(Tensor([1, 1],"float32"), )
paddle.abs(Tensor([1, 1444, 1, 1],"float32"), )
paddle.abs(Tensor([1, 36, 1, 1],"float32"), )
paddle.abs(Tensor([1, 38, 1],"float32"), )
paddle.abs(Tensor([1, 9, 1],"float32"), )
paddle.abs(Tensor([10, 1],"float32"), )
paddle.abs(Tensor([100, 1],"float32"), )
paddle.abs(Tensor([1000, 1],"float32"), )
paddle.abs(Tensor([10000, 1],"float32"), )
paddle.abs(Tensor([1024, 1],"float32"), )
paddle.abs(Tensor([12000, 1],"float32"), )
paddle.abs(Tensor([128, 1],"float32"), )
paddle.abs(Tensor([150, 1],"float32"), )
paddle.abs(Tensor([1638, 1],"float32"), )
paddle.abs(Tensor([2, 1],"float32"), )
paddle.abs(Tensor([200, 1],"float32"), )
paddle.abs(Tensor([2000, 1],"float32"), )
paddle.abs(Tensor([2048, 1],"float32"), )
paddle.abs(Tensor([22387],"float32"), )
paddle.abs(Tensor([2450, 1],"float32"), )
paddle.abs(Tensor([250, 1],"float32"), )
paddle.abs(Tensor([2500, 1],"float32"), )
paddle.abs(Tensor([256, 1],"float32"), )
paddle.abs(Tensor([2800, 1],"float32"), )
paddle.abs(Tensor([300, 1],"float32"), )
paddle.abs(Tensor([3000, 1],"float32"), )
paddle.abs(Tensor([315, 1],"float32"), )
paddle.abs(Tensor([3150, 1],"float32"), )
paddle.abs(Tensor([32, 1, 240, 240],"float32"), )
paddle.abs(Tensor([32, 1, 241, 241],"float32"), )
paddle.abs(Tensor([3450, 1],"float32"), )
paddle.abs(Tensor([3500, 1],"float32"), )
paddle.abs(Tensor([36],"float32"), )
paddle.abs(Tensor([400, 1],"float32"), )
paddle.abs(Tensor([4000, 1],"float32"), )
paddle.abs(Tensor([4094, 1],"float32"), )
paddle.abs(Tensor([4096, 1],"float32"), )
paddle.abs(Tensor([4200, 1],"float32"), )
paddle.abs(Tensor([4800, 1],"float32"), )
paddle.abs(Tensor([5, 1],"float32"), )
paddle.abs(Tensor([500, 1],"float32"), )
paddle.abs(Tensor([5000, 1],"float32"), )
paddle.abs(Tensor([512, 1],"float32"), )
paddle.abs(Tensor([600, 1],"float32"), )
paddle.abs(Tensor([64, 1],"float32"), )
paddle.abs(Tensor([640, 1],"float32"), )
paddle.abs(Tensor([6400, 1],"float32"), )
paddle.abs(Tensor([7000, 1],"float32"), )
paddle.abs(Tensor([8, 1, 241, 241],"float32"), )
paddle.abs(Tensor([800, 1],"float32"), )
paddle.abs(Tensor([8192, 1],"float32"), )
paddle.abs(Tensor([8500, 1],"float32"), )
paddle.abs(Tensor([93401, 1],"float32"), )
paddle.abs(x=Tensor([100, 18, 3, 3],"float32"), )
paddle.abs(x=Tensor([100, 38, 10],"float32"), )
paddle.abs(x=Tensor([100, 722, 2, 2],"float32"), )
paddle.abs(x=Tensor([100, 9, 5],"float32"), )
paddle.abs(x=Tensor([227, 18, 3, 3],"float32"), )
paddle.abs(x=Tensor([227, 9, 5],"float32"), )
paddle.abs(x=Tensor([256, 18, 3, 3],"float32"), )
paddle.abs(x=Tensor([256, 38, 10],"float32"), )
paddle.abs(x=Tensor([256, 722, 2, 2],"float32"), )
paddle.abs(x=Tensor([256, 9, 5],"float32"), )
paddle.abs(x=Tensor([56, 38, 10],"float32"), )
paddle.abs(x=Tensor([56, 722, 2, 2],"float32"), )
paddle.abs(x=Tensor([82, 18, 3, 3],"float32"), )
paddle.abs(x=Tensor([82, 9, 5],"float32"), )
paddle.abs(x=Tensor([87, 38, 10],"float32"), )
paddle.abs(x=Tensor([87, 722, 2, 2],"float32"), )
paddle.add(Tensor([1, 64],"float32"), Tensor([],"float32"), )
paddle.add(Tensor([100, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.add(Tensor([100, 20],"float32"), Tensor([1, 20],"float32"), )
paddle.add(Tensor([100, 25],"float32"), Tensor([1, 25],"float32"), )
paddle.add(Tensor([100, 30],"float32"), Tensor([1, 30],"float32"), )
paddle.add(Tensor([1200, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.add(Tensor([1200, 25],"float32"), Tensor([1, 25],"float32"), )
paddle.add(Tensor([1291, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.add(Tensor([1291, 25],"float32"), Tensor([1, 25],"float32"), )
paddle.add(Tensor([1800, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.add(Tensor([1800, 20],"float32"), Tensor([1, 20],"float32"), )
paddle.add(Tensor([18211, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.add(Tensor([18211, 30],"float32"), Tensor([1, 30],"float32"), )
paddle.add(Tensor([2, 20],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([2, 25],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([2, 30],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([20, 1],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([20, 20],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([200, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.add(Tensor([200, 30],"float32"), Tensor([1, 30],"float32"), )
paddle.add(Tensor([25, 1],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([25, 25],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([256, 1],"float32"), Tensor([],"float32"), )
paddle.add(Tensor([256, 256],"float32"), Tensor([],"float32"), )
paddle.add(Tensor([2885, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.add(Tensor([2885, 20],"float32"), Tensor([1, 20],"float32"), )
paddle.add(Tensor([3, 1, 512, 512],"float16"), Tensor([3, 1, 512, 512],"float16"), )
paddle.add(Tensor([3, 128, 512, 512],"float16"), Tensor([3, 128, 512, 512],"float16"), )
paddle.add(Tensor([3, 8, 512, 512],"float16"), Tensor([3, 8, 512, 512],"float16"), )
paddle.add(Tensor([30, 1],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([30, 30],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([5000, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.add(Tensor([5000, 30],"float32"), Tensor([1, 30],"float32"), )
paddle.add(Tensor([6, 1, 512, 512],"float16"), Tensor([6, 1, 512, 512],"float16"), )
paddle.add(Tensor([6, 128, 512, 512],"float16"), Tensor([6, 128, 512, 512],"float16"), )
paddle.add(Tensor([6, 8, 512, 512],"float16"), Tensor([6, 8, 512, 512],"float16"), )
paddle.add(Tensor([6284, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.add(Tensor([6284, 20],"float32"), Tensor([1, 20],"float32"), )
paddle.add(Tensor([6284, 25],"float32"), Tensor([1, 25],"float32"), )
paddle.add(Tensor([6284, 30],"float32"), Tensor([1, 30],"float32"), )
paddle.add(Tensor([64, 32],"float32"), Tensor([],"float32"), )
paddle.add(Tensor([64, 64],"float32"), Tensor([],"float32"), )
paddle.add(Tensor([8, 1, 512, 512],"float16"), Tensor([8, 1, 512, 512],"float16"), )
paddle.add(Tensor([8, 128, 512, 512],"float16"), Tensor([8, 128, 512, 512],"float16"), )
paddle.add(Tensor([8, 8, 512, 512],"float16"), Tensor([8, 8, 512, 512],"float16"), )
paddle.as_complex(Tensor([20, 64, 64, 2],"float32"), )
paddle.as_complex(Tensor([32, 15, 8, 8, 32, 2],"float32"), )
paddle.as_complex(Tensor([32, 32, 12, 12, 2],"float32"), )
paddle.as_complex(Tensor([4, 32, 32, 16, 2],"float32"), )
paddle.as_complex(Tensor([8, 8, 4, 2],"float32"), )
paddle.as_complex(Tensor([8, 8, 4, 4, 4, 2],"float32"), )
paddle.as_real(Tensor([4, 32, 32, 16],"complex64"), )
paddle.as_real(Tensor([4, 32, 32, 33],"complex64"), )
paddle.assign(Tensor([1, 1444, 1, 1],"float32"), output=Tensor([1, 1444, 1, 1],"float32"), )
paddle.assign(Tensor([1, 36, 1, 1],"float32"), output=Tensor([1, 36, 1, 1],"float32"), )
paddle.assign(Tensor([1, 38, 1],"float32"), output=Tensor([1, 38, 1],"float32"), )
paddle.assign(Tensor([1, 9, 1],"float32"), output=Tensor([1, 9, 1],"float32"), )
paddle.assign(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.assign(Tensor([15, 48],"float32"), Tensor([15, 48],"float32"), )
paddle.assign(Tensor([17157],"float32"), Tensor([17157],"float32"), )
paddle.assign(Tensor([1861],"float32"), Tensor([1861],"float32"), )
paddle.assign(Tensor([2, 20],"float32"), Tensor([2, 20],"float32"), )
paddle.assign(Tensor([2, 50],"float32"), Tensor([2, 50],"float32"), )
paddle.assign(Tensor([2, 64],"float32"), Tensor([2, 64],"float32"), )
paddle.assign(Tensor([20, 1],"float32"), Tensor([20, 1],"float32"), )
paddle.assign(Tensor([20, 20],"float32"), Tensor([20, 20],"float32"), )
paddle.assign(Tensor([20],"float32"), Tensor([20],"float32"), )
paddle.assign(Tensor([23619],"float32"), Tensor([23619],"float32"), )
paddle.assign(Tensor([256, 1],"float32"), Tensor([256, 1],"float32"), )
paddle.assign(Tensor([256, 256],"float32"), Tensor([256, 256],"float32"), )
paddle.assign(Tensor([256],"float32"), Tensor([256],"float32"), )
paddle.assign(Tensor([3, 90],"float32"), Tensor([3, 90],"float32"), )
paddle.assign(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.assign(Tensor([32, 32, 12, 12, 2],"float32"), Tensor([32, 32, 12, 12, 2],"float32"), )
paddle.assign(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.assign(Tensor([48, 1],"float32"), Tensor([48, 1],"float32"), )
paddle.assign(Tensor([48, 48],"float32"), Tensor([48, 48],"float32"), )
paddle.assign(Tensor([48],"float32"), Tensor([48],"float32"), )
paddle.assign(Tensor([5],"float32"), Tensor([5],"float32"), )
paddle.assign(Tensor([50, 3],"float32"), Tensor([50, 3],"float32"), )
paddle.assign(Tensor([50, 50],"float32"), Tensor([50, 50],"float32"), )
paddle.assign(Tensor([50],"float32"), Tensor([50],"float32"), )
paddle.assign(Tensor([64, 1],"float32"), )
paddle.assign(Tensor([64, 5],"float32"), Tensor([64, 5],"float32"), )
paddle.assign(Tensor([64, 64],"float32"), Tensor([64, 64],"float32"), )
paddle.assign(Tensor([64],"float32"), Tensor([64],"float32"), )
paddle.assign(Tensor([66244],"float32"), Tensor([66244],"float32"), )
paddle.assign(Tensor([7953],"float32"), Tensor([7953],"float32"), )
paddle.assign(Tensor([90, 4],"float32"), Tensor([90, 4],"float32"), )
paddle.assign(Tensor([90, 90],"float32"), Tensor([90, 90],"float32"), )
paddle.assign(Tensor([90],"float32"), Tensor([90],"float32"), )
paddle.bmm(Tensor([11661, 1, 3],"float32"), Tensor([11661, 3, 128],"float32"), )
paddle.bmm(Tensor([15548, 1, 3],"float32"), Tensor([15548, 3, 128],"float32"), )
paddle.bmm(Tensor([256, 32, 32],"float32"), Tensor([256, 32, 16],"float32"), )
paddle.bmm(Tensor([26736, 1, 3],"float32"), Tensor([26736, 3, 128],"float32"), )
paddle.bmm(Tensor([3029, 1, 3],"float32"), Tensor([3029, 3, 128],"float32"), )
paddle.bmm(Tensor([3887, 1, 3],"float32"), Tensor([3887, 3, 128],"float32"), )
paddle.bmm(Tensor([512, 32, 32],"float32"), Tensor([512, 32, 16],"float32"), )
paddle.bmm(Tensor([64, 128, 128],"float32"), Tensor([64, 128, 4],"float32"), )
paddle.bmm(Tensor([6684, 1, 3],"float32"), Tensor([6684, 3, 128],"float32"), )
paddle.broadcast_to(Tensor([1],"float32"), list[416,4,30,30,], )
paddle.broadcast_to(Tensor([1],"float32"), list[512,4,30,30,], )
paddle.broadcast_to(Tensor([1],"float32"), list[52,4,30,30,], )
paddle.broadcast_to(Tensor([20],"float32"), list[1609,20,], )
paddle.broadcast_to(Tensor([20],"float32"), list[25,20,], )
paddle.broadcast_to(Tensor([20],"float32"), list[400,20,], )
paddle.broadcast_to(Tensor([20],"float32"), list[64,20,], )
paddle.broadcast_to(Tensor([20],"float32"), list[8192,20,], )
paddle.broadcast_to(Tensor([20],"float32"), list[9801,20,], )
paddle.broadcast_to(Tensor([416, 1, 30, 30],"bool"), list[416,4,30,30,], )
paddle.broadcast_to(Tensor([512, 1, 30, 30],"bool"), list[512,4,30,30,], )
paddle.broadcast_to(Tensor([52, 1, 30, 30],"bool"), list[52,4,30,30,], )
paddle.clip(Tensor([1, 64],"float32"), min=-2.0, max=2.0, )
paddle.clip(Tensor([2, 20],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([2, 25],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([2, 30],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([20, 1],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([20, 20],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([25, 1],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([25, 25],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([256, 1],"float32"), min=-2.0, max=2.0, )
paddle.clip(Tensor([256, 256],"float32"), min=-2.0, max=2.0, )
paddle.clip(Tensor([3, 3840, 10240],"float32"), 0, 255, )
paddle.clip(Tensor([30, 1],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([30, 30],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([64, 32],"float32"), min=-2.0, max=2.0, )
paddle.clip(Tensor([64, 64],"float32"), min=-2.0, max=2.0, )
paddle.complex(real=Tensor([1],"float32"), imag=Tensor([1],"float32"), )
paddle.complex(Tensor([128, 64, 8, 5],"float32"), Tensor([128, 64, 8, 5],"float32"), )
paddle.complex(Tensor([16, 32, 16, 9],"float32"), Tensor([16, 32, 16, 9],"float32"), )
paddle.complex(Tensor([16, 64, 8, 5],"float32"), Tensor([16, 64, 8, 5],"float32"), )
paddle.complex(Tensor([20, 64, 1001],"float32"), Tensor([20, 64, 1001],"float32"), )
paddle.complex(Tensor([20, 64, 1051],"float32"), Tensor([20, 64, 1051],"float32"), )
paddle.complex(Tensor([32, 32, 16, 9],"float32"), Tensor([32, 32, 16, 9],"float32"), )
paddle.complex(Tensor([32, 32, 32],"float32"), Tensor([32, 32, 32],"float32"), )
paddle.complex(Tensor([32, 64, 8, 5],"float32"), Tensor([32, 64, 8, 5],"float32"), )
paddle.complex(Tensor([4, 32, 32, 16],"float32"), Tensor([4, 32, 32, 16],"float32"), )
paddle.complex(Tensor([64, 32, 16, 9],"float32"), Tensor([64, 32, 16, 9],"float32"), )
paddle.complex(Tensor([64, 64, 8, 5],"float32"), Tensor([64, 64, 8, 5],"float32"), )
paddle.complex(Tensor([96, 32, 16, 9],"float32"), Tensor([96, 32, 16, 9],"float32"), )
paddle.concat(list[Tensor([1, 1, 512, 512],"float16"),Tensor([1, 1, 512, 512],"float16"),Tensor([1, 1, 512, 512],"float16"),], axis=1, )
paddle.concat(list[Tensor([1, 1, 512, 512],"float32"),Tensor([1, 1, 512, 512],"float32"),Tensor([1, 1, 512, 512],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1],"float16"),], )
paddle.concat(list[Tensor([1, 1],"float32"),], )
paddle.concat(list[Tensor([1, 1],"float32"),Tensor([1, 1],"float32"),], -1, )
paddle.concat(list[Tensor([1, 1],"float32"),Tensor([1, 1],"float32"),Tensor([1, 1],"float32"),], -1, )
paddle.concat(list[Tensor([1, 1],"int64"),], )
paddle.concat(list[Tensor([1, 11901],"int64"),Tensor([1, 11901],"int64"),], axis=0, )
paddle.concat(list[Tensor([1, 128, 64, 64],"float16"),], )
paddle.concat(list[Tensor([1, 1878],"int64"),Tensor([1, 1878],"int64"),], axis=0, )
paddle.concat(list[Tensor([1, 19806],"int64"),Tensor([1, 19806],"int64"),], axis=0, )
paddle.concat(list[Tensor([1, 256, 64, 64],"float16"),], )
paddle.concat(list[Tensor([1, 26408],"int64"),Tensor([1, 26408],"int64"),], axis=0, )
paddle.concat(list[Tensor([1, 310, 1],"float32"),Tensor([1, 310, 1],"float32"),Tensor([1, 310, 1],"float32"),], -1, )
paddle.concat(list[Tensor([1, 32, 256, 256],"float16"),], )
paddle.concat(list[Tensor([1, 47604],"int64"),Tensor([1, 47604],"int64"),], axis=0, )
paddle.concat(list[Tensor([1, 64, 128, 128],"float16"),], )
paddle.concat(list[Tensor([1, 6602],"int64"),Tensor([1, 6602],"int64"),], axis=0, )
paddle.concat(list[Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"int32"),Tensor([1],"int32"),], )
paddle.concat(list[Tensor([1],"int64"),], )
paddle.concat(list[Tensor([10, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([100, 1],"float32"),], )
paddle.concat(list[Tensor([100, 1],"float32"),Tensor([100, 1],"float32"),], 1, )
paddle.concat(list[Tensor([100, 100, 100, 1],"float32"),], )
paddle.concat(list[Tensor([100, 376, 1],"float32"),], )
paddle.concat(list[Tensor([100, 376, 1],"float32"),Tensor([100, 376, 1],"float32"),], 2, )
paddle.concat(list[Tensor([100, 376, 1],"float32"),Tensor([100, 376, 1],"float32"),Tensor([100, 376, 1],"float32"),], 2, )
paddle.concat(list[Tensor([100, 376, 376],"float32"),], )
paddle.concat(list[Tensor([100],"float32"),Tensor([50],"float32"),Tensor([2500],"float32"),Tensor([50],"float32"),Tensor([2500],"float32"),Tensor([50],"float32"),Tensor([2500],"float32"),Tensor([50],"float32"),Tensor([150],"float32"),Tensor([3],"float32"),], axis=0, )
paddle.concat(list[Tensor([1000, 1, 31, 31],"float32"),], axis=1, )
paddle.concat(list[Tensor([1000, 1],"float32"),], )
paddle.concat(list[Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([1000, 1],"float32"),Tensor([992, 1],"float32"),], )
paddle.concat(list[Tensor([1000, 10],"float32"),Tensor([1000, 10],"float32"),], axis=-1, )
paddle.concat(list[Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([8810, 1],"float32"),], )
paddle.concat(list[Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([10000, 1],"float32"),Tensor([6512, 1],"float32"),], )
paddle.concat(list[Tensor([10000, 100],"float32"),Tensor([10000, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([100000, 1],"float32"),], )
paddle.concat(list[Tensor([1002, 1],"float32"),Tensor([1002, 1],"float32"),], -1, )
paddle.concat(list[Tensor([1002, 1],"float32"),Tensor([1002, 1],"float32"),Tensor([1002, 1],"float32"),Tensor([1002, 1],"float32"),Tensor([1002, 1],"float32"),Tensor([1002, 1],"float32"),], -1, )
paddle.concat(list[Tensor([101, 1],"float32"),Tensor([101, 1],"float32"),], -1, )
paddle.concat(list[Tensor([10201, 1],"float32"),], )
paddle.concat(list[Tensor([10201, 1],"float32"),Tensor([10201, 1],"float32"),], -1, )
paddle.concat(list[Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),], -1, )
paddle.concat(list[Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([1024, 1],"float32"),Tensor([544, 1],"float32"),], )
paddle.concat(list[Tensor([1024, 102],"float32"),Tensor([1024, 102],"float32"),], axis=-1, )
paddle.concat(list[Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),], -1, )
paddle.concat(list[Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([10240, 1],"float32"),Tensor([1820, 1],"float32"),], )
paddle.concat(list[Tensor([105344, 128],"float32"),Tensor([105344, 128],"float32"),Tensor([105344, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1100, 1],"float32"),Tensor([1100, 1],"float32"),Tensor([1100, 1],"float32"),], -1, )
paddle.concat(list[Tensor([11661, 128],"float32"),Tensor([11661, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1168, 1],"float32"),Tensor([1168, 1],"float32"),Tensor([1168, 1],"float32"),], -1, )
paddle.concat(list[Tensor([1200, 1],"float32"),Tensor([1200, 1],"float32"),], 1, )
paddle.concat(list[Tensor([1209, 1],"float32"),Tensor([1209, 1],"float32"),Tensor([1209, 1],"float32"),], -1, )
paddle.concat(list[Tensor([1240, 128],"float32"),Tensor([1240, 128],"float32"),Tensor([1240, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([125, 1],"float32"),Tensor([125, 1],"float32"),], -1, )
paddle.concat(list[Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),], -1, )
paddle.concat(list[Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),], -1, )
paddle.concat(list[Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([128, 1],"float32"),Tensor([89, 1],"float32"),], )
paddle.concat(list[Tensor([128],"float32"),Tensor([64],"float32"),Tensor([4096],"float32"),Tensor([64],"float32"),Tensor([4096],"float32"),Tensor([64],"float32"),Tensor([4096],"float32"),Tensor([64],"float32"),Tensor([4096],"float32"),Tensor([64],"float32"),Tensor([320],"float32"),Tensor([5],"float32"),], axis=0, )
paddle.concat(list[Tensor([128512, 1],"float32"),], )
paddle.concat(list[Tensor([128512, 1],"float32"),Tensor([128512, 1],"float32"),], -1, )
paddle.concat(list[Tensor([128512, 1],"float32"),Tensor([128512, 1],"float32"),Tensor([128512, 1],"float32"),Tensor([128512, 1],"float32"),Tensor([128512, 1],"float32"),], -1, )
paddle.concat(list[Tensor([1291, 1],"float32"),], )
paddle.concat(list[Tensor([1291, 1],"float32"),Tensor([1291, 1],"float32"),], 1, )
paddle.concat(list[Tensor([1300, 1],"float32"),Tensor([1300, 1],"float32"),Tensor([1300, 1],"float32"),], -1, )
paddle.concat(list[Tensor([1358, 128],"float32"),Tensor([1358, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([147015, 1],"float32"),Tensor([147015, 1],"float32"),Tensor([147015, 1],"float32"),], -1, )
paddle.concat(list[Tensor([1485, 1],"float32"),Tensor([1485, 1],"float32"),Tensor([1485, 1],"float32"),], -1, )
paddle.concat(list[Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),Tensor([15, 1],"float64"),], )
paddle.concat(list[Tensor([1515, 1],"float32"),Tensor([1515, 1],"float32"),Tensor([1515, 1],"float32"),], -1, )
paddle.concat(list[Tensor([15548, 128],"float32"),Tensor([15548, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([16, 1],"float32"),Tensor([16, 1],"float32"),], -1, )
paddle.concat(list[Tensor([16, 1],"float32"),Tensor([16, 1],"float32"),Tensor([16, 1],"float32"),], -1, )
paddle.concat(list[Tensor([16, 64, 10, 10],"float32"),Tensor([16, 64, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 64, 20, 20],"float32"),Tensor([16, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1609, 1],"float32"),Tensor([1609, 1],"float32"),], -1, )
paddle.concat(list[Tensor([16800, 1],"float32"),], )
paddle.concat(list[Tensor([16800, 1],"float32"),Tensor([16800, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([16800, 1],"float32"),Tensor([16800, 1],"float32"),Tensor([16800, 1],"float32"),Tensor([16800, 1],"float32"),Tensor([16800, 1],"float32"),Tensor([16800, 1],"float32"),Tensor([16800, 1],"float32"),Tensor([16800, 1],"float32"),Tensor([16800, 1],"float32"),Tensor([16800, 1],"float32"),Tensor([16800, 1],"float32"),Tensor([16800, 1],"float32"),Tensor([16800, 1],"float32"),Tensor([16800, 1],"float32"),Tensor([16800, 1],"float32"),], -1, )
paddle.concat(list[Tensor([17, 376, 1],"float32"),], )
paddle.concat(list[Tensor([17152, 1],"float32"),], )
paddle.concat(list[Tensor([17152, 1],"float32"),Tensor([17152, 1],"float32"),], -1, )
paddle.concat(list[Tensor([17152, 1],"float32"),Tensor([17152, 1],"float32"),Tensor([17152, 1],"float32"),], -1, )
paddle.concat(list[Tensor([1800, 1],"float32"),Tensor([1800, 1],"float32"),], 1, )
paddle.concat(list[Tensor([1820, 1],"float32"),Tensor([1820, 1],"float32"),Tensor([1820, 1],"float32"),], -1, )
paddle.concat(list[Tensor([18211, 1],"float32"),], )
paddle.concat(list[Tensor([18211, 1],"float32"),Tensor([18211, 1],"float32"),], 1, )
paddle.concat(list[Tensor([18211, 1],"float32"),Tensor([2885, 1],"float32"),Tensor([1291, 1],"float32"),], )
paddle.concat(list[Tensor([19528, 128],"float32"),Tensor([19528, 128],"float32"),Tensor([19528, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 
paddle.concat(list[Tensor([2, 1501, 1],"float32"),], )
paddle.concat(list[Tensor([20, 1],"float32"),], )
paddle.concat(list[Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),], -1, )
paddle.concat(list[Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),Tensor([20, 1],"float32"),], )
paddle.concat(list[Tensor([20, 64, 64, 1],"float32"),Tensor([20, 64, 64, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([200, 1],"float32"),Tensor([200, 1],"float32"),], 1, )
paddle.concat(list[Tensor([200, 1],"float32"),Tensor([200, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([200, 128],"float32"),Tensor([200, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([200, 64],"float32"),Tensor([200, 64],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2000, 1],"float32"),Tensor([2000, 1],"float32"),Tensor([2000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([20000, 1],"float32"),Tensor([20000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([20000, 1],"float32"),Tensor([20000, 1],"float32"),Tensor([20000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([20000, 1],"float32"),Tensor([20000, 1],"float32"),Tensor([20000, 1],"float32"),Tensor([20000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([20000, 1],"float32"),Tensor([20000, 1],"float32"),Tensor([20000, 1],"float32"),Tensor([20000, 1],"float32"),Tensor([20000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([20000, 1],"float32"),Tensor([20000, 1],"float32"),Tensor([20000, 1],"float32"),Tensor([20000, 1],"float32"),Tensor([20000, 1],"float32"),Tensor([20000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([202, 1],"float32"),Tensor([202, 1],"float32"),], -1, )
paddle.concat(list[Tensor([202, 1],"float32"),Tensor([202, 1],"float32"),Tensor([202, 1],"float32"),], -1, )
paddle.concat(list[Tensor([2048, 1],"float32"),Tensor([2048, 1],"float32"),Tensor([2048, 1],"float32"),], -1, )
paddle.concat(list[Tensor([20600, 1],"float32"),], )
paddle.concat(list[Tensor([20600, 1],"float32"),Tensor([20600, 1],"float32"),], -1, )
paddle.concat(list[Tensor([22120, 1],"float32"),], )
paddle.concat(list[Tensor([22120, 1],"float32"),Tensor([22120, 1],"float32"),Tensor([22120, 1],"float32"),Tensor([22120, 1],"float32"),Tensor([22120, 1],"float32"),Tensor([22120, 1],"float32"),Tensor([22120, 1],"float32"),Tensor([22120, 1],"float32"),Tensor([22120, 1],"float32"),Tensor([22120, 1],"float32"),Tensor([22120, 1],"float32"),Tensor([22120, 1],"float32"),Tensor([22120, 1],"float32"),Tensor([22120, 1],"float32"),Tensor([22120, 1],"float32"),], -1, )
paddle.concat(list[Tensor([22387, 1],"float32"),], )
paddle.concat(list[Tensor([228595, 1],"float32"),Tensor([228595, 1],"float32"),Tensor([228595, 1],"float32"),], -1, )
paddle.concat(list[Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),], -1, )
paddle.concat(list[Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),Tensor([2419, 1],"float32"),], )
paddle.concat(list[Tensor([2430, 1],"float32"),Tensor([2430, 1],"float32"),Tensor([2430, 1],"float32"),], -1, )
paddle.concat(list[Tensor([25, 1],"float32"),Tensor([25, 1],"float32"),], -1, )
paddle.concat(list[Tensor([25, 1],"float32"),Tensor([25, 1],"float32"),Tensor([25, 1],"float32"),], -1, )
paddle.concat(list[Tensor([250, 1],"float32"),Tensor([250, 1],"float32"),Tensor([250, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([250, 30],"float32"),Tensor([250, 30],"float32"),], axis=-1, )
paddle.concat(list[Tensor([256, 1],"float32"),Tensor([256, 1],"float32"),], -1, )
paddle.concat(list[Tensor([256, 1],"float32"),Tensor([256, 1],"float32"),Tensor([256, 1],"float32"),], -1, )
paddle.concat(list[Tensor([256, 1],"float32"),Tensor([256, 1],"float32"),Tensor([256, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([256, 3, 64, 128],"float32"),Tensor([256, 1, 64, 128],"float32"),], axis=1, )
paddle.concat(list[Tensor([256, 30],"float32"),Tensor([256, 30],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2601, 1],"float32"),Tensor([2601, 1],"float32"),], -1, )
paddle.concat(list[Tensor([26336, 128],"float32"),Tensor([26336, 128],"float32"),Tensor([26336, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([26736, 128],"float32"),Tensor([26736, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([270],"float32"),Tensor([90],"float32"),Tensor([8100],"float32"),Tensor([90],"float32"),Tensor([8100],"float32"),Tensor([90],"float32"),Tensor([8100],"float32"),Tensor([90],"float32"),Tensor([8100],"float32"),Tensor([90],"float32"),Tensor([8100],"float32"),Tensor([90],"float32"),Tensor([8100],"float32"),Tensor([90],"float32"),Tensor([8100],"float32"),Tensor([90],"float32"),Tensor([8100],"float32"),Tensor([90],"float32"),Tensor([360],"float32"),Tensor([4],"float32"),], axis=0, )
paddle.concat(list[Tensor([28, 1],"float32"),Tensor([28, 1],"float32"),Tensor([28, 1],"float32"),], -1, )
paddle.concat(list[Tensor([28, 32, 170, 12],"float32"),Tensor([28, 64, 170, 12],"float32"),Tensor([28, 64, 170, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([28, 64, 170, 12],"float32"),Tensor([28, 64, 170, 12],"float32"),Tensor([28, 64, 170, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([282600, 1],"float32"),Tensor([282600, 1],"float32"),Tensor([282600, 1],"float32"),], -1, )
paddle.concat(list[Tensor([2885, 1],"float32"),], )
paddle.concat(list[Tensor([2885, 1],"float32"),Tensor([2885, 1],"float32"),], 1, )
paddle.concat(list[Tensor([3, 1, 512, 512],"float16"),], )
paddle.concat(list[Tensor([3, 1, 512, 512],"float32"),Tensor([3, 1, 512, 512],"float32"),], axis=1, )
paddle.concat(list[Tensor([3, 1],"float16"),], )
paddle.concat(list[Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),], )
paddle.concat(list[Tensor([3, 128, 64, 64],"float16"),], )
paddle.concat(list[Tensor([3, 256, 64, 64],"float16"),], )
paddle.concat(list[Tensor([3, 32, 256, 256],"float16"),], )
paddle.concat(list[Tensor([3, 64, 128, 128],"float16"),], )
paddle.concat(list[Tensor([3029, 128],"float32"),Tensor([3029, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([315, 1],"float32"),Tensor([315, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([32, 1, 240, 240],"float32"),], axis=1, )
paddle.concat(list[Tensor([32, 1, 241, 241],"float32"),], axis=1, )
paddle.concat(list[Tensor([32, 1],"float32"),Tensor([32, 1],"float32"),], -1, )
paddle.concat(list[Tensor([32, 1],"float32"),Tensor([32, 1],"float32"),Tensor([32, 1],"float32"),], -1, )
paddle.concat(list[Tensor([32, 1],"float32"),Tensor([32, 1],"float32"),Tensor([32, 1],"float32"),Tensor([4, 1],"float32"),], )
paddle.concat(list[Tensor([32, 32, 241, 241],"float32"),], axis=1, )
paddle.concat(list[Tensor([32812, 1],"float32"),Tensor([32812, 1],"float32"),Tensor([32812, 1],"float32"),], -1, )
paddle.concat(list[Tensor([32812, 1],"float32"),Tensor([32812, 1],"float32"),Tensor([32812, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([32812, 1],"float32"),Tensor([32812, 1],"float32"),Tensor([32812, 1],"float32"),Tensor([32812, 1],"float32"),Tensor([32812, 1],"float32"),Tensor([32812, 1],"float32"),Tensor([32812, 1],"float32"),Tensor([32812, 1],"float32"),], -1, )
paddle.concat(list[Tensor([34304, 1],"float32"),], )
paddle.concat(list[Tensor([34304, 1],"float32"),Tensor([34304, 1],"float32"),], -1, )
paddle.concat(list[Tensor([34304, 1],"float32"),Tensor([34304, 1],"float32"),Tensor([34304, 1],"float32"),], -1, )
paddle.concat(list[Tensor([3488, 1],"float32"),Tensor([3488, 1],"float32"),Tensor([3488, 1],"float32"),], -1, )
paddle.concat(list[Tensor([36, 1],"float32"),Tensor([36, 1],"float32"),], -1, )
paddle.concat(list[Tensor([384],"float32"),Tensor([65536],"float32"),Tensor([256],"float32"),Tensor([256],"float32"),Tensor([65536],"float32"),Tensor([256],"float32"),Tensor([256],"float32"),Tensor([1],"float32"),Tensor([65536],"float32"),Tensor([256],"float32"),Tensor([256],"float32"),Tensor([65536],"float32"),Tensor([256],"float32"),Tensor([256],"float32"),Tensor([65536],"float32"),Tensor([256],"float32"),Tensor([256],"float32"),Tensor([1],"float32"),Tensor([65536],"float32"),Tensor([256],"float32"),Tensor([256],"float32"),Tensor([65536],"float32"),Tensor([256],"float32"),Tensor([256],"float32"),Tensor([65536],"float32"),Tensor([256],"float32"),Tensor([256],"float32"),Tensor([1],"float32"),Tensor([65536],"float32"),Tensor([256],"float32"),Tensor([256],"float32"),Tensor([65536],"float32"),Tensor([256],"float32"),Tensor([256],"float32"),Tensor([65536],"float32"),Tensor([256],"float32"),Tensor([256],"float32"),Tensor([256],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([3887, 128],"float32"),Tensor([3887, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([39992, 1],"float32"),Tensor([39992, 1],"float32"),Tensor([39992, 1],"float32"),], -1, )
paddle.concat(list[Tensor([40],"float32"),Tensor([20],"float32"),Tensor([20],"float32"),Tensor([400],"float32"),Tensor([20],"float32"),Tensor([20],"float32"),Tensor([400],"float32"),Tensor([20],"float32"),Tensor([20],"float32"),Tensor([400],"float32"),Tensor([20],"float32"),Tensor([20],"float32"),Tensor([400],"float32"),Tensor([20],"float32"),Tensor([20],"float32"),Tensor([20],"float32"),Tensor([1],"float32"),], axis=0, )
paddle.concat(list[Tensor([40],"float32"),Tensor([20],"float32"),Tensor([400],"float32"),Tensor([20],"float32"),Tensor([400],"float32"),Tensor([20],"float32"),Tensor([400],"float32"),Tensor([20],"float32"),Tensor([400],"float32"),Tensor([20],"float32"),Tensor([20],"float32"),Tensor([20],"float32"),Tensor([20],"float32"),Tensor([20],"float32"),Tensor([20],"float32"),Tensor([20],"float32"),Tensor([1],"float32"),], axis=0, )
paddle.concat(list[Tensor([400, 1],"float32"),Tensor([400, 1],"float32"),], -1, )
paddle.concat(list[Tensor([400, 1],"float32"),Tensor([400, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([400, 1],"float32"),Tensor([400, 1],"float32"),Tensor([400, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([400, 180],"float32"),Tensor([400, 180],"float32"),], axis=-1, )
paddle.concat(list[Tensor([400, 234],"float32"),Tensor([400, 234],"float32"),], axis=-1, )
paddle.concat(list[Tensor([400, 260],"float32"),Tensor([400, 260],"float32"),], axis=-1, )
paddle.concat(list[Tensor([4000, 1],"float32"),Tensor([4000, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([402, 1],"float32"),Tensor([402, 1],"float32"),], -1, )
paddle.concat(list[Tensor([402, 1],"float32"),Tensor([402, 1],"float32"),Tensor([402, 1],"float32"),], -1, )
paddle.concat(list[Tensor([402, 1],"float32"),Tensor([402, 1],"float32"),Tensor([402, 1],"float32"),Tensor([402, 1],"float32"),], -1, )
paddle.concat(list[Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),], -1, )
paddle.concat(list[Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([1300, 1],"float32"),], )
paddle.concat(list[Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([3488, 1],"float32"),], )
paddle.concat(list[Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([4096, 1],"float32"),Tensor([512, 1],"float32"),], )
paddle.concat(list[Tensor([4096, 1],"float32"),Tensor([4096, 2],"float32"),], -1, )
paddle.concat(list[Tensor([4096, 128],"float32"),Tensor([4096, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([4200, 1],"float32"),Tensor([4200, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([458, 128],"float32"),Tensor([458, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([48, 1],"float32"),Tensor([48, 1],"float32"),], -1, )
paddle.concat(list[Tensor([4800, 1],"float32"),], )
paddle.concat(list[Tensor([4800, 1],"float32"),Tensor([4800, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([4800, 1],"float32"),Tensor([4800, 1],"float32"),Tensor([4800, 1],"float32"),Tensor([4800, 1],"float32"),Tensor([4800, 1],"float32"),Tensor([4800, 1],"float32"),Tensor([4800, 1],"float32"),Tensor([4800, 1],"float32"),Tensor([4800, 1],"float32"),Tensor([4800, 1],"float32"),Tensor([4800, 1],"float32"),Tensor([4800, 1],"float32"),Tensor([4800, 1],"float32"),Tensor([4800, 1],"float32"),Tensor([4800, 1],"float32"),], -1, )
paddle.concat(list[Tensor([4830, 1],"float32"),Tensor([4830, 1],"float32"),Tensor([4830, 1],"float32"),], -1, )
paddle.concat(list[Tensor([4936, 128],"float32"),Tensor([4936, 128],"float32"),Tensor([4936, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([50, 1],"float32"),Tensor([50, 1],"float32"),Tensor([50, 1],"float32"),], -1, )
paddle.concat(list[Tensor([50, 128],"float32"),Tensor([50, 128],"float32"),], axis=1, )
paddle.concat(list[Tensor([50, 1501, 1],"float32"),], )
paddle.concat(list[Tensor([50, 1501, 1],"float32"),Tensor([50, 1501, 1],"float32"),Tensor([50, 1501, 1],"float32"),], 2, )
paddle.concat(list[Tensor([50, 1501, 1501],"float32"),], )
paddle.concat(list[Tensor([50, 39, 14, 14, 1],"float32"),Tensor([50, 39, 14, 14, 1],"float32"),Tensor([50, 39, 14, 14, 1],"float32"),Tensor([50, 39, 14, 14, 1],"float32"),], )
paddle.concat(list[Tensor([500, 1],"float32"),Tensor([500, 1],"float32"),Tensor([500, 1],"float32"),Tensor([500, 1],"float32"),Tensor([500, 1],"float32"),Tensor([500, 1],"float32"),Tensor([500, 1],"float32"),Tensor([500, 1],"float32"),Tensor([500, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([5000, 1],"float32"),Tensor([5000, 1],"float32"),], 1, )
paddle.concat(list[Tensor([50000, 1],"float32"),Tensor([50000, 1],"float32"),Tensor([50000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([50000, 1],"float32"),Tensor([50000, 1],"float32"),Tensor([50000, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([50000, 1],"float32"),Tensor([50000, 1],"float32"),Tensor([50000, 1],"float32"),Tensor([50000, 1],"float32"),Tensor([50000, 1],"float32"),Tensor([50000, 1],"float32"),Tensor([50000, 1],"float32"),Tensor([50000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([502, 1],"float32"),Tensor([502, 1],"float32"),], -1, )
paddle.concat(list[Tensor([502, 1],"float32"),Tensor([502, 1],"float32"),Tensor([502, 1],"float32"),Tensor([502, 1],"float32"),Tensor([502, 1],"float32"),], -1, )
paddle.concat(list[Tensor([512, 1],"float32"),Tensor([512, 1],"float32"),], -1, )
paddle.concat(list[Tensor([512, 1],"float32"),Tensor([512, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([512, 1],"float32"),Tensor([512, 1],"float32"),Tensor([512, 1],"float32"),Tensor([512, 1],"float32"),], -1, )
paddle.concat(list[Tensor([512, 1],"float32"),Tensor([512, 1],"float32"),Tensor([512, 1],"float32"),Tensor([512, 1],"float32"),Tensor([512, 1],"float32"),], -1, )
paddle.concat(list[Tensor([512, 1],"float32"),Tensor([512, 1],"float32"),Tensor([512, 1],"float32"),Tensor([512, 1],"float32"),Tensor([512, 1],"float32"),Tensor([512, 1],"float32"),], -1, )
paddle.concat(list[Tensor([512, 1],"float32"),Tensor([512, 2],"float32"),], -1, )
paddle.concat(list[Tensor([512, 128],"float32"),Tensor([512, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([512, 30, 20],"float32"),Tensor([512, 30, 20],"float32"),Tensor([512, 30, 20],"float32"),Tensor([512, 30, 20],"float32"),Tensor([512, 30, 20],"float32"),Tensor([512, 30, 20],"float32"),Tensor([512, 30, 20],"float32"),Tensor([512, 30, 20],"float32"),Tensor([52, 30, 20],"float32"),], )
paddle.concat(list[Tensor([512, 30],"int64"),Tensor([512, 30],"int64"),Tensor([512, 30],"int64"),Tensor([512, 30],"int64"),Tensor([512, 30],"int64"),Tensor([512, 30],"int64"),Tensor([512, 30],"int64"),Tensor([512, 30],"int64"),Tensor([52, 30],"int64"),], )
paddle.concat(list[Tensor([512, 8],"float32"),Tensor([512, 8],"float32"),], axis=-1, )
paddle.concat(list[Tensor([5168, 128],"float32"),Tensor([5168, 128],"float32"),Tensor([5168, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([5200, 1],"float32"),Tensor([5200, 1],"float32"),Tensor([5200, 1],"float32"),], -1, )
paddle.concat(list[Tensor([544, 1],"float32"),Tensor([544, 1],"float32"),Tensor([544, 1],"float32"),], -1, )
paddle.concat(list[Tensor([58584, 128],"float32"),Tensor([58584, 128],"float32"),Tensor([58584, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([6, 1, 512, 512],"float32"),Tensor([6, 1, 512, 512],"float32"),], axis=1, )
paddle.concat(list[Tensor([600, 1],"float32"),Tensor([600, 1],"float32"),], -1, )
paddle.concat(list[Tensor([600, 1],"float32"),Tensor([600, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([6000, 1],"float32"),Tensor([6000, 1],"float32"),Tensor([6000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([6284, 1],"float32"),], )
paddle.concat(list[Tensor([6284, 1],"float32"),Tensor([6284, 1],"float32"),], 1, )
paddle.concat(list[Tensor([64, 1, 172, 79],"float32"),Tensor([64, 1, 172, 79],"float32"),Tensor([64, 1, 172, 79],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 1],"float32"),Tensor([36, 1],"float32"),], )
paddle.concat(list[Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),], -1, )
paddle.concat(list[Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),], -1, )
paddle.concat(list[Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([40, 1],"float32"),], )
paddle.concat(list[Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([36, 1],"float32"),], )
paddle.concat(list[Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([16, 1],"float32"),], )
paddle.concat(list[Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([25, 1],"float32"),], )
paddle.concat(list[Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([32, 1],"float32"),], )
paddle.concat(list[Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([25, 1],"float32"),], )
paddle.concat(list[Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([64, 1],"float32"),Tensor([48, 1],"float32"),], )
paddle.concat(list[Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([64, 12, 170, 1],"float32"),Tensor([28, 12, 170, 1],"float32"),], )
paddle.concat(list[Tensor([64, 16, 86, 39],"float32"),Tensor([64, 16, 86, 39],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 32, 170, 12],"float32"),Tensor([64, 64, 170, 12],"float32"),Tensor([64, 64, 170, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 32, 21, 9],"float32"),Tensor([64, 32, 21, 9],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 32, 43, 19],"float32"),Tensor([64, 32, 43, 19],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 50],"float32"),Tensor([64, 50],"float32"),], axis=-1, )
paddle.concat(list[Tensor([64, 64, 170, 12],"float32"),Tensor([64, 64, 170, 12],"float32"),Tensor([64, 64, 170, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 8, 172, 79],"float32"),Tensor([64, 8, 172, 79],"float32"),], axis=1, )
paddle.concat(list[Tensor([640, 1],"float32"),Tensor([640, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([650, 1],"float32"),Tensor([650, 1],"float32"),Tensor([650, 1],"float32"),], -1, )
paddle.concat(list[Tensor([6512, 1],"float32"),Tensor([6512, 1],"float32"),], -1, )
paddle.concat(list[Tensor([6512, 1],"float32"),Tensor([6512, 1],"float32"),Tensor([6512, 1],"float32"),Tensor([6512, 1],"float32"),Tensor([6512, 1],"float32"),Tensor([6512, 1],"float32"),], -1, )
paddle.concat(list[Tensor([6684, 128],"float32"),Tensor([6684, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([68608, 1],"float32"),], )
paddle.concat(list[Tensor([68608, 1],"float32"),Tensor([68608, 1],"float32"),], -1, )
paddle.concat(list[Tensor([68608, 1],"float32"),Tensor([68608, 1],"float32"),Tensor([68608, 1],"float32"),Tensor([68608, 1],"float32"),], -1, )
paddle.concat(list[Tensor([69278, 1],"float32"),Tensor([69278, 1],"float32"),], -1, )
paddle.concat(list[Tensor([720],"float32"),Tensor([48],"float32"),Tensor([2304],"float32"),Tensor([48],"float32"),Tensor([2304],"float32"),Tensor([48],"float32"),Tensor([2304],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([1],"float32"),Tensor([720],"float32"),Tensor([48],"float32"),Tensor([2304],"float32"),Tensor([48],"float32"),Tensor([2304],"float32"),Tensor([48],"float32"),Tensor([2304],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([1],"float32"),Tensor([720],"float32"),Tensor([48],"float32"),Tensor([2304],"float32"),Tensor([48],"float32"),Tensor([2304],"float32"),Tensor([48],"float32"),Tensor([2304],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([1],"float32"),], axis=0, )
paddle.concat(list[Tensor([78112, 128],"float32"),Tensor([78112, 128],"float32"),Tensor([78112, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([7999, 1],"float32"),Tensor([7999, 1],"float32"),Tensor([7999, 1],"float32"),], -1, )
paddle.concat(list[Tensor([8, 1, 241, 241],"float32"),], axis=1, )
paddle.concat(list[Tensor([8, 1, 512, 512],"float32"),Tensor([8, 1, 512, 512],"float32"),], axis=1, )
paddle.concat(list[Tensor([8, 32, 241, 241],"float32"),], axis=1, )
paddle.concat(list[Tensor([8, 32, 481, 481],"float32"),Tensor([8, 32, 481, 481],"float32"),], axis=1, )
paddle.concat(list[Tensor([8, 8, 4, 1],"float32"),Tensor([8, 8, 4, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8, 8, 4, 4, 4, 1],"float32"),Tensor([8, 8, 4, 4, 4, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([800, 1],"float32"),Tensor([800, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8000, 1],"float32"),Tensor([8000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([8000, 1],"float32"),Tensor([8000, 1],"float32"),Tensor([8000, 1],"float32"),], -1, )
paddle.concat(list[Tensor([8192, 1],"float32"),Tensor([1609, 1],"float32"),], )
paddle.concat(list[Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),], -1, )
paddle.concat(list[Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),], -1, )
paddle.concat(list[Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([8192, 1],"float32"),Tensor([1168, 1],"float32"),], )
paddle.concat(list[Tensor([8192, 1],"float32"),Tensor([8192, 2],"float32"),], -1, )
paddle.concat(list[Tensor([8192, 128],"float32"),Tensor([8192, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8490, 1],"float32"),Tensor([8490, 1],"float32"),Tensor([8490, 1],"float32"),], -1, )
paddle.concat(list[Tensor([8810, 1],"float32"),Tensor([8810, 1],"float32"),Tensor([8810, 1],"float32"),], -1, )
paddle.concat(list[Tensor([8810, 1],"float32"),Tensor([8810, 1],"float32"),Tensor([8810, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([8810, 1],"float32"),Tensor([8810, 1],"float32"),Tensor([8810, 1],"float32"),Tensor([8810, 1],"float32"),Tensor([8810, 1],"float32"),Tensor([8810, 1],"float32"),Tensor([8810, 1],"float32"),Tensor([8810, 1],"float32"),], -1, )
paddle.concat(list[Tensor([89, 1],"float32"),Tensor([89, 1],"float32"),Tensor([89, 1],"float32"),], -1, )
paddle.concat(list[Tensor([9330, 1],"float32"),Tensor([9330, 1],"float32"),Tensor([9330, 1],"float32"),], -1, )
paddle.concat(list[Tensor([93401, 1],"float32"),Tensor([93401, 1],"float32"),Tensor([93401, 1],"float32"),], -1, )
paddle.concat(list[Tensor([9420, 1],"float32"),Tensor([9420, 1],"float32"),Tensor([9420, 1],"float32"),], -1, )
paddle.concat(list[Tensor([9801, 1],"float32"),Tensor([9801, 1],"float32"),], -1, )
paddle.concat(list[Tensor([9801, 1],"float32"),Tensor([9801, 1],"float32"),Tensor([9801, 1],"float32"),], -1, )
paddle.concat(list[Tensor([99, 1],"float32"),Tensor([99, 1],"float32"),], -1, )
paddle.concat(list[Tensor([992, 1],"float32"),Tensor([992, 1],"float32"),Tensor([992, 1],"float32"),], -1, )
paddle.concat(tuple(Tensor([1, 1, 16, 16],"float32"),Tensor([1, 1, 16, 16],"float32"),Tensor([1, 1, 16, 16],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 1, 19, 2],"float32"),Tensor([1, 1, 19, 80],"float32"),Tensor([1, 1, 19, 2],"float32"),), 3, )
paddle.concat(tuple(Tensor([1, 1, 2, 49],"float32"),Tensor([1, 1, 272, 49],"float32"),Tensor([1, 1, 2, 49],"float32"),), 2, )
paddle.concat(tuple(Tensor([1, 1, 2, 84],"float32"),Tensor([1, 1, 15, 84],"float32"),Tensor([1, 1, 2, 84],"float32"),), 2, )
paddle.concat(tuple(Tensor([1, 1, 276, 2],"float32"),Tensor([1, 1, 276, 45],"float32"),Tensor([1, 1, 276, 2],"float32"),), 3, )
paddle.concat(tuple(Tensor([1, 1, 32, 32],"float32"),Tensor([1, 1, 32, 32],"float32"),Tensor([1, 1, 32, 32],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1000, 2],"float32"),Tensor([1000, 20],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([1024, 3],"float32"),Tensor([1024, 204],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([16, 16, 40, 40],"float32"),Tensor([16, 32, 40, 40],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([16, 32, 20, 20],"float32"),Tensor([16, 64, 20, 20],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([200, 2],"float32"),Tensor([200, 128],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([200, 2],"float32"),Tensor([200, 256],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([240],"float32"),Tensor([241],"float32"),), axis=0, )
paddle.concat(tuple(Tensor([250, 3],"float32"),Tensor([250, 60],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([256, 3],"float32"),Tensor([256, 60],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([28, 32, 170, 12],"float32"),Tensor([28, 64, 170, 12],"float32"),Tensor([28, 64, 170, 12],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([32, 1, 241, 241],"float32"),Tensor([32, 1, 241, 241],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([32, 1, 241, 241],"float32"),Tensor([32, 2, 241, 241],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([400, 2],"float32"),Tensor([400, 360],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([400, 2],"float32"),Tensor([400, 520],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([400, 3],"float32"),Tensor([400, 468],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([512, 18],"float32"),Tensor([512, 16],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([512, 2],"float32"),Tensor([512, 16],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([64, 16, 40, 40],"float32"),Tensor([64, 32, 40, 40],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([64, 2],"float32"),Tensor([64, 100],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([64, 32, 170, 12],"float32"),Tensor([64, 64, 170, 12],"float32"),Tensor([64, 64, 170, 12],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([64, 32, 20, 20],"float32"),Tensor([64, 64, 20, 20],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([69278, 1],"float32"),Tensor([69278, 1],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([8, 1, 241, 241],"float32"),Tensor([8, 1, 241, 241],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([8, 1, 241, 241],"float32"),Tensor([8, 2, 241, 241],"float32"),), axis=1, )
paddle.concat(x=list[Tensor([100, 18, 3, 3],"float32"),Tensor([100, 18, 3, 3],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([100, 722, 2, 2],"float32"),Tensor([100, 722, 2, 2],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([227, 18, 3, 3],"float32"),Tensor([227, 18, 3, 3],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([256, 18, 3, 3],"float32"),Tensor([256, 18, 3, 3],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([256, 722, 2, 2],"float32"),Tensor([256, 722, 2, 2],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([56, 722, 2, 2],"float32"),Tensor([56, 722, 2, 2],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([82, 18, 3, 3],"float32"),Tensor([82, 18, 3, 3],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([87, 722, 2, 2],"float32"),Tensor([87, 722, 2, 2],"float32"),], axis=1, )
paddle.concat(x=tuple(Tensor([187679, 1],"float32"),Tensor([187679, 10],"float32"),), axis=1, )
paddle.cos(Tensor([100, 25],"float32"), )
paddle.cos(Tensor([1000, 10],"float32"), )
paddle.cos(Tensor([1024, 102],"float32"), )
paddle.cos(Tensor([1200, 25],"float32"), )
paddle.cos(Tensor([128, 1],"float32"), )
paddle.cos(Tensor([1291, 25],"float32"), )
paddle.cos(Tensor([15, 1],"float32"), )
paddle.cos(Tensor([16800, 1],"float32"), )
paddle.cos(Tensor([200, 128],"float32"), )
paddle.cos(Tensor([200, 64],"float32"), )
paddle.cos(Tensor([22120, 1],"float32"), )
paddle.cos(Tensor([25, 1],"float32"), )
paddle.cos(Tensor([250, 30],"float32"), )
paddle.cos(Tensor([256, 30],"float32"), )
paddle.cos(Tensor([400, 180],"float32"), )
paddle.cos(Tensor([400, 234],"float32"), )
paddle.cos(Tensor([400, 260],"float32"), )
paddle.cos(Tensor([4096, 1],"float32"), )
paddle.cos(Tensor([4096, 128],"float32"), )
paddle.cos(Tensor([4800, 1],"float32"), )
paddle.cos(Tensor([50, 128],"float32"), )
paddle.cos(Tensor([512, 1],"float32"), )
paddle.cos(Tensor([512, 128],"float32"), )
paddle.cos(Tensor([512, 8],"float32"), )
paddle.cos(Tensor([6284, 25],"float32"), )
paddle.cos(Tensor([64, 1],"float32"), )
paddle.cos(Tensor([64, 50],"float32"), )
paddle.cos(Tensor([8192, 1],"float32"), )
paddle.cos(Tensor([8192, 128],"float32"), )
paddle.cos(x=Tensor([30, 128],"float32"), )
paddle.cosh(Tensor([8, 32, 241, 241],"float32"), )
paddle.divide(Tensor([],"complex64"), Tensor([14, 8, 8, 4],"complex64"), )
paddle.divide(Tensor([],"complex64"), Tensor([39, 8, 8, 4],"complex64"), )
paddle.divide(x=Tensor([187679, 3],"float32"), y=Tensor([3],"float32"), )
paddle.empty(list[1,], )
paddle.empty(tuple(2,20,), "float64", )
paddle.empty(tuple(2,25,), "float64", )
paddle.empty(tuple(2,30,), "float64", )
paddle.empty(tuple(20,1,), "float64", )
paddle.empty(tuple(20,20,), "float64", )
paddle.empty(tuple(25,1,), "float64", )
paddle.empty(tuple(25,25,), "float64", )
paddle.empty(tuple(30,1,), "float64", )
paddle.empty(tuple(30,30,), "float64", )
paddle.equal(Tensor([4148, 30],"int64"), Tensor([4148, 30],"int64"), )
paddle.equal(Tensor([416, 30],"int64"), 0, )
paddle.equal(Tensor([512, 30],"int64"), 0, )
paddle.equal(Tensor([52, 30],"int64"), 0, )
paddle.exp(Tensor([],"float32"), )
paddle.exp(Tensor([1],"float32"), )
paddle.exp(Tensor([10],"float32"), )
paddle.exp(Tensor([100, 1],"float32"), )
paddle.exp(Tensor([1200, 1],"float32"), )
paddle.exp(Tensor([128, 200],"float32"), )
paddle.exp(Tensor([1291, 1],"float32"), )
paddle.exp(Tensor([16800, 1],"float32"), )
paddle.exp(Tensor([1800, 1],"float32"), )
paddle.exp(Tensor([18211, 1],"float32"), )
paddle.exp(Tensor([22120, 1],"float32"), )
paddle.exp(Tensor([256],"float32"), )
paddle.exp(Tensor([2885, 1],"float32"), )
paddle.exp(Tensor([32, 1],"float32"), )
paddle.exp(Tensor([4800, 1],"float32"), )
paddle.exp(Tensor([50, 1],"float32"), )
paddle.exp(Tensor([5000, 1],"float32"), )
paddle.exp(Tensor([6284, 1],"float32"), )
paddle.exp(Tensor([8, 8, 4, 14],"complex64"), )
paddle.exp(Tensor([8, 8, 4, 39],"complex64"), )
paddle.exp(x=Tensor([324],"float32"), )
paddle.exp(x=Tensor([36],"float32"), )
paddle.exp(x=Tensor([380],"float32"), )
paddle.exp(x=Tensor([45],"float32"), )
paddle.exp(x=Tensor([5776],"float32"), )
paddle.fft.fftfreq(n=14, d=0.03703703731298447, )
paddle.fft.fftfreq(n=39, d=0.5, )
paddle.fft.fftn(Tensor([8, 32, 481, 481],"float32"), axes=list[2,3,], )
paddle.fft.fftn(x=Tensor([50, 8, 39, 14, 14],"float32"), axes=list[-3,-2,-1,], )
paddle.fft.fftshift(x=Tensor([16, 128, 10, 6],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 32, 16, 9],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 32, 19, 10],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 32, 20, 11],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 64, 10, 6],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 64, 19, 10],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 96, 20, 11],"complex64"), axes=list[-2,], )
paddle.fft.ifftn(Tensor([8, 32, 481, 481],"complex64"), axes=list[2,3,], )
paddle.fft.ifftn(x=Tensor([50, 8, 39, 14, 14],"complex64"), s=tuple(39,14,14,), )
paddle.fft.irfft(Tensor([20, 64, 1001],"complex64"), n=2001, )
paddle.fft.irfft(Tensor([20, 64, 1051],"complex64"), n=2101, )
paddle.fft.irfft(Tensor([4, 32, 32, 16],"complex64"), n=64, axis=-1, norm="forward", )
paddle.fft.irfft2(Tensor([32, 15, 8, 256],"complex64"), s=tuple(15,15,), axes=tuple(1,2,), norm="ortho", )
paddle.fft.irfft2(Tensor([32, 32, 250, 126],"complex64"), s=tuple(250,250,), )
paddle.fft.irfft2(Tensor([8, 32, 250, 126],"complex64"), s=tuple(250,250,), )
paddle.fft.irfftn(Tensor([32, 15, 8, 256],"complex64"), tuple(15,15,), tuple(1,2,), "ortho", None, )
paddle.fft.irfftn(Tensor([32, 32, 250, 126],"complex64"), tuple(250,250,), tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([8, 32, 250, 126],"complex64"), tuple(250,250,), tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(x=Tensor([16, 32, 16, 9],"complex64"), s=list[16,16,], axes=list[-2,-1,], norm="backward", )
paddle.fft.irfftn(x=Tensor([16, 32, 19, 10],"complex64"), s=tuple(19,19,), axes=list[-2,-1,], norm="backward", )
paddle.fft.irfftn(x=Tensor([16, 32, 20, 11],"complex64"), s=list[19,19,], axes=list[-2,-1,], norm="backward", )
paddle.fft.irfftn(x=Tensor([16, 64, 10, 6],"complex64"), s=tuple(10,10,), axes=list[-2,-1,], norm="backward", )
paddle.fft.irfftn(x=Tensor([16, 64, 10, 6],"complex64"), s=tuple(20,20,), axes=list[-2,-1,], norm="backward", )
paddle.fft.irfftn(x=Tensor([16, 64, 19, 10],"complex64"), s=tuple(10,10,), axes=list[-2,-1,], norm="backward", )
paddle.fft.rfft(Tensor([20, 64, 2001],"float32"), )
paddle.fft.rfft(Tensor([20, 64, 2101],"float32"), )
paddle.fft.rfft(Tensor([4, 32, 32, 64],"float32"), axis=-1, norm="forward", )
paddle.fft.rfft2(Tensor([32, 32, 250, 250],"float32"), )
paddle.fft.rfft2(Tensor([8, 32, 250, 250],"float32"), )
paddle.fft.rfft2(x=Tensor([32, 15, 15, 256],"float32"), axes=tuple(1,2,), norm="ortho", )
paddle.fft.rfftn(Tensor([32, 15, 15, 256],"float32"), None, tuple(1,2,), "ortho", None, )
paddle.fft.rfftn(Tensor([32, 32, 250, 250],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([8, 32, 250, 250],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(x=Tensor([16, 128, 10, 10],"float32"), norm="backward", axes=list[-2,-1,], )
paddle.fft.rfftn(x=Tensor([16, 32, 16, 16],"float32"), norm="backward", axes=list[-2,-1,], )
paddle.fft.rfftn(x=Tensor([16, 32, 19, 19],"float32"), norm="backward", axes=list[-2,-1,], )
paddle.fft.rfftn(x=Tensor([16, 64, 10, 10],"float32"), norm="backward", axes=list[-2,-1,], )
paddle.fft.rfftn(x=Tensor([16, 64, 19, 19],"float32"), norm="backward", axes=list[-2,-1,], )
paddle.fft.rfftn(x=Tensor([16, 96, 20, 20],"float32"), norm="backward", axes=list[-2,-1,], )
paddle.flatten(Tensor([1, 256, 64, 64],"float16"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([16, 1, 16, 16],"float32"), start_axis=-2, )
paddle.flatten(Tensor([2, 256, 64, 64],"float16"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([3, 256, 64, 64],"float16"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([4, 3, 32, 64],"float32"), start_axis=-2, )
paddle.flatten(Tensor([416, 50, 7, 256],"float32"), start_axis=2, )
paddle.flatten(Tensor([512, 50, 7, 256],"float32"), start_axis=2, )
paddle.flatten(Tensor([52, 50, 7, 256],"float32"), start_axis=2, )
paddle.flatten(Tensor([6, 256, 64, 64],"float16"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([8, 256, 64, 64],"float16"), start_axis=1, stop_axis=-1, )
paddle.floor(x=Tensor([100, 4, 38, 38],"float32"), )
paddle.floor(x=Tensor([100, 4, 9, 9],"float32"), )
paddle.greater_equal(Tensor([16, 32, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([64, 32, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.heaviside(Tensor([16800, 1],"float32"), Tensor([],"float32"), )
paddle.heaviside(Tensor([22120, 1],"float32"), Tensor([],"float32"), )
paddle.heaviside(Tensor([4800, 1],"float32"), Tensor([],"float32"), )
paddle.is_complex(Tensor([1, 1],"float32"), )
paddle.is_complex(Tensor([100, 1],"float32"), )
paddle.is_complex(Tensor([1000, 1],"float32"), )
paddle.is_complex(Tensor([100000, 1],"float32"), )
paddle.is_complex(Tensor([102912, 1],"float32"), )
paddle.is_complex(Tensor([11661, 1358, 2],"float32"), )
paddle.is_complex(Tensor([128, 130],"float32"), )
paddle.is_complex(Tensor([128, 2],"float32"), )
paddle.is_complex(Tensor([128, 22],"float32"), )
paddle.is_complex(Tensor([128512, 1],"float32"), )
paddle.is_complex(Tensor([15548, 1358, 2],"float32"), )
paddle.is_complex(Tensor([16, 1, 256],"float32"), )
paddle.is_complex(Tensor([17152, 1],"float32"), )
paddle.is_complex(Tensor([2, 20],"float32"), )
paddle.is_complex(Tensor([20, 20],"float32"), )
paddle.is_complex(Tensor([20, 2001],"float32"), )
paddle.is_complex(Tensor([200, 39, 14, 14, 1],"float32"), )
paddle.is_complex(Tensor([20000, 1],"float32"), )
paddle.is_complex(Tensor([22387],"float32"), )
paddle.is_complex(Tensor([256, 258],"float32"), )
paddle.is_complex(Tensor([256, 7],"float32"), )
paddle.is_complex(Tensor([256512, 1],"float32"), )
paddle.is_complex(Tensor([26736, 3029, 2],"float32"), )
paddle.is_complex(Tensor([3, 20],"float32"), )
paddle.is_complex(Tensor([3, 512],"float32"), )
paddle.is_complex(Tensor([3029, 458, 2],"float32"), )
paddle.is_complex(Tensor([34304, 1],"float32"), )
paddle.is_complex(Tensor([348810, 1],"float32"), )
paddle.is_complex(Tensor([3887, 1358, 2],"float32"), )
paddle.is_complex(Tensor([39992, 1],"float32"), )
paddle.is_complex(Tensor([4, 3, 2048],"float32"), )
paddle.is_complex(Tensor([50, 7644],"float32"), )
paddle.is_complex(Tensor([512, 1],"float32"), )
paddle.is_complex(Tensor([512, 100],"float32"), )
paddle.is_complex(Tensor([512, 102],"float32"), )
paddle.is_complex(Tensor([512, 2],"float32"), )
paddle.is_complex(Tensor([512, 207],"float32"), )
paddle.is_complex(Tensor([512, 3],"float32"), )
paddle.is_complex(Tensor([512, 34],"float32"), )
paddle.is_complex(Tensor([512, 362],"float32"), )
paddle.is_complex(Tensor([512, 471],"float32"), )
paddle.is_complex(Tensor([512, 512],"float32"), )
paddle.is_complex(Tensor([512, 522],"float32"), )
paddle.is_complex(Tensor([512, 63],"float32"), )
paddle.is_complex(Tensor([512, 9],"float32"), )
paddle.is_complex(Tensor([6684, 3029, 2],"float32"), )
paddle.is_complex(Tensor([68608, 1],"float32"), )
paddle.is_complex(Tensor([727173],"float32"), )
paddle.linalg.norm(Tensor([22387],"float32"), 2, )
paddle.linalg.norm(Tensor([727173],"float32"), p=2, )
paddle.log(Tensor([1, 1444, 1, 1],"float32"), )
paddle.log(Tensor([1, 36, 1, 1],"float32"), )
paddle.log(Tensor([1, 38, 1],"float32"), )
paddle.log(Tensor([1, 9, 1],"float32"), )
paddle.log(Tensor([36],"float32"), )
paddle.log(x=Tensor([100, 18, 3, 3],"float32"), )
paddle.log(x=Tensor([100, 38, 10],"float32"), )
paddle.log(x=Tensor([100, 722, 2, 2],"float32"), )
paddle.log(x=Tensor([100, 9, 5],"float32"), )
paddle.log(x=Tensor([227, 18, 3, 3],"float32"), )
paddle.log(x=Tensor([227, 9, 5],"float32"), )
paddle.log(x=Tensor([256, 18, 3, 3],"float32"), )
paddle.log(x=Tensor([256, 38, 10],"float32"), )
paddle.log(x=Tensor([256, 722, 2, 2],"float32"), )
paddle.log(x=Tensor([256, 9, 5],"float32"), )
paddle.log(x=Tensor([56, 38, 10],"float32"), )
paddle.log(x=Tensor([56, 722, 2, 2],"float32"), )
paddle.log(x=Tensor([82, 18, 3, 3],"float32"), )
paddle.log(x=Tensor([82, 9, 5],"float32"), )
paddle.log(x=Tensor([87, 38, 10],"float32"), )
paddle.log(x=Tensor([87, 722, 2, 2],"float32"), )
paddle.logical_and(Tensor([4148, 30],"bool"), Tensor([4148, 30],"bool"), )
paddle.logical_or(x=Tensor([416, 1, 1, 30],"bool"), y=Tensor([30, 30],"bool"), )
paddle.logical_or(x=Tensor([512, 1, 1, 30],"bool"), y=Tensor([30, 30],"bool"), )
paddle.logical_or(x=Tensor([52, 1, 1, 30],"bool"), y=Tensor([30, 30],"bool"), )
paddle.nn.functional.conv1d(Tensor([20, 64, 2101],"float32"), Tensor([64, 64, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([256, 200, 1],"float32"), Tensor([256, 1, 4],"float32"), bias=Tensor([256],"float32"), padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([32, 32, 58081],"float32"), Tensor([1, 32, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([32, 32, 58081],"float32"), Tensor([32, 32, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 32, 58081],"float32"), Tensor([1, 32, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 32, 58081],"float32"), Tensor([32, 32, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv2d(Tensor([8, 32, 241, 241],"float32"), Tensor([32, 32, 1, 1],"float32"), Tensor([32],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([100, 36, 3, 3],"float32"), weight=Tensor([36, 36, 1, 1],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([227, 36, 3, 3],"float32"), weight=Tensor([36, 36, 1, 1],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([256, 36, 3, 3],"float32"), weight=Tensor([36, 36, 1, 1],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([82, 36, 3, 3],"float32"), weight=Tensor([36, 36, 1, 1],"float32"), )
paddle.nn.functional.conv2d_transpose(Tensor([1000, 128, 8, 8],"float32"), Tensor([128, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1000, 256, 4, 4],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1000, 64, 16, 16],"float32"), Tensor([64, 32, 3, 3],"float32"), bias=Tensor([32],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 16, 172, 79],"float32"), Tensor([16, 8, 5, 5],"float32"), bias=Tensor([8],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 16, 86, 39],"float32"), Tensor([16, 16, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 16, 86, 39],"float32"), Tensor([16, 8, 5, 5],"float32"), bias=Tensor([8],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 32, 21, 9],"float32"), Tensor([32, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 32, 43, 19],"float32"), Tensor([32, 16, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 32, 43, 19],"float32"), Tensor([32, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 32, 86, 39],"float32"), Tensor([32, 16, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 64, 21, 9],"float32"), Tensor([64, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 64, 43, 19],"float32"), Tensor([64, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 8, 172, 79],"float32"), Tensor([8, 1, 5, 5],"float32"), bias=Tensor([1],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 8, 172, 79],"float32"), Tensor([8, 8, 5, 5],"float32"), bias=Tensor([8],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 1, 128, 128],"float32"), list[512,512,], mode="nearest", )
paddle.nn.functional.interpolate(Tensor([1, 1, 276, 49],"float32"), size=list[274,47,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([1, 2, 19, 84],"float32"), size=list[17,82,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([16, 32, 19, 19],"float32"), size=tuple(19,19,), mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([16, 32, 19, 19],"float32"), size=tuple(20,20,), mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([16, 32, 20, 20],"float32"), size=list[19,19,], mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([16, 32, 20, 20],"float32"), size=list[40,40,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([16, 64, 10, 10],"float32"), size=list[20,20,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([16, 64, 10, 10],"float32"), size=tuple(10,10,), mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([16, 64, 10, 10],"float32"), size=tuple(20,20,), mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([16, 64, 19, 19],"float32"), size=tuple(10,10,), mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([20, 64, 2001],"float32"), size=list[2001,], mode="linear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([256, 128, 8, 16],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([256, 32, 32, 64],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([256, 4, 4, 8],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([256, 64, 16, 32],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([3, 1, 128, 128],"float32"), list[256,256,], mode="nearest", )
paddle.nn.functional.interpolate(Tensor([3, 1, 256, 256],"float32"), list[512,512,], mode="nearest", )
paddle.nn.functional.interpolate(Tensor([6, 1, 128, 128],"float32"), list[256,256,], mode="nearest", )
paddle.nn.functional.interpolate(Tensor([6, 1, 256, 256],"float32"), list[512,512,], mode="nearest", )
paddle.nn.functional.interpolate(Tensor([64, 32, 20, 20],"float32"), size=list[40,40,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([64, 64, 10, 10],"float32"), size=list[20,20,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([8, 1, 128, 128],"float32"), list[256,256,], mode="nearest", )
paddle.nn.functional.interpolate(Tensor([8, 1, 256, 256],"float32"), list[512,512,], mode="nearest", )
paddle.nn.functional.leaky_relu(Tensor([1, 128, 64, 64],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([1, 256, 64, 64],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([1, 32, 256, 256],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([1, 64, 128, 128],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([187679, 60],"float32"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([187679, 75],"float32"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([2, 128, 64, 64],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([2, 256, 64, 64],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([2, 32, 256, 256],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([2, 64, 128, 128],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([28, 64, 170, 12],"float32"), 0.1, None, )
paddle.nn.functional.leaky_relu(Tensor([3, 128, 64, 64],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([3, 256, 64, 64],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([3, 32, 256, 256],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([3, 64, 128, 128],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([6, 128, 64, 64],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([6, 256, 64, 64],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([6, 32, 256, 256],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([6, 64, 128, 128],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([64, 64, 170, 12],"float32"), 0.1, None, )
paddle.nn.functional.leaky_relu(Tensor([8, 128, 64, 64],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([8, 256, 64, 64],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([8, 32, 256, 256],"float16"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([8, 64, 128, 128],"float16"), 0.01, None, )
paddle.nn.functional.log_loss(Tensor([102400, 1],"float32"), Tensor([102400, 1],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_loss(Tensor([25600, 1],"float32"), Tensor([25600, 1],"float32"), epsilon=1e-07, )
paddle.nn.functional.relu(Tensor([1, 16, 17, 82],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 16, 274, 47],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 32, 17, 82],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 32, 274, 47],"float32"), None, )
paddle.nn.functional.relu(Tensor([1000, 128, 8, 8],"float32"), None, )
paddle.nn.functional.relu(Tensor([1000, 256, 4, 4],"float32"), None, )
paddle.nn.functional.relu(Tensor([1000, 32, 31, 31],"float32"), None, )
paddle.nn.functional.relu(Tensor([1000, 32, 32, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([1000, 64, 16, 16],"float32"), None, )
paddle.nn.functional.relu(Tensor([10000, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([100000, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([105344, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([11661, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([1240, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([1358, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([15548, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([16, 16, 40, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([16, 32, 20, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([16, 64, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([19528, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([256, 128, 4, 8],"float32"), None, )
paddle.nn.functional.relu(Tensor([256, 128, 8, 16],"float32"), None, )
paddle.nn.functional.relu(Tensor([256, 16, 32, 64],"float32"), None, )
paddle.nn.functional.relu(Tensor([256, 16, 500],"float32"), None, )
paddle.nn.functional.relu(Tensor([256, 16, 64, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([256, 32, 16, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([256, 32, 32, 64],"float32"), None, )
paddle.nn.functional.relu(Tensor([256, 64, 16, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([256, 64, 8, 16],"float32"), None, )
paddle.nn.functional.relu(Tensor([26336, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([26736, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([28, 128, 170, 12],"float32"), )
paddle.nn.functional.relu(Tensor([28, 160, 170, 12],"float32"), )
paddle.nn.functional.relu(Tensor([3, 1, 512, 512],"float16"), None, )
paddle.nn.functional.relu(Tensor([3, 128, 512, 512],"float16"), None, )
paddle.nn.functional.relu(Tensor([3, 2, 512, 512],"float16"), None, )
paddle.nn.functional.relu(Tensor([3, 32, 512, 512],"float16"), None, )
paddle.nn.functional.relu(Tensor([3, 8, 512, 512],"float16"), None, )
paddle.nn.functional.relu(Tensor([3029, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([3887, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([40, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([416, 30, 256],"float32"), None, )
paddle.nn.functional.relu(Tensor([416, 30, 512],"float32"), None, )
paddle.nn.functional.relu(Tensor([416, 50, 256],"float32"), None, )
paddle.nn.functional.relu(Tensor([416, 50, 7, 256],"float32"), None, )
paddle.nn.functional.relu(Tensor([458, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([4936, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([50, 39, 14, 14, 64],"float32"), None, )
paddle.nn.functional.relu(Tensor([512, 16, 500],"float32"), None, )
paddle.nn.functional.relu(Tensor([512, 30, 256],"float32"), None, )
paddle.nn.functional.relu(Tensor([512, 30, 512],"float32"), None, )
paddle.nn.functional.relu(Tensor([512, 50, 256],"float32"), None, )
paddle.nn.functional.relu(Tensor([512, 50, 7, 256],"float32"), None, )
paddle.nn.functional.relu(Tensor([5168, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([52, 30, 256],"float32"), None, )
paddle.nn.functional.relu(Tensor([52, 30, 512],"float32"), None, )
paddle.nn.functional.relu(Tensor([52, 50, 256],"float32"), None, )
paddle.nn.functional.relu(Tensor([52, 50, 7, 256],"float32"), None, )
paddle.nn.functional.relu(Tensor([58584, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([6, 1, 512, 512],"float16"), None, )
paddle.nn.functional.relu(Tensor([6, 128, 512, 512],"float16"), None, )
paddle.nn.functional.relu(Tensor([6, 2, 512, 512],"float16"), None, )
paddle.nn.functional.relu(Tensor([6, 32, 512, 512],"float16"), None, )
paddle.nn.functional.relu(Tensor([6, 8, 512, 512],"float16"), None, )
paddle.nn.functional.relu(Tensor([64, 128, 170, 12],"float32"), )
paddle.nn.functional.relu(Tensor([64, 16, 40, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 16, 43, 19],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 16, 86, 39],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 160, 170, 12],"float32"), )
paddle.nn.functional.relu(Tensor([64, 32, 20, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 32, 21, 9],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 32, 43, 19],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 50],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 64, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 8, 172, 79],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 8, 86, 39],"float32"), None, )
paddle.nn.functional.relu(Tensor([6684, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([78112, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([8, 1, 512, 512],"float16"), None, )
paddle.nn.functional.relu(Tensor([8, 128, 512, 512],"float16"), None, )
paddle.nn.functional.relu(Tensor([8, 2, 512, 512],"float16"), None, )
paddle.nn.functional.relu(Tensor([8, 32, 512, 512],"float16"), None, )
paddle.nn.functional.relu(Tensor([8, 8, 512, 512],"float16"), None, )
paddle.nn.functional.relu(tuple(Tensor([100, 376, 100],"float32"),tuple(Tensor([1, 100, 100],"float32"),Tensor([1, 100, 100],"float32"),),), None, )
paddle.nn.functional.relu(tuple(Tensor([17, 376, 100],"float32"),tuple(Tensor([1, 17, 100],"float32"),Tensor([1, 17, 100],"float32"),),), None, )
paddle.nn.functional.relu(tuple(Tensor([2, 1501, 100],"float32"),tuple(Tensor([1, 2, 100],"float32"),Tensor([1, 2, 100],"float32"),),), None, )
paddle.nn.functional.relu(tuple(Tensor([50, 1501, 100],"float32"),tuple(Tensor([1, 50, 100],"float32"),Tensor([1, 50, 100],"float32"),),), None, )
paddle.nn.functional.relu(tuple(Tensor([68, 376, 100],"float32"),tuple(Tensor([1, 68, 100],"float32"),Tensor([1, 68, 100],"float32"),),), None, )
paddle.nn.functional.relu(tuple(Tensor([8, 1501, 100],"float32"),tuple(Tensor([1, 8, 100],"float32"),Tensor([1, 8, 100],"float32"),),), None, )
paddle.nn.functional.relu(x=Tensor([100, 128, 3, 3],"float32"), )
paddle.nn.functional.relu(x=Tensor([100, 38, 256],"float32"), )
paddle.nn.functional.relu(x=Tensor([100, 38, 512],"float32"), )
paddle.nn.functional.relu(x=Tensor([100, 38, 64],"float32"), )
paddle.nn.functional.relu(x=Tensor([100, 512, 2, 2],"float32"), )
paddle.nn.functional.relu(x=Tensor([100, 9, 128],"float32"), )
paddle.nn.functional.relu(x=Tensor([100, 9, 64],"float32"), )
paddle.nn.functional.relu(x=Tensor([227, 128, 3, 3],"float32"), )
paddle.nn.functional.relu(x=Tensor([227, 9, 128],"float32"), )
paddle.nn.functional.relu(x=Tensor([227, 9, 64],"float32"), )
paddle.nn.functional.relu(x=Tensor([256, 128, 3, 3],"float32"), )
paddle.nn.functional.relu(x=Tensor([256, 38, 256],"float32"), )
paddle.nn.functional.relu(x=Tensor([256, 38, 512],"float32"), )
paddle.nn.functional.relu(x=Tensor([256, 38, 64],"float32"), )
paddle.nn.functional.relu(x=Tensor([256, 512, 2, 2],"float32"), )
paddle.nn.functional.relu(x=Tensor([256, 9, 128],"float32"), )
paddle.nn.functional.relu(x=Tensor([256, 9, 64],"float32"), )
paddle.nn.functional.relu(x=Tensor([32, 15, 8, 8, 32],"float32"), )
paddle.nn.functional.relu(x=Tensor([56, 38, 256],"float32"), )
paddle.nn.functional.relu(x=Tensor([56, 38, 512],"float32"), )
paddle.nn.functional.relu(x=Tensor([56, 38, 64],"float32"), )
paddle.nn.functional.relu(x=Tensor([56, 512, 2, 2],"float32"), )
paddle.nn.functional.relu(x=Tensor([82, 128, 3, 3],"float32"), )
paddle.nn.functional.relu(x=Tensor([82, 9, 128],"float32"), )
paddle.nn.functional.relu(x=Tensor([82, 9, 64],"float32"), )
paddle.nn.functional.relu(x=Tensor([87, 38, 256],"float32"), )
paddle.nn.functional.relu(x=Tensor([87, 38, 512],"float32"), )
paddle.nn.functional.relu(x=Tensor([87, 38, 64],"float32"), )
paddle.nn.functional.relu(x=Tensor([87, 512, 2, 2],"float32"), )
paddle.nn.functional.sigmoid(Tensor([1000, 128],"float32"), )
paddle.nn.functional.sigmoid(Tensor([1000, 256],"float32"), )
paddle.nn.functional.sigmoid(Tensor([1000, 300],"float32"), )
paddle.nn.functional.sigmoid(Tensor([1000, 400],"float32"), )
paddle.nn.functional.sigmoid(Tensor([128, 50],"float32"), )
paddle.nn.functional.sigmoid(Tensor([16, 1, 40, 40],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([16800, 1],"float32"), )
paddle.nn.functional.sigmoid(Tensor([20, 128],"float32"), )
paddle.nn.functional.sigmoid(Tensor([20, 256],"float32"), )
paddle.nn.functional.sigmoid(Tensor([20, 300],"float32"), )
paddle.nn.functional.sigmoid(Tensor([22120, 1],"float32"), )
paddle.nn.functional.sigmoid(Tensor([36, 128],"float32"), )
paddle.nn.functional.sigmoid(Tensor([36, 256],"float32"), )
paddle.nn.functional.sigmoid(Tensor([36, 300],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4800, 1],"float32"), )
paddle.nn.functional.sigmoid(Tensor([64, 1, 40, 40],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([64, 128],"float32"), )
paddle.nn.functional.sigmoid(Tensor([64, 256],"float32"), )
paddle.nn.functional.sigmoid(Tensor([64, 300],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([100, 18, 3, 3],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([100, 38, 10],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([100, 722, 2, 2],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([100, 9, 5],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([227, 18, 3, 3],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([227, 9, 5],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([256, 18, 3, 3],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([256, 38, 10],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([256, 722, 2, 2],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([256, 9, 5],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([56, 38, 10],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([56, 722, 2, 2],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([82, 18, 3, 3],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([82, 9, 5],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([87, 38, 10],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([87, 722, 2, 2],"float32"), )
paddle.nn.functional.silu(Tensor([1, 20],"float32"), None, )
paddle.nn.functional.silu(Tensor([1, 310, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([1000, 20],"float32"), None, )
paddle.nn.functional.silu(Tensor([1024, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([1100, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([128, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([1300, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([2000, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([2048, 20],"float32"), None, )
paddle.nn.functional.silu(Tensor([2048, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([25, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([256, 20],"float32"), None, )
paddle.nn.functional.silu(Tensor([256, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([32, 20],"float32"), None, )
paddle.nn.functional.silu(Tensor([32, 32, 58081],"float32"), )
paddle.nn.functional.silu(Tensor([32, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([39992, 20],"float32"), None, )
paddle.nn.functional.silu(Tensor([4096, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([50, 20],"float32"), None, )
paddle.nn.functional.silu(Tensor([5200, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([544, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([6000, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([64, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([650, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([7999, 20],"float32"), None, )
paddle.nn.functional.silu(Tensor([8000, 20],"float32"), None, )
paddle.nn.functional.silu(Tensor([89, 512],"float32"), None, )
paddle.nn.functional.silu(Tensor([992, 20],"float32"), None, )
paddle.nn.functional.softshrink(Tensor([32, 15, 8, 8, 32, 2],"float32"), threshold=0.01, )
paddle.nn.functional.tanh(Tensor([1, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([1, 64],"float32"), None, )
paddle.nn.functional.tanh(Tensor([100, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([100, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([100, 64],"float32"), None, )
paddle.nn.functional.tanh(Tensor([1000, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([1000, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([10000, 90],"float32"), None, )
paddle.nn.functional.tanh(Tensor([101, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([10201, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([10240, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([1168, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([1209, 30],"float32"), None, )
paddle.nn.functional.tanh(Tensor([125, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([147015, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([1485, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([15, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([1515, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([16, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([16, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([1609, 20],"float32"), )
paddle.nn.functional.tanh(Tensor([1609, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([16800, 48],"float32"), None, )
paddle.nn.functional.tanh(Tensor([1820, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([20000, 64],"float32"), None, )
paddle.nn.functional.tanh(Tensor([20600, 64],"float32"), None, )
paddle.nn.functional.tanh(Tensor([22120, 48],"float32"), None, )
paddle.nn.functional.tanh(Tensor([228595, 30],"float32"), None, )
paddle.nn.functional.tanh(Tensor([2419, 30],"float32"), None, )
paddle.nn.functional.tanh(Tensor([2430, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([25, 20],"float32"), )
paddle.nn.functional.tanh(Tensor([25, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([25, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([2601, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([28, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([282600, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([32, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([32, 64],"float32"), None, )
paddle.nn.functional.tanh(Tensor([3488, 30],"float32"), None, )
paddle.nn.functional.tanh(Tensor([36, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([36, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([4, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([4, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([40, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([400, 20],"float32"), )
paddle.nn.functional.tanh(Tensor([400, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([400, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([4096, 256],"float32"), None, )
paddle.nn.functional.tanh(Tensor([4096, 30],"float32"), None, )
paddle.nn.functional.tanh(Tensor([48, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([4800, 48],"float32"), None, )
paddle.nn.functional.tanh(Tensor([4830, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([512, 256],"float32"), None, )
paddle.nn.functional.tanh(Tensor([600, 64],"float32"), None, )
paddle.nn.functional.tanh(Tensor([64, 20],"float32"), )
paddle.nn.functional.tanh(Tensor([64, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([64, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([64, 64],"float32"), None, )
paddle.nn.functional.tanh(Tensor([69278, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([8000, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([8192, 20],"float32"), )
paddle.nn.functional.tanh(Tensor([8192, 256],"float32"), None, )
paddle.nn.functional.tanh(Tensor([8192, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([8490, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([9330, 90],"float32"), None, )
paddle.nn.functional.tanh(Tensor([93401, 90],"float32"), None, )
paddle.nn.functional.tanh(Tensor([9420, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([9801, 20],"float32"), )
paddle.nn.functional.tanh(Tensor([9801, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([9801, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([99, 50],"float32"), None, )
paddle.pow(Tensor([],"float32"), -1, )
paddle.pow(Tensor([1000, 1],"float32"), Tensor([],"float32"), )
paddle.pow(Tensor([1444, 1024],"float32"), 2, )
paddle.pow(Tensor([20, 1],"float32"), Tensor([],"float32"), )
paddle.pow(Tensor([20000, 1],"float32"), Tensor([],"float32"), )
paddle.pow(Tensor([20600, 1],"float32"), Tensor([],"float32"), )
paddle.pow(Tensor([3],"float32"), -1, )
paddle.pow(Tensor([36, 2304],"float32"), 2, )
paddle.pow(Tensor([38, 2560],"float32"), 2, )
paddle.pow(Tensor([9, 1280],"float32"), 2, )
paddle.pow(x=Tensor([],"float32"), y=Tensor([128],"float32"), )
paddle.real(Tensor([50, 8, 39, 14, 14],"complex64"), )
paddle.real(x=Tensor([50, 8, 39, 14, 14],"complex64"), )
paddle.repeat_interleave(Tensor([1, 1358, 2],"float32"), 11661, axis=0, )
paddle.repeat_interleave(Tensor([1, 1358, 2],"float32"), 15548, axis=0, )
paddle.repeat_interleave(Tensor([1, 1358, 2],"float32"), 3887, axis=0, )
paddle.repeat_interleave(Tensor([1, 3029, 2],"float32"), 26736, axis=0, )
paddle.repeat_interleave(Tensor([1, 3029, 2],"float32"), 6684, axis=0, )
paddle.repeat_interleave(Tensor([1, 458, 2],"float32"), 3029, axis=0, )
paddle.repeat_interleave(Tensor([11661, 1, 2],"float32"), 1358, axis=1, )
paddle.repeat_interleave(Tensor([15548, 1, 2],"float32"), 1358, axis=1, )
paddle.repeat_interleave(Tensor([26736, 1, 2],"float32"), 3029, axis=1, )
paddle.repeat_interleave(Tensor([3029, 1, 2],"float32"), 458, axis=1, )
paddle.repeat_interleave(Tensor([3887, 1, 2],"float32"), 1358, axis=1, )
paddle.repeat_interleave(Tensor([6684, 1, 2],"float32"), 3029, axis=1, )
paddle.reshape(Tensor([1],"float32"), list[1,1,1,1,], )
paddle.reshape(Tensor([1],"float32"), list[1,-1,1,1,], )
paddle.reshape(Tensor([10000],"float32"), list[-1,1,], )
paddle.reshape(Tensor([100000],"float32"), list[-1,1,], )
paddle.reshape(Tensor([128],"float32"), list[1,-1,1,1,], )
paddle.reshape(Tensor([128],"float32"), list[1,128,1,1,], )
paddle.reshape(Tensor([16],"float32"), list[1,16,1,1,], )
paddle.reshape(Tensor([2, 3, 128, 128],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([2, 3, 512, 512],"float32"), list[-1,3,512,512,], )
paddle.reshape(Tensor([2, 3, 512, 512],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([256],"float32"), list[1,-1,1,1,], )
paddle.reshape(Tensor([3, 1, 128, 128],"float32"), list[3,1,128,128,], )
paddle.reshape(Tensor([3, 1, 512, 512],"float32"), list[3,1,512,512,], )
paddle.reshape(Tensor([3000, 1],"float32"), list[10,-1,], )
paddle.reshape(Tensor([32, 1, 15, 16, 15, 16],"float32"), list[32,1,240,240,], )
paddle.reshape(Tensor([32, 1, 58081],"float32"), list[32,1,241,241,], )
paddle.reshape(Tensor([32, 15, 15, 256],"float32"), list[32,15,15,16,16,-1,], )
paddle.reshape(Tensor([32, 15, 8, 256],"complex64"), list[32,15,8,8,32,], )
paddle.reshape(Tensor([32, 15, 8, 8, 32],"complex64"), list[32,15,8,256,], )
paddle.reshape(Tensor([32, 225, 256],"float32"), list[32,15,15,256,], )
paddle.reshape(Tensor([32, 32, 241, 241],"float32"), list[32,32,-1,], )
paddle.reshape(Tensor([32],"float32"), list[1,-1,1,1,], )
paddle.reshape(Tensor([32],"float32"), list[1,32,1,1,], )
paddle.reshape(Tensor([40],"float32"), list[-1,1,], )
paddle.reshape(Tensor([4000, 1],"float32"), list[10,-1,], )
paddle.reshape(Tensor([481],"float32"), list[1,1,1,481,], )
paddle.reshape(Tensor([481],"float32"), list[1,1,481,1,], )
paddle.reshape(Tensor([6, 1, 128, 128],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([6, 1, 512, 512],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([64],"float32"), list[-1,1,], )
paddle.reshape(Tensor([64],"float32"), list[1,-1,1,1,], )
paddle.reshape(Tensor([64],"float32"), list[1,64,1,1,], )
paddle.reshape(Tensor([8, 1, 128, 128],"float32"), list[8,1,128,128,], )
paddle.reshape(Tensor([8, 1, 512, 512],"float32"), list[8,1,512,512,], )
paddle.reshape(Tensor([8, 1, 58081],"float32"), list[8,1,241,241,], )
paddle.reshape(Tensor([8, 32, 241, 241],"float32"), list[8,32,-1,], )
paddle.reshape(Tensor([8],"float32"), list[1,8,1,1,], )
paddle.reshape(x=Tensor([416, 30, 256],"float32"), shape=list[416,30,4,64,], )
paddle.reshape(x=Tensor([416, 30, 4, 64],"float32"), shape=list[416,30,256,], )
paddle.reshape(x=Tensor([416, 50, 256],"float32"), shape=list[416,50,4,64,], )
paddle.reshape(x=Tensor([416, 50, 4, 64],"float32"), shape=list[416,50,256,], )
paddle.reshape(x=Tensor([416, 7, 256],"float32"), shape=list[416,7,4,64,], )
paddle.reshape(x=Tensor([512, 30, 256],"float32"), shape=list[512,30,4,64,], )
paddle.reshape(x=Tensor([512, 30, 4, 64],"float32"), shape=list[512,30,256,], )
paddle.reshape(x=Tensor([512, 50, 256],"float32"), shape=list[512,50,4,64,], )
paddle.reshape(x=Tensor([512, 50, 4, 64],"float32"), shape=list[512,50,256,], )
paddle.reshape(x=Tensor([512, 7, 256],"float32"), shape=list[512,7,4,64,], )
paddle.reshape(x=Tensor([52, 30, 256],"float32"), shape=list[52,30,4,64,], )
paddle.reshape(x=Tensor([52, 30, 4, 64],"float32"), shape=list[52,30,256,], )
paddle.reshape(x=Tensor([52, 50, 256],"float32"), shape=list[52,50,4,64,], )
paddle.reshape(x=Tensor([52, 50, 4, 64],"float32"), shape=list[52,50,256,], )
paddle.reshape(x=Tensor([52, 7, 256],"float32"), shape=list[52,7,4,64,], )
paddle.sin(Tensor([100, 20],"float32"), )
paddle.sin(Tensor([1000, 10],"float32"), )
paddle.sin(Tensor([10000, 100],"float32"), )
paddle.sin(Tensor([10000, 200],"float32"), )
paddle.sin(Tensor([10000, 50],"float32"), )
paddle.sin(Tensor([1002, 100],"float32"), )
paddle.sin(Tensor([1002, 50],"float32"), )
paddle.sin(Tensor([1024, 102],"float32"), )
paddle.sin(Tensor([128, 1],"float32"), )
paddle.sin(Tensor([128512, 100],"float32"), )
paddle.sin(Tensor([128512, 50],"float32"), )
paddle.sin(Tensor([15, 1],"float32"), )
paddle.sin(Tensor([16800, 1],"float32"), )
paddle.sin(Tensor([17152, 100],"float32"), )
paddle.sin(Tensor([17152, 50],"float32"), )
paddle.sin(Tensor([1800, 20],"float32"), )
paddle.sin(Tensor([200, 128],"float32"), )
paddle.sin(Tensor([200, 64],"float32"), )
paddle.sin(Tensor([20000, 100],"float32"), )
paddle.sin(Tensor([20000, 50],"float32"), )
paddle.sin(Tensor([202, 100],"float32"), )
paddle.sin(Tensor([202, 50],"float32"), )
paddle.sin(Tensor([22120, 1],"float32"), )
paddle.sin(Tensor([25, 1],"float32"), )
paddle.sin(Tensor([250, 30],"float32"), )
paddle.sin(Tensor([256, 100],"float32"), )
paddle.sin(Tensor([256, 30],"float32"), )
paddle.sin(Tensor([256, 50],"float32"), )
paddle.sin(Tensor([2885, 20],"float32"), )
paddle.sin(Tensor([32812, 100],"float32"), )
paddle.sin(Tensor([32812, 200],"float32"), )
paddle.sin(Tensor([34304, 100],"float32"), )
paddle.sin(Tensor([34304, 50],"float32"), )
paddle.sin(Tensor([400, 180],"float32"), )
paddle.sin(Tensor([400, 234],"float32"), )
paddle.sin(Tensor([400, 260],"float32"), )
paddle.sin(Tensor([402, 100],"float32"), )
paddle.sin(Tensor([402, 50],"float32"), )
paddle.sin(Tensor([4096, 1],"float32"), )
paddle.sin(Tensor([4096, 128],"float32"), )
paddle.sin(Tensor([4800, 1],"float32"), )
paddle.sin(Tensor([50, 128],"float32"), )
paddle.sin(Tensor([50000, 100],"float32"), )
paddle.sin(Tensor([50000, 200],"float32"), )
paddle.sin(Tensor([502, 100],"float32"), )
paddle.sin(Tensor([502, 50],"float32"), )
paddle.sin(Tensor([512, 1],"float32"), )
paddle.sin(Tensor([512, 100],"float32"), )
paddle.sin(Tensor([512, 128],"float32"), )
paddle.sin(Tensor([512, 50],"float32"), )
paddle.sin(Tensor([512, 8],"float32"), )
paddle.sin(Tensor([6284, 20],"float32"), )
paddle.sin(Tensor([64, 1],"float32"), )
paddle.sin(Tensor([64, 50],"float32"), )
paddle.sin(Tensor([6512, 100],"float32"), )
paddle.sin(Tensor([6512, 50],"float32"), )
paddle.sin(Tensor([68608, 100],"float32"), )
paddle.sin(Tensor([68608, 50],"float32"), )
paddle.sin(Tensor([8000, 1],"float32"), )
paddle.sin(Tensor([8192, 1],"float32"), )
paddle.sin(Tensor([8192, 128],"float32"), )
paddle.sin(Tensor([8810, 100],"float32"), )
paddle.sin(Tensor([8810, 200],"float32"), )
paddle.sin(x=Tensor([30, 128],"float32"), )
paddle.slice(Tensor([16, 32, 20, 11],"complex64"), list[2,3,], starts=list[0,0,], ends=list[19,10,], )
paddle.slice(Tensor([16, 64, 19, 10],"complex64"), list[2,3,], starts=list[0,0,], ends=list[10,6,], )
paddle.sparse.coalesce(Tensor([1358, 1358],"float32"), )
paddle.sparse.coalesce(Tensor([3029, 3029],"float32"), )
paddle.sparse.coalesce(Tensor([3029, 458],"float32"), )
paddle.sparse.coalesce(Tensor([3886, 1358],"float32"), )
paddle.sparse.coalesce(Tensor([3887, 1358],"float32"), )
paddle.sparse.coalesce(Tensor([3887, 3887],"float32"), )
paddle.sparse.coalesce(Tensor([458, 458],"float32"), )
paddle.sparse.coalesce(Tensor([6683, 3029],"float32"), )
paddle.sparse.coalesce(Tensor([6684, 3029],"float32"), )
paddle.sparse.coalesce(Tensor([6684, 6684],"float32"), )
paddle.sparse.matmul(Tensor([100, 69278],"float32"), Tensor([69278, 1],"float32"), )
paddle.sparse.transpose(Tensor([3029, 458],"float32"), list[1,0,], )
paddle.sparse.transpose(Tensor([3886, 1358],"float32"), list[1,0,], )
paddle.sparse.transpose(Tensor([6683, 3029],"float32"), list[1,0,], )
paddle.sqrt(Tensor([1444],"float32"), )
paddle.sqrt(Tensor([256512, 1],"float32"), )
paddle.sqrt(Tensor([36],"float32"), )
paddle.sqrt(Tensor([38],"float32"), )
paddle.sqrt(Tensor([9],"float32"), )
paddle.square(Tensor([],"float32"), )
paddle.square(Tensor([1, 1],"float32"), name=None, )
paddle.square(Tensor([1, 64, 64, 1],"float64"), name=None, )
paddle.square(Tensor([100, 1],"float32"), )
paddle.square(Tensor([100, 1],"float32"), name=None, )
paddle.square(Tensor([100, 100],"float32"), name=None, )
paddle.square(Tensor([100, 376, 1],"float32"), )
paddle.square(Tensor([1000, 1],"float32"), name=None, )
paddle.square(Tensor([10000, 1],"float32"), )
paddle.square(Tensor([10000, 1],"float32"), name=None, )
paddle.square(Tensor([100000, 1],"float32"), name=None, )
paddle.square(Tensor([101, 1],"float32"), )
paddle.square(Tensor([101, 1],"float32"), name=None, )
paddle.square(Tensor([10201, 1],"float32"), name=None, )
paddle.square(Tensor([1024, 1],"float32"), name=None, )
paddle.square(Tensor([10240, 1],"float32"), name=None, )
paddle.square(Tensor([1100, 1],"float32"), name=None, )
paddle.square(Tensor([11661, 3],"float32"), )
paddle.square(Tensor([1168, 1],"float32"), name=None, )
paddle.square(Tensor([1200, 1],"float32"), )
paddle.square(Tensor([1209, 1],"float32"), name=None, )
paddle.square(Tensor([125, 1],"float32"), name=None, )
paddle.square(Tensor([128, 1],"float32"), name=None, )
paddle.square(Tensor([128512, 1],"float32"), )
paddle.square(Tensor([128512, 1],"float32"), name=None, )
paddle.square(Tensor([1291, 1],"float32"), )
paddle.square(Tensor([1300, 1],"float32"), name=None, )
paddle.square(Tensor([147015, 1],"float32"), name=None, )
paddle.square(Tensor([1485, 1],"float32"), name=None, )
paddle.square(Tensor([15, 1],"float32"), name=None, )
paddle.square(Tensor([1515, 1],"float32"), name=None, )
paddle.square(Tensor([15548, 3],"float32"), )
paddle.square(Tensor([156816, 1],"float32"), name=None, )
paddle.square(Tensor([1609, 1],"float32"), name=None, )
paddle.square(Tensor([17, 376, 1],"float32"), )
paddle.square(Tensor([17152, 1],"float32"), )
paddle.square(Tensor([17152, 1],"float32"), name=None, )
paddle.square(Tensor([1800, 1],"float32"), )
paddle.square(Tensor([1820, 1],"float32"), name=None, )
paddle.square(Tensor([18211, 1],"float32"), )
paddle.square(Tensor([2, 1501, 1],"float32"), )
paddle.square(Tensor([20, 1],"float32"), name=None, )
paddle.square(Tensor([200, 1],"float32"), )
paddle.square(Tensor([2000, 1],"float32"), name=None, )
paddle.square(Tensor([20000, 1],"float32"), )
paddle.square(Tensor([20000, 1],"float32"), name=None, )
paddle.square(Tensor([201, 1],"float32"), )
paddle.square(Tensor([2020, 1],"float32"), name=None, )
paddle.square(Tensor([2048, 1],"float32"), name=None, )
paddle.square(Tensor([20569, 1],"float32"), name=None, )
paddle.square(Tensor([20600, 1],"float32"), name=None, )
paddle.square(Tensor([228595, 1],"float32"), name=None, )
paddle.square(Tensor([2419, 1],"float32"), name=None, )
paddle.square(Tensor([2430, 1],"float32"), name=None, )
paddle.square(Tensor([25, 1],"float32"), name=None, )
paddle.square(Tensor([251, 1],"float32"), )
paddle.square(Tensor([256, 1],"float32"), name=None, )
paddle.square(Tensor([256, 128, 1],"float32"), name=None, )
paddle.square(Tensor([256, 15, 3],"float32"), name=None, )
paddle.square(Tensor([256, 16, 3],"float32"), name=None, )
paddle.square(Tensor([2601, 1],"float32"), name=None, )
paddle.square(Tensor([26736, 3],"float32"), )
paddle.square(Tensor([282600, 1],"float32"), name=None, )
paddle.square(Tensor([2885, 1],"float32"), )
paddle.square(Tensor([2962708, 1],"float32"), name=None, )
paddle.square(Tensor([304794, 1],"float32"), name=None, )
paddle.square(Tensor([32, 1],"float32"), name=None, )
paddle.square(Tensor([32812, 1],"float32"), name=None, )
paddle.square(Tensor([34304, 1],"float32"), )
paddle.square(Tensor([34304, 1],"float32"), name=None, )
paddle.square(Tensor([3548, 12, 170, 1],"float32"), )
paddle.square(Tensor([39992, 1],"float32"), name=None, )
paddle.square(Tensor([4, 1],"float32"), name=None, )
paddle.square(Tensor([400, 1],"float32"), name=None, )
paddle.square(Tensor([4096, 1],"float32"), name=None, )
paddle.square(Tensor([4830, 1],"float32"), name=None, )
paddle.square(Tensor([483100, 1],"float32"), name=None, )
paddle.square(Tensor([50, 1],"float32"), name=None, )
paddle.square(Tensor([50, 1501, 1],"float32"), )
paddle.square(Tensor([5000, 1],"float32"), )
paddle.square(Tensor([50000, 1],"float32"), )
paddle.square(Tensor([50000, 1],"float32"), name=None, )
paddle.square(Tensor([501, 1],"float32"), )
paddle.square(Tensor([512, 1],"float32"), name=None, )
paddle.square(Tensor([512, 15, 3],"float32"), name=None, )
paddle.square(Tensor([512, 16, 3],"float32"), name=None, )
paddle.square(Tensor([5200, 1],"float32"), name=None, )
paddle.square(Tensor([544, 1],"float32"), name=None, )
paddle.square(Tensor([600, 1],"float32"), name=None, )
paddle.square(Tensor([600, 1],"float64"), name=None, )
paddle.square(Tensor([6000, 1],"float32"), name=None, )
paddle.square(Tensor([6284, 1],"float32"), )
paddle.square(Tensor([64, 1, 64, 1],"float64"), name=None, )
paddle.square(Tensor([64, 3, 3, 64, 128],"float32"), name=None, )
paddle.square(Tensor([64, 4, 3, 64, 128],"float32"), name=None, )
paddle.square(Tensor([64, 64, 1, 1],"float64"), name=None, )
paddle.square(Tensor([64, 64, 64, 1],"float32"), name=None, )
paddle.square(Tensor([650, 1],"float32"), name=None, )
paddle.square(Tensor([6512, 1],"float32"), )
paddle.square(Tensor([6512, 1],"float32"), name=None, )
paddle.square(Tensor([68, 376, 1],"float32"), )
paddle.square(Tensor([68608, 1],"float32"), )
paddle.square(Tensor([68608, 1],"float32"), name=None, )
paddle.square(Tensor([7999, 1],"float32"), name=None, )
paddle.square(Tensor([8, 1, 512, 512],"float32"), )
paddle.square(Tensor([8, 128, 64, 64],"float16"), )
paddle.square(Tensor([8, 1501, 1],"float32"), )
paddle.square(Tensor([8, 256, 64, 64],"float16"), )
paddle.square(Tensor([8, 32, 256, 256],"float16"), )
paddle.square(Tensor([8, 64, 128, 128],"float16"), )
paddle.square(Tensor([8000, 1],"float32"), name=None, )
paddle.square(Tensor([8192, 1],"float32"), name=None, )
paddle.square(Tensor([8490, 1],"float32"), name=None, )
paddle.square(Tensor([8810, 1],"float32"), )
paddle.square(Tensor([8810, 1],"float32"), name=None, )
paddle.square(Tensor([89, 1],"float32"), name=None, )
paddle.square(Tensor([9330, 1],"float32"), name=None, )
paddle.square(Tensor([93401, 1],"float32"), name=None, )
paddle.square(Tensor([9420, 1],"float32"), name=None, )
paddle.square(Tensor([9801, 1],"float32"), name=None, )
paddle.square(Tensor([99, 1],"float32"), name=None, )
paddle.square(Tensor([992, 1],"float32"), name=None, )
paddle.stack(list[Tensor([],"float32"),Tensor([],"float32"),], )
paddle.stack(list[Tensor([1, 16, 16],"float32"),Tensor([1, 16, 16],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 16, 16],"float32"),Tensor([1, 16, 16],"float32"),Tensor([1, 16, 16],"float32"),Tensor([1, 16, 16],"float32"),Tensor([1, 16, 16],"float32"),Tensor([1, 16, 16],"float32"),Tensor([1, 16, 16],"float32"),Tensor([1, 16, 16],"float32"),Tensor([1, 16, 16],"float32"),Tensor([1, 16, 16],"float32"),Tensor([1, 16, 16],"float32"),Tensor([1, 16, 16],"float32"),Tensor([1, 16, 16],"float32"),Tensor([1, 16, 16],"float32"),Tensor([1, 16, 16],"float32"),Tensor([1, 16, 16],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),Tensor([1, 241, 241],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 32, 32],"float32"),Tensor([1, 32, 32],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 32, 32],"float32"),Tensor([1, 32, 32],"float32"),Tensor([1, 32, 32],"float32"),Tensor([1, 32, 32],"float32"),Tensor([1, 32, 32],"float32"),Tensor([1, 32, 32],"float32"),Tensor([1, 32, 32],"float32"),Tensor([1, 32, 32],"float32"),Tensor([1, 32, 32],"float32"),Tensor([1, 32, 32],"float32"),Tensor([1, 32, 32],"float32"),Tensor([1, 32, 32],"float32"),Tensor([1, 32, 32],"float32"),Tensor([1, 32, 32],"float32"),Tensor([1, 32, 32],"float32"),Tensor([1, 32, 32],"float32"),], axis=0, )
paddle.stack(list[Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),Tensor([1240],"float32"),], axis=1, )
paddle.stack(list[Tensor([1436],"int32"),Tensor([1436],"int32"),], axis=0, )
paddle.stack(list[Tensor([17672],"int32"),Tensor([17672],"int32"),], axis=0, )
paddle.stack(list[Tensor([27187],"int32"),Tensor([27187],"int32"),], axis=0, )
paddle.stack(list[Tensor([3, 16, 16],"float32"),Tensor([3, 16, 16],"float32"),], axis=0, )
paddle.stack(list[Tensor([3, 16, 16],"float32"),Tensor([3, 16, 16],"float32"),Tensor([3, 16, 16],"float32"),Tensor([3, 16, 16],"float32"),Tensor([3, 16, 16],"float32"),Tensor([3, 16, 16],"float32"),Tensor([3, 16, 16],"float32"),Tensor([3, 16, 16],"float32"),Tensor([3, 16, 16],"float32"),Tensor([3, 16, 16],"float32"),Tensor([3, 16, 16],"float32"),Tensor([3, 16, 16],"float32"),Tensor([3, 16, 16],"float32"),Tensor([3, 16, 16],"float32"),Tensor([3, 16, 16],"float32"),Tensor([3, 16, 16],"float32"),], axis=0, )
paddle.stack(list[Tensor([3, 32, 32],"float32"),Tensor([3, 32, 32],"float32"),], axis=0, )
paddle.stack(list[Tensor([3, 32, 32],"float32"),Tensor([3, 32, 32],"float32"),Tensor([3, 32, 32],"float32"),Tensor([3, 32, 32],"float32"),Tensor([3, 32, 32],"float32"),Tensor([3, 32, 32],"float32"),Tensor([3, 32, 32],"float32"),Tensor([3, 32, 32],"float32"),Tensor([3, 32, 32],"float32"),Tensor([3, 32, 32],"float32"),Tensor([3, 32, 32],"float32"),Tensor([3, 32, 32],"float32"),Tensor([3, 32, 32],"float32"),Tensor([3, 32, 32],"float32"),Tensor([3, 32, 32],"float32"),Tensor([3, 32, 32],"float32"),], axis=0, )
paddle.stack(list[Tensor([3, 3840, 5120],"float32"),Tensor([3, 3840, 5120],"float32"),], )
paddle.stack(list[Tensor([32, 15, 8, 8, 32],"float32"),Tensor([32, 15, 8, 8, 32],"float32"),], axis=-1, )
paddle.stack(list[Tensor([3837],"int32"),Tensor([3837],"int32"),], axis=0, )
paddle.stack(list[Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),Tensor([4936],"float32"),], axis=1, )
paddle.stack(list[Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),Tensor([5168],"float32"),], axis=1, )
paddle.stack(list[Tensor([5392],"int32"),Tensor([5392],"int32"),], axis=0, )
paddle.stack(list[Tensor([5514],"int32"),Tensor([5514],"int32"),], axis=0, )
paddle.stack(tuple(Tensor([16, 40, 40],"float32"),Tensor([16, 40, 40],"float32"),), axis=1, )
paddle.stack(tuple(Tensor([4, 32, 32, 16],"float32"),Tensor([4, 32, 32, 16],"float32"),), -1, )
paddle.stack(tuple(Tensor([64, 40, 40],"float32"),Tensor([64, 40, 40],"float32"),), axis=1, )
paddle.stack(x=list[Tensor([100, 2001],"float32"),Tensor([100, 2001],"float32"),], axis=-1, )
paddle.stack(x=list[Tensor([1000, 2001],"float32"),Tensor([1000, 2001],"float32"),], axis=-1, )
paddle.Tensor.__len__(Tensor([1, 1],"float32"), )
paddle.Tensor.__len__(Tensor([1, 1],"int64"), )
paddle.Tensor.__len__(Tensor([1],"float32"), )
paddle.Tensor.__len__(Tensor([100, 1],"float32"), )
paddle.Tensor.__len__(Tensor([100, 2001, 2],"float32"), )
paddle.Tensor.__len__(Tensor([100, 376, 1],"float32"), )
paddle.Tensor.__len__(Tensor([100, 376, 376],"float32"), )
paddle.Tensor.__len__(Tensor([1000, 1],"float32"), )
paddle.Tensor.__len__(Tensor([1000, 2001, 2],"float32"), )
paddle.Tensor.__len__(Tensor([10000, 1],"float32"), )
paddle.Tensor.__len__(Tensor([10000, 100],"float32"), )
paddle.Tensor.__len__(Tensor([100000, 1],"float32"), )
paddle.Tensor.__len__(Tensor([100000, 100],"float32"), )
paddle.Tensor.__len__(Tensor([1002, 1],"float32"), )
paddle.Tensor.__len__(Tensor([101, 1],"float32"), )
paddle.Tensor.__len__(Tensor([10201, 1],"float32"), )
paddle.Tensor.__len__(Tensor([102912, 1],"float32"), )
paddle.Tensor.__len__(Tensor([12, 1],"float32"), )
paddle.Tensor.__len__(Tensor([128512, 1],"float32"), )
paddle.Tensor.__len__(Tensor([1291, 1],"float32"), )
paddle.Tensor.__len__(Tensor([147015, 1],"float32"), )
paddle.Tensor.__len__(Tensor([1485, 1],"float32"), )
paddle.Tensor.__len__(Tensor([15, 1],"float32"), )
paddle.Tensor.__len__(Tensor([1515, 1],"float32"), )
paddle.Tensor.__len__(Tensor([156816, 1],"float32"), )
paddle.Tensor.__len__(Tensor([16800, 1],"float32"), )
paddle.Tensor.__len__(Tensor([17, 376, 1],"float32"), )
paddle.Tensor.__len__(Tensor([17152, 1],"float32"), )
paddle.Tensor.__len__(Tensor([17320, 1],"float32"), )
paddle.Tensor.__len__(Tensor([18211, 1],"float32"), )
paddle.Tensor.__len__(Tensor([1965, 1],"float64"), )
paddle.Tensor.__len__(Tensor([2, 1501, 1],"float32"), )
paddle.Tensor.__len__(Tensor([20, 1],"float32"), )
paddle.Tensor.__len__(Tensor([200, 39, 14, 14, 1],"float32"), )
paddle.Tensor.__len__(Tensor([20000, 1],"float32"), )
paddle.Tensor.__len__(Tensor([202, 1],"float32"), )
paddle.Tensor.__len__(Tensor([2020, 1],"float32"), )
paddle.Tensor.__len__(Tensor([20569, 1],"float32"), )
paddle.Tensor.__len__(Tensor([20600, 1],"float32"), )
paddle.Tensor.__len__(Tensor([22120, 1],"float32"), )
paddle.Tensor.__len__(Tensor([22387, 1],"float32"), )
paddle.Tensor.__len__(Tensor([228595, 1],"float32"), )
paddle.Tensor.__len__(Tensor([2430, 1],"float32"), )
paddle.Tensor.__len__(Tensor([25, 1],"float32"), )
paddle.Tensor.__len__(Tensor([256, 1],"float32"), )
paddle.Tensor.__len__(Tensor([256512, 1],"float32"), )
paddle.Tensor.__len__(Tensor([2601, 1],"float32"), )
paddle.Tensor.__len__(Tensor([282600, 1],"float32"), )
paddle.Tensor.__len__(Tensor([2885, 1],"float32"), )
paddle.Tensor.__len__(Tensor([2962708, 1],"float32"), )
paddle.Tensor.__len__(Tensor([304794, 1],"float32"), )
paddle.Tensor.__len__(Tensor([32812, 1],"float32"), )
paddle.Tensor.__len__(Tensor([34304, 1],"float32"), )
paddle.Tensor.__len__(Tensor([348810, 1],"float32"), )
paddle.Tensor.__len__(Tensor([3548, 12, 170, 1],"float32"), )
paddle.Tensor.__len__(Tensor([39992, 1],"float32"), )
paddle.Tensor.__len__(Tensor([4, 1],"float32"), )
paddle.Tensor.__len__(Tensor([400, 1],"float32"), )
paddle.Tensor.__len__(Tensor([402, 1],"float32"), )
paddle.Tensor.__len__(Tensor([4148, 30, 20],"float32"), )
paddle.Tensor.__len__(Tensor([4148, 30],"int64"), )
paddle.Tensor.__len__(Tensor([4800, 1],"float32"), )
paddle.Tensor.__len__(Tensor([4830, 1],"float32"), )
paddle.Tensor.__len__(Tensor([483100, 1],"float32"), )
paddle.Tensor.__len__(Tensor([50, 1501, 1],"float32"), )
paddle.Tensor.__len__(Tensor([50, 1501, 1501],"float32"), )
paddle.Tensor.__len__(Tensor([50000, 1],"float32"), )
paddle.Tensor.__len__(Tensor([502, 1],"float32"), )
paddle.Tensor.__len__(Tensor([512, 1],"float32"), )
paddle.Tensor.__len__(Tensor([6284, 1],"float32"), )
paddle.Tensor.__len__(Tensor([68608, 1],"float32"), )
paddle.Tensor.__len__(Tensor([747, 1],"float64"), )
paddle.Tensor.__len__(Tensor([7999, 1],"float32"), )
paddle.Tensor.__len__(Tensor([8490, 1],"float32"), )
paddle.Tensor.__len__(Tensor([9330, 1],"float32"), )
paddle.Tensor.__len__(Tensor([93401, 1],"float32"), )
paddle.Tensor.__len__(Tensor([9420, 1],"float32"), )
paddle.Tensor.__len__(Tensor([9801, 1],"float32"), )
paddle.Tensor.__len__(Tensor([99, 1],"float32"), )
paddle.Tensor.chunk(Tensor([100, 1444, 2, 2],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([100, 36, 3, 3],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([100, 38, 20],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([100, 9, 10],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([227, 36, 3, 3],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([227, 9, 10],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([256, 1444, 2, 2],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([256, 36, 3, 3],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([256, 38, 20],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([256, 9, 10],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([56, 1444, 2, 2],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([56, 38, 20],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([82, 36, 3, 3],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([82, 9, 10],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([87, 1444, 2, 2],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([87, 38, 20],"float32"), chunks=2, axis=-1, )
paddle.Tensor.clip(Tensor([],"float32"), min=1.1920928955078125e-07, )
paddle.Tensor.clone(Tensor([1, 50, 256],"float32"), )
paddle.Tensor.clone(Tensor([1],"float32"), )
paddle.Tensor.clone(Tensor([1000, 1, 16, 16],"float32"), )
paddle.Tensor.clone(Tensor([105344, 128],"float32"), )
paddle.Tensor.clone(Tensor([15, 48],"float32"), )
paddle.Tensor.clone(Tensor([17157],"float32"), )
paddle.Tensor.clone(Tensor([1861],"float32"), )
paddle.Tensor.clone(Tensor([187679, 1],"float32"), )
paddle.Tensor.clone(Tensor([19528, 128],"float32"), )
paddle.Tensor.clone(Tensor([2, 105344],"int64"), )
paddle.Tensor.clone(Tensor([2, 19528],"int64"), )
paddle.Tensor.clone(Tensor([2, 20],"float32"), )
paddle.Tensor.clone(Tensor([2, 26336],"int64"), )
paddle.Tensor.clone(Tensor([2, 50],"float32"), )
paddle.Tensor.clone(Tensor([2, 5168],"int64"), )
paddle.Tensor.clone(Tensor([2, 58584],"int64"), )
paddle.Tensor.clone(Tensor([2, 64],"float32"), )
paddle.Tensor.clone(Tensor([2, 78112],"int64"), )
paddle.Tensor.clone(Tensor([20, 1],"float32"), )
paddle.Tensor.clone(Tensor([20, 20],"float32"), )
paddle.Tensor.clone(Tensor([20],"float32"), )
paddle.Tensor.clone(Tensor([200, 256],"float32"), )
paddle.Tensor.clone(Tensor([200],"float32"), )
paddle.Tensor.clone(Tensor([23619],"float32"), )
paddle.Tensor.clone(Tensor([256, 1, 4],"float32"), )
paddle.Tensor.clone(Tensor([256, 1],"float32"), )
paddle.Tensor.clone(Tensor([256, 256],"float32"), )
paddle.Tensor.clone(Tensor([256],"float32"), )
paddle.Tensor.clone(Tensor([26336, 128],"float32"), )
paddle.Tensor.clone(Tensor([3, 90],"float32"), )
paddle.Tensor.clone(Tensor([3],"float32"), )
paddle.Tensor.clone(Tensor([4],"float32"), )
paddle.Tensor.clone(Tensor([48, 1],"float32"), )
paddle.Tensor.clone(Tensor([48, 48],"float32"), )
paddle.Tensor.clone(Tensor([48],"float32"), )
paddle.Tensor.clone(Tensor([5],"float32"), )
paddle.Tensor.clone(Tensor([50, 1, 16, 16],"float32"), )
paddle.Tensor.clone(Tensor([50, 1, 32, 32],"float32"), )
paddle.Tensor.clone(Tensor([50, 3],"float32"), )
paddle.Tensor.clone(Tensor([50, 50],"float32"), )
paddle.Tensor.clone(Tensor([50],"float32"), )
paddle.Tensor.clone(Tensor([5168, 128],"float32"), )
paddle.Tensor.clone(Tensor([58584, 128],"float32"), )
paddle.Tensor.clone(Tensor([64, 5],"float32"), )
paddle.Tensor.clone(Tensor([64, 64],"float32"), )
paddle.Tensor.clone(Tensor([64],"float32"), )
paddle.Tensor.clone(Tensor([66244],"float32"), )
paddle.Tensor.clone(Tensor([78112, 128],"float32"), )
paddle.Tensor.clone(Tensor([7953],"float32"), )
paddle.Tensor.clone(Tensor([90, 4],"float32"), )
paddle.Tensor.clone(Tensor([90, 90],"float32"), )
paddle.Tensor.clone(Tensor([90],"float32"), )
paddle.Tensor.expand(Tensor([1, 1, 16, 16],"float32"), list[1,-1,-1,-1,], )
paddle.Tensor.expand(Tensor([1, 1, 32, 32],"float32"), list[1,-1,-1,-1,], )
paddle.Tensor.expand(Tensor([1, 128, 256],"float32"), list[256,-1,-1,], )
paddle.Tensor.expand(Tensor([32, 32],"float32"), list[256,32,32,], )
paddle.Tensor.expand(Tensor([32, 32],"float32"), list[512,32,32,], )
paddle.Tensor.fill_(Tensor([],"uint8"), value=1, )
paddle.Tensor.flatten(Tensor([22387, 1],"float32"), )
paddle.Tensor.flatten(Tensor([32, 256, 15, 15],"float32"), start_axis=2, )
paddle.Tensor.flatten(Tensor([6284, 1],"float32"), )
paddle.Tensor.mean(Tensor([1, 1],"float32"), )
paddle.Tensor.mean(Tensor([1, 64, 64, 1],"float64"), )
paddle.Tensor.mean(Tensor([100, 1],"float32"), )
paddle.Tensor.mean(Tensor([100, 100],"float32"), )
paddle.Tensor.mean(Tensor([1000, 1],"float32"), )
paddle.Tensor.mean(Tensor([1000],"float32"), )
paddle.Tensor.mean(Tensor([10000, 1],"float32"), )
paddle.Tensor.mean(Tensor([100000, 1],"float32"), )
paddle.Tensor.mean(Tensor([10201, 1],"float32"), )
paddle.Tensor.mean(Tensor([10240, 1],"float32"), )
paddle.Tensor.mean(Tensor([1209, 1],"float32"), )
paddle.Tensor.mean(Tensor([125, 1],"float32"), )
paddle.Tensor.mean(Tensor([128, 1],"float32"), )
paddle.Tensor.mean(Tensor([1300, 1],"float32"), )
paddle.Tensor.mean(Tensor([1444, 1024],"float32"), axis=1, )
paddle.Tensor.mean(Tensor([15, 1],"float32"), )
paddle.Tensor.mean(Tensor([156816, 1],"float32"), )
paddle.Tensor.mean(Tensor([1820, 1],"float32"), )
paddle.Tensor.mean(Tensor([187679, 1],"float32"), )
paddle.Tensor.mean(Tensor([187679, 3],"float32"), )
paddle.Tensor.mean(Tensor([20, 1],"float32"), )
paddle.Tensor.mean(Tensor([20000, 1],"float32"), )
paddle.Tensor.mean(Tensor([2020, 1],"float32"), )
paddle.Tensor.mean(Tensor([2048, 1],"float32"), )
paddle.Tensor.mean(Tensor([20569, 1],"float32"), )
paddle.Tensor.mean(Tensor([20600, 1],"float32"), )
paddle.Tensor.mean(Tensor([228595, 1],"float32"), )
paddle.Tensor.mean(Tensor([2419, 1],"float32"), )
paddle.Tensor.mean(Tensor([2430, 1],"float32"), )
paddle.Tensor.mean(Tensor([25, 1],"float32"), )
paddle.Tensor.mean(Tensor([256, 1],"float32"), )
paddle.Tensor.mean(Tensor([256, 128, 1],"float32"), )
paddle.Tensor.mean(Tensor([256, 15, 3],"float32"), )
paddle.Tensor.mean(Tensor([256, 16, 3],"float32"), )
paddle.Tensor.mean(Tensor([2601, 1],"float32"), )
paddle.Tensor.mean(Tensor([28, 170, 1],"float32"), )
paddle.Tensor.mean(Tensor([282600, 1],"float32"), )
paddle.Tensor.mean(Tensor([2962708, 1],"float32"), )
paddle.Tensor.mean(Tensor([304794, 1],"float32"), )
paddle.Tensor.mean(Tensor([32, 1],"float32"), )
paddle.Tensor.mean(Tensor([32, 256],"float32"), )
paddle.Tensor.mean(Tensor([32, 256],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([3548, 12, 170, 1],"float32"), )
paddle.Tensor.mean(Tensor([36, 2304],"float32"), axis=1, )
paddle.Tensor.mean(Tensor([38, 2560],"float32"), axis=1, )
paddle.Tensor.mean(Tensor([4, 1],"float32"), )
paddle.Tensor.mean(Tensor([400, 1],"float32"), )
paddle.Tensor.mean(Tensor([4096, 1],"float32"), )
paddle.Tensor.mean(Tensor([4830, 1],"float32"), )
paddle.Tensor.mean(Tensor([483100, 1],"float32"), )
paddle.Tensor.mean(Tensor([50, 1],"float32"), )
paddle.Tensor.mean(Tensor([512, 1],"float32"), )
paddle.Tensor.mean(Tensor([512, 15, 3],"float32"), )
paddle.Tensor.mean(Tensor([512, 16, 3],"float32"), )
paddle.Tensor.mean(Tensor([600, 1],"float32"), )
paddle.Tensor.mean(Tensor([600, 1],"float64"), )
paddle.Tensor.mean(Tensor([64, 1, 64, 1],"float64"), )
paddle.Tensor.mean(Tensor([64, 170, 1],"float32"), )
paddle.Tensor.mean(Tensor([64, 3, 3, 64, 128],"float32"), )
paddle.Tensor.mean(Tensor([64, 4, 3, 64, 128],"float32"), )
paddle.Tensor.mean(Tensor([64, 64, 1, 1],"float64"), )
paddle.Tensor.mean(Tensor([64, 64, 64, 1],"float32"), )
paddle.Tensor.mean(Tensor([8000, 1],"float32"), )
paddle.Tensor.mean(Tensor([8490, 1],"float32"), )
paddle.Tensor.mean(Tensor([89, 1],"float32"), )
paddle.Tensor.mean(Tensor([9, 1280],"float32"), axis=1, )
paddle.Tensor.mean(Tensor([9330, 1],"float32"), )
paddle.Tensor.mean(Tensor([93401, 1],"float32"), )
paddle.Tensor.mean(Tensor([9420, 1],"float32"), )
paddle.Tensor.mean(Tensor([9801, 1],"float32"), )
paddle.Tensor.mean(Tensor([992, 1],"float32"), )
paddle.Tensor.repeat_interleave(Tensor([1, 1, 64, 128],"float64"), 3, axis=1, )
paddle.Tensor.repeat_interleave(Tensor([1, 3, 64, 128],"float64"), 256, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([64, 1],"float32"), 4, axis=1, )
paddle.Tensor.squeeze(Tensor([1, 1],"float32"), )
paddle.Tensor.squeeze(Tensor([1, 3, 16, 16],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 3, 32, 32],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 3, 3840, 10240],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1],"float32"), )
paddle.Tensor.squeeze(Tensor([11661, 1, 128],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([11901],"float32"), )
paddle.Tensor.squeeze(Tensor([15548, 1, 128],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([1878],"float32"), )
paddle.Tensor.squeeze(Tensor([19806],"float32"), )
paddle.Tensor.squeeze(Tensor([22387, 1],"float32"), )
paddle.Tensor.squeeze(Tensor([26408],"float32"), )
paddle.Tensor.squeeze(Tensor([26736, 1, 128],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([3029, 1, 128],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([36, 36, 1, 1],"float32"), )
paddle.Tensor.squeeze(Tensor([3887, 1, 128],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([47604],"float32"), )
paddle.Tensor.squeeze(Tensor([6284, 1],"float32"), )
paddle.Tensor.squeeze(Tensor([6602],"float32"), )
paddle.Tensor.squeeze(Tensor([6684, 1, 128],"float32"), -2, )
paddle.Tensor.std(Tensor([1444, 1024],"float32"), axis=1, )
paddle.Tensor.std(Tensor([36, 2304],"float32"), axis=1, )
paddle.Tensor.std(Tensor([38, 2560],"float32"), axis=1, )
paddle.Tensor.std(Tensor([9, 1280],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([1, 1],"float32"), )
paddle.Tensor.sum(Tensor([1, 310, 1],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([1, 64, 64, 32],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([10, 1],"float32"), )
paddle.Tensor.sum(Tensor([10, 300],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([10, 400],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([10],"float32"), )
paddle.Tensor.sum(Tensor([100, 1],"float32"), )
paddle.Tensor.sum(Tensor([100, 100, 100, 32],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([100, 4, 38, 256],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([100, 4, 38, 38],"float32"), axis=tuple(1,2,), )
paddle.Tensor.sum(Tensor([100, 4, 9, 64],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([100, 4, 9, 9],"float32"), axis=tuple(1,2,), )
paddle.Tensor.sum(Tensor([1000, 1],"float32"), )
paddle.Tensor.sum(Tensor([10000, 1],"float32"), )
paddle.Tensor.sum(Tensor([101, 1],"float32"), )
paddle.Tensor.sum(Tensor([10201, 1],"float32"), )
paddle.Tensor.sum(Tensor([1024, 1],"float32"), )
paddle.Tensor.sum(Tensor([1100, 1],"float32"), )
paddle.Tensor.sum(Tensor([1168, 1],"float32"), )
paddle.Tensor.sum(Tensor([12000, 1],"float32"), )
paddle.Tensor.sum(Tensor([128, 1],"float32"), )
paddle.Tensor.sum(Tensor([128, 200],"float32"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([128512, 1],"float32"), )
paddle.Tensor.sum(Tensor([1358, 19528],"bool"), axis=0, )
paddle.Tensor.sum(Tensor([1358, 58584],"bool"), axis=0, )
paddle.Tensor.sum(Tensor([1358, 78112],"bool"), axis=0, )
paddle.Tensor.sum(Tensor([147015, 1],"float32"), )
paddle.Tensor.sum(Tensor([1485, 1],"float32"), )
paddle.Tensor.sum(Tensor([150, 1],"float32"), )
paddle.Tensor.sum(Tensor([1515, 1],"float32"), )
paddle.Tensor.sum(Tensor([1609, 1],"float32"), )
paddle.Tensor.sum(Tensor([1638, 1],"float32"), )
paddle.Tensor.sum(Tensor([17152, 1],"float32"), )
paddle.Tensor.sum(Tensor([17157],"float32"), )
paddle.Tensor.sum(Tensor([17157],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([1861],"float32"), )
paddle.Tensor.sum(Tensor([1861],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([2, 1],"float32"), )
paddle.Tensor.sum(Tensor([20],"float32"), )
paddle.Tensor.sum(Tensor([200, 1],"float32"), )
paddle.Tensor.sum(Tensor([2000, 1],"float32"), )
paddle.Tensor.sum(Tensor([2048, 1],"float32"), )
paddle.Tensor.sum(Tensor([227, 4, 9, 64],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([227, 4, 9, 9],"float32"), axis=tuple(1,2,), )
paddle.Tensor.sum(Tensor([23619],"float32"), )
paddle.Tensor.sum(Tensor([23619],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([2450, 1],"float32"), )
paddle.Tensor.sum(Tensor([250, 1],"float32"), )
paddle.Tensor.sum(Tensor([2500, 1],"float32"), )
paddle.Tensor.sum(Tensor([256, 1],"float32"), )
paddle.Tensor.sum(Tensor([256, 4, 38, 256],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([256, 4, 38, 38],"float32"), axis=tuple(1,2,), )
paddle.Tensor.sum(Tensor([256, 4, 9, 64],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([256, 4, 9, 9],"float32"), axis=tuple(1,2,), )
paddle.Tensor.sum(Tensor([28, 12, 170, 1],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([2800, 1],"float32"), )
paddle.Tensor.sum(Tensor([300, 1],"float32"), )
paddle.Tensor.sum(Tensor([3000, 1],"float32"), )
paddle.Tensor.sum(Tensor([3029, 105344],"bool"), axis=0, )
paddle.Tensor.sum(Tensor([3029, 26336],"bool"), axis=0, )
paddle.Tensor.sum(Tensor([315, 1],"float32"), )
paddle.Tensor.sum(Tensor([3150, 1],"float32"), )
paddle.Tensor.sum(Tensor([32, 1, 240, 240],"float32"), )
paddle.Tensor.sum(Tensor([32, 1, 241, 241],"float32"), )
paddle.Tensor.sum(Tensor([32, 1],"float32"), )
paddle.Tensor.sum(Tensor([32, 32],"float32"), )
paddle.Tensor.sum(Tensor([32812, 1],"float32"), )
paddle.Tensor.sum(Tensor([34304, 1],"float32"), )
paddle.Tensor.sum(Tensor([3450, 1],"float32"), )
paddle.Tensor.sum(Tensor([3500, 1],"float32"), )
paddle.Tensor.sum(Tensor([39992, 1],"float32"), )
paddle.Tensor.sum(Tensor([4, 1],"float32"), )
paddle.Tensor.sum(Tensor([400, 1],"float32"), )
paddle.Tensor.sum(Tensor([4000, 1],"float32"), )
paddle.Tensor.sum(Tensor([4094, 1],"float32"), )
paddle.Tensor.sum(Tensor([4096, 1],"float32"), )
paddle.Tensor.sum(Tensor([4200, 1],"float32"), )
paddle.Tensor.sum(Tensor([458, 5168],"bool"), axis=0, )
paddle.Tensor.sum(Tensor([4800, 1],"float32"), )
paddle.Tensor.sum(Tensor([5, 1],"float32"), )
paddle.Tensor.sum(Tensor([50],"float32"), )
paddle.Tensor.sum(Tensor([500, 1],"float32"), )
paddle.Tensor.sum(Tensor([5000, 1],"float32"), )
paddle.Tensor.sum(Tensor([50000, 1],"float32"), )
paddle.Tensor.sum(Tensor([512, 1],"float32"), )
paddle.Tensor.sum(Tensor([5200, 1],"float32"), )
paddle.Tensor.sum(Tensor([544, 1],"float32"), )
paddle.Tensor.sum(Tensor([56, 4, 38, 256],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([56, 4, 38, 38],"float32"), axis=tuple(1,2,), )
paddle.Tensor.sum(Tensor([600, 1],"float32"), )
paddle.Tensor.sum(Tensor([6000, 1],"float32"), )
paddle.Tensor.sum(Tensor([64, 1, 64, 32],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([64, 1],"float32"), )
paddle.Tensor.sum(Tensor([64, 12, 170, 1],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([64, 128, 128],"float32"), )
paddle.Tensor.sum(Tensor([64, 3, 172, 79],"float32"), )
paddle.Tensor.sum(Tensor([64, 64, 1, 32],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([64, 64, 64, 32],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([640, 1],"float32"), )
paddle.Tensor.sum(Tensor([6400, 1],"float32"), )
paddle.Tensor.sum(Tensor([650, 1],"float32"), )
paddle.Tensor.sum(Tensor([6512, 1],"float32"), )
paddle.Tensor.sum(Tensor([66244],"float32"), )
paddle.Tensor.sum(Tensor([66244],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([68608, 1],"float32"), )
paddle.Tensor.sum(Tensor([7000, 1],"float32"), )
paddle.Tensor.sum(Tensor([7953],"float32"), )
paddle.Tensor.sum(Tensor([7953],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([7999, 1],"float32"), )
paddle.Tensor.sum(Tensor([8, 1, 241, 241],"float32"), )
paddle.Tensor.sum(Tensor([8, 32, 241, 241],"float32"), 1, )
paddle.Tensor.sum(Tensor([800, 1],"float32"), )
paddle.Tensor.sum(Tensor([8000, 1],"float32"), )
paddle.Tensor.sum(Tensor([8150, 1],"float32"), )
paddle.Tensor.sum(Tensor([8192, 1],"float32"), )
paddle.Tensor.sum(Tensor([82, 4, 9, 64],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([82, 4, 9, 9],"float32"), axis=tuple(1,2,), )
paddle.Tensor.sum(Tensor([8500, 1],"float32"), )
paddle.Tensor.sum(Tensor([87, 4, 38, 256],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([87, 4, 38, 38],"float32"), axis=tuple(1,2,), )
paddle.Tensor.sum(Tensor([8810, 1],"float32"), )
paddle.Tensor.sum(Tensor([9801, 1],"float32"), )
paddle.Tensor.sum(Tensor([99, 1],"float32"), )
paddle.Tensor.unsqueeze(Tensor([1, 16, 16],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([1, 241, 241],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([1, 32, 1],"float32"), axis=-1, )
paddle.Tensor.unsqueeze(Tensor([1, 32, 32],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([1, 32],"float32"), list[0,], )
paddle.Tensor.unsqueeze(Tensor([1, 32],"float32"), list[0,0,], )
paddle.Tensor.unsqueeze(Tensor([1, 32],"float32"), list[-2,], )
paddle.Tensor.unsqueeze(Tensor([1, 64, 128],"float64"), 0, )
paddle.Tensor.unsqueeze(Tensor([1, 64, 32],"float32"), list[-2,], )
paddle.Tensor.unsqueeze(Tensor([100, 100, 32],"float32"), list[-2,], )
paddle.Tensor.unsqueeze(Tensor([100, 2001],"float32"), axis=-1, )
paddle.Tensor.unsqueeze(Tensor([100, 32],"float32"), list[0,], )
paddle.Tensor.unsqueeze(Tensor([100, 32],"float32"), list[0,0,], )
paddle.Tensor.unsqueeze(Tensor([100, 32],"float32"), list[-2,], )
paddle.Tensor.unsqueeze(Tensor([1000, 16, 16],"bool"), 1, )
paddle.Tensor.unsqueeze(Tensor([1000, 16, 16],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([1000, 2001],"float32"), axis=-1, )
paddle.Tensor.unsqueeze(Tensor([11661, 2],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([11661, 3],"float32"), -2, )
paddle.Tensor.unsqueeze(Tensor([128, 256],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([128],"float32"), axis=0, )
paddle.Tensor.unsqueeze(Tensor([1358, 2],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([1444, 1, 1],"float32"), axis=3, )
paddle.Tensor.unsqueeze(Tensor([1444, 1],"float32"), axis=2, )
paddle.Tensor.unsqueeze(Tensor([1444],"float32"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([15548, 2],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([15548, 3],"float32"), -2, )
paddle.Tensor.unsqueeze(Tensor([16, 16],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([200],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([241, 241],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([256, 1, 1],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([256, 1],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([26736, 2],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([26736, 3],"float32"), -2, )
paddle.Tensor.unsqueeze(Tensor([3, 3840, 10240],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([30],"float32"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([3029, 2],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([3029, 2],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([3029, 3],"float32"), -2, )
paddle.Tensor.unsqueeze(Tensor([32, 32, 1],"float32"), axis=-1, )
paddle.Tensor.unsqueeze(Tensor([32, 32],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([36, 1, 1],"float32"), axis=3, )
paddle.Tensor.unsqueeze(Tensor([36, 1],"float32"), axis=2, )
paddle.Tensor.unsqueeze(Tensor([36, 36, 1],"float32"), axis=3, )
paddle.Tensor.unsqueeze(Tensor([36, 36],"float32"), axis=2, )
paddle.Tensor.unsqueeze(Tensor([36],"float32"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([38, 1],"float32"), axis=2, )
paddle.Tensor.unsqueeze(Tensor([38],"float32"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([3887, 2],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([3887, 3],"float32"), -2, )
paddle.Tensor.unsqueeze(Tensor([416, 1, 30],"bool"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([416, 30],"bool"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([458, 2],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([50, 16, 16],"bool"), 1, )
paddle.Tensor.unsqueeze(Tensor([50, 16, 16],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([50, 32, 32],"bool"), 1, )
paddle.Tensor.unsqueeze(Tensor([50, 32, 32],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([512, 1, 30],"bool"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([512, 30],"bool"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([52, 1, 30],"bool"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([52, 30],"bool"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([64, 1, 32],"float32"), list[-2,], )
paddle.Tensor.unsqueeze(Tensor([64, 128],"float64"), 0, )
paddle.Tensor.unsqueeze(Tensor([64, 32],"float32"), list[0,], )
paddle.Tensor.unsqueeze(Tensor([64, 32],"float32"), list[0,0,], )
paddle.Tensor.unsqueeze(Tensor([64, 32],"float32"), list[-2,], )
paddle.Tensor.unsqueeze(Tensor([64, 64, 32],"float32"), list[-2,], )
paddle.Tensor.unsqueeze(Tensor([6684, 2],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([6684, 3],"float32"), -2, )
paddle.Tensor.unsqueeze(Tensor([9, 1],"float32"), axis=2, )
paddle.Tensor.unsqueeze(Tensor([9],"float32"), axis=1, )
paddle.transpose(Tensor([20, 2001, 64],"float32"), perm=list[0,2,1,], )
paddle.transpose(Tensor([50, 39, 14, 14, 8],"float32"), perm=list[0,4,1,2,3,], )
paddle.transpose(Tensor([50, 8, 39, 14, 14],"float32"), perm=list[0,2,3,4,1,], )
paddle.transpose(x=Tensor([32, 15, 15, 16, 16, 1],"float32"), perm=tuple(0,5,1,3,2,4,), )
paddle.tril(Tensor([32, 32],"float32"), -1, )
paddle.triu(Tensor([30, 30],"float32"), diagonal=1, )
