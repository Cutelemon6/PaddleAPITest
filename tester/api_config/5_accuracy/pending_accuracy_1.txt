paddle.Tensor.cast(Tensor([24, 128, 128],"float32"), "float", )
paddle.Tensor.cast(Tensor([24, 256, 256],"float32"), "float", )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float32"), 1, offset=2, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float32"), 4, 1, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float64"), 1, offset=2, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float64"), 4, 1, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int32"), 1, offset=2, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int32"), 4, 1, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int64"), 1, offset=2, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int64"), 4, 1, False, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=tuple(), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(), keepdim=False, )
paddle.bmm(Tensor([1, 300, 128],"float32"), Tensor([1, 128, 30976],"float32"), )
paddle.bmm(Tensor([1, 300, 128],"float32"), Tensor([1, 128, 33856],"float32"), )
paddle.bmm(Tensor([1, 300, 128],"float32"), Tensor([1, 128, 36864],"float32"), )
paddle.bmm(Tensor([1, 400, 128],"float32"), Tensor([1, 128, 30976],"float32"), )
paddle.bmm(Tensor([1, 400, 128],"float32"), Tensor([1, 128, 33856],"float32"), )
paddle.bmm(Tensor([1, 400, 128],"float32"), Tensor([1, 128, 36864],"float32"), )
paddle.cast(Tensor([12, 10],"bool"), "float", )
paddle.ceil(x=Tensor([3, 3, 3],"float64"), )paddle.clone(Tensor([1, 100, 256],"float32"), )
paddle.combinations(Tensor([0],"float32"), r=2, )
paddle.combinations(Tensor([0],"float32"), r=2, with_replacement=True, )
paddle.combinations(Tensor([1],"float32"), r=2, )
paddle.combinations(Tensor([3],"float32"), r=4, )
paddle.concat(list[Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2,
paddle.count_nonzero(Tensor([1, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=2, keepdim=True, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=True, )
paddle.count_nonzero(Tensor([3, 5],"float32"), keepdim=True, )
paddle.diagflat(Tensor([10, 10],"float64"), offset=-1, )
paddle.diagflat(Tensor([20],"float64"), offset=-1, )
paddle.diagflat(Tensor([],"float32"), -1, )
paddle.diagflat(x=Tensor([3, 2, 2, 1, 2, 4],"float64"), offset=-1, )
paddle.diagflat(x=Tensor([4],"float64"), offset=-1, )
paddle.diagonal_scatter(Tensor([10, 10],"complex128"), Tensor([10],"complex128"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"complex64"), Tensor([10],"complex64"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"float16"), Tensor([10],"float16"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"float32"), Tensor([10],"float32"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"float32"), Tensor([10],"float32"), offset=0, axis1=1, axis2=0, )
paddle.diagonal_scatter(Tensor([10, 10],"float32"), Tensor([8],"float32"), offset=-2, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"float32"), Tensor([9],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"float64"), Tensor([10],"float64"), offset=0, axis1=0, axis2=1, )
paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.lerp(Tensor([1, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), )
paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 2, 1],"float64"), Tensor([3, 6, 3, 4, 2, 1],"float64"), Tensor([3, 6, 3, 4, 2, 1],"float64"), )
paddle.lerp(Tensor([300, 2048],"float32"), Tensor([300, 2048],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([4, 1, 6],"float64"), Tensor([4, 1, 6],"float64"), Tensor([4, 1, 6],"float64"), )
paddle.lerp(Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), )
paddle.lerp(Tensor([4, 1],"float64"), Tensor([4, 1],"float64"), Tensor([4, 1],"float64"), )
paddle.lerp(Tensor([4, 7, 1],"float64"), Tensor([4, 7, 1],"float64"), Tensor([4, 7, 1],"float64"), )
paddle.lerp(Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.lerp(Tensor([5, 1, 4],"float64"), Tensor([5, 1, 4],"float64"), Tensor([5, 1, 4],"float64"), )
paddle.lerp(Tensor([5, 1],"float64"), Tensor([5, 1],"float64"), Tensor([5, 1],"float64"), )
paddle.lerp(Tensor([64, 64],"float32"), Tensor([],"float32"), Tensor([],"float32"), )
paddle.lerp(Tensor([7, 1],"float64"), Tensor([7, 1],"float64"), Tensor([7, 1],"float64"), )
paddle.lerp(Tensor([],"float32"), Tensor([64, 64],"float32"), Tensor([],"float32"), )
paddle.lerp(Tensor([],"float32"), Tensor([],"float32"), Tensor([],"float32"), )
paddle.linalg.lstsq(Tensor([10, 5],"float32"), Tensor([10, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 3],"float64"), Tensor([10, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 6],"float64"), Tensor([10, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([2, 3, 10],"float32"), Tensor([2, 3, 4],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([200, 100],"float64"), Tensor([200, 50],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([3, 2, 8],"float32"), Tensor([3, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2],"float64"), Tensor([3, 3],"float64"), rcond=1e-07, driver="gelsd", )
paddle.linalg.lstsq(Tensor([5, 10],"float64"), Tensor([5, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 4],"float64"), Tensor([5, 3],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([5, 5],"float64"), Tensor([5, 1],"float64"), rcond=None, driver="gelss", )
paddle.linalg.lstsq(Tensor([50, 600],"float64"), Tensor([50, 300],"float64"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([8, 2],"float32"), Tensor([8, 10],"float32"), rcond=1e-15, driver="gelsy", )
paddle.linalg.lstsq(Tensor([9, 9],"float32"), Tensor([9, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.nn.utils.parameters_to_vector(list[Tensor([10, 15],"float32"),Tensor([15],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([10, 20],"float32"),Tensor([20],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([10, 3],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([2, 2],"float32"),Tensor([2],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([3, 2, 4, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([3, 2, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([3, 2, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.unique(Tensor([120],"int64"), return_index=True, return_inverse=True, return_counts=True, dtype="int32", )
paddle.unique(Tensor([3, 5, 5],"float32"), return_index=True, return_inverse=True, return_counts=True, axis=0, )
paddle.unique(Tensor([],"float32"), return_index=True, return_inverse=True, return_counts=True, )
paddle.unique_consecutive(Tensor([],"float32"), return_inverse=True, return_counts=True, )
paddle.var(Tensor([],"float32"), )
paddle.var(Tensor([],"float32"), list[], )
