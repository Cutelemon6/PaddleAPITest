paddle.Tensor.__floordiv__(Tensor([],"int32"), 2, )
paddle.Tensor.__floordiv__(Tensor([],"int64"), 2, )
paddle.Tensor.__floordiv__(Tensor([],"int64"), 8, )
paddle.Tensor.__matmul__(Tensor([1, 1, 16384, 32],"float32"), Tensor([1, 1, 32, 256],"float32"), )
paddle.Tensor.__matmul__(Tensor([2, 1, 16384, 256],"float32"), Tensor([2, 1, 256, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([5, 1, 1280],"float32"), Tensor([1280, 51865],"float32"), )
paddle.Tensor.__matmul__(Tensor([5, 1, 384],"float32"), Tensor([384, 51865],"float32"), )
paddle.Tensor.__matmul__(Tensor([5, 1, 512],"float32"), Tensor([512, 51865],"float32"), )
paddle.Tensor.__matmul__(Tensor([5, 3, 384],"float32"), Tensor([384, 51865],"float32"), )
paddle.Tensor.__matmul__(Tensor([5, 3, 512],"float32"), Tensor([512, 51865],"float32"), )
paddle.Tensor.any(Tensor([1],"bool"), axis=tuple(), )
paddle.Tensor.argmax(Tensor([12, 7],"int32"), axis=-1, dtype="int32", )
paddle.Tensor.argmax(Tensor([2, 10],"int64"), -1, dtype="int32", )
paddle.Tensor.argmax(Tensor([4, 50],"float32"), axis=1, dtype="int32", )
paddle.Tensor.argmax(Tensor([8, 50],"float32"), axis=1, dtype="int32", )
paddle.Tensor.cast(Tensor([24, 128, 128],"float32"), "float", )
paddle.Tensor.cast(Tensor([24, 256, 256],"float32"), "float", )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float32"), 1, offset=2, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float32"), 4, 1, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float64"), 1, offset=2, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float64"), 4, 1, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int32"), 1, offset=2, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int32"), 4, 1, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int64"), 1, offset=2, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int64"), 4, 1, False, )
paddle.Tensor.frexp(Tensor([10, 12],"float32"), )
paddle.Tensor.frexp(Tensor([10, 12],"float64"), )
paddle.Tensor.frexp(Tensor([4, 5, 2],"float32"), )
paddle.Tensor.frexp(Tensor([4, 5, 2],"float64"), )
paddle.Tensor.rank(Tensor([128],"float32"), )
paddle.Tensor.rank(Tensor([16, 16],"float32"), )
paddle.Tensor.rank(Tensor([160],"float32"), )
paddle.Tensor.rank(Tensor([2, 1],"float32"), )
paddle.Tensor.rank(Tensor([2048, 256],"float32"), )
paddle.Tensor.rank(Tensor([2048],"float32"), )
paddle.Tensor.rank(Tensor([24, 16],"float32"), )
paddle.Tensor.rank(Tensor([256, 1024, 1, 1],"float32"), )
paddle.Tensor.rank(Tensor([256, 128],"float32"), )
paddle.Tensor.rank(Tensor([256, 1536, 1, 1],"float32"), )
paddle.Tensor.rank(Tensor([256, 1536, 3, 3],"float32"), )
paddle.Tensor.rank(Tensor([256, 160],"float32"), )
paddle.Tensor.rank(Tensor([256, 192, 1, 1],"float32"), )
paddle.Tensor.rank(Tensor([256, 2048, 1, 1],"float32"), )
paddle.Tensor.rank(Tensor([256, 2048, 3, 3],"float32"), )
paddle.Tensor.rank(Tensor([256, 2048],"float32"), )
paddle.Tensor.rank(Tensor([256, 256, 1, 1],"float32"), )
paddle.Tensor.rank(Tensor([256, 256],"float32"), )
paddle.Tensor.rank(Tensor([256, 320],"float32"), )
paddle.Tensor.rank(Tensor([256, 384, 1, 1],"float32"), )
paddle.Tensor.rank(Tensor([256, 512, 1, 1],"float32"), )
paddle.Tensor.rank(Tensor([256, 768, 1, 1],"float32"), )
paddle.Tensor.rank(Tensor([256, 768, 3, 3],"float32"), )
paddle.Tensor.rank(Tensor([256, 768],"float32"), )
paddle.Tensor.rank(Tensor([256],"float32"), )
paddle.Tensor.rank(Tensor([320],"float32"), )
paddle.Tensor.rank(Tensor([4, 256],"float32"), )
paddle.Tensor.rank(Tensor([5, 256],"float32"), )
paddle.Tensor.rank(Tensor([512, 256],"float32"), )
paddle.Tensor.rank(Tensor([512, 512],"float32"), )
paddle.Tensor.rank(Tensor([512],"float32"), )
paddle.Tensor.rank(Tensor([768],"float32"), )
paddle.Tensor.rank(Tensor([900, 256],"float32"), )
paddle.Tensor.set_(Tensor([0],"float16"), None, None, None, 0, )
paddle.Tensor.set_(Tensor([0],"float32"), None, None, None, 0, )
paddle.add(Tensor([20, 128, 76, 136],"float32"), Tensor([20, 128, 76, 136],"float16"), )
paddle.add(Tensor([20, 256, 38, 68],"float32"), Tensor([20, 256, 38, 68],"float16"), )
paddle.add(Tensor([20, 64, 152, 272],"float32"), Tensor([20, 64, 152, 272],"float16"), )
paddle.add(Tensor([32, 40, 31, 31],"float32"), Tensor([32, 40, 31, 31],"float16"), )
paddle.add(Tensor([32, 96, 16, 16],"float32"), Tensor([32, 96, 16, 16],"float16"), )
paddle.add(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.add(x=Tensor([160, 128, 16, 12],"float32"), y=Tensor([160, 128, 16, 12],"float16"), )
paddle.add(x=Tensor([160, 32, 64, 48],"float32"), y=Tensor([160, 32, 64, 48],"float16"), )
paddle.add(x=Tensor([160, 64, 32, 24],"float32"), y=Tensor([160, 64, 32, 24],"float16"), )
paddle.add(x=Tensor([24, 128, 32, 32],"float32"), y=Tensor([24, 128, 32, 32],"float16"), )
paddle.add(x=Tensor([24, 32, 128, 128],"float32"), y=Tensor([24, 32, 128, 128],"float16"), )
paddle.add(x=Tensor([24, 32, 256, 256],"float32"), y=Tensor([24, 32, 256, 256],"float16"), )
paddle.add(x=Tensor([24, 64, 64, 64],"float32"), y=Tensor([24, 64, 64, 64],"float16"), )
paddle.add_n(inputs=Tensor([10],"int32"), )
paddle.add_n(list[Tensor([100, 200],"int32"),Tensor([100, 200],"int32"),], )
paddle.all(Tensor([1, 0, 2],"bool"), axis=tuple(), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(), keepdim=False, )
paddle.argmax(Tensor([1, 2, 1024, 1024],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 496, 512],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 512, 512],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1037],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1067],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1073],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1074],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1081],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1090],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1119],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1124],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1133],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1150],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1158],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1165],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1166],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1188],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1197],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1198],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1200],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1202],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1203],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1207],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1208],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1211],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1231],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1234],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1249],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1261],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1313],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1347],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1376],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1422],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1423],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1424],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1426],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1440],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1488],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1520],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1590],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 3051],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 531],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 533],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 534],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 536],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 600],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 639],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 640],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 645],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 800],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 849],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 871],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 896],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([10, 10],"float32"), axis=-1, keepdim=True, dtype="int32", )
paddle.argmax(x=Tensor([3, 3],"float64"), axis=0, dtype=type(numpy.int32), keepdim=False, )
paddle.argmax(x=Tensor([3, 3],"int64"), dtype="int32", )
paddle.assign(.09994, Tensor([],"float32"), )
paddle.assign(.356435, Tensor([],"float32"), )
paddle.assign(.5880145, Tensor([],"float32"), )
paddle.assign(.778772, Tensor([],"float32"), )
paddle.assign(0, )
paddle.assign(0., )
paddle.assign(0., Tensor([1],"float32"), )
paddle.assign(0.005, Tensor([1],"float32"), )
paddle.assign(0.04380856, Tensor([1],"float32"), )
paddle.assign(0.05, Tensor([1],"float32"), )
paddle.assign(0.1, )
paddle.assign(0.22594, Tensor([],"float32"), )
paddle.assign(0.22685145, )
paddle.assign(0.5214225, Tensor([],"float32"), )
paddle.assign(0.9807642, )
paddle.assign(1, )
paddle.assign(1., Tensor([1],"float32"), )
paddle.assign(1., Tensor([],"float32"), )
paddle.assign(1.659848, Tensor([],"float32"), )
paddle.assign(1.7355332, )
paddle.assign(1.9834341, )
paddle.assign(10, )
paddle.assign(10.0, )
paddle.assign(100, )
paddle.assign(16, )
paddle.assign(2, )
paddle.assign(3, )
paddle.assign(3., )
paddle.assign(3., Tensor([],"float32"), )
paddle.assign(3.0, )
paddle.assign(5, )
paddle.assign(5., Tensor([],"float32"), )
paddle.assign(6, )
paddle.assign(7, )
paddle.assign(8, )
paddle.assign(True, )
paddle.assign(list[list[-32.0,-32.0,1.0,],list[-32.0,32.0,1.0,],list[32.0,32.0,1.0,],list[32.0,-32.0,1.0,],], )
paddle.assign(x=42, )
paddle.assign(x=list[list[3.1,2.1,2.2,],list[-1.0,-2.0,-2.2,],], )
paddle.assign(x=tuple(tuple(3.1,2.1,2.2,),tuple(-1.0,-2.0,-2.2,),), )
paddle.bitwise_right_shift(Tensor([1],"int8"), Tensor([1],"int8"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int64"), Tensor([200, 300],"int64"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int64"), Tensor([300],"int64"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int8"), Tensor([200, 300],"int8"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int8"), Tensor([300],"int8"), False, )
paddle.bitwise_right_shift(Tensor([300],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([300],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([300],"int64"), Tensor([200, 300],"int64"), False, )
paddle.bitwise_right_shift(Tensor([300],"int8"), Tensor([200, 300],"int8"), False, )
paddle.bmm(Tensor([1, 300, 128],"float32"), Tensor([1, 128, 30976],"float32"), )
paddle.bmm(Tensor([1, 300, 128],"float32"), Tensor([1, 128, 33856],"float32"), )
paddle.bmm(Tensor([1, 300, 128],"float32"), Tensor([1, 128, 36864],"float32"), )
paddle.bmm(Tensor([1, 400, 128],"float32"), Tensor([1, 128, 30976],"float32"), )
paddle.bmm(Tensor([1, 400, 128],"float32"), Tensor([1, 128, 33856],"float32"), )
paddle.bmm(Tensor([1, 400, 128],"float32"), Tensor([1, 128, 36864],"float32"), )
paddle.cast(Tensor([12, 10],"bool"), "float", )
paddle.ceil(x=Tensor([3, 3, 3],"float64"), )paddle.clone(Tensor([1, 100, 256],"float32"), )
paddle.combinations(Tensor([0],"float32"), r=2, )
paddle.combinations(Tensor([0],"float32"), r=2, with_replacement=True, )
paddle.combinations(Tensor([1],"float32"), r=2, )
paddle.combinations(Tensor([3],"float32"), r=4, )
paddle.concat(list[Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2, 1],"int64"),Tensor([2,
paddle.copysign(Tensor([10, 20],"bool"), Tensor([10, 20],"bool"), )
paddle.copysign(Tensor([10, 20],"int16"), Tensor([10, 20],"int16"), )
paddle.copysign(Tensor([10, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.copysign(Tensor([10, 20],"int64"), Tensor([10, 20],"int64"), )
paddle.copysign(Tensor([10, 20],"int8"), Tensor([10, 20],"int8"), )
paddle.copysign(Tensor([10, 20],"uint8"), Tensor([10, 20],"uint8"), )
paddle.copysign(Tensor([11, 17, 10],"int16"), Tensor([11, 17, 10],"int16"), )
paddle.copysign(Tensor([11, 17, 10],"int32"), Tensor([11, 17, 10],"int32"), )
paddle.copysign(Tensor([12, 20, 2],"int16"), Tensor([12, 20, 2],"int16"), )
paddle.copysign(Tensor([12, 20, 2],"int32"), Tensor([12, 20, 2],"int32"), )
paddle.copysign(Tensor([12, 20, 2],"int64"), Tensor([12, 20, 2],"int64"), )
paddle.copysign(Tensor([12, 20, 2],"uint8"), Tensor([12, 20, 2],"uint8"), )
paddle.copysign(Tensor([132],"int64"), Tensor([132],"int64"), )
paddle.copysign(Tensor([132],"uint8"), Tensor([132],"uint8"), )
paddle.copysign(Tensor([2, 3, 4, 5],"int8"), Tensor([2, 3, 4, 5],"int8"), )
paddle.count_nonzero(Tensor([1, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=2, keepdim=True, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=True, )
paddle.count_nonzero(Tensor([3, 5],"float32"), keepdim=True, )
paddle.cummax(Tensor([100, 100],"float32"), axis=-2, dtype="int32", )
paddle.cummin(Tensor([100, 100],"float32"), axis=-2, dtype="int32", )
paddle.cumsum(Tensor([1, 1],"int32"), )
paddle.cumsum(Tensor([12, 7],"int32"), axis=1, )
paddle.cumsum(Tensor([120, 60],"int32"), axis=0, )
paddle.cumsum(Tensor([13, 10],"int32"), axis=1, )
paddle.cumsum(Tensor([13, 14],"int32"), axis=1, )
paddle.cumsum(Tensor([13, 3],"int32"), axis=1, )
paddle.cumsum(Tensor([13, 7],"int32"), axis=1, )
paddle.cumsum(Tensor([16, 60],"int32"), axis=0, )
paddle.cumsum(Tensor([2, 1],"int32"), )
paddle.cumsum(Tensor([24, 60],"int32"), axis=0, )
paddle.cumsum(Tensor([2],"int32"), )
paddle.cumsum(Tensor([40, 60],"int32"), axis=0, )
paddle.cumsum(Tensor([4],"int32"), )
paddle.cumsum(Tensor([5],"int32"), )
paddle.cumsum(Tensor([8, 60],"int32"), axis=0, )
paddle.cumsum(Tensor([80, 60],"int32"), axis=0, )
paddle.diagflat(Tensor([10, 10],"float64"), offset=-1, )
paddle.diagflat(Tensor([20],"float64"), offset=-1, )
paddle.diagflat(Tensor([],"float32"), -1, )
paddle.diagflat(x=Tensor([3, 2, 2, 1, 2, 4],"float64"), offset=-1, )
paddle.diagflat(x=Tensor([4],"float64"), offset=-1, )
paddle.diagonal_scatter(Tensor([10, 10],"complex128"), Tensor([10],"complex128"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"complex64"), Tensor([10],"complex64"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"float16"), Tensor([10],"float16"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"float32"), Tensor([10],"float32"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"float32"), Tensor([10],"float32"), offset=0, axis1=1, axis2=0, )
paddle.diagonal_scatter(Tensor([10, 10],"float32"), Tensor([8],"float32"), offset=-2, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"float32"), Tensor([9],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"float64"), Tensor([10],"float64"), offset=0, axis1=0, axis2=1, )
paddle.full(list[1,], 0, )
paddle.full(list[1,], 1, )
paddle.full(list[1,], 2, )
paddle.full(list[10,10,], 0, )
paddle.full(list[11,11,], 0, )
paddle.full(list[17,17,], 0, )
paddle.full(list[2,4,], 2, )
paddle.full(list[2,], 2, )
paddle.full(list[20,20,], 0, )
paddle.full(list[2048,1,], 180, )
paddle.full(list[2048,1,], 20, )
paddle.full(list[3,3,], 0, )
paddle.full(list[4,], 0, )
paddle.full(list[4,], 1, )
paddle.full(list[5,], 1, )
paddle.full(list[512,1,], 180, )
paddle.full(list[512,1,], 20, )
paddle.full(list[7,7,], 0, )
paddle.full(list[8,8,], 0, )
paddle.full(list[], 0, )
paddle.full(list[], 1, )
paddle.full(list[], 2, )
paddle.full(list[], 3, )
paddle.full(shape=10, fill_value=complex(1.1,1.1), )
paddle.full(shape=Tensor([2],"int32"), fill_value=Tensor([1],"int32"), )
paddle.full(shape=Tensor([5],"int64"), fill_value=-2, )
paddle.full(shape=list[1,2,3,], fill_value=complex(1.1,1.1), )
paddle.full(shape=list[1,], fill_value=0, )
paddle.full(shape=list[1,], fill_value=1, )
paddle.full(shape=list[1,], fill_value=10, )
paddle.full(shape=list[1,], fill_value=5, )
paddle.full(shape=list[123,92,], fill_value=10000000000, )
paddle.full(shape=list[123,92,], fill_value=3, )
paddle.full(shape=list[2,], fill_value=0, )
paddle.full(shape=list[2,], fill_value=1, )
paddle.full(shape=list[2,], fill_value=2, )
paddle.full(shape=list[2,], fill_value=3, )
paddle.full(shape=list[2,], fill_value=4, )
paddle.full(shape=list[3,2,], fill_value=1, )
paddle.full(shape=list[4,94,311,], fill_value=80, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([1],"int32"),], fill_value=10000000000, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([1],"int32"),], fill_value=3, )
paddle.full(shape=list[], fill_value=1, )
paddle.full(shape=tuple(), fill_value=3, )
paddle.full(shape=tuple(), fill_value=4, )
paddle.full(tuple(1,), 1, )
paddle.full(tuple(1,), 2, )
paddle.full(tuple(1,), 3, )
paddle.full(tuple(1,1,), fill_value=1, )
paddle.full(tuple(10,10,), fill_value=1, )
paddle.full(tuple(100,), 32, )
paddle.full(tuple(100,), 64, )
paddle.full(tuple(1024,), 8, )
paddle.full(tuple(108,), 64, )
paddle.full(tuple(1156,), 32, )
paddle.full(tuple(121,), 32, )
paddle.full(tuple(121,), 64, )
paddle.full(tuple(12544,), 8, )
paddle.full(tuple(1296,), 16, )
paddle.full(tuple(1296,), 32, )
paddle.full(tuple(1296,), 8, )
paddle.full(tuple(130,), 64, )
paddle.full(tuple(144,), 32, )
paddle.full(tuple(144,), 64, )
paddle.full(tuple(14400,), 8, )
paddle.full(tuple(1444,), 16, )
paddle.full(tuple(16,), 64, )
paddle.full(tuple(1600,), 16, )
paddle.full(tuple(1600,), 32, )
paddle.full(tuple(1600,), 8, )
paddle.full(tuple(169,), 32, )
paddle.full(tuple(1728,), 16, )
paddle.full(tuple(1764,), 16, )
paddle.full(tuple(18496,), 8, )
paddle.full(tuple(1900,), 16, )
paddle.full(tuple(1936,), 16, )
paddle.full(tuple(1936,), 8, )
paddle.full(tuple(196,), 32, )
paddle.full(tuple(196,), 64, )
paddle.full(tuple(20736,), 8, )
paddle.full(tuple(2080,), 16, )
paddle.full(tuple(225,), 32, )
paddle.full(tuple(225,), 64, )
paddle.full(tuple(2304,), 16, )
paddle.full(tuple(2304,), 8, )
paddle.full(tuple(25,), 64, )
paddle.full(tuple(256,), 16, )
paddle.full(tuple(25600,), 8, )
paddle.full(tuple(2704,), 8, )
paddle.full(tuple(289,), 64, )
paddle.full(tuple(3,3840,10240,), 0, )
paddle.full(tuple(3136,), 16, )
paddle.full(tuple(3136,), 8, )
paddle.full(tuple(324,), 16, )
paddle.full(tuple(324,), 32, )
paddle.full(tuple(324,), 64, )
paddle.full(tuple(36,), 64, )
paddle.full(tuple(3600,), 16, )
paddle.full(tuple(3600,), 8, )
paddle.full(tuple(361,), 32, )
paddle.full(tuple(400,), 16, )
paddle.full(tuple(400,), 32, )
paddle.full(tuple(400,), 64, )
paddle.full(tuple(432,), 32, )
paddle.full(tuple(441,), 32, )
paddle.full(tuple(4624,), 16, )
paddle.full(tuple(475,), 32, )
paddle.full(tuple(484,), 16, )
paddle.full(tuple(484,), 32, )
paddle.full(tuple(49,), 64, )
paddle.full(tuple(5,5,), fill_value=1, )
paddle.full(tuple(5184,), 16, )
paddle.full(tuple(5184,), 8, )
paddle.full(tuple(520,), 32, )
paddle.full(tuple(576,), 16, )
paddle.full(tuple(576,), 32, )
paddle.full(tuple(5776,), 8, )
paddle.full(tuple(6,6,), fill_value=1, )
paddle.full(tuple(64,), 32, )
paddle.full(tuple(64,), 64, )
paddle.full(tuple(6400,), 16, )
paddle.full(tuple(6400,), 8, )
paddle.full(tuple(676,), 16, )
paddle.full(tuple(6912,), 8, )
paddle.full(tuple(7056,), 8, )
paddle.full(tuple(7600,), 8, )
paddle.full(tuple(7744,), 8, )
paddle.full(tuple(784,), 16, )
paddle.full(tuple(784,), 32, )
paddle.full(tuple(81,), 32, )
paddle.full(tuple(81,), 64, )
paddle.full(tuple(8320,), 8, )
paddle.full(tuple(900,), 16, )
paddle.full(tuple(900,), 32, )
paddle.full(tuple(9216,), 8, )
paddle.increment(x=Tensor([1],"int64"), value=1.0, )
paddle.incubate.nn.functional.blha_get_max_len(Tensor([10],"int32"), Tensor([10],"int32"), Tensor([10],"float32"), )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 10],"int32"), bias=Tensor([10],"float32"), dequant_scales=Tensor([10],"float32"), act_method="gelu", compute_dtype="fp32", )
paddle.incubate.nn.functional.fused_linear(Tensor([1024, 16, 1024],"float16"), Tensor([1024, 384],"float16"), Tensor([384],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1024, 16, 128],"float16"), Tensor([128, 1024],"float16"), Tensor([1024],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1024, 16, 512],"float16"), Tensor([512, 1024],"float16"), Tensor([1024],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 3136, 128],"float16"), Tensor([128, 512],"float16"), Tensor([512],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 3136, 512],"float16"), Tensor([512, 128],"float16"), Tensor([128],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 784, 1024],"float16"), Tensor([1024, 256],"float16"), Tensor([256],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([16, 1024, 1024],"float16"), Tensor([1024, 384],"float16"), Tensor([384],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([16, 1024, 128],"float16"), Tensor([128, 1024],"float16"), Tensor([1024],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([2048, 49, 256],"float16"), Tensor([256, 768],"float16"), Tensor([768],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([8192, 49, 128],"float16"), Tensor([128, 128],"float16"), Tensor([128],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([8192, 49, 128],"float16"), Tensor([128, 384],"float16"), Tensor([384],"float16"), False, None, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 232, 64],"float16"), Tensor([2, 1, 232, 64],"float16"), Tensor([2, 1, 232, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.lerp(Tensor([1, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), )
paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 2, 1],"float64"), Tensor([3, 6, 3, 4, 2, 1],"float64"), Tensor([3, 6, 3, 4, 2, 1],"float64"), )
paddle.lerp(Tensor([300, 2048],"float32"), Tensor([300, 2048],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([4, 1, 6],"float64"), Tensor([4, 1, 6],"float64"), Tensor([4, 1, 6],"float64"), )
paddle.lerp(Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), )
paddle.lerp(Tensor([4, 1],"float64"), Tensor([4, 1],"float64"), Tensor([4, 1],"float64"), )
paddle.lerp(Tensor([4, 7, 1],"float64"), Tensor([4, 7, 1],"float64"), Tensor([4, 7, 1],"float64"), )
paddle.lerp(Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.lerp(Tensor([5, 1, 4],"float64"), Tensor([5, 1, 4],"float64"), Tensor([5, 1, 4],"float64"), )
paddle.lerp(Tensor([5, 1],"float64"), Tensor([5, 1],"float64"), Tensor([5, 1],"float64"), )
paddle.lerp(Tensor([64, 64],"float32"), Tensor([],"float32"), Tensor([],"float32"), )
paddle.lerp(Tensor([7, 1],"float64"), Tensor([7, 1],"float64"), Tensor([7, 1],"float64"), )
paddle.lerp(Tensor([],"float32"), Tensor([64, 64],"float32"), Tensor([],"float32"), )
paddle.lerp(Tensor([],"float32"), Tensor([],"float32"), Tensor([],"float32"), )
paddle.linalg.lstsq(Tensor([10, 5],"float32"), Tensor([10, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 3],"float64"), Tensor([10, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 6],"float64"), Tensor([10, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([2, 3, 10],"float32"), Tensor([2, 3, 4],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([200, 100],"float64"), Tensor([200, 50],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([3, 2, 8],"float32"), Tensor([3, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2],"float64"), Tensor([3, 3],"float64"), rcond=1e-07, driver="gelsd", )
paddle.linalg.lstsq(Tensor([5, 10],"float64"), Tensor([5, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 4],"float64"), Tensor([5, 3],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([5, 5],"float64"), Tensor([5, 1],"float64"), rcond=None, driver="gelss", )
paddle.linalg.lstsq(Tensor([50, 600],"float64"), Tensor([50, 300],"float64"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([8, 2],"float32"), Tensor([8, 10],"float32"), rcond=1e-15, driver="gelsy", )
paddle.linalg.lstsq(Tensor([9, 9],"float32"), Tensor([9, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.pinv(Tensor([3, 5, 5],"float32"), rcond=1e-15, hermitian=False, )
paddle.median(Tensor([3, 4, 2],"float32"), None, True, )
paddle.median(Tensor([3, 4, 2],"float64"), None, True, )
paddle.median(Tensor([3, 4, 2],"int32"), 0, False, )
paddle.median(Tensor([3, 4, 2],"int32"), 0, True, )
paddle.median(Tensor([3, 4, 2],"int32"), None, True, )
paddle.median(Tensor([3, 4, 2],"int64"), 0, False, )
paddle.median(Tensor([3, 4, 2],"int64"), 0, True, )
paddle.median(Tensor([3, 4, 2],"int64"), None, True, )
paddle.median(Tensor([3, 4],"float16"), -1, False, )
paddle.median(Tensor([3, 4],"float16"), -1, True, )
paddle.median(Tensor([3, 4],"float16"), 0, False, )
paddle.median(Tensor([3, 4],"float16"), 0, True, )
paddle.median(Tensor([3, 4],"float16"), 1, False, )
paddle.median(Tensor([3, 4],"float16"), 1, True, )
paddle.median(Tensor([3, 4],"float16"), None, False, )
paddle.median(Tensor([3, 4],"float16"), None, True, )
paddle.median(Tensor([3, 4],"float16"), None, True, mode="min", )
paddle.median(Tensor([3, 4],"float32"), None, True, )
paddle.median(Tensor([3, 4],"float64"), None, True, )
paddle.median(Tensor([3, 5],"float32"), keepdim=True, )
paddle.median(Tensor([5, 4],"float32"), None, True, mode="min", )
paddle.median(Tensor([5, 4],"float64"), None, True, mode="min", )
paddle.nanmedian(Tensor([120],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([120],"float32"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([120],"float64"), keepdim=True, )
paddle.nanmedian(Tensor([120],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float64"), keepdim=True, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([3, 5],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([4, 5],"float64"), keepdim=True, )
paddle.nanmedian(Tensor([4, 5],"float64"), keepdim=True, mode="min", )
paddle.nn.functional.adaptive_max_pool1d(Tensor([1, 1, 4],"float64"), 4, True, None, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([1, 1, 4],"float64"), output_size=4, return_mask=True, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 1, 5, 5],"float32"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 1, 5, 5],"float64"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 1, 5, 5],"float32"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 1, 5, 5],"float64"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 1, 5, 5, 5],"float32"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 1, 5, 5, 5],"float64"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 1, 5, 5, 5],"float32"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 1, 5, 5, 5],"float64"), output_size=3, return_mask=True, )
paddle.nn.functional.conv2d(Tensor([10, 1, 69, 389],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 1, 69, 421],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([24, 1, 67, 67],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([6, 1, 69, 389],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([9, 1, 69, 357],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d_transpose(Tensor([64, 16, 172, 79],"float32"), Tensor([16, 8, 5, 5],"float32"), bias=Tensor([8],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 16, 86, 39],"float32"), Tensor([16, 16, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 16, 86, 39],"float32"), Tensor([16, 8, 5, 5],"float32"), bias=Tensor([8],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 32, 43, 19],"float32"), Tensor([32, 16, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 32, 43, 19],"float32"), Tensor([32, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 32, 86, 39],"float32"), Tensor([32, 16, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 8, 172, 79],"float32"), Tensor([8, 1, 5, 5],"float32"), bias=Tensor([1],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 8, 172, 79],"float32"), Tensor([8, 8, 5, 5],"float32"), bias=Tensor([8],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 240, 240],"float32"), Tensor([64, 64, 2, 2],"float32"), bias=Tensor([64],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), 7.0, 2, None, 1, True, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), math.inf, 2, None, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), norm_type=4, kernel_size=3, stride=2, padding=list[1,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), norm_type=math.inf, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 3],"float32"), 7.0, 2, None, 1, False, "NLC", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 3],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, data_format="NLC", )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), -math.inf, kernel_size=2, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), math.inf, kernel_size=list[2,4,], stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=-math.inf, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=math.inf, kernel_size=list[2,4,], stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool1d(Tensor([1, 1, 2],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 16],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 16],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 16],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 6],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool1d(x=Tensor([1, 1, 2],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 2, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 6, 6],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([16, 384, 11, 11],"float16"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 40],"float64"), kernel_size=2, stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 40],"float64"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 40],"float64"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 40],"float64"), kernel_size=tuple(2,4,), stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 86, 39],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 32, 21, 9],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 32, 43, 19],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 8, 172, 79],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([8, 192, 15, 15],"float16"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 256, 20, 20],"float16"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 576, 704],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool3d(Tensor([1, 2, 6, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 6],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 6],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.utils.parameters_to_vector(list[Tensor([10, 15],"float32"),Tensor([15],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([10, 20],"float32"),Tensor([20],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([10, 3],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([2, 2],"float32"),Tensor([2],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([3, 2, 4, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([3, 2, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([3, 2, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.scale(x=Tensor([3, 3, 3],"int32"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([3, 3, 3],"int64"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.shape(Tensor([],"float32"), )
paddle.shape(Tensor([],"int64"), )
paddle.unique(Tensor([120],"int64"), return_index=True, return_inverse=True, return_counts=True, dtype="int32", )
paddle.unique(Tensor([3, 5, 5],"float32"), return_index=True, return_inverse=True, return_counts=True, axis=0, )
paddle.unique(Tensor([],"float32"), return_index=True, return_inverse=True, return_counts=True, )
paddle.unique_consecutive(Tensor([],"float32"), return_inverse=True, return_counts=True, )
paddle.var(Tensor([],"float32"), )
paddle.var(Tensor([],"float32"), list[], )
paddle.vecdot(Tensor([2, 2],"complex64"), Tensor([2, 2],"complex64"), axis=-1, )
