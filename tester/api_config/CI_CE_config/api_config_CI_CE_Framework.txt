paddle.Tensor.__add__(Tensor([1, 12],"float32"), Tensor([1, 12],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12],"float32"), Tensor([12],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12],"float64"), Tensor([1, 12],"float64"), )
paddle.Tensor.__add__(Tensor([1, 12],"float64"), Tensor([12],"float64"), )
paddle.Tensor.__add__(Tensor([1, 16],"float32"), Tensor([1, 16],"float32"), )
paddle.Tensor.__add__(Tensor([1, 16],"float32"), Tensor([16],"float32"), )
paddle.Tensor.__add__(Tensor([1, 2, 2],"float32"), Tensor([1, 2, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 3],"float32"), Tensor([1, 3],"float32"), )
paddle.Tensor.__add__(Tensor([1, 3],"float32"), Tensor([3],"float32"), )
paddle.Tensor.__add__(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.Tensor.__add__(Tensor([1, 4, 4],"float32"), Tensor([1, 4, 4],"float32"), )
paddle.Tensor.__add__(Tensor([1, 400],"float32"), Tensor([1, 400],"float32"), )
paddle.Tensor.__add__(Tensor([1, 4],"float32"), Tensor([1, 4],"float32"), )
paddle.Tensor.__add__(Tensor([1, 4],"float32"), Tensor([4],"float32"), )
paddle.Tensor.__add__(Tensor([1, 4],"float64"), Tensor([1, 4],"float64"), )
paddle.Tensor.__add__(Tensor([1, 7],"float32"), Tensor([1, 7],"float32"), )
paddle.Tensor.__add__(Tensor([1, 7],"float32"), Tensor([7],"float32"), )
paddle.Tensor.__add__(Tensor([1, 7],"float64"), Tensor([1, 7],"float64"), )
paddle.Tensor.__add__(Tensor([1, 7],"float64"), Tensor([7],"float64"), )
paddle.Tensor.__add__(Tensor([1, 9],"float32"), Tensor([9],"float32"), )
paddle.Tensor.__add__(Tensor([1, 9],"float64"), Tensor([9],"float64"), )
paddle.Tensor.__add__(Tensor([10, 1, 1, 1],"float32"), 1, )
paddle.Tensor.__add__(Tensor([10, 1, 1],"float32"), 1, )
paddle.Tensor.__add__(Tensor([10, 1],"float64"), 1, )
paddle.Tensor.__add__(Tensor([16, 128],"float32"), Tensor([128],"float32"), )
paddle.Tensor.__add__(Tensor([16, 128],"float32"), Tensor([16, 128],"float32"), )
paddle.Tensor.__add__(Tensor([16, 16],"float32"), Tensor([16, 16],"float32"), )
paddle.Tensor.__add__(Tensor([16, 32],"float32"), Tensor([16, 32],"float32"), )
paddle.Tensor.__add__(Tensor([16, 32],"float32"), Tensor([32],"float32"), )
paddle.Tensor.__add__(Tensor([16, 48],"float32"), Tensor([48],"float32"), )
paddle.Tensor.__add__(Tensor([16, 64],"float32"), Tensor([16, 64],"float32"), )
paddle.Tensor.__add__(Tensor([16, 64],"float32"), Tensor([64],"float32"), )
paddle.Tensor.__add__(Tensor([16, 96],"float32"), Tensor([96],"float32"), )
paddle.Tensor.__add__(Tensor([1],"float32"), 1, )
paddle.Tensor.__add__(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__add__(Tensor([1],"float32"), Tensor([],"float32"), )
paddle.Tensor.__add__(Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.Tensor.__add__(Tensor([1],"int32"), 1, )
paddle.Tensor.__add__(Tensor([1],"int64"), 1, )
paddle.Tensor.__add__(Tensor([1],"int64"), 3, )
paddle.Tensor.__add__(Tensor([2, 1, 2],"float32"), 1, )
paddle.Tensor.__add__(Tensor([2, 1, 2],"float32"), Tensor([2, 1, 2],"float32"), )
paddle.Tensor.__add__(Tensor([2, 1],"float32"), 1, )
paddle.Tensor.__add__(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.Tensor.__add__(Tensor([2, 2, 4, 4],"float32"), Tensor([2, 2, 4, 4],"float32"), )
paddle.Tensor.__add__(Tensor([2, 2, 4, 4],"float64"), Tensor([2, 2, 4, 4],"float64"), )
paddle.Tensor.__add__(Tensor([2, 2, 4, 6],"float32"), Tensor([2, 2, 4, 6],"float32"), )
paddle.Tensor.__add__(Tensor([2, 2, 6, 4],"float64"), Tensor([2, 2, 6, 4],"float64"), )
paddle.Tensor.__add__(Tensor([2, 2, 6, 6],"float64"), Tensor([2, 2, 6, 6],"float64"), )
paddle.Tensor.__add__(Tensor([2, 2],"float32"), 1, )
paddle.Tensor.__add__(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.Tensor.__add__(Tensor([2, 4, 128],"float64"), Tensor([2, 4, 128],"float64"), )
paddle.Tensor.__add__(Tensor([2, 4, 8],"float32"), Tensor([2, 4, 8],"float32"), )
paddle.Tensor.__add__(Tensor([2, 4],"float64"), 0.7, )
paddle.Tensor.__add__(Tensor([2, 4],"float64"), Tensor([2, 4],"float64"), )
paddle.Tensor.__add__(Tensor([2, 6, 128],"float64"), Tensor([2, 6, 128],"float64"), )
paddle.Tensor.__add__(Tensor([2, 6],"float32"), Tensor([2, 6],"float32"), )
paddle.Tensor.__add__(Tensor([2, 6],"float32"), Tensor([6],"float32"), )
paddle.Tensor.__add__(Tensor([20],"float32"), Tensor([20],"float32"), )
paddle.Tensor.__add__(Tensor([2],"float32"), 1, )
paddle.Tensor.__add__(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__add__(Tensor([2],"float32"), Tensor([],"float32"), )
paddle.Tensor.__add__(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.Tensor.__add__(Tensor([3, 3],"float64"), Tensor([3, 3],"float64"), )
paddle.Tensor.__add__(Tensor([3, 4, 7, 3],"float32"), Tensor([3, 4, 7, 3],"float32"), )
paddle.Tensor.__add__(Tensor([3, 4],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([3, 6, 7, 7],"float32"), Tensor([3, 6, 7, 7],"float32"), )
paddle.Tensor.__add__(Tensor([3, 7, 54],"float32"), Tensor([3, 7, 54],"float32"), )
paddle.Tensor.__add__(Tensor([32, 32],"float32"), Tensor([32, 32],"float32"), )
paddle.Tensor.__add__(Tensor([32, 96],"float32"), Tensor([96],"float32"), )
paddle.Tensor.__add__(Tensor([3],"float32"), Tensor([3],"complex64"), )
paddle.Tensor.__add__(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.Tensor.__add__(Tensor([3],"float64"), 1, )
paddle.Tensor.__add__(Tensor([3],"float64"), Tensor([3],"float32"), )
paddle.Tensor.__add__(Tensor([3],"float64"), Tensor([3],"float64"), )
paddle.Tensor.__add__(Tensor([3],"int64"), 1, )
paddle.Tensor.__add__(Tensor([4, 1, 4],"float32"), Tensor([4, 1, 4],"float32"), )
paddle.Tensor.__add__(Tensor([4, 16],"float32"), Tensor([4, 16],"float32"), )
paddle.Tensor.__add__(Tensor([4, 3, 3, 4],"float64"), Tensor([4, 3, 3, 4],"float64"), )
paddle.Tensor.__add__(Tensor([4, 3, 3],"float64"), Tensor([4, 3, 3],"float64"), )
paddle.Tensor.__add__(Tensor([4, 48],"float32"), Tensor([48],"float32"), )
paddle.Tensor.__add__(Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), )
paddle.Tensor.__add__(Tensor([4, 4],"float32"), Tensor([4],"float32"), )
paddle.Tensor.__add__(Tensor([4, 4],"int64"), Tensor([4, 4],"int64"), )
paddle.Tensor.__add__(Tensor([4, 64],"float32"), Tensor([4, 64],"float32"), )
paddle.Tensor.__add__(Tensor([4, 64],"float32"), Tensor([64],"float32"), )
paddle.Tensor.__add__(Tensor([4, 6],"float32"), Tensor([4, 6],"float32"), )
paddle.Tensor.__add__(Tensor([4, 6],"float32"), Tensor([6],"float32"), )
paddle.Tensor.__add__(Tensor([4, 8],"int64"), Tensor([4, 8],"int64"), )
paddle.Tensor.__add__(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.Tensor.__add__(Tensor([4],"int64"), 1, )
paddle.Tensor.__add__(Tensor([5, 3, 15],"float32"), Tensor([5, 3, 15],"float32"), )
paddle.Tensor.__add__(Tensor([5, 3, 3, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), )
paddle.Tensor.__add__(Tensor([5, 3, 3, 8],"float32"), Tensor([5, 3, 3, 8],"float32"), )
paddle.Tensor.__add__(Tensor([5, 8, 7, 6],"float32"), Tensor([5, 8, 7, 6],"float32"), )
paddle.Tensor.__add__(Tensor([5],"float64"), 1e-05, )
paddle.Tensor.__add__(Tensor([5],"float64"), Tensor([5],"float32"), )
paddle.Tensor.__add__(Tensor([8, 3, 45],"float64"), Tensor([8, 3, 45],"float64"), )
paddle.Tensor.__add__(Tensor([8, 5, 3, 3],"float64"), Tensor([8, 5, 3, 3],"float64"), )
paddle.Tensor.__add__(Tensor([8, 5, 3, 8],"float64"), Tensor([8, 5, 3, 8],"float64"), )
paddle.Tensor.__add__(Tensor([8, 5, 8, 8],"float64"), Tensor([8, 5, 8, 8],"float64"), )
paddle.Tensor.__add__(Tensor([8, 6, 8, 16],"float32"), Tensor([8, 6, 8, 16],"float32"), )
paddle.Tensor.__add__(Tensor([8, 7, 6, 6],"float32"), Tensor([8, 7, 6, 6],"float32"), )
paddle.Tensor.__add__(Tensor([8, 8, 45],"float64"), Tensor([8, 8, 45],"float64"), )
paddle.Tensor.__add__(Tensor([9, 4, 24],"float32"), Tensor([9, 4, 24],"float32"), )
paddle.Tensor.__add__(Tensor([9, 4, 4, 4],"float32"), Tensor([9, 4, 4, 4],"float32"), )
paddle.Tensor.__add__(Tensor([],"float32"), 0.001, )
paddle.Tensor.__add__(Tensor([],"float32"), 1, )
paddle.Tensor.__add__(Tensor([],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__add__(Tensor([],"float32"), Tensor([3, 4, 5],"float32"), )
paddle.Tensor.__add__(Tensor([],"float32"), Tensor([3, 4],"float32"), )
paddle.Tensor.__add__(Tensor([],"float32"), Tensor([4],"float32"), )
paddle.Tensor.__add__(Tensor([],"float32"), Tensor([],"float32"), )
paddle.Tensor.__add__(Tensor([],"float64"), 0.0001, )
paddle.Tensor.__add__(Tensor([],"float64"), 0.001, )
paddle.Tensor.__add__(Tensor([],"float64"), 1, )
paddle.Tensor.__add__(Tensor([],"float64"), 1e-05, )
paddle.Tensor.__add__(Tensor([],"float64"), Tensor([],"float64"), )
paddle.Tensor.__add__(Tensor([],"int64"), 1, )
paddle.Tensor.__add__(Tensor([],"int64"), Tensor([],"int64"), )
paddle.Tensor.__and__(Tensor([2, 1, 2],"bool"), Tensor([2, 1, 2],"bool"), )
paddle.Tensor.__and__(Tensor([2, 2],"bool"), Tensor([2, 2],"bool"), )
paddle.Tensor.__and__(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.Tensor.__and__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.Tensor.__and__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.Tensor.__and__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.Tensor.__and__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int64"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int64"), )
paddle.Tensor.__and__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int8"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int8"), )
paddle.Tensor.__and__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"uint8"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"uint8"), )
paddle.Tensor.__and__(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.Tensor.__and__(Tensor([3],"bool"), Tensor([3],"bool"), )
paddle.Tensor.__and__(Tensor([3],"int32"), Tensor([3],"int32"), )
paddle.Tensor.__eq__(Tensor([1],"float32"), 240., )
paddle.Tensor.__eq__(Tensor([1],"float64"), 240., )
paddle.Tensor.__eq__(Tensor([2, 1, 2],"float32"), 0, )
paddle.Tensor.__eq__(Tensor([2, 2],"float32"), 0, )
paddle.Tensor.__eq__(Tensor([3, 3],"float32"), -1.0, )
paddle.Tensor.__eq__(Tensor([3, 3],"float32"), 1.0, )
paddle.Tensor.__eq__(Tensor([3, 3],"float64"), -1.0, )
paddle.Tensor.__eq__(Tensor([3, 3],"float64"), 1.0, )
paddle.Tensor.__eq__(Tensor([3],"float64"), 0, )
paddle.Tensor.__eq__(Tensor([4, 3, 3, 4],"float64"), -1.0, )
paddle.Tensor.__eq__(Tensor([4, 3, 3, 4],"float64"), 1.0, )
paddle.Tensor.__eq__(Tensor([4, 3, 3],"float64"), -1.0, )
paddle.Tensor.__eq__(Tensor([4, 3, 3],"float64"), 1.0, )
paddle.Tensor.__eq__(Tensor([],"float32"), 1.0, )
paddle.Tensor.__eq__(Tensor([],"float64"), 0.0, )
paddle.Tensor.__floordiv__(Tensor([1],"int64"), 2, )
paddle.Tensor.__floordiv__(Tensor([3],"int64"), 2, )
paddle.Tensor.__floordiv__(Tensor([4],"int64"), 2, )
paddle.Tensor.__floordiv__(Tensor([],"int64"), 2, )
paddle.Tensor.__getitem__(Tensor([1, 1, 2],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([11, 1, 1, 1],"float32"), slice(1,None,None), )
paddle.Tensor.__getitem__(Tensor([11, 1, 1],"float32"), slice(1,None,None), )
paddle.Tensor.__getitem__(Tensor([11, 1],"float64"), slice(1,None,None), )
paddle.Tensor.__getitem__(Tensor([12, 12],"float64"), tuple(slice(0,12,1),slice(0,12,1),), )
paddle.Tensor.__getitem__(Tensor([12],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([12],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([12],"float64"), 10, )
paddle.Tensor.__getitem__(Tensor([12],"float64"), 11, )
paddle.Tensor.__getitem__(Tensor([12],"float64"), 2, )
paddle.Tensor.__getitem__(Tensor([12],"float64"), 3, )
paddle.Tensor.__getitem__(Tensor([12],"float64"), 4, )
paddle.Tensor.__getitem__(Tensor([12],"float64"), 5, )
paddle.Tensor.__getitem__(Tensor([12],"float64"), 6, )
paddle.Tensor.__getitem__(Tensor([12],"float64"), 7, )
paddle.Tensor.__getitem__(Tensor([12],"float64"), 8, )
paddle.Tensor.__getitem__(Tensor([12],"float64"), 9, )
paddle.Tensor.__getitem__(Tensor([12],"float64"), tuple(slice(0,12,1),), )
paddle.Tensor.__getitem__(Tensor([16, 18],"float64"), tuple(slice(0,16,1),slice(0,18,1),), )
paddle.Tensor.__getitem__(Tensor([16],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([16],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([16],"float64"), 10, )
paddle.Tensor.__getitem__(Tensor([16],"float64"), 11, )
paddle.Tensor.__getitem__(Tensor([16],"float64"), 12, )
paddle.Tensor.__getitem__(Tensor([16],"float64"), 13, )
paddle.Tensor.__getitem__(Tensor([16],"float64"), 14, )
paddle.Tensor.__getitem__(Tensor([16],"float64"), 15, )
paddle.Tensor.__getitem__(Tensor([16],"float64"), 2, )
paddle.Tensor.__getitem__(Tensor([16],"float64"), 3, )
paddle.Tensor.__getitem__(Tensor([16],"float64"), 4, )
paddle.Tensor.__getitem__(Tensor([16],"float64"), 5, )
paddle.Tensor.__getitem__(Tensor([16],"float64"), 6, )
paddle.Tensor.__getitem__(Tensor([16],"float64"), 7, )
paddle.Tensor.__getitem__(Tensor([16],"float64"), 8, )
paddle.Tensor.__getitem__(Tensor([16],"float64"), 9, )
paddle.Tensor.__getitem__(Tensor([18, 18],"float64"), tuple(slice(0,18,1),slice(0,18,1),), )
paddle.Tensor.__getitem__(Tensor([18, 9],"float64"), tuple(slice(0,18,1),slice(0,9,1),), )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 10, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 11, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 12, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 13, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 14, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 15, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 16, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 17, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 2, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 3, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 4, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 5, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 6, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 7, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 8, )
paddle.Tensor.__getitem__(Tensor([18],"float64"), 9, )
paddle.Tensor.__getitem__(Tensor([1],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([1],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([2, 1, 2],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([2, 1, 2],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([2, 12, 12],"float64"), tuple(slice(0,2,1),slice(0,12,1),slice(0,12,1),), )
paddle.Tensor.__getitem__(Tensor([2, 12],"float64"), tuple(slice(None,None,None),0,), )
paddle.Tensor.__getitem__(Tensor([2, 12],"float64"), tuple(slice(None,None,None),1,), )
paddle.Tensor.__getitem__(Tensor([2, 12],"float64"), tuple(slice(None,None,None),10,), )
paddle.Tensor.__getitem__(Tensor([2, 12],"float64"), tuple(slice(None,None,None),11,), )
paddle.Tensor.__getitem__(Tensor([2, 12],"float64"), tuple(slice(None,None,None),2,), )
paddle.Tensor.__getitem__(Tensor([2, 12],"float64"), tuple(slice(None,None,None),3,), )
paddle.Tensor.__getitem__(Tensor([2, 12],"float64"), tuple(slice(None,None,None),4,), )
paddle.Tensor.__getitem__(Tensor([2, 12],"float64"), tuple(slice(None,None,None),5,), )
paddle.Tensor.__getitem__(Tensor([2, 12],"float64"), tuple(slice(None,None,None),6,), )
paddle.Tensor.__getitem__(Tensor([2, 12],"float64"), tuple(slice(None,None,None),7,), )
paddle.Tensor.__getitem__(Tensor([2, 12],"float64"), tuple(slice(None,None,None),8,), )
paddle.Tensor.__getitem__(Tensor([2, 12],"float64"), tuple(slice(None,None,None),9,), )
paddle.Tensor.__getitem__(Tensor([2, 1],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([2, 1],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([2, 2],"float32"), tuple(slice(0,2,1),slice(0,2,1),), )
paddle.Tensor.__getitem__(Tensor([2, 2],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([2, 2],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([2, 2],"float64"), tuple(slice(0,2,1),slice(0,2,1),), )
paddle.Tensor.__getitem__(Tensor([2, 3, 1],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([2, 3, 3, 2],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([2, 3, 3, 2],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([2, 3, 3],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([2, 3, 3],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([2, 3],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([2, 3],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([2, 4, 8],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([2, 6, 128],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 10, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 11, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 12, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 13, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 14, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 15, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 16, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 17, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 18, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 19, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 2, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 20, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 21, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 22, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 23, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 3, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 4, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 5, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 6, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 7, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 8, )
paddle.Tensor.__getitem__(Tensor([24],"float64"), 9, )
paddle.Tensor.__getitem__(Tensor([2],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([2],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([2],"float32"), tuple(slice(0,2,1),), )
paddle.Tensor.__getitem__(Tensor([2],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([2],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([2],"float64"), tuple(slice(0,2,1),), )
paddle.Tensor.__getitem__(Tensor([2],"int32"), 0, )
paddle.Tensor.__getitem__(Tensor([2],"int32"), 1, )
paddle.Tensor.__getitem__(Tensor([2],"int64"), 0, )
paddle.Tensor.__getitem__(Tensor([2],"int64"), 1, )
paddle.Tensor.__getitem__(Tensor([3, 3],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([3, 3],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([3, 3],"float64"), 2, )
paddle.Tensor.__getitem__(Tensor([3, 5, 3, 3],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([3, 5, 3, 3],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([3, 5, 3, 3],"float32"), 2, )
paddle.Tensor.__getitem__(Tensor([3, 5, 5],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([3, 5, 5],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([3, 5, 5],"float32"), 2, )
paddle.Tensor.__getitem__(Tensor([3, 5, 5],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([3, 5, 5],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([3, 5, 5],"float64"), 2, )
paddle.Tensor.__getitem__(Tensor([3, 5, 6],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([3, 5, 6],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([3, 5, 6],"float32"), 2, )
paddle.Tensor.__getitem__(Tensor([3, 5, 6],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([3, 5, 6],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([3, 5, 6],"float64"), 2, )
paddle.Tensor.__getitem__(Tensor([3, 6, 6],"float64"), tuple(slice(0,3,1),slice(0,6,1),slice(0,6,1),), )
paddle.Tensor.__getitem__(Tensor([3, 6],"float64"), tuple(slice(None,None,None),0,), )
paddle.Tensor.__getitem__(Tensor([3, 6],"float64"), tuple(slice(None,None,None),1,), )
paddle.Tensor.__getitem__(Tensor([3, 6],"float64"), tuple(slice(None,None,None),2,), )
paddle.Tensor.__getitem__(Tensor([3, 6],"float64"), tuple(slice(None,None,None),3,), )
paddle.Tensor.__getitem__(Tensor([3, 6],"float64"), tuple(slice(None,None,None),4,), )
paddle.Tensor.__getitem__(Tensor([3, 6],"float64"), tuple(slice(None,None,None),5,), )
paddle.Tensor.__getitem__(Tensor([32, 32],"float64"), tuple(slice(0,32,1),slice(0,32,1),), )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 10, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 11, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 12, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 13, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 14, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 15, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 16, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 17, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 18, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 19, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 2, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 20, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 21, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 22, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 23, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 24, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 25, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 26, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 27, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 28, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 29, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 3, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 30, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 31, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 4, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 5, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 6, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 7, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 8, )
paddle.Tensor.__getitem__(Tensor([32],"float64"), 9, )
paddle.Tensor.__getitem__(Tensor([36, 36],"float64"), tuple(slice(0,36,1),slice(0,36,1),), )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 10, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 11, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 12, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 13, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 14, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 15, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 16, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 17, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 18, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 19, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 2, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 20, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 21, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 22, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 23, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 24, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 25, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 26, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 27, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 28, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 29, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 3, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 30, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 31, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 32, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 33, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 34, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 35, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 4, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 5, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 6, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 7, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 8, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), 9, )
paddle.Tensor.__getitem__(Tensor([36],"float64"), tuple(slice(0,36,1),), )
paddle.Tensor.__getitem__(Tensor([3],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([3],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([3],"float64"), 2, )
paddle.Tensor.__getitem__(Tensor([3],"int64"), 0, )
paddle.Tensor.__getitem__(Tensor([3],"int64"), 1, )
paddle.Tensor.__getitem__(Tensor([3],"int64"), 2, )
paddle.Tensor.__getitem__(Tensor([4, 15, 4],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([4, 15, 4],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([4, 15, 4],"float32"), 2, )
paddle.Tensor.__getitem__(Tensor([4, 15, 4],"float32"), 3, )
paddle.Tensor.__getitem__(Tensor([4, 1],"float64"), tuple(slice(None,None,None),0,), )
paddle.Tensor.__getitem__(Tensor([4, 3, 3],"float64"), tuple(slice(0,4,1),slice(0,3,1),slice(0,3,1),), )
paddle.Tensor.__getitem__(Tensor([4, 3],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([4, 3],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([4, 3],"float64"), 2, )
paddle.Tensor.__getitem__(Tensor([4, 3],"float64"), 3, )
paddle.Tensor.__getitem__(Tensor([4, 3],"float64"), tuple(slice(0,4,1),slice(0,3,1),), )
paddle.Tensor.__getitem__(Tensor([4, 3],"float64"), tuple(slice(None,None,None),0,), )
paddle.Tensor.__getitem__(Tensor([4, 3],"float64"), tuple(slice(None,None,None),1,), )
paddle.Tensor.__getitem__(Tensor([4, 3],"float64"), tuple(slice(None,None,None),2,), )
paddle.Tensor.__getitem__(Tensor([4, 4],"float64"), tuple(slice(0,4,1),slice(0,4,1),), )
paddle.Tensor.__getitem__(Tensor([4, 5, 4],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([4, 5, 4],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([4, 5, 4],"float32"), 2, )
paddle.Tensor.__getitem__(Tensor([4, 5, 4],"float32"), 3, )
paddle.Tensor.__getitem__(Tensor([4, 5, 6, 6, 6],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([4, 5, 6, 6, 6],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([4, 5, 6, 6, 6],"float32"), 2, )
paddle.Tensor.__getitem__(Tensor([4, 5, 6, 6, 6],"float32"), 3, )
paddle.Tensor.__getitem__(Tensor([4, 7],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([4, 7],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([4, 7],"float32"), 2, )
paddle.Tensor.__getitem__(Tensor([4, 7],"float32"), 3, )
paddle.Tensor.__getitem__(Tensor([4, 8],"float64"), tuple(slice(0,4,1),slice(0,8,1),), )
paddle.Tensor.__getitem__(Tensor([4],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([4],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([4],"float32"), 2, )
paddle.Tensor.__getitem__(Tensor([4],"float32"), 3, )
paddle.Tensor.__getitem__(Tensor([4],"float32"), tuple(Ellipsis,slice(None,-1,None),), )
paddle.Tensor.__getitem__(Tensor([4],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([4],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([4],"float64"), 2, )
paddle.Tensor.__getitem__(Tensor([4],"float64"), 3, )
paddle.Tensor.__getitem__(Tensor([4],"float64"), tuple(Ellipsis,slice(None,-1,None),), )
paddle.Tensor.__getitem__(Tensor([4],"int64"), 3, )
paddle.Tensor.__getitem__(Tensor([4],"int64"), slice(0,1,None), )
paddle.Tensor.__getitem__(Tensor([4],"int64"), slice(1,2,None), )
paddle.Tensor.__getitem__(Tensor([4],"int64"), slice(3,4,None), )
paddle.Tensor.__getitem__(Tensor([5, 3, 3, 3],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([5, 3, 3, 3],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([5, 3, 3, 3],"float32"), 2, )
paddle.Tensor.__getitem__(Tensor([5, 3, 3, 3],"float32"), 3, )
paddle.Tensor.__getitem__(Tensor([5, 3, 3, 3],"float32"), 4, )
paddle.Tensor.__getitem__(Tensor([5, 4, 2],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([5, 4, 2],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([5, 4, 2],"float32"), 2, )
paddle.Tensor.__getitem__(Tensor([5, 4, 2],"float32"), 3, )
paddle.Tensor.__getitem__(Tensor([5, 4, 2],"float32"), 4, )
paddle.Tensor.__getitem__(Tensor([5, 4, 4, 4, 4],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([5, 4, 4, 4, 4],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([5, 4, 4, 4, 4],"float32"), 2, )
paddle.Tensor.__getitem__(Tensor([5, 4, 4, 4, 4],"float32"), 3, )
paddle.Tensor.__getitem__(Tensor([5, 4, 4, 4, 4],"float32"), 4, )
paddle.Tensor.__getitem__(Tensor([6, 5, 4, 6, 6],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([6, 5, 4, 6, 6],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([6, 5, 4, 6, 6],"float32"), 2, )
paddle.Tensor.__getitem__(Tensor([6, 5, 4, 6, 6],"float32"), 3, )
paddle.Tensor.__getitem__(Tensor([6, 5, 4, 6, 6],"float32"), 4, )
paddle.Tensor.__getitem__(Tensor([6, 5, 4, 6, 6],"float32"), 5, )
paddle.Tensor.__getitem__(Tensor([6, 6],"float64"), tuple(slice(0,6,1),slice(0,6,1),), )
paddle.Tensor.__getitem__(Tensor([66416, 1, 5],"float64"), 66000, )
paddle.Tensor.__getitem__(Tensor([6],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([6],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([6],"float32"), 2, )
paddle.Tensor.__getitem__(Tensor([6],"float32"), 3, )
paddle.Tensor.__getitem__(Tensor([6],"float32"), 4, )
paddle.Tensor.__getitem__(Tensor([6],"float32"), 5, )
paddle.Tensor.__getitem__(Tensor([6],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([6],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([6],"float64"), 2, )
paddle.Tensor.__getitem__(Tensor([6],"float64"), 3, )
paddle.Tensor.__getitem__(Tensor([6],"float64"), 4, )
paddle.Tensor.__getitem__(Tensor([6],"float64"), 5, )
paddle.Tensor.__getitem__(Tensor([6],"float64"), tuple(slice(0,6,1),), )
paddle.Tensor.__getitem__(Tensor([7, 4],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([7, 4],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([7, 4],"float32"), 2, )
paddle.Tensor.__getitem__(Tensor([7, 4],"float32"), 3, )
paddle.Tensor.__getitem__(Tensor([7, 4],"float32"), 4, )
paddle.Tensor.__getitem__(Tensor([7, 4],"float32"), 5, )
paddle.Tensor.__getitem__(Tensor([7, 4],"float32"), 6, )
paddle.Tensor.__getitem__(Tensor([72, 72],"float64"), tuple(slice(0,72,1),slice(0,72,1),), )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 10, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 11, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 12, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 13, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 14, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 15, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 16, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 17, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 18, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 19, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 2, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 20, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 21, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 22, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 23, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 24, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 25, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 26, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 27, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 28, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 29, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 3, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 30, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 31, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 32, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 33, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 34, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 35, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 36, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 37, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 38, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 39, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 4, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 40, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 41, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 42, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 43, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 44, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 45, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 46, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 47, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 48, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 49, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 5, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 50, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 51, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 52, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 53, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 54, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 55, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 56, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 57, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 58, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 59, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 6, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 60, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 61, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 62, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 63, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 64, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 65, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 66, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 67, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 68, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 69, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 7, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 70, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 71, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 8, )
paddle.Tensor.__getitem__(Tensor([72],"float64"), 9, )
paddle.Tensor.__getitem__(Tensor([8, 18],"float64"), tuple(slice(0,8,1),slice(0,18,1),), )
paddle.Tensor.__getitem__(Tensor([8, 4],"float64"), tuple(slice(0,8,1),slice(0,4,1),), )
paddle.Tensor.__getitem__(Tensor([8],"float32"), 0, )
paddle.Tensor.__getitem__(Tensor([8],"float32"), 1, )
paddle.Tensor.__getitem__(Tensor([8],"float32"), 2, )
paddle.Tensor.__getitem__(Tensor([8],"float32"), 3, )
paddle.Tensor.__getitem__(Tensor([8],"float32"), 4, )
paddle.Tensor.__getitem__(Tensor([8],"float32"), 5, )
paddle.Tensor.__getitem__(Tensor([8],"float32"), 6, )
paddle.Tensor.__getitem__(Tensor([8],"float32"), 7, )
paddle.Tensor.__getitem__(Tensor([8],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([8],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([8],"float64"), 2, )
paddle.Tensor.__getitem__(Tensor([8],"float64"), 3, )
paddle.Tensor.__getitem__(Tensor([8],"float64"), 4, )
paddle.Tensor.__getitem__(Tensor([8],"float64"), 5, )
paddle.Tensor.__getitem__(Tensor([8],"float64"), 6, )
paddle.Tensor.__getitem__(Tensor([8],"float64"), 7, )
paddle.Tensor.__getitem__(Tensor([9, 18],"float64"), tuple(slice(0,9,1),slice(0,18,1),), )
paddle.Tensor.__getitem__(Tensor([9],"float64"), 0, )
paddle.Tensor.__getitem__(Tensor([9],"float64"), 1, )
paddle.Tensor.__getitem__(Tensor([9],"float64"), 2, )
paddle.Tensor.__getitem__(Tensor([9],"float64"), 3, )
paddle.Tensor.__getitem__(Tensor([9],"float64"), 4, )
paddle.Tensor.__getitem__(Tensor([9],"float64"), 5, )
paddle.Tensor.__getitem__(Tensor([9],"float64"), 6, )
paddle.Tensor.__getitem__(Tensor([9],"float64"), 7, )
paddle.Tensor.__getitem__(Tensor([9],"float64"), 8, )
paddle.Tensor.__gt__(Tensor([2, 1, 4],"float64"), 0.5, )
paddle.Tensor.__gt__(Tensor([2, 4],"float64"), 0.5, )
paddle.Tensor.__gt__(Tensor([2, 4],"float64"), Tensor([2, 1],"float64"), )
paddle.Tensor.__gt__(Tensor([2],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__gt__(Tensor([2],"float64"), Tensor([1],"float64"), )
paddle.Tensor.__gt__(Tensor([3, 2, 2, 4],"float64"), 0.5, )
paddle.Tensor.__gt__(Tensor([3],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__gt__(Tensor([3],"float64"), Tensor([1],"float64"), )
paddle.Tensor.__gt__(Tensor([4, 2],"float64"), Tensor([4, 1],"float64"), )
paddle.Tensor.__gt__(Tensor([4],"float32"), 2, )
paddle.Tensor.__gt__(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.Tensor.__gt__(Tensor([4],"float64"), Tensor([4],"float64"), )
paddle.Tensor.__gt__(Tensor([4],"int32"), Tensor([4],"int32"), )
paddle.Tensor.__gt__(Tensor([4],"int64"), -1, )
paddle.Tensor.__gt__(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.Tensor.__gt__(Tensor([],"float32"), Tensor([],"float32"), )
paddle.Tensor.__gt__(Tensor([],"float64"), Tensor([],"float64"), )
paddle.Tensor.__len__(Tensor([12],"float64"), )
paddle.Tensor.__len__(Tensor([16],"float64"), )
paddle.Tensor.__len__(Tensor([24],"float64"), )
paddle.Tensor.__len__(Tensor([2],"int32"), )
paddle.Tensor.__len__(Tensor([2],"int64"), )
paddle.Tensor.__len__(Tensor([3, 5, 5],"float32"), )
paddle.Tensor.__len__(Tensor([3, 5, 5],"float64"), )
paddle.Tensor.__len__(Tensor([3],"int64"), )
paddle.Tensor.__len__(Tensor([4],"float64"), )
paddle.Tensor.__len__(Tensor([6],"float64"), )
paddle.Tensor.__len__(Tensor([9],"float64"), )
paddle.Tensor.__lt__(Tensor([1],"int32"), Tensor([1],"int32"), )
paddle.Tensor.__lt__(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.Tensor.__lt__(Tensor([2, 4, 5],"int32"), Tensor([2, 4, 5],"int32"), )
paddle.Tensor.__lt__(Tensor([4, 5],"int32"), Tensor([4, 5],"int32"), )
paddle.Tensor.__lt__(Tensor([4],"int64"), -1, )
paddle.Tensor.__lt__(Tensor([4],"int64"), Tensor([2, 1],"int64"), )
paddle.Tensor.__lt__(Tensor([6, 2, 4, 5],"int32"), Tensor([6, 2, 4, 5],"int32"), )
paddle.Tensor.__mul__(Tensor([1, 2],"float32"), Tensor([2, 2, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 2],"float64"), Tensor([1, 2],"float64"), )
paddle.Tensor.__mul__(Tensor([1, 3],"float32"), Tensor([1, 3],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.Tensor.__mul__(Tensor([1, 3],"float64"), Tensor([3],"float64"), )
paddle.Tensor.__mul__(Tensor([1, 4],"float32"), Tensor([1, 4],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 5],"float64"), Tensor([1, 5],"float64"), )
paddle.Tensor.__mul__(Tensor([10, 1, 1, 1],"float32"), Tensor([2, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([10, 1, 1],"float32"), Tensor([2, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([10, 1],"float64"), Tensor([3],"float64"), )
paddle.Tensor.__mul__(Tensor([10, 2, 1, 2],"float32"), Tensor([10, 1, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([10, 2, 2],"float32"), Tensor([10, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([10, 3],"float64"), Tensor([10, 1],"float64"), )
paddle.Tensor.__mul__(Tensor([10],"float32"), 1.0, )
paddle.Tensor.__mul__(Tensor([16, 16],"float32"), Tensor([16, 16],"float32"), )
paddle.Tensor.__mul__(Tensor([16, 32],"float32"), Tensor([16, 32],"float32"), )
paddle.Tensor.__mul__(Tensor([18, 18],"float32"), Tensor([18, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__mul__(Tensor([1],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__mul__(Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.Tensor.__mul__(Tensor([2, 1, 2],"float32"), Tensor([2, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([2, 2, 2],"float32"), 2, )
paddle.Tensor.__mul__(Tensor([2, 2, 2],"float32"), Tensor([2, 2, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([2, 2, 2],"float64"), 2, )
paddle.Tensor.__mul__(Tensor([2, 2, 2],"int32"), 2, )
paddle.Tensor.__mul__(Tensor([2, 2, 2],"int64"), 2, )
paddle.Tensor.__mul__(Tensor([2, 2, 4, 4],"float32"), 0.5, )
paddle.Tensor.__mul__(Tensor([2, 2, 4, 64],"float64"), 0.125, )
paddle.Tensor.__mul__(Tensor([2, 2, 6, 64],"float64"), 0.125, )
paddle.Tensor.__mul__(Tensor([2, 2],"complex128"), Tensor([1, 2],"float64"), )
paddle.Tensor.__mul__(Tensor([2, 2],"complex64"), Tensor([1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([2, 2],"float32"), Tensor([1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([2, 2],"float32"), Tensor([2, 2, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([2, 2],"float64"), Tensor([1, 2],"float64"), )
paddle.Tensor.__mul__(Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), )
paddle.Tensor.__mul__(Tensor([2, 3, 3, 2],"float64"), Tensor([2, 3, 3, 2],"float64"), )
paddle.Tensor.__mul__(Tensor([2, 3, 4],"float64"), Tensor([2, 3, 4],"float64"), )
paddle.Tensor.__mul__(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__mul__(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), )
paddle.Tensor.__mul__(Tensor([2, 40, 4],"float64"), Tensor([2, 1, 4],"float64"), )
paddle.Tensor.__mul__(Tensor([2, 4],"float32"), Tensor([2, 4],"float64"), )
paddle.Tensor.__mul__(Tensor([2, 4],"float64"), 64.0, )
paddle.Tensor.__mul__(Tensor([2, 4],"float64"), Tensor([2, 4],"float64"), )
paddle.Tensor.__mul__(Tensor([25, 1, 44, 44],"int64"), Tensor([25, 1, 44, 44],"int64"), )
paddle.Tensor.__mul__(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__mul__(Tensor([2],"float32"), Tensor([],"float32"), )
paddle.Tensor.__mul__(Tensor([2],"float64"), Tensor([2],"float64"), )
paddle.Tensor.__mul__(Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.Tensor.__mul__(Tensor([3, 3],"float32"), 2, )
paddle.Tensor.__mul__(Tensor([3, 3],"float64"), 2, )
paddle.Tensor.__mul__(Tensor([3, 3],"float64"), Tensor([3, 3],"float64"), )
paddle.Tensor.__mul__(Tensor([3, 3],"int32"), 2, )
paddle.Tensor.__mul__(Tensor([3, 3],"int64"), 2, )
paddle.Tensor.__mul__(Tensor([3, 4, 7, 7],"float32"), 0.37796447300922725, )
paddle.Tensor.__mul__(Tensor([3, 4],"float64"), Tensor([3, 4],"float64"), )
paddle.Tensor.__mul__(Tensor([3, 6, 7, 9],"float32"), 0.3333333333333333, )
paddle.Tensor.__mul__(Tensor([3, 6],"float32"), 1.0, )
paddle.Tensor.__mul__(Tensor([32, 32],"float32"), Tensor([32, 32],"float32"), )
paddle.Tensor.__mul__(Tensor([3],"float32"), 0.6666666666666666, )
paddle.Tensor.__mul__(Tensor([3],"float32"), 1.0, )
paddle.Tensor.__mul__(Tensor([3],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__mul__(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.Tensor.__mul__(Tensor([3],"float64"), 1.0, )
paddle.Tensor.__mul__(Tensor([3],"float64"), 10, )
paddle.Tensor.__mul__(Tensor([3],"float64"), Tensor([3],"float64"), )
paddle.Tensor.__mul__(Tensor([4, 125, 125, 1],"int64"), Tensor([4, 125, 125, 1],"int64"), )
paddle.Tensor.__mul__(Tensor([4, 16],"float32"), Tensor([4, 16],"float32"), )
paddle.Tensor.__mul__(Tensor([4, 2, 2],"float64"), Tensor([4, 1, 2],"float64"), )
paddle.Tensor.__mul__(Tensor([4, 2],"float64"), Tensor([4, 2],"float64"), )
paddle.Tensor.__mul__(Tensor([4, 3, 3, 3],"float32"), 1.0, )
paddle.Tensor.__mul__(Tensor([4, 3, 3],"float32"), 1.0, )
paddle.Tensor.__mul__(Tensor([4, 3],"float32"), Tensor([1, 3],"float32"), )
paddle.Tensor.__mul__(Tensor([4, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.Tensor.__mul__(Tensor([4, 4, 16],"float32"), -2, )
paddle.Tensor.__mul__(Tensor([4, 4, 16],"float32"), 1e+22, )
paddle.Tensor.__mul__(Tensor([4, 4, 4],"float32"), Tensor([4, 4, 4],"float32"), )
paddle.Tensor.__mul__(Tensor([4, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.Tensor.__mul__(Tensor([40, 2],"float64"), Tensor([1, 2],"float64"), )
paddle.Tensor.__mul__(Tensor([4],"float32"), 0.5, )
paddle.Tensor.__mul__(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.Tensor.__mul__(Tensor([4],"float64"), Tensor([4],"float64"), )
paddle.Tensor.__mul__(Tensor([5, 1],"int64"), Tensor([5, 1],"int64"), )
paddle.Tensor.__mul__(Tensor([5, 2, 3],"float64"), Tensor([2, 3],"float64"), )
paddle.Tensor.__mul__(Tensor([5, 2],"float64"), Tensor([5, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([5, 2],"float64"), Tensor([5, 2],"float64"), )
paddle.Tensor.__mul__(Tensor([5, 3, 3, 5],"float32"), 0.4472135954999579, )
paddle.Tensor.__mul__(Tensor([5, 3],"float32"), 2, )
paddle.Tensor.__mul__(Tensor([5, 3],"float64"), 2, )
paddle.Tensor.__mul__(Tensor([5, 3],"int32"), 2, )
paddle.Tensor.__mul__(Tensor([5, 3],"int64"), 2, )
paddle.Tensor.__mul__(Tensor([5, 8, 7, 7],"float32"), 0.37796447300922725, )
paddle.Tensor.__mul__(Tensor([5],"float32"), 0.125, )
paddle.Tensor.__mul__(Tensor([5],"float32"), 0.4166666666666667, )
paddle.Tensor.__mul__(Tensor([5],"float64"), 2, )
paddle.Tensor.__mul__(Tensor([7, 3],"float32"), 2, )
paddle.Tensor.__mul__(Tensor([7, 3],"float64"), 2, )
paddle.Tensor.__mul__(Tensor([7, 3],"int32"), 2, )
paddle.Tensor.__mul__(Tensor([7, 3],"int64"), 2, )
paddle.Tensor.__mul__(Tensor([8, 5, 3, 9],"float64"), 0.3333333333333333, )
paddle.Tensor.__mul__(Tensor([8, 5, 8, 9],"float64"), 0.3333333333333333, )
paddle.Tensor.__mul__(Tensor([8, 6, 8, 9],"float32"), 0.3333333333333333, )
paddle.Tensor.__mul__(Tensor([8, 7, 6, 9],"float32"), 0.3333333333333333, )
paddle.Tensor.__mul__(Tensor([9, 4, 4, 6],"float32"), 0.408248290463863, )
paddle.Tensor.__mul__(Tensor([],"float32"), 0.002, )
paddle.Tensor.__mul__(Tensor([],"float32"), 0.25, )
paddle.Tensor.__mul__(Tensor([],"float32"), Tensor([1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([],"float32"), Tensor([1, 3, 3],"int64"), )
paddle.Tensor.__mul__(Tensor([],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__mul__(Tensor([],"float32"), Tensor([2, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([],"float32"), Tensor([2, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([],"float32"), Tensor([2, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__mul__(Tensor([],"float32"), Tensor([3, 4, 5],"float32"), )
paddle.Tensor.__mul__(Tensor([],"float32"), Tensor([3, 4],"float32"), )
paddle.Tensor.__mul__(Tensor([],"float32"), Tensor([4],"float32"), )
paddle.Tensor.__mul__(Tensor([],"float32"), Tensor([],"float32"), )
paddle.Tensor.__mul__(Tensor([],"float64"), Tensor([1, 3, 3],"int64"), )
paddle.Tensor.__mul__(Tensor([],"float64"), Tensor([1],"float64"), )
paddle.Tensor.__mul__(Tensor([],"float64"), Tensor([1],"int64"), )
paddle.Tensor.__mul__(Tensor([],"float64"), Tensor([2, 1],"float64"), )
paddle.Tensor.__mul__(Tensor([],"float64"), Tensor([3, 6, 3, 1, 2, 5],"int64"), )
paddle.Tensor.__mul__(Tensor([],"float64"), Tensor([3, 6, 3, 4, 1, 5],"int64"), )
paddle.Tensor.__mul__(Tensor([],"float64"), Tensor([3, 6, 3, 4, 2, 1],"int64"), )
paddle.Tensor.__mul__(Tensor([],"float64"), Tensor([3],"float64"), )
paddle.Tensor.__mul__(Tensor([],"float64"), Tensor([4, 1],"float64"), )
paddle.Tensor.__mul__(Tensor([],"float64"), Tensor([],"float64"), )
paddle.Tensor.__ne__(Tensor([1],"int32"), 0, )
paddle.Tensor.__ne__(Tensor([1],"int64"), 0, )
paddle.Tensor.__ne__(Tensor([2, 4, 5],"int32"), 0, )
paddle.Tensor.__ne__(Tensor([25, 1, 44, 44],"int64"), -100, )
paddle.Tensor.__ne__(Tensor([4, 125, 125, 1],"int64"), 255, )
paddle.Tensor.__ne__(Tensor([4, 5],"int32"), 0, )
paddle.Tensor.__ne__(Tensor([5, 1],"int64"), -100, )
paddle.Tensor.__ne__(Tensor([5, 1],"int64"), -25, )
paddle.Tensor.__ne__(Tensor([6, 2, 4, 5],"int32"), 0, )
paddle.Tensor.__neg__(Tensor([1, 2, 3],"float32"), )
paddle.Tensor.__neg__(Tensor([1, 2, 3],"float64"), )
paddle.Tensor.__neg__(Tensor([1, 2],"float32"), )
paddle.Tensor.__neg__(Tensor([1],"float32"), )
paddle.Tensor.__neg__(Tensor([1],"float64"), )
paddle.Tensor.__neg__(Tensor([2, 1, 2],"float32"), )
paddle.Tensor.__neg__(Tensor([2, 2],"float32"), )
paddle.Tensor.__neg__(Tensor([2, 3, 2],"float64"), )
paddle.Tensor.__neg__(Tensor([2, 3],"float32"), )
paddle.Tensor.__neg__(Tensor([2, 3],"float64"), )
paddle.Tensor.__neg__(Tensor([2],"float32"), )
paddle.Tensor.__neg__(Tensor([3, 2],"float32"), )
paddle.Tensor.__neg__(Tensor([3, 2],"float64"), )
paddle.Tensor.__neg__(Tensor([3],"float32"), )
paddle.Tensor.__neg__(Tensor([3],"float64"), )
paddle.Tensor.__neg__(Tensor([4],"float32"), )
paddle.Tensor.__neg__(Tensor([],"float32"), )
paddle.Tensor.__neg__(Tensor([],"float64"), )
paddle.Tensor.__neg__(Tensor([],"int64"), )
paddle.Tensor.__nonzero__(Tensor([1],"bool"), )
paddle.Tensor.__nonzero__(Tensor([],"bool"), )
paddle.Tensor.__or__(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.Tensor.__or__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.Tensor.__or__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.Tensor.__or__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.Tensor.__or__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int64"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int64"), )
paddle.Tensor.__or__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int8"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int8"), )
paddle.Tensor.__or__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"uint8"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"uint8"), )
paddle.Tensor.__or__(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.Tensor.__or__(Tensor([3],"int32"), Tensor([3],"int32"), )
paddle.Tensor.__pow__(Tensor([3, 3, 4, 4],"float64"), 3, )
paddle.Tensor.__pow__(Tensor([3, 3, 4],"float64"), 3, )
paddle.Tensor.__pow__(Tensor([3, 3],"float64"), 3, )
paddle.Tensor.__pow__(Tensor([3],"float64"), 3, )
paddle.Tensor.__radd__(Tensor([1],"float32"), 192., )
paddle.Tensor.__radd__(Tensor([1],"float64"), 192., )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.0, )
paddle.Tensor.__rmul__(Tensor([1, 2, 3],"float32"), -2.0, )
paddle.Tensor.__rmul__(Tensor([1, 2, 3],"float32"), 2.0, )
paddle.Tensor.__rmul__(Tensor([1, 2, 3],"float64"), -2.0, )
paddle.Tensor.__rmul__(Tensor([1, 2, 3],"float64"), 2.0, )
paddle.Tensor.__rmul__(Tensor([1],"float32"), 6, )
paddle.Tensor.__rmul__(Tensor([1],"float64"), 6, )
paddle.Tensor.__rmul__(Tensor([2, 3],"float32"), -2.0, )
paddle.Tensor.__rmul__(Tensor([2, 3],"float32"), 2.0, )
paddle.Tensor.__rmul__(Tensor([2, 3],"float64"), -2.0, )
paddle.Tensor.__rmul__(Tensor([2, 3],"float64"), 2.0, )
paddle.Tensor.__rmul__(Tensor([3, 4],"float32"), 0.5, )
paddle.Tensor.__rmul__(Tensor([3],"float32"), -2.0, )
paddle.Tensor.__rmul__(Tensor([3],"float32"), 2.0, )
paddle.Tensor.__rmul__(Tensor([3],"float32"), complex(0.0,1.0), )
paddle.Tensor.__rmul__(Tensor([3],"float64"), -2.0, )
paddle.Tensor.__rmul__(Tensor([3],"float64"), 10, )
paddle.Tensor.__rmul__(Tensor([3],"float64"), 2.0, )
paddle.Tensor.__rsub__(Tensor([1, 2, 3],"float32"), 0.6931471805599453, )
paddle.Tensor.__rsub__(Tensor([1, 2, 3],"float64"), 0.6931471805599453, )
paddle.Tensor.__rsub__(Tensor([1],"float32"), 1.0, )
paddle.Tensor.__rsub__(Tensor([2, 2],"float32"), 2, )
paddle.Tensor.__rsub__(Tensor([2, 3],"float32"), 0.6931471805599453, )
paddle.Tensor.__rsub__(Tensor([2, 3],"float64"), 0.6931471805599453, )
paddle.Tensor.__rsub__(Tensor([2],"float32"), 1.0, )
paddle.Tensor.__rsub__(Tensor([2],"float32"), 2, )
paddle.Tensor.__rsub__(Tensor([2],"float32"), 3, )
paddle.Tensor.__rsub__(Tensor([3, 3],"float32"), 1.0, )
paddle.Tensor.__rsub__(Tensor([3, 3],"float64"), -4.0, )
paddle.Tensor.__rsub__(Tensor([3, 3],"float64"), 1.0, )
paddle.Tensor.__rsub__(Tensor([3, 3],"float64"), 4.0, )
paddle.Tensor.__rsub__(Tensor([3],"float32"), 0.6931471805599453, )
paddle.Tensor.__rsub__(Tensor([3],"float32"), 1, )
paddle.Tensor.__rsub__(Tensor([3],"float32"), 4, )
paddle.Tensor.__rsub__(Tensor([3],"float64"), 0.6931471805599453, )
paddle.Tensor.__rsub__(Tensor([3],"float64"), 1, )
paddle.Tensor.__rsub__(Tensor([4, 3, 3, 4],"float64"), -4.0, )
paddle.Tensor.__rsub__(Tensor([4, 3, 3],"float64"), -4.0, )
paddle.Tensor.__rsub__(Tensor([5],"float64"), 1, )
paddle.Tensor.__rsub__(Tensor([],"float32"), 1, )
paddle.Tensor.__rsub__(Tensor([],"float32"), 2, )
paddle.Tensor.__rsub__(Tensor([],"float32"), 3, )
paddle.Tensor.__rtruediv__(Tensor([1],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([2, 4],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([2],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([2],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([3],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([3],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([4, 2],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float64"), 1, )
paddle.Tensor.__setitem__(Tensor([12],"float64"), 0, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([12],"float64"), 1, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([12],"float64"), 10, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([12],"float64"), 11, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([12],"float64"), 2, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([12],"float64"), 3, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([12],"float64"), 4, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([12],"float64"), 5, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([12],"float64"), 6, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([12],"float64"), 7, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([12],"float64"), 8, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([12],"float64"), 9, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([16],"float64"), 0, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([16],"float64"), 1, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([16],"float64"), 10, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([16],"float64"), 11, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([16],"float64"), 12, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([16],"float64"), 13, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([16],"float64"), 14, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([16],"float64"), 15, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([16],"float64"), 2, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([16],"float64"), 3, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([16],"float64"), 4, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([16],"float64"), 5, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([16],"float64"), 6, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([16],"float64"), 7, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([16],"float64"), 8, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([16],"float64"), 9, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([2, 1, 2],"float32"), Tensor([2, 1, 2],"bool"), 0, )
paddle.Tensor.__setitem__(Tensor([2, 2],"float32"), Tensor([2, 2],"bool"), 0, )
paddle.Tensor.__setitem__(Tensor([2, 6],"float32"), Ellipsis, 42, )
paddle.Tensor.__setitem__(Tensor([2, 6],"float32"), Ellipsis, Tensor([6],"float32"), )
paddle.Tensor.__setitem__(Tensor([2, 6],"float32"), tuple(slice(None,None,None),slice(3,0,-1),), Tensor([3],"float32"), )
paddle.Tensor.__setitem__(Tensor([2, 6],"float32"), tuple(slice(None,None,None),slice(5,0,-2),), Tensor([3],"float32"), )
paddle.Tensor.__setitem__(Tensor([2, 6],"float64"), tuple(1,slice(4,None,-1),), 42, )
paddle.Tensor.__setitem__(Tensor([2, 6],"float64"), tuple(1,slice(4,None,-2),), 42, )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 0, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 1, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 10, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 11, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 12, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 13, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 14, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 15, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 16, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 17, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 18, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 19, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 2, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 20, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 21, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 22, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 23, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 3, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 4, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 5, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 6, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 7, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 8, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([24],"float64"), 9, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([2],"float32"), 0, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([2],"float32"), 1, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([2],"float64"), 0, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([2],"float64"), 1, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 0, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 1, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 10, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 11, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 12, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 13, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 14, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 15, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 16, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 17, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 18, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 19, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 2, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 20, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 21, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 22, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 23, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 24, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 25, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 26, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 27, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 28, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 29, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 3, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 30, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 31, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 32, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 33, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 34, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 35, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 4, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 5, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 6, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 7, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 8, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([36],"float64"), 9, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([3],"float64"), 0, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([3],"float64"), 1, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([3],"float64"), 2, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([3],"float64"), Tensor([3],"bool"), 0, )
paddle.Tensor.__setitem__(Tensor([4],"float32"), 0, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([4],"float32"), 1, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([4],"float32"), 2, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([4],"float32"), 3, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([4],"float64"), 0, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([4],"float64"), 1, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([4],"float64"), 2, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([4],"float64"), 3, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([6],"float32"), 0, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([6],"float32"), 1, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([6],"float32"), 2, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([6],"float32"), 3, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([6],"float32"), 4, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([6],"float32"), 5, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([6],"float64"), 0, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([6],"float64"), 1, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([6],"float64"), 2, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([6],"float64"), 3, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([6],"float64"), 4, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([6],"float64"), 5, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([8],"float32"), 0, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([8],"float32"), 1, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([8],"float32"), 2, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([8],"float32"), 3, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([8],"float32"), 4, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([8],"float32"), 5, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([8],"float32"), 6, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([8],"float32"), 7, Tensor([],"float32"), )
paddle.Tensor.__setitem__(Tensor([9],"float64"), 0, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([9],"float64"), 1, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([9],"float64"), 2, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([9],"float64"), 3, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([9],"float64"), 4, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([9],"float64"), 5, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([9],"float64"), 6, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([9],"float64"), 7, Tensor([],"float64"), )
paddle.Tensor.__setitem__(Tensor([9],"float64"), 8, Tensor([],"float64"), )
paddle.Tensor.__sub__(Tensor([1, 2, 3],"float32"), Tensor([1, 2, 3],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 2, 3],"float64"), Tensor([1, 2, 3],"float64"), )
paddle.Tensor.__sub__(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.Tensor.__sub__(Tensor([1, 3, 3],"int64"), 1, )
paddle.Tensor.__sub__(Tensor([1, 3],"float32"), Tensor([1, 3],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.Tensor.__sub__(Tensor([1, 4],"float32"), Tensor([1, 4],"float32"), )
paddle.Tensor.__sub__(Tensor([10, 2, 1, 2],"float32"), Tensor([10, 1, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([10, 2, 1, 2],"float32"), Tensor([2, 1, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([10, 2, 2],"float32"), Tensor([10, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([10, 2, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([10, 3],"float64"), Tensor([10, 1],"float64"), )
paddle.Tensor.__sub__(Tensor([10, 3],"float64"), Tensor([3],"float64"), )
paddle.Tensor.__sub__(Tensor([16, 16],"float32"), Tensor([16, 16],"float32"), )
paddle.Tensor.__sub__(Tensor([16, 32],"float32"), Tensor([16, 32],"float32"), )
paddle.Tensor.__sub__(Tensor([1],"float32"), 1, )
paddle.Tensor.__sub__(Tensor([1],"float32"), Tensor([3],"float32"), )
paddle.Tensor.__sub__(Tensor([1],"float32"), Tensor([],"float32"), )
paddle.Tensor.__sub__(Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.Tensor.__sub__(Tensor([1],"int64"), 1, )
paddle.Tensor.__sub__(Tensor([2, 1, 2],"float32"), Tensor([2, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 1, 2],"float32"), Tensor([2, 1, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 1, 2],"float32"), Tensor([],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 1],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 1],"float32"), Tensor([],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 2, 2],"float32"), 1.0, )
paddle.Tensor.__sub__(Tensor([2, 2],"float32"), 1.0, )
paddle.Tensor.__sub__(Tensor([2, 2],"float32"), Tensor([2, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 2],"float32"), Tensor([],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 3, 2],"float64"), Tensor([2, 3, 2],"float64"), )
paddle.Tensor.__sub__(Tensor([2, 3, 2],"float64"), Tensor([3, 1],"float64"), )
paddle.Tensor.__sub__(Tensor([2, 3],"float32"), 1.0, )
paddle.Tensor.__sub__(Tensor([2, 3],"float32"), Tensor([1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 3],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 3],"float32"), Tensor([2, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 3],"float32"), Tensor([3],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 3],"float64"), Tensor([1, 1],"float64"), )
paddle.Tensor.__sub__(Tensor([2, 3],"float64"), Tensor([1],"float64"), )
paddle.Tensor.__sub__(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), )
paddle.Tensor.__sub__(Tensor([2, 4],"float64"), 0.2, )
paddle.Tensor.__sub__(Tensor([2, 4],"float64"), Tensor([2, 4],"float64"), )
paddle.Tensor.__sub__(Tensor([2],"float32"), 1.0, )
paddle.Tensor.__sub__(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__sub__(Tensor([2],"float32"), Tensor([],"float32"), )
paddle.Tensor.__sub__(Tensor([3, 3, 3],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.Tensor.__sub__(Tensor([3, 3, 3],"float64"), Tensor([1, 1, 3],"float64"), )
paddle.Tensor.__sub__(Tensor([3, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.Tensor.__sub__(Tensor([3, 4, 5],"float32"), Tensor([],"float32"), )
paddle.Tensor.__sub__(Tensor([3, 4],"float32"), 0.5, )
paddle.Tensor.__sub__(Tensor([3, 4],"float32"), Tensor([],"float32"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 1, 2, 5],"int64"), 1, )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 4, 1, 5],"int64"), 1, )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 4, 2, 1],"float64"), Tensor([3, 6, 3, 4, 2, 1],"float64"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 4, 2, 1],"int64"), 1, )
paddle.Tensor.__sub__(Tensor([32, 32],"float32"), Tensor([32, 32],"float32"), )
paddle.Tensor.__sub__(Tensor([3],"float32"), 1.0, )
paddle.Tensor.__sub__(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.Tensor.__sub__(Tensor([3],"float64"), Tensor([1],"float64"), )
paddle.Tensor.__sub__(Tensor([3],"float64"), Tensor([3],"float32"), )
paddle.Tensor.__sub__(Tensor([3],"float64"), Tensor([3],"float64"), )
paddle.Tensor.__sub__(Tensor([3],"float64"), Tensor([],"float64"), )
paddle.Tensor.__sub__(Tensor([4, 12],"float64"), Tensor([4, 1],"float64"), )
paddle.Tensor.__sub__(Tensor([4, 16],"float32"), Tensor([4, 16],"float32"), )
paddle.Tensor.__sub__(Tensor([4, 2],"float32"), Tensor([4, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([4, 2],"float64"), Tensor([4, 1],"float64"), )
paddle.Tensor.__sub__(Tensor([4, 4, 16],"float32"), Tensor([4, 4, 16],"float32"), )
paddle.Tensor.__sub__(Tensor([4, 4, 32],"float32"), Tensor([4, 4, 32],"float32"), )
paddle.Tensor.__sub__(Tensor([4, 4],"float32"), 1, )
paddle.Tensor.__sub__(Tensor([4, 8, 32],"float32"), Tensor([4, 8, 32],"float32"), )
paddle.Tensor.__sub__(Tensor([4, 8],"float32"), 1, )
paddle.Tensor.__sub__(Tensor([4],"float32"), Tensor([],"float32"), )
paddle.Tensor.__sub__(Tensor([],"float32"), 0.001, )
paddle.Tensor.__sub__(Tensor([],"float32"), 1, )
paddle.Tensor.__sub__(Tensor([],"float32"), 1.0, )
paddle.Tensor.__sub__(Tensor([],"float32"), Tensor([10, 1, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([],"float32"), Tensor([10, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__sub__(Tensor([],"float32"), Tensor([],"float32"), )
paddle.Tensor.__sub__(Tensor([],"float32"), True, )
paddle.Tensor.__sub__(Tensor([],"float64"), 0.0001, )
paddle.Tensor.__sub__(Tensor([],"float64"), 0.001, )
paddle.Tensor.__sub__(Tensor([],"float64"), 1.0, )
paddle.Tensor.__sub__(Tensor([],"float64"), 1e-05, )
paddle.Tensor.__sub__(Tensor([],"float64"), Tensor([10, 1],"float64"), )
paddle.Tensor.__sub__(Tensor([],"float64"), Tensor([],"float64"), )
paddle.Tensor.__sub__(Tensor([],"float64"), True, )
paddle.Tensor.__truediv__(Tensor([1, 1, 3],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([1, 2],"float64"), Tensor([1, 2],"float64"), )
paddle.Tensor.__truediv__(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.Tensor.__truediv__(Tensor([1, 4, 4],"float32"), 2, )
paddle.Tensor.__truediv__(Tensor([1, 5],"float64"), Tensor([1, 5],"float64"), )
paddle.Tensor.__truediv__(Tensor([12],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([18, 18],"float32"), Tensor([18, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.Tensor.__truediv__(Tensor([2, 1, 2],"float32"), 2, )
paddle.Tensor.__truediv__(Tensor([2, 1, 2],"float32"), Tensor([2, 1, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 2],"float32"), 2, )
paddle.Tensor.__truediv__(Tensor([2, 2],"float32"), Tensor([2, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 3, 2],"float64"), Tensor([2, 3, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([2, 3],"float32"), Tensor([2, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 3],"float64"), Tensor([2, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([2, 4],"float32"), Tensor([2, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 4],"float64"), Tensor([2, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([2, 4],"float64"), Tensor([2, 4],"float64"), )
paddle.Tensor.__truediv__(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__truediv__(Tensor([2],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([2],"float64"), Tensor([2],"float64"), )
paddle.Tensor.__truediv__(Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.Tensor.__truediv__(Tensor([3, 3],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([3, 4, 5],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([3, 45],"float32"), Tensor([3, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([3, 4],"float32"), 0.5, )
paddle.Tensor.__truediv__(Tensor([3, 4],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([3, 4],"float64"), Tensor([3, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([3, 5],"float32"), Tensor([3, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([3, 6],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([36],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([3],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([3],"float64"), 2, )
paddle.Tensor.__truediv__(Tensor([3],"float64"), Tensor([1],"float64"), )
paddle.Tensor.__truediv__(Tensor([3],"float64"), Tensor([3],"float64"), )
paddle.Tensor.__truediv__(Tensor([3],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([4, 1, 4],"float32"), 2, )
paddle.Tensor.__truediv__(Tensor([4, 1080],"float32"), Tensor([4, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 20],"float32"), Tensor([4, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 2],"float64"), Tensor([4, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 3, 3],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 3],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 5, 6, 7],"float64"), Tensor([4, 1, 6, 7],"float64"), )
paddle.Tensor.__truediv__(Tensor([4, 5, 6, 7],"float64"), Tensor([4, 5, 6, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([4, 5, 6],"float64"), Tensor([4, 1, 6],"float64"), )
paddle.Tensor.__truediv__(Tensor([4, 7],"float32"), Tensor([1, 7],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 7],"float32"), Tensor([4, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([45, 3],"float32"), Tensor([1, 3],"float32"), )
paddle.Tensor.__truediv__(Tensor([4],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([4],"float64"), Tensor([1],"float64"), )
paddle.Tensor.__truediv__(Tensor([4],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([5, 2, 3],"float64"), Tensor([5, 2, 3],"float64"), )
paddle.Tensor.__truediv__(Tensor([5, 256],"float32"), Tensor([5, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([5, 27],"float32"), Tensor([5, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([5, 2],"float64"), Tensor([5, 2],"float64"), )
paddle.Tensor.__truediv__(Tensor([5, 81],"float32"), Tensor([5, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([5, 8],"float32"), Tensor([5, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([5],"float64"), Tensor([5],"float64"), )
paddle.Tensor.__truediv__(Tensor([6, 720],"float32"), Tensor([6, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([60, 4],"float32"), Tensor([1, 4],"float32"), )
paddle.Tensor.__truediv__(Tensor([6],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([720, 6],"float32"), Tensor([1, 6],"float32"), )
paddle.Tensor.__truediv__(Tensor([],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([],"float64"), 0.0001, )
paddle.Tensor.__truediv__(Tensor([],"float64"), 1e-05, )
paddle.Tensor.__truediv__(Tensor([],"float64"), 1e-07, )
paddle.Tensor.__truediv__(Tensor([],"float64"), 2.0, )
paddle.Tensor.__truediv__(Tensor([],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([],"int64"), Tensor([],"int64"), )
paddle.Tensor.__xor__(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int64"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int64"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int8"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int8"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"uint8"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"uint8"), )
paddle.Tensor.__xor__(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.Tensor.__xor__(Tensor([3],"int32"), Tensor([3],"int32"), )
paddle.Tensor.abs(Tensor([1, 2],"float32"), )
paddle.Tensor.abs(Tensor([2, 3],"float32"), )
paddle.Tensor.abs(Tensor([2],"float32"), )
paddle.Tensor.abs(Tensor([3],"int64"), )
paddle.Tensor.abs(Tensor([4],"float32"), )
paddle.Tensor.amax(Tensor([10],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([10],"float64"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([10],"int32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([10],"int64"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([2, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([3, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([3, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amin(Tensor([10],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([10],"float64"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([10],"int32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([10],"int64"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([2, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([3, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([3, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.any(Tensor([2160],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([3, 3, 3],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([3, 6, 3, 4, 2, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.any(Tensor([3, 6, 3, 4, 2, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.any(Tensor([3, 6, 3, 4, 2, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.astype(Tensor([1, 1, 2],"float64"), "float32", )
paddle.Tensor.astype(Tensor([1, 1, 4],"float64"), "float32", )
paddle.Tensor.astype(Tensor([1, 1, 5],"float64"), "float32", )
paddle.Tensor.astype(Tensor([1, 1, 5],"float64"), "float64", )
paddle.Tensor.astype(Tensor([1, 18],"float32"), "float64", )
paddle.Tensor.astype(Tensor([1, 18],"float64"), "float64", )
paddle.Tensor.astype(Tensor([1, 2, 2],"float32"), Dtype(float32), )
paddle.Tensor.astype(Tensor([1, 2, 3],"float32"), Dtype(float32), )
paddle.Tensor.astype(Tensor([1, 2, 3],"float64"), "float32", )
paddle.Tensor.astype(Tensor([1, 2, 3],"float64"), "float64", )
paddle.Tensor.astype(Tensor([1, 2, 3],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([1, 2, 4],"float64"), "float32", )
paddle.Tensor.astype(Tensor([1, 2, 4],"float64"), "float64", )
paddle.Tensor.astype(Tensor([1, 2],"float64"), "float32", )
paddle.Tensor.astype(Tensor([1, 2],"float64"), "float64", )
paddle.Tensor.astype(Tensor([1, 3, 2],"float32"), Dtype(float32), )
paddle.Tensor.astype(Tensor([1, 3, 2],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([1, 3, 3],"float32"), Dtype(float32), )
paddle.Tensor.astype(Tensor([1, 3, 3],"float32"), Dtype(int32), )
paddle.Tensor.astype(Tensor([1, 3, 3],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([1, 3, 3],"float64"), Dtype(int32), )
paddle.Tensor.astype(Tensor([1, 3, 3],"int32"), Dtype(float32), )
paddle.Tensor.astype(Tensor([1, 3, 3],"int32"), Dtype(float64), )
paddle.Tensor.astype(Tensor([1, 32],"float64"), "float64", )
paddle.Tensor.astype(Tensor([1, 3],"float64"), "float32", )
paddle.Tensor.astype(Tensor([1, 3],"float64"), "float64", )
paddle.Tensor.astype(Tensor([1, 4],"float64"), "float32", )
paddle.Tensor.astype(Tensor([1, 4],"float64"), "float64", )
paddle.Tensor.astype(Tensor([1, 7],"float64"), "float32", )
paddle.Tensor.astype(Tensor([1, 7],"float64"), "float64", )
paddle.Tensor.astype(Tensor([1, 9],"float64"), "float64", )
paddle.Tensor.astype(Tensor([18, 18],"bool"), "float32", )
paddle.Tensor.astype(Tensor([1],"float32"), type(numpy.float64), )
paddle.Tensor.astype(Tensor([1],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([1],"float64"), Dtype(int32), )
paddle.Tensor.astype(Tensor([1],"float64"), type(numpy.int32), )
paddle.Tensor.astype(Tensor([1],"int32"), Dtype(float64), )
paddle.Tensor.astype(Tensor([1],"int32"), type(numpy.int64), )
paddle.Tensor.astype(Tensor([1],"int64"), type(int), )
paddle.Tensor.astype(Tensor([1],"int64"), type(numpy.float32), )
paddle.Tensor.astype(Tensor([2, 1, 2],"float64"), "float32", )
paddle.Tensor.astype(Tensor([2, 1, 4],"float64"), "float32", )
paddle.Tensor.astype(Tensor([2, 12],"float64"), "float32", )
paddle.Tensor.astype(Tensor([2, 2],"float32"), Dtype(float32), )
paddle.Tensor.astype(Tensor([2, 2],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([2, 3, 2],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([2, 3, 4],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([2, 3],"float32"), Dtype(float32), )
paddle.Tensor.astype(Tensor([2, 3],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([2, 4, 11, 11],"float64"), "float32", )
paddle.Tensor.astype(Tensor([2, 4, 11, 11],"float64"), "float64", )
paddle.Tensor.astype(Tensor([2, 4, 20, 10],"float64"), "float32", )
paddle.Tensor.astype(Tensor([2, 4, 20, 10],"float64"), "float64", )
paddle.Tensor.astype(Tensor([2, 4, 20, 20],"float64"), "float32", )
paddle.Tensor.astype(Tensor([2, 4, 20, 20],"float64"), "float64", )
paddle.Tensor.astype(Tensor([2, 4, 21, 21],"float64"), "float32", )
paddle.Tensor.astype(Tensor([2, 4, 21, 21],"float64"), "float64", )
paddle.Tensor.astype(Tensor([2, 4, 4],"float32"), type(numpy.float64), )
paddle.Tensor.astype(Tensor([2, 4, 4],"float64"), type(numpy.int32), )
paddle.Tensor.astype(Tensor([2, 4, 4],"int32"), type(numpy.int64), )
paddle.Tensor.astype(Tensor([2, 4, 4],"int64"), type(numpy.float32), )
paddle.Tensor.astype(Tensor([2, 4, 7],"float32"), type(numpy.float64), )
paddle.Tensor.astype(Tensor([2, 4, 7],"float64"), type(numpy.int32), )
paddle.Tensor.astype(Tensor([2, 4, 7],"int32"), type(numpy.int64), )
paddle.Tensor.astype(Tensor([2, 4, 7],"int64"), type(numpy.float32), )
paddle.Tensor.astype(Tensor([2, 4],"float32"), Dtype(float32), )
paddle.Tensor.astype(Tensor([2, 4],"float32"), type(numpy.float64), )
paddle.Tensor.astype(Tensor([2, 4],"float64"), type(numpy.int32), )
paddle.Tensor.astype(Tensor([2, 4],"int32"), type(numpy.int64), )
paddle.Tensor.astype(Tensor([2, 4],"int64"), type(numpy.float32), )
paddle.Tensor.astype(Tensor([2, 6],"float64"), "float32", )
paddle.Tensor.astype(Tensor([2],"float32"), Dtype(float32), )
paddle.Tensor.astype(Tensor([2],"float32"), type(int), )
paddle.Tensor.astype(Tensor([2],"float32"), type(numpy.float64), )
paddle.Tensor.astype(Tensor([2],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([2],"float64"), type(int), )
paddle.Tensor.astype(Tensor([2],"float64"), type(numpy.int32), )
paddle.Tensor.astype(Tensor([2],"int32"), type(int), )
paddle.Tensor.astype(Tensor([2],"int32"), type(numpy.int64), )
paddle.Tensor.astype(Tensor([2],"int64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([2],"int64"), type(int), )
paddle.Tensor.astype(Tensor([2],"int64"), type(numpy.float32), )
paddle.Tensor.astype(Tensor([3, 1, 2],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([3, 1, 5],"float64"), "float32", )
paddle.Tensor.astype(Tensor([3, 2],"float32"), Dtype(float32), )
paddle.Tensor.astype(Tensor([3, 2],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([3, 3],"float32"), type(numpy.float64), )
paddle.Tensor.astype(Tensor([3, 3],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([3, 3],"float64"), type(numpy.int32), )
paddle.Tensor.astype(Tensor([3, 3],"int32"), type(numpy.int64), )
paddle.Tensor.astype(Tensor([3, 3],"int64"), type(numpy.float32), )
paddle.Tensor.astype(Tensor([3, 4],"float64"), "float64", )
paddle.Tensor.astype(Tensor([3, 4],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([3, 6, 3, 1, 2, 5],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([3, 6, 3, 1, 2, 5],"float64"), Dtype(int32), )
paddle.Tensor.astype(Tensor([3, 6, 3, 1, 2, 5],"int32"), Dtype(float64), )
paddle.Tensor.astype(Tensor([3, 6, 3, 4, 1, 5],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([3, 6, 3, 4, 1, 5],"float64"), Dtype(int32), )
paddle.Tensor.astype(Tensor([3, 6, 3, 4, 1, 5],"int32"), Dtype(float64), )
paddle.Tensor.astype(Tensor([3, 6, 3, 4, 2, 1],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([3, 6, 3, 4, 2, 1],"float64"), Dtype(int32), )
paddle.Tensor.astype(Tensor([3, 6, 3, 4, 2, 1],"int32"), Dtype(float64), )
paddle.Tensor.astype(Tensor([3],"complex64"), "complex128", )
paddle.Tensor.astype(Tensor([3],"complex64"), "complex64", )
paddle.Tensor.astype(Tensor([3],"float32"), type(numpy.float64), )
paddle.Tensor.astype(Tensor([3],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([3],"float64"), type(numpy.int32), )
paddle.Tensor.astype(Tensor([3],"int32"), type(numpy.int64), )
paddle.Tensor.astype(Tensor([3],"int64"), type(int), )
paddle.Tensor.astype(Tensor([3],"int64"), type(numpy.float32), )
paddle.Tensor.astype(Tensor([3],"int64"), type(numpy.float64), )
paddle.Tensor.astype(Tensor([4, 1, 5],"float64"), "float32", )
paddle.Tensor.astype(Tensor([4, 12],"float64"), "float32", )
paddle.Tensor.astype(Tensor([4, 16],"float64"), "float32", )
paddle.Tensor.astype(Tensor([4, 2],"float32"), Dtype(float32), )
paddle.Tensor.astype(Tensor([4, 2],"float32"), type(numpy.float64), )
paddle.Tensor.astype(Tensor([4, 2],"float64"), type(numpy.int32), )
paddle.Tensor.astype(Tensor([4, 2],"int32"), type(numpy.int64), )
paddle.Tensor.astype(Tensor([4, 2],"int64"), type(numpy.float32), )
paddle.Tensor.astype(Tensor([4, 4, 4],"float32"), "float32", )
paddle.Tensor.astype(Tensor([4, 4],"float64"), Dtype(float64), )
paddle.Tensor.astype(Tensor([4, 6],"float64"), "float32", )
paddle.Tensor.astype(Tensor([4],"float32"), Dtype(float32), )
paddle.Tensor.astype(Tensor([4],"int64"), type(int), )
paddle.Tensor.astype(Tensor([5, 3],"float32"), type(numpy.float64), )
paddle.Tensor.astype(Tensor([5, 3],"float64"), type(numpy.int32), )
paddle.Tensor.astype(Tensor([5, 3],"int32"), type(numpy.int64), )
paddle.Tensor.astype(Tensor([5, 3],"int64"), type(numpy.float32), )
paddle.Tensor.astype(Tensor([6, 1, 5],"float64"), "float32", )
paddle.Tensor.astype(Tensor([],"bool"), Dtype(float64), )
paddle.Tensor.astype(Tensor([],"float32"), Dtype(float32), )
paddle.Tensor.astype(Tensor([],"float32"), Dtype(float64), )
paddle.Tensor.atanh(Tensor([1, 2, 3],"float32"), )
paddle.Tensor.atanh(Tensor([1, 2, 3],"float64"), )
paddle.Tensor.atanh(Tensor([2, 3],"float32"), )
paddle.Tensor.atanh(Tensor([2, 3],"float64"), )
paddle.Tensor.atanh(Tensor([3],"float32"), )
paddle.Tensor.atanh(Tensor([3],"float64"), )
paddle.Tensor.cast(Tensor([10, 2, 3],"float32"), Dtype(float64), )
paddle.Tensor.cast(Tensor([14, 2, 4, 2, 3],"float32"), Dtype(float64), )
paddle.Tensor.cast(Tensor([14, 2, 4, 3],"float32"), Dtype(float64), )
paddle.Tensor.cast(Tensor([14, 2, 4, 4],"float32"), Dtype(float64), )
paddle.Tensor.cast(Tensor([1],"float64"), "int32", )
paddle.Tensor.cast(Tensor([1],"int32"), "int32", )
paddle.Tensor.cast(Tensor([2],"float32"), "int32", )
paddle.Tensor.cast(Tensor([2],"float64"), "int32", )
paddle.Tensor.cast(Tensor([2],"int32"), "int32", )
paddle.Tensor.cast(Tensor([3],"float64"), "int32", )
paddle.Tensor.cholesky_solve(x=Tensor([4, 1],"float32"), y=Tensor([4, 4],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 1],"float64"), y=Tensor([4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 3],"float64"), y=Tensor([4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.Tensor.clip(Tensor([2, 1, 2],"float32"), max=0, )
paddle.Tensor.clip(Tensor([2, 1, 2],"float32"), min=0, )
paddle.Tensor.clip(Tensor([2, 2],"float32"), max=0, )
paddle.Tensor.clip(Tensor([2, 2],"float32"), min=0, )
paddle.Tensor.clip(Tensor([2, 2],"int32"), Tensor([1],"int32"), Tensor([1],"int32"), )
paddle.Tensor.clip(Tensor([2, 2],"int64"), 1, 2, )
paddle.Tensor.clip(Tensor([3],"float64"), max=0, )
paddle.Tensor.clip(Tensor([3],"float64"), min=0, )
paddle.Tensor.clone(Tensor([12],"float32"), )
paddle.Tensor.clone(Tensor([3, 3, 4, 4],"float64"), )
paddle.Tensor.clone(Tensor([3, 3, 4],"float64"), )
paddle.Tensor.clone(Tensor([3, 3],"float64"), )
paddle.Tensor.clone(Tensor([36],"float32"), )
paddle.Tensor.clone(Tensor([3],"float32"), )
paddle.Tensor.clone(Tensor([3],"float64"), )
paddle.Tensor.clone(Tensor([6],"float32"), )
paddle.Tensor.conj(Tensor([12, 4],"float64"), )
paddle.Tensor.conj(Tensor([2, 4],"float32"), )
paddle.Tensor.conj(Tensor([2, 4],"float64"), )
paddle.Tensor.cumprod(Tensor([3],"float32"), -1, )
paddle.Tensor.cumprod(Tensor([3],"float64"), -1, )
paddle.Tensor.cumsum(Tensor([3],"float32"), -1, )
paddle.Tensor.cumsum(Tensor([3],"float64"), -1, )
paddle.Tensor.detach(Tensor([2, 2],"float64"), )
paddle.Tensor.detach(Tensor([2, 3, 3, 2],"float64"), )
paddle.Tensor.detach(Tensor([2, 3],"float64"), )
paddle.Tensor.detach(Tensor([2],"float32"), )
paddle.Tensor.detach(Tensor([2],"float64"), )
paddle.Tensor.detach(Tensor([3, 2],"float64"), )
paddle.Tensor.detach(Tensor([3, 3],"float64"), )
paddle.Tensor.detach(Tensor([3, 4],"float64"), )
paddle.Tensor.detach(Tensor([4, 3],"float64"), )
paddle.Tensor.detach(Tensor([4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([10, 4],"float64"), axis=0, prepend=Tensor([4, 4],"float64"), append=Tensor([4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([100],"float64"), )
paddle.Tensor.diff(x=Tensor([10],"float64"), prepend=Tensor([4],"float64"), )
paddle.Tensor.diff(x=Tensor([10],"float64"), prepend=Tensor([4],"float64"), append=Tensor([4],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 4],"float64"), axis=-2, )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 4],"float64"), axis=2, )
paddle.Tensor.diff(x=Tensor([4, 4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([4],"float32"), )
paddle.Tensor.diff(x=Tensor([4],"float64"), )
paddle.Tensor.diff(x=Tensor([4],"int32"), )
paddle.Tensor.diff(x=Tensor([4],"int64"), )
paddle.Tensor.digamma(Tensor([2, 3],"float32"), )
paddle.Tensor.digamma(Tensor([2],"float32"), )
paddle.Tensor.digamma(Tensor([],"float32"), )
paddle.Tensor.dim(Tensor([1, 2, 3],"float32"), )
paddle.Tensor.dim(Tensor([1, 2, 3],"float64"), )
paddle.Tensor.dim(Tensor([1, 2],"float32"), )
paddle.Tensor.dim(Tensor([1, 3, 2],"float32"), )
paddle.Tensor.dim(Tensor([1, 3, 2],"float64"), )
paddle.Tensor.dim(Tensor([112],"int64"), )
paddle.Tensor.dim(Tensor([2, 1, 2],"float32"), )
paddle.Tensor.dim(Tensor([2, 112],"int64"), )
paddle.Tensor.dim(Tensor([2, 2, 2],"float32"), )
paddle.Tensor.dim(Tensor([2, 2],"float32"), )
paddle.Tensor.dim(Tensor([2, 3, 2],"float64"), )
paddle.Tensor.dim(Tensor([2, 3],"float32"), )
paddle.Tensor.dim(Tensor([2, 3],"float64"), )
paddle.Tensor.dim(Tensor([20],"int64"), )
paddle.Tensor.dim(Tensor([2],"float32"), )
paddle.Tensor.dim(Tensor([3, 1, 2],"float64"), )
paddle.Tensor.dim(Tensor([3, 2],"float32"), )
paddle.Tensor.dim(Tensor([3, 2],"float64"), )
paddle.Tensor.dim(Tensor([3, 4, 5],"float32"), )
paddle.Tensor.dim(Tensor([3, 4],"float32"), )
paddle.Tensor.dim(Tensor([3],"float32"), )
paddle.Tensor.dim(Tensor([3],"float64"), )
paddle.Tensor.dim(Tensor([3],"int64"), )
paddle.Tensor.dim(Tensor([4, 3, 3, 3],"float32"), )
paddle.Tensor.dim(Tensor([4, 3, 3],"float32"), )
paddle.Tensor.dim(Tensor([4],"float32"), )
paddle.Tensor.dim(Tensor([4],"float64"), )
paddle.Tensor.dim(Tensor([],"int64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2, 3, 5, 4],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2, 3, 5],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2, 3],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4],"float32"), )
paddle.Tensor.erfinv(x=Tensor([4],"float64"), )
paddle.Tensor.exp(Tensor([2, 3, 2],"float64"), )
paddle.Tensor.exp(Tensor([2, 3],"float32"), )
paddle.Tensor.exp(Tensor([2, 3],"float64"), )
paddle.Tensor.exp(Tensor([3],"float32"), )
paddle.Tensor.exp(Tensor([3],"float64"), )
paddle.Tensor.exp(Tensor([4],"float32"), )
paddle.Tensor.exp(Tensor([],"float32"), )
paddle.Tensor.exponential_(Tensor([2, 2],"float64"), 1, )
paddle.Tensor.exponential_(Tensor([2],"float64"), 1, )
paddle.Tensor.fill_(x=Tensor([10, 16, 16],"float64"), value=41.2, )
paddle.Tensor.fill_(x=Tensor([16, 16],"float64"), value=41.2, )
paddle.Tensor.fill_(x=Tensor([16],"float64"), value=4.2, )
paddle.Tensor.fill_(x=Tensor([4, 4],"float32"), value=4, )
paddle.Tensor.fill_(x=Tensor([4, 4],"float64"), value=4, )
paddle.Tensor.fill_(x=Tensor([4, 4],"int32"), value=4, )
paddle.Tensor.fill_(x=Tensor([4, 4],"int64"), value=4, )
paddle.Tensor.fill_diagonal_(Tensor([2, 2, 2],"float32"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([2, 2, 2],"float64"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([2, 2, 2],"int32"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([2, 2, 2],"int64"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float32"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float32"), 4, 1, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float64"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float64"), 4, 1, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int32"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int32"), 4, 1, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int64"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int64"), 4, 1, False, )
paddle.Tensor.fill_diagonal_(Tensor([5, 3],"float32"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([5, 3],"float64"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([5, 3],"int32"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([5, 3],"int64"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([7, 3],"float32"), 4, 0, True, )
paddle.Tensor.fill_diagonal_(Tensor([7, 3],"float64"), 4, 0, True, )
paddle.Tensor.fill_diagonal_(Tensor([7, 3],"int32"), 4, 0, True, )
paddle.Tensor.fill_diagonal_(Tensor([7, 3],"int64"), 4, 0, True, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 4],"float32"), Tensor([4, 2],"float32"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 4],"float64"), Tensor([4, 2],"float64"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 4],"int32"), Tensor([4, 2],"int32"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 4],"int64"), Tensor([4, 2],"int64"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 7],"float32"), Tensor([2, 4],"float32"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 7],"float64"), Tensor([2, 4],"float64"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 7],"int32"), Tensor([2, 4],"int32"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 7],"int64"), Tensor([2, 4],"int64"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"float32"), Tensor([1],"float32"), -2, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"float32"), Tensor([2],"float32"), -1, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"float32"), Tensor([2],"float32"), 1, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"float32"), Tensor([3],"float32"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"float64"), Tensor([1],"float64"), -2, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"float64"), Tensor([2],"float64"), -1, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"float64"), Tensor([2],"float64"), 1, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"float64"), Tensor([3],"float64"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"int32"), Tensor([1],"int32"), -2, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"int32"), Tensor([2],"int32"), -1, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"int32"), Tensor([2],"int32"), 1, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"int32"), Tensor([3],"int32"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"int64"), Tensor([1],"int64"), -2, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"int64"), Tensor([2],"int64"), -1, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"int64"), Tensor([2],"int64"), 1, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"int64"), Tensor([3],"int64"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([5, 3],"float32"), Tensor([3],"float32"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([5, 3],"float64"), Tensor([3],"float64"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([5, 3],"int32"), Tensor([3],"int32"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([5, 3],"int64"), Tensor([3],"int64"), 0, 0, 1, )
paddle.Tensor.flatten(Tensor([2, 2],"float64"), )
paddle.Tensor.flatten(Tensor([2, 3, 4],"float64"), )
paddle.Tensor.flatten(Tensor([2, 3],"float64"), )
paddle.Tensor.flatten(Tensor([3, 2],"float64"), )
paddle.Tensor.flatten(Tensor([3, 3],"float64"), )
paddle.Tensor.flatten(Tensor([3, 4],"float64"), )
paddle.Tensor.flatten(Tensor([4, 4],"float64"), )
paddle.Tensor.gcd(x=Tensor([1],"int32"), y=Tensor([1],"int32"), )
paddle.Tensor.gcd(x=Tensor([1],"int64"), y=Tensor([1],"int64"), )
paddle.Tensor.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([4, 5],"int32"), y=Tensor([4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([4, 4],"float32"), y=Tensor([4, 4],"float32"), )
paddle.Tensor.inner(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([4],"float64"), y=Tensor([4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
paddle.Tensor.inverse(Tensor([4, 2, 4, 4],"float64"), )
paddle.Tensor.inverse(Tensor([4, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 2],"int64"), )
paddle.Tensor.is_complex(Tensor([3],"complex128"), )
paddle.Tensor.is_complex(Tensor([3],"complex64"), )
paddle.Tensor.is_complex(Tensor([4],"float32"), )
paddle.Tensor.isclose(x=Tensor([2],"float32"), y=Tensor([2],"float32"), )
paddle.Tensor.isclose(x=Tensor([2],"float64"), y=Tensor([2],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 4, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([6],"float64"), y=Tensor([6],"float64"), )
paddle.Tensor.isnan(Tensor([2160],"float64"), )
paddle.Tensor.isnan(Tensor([3, 3, 3],"float32"), )
paddle.Tensor.isnan(Tensor([3, 3, 3],"float64"), )
paddle.Tensor.isnan(Tensor([3, 6, 3, 4, 2, 5],"float64"), )
paddle.Tensor.item(Tensor([1],"float64"), 0, )
paddle.Tensor.item(Tensor([1],"int32"), 0, )
paddle.Tensor.item(Tensor([1],"int64"), 0, )
paddle.Tensor.item(Tensor([2, 1, 1],"int32"), 0, )
paddle.Tensor.item(Tensor([2, 1, 1],"int64"), 0, )
paddle.Tensor.item(Tensor([],"float64"), )
paddle.Tensor.item(Tensor([],"int64"), )
paddle.Tensor.item(Tensor([],"int64"), 0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.Tensor.lerp(x=Tensor([4, 5],"float64"), y=Tensor([4, 5],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4],"float32"), y=Tensor([4],"float32"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4],"float64"), y=Tensor([4],"float64"), weight=0.5, )
paddle.Tensor.lgamma(Tensor([2, 3],"float32"), )
paddle.Tensor.lgamma(Tensor([2],"float32"), )
paddle.Tensor.lgamma(Tensor([3],"float32"), )
paddle.Tensor.lgamma(Tensor([],"float32"), )
paddle.Tensor.log(Tensor([1, 2],"float32"), )
paddle.Tensor.log(Tensor([2, 3, 2],"float64"), )
paddle.Tensor.log(Tensor([2, 3],"float32"), )
paddle.Tensor.log(Tensor([2, 3],"float64"), )
paddle.Tensor.log(Tensor([2],"float32"), )
paddle.Tensor.log(Tensor([3],"float32"), )
paddle.Tensor.log(Tensor([3],"float64"), )
paddle.Tensor.log(Tensor([4],"float32"), )
paddle.Tensor.log(Tensor([],"float32"), )
paddle.Tensor.log1p(Tensor([2, 3, 2],"float64"), )
paddle.Tensor.log1p(Tensor([2, 3],"float32"), )
paddle.Tensor.log1p(Tensor([2, 3],"float64"), )
paddle.Tensor.log1p(Tensor([3],"float32"), )
paddle.Tensor.log1p(Tensor([3],"float64"), )
paddle.Tensor.logical_not(Tensor([2160],"bool"), )
paddle.Tensor.logical_not(Tensor([3, 3, 3],"bool"), )
paddle.Tensor.logical_not(Tensor([3, 6, 3, 4, 2, 5],"bool"), )
paddle.Tensor.logit(x=Tensor([4, 2],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 3, 2, 5],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 3, 2, 5],"float64"), eps=0.2, )
paddle.Tensor.logit(x=Tensor([4, 3, 2],"float64"), )
paddle.Tensor.logit(x=Tensor([4],"float32"), )
paddle.Tensor.logit(x=Tensor([4],"float64"), )
paddle.Tensor.lu(Tensor([3, 3, 3],"float64"), )
paddle.Tensor.lu(Tensor([3, 3],"float32"), )
paddle.Tensor.lu(Tensor([3, 3],"float64"), )
paddle.Tensor.lu(Tensor([4, 3, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([1, 9],"float32"), Tensor([9, 1],"float32"), )
paddle.Tensor.matmul(Tensor([1, 9],"float64"), Tensor([9, 1],"float64"), )
paddle.Tensor.matmul(Tensor([2, 56],"float64"), Tensor([56, 7],"float64"), )
paddle.Tensor.matmul(Tensor([2, 56],"float64"), Tensor([56, 8],"float64"), )
paddle.Tensor.matmul(Tensor([20, 2],"float64"), Tensor([2, 20],"float64"), )
paddle.Tensor.matmul(Tensor([36, 4],"float64"), Tensor([4, 48],"float64"), )
paddle.Tensor.matmul(Tensor([4, 120],"float64"), Tensor([120, 8],"float64"), )
paddle.Tensor.matmul(Tensor([5, 4],"float64"), Tensor([4, 8],"float64"), )
paddle.Tensor.matmul(Tensor([6, 12],"float64"), Tensor([12, 12],"float64"), )
paddle.Tensor.matmul(Tensor([6, 8],"float64"), Tensor([8, 56],"float64"), )
paddle.Tensor.matmul(Tensor([72, 1],"float64"), Tensor([1, 144],"float64"), )
paddle.Tensor.matmul(Tensor([8, 6],"float64"), Tensor([6, 56],"float64"), )
paddle.Tensor.matmul(Tensor([96, 1],"float64"), Tensor([1, 192],"float64"), )
paddle.Tensor.matmul(Tensor([96, 1],"float64"), Tensor([1, 96],"float64"), )
paddle.Tensor.max(Tensor([2, 3, 2],"float64"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3],"float32"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 3],"float64"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([2],"int64"), )
paddle.Tensor.mode(Tensor([3, 2, 3],"float64"), )
paddle.Tensor.mode(Tensor([3, 2, 3],"float64"), axis=1, keepdim=False, )
paddle.Tensor.mode(Tensor([3, 2, 3],"float64"), axis=2, keepdim=True, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2],"complex128"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([4, 2],"complex64"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([4, 2],"float32"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([4, 2],"float64"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([4, 2],"int32"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([4, 2],"int64"), source=0, destination=1, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 3, 3],"float32"), )
paddle.Tensor.nansum(Tensor([3, 3, 3],"float64"), )
paddle.Tensor.nansum(Tensor([3, 3, 3],"float64"), axis=-1, )
paddle.Tensor.nansum(Tensor([3, 3, 3],"float64"), axis=0, keepdim=True, )
paddle.Tensor.outer(x=Tensor([1, 4],"float32"), y=Tensor([1, 4],"float32"), )
paddle.Tensor.outer(x=Tensor([1, 4],"float64"), y=Tensor([1, 4],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 1],"float64"), y=Tensor([4, 1],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([4, 2, 3],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 2, 5, 2],"float64"), y=Tensor([2, 3, 4, 4],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 2],"float64"), y=Tensor([2, 3, 4],"float64"), )
paddle.Tensor.outer(x=Tensor([4],"float64"), y=Tensor([4],"float64"), )
paddle.Tensor.pow(Tensor([1, 2],"float32"), Tensor([],"float32"), )
paddle.Tensor.pow(Tensor([1],"float32"), 2, )
paddle.Tensor.pow(Tensor([2, 1],"float32"), 2, )
paddle.Tensor.pow(Tensor([2, 2],"float32"), 2, )
paddle.Tensor.pow(Tensor([2, 3],"float32"), Tensor([1],"float32"), )
paddle.Tensor.pow(Tensor([2],"float32"), 2, )
paddle.Tensor.pow(Tensor([2],"float32"), Tensor([],"float32"), )
paddle.Tensor.pow(Tensor([4],"float32"), Tensor([],"float32"), )
paddle.Tensor.pow(Tensor([],"float32"), 2, )
paddle.Tensor.quantile(Tensor([3, 3, 3],"float64"), q=0.5, axis=0, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 5],"float64"), q=0.5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 5],"float64"), q=list[0.25,0.5,0.75,], axis=3, keepdim=False, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 5],"float64"), q=tuple(0.11,0.5,0.73,0.9,), axis=4, keepdim=False, )
paddle.Tensor.rad2deg(x=Tensor([10],"float32"), )
paddle.Tensor.rad2deg(x=Tensor([10],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([10],"int32"), )
paddle.Tensor.rad2deg(x=Tensor([10],"int64"), )
paddle.Tensor.rad2deg(x=Tensor([1],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([4, 4, 4],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([4, 4],"float64"), )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 5],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 5],"int32"), repeats=2, axis=3, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4],"float32"), repeats=3, )
paddle.Tensor.repeat_interleave(x=Tensor([4],"float64"), repeats=3, )
paddle.Tensor.reshape(Tensor([1, 18],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([1, 1],"float32"), list[], )
paddle.Tensor.reshape(Tensor([1, 1],"float64"), list[], )
paddle.Tensor.reshape(Tensor([1, 2, 3],"float32"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([1, 2, 3],"float32"), tuple(1,3,2,), )
paddle.Tensor.reshape(Tensor([1, 2, 3],"float64"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([1, 2, 3],"float64"), tuple(1,3,2,), )
paddle.Tensor.reshape(Tensor([1, 2, 3],"float64"), tuple(3,1,2,), )
paddle.Tensor.reshape(Tensor([1, 2],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([1, 3, 2],"float32"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([1, 3, 2],"float64"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([1, 32],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([1, 4],"float32"), tuple(-1,1,), )
paddle.Tensor.reshape(Tensor([1, 4],"float32"), tuple(1,-1,), )
paddle.Tensor.reshape(Tensor([1, 4],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([1, 4],"float64"), tuple(-1,1,), )
paddle.Tensor.reshape(Tensor([1, 4],"float64"), tuple(1,-1,), )
paddle.Tensor.reshape(Tensor([1, 8],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([1, 9],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([1024],"float64"), list[32,32,], )
paddle.Tensor.reshape(Tensor([10],"float64"), list[1,-1,1,1,], )
paddle.Tensor.reshape(Tensor([11],"float32"), tuple(-1,1,1,), )
paddle.Tensor.reshape(Tensor([11],"float32"), tuple(-1,1,1,1,), )
paddle.Tensor.reshape(Tensor([11],"float64"), tuple(-1,1,), )
paddle.Tensor.reshape(Tensor([1296],"float64"), list[36,36,], )
paddle.Tensor.reshape(Tensor([12],"float64"), list[2,3,2,], )
paddle.Tensor.reshape(Tensor([12],"float64"), list[3,4,], )
paddle.Tensor.reshape(Tensor([12],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([144],"float64"), list[12,12,], )
paddle.Tensor.reshape(Tensor([144],"float64"), list[8,18,], )
paddle.Tensor.reshape(Tensor([15, 10],"float64"), list[5,3,2,5,], )
paddle.Tensor.reshape(Tensor([162],"float64"), list[18,9,], )
paddle.Tensor.reshape(Tensor([162],"float64"), list[9,18,], )
paddle.Tensor.reshape(Tensor([16],"float32"), list[1,-1,1,1,], )
paddle.Tensor.reshape(Tensor([16],"float64"), list[4,4,], )
paddle.Tensor.reshape(Tensor([18, 1],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([18],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([1],"float32"), list[1,-1,1,1,1,], )
paddle.Tensor.reshape(Tensor([1],"float32"), list[1,-1,1,1,], )
paddle.Tensor.reshape(Tensor([1],"float32"), list[1,-1,], )
paddle.Tensor.reshape(Tensor([1],"float64"), list[1,-1,1,1,1,], )
paddle.Tensor.reshape(Tensor([1],"float64"), list[1,-1,1,1,], )
paddle.Tensor.reshape(Tensor([1],"float64"), list[1,-1,], )
paddle.Tensor.reshape(Tensor([1],"int32"), list[1,-1,], )
paddle.Tensor.reshape(Tensor([1],"int64"), list[1,-1,], )
paddle.Tensor.reshape(Tensor([2, 1, 4, 5],"float64"), list[2,20,], )
paddle.Tensor.reshape(Tensor([2, 144],"float64"), list[2,12,12,], )
paddle.Tensor.reshape(Tensor([2, 1],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([2, 2],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([2, 3, 3, 2],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([2, 3, 3, 4],"float64"), list[6,12,], )
paddle.Tensor.reshape(Tensor([2, 3, 3, 4],"float64"), list[72,1,], )
paddle.Tensor.reshape(Tensor([2, 3, 4, 2],"float64"), list[6,8,], )
paddle.Tensor.reshape(Tensor([2, 3, 4, 4],"float64"), list[1,96,], )
paddle.Tensor.reshape(Tensor([2, 3, 4, 4],"float64"), list[96,1,], )
paddle.Tensor.reshape(Tensor([2, 3, 4, 4],"float64"), tuple(1,-1,), )
paddle.Tensor.reshape(Tensor([2, 3, 4],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([2, 3, 4],"float64"), tuple(1,-1,), )
paddle.Tensor.reshape(Tensor([2, 3, 4],"float64"), tuple(2,-1,), )
paddle.Tensor.reshape(Tensor([2, 3, 8, 7],"float64"), list[6,56,], )
paddle.Tensor.reshape(Tensor([2, 3],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([2, 4, 5],"float64"), list[2,4,1,5,], )
paddle.Tensor.reshape(Tensor([2, 4],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([2, 5, 3, 4],"float64"), tuple(-1,4,), )
paddle.Tensor.reshape(Tensor([2, 5, 4],"float64"), tuple(-1,4,), )
paddle.Tensor.reshape(Tensor([2, 7, 4, 2],"float64"), list[2,56,], )
paddle.Tensor.reshape(Tensor([2, 7],"float64"), list[2,7,], )
paddle.Tensor.reshape(Tensor([2, 8],"float64"), list[2,8,], )
paddle.Tensor.reshape(Tensor([20, 20],"float64"), list[4,5,4,5,], )
paddle.Tensor.reshape(Tensor([24],"float64"), list[2,3,4,], )
paddle.Tensor.reshape(Tensor([288],"float64"), list[16,18,], )
paddle.Tensor.reshape(Tensor([2],"float32"), list[1,-1,1,1,1,], )
paddle.Tensor.reshape(Tensor([2],"float32"), list[1,-1,1,1,], )
paddle.Tensor.reshape(Tensor([2],"float32"), list[1,-1,], )
paddle.Tensor.reshape(Tensor([2],"float32"), list[1,1,1,-1,], )
paddle.Tensor.reshape(Tensor([2],"float32"), list[1,1,1,1,-1,], )
paddle.Tensor.reshape(Tensor([2],"float32"), list[2,], )
paddle.Tensor.reshape(Tensor([2],"float32"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([2],"float64"), list[1,-1,1,1,1,], )
paddle.Tensor.reshape(Tensor([2],"float64"), list[1,-1,1,1,], )
paddle.Tensor.reshape(Tensor([2],"float64"), list[1,-1,], )
paddle.Tensor.reshape(Tensor([2],"float64"), list[1,1,1,-1,], )
paddle.Tensor.reshape(Tensor([2],"float64"), list[1,1,1,1,-1,], )
paddle.Tensor.reshape(Tensor([2],"float64"), list[2,], )
paddle.Tensor.reshape(Tensor([2],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([2],"int32"), list[1,-1,], )
paddle.Tensor.reshape(Tensor([2],"int64"), list[1,-1,], )
paddle.Tensor.reshape(Tensor([3, 1, 2],"float64"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([3, 2, 4],"float64"), tuple(-1,4,), )
paddle.Tensor.reshape(Tensor([3, 2, 5, 4],"float64"), tuple(-1,4,), )
paddle.Tensor.reshape(Tensor([3, 2],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([3, 3, 2],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([3, 30],"float64"), list[3,3,2,5,], )
paddle.Tensor.reshape(Tensor([3, 36],"float64"), list[3,6,6,], )
paddle.Tensor.reshape(Tensor([3, 3],"float32"), list[1,9,], )
paddle.Tensor.reshape(Tensor([3, 3],"float32"), list[9,1,], )
paddle.Tensor.reshape(Tensor([3, 3],"float64"), list[1,9,], )
paddle.Tensor.reshape(Tensor([3, 3],"float64"), list[9,1,], )
paddle.Tensor.reshape(Tensor([3, 3],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([3, 3],"float64"), tuple(3,-1,), )
paddle.Tensor.reshape(Tensor([3, 4, 3, 3],"float32"), list[3,-1,], )
paddle.Tensor.reshape(Tensor([3, 4, 3, 4],"float64"), list[1,144,], )
paddle.Tensor.reshape(Tensor([3, 4, 3, 4],"float64"), list[12,12,], )
paddle.Tensor.reshape(Tensor([3, 4, 3, 4],"float64"), list[36,4,], )
paddle.Tensor.reshape(Tensor([3, 4, 3],"float32"), list[3,-1,], )
paddle.Tensor.reshape(Tensor([3, 4, 4, 4],"float64"), list[1,192,], )
paddle.Tensor.reshape(Tensor([3, 4],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([3, 4],"float64"), tuple(-1,4,), )
paddle.Tensor.reshape(Tensor([3, 5],"float64"), list[3,5,], )
paddle.Tensor.reshape(Tensor([3, 6, 3, 1, 2, 5],"float64"), list[3,6,3,1,2,5,], )
paddle.Tensor.reshape(Tensor([3, 6],"float32"), list[3,-1,], )
paddle.Tensor.reshape(Tensor([3, 6],"float64"), list[3,3,2,], )
paddle.Tensor.reshape(Tensor([30, 30],"float64"), list[2,5,3,3,2,5,], )
paddle.Tensor.reshape(Tensor([32, 1],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([324],"float64"), list[18,18,], )
paddle.Tensor.reshape(Tensor([32],"float64"), list[4,8,], )
paddle.Tensor.reshape(Tensor([32],"float64"), list[8,4,], )
paddle.Tensor.reshape(Tensor([32],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([36, 48],"float64"), list[3,4,3,4,3,4,], )
paddle.Tensor.reshape(Tensor([36],"float64"), list[6,6,], )
paddle.Tensor.reshape(Tensor([36],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([3],"float32"), list[1,-1,1,1,1,], )
paddle.Tensor.reshape(Tensor([3],"float32"), list[1,-1,1,1,], )
paddle.Tensor.reshape(Tensor([3],"float32"), list[1,-1,], )
paddle.Tensor.reshape(Tensor([3],"float64"), list[1,-1,1,1,1,], )
paddle.Tensor.reshape(Tensor([3],"float64"), list[1,-1,1,1,], )
paddle.Tensor.reshape(Tensor([3],"float64"), list[1,-1,], )
paddle.Tensor.reshape(Tensor([3],"float64"), list[3,], )
paddle.Tensor.reshape(Tensor([3],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([3],"int32"), list[1,-1,], )
paddle.Tensor.reshape(Tensor([3],"int64"), list[1,-1,], )
paddle.Tensor.reshape(Tensor([4, 1, 8],"float64"), list[4,8,], )
paddle.Tensor.reshape(Tensor([4, 1],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([4, 1],"float64"), tuple(-1,1,), )
paddle.Tensor.reshape(Tensor([4, 1],"float64"), tuple(1,-1,), )
paddle.Tensor.reshape(Tensor([4, 2, 2, 3],"float64"), list[8,6,], )
paddle.Tensor.reshape(Tensor([4, 2, 3, 5, 8],"float64"), list[120,8,], )
paddle.Tensor.reshape(Tensor([4, 2, 3],"float64"), tuple(-1,1,), )
paddle.Tensor.reshape(Tensor([4, 2, 3],"float64"), tuple(1,-1,), )
paddle.Tensor.reshape(Tensor([4, 2, 5, 2],"float64"), tuple(-1,1,), )
paddle.Tensor.reshape(Tensor([4, 2, 8, 7],"float64"), list[8,56,], )
paddle.Tensor.reshape(Tensor([4, 2],"float64"), tuple(-1,1,), )
paddle.Tensor.reshape(Tensor([4, 3],"float64"), tuple(4,-1,), )
paddle.Tensor.reshape(Tensor([4, 4, 2, 3, 5],"float64"), list[4,120,], )
paddle.Tensor.reshape(Tensor([4, 4, 3, 4],"float64"), list[4,48,], )
paddle.Tensor.reshape(Tensor([4, 4],"float32"), list[4,4,], )
paddle.Tensor.reshape(Tensor([4, 4],"float32"), tuple(-1,4,), )
paddle.Tensor.reshape(Tensor([4, 4],"float64"), list[4,4,], )
paddle.Tensor.reshape(Tensor([4, 4],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([4, 4],"float64"), tuple(-1,4,), )
paddle.Tensor.reshape(Tensor([4, 5, 2, 1],"float64"), list[20,2,], )
paddle.Tensor.reshape(Tensor([4, 5],"float64"), list[4,1,5,], )
paddle.Tensor.reshape(Tensor([4, 8],"float64"), list[4,8,], )
paddle.Tensor.reshape(Tensor([4, 9],"float64"), list[4,3,3,], )
paddle.Tensor.reshape(Tensor([4],"float32"), list[1,-1,1,1,], )
paddle.Tensor.reshape(Tensor([4],"float32"), list[1,2,2,], )
paddle.Tensor.reshape(Tensor([4],"float32"), list[2,2,], )
paddle.Tensor.reshape(Tensor([4],"float32"), list[4,], )
paddle.Tensor.reshape(Tensor([4],"float64"), list[2,2,], )
paddle.Tensor.reshape(Tensor([4],"float64"), tuple(-1,1,), )
paddle.Tensor.reshape(Tensor([4],"float64"), tuple(-1,4,), )
paddle.Tensor.reshape(Tensor([4],"float64"), tuple(1,-1,), )
paddle.Tensor.reshape(Tensor([4],"float64"), tuple(4,-1,), )
paddle.Tensor.reshape(Tensor([5, 3, 4],"float64"), tuple(-1,4,), )
paddle.Tensor.reshape(Tensor([5, 4, 1],"float64"), list[5,4,], )
paddle.Tensor.reshape(Tensor([5, 4],"float64"), tuple(-1,4,), )
paddle.Tensor.reshape(Tensor([5, 8],"float64"), list[5,8,], )
paddle.Tensor.reshape(Tensor([5184],"float64"), list[72,72,], )
paddle.Tensor.reshape(Tensor([6, 12],"float64"), list[2,3,3,4,], )
paddle.Tensor.reshape(Tensor([6, 56],"float64"), list[2,3,8,7,], )
paddle.Tensor.reshape(Tensor([6],"float32"), list[1,-1,1,1,1,], )
paddle.Tensor.reshape(Tensor([6],"float32"), list[1,-1,1,1,], )
paddle.Tensor.reshape(Tensor([6],"float32"), list[1,2,3,], )
paddle.Tensor.reshape(Tensor([6],"float32"), list[1,3,2,], )
paddle.Tensor.reshape(Tensor([6],"float32"), list[2,3,], )
paddle.Tensor.reshape(Tensor([6],"float32"), list[3,2,], )
paddle.Tensor.reshape(Tensor([6],"float64"), list[1,-1,1,1,1,], )
paddle.Tensor.reshape(Tensor([6],"float64"), list[1,-1,1,1,], )
paddle.Tensor.reshape(Tensor([6],"float64"), list[1,2,3,], )
paddle.Tensor.reshape(Tensor([6],"float64"), list[1,3,2,], )
paddle.Tensor.reshape(Tensor([6],"float64"), list[2,3,], )
paddle.Tensor.reshape(Tensor([6],"float64"), list[3,1,2,], )
paddle.Tensor.reshape(Tensor([6],"float64"), list[3,2,], )
paddle.Tensor.reshape(Tensor([6],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([7, 4, 2, 7],"float64"), list[56,7,], )
paddle.Tensor.reshape(Tensor([7, 4, 2, 8],"float64"), list[56,8,], )
paddle.Tensor.reshape(Tensor([72, 144],"float64"), list[2,3,3,4,3,4,3,4,], )
paddle.Tensor.reshape(Tensor([7],"float64"), list[1,1,1,-1,], )
paddle.Tensor.reshape(Tensor([8, 1],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([8, 56],"float64"), list[4,2,8,7,], )
paddle.Tensor.reshape(Tensor([8],"float32"), list[2,4,], )
paddle.Tensor.reshape(Tensor([8],"float32"), list[4,2,], )
paddle.Tensor.reshape(Tensor([8],"float64"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([96, 192],"float64"), list[2,3,4,4,3,4,4,4,], )
paddle.Tensor.reshape(Tensor([96, 96],"float64"), list[2,3,4,4,2,3,4,4,], )
paddle.Tensor.reshape(Tensor([9],"float64"), list[3,3,], )
paddle.Tensor.reshape(Tensor([],"float32"), tuple(-1,), )
paddle.Tensor.reshape(Tensor([],"float64"), tuple(-1,), )
paddle.Tensor.rot90(x=Tensor([2, 2],"float64"), k=-4, )
paddle.Tensor.rot90(x=Tensor([3, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.rot90(x=Tensor([4, 4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4],"float32"), )
paddle.Tensor.rot90(x=Tensor([4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4],"float64"), k=-1, )
paddle.Tensor.rot90(x=Tensor([4, 4],"float64"), k=4, )
paddle.Tensor.rot90(x=Tensor([4, 4],"int32"), )
paddle.Tensor.rot90(x=Tensor([4, 4],"int64"), )
paddle.Tensor.squeeze(Tensor([1, 4, 4],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 4],"float64"), 0, )
paddle.Tensor.squeeze(Tensor([4, 1, 4],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([4, 4],"float32"), )
paddle.Tensor.squeeze(Tensor([4, 4],"float64"), )
paddle.Tensor.sum(Tensor([1, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 3, 4, 4, 1, 1],"float32"), )
paddle.Tensor.sum(Tensor([1, 9, 4, 4, 1, 1],"float32"), )
paddle.Tensor.sum(Tensor([10, 2, 1, 2],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([10, 2, 2],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([10, 2, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([10, 3],"float64"), list[0,-1,], )
paddle.Tensor.sum(Tensor([14, 2, 4, 2, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([14, 2, 4, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([14, 2, 4, 4],"float64"), 0, )
paddle.Tensor.sum(Tensor([2, 1, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([2, 1, 2],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 1],"float32"), list[-2,-1,], )
paddle.Tensor.sum(Tensor([2, 2, 1, 2, 1, 1, 2, 3, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 2, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([2, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([2, 2],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 2],"float32"), list[-2,-1,], )
paddle.Tensor.sum(Tensor([2, 3, 2],"float64"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 3],"float32"), -1, )
paddle.Tensor.sum(Tensor([2, 3],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 3],"float32"), list[-1,], )
paddle.Tensor.sum(Tensor([2, 3],"float32"), list[-2,-1,], )
paddle.Tensor.sum(Tensor([2, 3],"float64"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 4, 3, 5],"float64"), 2, )
paddle.Tensor.sum(Tensor([2160],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([2],"float32"), -1, )
paddle.Tensor.sum(Tensor([2],"float32"), list[-1,], )
paddle.Tensor.sum(Tensor([3, 3, 3],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 4, 2, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 4, 2, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 4, 2, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.sum(Tensor([3],"float32"), -1, )
paddle.Tensor.sum(Tensor([3],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([3],"float64"), -1, )
paddle.Tensor.sum(Tensor([3],"float64"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([4, 12],"float64"), axis=1, )
paddle.Tensor.sum(Tensor([4, 2],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([4, 2],"float64"), axis=1, )
paddle.Tensor.sum(Tensor([4, 3, 5],"float64"), 1, )
paddle.Tensor.sum(Tensor([4],"float64"), -1, keepdim=True, )
paddle.Tensor.tanh(Tensor([1, 2, 3],"float32"), )
paddle.Tensor.tanh(Tensor([1, 2, 3],"float64"), )
paddle.Tensor.tanh(Tensor([2, 3],"float32"), )
paddle.Tensor.tanh(Tensor([2, 3],"float64"), )
paddle.Tensor.tanh(Tensor([3],"float32"), )
paddle.Tensor.tanh(Tensor([3],"float64"), )
paddle.Tensor.tolist(Tensor([1],"int64"), )
paddle.Tensor.tolist(Tensor([2],"int32"), )
paddle.Tensor.tolist(Tensor([2],"int64"), )
paddle.Tensor.tolist(Tensor([3],"int64"), )
paddle.Tensor.tolist(Tensor([4],"int32"), )
paddle.Tensor.tolist(Tensor([4],"int64"), )
paddle.Tensor.transpose(Tensor([112],"int64"), list[0,], )
paddle.Tensor.transpose(Tensor([15, 4, 4],"float32"), list[2,0,1,], )
paddle.Tensor.transpose(Tensor([2, 112],"int64"), list[1,0,], )
paddle.Tensor.transpose(Tensor([2, 3, 3, 4],"float64"), perm=list[0,1,2,3,], )
paddle.Tensor.transpose(Tensor([2, 3, 4, 2],"float64"), perm=list[0,1,2,3,], )
paddle.Tensor.transpose(Tensor([2, 3, 4, 2],"float64"), perm=list[2,3,0,1,], )
paddle.Tensor.transpose(Tensor([2, 3, 4, 4],"float64"), perm=list[0,1,2,3,], )
paddle.Tensor.transpose(Tensor([2, 3, 8, 7],"float64"), perm=list[0,1,2,3,], )
paddle.Tensor.transpose(Tensor([2, 4, 1, 5],"float64"), perm=list[0,2,1,3,], )
paddle.Tensor.transpose(Tensor([2, 4, 1, 5],"float64"), perm=list[1,3,0,2,], )
paddle.Tensor.transpose(Tensor([2, 4, 3, 5, 8],"float64"), perm=list[1,0,2,3,4,], )
paddle.Tensor.transpose(Tensor([2, 7, 4, 2],"float64"), perm=list[0,1,2,3,], )
paddle.Tensor.transpose(Tensor([20],"int64"), list[0,], )
paddle.Tensor.transpose(Tensor([3, 3],"float32"), perm=list[0,1,], )
paddle.Tensor.transpose(Tensor([3, 3],"float64"), perm=list[0,1,], )
paddle.Tensor.transpose(Tensor([3, 4, 3, 4],"float64"), perm=list[0,1,2,3,], )
paddle.Tensor.transpose(Tensor([3, 4, 4, 4],"float64"), perm=list[0,1,2,3,], )
paddle.Tensor.transpose(Tensor([4, 1, 5],"float64"), perm=list[2,0,1,], )
paddle.Tensor.transpose(Tensor([4, 1, 8],"float64"), perm=list[0,1,2,], )
paddle.Tensor.transpose(Tensor([4, 2, 3, 5, 4],"float64"), perm=list[4,0,1,2,3,], )
paddle.Tensor.transpose(Tensor([4, 3, 3, 3],"float32"), list[1,0,2,3,], )
paddle.Tensor.transpose(Tensor([4, 3, 3],"float32"), list[1,0,2,], )
paddle.Tensor.transpose(Tensor([4, 4, 3, 4],"float64"), perm=list[0,1,2,3,], )
paddle.Tensor.transpose(Tensor([4, 7],"float32"), list[0,1,], )
paddle.Tensor.transpose(Tensor([4, 7],"float32"), list[1,0,], )
paddle.Tensor.transpose(Tensor([5, 3, 3, 3],"float32"), list[0,1,2,3,], )
paddle.Tensor.transpose(Tensor([5, 3, 3, 3],"float32"), list[1,0,2,3,], )
paddle.Tensor.transpose(Tensor([5, 3, 3, 3],"float32"), list[2,0,1,3,], )
paddle.Tensor.transpose(Tensor([5, 3, 3, 3],"float32"), list[3,0,1,2,], )
paddle.Tensor.transpose(Tensor([5, 4, 2],"float32"), list[0,1,2,], )
paddle.Tensor.transpose(Tensor([5, 4, 4, 4, 4],"float32"), list[0,1,2,3,4,], )
paddle.Tensor.transpose(Tensor([5, 4, 4],"float32"), list[1,0,2,], )
paddle.Tensor.transpose(Tensor([5, 4, 6, 6, 6],"float32"), list[1,0,2,3,4,], )
paddle.Tensor.transpose(Tensor([5, 4, 6, 6, 6],"float32"), list[2,0,1,3,4,], )
paddle.Tensor.transpose(Tensor([5, 4, 6, 6, 6],"float32"), list[3,0,1,2,4,], )
paddle.Tensor.transpose(Tensor([5, 4, 6, 6, 6],"float32"), list[4,0,1,2,3,], )
paddle.Tensor.transpose(Tensor([7, 7, 4, 2],"float64"), perm=list[0,2,3,1,], )
paddle.Tensor.transpose(Tensor([8, 7, 4, 2],"float64"), perm=list[1,2,3,0,], )
paddle.Tensor.transpose(Tensor([8, 7, 4, 2],"float64"), perm=list[2,3,0,1,], )
paddle.Tensor.unsqueeze(Tensor([2],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([4, 4],"float32"), list[2,], )
paddle.Tensor.unsqueeze(Tensor([4, 8],"float32"), list[2,], )
paddle.Tensor.unsqueeze(Tensor([4],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([4],"float64"), 1, )
paddle.Tensor.zero_(x=Tensor([10, 16, 16],"float64"), )
paddle.Tensor.zero_(x=Tensor([16, 16],"float64"), )
paddle.Tensor.zero_(x=Tensor([16],"float64"), )
paddle.Tensor.zero_(x=Tensor([4, 4],"float32"), )
paddle.Tensor.zero_(x=Tensor([4, 4],"float64"), )
paddle.Tensor.zero_(x=Tensor([4, 4],"int32"), )
paddle.Tensor.zero_(x=Tensor([4, 4],"int64"), )
paddle.abs(Tensor([1],"int32"), )
paddle.abs(Tensor([1],"int64"), )
paddle.abs(Tensor([2, 1, 2],"float32"), )
paddle.abs(Tensor([2, 2],"float32"), )
paddle.abs(Tensor([2, 4, 5],"int32"), )
paddle.abs(Tensor([2],"float32"), )
paddle.abs(Tensor([2],"float64"), )
paddle.abs(Tensor([3],"float64"), )
paddle.abs(Tensor([4, 2],"float64"), )
paddle.abs(Tensor([4, 5],"int32"), )
paddle.abs(Tensor([6, 2, 4, 5],"int32"), )
paddle.abs(Tensor([],"float32"), )
paddle.abs(x=Tensor([1],"float64"), )
paddle.abs(x=Tensor([3, 3, 3],"float32"), )
paddle.abs(x=Tensor([3, 3, 3],"float64"), )
paddle.abs(x=Tensor([4],"float64"), )
paddle.abs(x=Tensor([5, 3],"float64"), )
paddle.acos(Tensor([2, 4],"float64"), )
paddle.acos(x=Tensor([3, 3, 3],"float32"), )
paddle.acos(x=Tensor([3, 3, 3],"float64"), )
paddle.add(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.add(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), name=None, )
paddle.add(Tensor([4, 4, 16],"float32"), Tensor([4, 4, 1],"float32"), )
paddle.add(Tensor([4, 4, 32],"float32"), Tensor([4, 4, 1],"float32"), )
paddle.add(Tensor([4, 8, 32],"float32"), Tensor([4, 8, 1],"float32"), )
paddle.add(Tensor([5, 10, 15, 20],"float32"), Tensor([5, 10, 15, 20],"float32"), )
paddle.add(Tensor([5, 10, 15, 20],"float32"), Tensor([5, 10, 15, 20],"float32"), name=None, )
paddle.add(x=Tensor([3, 3, 3],"float32"), y=Tensor([3, 3, 3],"float32"), )
paddle.add(x=Tensor([3, 3, 3],"float64"), y=Tensor([1, 3, 3],"float64"), )
paddle.add(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 1, 3],"float64"), )
paddle.add(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 1],"float64"), )
paddle.add(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), )
paddle.add(x=Tensor([3, 3, 3],"int32"), y=Tensor([3, 3, 3],"int32"), )
paddle.add(x=Tensor([3, 3, 3],"int64"), y=Tensor([3, 3, 3],"int64"), )
paddle.add_n(inputs=Tensor([10],"float32"), )
paddle.add_n(inputs=Tensor([10],"float64"), )
paddle.add_n(inputs=Tensor([10],"int32"), )
paddle.add_n(inputs=Tensor([10],"int64"), )
paddle.add_n(inputs=Tensor([4, 4, 4, 4],"float64"), )
paddle.add_n(inputs=Tensor([4, 4, 4],"float64"), )
paddle.add_n(inputs=Tensor([4, 4],"float64"), )
paddle.add_n(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], )
paddle.add_n(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], )
paddle.addmm(input=Tensor([1, 1],"float64"), x=Tensor([5, 4],"float64"), y=Tensor([4, 5],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([2, 2],"float32"), x=Tensor([2, 2],"float32"), y=Tensor([2, 2],"float32"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([2, 2],"float64"), x=Tensor([2, 2],"float64"), y=Tensor([2, 2],"float64"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([5, 1],"float64"), x=Tensor([5, 4],"float64"), y=Tensor([4, 5],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=-0.7, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0.5, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0.5, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0.5, alpha=5.0, )
paddle.all(Tensor([4, 4],"bool"), )
paddle.all(Tensor([4, 8],"bool"), )
paddle.all(x=Tensor([10, 10],"bool"), )
paddle.all(x=Tensor([10],"bool"), )
paddle.all(x=Tensor([2, 4, 4, 2],"bool"), )
paddle.all(x=Tensor([2, 4, 4, 2],"bool"), axis=1, )
paddle.all(x=Tensor([2, 4, 4, 2],"bool"), axis=tuple(0,1,), )
paddle.all(x=Tensor([2, 4],"bool"), keepdim=True, )
paddle.all(x=Tensor([3, 4, 2],"bool"), )
paddle.allclose(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.allclose(x=Tensor([1],"float32"), y=Tensor([1],"float32"), rtol=0.01, atol=0.01, equal_nan=False, )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([1],"float64"), )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([1],"float64"), rtol=0.01, atol=0.0, equal_nan=False, )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([1],"float64"), rtol=0.01, atol=0.01, equal_nan=False, )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([1],"float64"), rtol=1e-05, atol=0.001, equal_nan=False, )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([1],"float64"), rtol=1e-05, atol=0.001, equal_nan=True, )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([1],"float64"), rtol=1e-06, atol=0.001, equal_nan=False, )
paddle.allclose(x=Tensor([2, 2, 2, 3],"float64"), y=Tensor([2, 2, 2, 3],"float64"), )
paddle.allclose(x=Tensor([2, 2, 2, 3],"float64"), y=Tensor([2, 2, 2, 3],"float64"), rtol=-3.0, atol=-2.0, )
paddle.allclose(x=Tensor([3],"float64"), y=Tensor([3],"float64"), rtol=1e-06, atol=0.001, equal_nan=True, )
paddle.amax(Tensor([10],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([10],"float64"), axis=None, keepdim=False, )
paddle.amax(Tensor([10],"int32"), axis=None, keepdim=False, )
paddle.amax(Tensor([10],"int64"), axis=None, keepdim=False, )
paddle.amax(Tensor([2, 4],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([3, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.amax(Tensor([3, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.amax(Tensor([3, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([3, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.amin(Tensor([10],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([10],"float64"), axis=None, keepdim=False, )
paddle.amin(Tensor([10],"int32"), axis=None, keepdim=False, )
paddle.amin(Tensor([10],"int64"), axis=None, keepdim=False, )
paddle.amin(Tensor([2, 4],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([3, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.amin(Tensor([3, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.amin(Tensor([3, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([3, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.any(Tensor([1],"bool"), )
paddle.any(Tensor([2, 4, 5],"bool"), )
paddle.any(Tensor([4, 5],"bool"), )
paddle.any(Tensor([6, 2, 4, 5],"bool"), )
paddle.any(x=Tensor([10, 10],"bool"), )
paddle.any(x=Tensor([10],"bool"), )
paddle.any(x=Tensor([2, 4, 4, 2],"bool"), )
paddle.any(x=Tensor([2, 4, 4, 2],"bool"), axis=1, )
paddle.any(x=Tensor([2, 4, 4, 2],"bool"), axis=tuple(0,1,), )
paddle.any(x=Tensor([2, 4],"bool"), keepdim=True, )
paddle.any(x=Tensor([3, 4, 2],"bool"), )
paddle.arange(-2, 2, dtype="float32", name=None, )
paddle.arange(-5, 5, dtype="float32", name=None, )
paddle.arange(0, 3, dtype="float32", name=None, )
paddle.arange(0, 5, dtype="float32", name=None, )
paddle.arange(0, Tensor([],"int64"), 1, dtype=Dtype(int64), )
paddle.arange(11, dtype=Dtype(float32), )
paddle.arange(11, dtype=Dtype(float64), )
paddle.arange(Tensor([],"int64"), )
paddle.arange(start=1, end=20, step=3, )
paddle.arange(start=1, end=20, step=3, dtype=type(numpy.float32), )
paddle.arange(start=1, end=20, step=3, dtype=type(numpy.int64), )
paddle.arange(start=1, end=20, step=Tensor([1],"int64"), dtype=type(numpy.float32), )
paddle.arange(start=5, )
paddle.arange(start=5, end=10, )
paddle.arange(start=Tensor([1],"int64"), end=20, step=3, dtype=type(numpy.int64), )
paddle.arange(start=Tensor([1],"int64"), end=Tensor([1],"int64"), step=Tensor([1],"int64"), dtype=type(numpy.float32), )
paddle.argmax(x=Tensor([2, 3],"int64"), axis=-1, )
paddle.argmax(x=Tensor([3, 1],"int64"), keepdim=None, )
paddle.argmax(x=Tensor([3, 3, 2, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmax(x=Tensor([3, 3, 3],"float64"), )
paddle.argmax(x=Tensor([3, 3, 4],"float64"), axis=1, keepdim=False, )
paddle.argmax(x=Tensor([3, 3, 5],"float64"), axis=2, dtype=type(numpy.int64), )
paddle.argmax(x=Tensor([3, 3],"float64"), axis=0, dtype=type(numpy.int32), keepdim=False, )
paddle.argmax(x=Tensor([3, 3],"int64"), axis=-2, )
paddle.argmax(x=Tensor([3, 3],"int64"), axis=Tensor([1],"int64"), )
paddle.argmax(x=Tensor([3, 3],"int64"), dtype="int32", )
paddle.argmax(x=Tensor([3],"int64"), axis=-1, keepdim=True, )
paddle.argmin(x=Tensor([2, 3],"int64"), axis=-1, )
paddle.argmin(x=Tensor([3, 1],"int64"), keepdim=None, )
paddle.argmin(x=Tensor([3, 3, 2, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmin(x=Tensor([3, 3, 3],"float64"), )
paddle.argmin(x=Tensor([3, 3, 4],"float64"), axis=1, keepdim=False, )
paddle.argmin(x=Tensor([3, 3, 5],"float64"), axis=2, dtype=type(numpy.int64), )
paddle.argmin(x=Tensor([3, 3],"float64"), axis=0, dtype=type(numpy.int32), keepdim=False, )
paddle.argmin(x=Tensor([3, 3],"int64"), axis=-2, )
paddle.argmin(x=Tensor([3, 3],"int64"), axis=Tensor([1],"int64"), )
paddle.argmin(x=Tensor([3, 3],"int64"), dtype="int32", )
paddle.argmin(x=Tensor([3],"int64"), axis=-1, keepdim=True, )
paddle.argsort(x=Tensor([3, 2, 2],"float32"), axis=0, )
paddle.argsort(x=Tensor([3, 2, 2],"float64"), axis=-1, )
paddle.argsort(x=Tensor([3, 2, 2],"float64"), axis=0, )
paddle.argsort(x=Tensor([3, 2, 2],"float64"), axis=0, descending=True, )
paddle.argsort(x=Tensor([3, 2, 2],"float64"), axis=1, )
paddle.argsort(x=Tensor([3, 2, 2],"int32"), axis=0, )
paddle.argsort(x=Tensor([3, 2, 2],"int64"), axis=0, )
paddle.as_complex(x=Tensor([3, 2],"float32"), )
paddle.as_complex(x=Tensor([3, 2],"float64"), )
paddle.as_complex(x=Tensor([9, 2, 3, 2],"float64"), )
paddle.as_complex(x=Tensor([9, 3, 2],"float64"), )
paddle.as_real(x=Tensor([3],"complex128"), )
paddle.as_real(x=Tensor([3],"complex64"), )
paddle.as_real(x=Tensor([9, 2, 3],"complex128"), )
paddle.as_real(x=Tensor([9, 2, 3],"complex64"), )
paddle.as_real(x=Tensor([9, 3],"complex128"), )
paddle.as_real(x=Tensor([9, 3],"complex64"), )
paddle.asin(x=Tensor([3, 3, 3],"float32"), )
paddle.asin(x=Tensor([3, 3, 3],"float64"), )
paddle.assign(Tensor([12],"float32"), Tensor([12],"float32"), )
paddle.assign(Tensor([15, 4, 4],"float32"), Tensor([15, 4, 4],"float32"), )
paddle.assign(Tensor([2, 2],"float64"), )
paddle.assign(Tensor([2, 3, 3, 2],"float64"), )
paddle.assign(Tensor([2, 3, 4],"float64"), )
paddle.assign(Tensor([2, 3],"float64"), )
paddle.assign(Tensor([2],"float32"), )
paddle.assign(Tensor([2],"float64"), )
paddle.assign(Tensor([3, 2],"float64"), )
paddle.assign(Tensor([3, 3],"float64"), )
paddle.assign(Tensor([3, 4],"float64"), )
paddle.assign(Tensor([3, 5],"float32"), Tensor([3, 5],"float32"), )
paddle.assign(Tensor([36],"float32"), Tensor([36],"float32"), )
paddle.assign(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.assign(Tensor([4, 3],"float64"), )
paddle.assign(Tensor([4, 4],"float64"), )
paddle.assign(Tensor([4, 7],"float32"), Tensor([4, 7],"float32"), )
paddle.assign(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.assign(Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), )
paddle.assign(Tensor([5, 3, 3, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), )
paddle.assign(Tensor([5, 4, 2],"float32"), Tensor([5, 4, 2],"float32"), )
paddle.assign(Tensor([5, 4, 4, 4, 4],"float32"), Tensor([5, 4, 4, 4, 4],"float32"), )
paddle.assign(Tensor([5, 4, 4],"float32"), Tensor([5, 4, 4],"float32"), )
paddle.assign(Tensor([5, 4, 6, 6, 6],"float32"), Tensor([5, 4, 6, 6, 6],"float32"), )
paddle.assign(Tensor([5],"float32"), Tensor([5],"float32"), )
paddle.assign(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.assign(Tensor([7],"float32"), Tensor([7],"float32"), )
paddle.assign(Tensor([],"float32"), )
paddle.assign(Tensor([],"float64"), )
paddle.assign(x=42, )
paddle.assign(x=Tensor([3, 3],"float64"), )
paddle.assign(x=Tensor([3, 4],"float32"), )
paddle.assign(x=Tensor([3, 4],"float64"), )
paddle.assign(x=Tensor([3, 4],"int32"), )
paddle.assign(x=Tensor([3, 4],"int64"), )
paddle.assign(x=list[list[3.1,2.1,2.2,],list[-1.0,-2.0,-2.2,],], )
paddle.assign(x=tuple(tuple(3.1,2.1,2.2,),tuple(-1.0,-2.0,-2.2,),), )
paddle.atan(x=Tensor([3, 3, 3],"float32"), )
paddle.atan(x=Tensor([3, 3, 3],"float64"), )
paddle.atan2(x=Tensor([3, 6, 6, 6, 6],"float64"), y=Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([6, 6, 6, 6],"float64"), y=Tensor([6, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([6, 6, 6],"float64"), y=Tensor([6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([6, 6],"float16"), y=Tensor([6, 6],"float16"), )
paddle.atan2(x=Tensor([6, 6],"float32"), y=Tensor([6, 6],"float32"), )
paddle.atan2(x=Tensor([6, 6],"float64"), y=Tensor([6, 6],"float64"), )
paddle.atan2(x=Tensor([6, 6],"int32"), y=Tensor([6, 6],"int32"), )
paddle.atan2(x=Tensor([6, 6],"int64"), y=Tensor([6, 6],"int64"), )
paddle.bernoulli(x=Tensor([6, 3],"float64"), )
paddle.bincount(Tensor([4],"int64"), weights=Tensor([4],"float64"), )
paddle.bincount(x=Tensor([10],"int32"), )
paddle.bincount(x=Tensor([10],"int32"), minlength=4, )
paddle.bincount(x=Tensor([10],"int32"), minlength=Tensor([1],"int64"), )
paddle.bincount(x=Tensor([10],"int32"), weights=Tensor([10],"int32"), )
paddle.bincount(x=Tensor([4],"int32"), )
paddle.bincount(x=Tensor([4],"int64"), )
paddle.bitwise_and(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int64"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int64"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int8"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int8"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"uint8"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"uint8"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([3],"int32"), Tensor([3],"int32"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int64"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int8"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"uint8"), )
paddle.bitwise_not(Tensor([3, 4, 1],"int64"), out=Tensor([3, 4, 1],"int64"), )
paddle.bitwise_not(Tensor([3],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int64"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int64"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int8"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int8"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"uint8"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"uint8"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([3],"int32"), Tensor([3],"int32"), )
paddle.bitwise_xor(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int64"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int64"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int8"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int8"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"uint8"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"uint8"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([3],"int32"), Tensor([3],"int32"), )
paddle.bmm(x=Tensor([2, 2, 3],"float32"), y=Tensor([2, 3, 2],"float32"), )
paddle.bmm(x=Tensor([2, 2, 3],"float64"), y=Tensor([2, 3, 2],"float64"), )
paddle.broadcast_shape(list[1,3,3,], list[1,3,3,], )
paddle.broadcast_shape(list[1,], list[1,], )
paddle.broadcast_shape(list[2,1,1,], list[2,2,4,], )
paddle.broadcast_shape(list[2,1,3,1,4,2,3,7,2,], list[1,2,1,1,2,], )
paddle.broadcast_shape(list[2,1,3,1,4,2,3,], list[1,2,1,1,3,], )
paddle.broadcast_shape(list[2,1,3,1,4,2,3,], list[1,3,1,2,1,1,1,], )
paddle.broadcast_shape(list[2,1,3,1,4,2,3,], list[1,3,1,2,1,2,3,], )
paddle.broadcast_shape(list[2,1,3,1,4,2,3,], list[3,1,2,1,1,3,], )
paddle.broadcast_shape(list[2,1,3,], list[1,3,1,], )
paddle.broadcast_shape(list[2,1,4,], list[2,2,4,], )
paddle.broadcast_shape(list[2,2,1,], list[2,1,4,], )
paddle.broadcast_shape(list[2,2,1,], list[2,2,1,], )
paddle.broadcast_shape(list[2,2,4,], list[2,1,4,], )
paddle.broadcast_shape(list[2,2,4,], list[2,2,4,], )
paddle.broadcast_shape(list[2,2,4,], list[2,4,], )
paddle.broadcast_shape(list[2,2,4,], list[3,2,2,4,], )
paddle.broadcast_shape(list[2,4,5,], list[2,4,5,], )
paddle.broadcast_shape(list[2,4,], list[2,4,], )
paddle.broadcast_shape(list[2,4,], list[], )
paddle.broadcast_shape(list[2,], list[2,], )
paddle.broadcast_shape(list[2,], list[], )
paddle.broadcast_shape(list[3,2,3,4,5,1,2,], list[3,2,3,4,5,1,2,], )
paddle.broadcast_shape(list[3,3,3,], list[3,3,3,], )
paddle.broadcast_shape(list[3,3,], list[1,], )
paddle.broadcast_shape(list[3,3,], list[3,3,], )
paddle.broadcast_shape(list[3,6,3,1,2,5,], list[3,6,3,1,2,5,], )
paddle.broadcast_shape(list[3,6,3,4,1,5,], list[3,6,3,4,1,5,], )
paddle.broadcast_shape(list[3,6,3,4,2,1,], list[3,6,3,4,2,1,], )
paddle.broadcast_shape(list[3,], list[3,], )
paddle.broadcast_shape(list[3,], list[], )
paddle.broadcast_shape(list[4,2,], list[4,2,], )
paddle.broadcast_shape(list[4,2,], list[], )
paddle.broadcast_shape(list[4,3,3,4,], list[1,], )
paddle.broadcast_shape(list[4,3,3,4,], list[4,3,3,4,], )
paddle.broadcast_shape(list[4,3,3,], list[1,], )
paddle.broadcast_shape(list[4,3,3,], list[4,3,3,], )
paddle.broadcast_shape(list[4,5,], list[4,5,], )
paddle.broadcast_shape(list[4,], list[4,], )
paddle.broadcast_shape(list[6,1,4,5,], list[2,1,5,], )
paddle.broadcast_shape(list[6,2,4,5,], list[6,2,4,5,], )
paddle.broadcast_shape(list[], list[], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float64"),Tensor([1, 6, 1, 1, 3],"float64"),Tensor([1, 1, 1, 6, 3],"float64"),Tensor([1, 6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"int32"),Tensor([1, 6, 1, 1, 3],"int32"),Tensor([1, 1, 1, 6, 3],"int32"),Tensor([1, 6, 1, 6, 3],"int32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"int64"),Tensor([1, 6, 1, 1, 3],"int64"),Tensor([1, 1, 1, 6, 3],"int64"),Tensor([1, 6, 1, 6, 3],"int64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"float64"),Tensor([1, 6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"int32"),Tensor([1, 6, 1, 6, 3],"int32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"int64"),Tensor([1, 6, 1, 6, 3],"int64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"bool"),Tensor([6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"float32"),Tensor([6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"float64"),Tensor([6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"int32"),Tensor([6, 1, 6, 3],"int32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"int64"),Tensor([6, 1, 6, 3],"int64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"bool"),Tensor([6, 1, 6],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"float32"),Tensor([6, 1, 6],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"float64"),Tensor([6, 1, 6],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"int32"),Tensor([6, 1, 6],"int32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"int64"),Tensor([6, 1, 6],"int64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"bool"),Tensor([6, 1],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"float32"),Tensor([6, 1],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"float64"),Tensor([6, 1],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"int32"),Tensor([6, 1],"int32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"int64"),Tensor([6, 1],"int64"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"bool"),Tensor([3, 1],"bool"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float32"),Tensor([3, 1],"float32"),Tensor([3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float32"),Tensor([3, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float64"),Tensor([3, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"int32"),Tensor([3, 1],"int32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"int64"),Tensor([3, 1],"int64"),], )
paddle.broadcast_tensors(list[Tensor([2, 1, 2],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 2],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 2],"float32"),Tensor([2, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float32"),Tensor([2, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float32"),Tensor([2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([3],"float64"),Tensor([3],"float64"),], )
paddle.broadcast_tensors(list[Tensor([4, 2, 1, 4],"float32"),Tensor([3, 1],"float32"),Tensor([1, 3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([],"float32"),Tensor([],"float32"),], )
paddle.broadcast_to(Tensor([1, 1, 1, 1],"int64"), tuple(1,4,4,2,), )
paddle.broadcast_to(Tensor([1, 1, 1],"int64"), tuple(1,4,4,), )
paddle.broadcast_to(Tensor([1, 1],"int64"), tuple(1,2,), )
paddle.broadcast_to(Tensor([1, 1],"int64"), tuple(1,4,), )
paddle.broadcast_to(Tensor([1, 1],"int64"), tuple(2,1,), )
paddle.broadcast_to(Tensor([1, 1],"int64"), tuple(4,1,), )
paddle.broadcast_to(Tensor([1, 3, 3],"int32"), tuple(1,3,3,), )
paddle.broadcast_to(Tensor([1, 3, 4],"float32"), tuple(4,2,3,4,), )
paddle.broadcast_to(Tensor([1, 4],"bool"), tuple(3,4,), )
paddle.broadcast_to(Tensor([1, 4],"float32"), tuple(3,4,), )
paddle.broadcast_to(Tensor([1, 4],"float64"), tuple(3,4,), )
paddle.broadcast_to(Tensor([1, 4],"int32"), tuple(3,4,), )
paddle.broadcast_to(Tensor([1, 4],"int64"), tuple(3,4,), )
paddle.broadcast_to(Tensor([1],"float32"), list[1,], )
paddle.broadcast_to(Tensor([1],"float32"), list[3,3,], )
paddle.broadcast_to(Tensor([1],"float32"), tuple(1,), )
paddle.broadcast_to(Tensor([1],"float64"), list[1,2,], )
paddle.broadcast_to(Tensor([1],"float64"), list[1,4,4,2,], )
paddle.broadcast_to(Tensor([1],"float64"), list[1,4,4,], )
paddle.broadcast_to(Tensor([1],"float64"), list[1,4,], )
paddle.broadcast_to(Tensor([1],"float64"), list[1,], )
paddle.broadcast_to(Tensor([1],"float64"), list[2,1,], )
paddle.broadcast_to(Tensor([1],"float64"), list[3,3,], )
paddle.broadcast_to(Tensor([1],"float64"), list[4,3,3,4,], )
paddle.broadcast_to(Tensor([1],"float64"), list[4,3,3,], )
paddle.broadcast_to(Tensor([1],"float64"), tuple(1,), )
paddle.broadcast_to(Tensor([1],"float64"), tuple(1,2,), )
paddle.broadcast_to(Tensor([1],"float64"), tuple(1,4,), )
paddle.broadcast_to(Tensor([1],"float64"), tuple(1,4,4,), )
paddle.broadcast_to(Tensor([1],"float64"), tuple(1,4,4,2,), )
paddle.broadcast_to(Tensor([1],"float64"), tuple(2,1,), )
paddle.broadcast_to(Tensor([1],"int32"), list[1,], )
paddle.broadcast_to(Tensor([1],"int32"), tuple(1,), )
paddle.broadcast_to(Tensor([1],"int64"), list[1,], )
paddle.broadcast_to(Tensor([1],"int64"), tuple(1,), )
paddle.broadcast_to(Tensor([2, 1, 1],"float32"), list[2,2,4,], )
paddle.broadcast_to(Tensor([2, 1, 4],"bool"), list[2,2,4,], )
paddle.broadcast_to(Tensor([2, 1, 4],"float32"), list[2,2,4,], )
paddle.broadcast_to(Tensor([2, 1, 5],"int32"), list[6,2,4,5,], )
paddle.broadcast_to(Tensor([2, 2, 1],"float32"), list[2,2,4,], )
paddle.broadcast_to(Tensor([2, 2, 4],"float32"), list[3,2,2,4,], )
paddle.broadcast_to(Tensor([2, 4, 5],"int32"), list[2,4,5,], )
paddle.broadcast_to(Tensor([2, 4],"bool"), list[2,2,4,], )
paddle.broadcast_to(Tensor([2160],"float64"), tuple(2160,), )
paddle.broadcast_to(Tensor([3, 1],"bool"), tuple(3,4,), )
paddle.broadcast_to(Tensor([3, 1],"float32"), tuple(3,4,), )
paddle.broadcast_to(Tensor([3, 1],"float32"), tuple(4,2,3,4,), )
paddle.broadcast_to(Tensor([3, 1],"float64"), tuple(3,4,), )
paddle.broadcast_to(Tensor([3, 1],"int32"), tuple(3,4,), )
paddle.broadcast_to(Tensor([3, 1],"int64"), tuple(3,4,), )
paddle.broadcast_to(Tensor([3, 3, 3],"float32"), tuple(3,3,3,), )
paddle.broadcast_to(Tensor([3, 3, 3],"float64"), tuple(3,3,3,), )
paddle.broadcast_to(Tensor([3, 6, 3, 1, 2, 5],"int32"), tuple(3,6,3,1,2,5,), )
paddle.broadcast_to(Tensor([3, 6, 3, 4, 1, 5],"int32"), tuple(3,6,3,4,1,5,), )
paddle.broadcast_to(Tensor([3, 6, 3, 4, 2, 1],"int32"), tuple(3,6,3,4,2,1,), )
paddle.broadcast_to(Tensor([3, 6, 3, 4, 2, 5],"float64"), tuple(3,6,3,4,2,5,), )
paddle.broadcast_to(Tensor([4, 2, 1, 4],"float32"), tuple(4,2,3,4,), )
paddle.broadcast_to(Tensor([4, 2],"float64"), tuple(4,2,), )
paddle.broadcast_to(Tensor([4, 4, 4, 2],"float64"), tuple(4,4,4,2,), )
paddle.broadcast_to(Tensor([4, 4, 4],"float64"), tuple(4,4,4,), )
paddle.broadcast_to(Tensor([4, 4],"float64"), tuple(4,4,), )
paddle.broadcast_to(Tensor([4, 5],"int32"), list[4,5,], )
paddle.broadcast_to(Tensor([4],"float32"), tuple(4,), )
paddle.broadcast_to(Tensor([4],"float64"), tuple(4,), )
paddle.broadcast_to(Tensor([6, 1, 4, 5],"int32"), list[6,2,4,5,], )
paddle.broadcast_to(Tensor([6, 2, 4, 5],"int32"), list[6,2,4,5,], )
paddle.broadcast_to(Tensor([],"float32"), list[2,], )
paddle.broadcast_to(Tensor([],"float32"), list[3,], )
paddle.broadcast_to(Tensor([],"float64"), list[2,4,], )
paddle.broadcast_to(Tensor([],"float64"), list[2,], )
paddle.broadcast_to(Tensor([],"float64"), list[3,], )
paddle.broadcast_to(Tensor([],"float64"), list[4,2,], )
paddle.broadcast_to(x=Tensor([2, 3, 3],"float64"), shape=list[3,2,3,3,], )
paddle.broadcast_to(x=Tensor([2],"float64"), shape=list[5,2,], )
paddle.broadcast_to(x=Tensor([6, 1],"float64"), shape=list[6,2,], )
paddle.broadcast_to(x=Tensor([6],"float32"), shape=list[2,6,], )
paddle.broadcast_to(x=Tensor([6],"float64"), shape=list[2,6,], )
paddle.broadcast_to(x=Tensor([6],"int32"), shape=list[2,6,], )
paddle.broadcast_to(x=Tensor([6],"int64"), shape=list[2,6,], )
paddle.cast(Tensor([1, 1, 28, 28],"float32"), "float32", )
paddle.cast(Tensor([1, 4, 4],"float32"), dtype="float32", )
paddle.cast(Tensor([1, 400],"float32"), "float32", )
paddle.cast(Tensor([1, 4],"float64"), dtype="float64", )
paddle.cast(Tensor([11, 4, 4],"int64"), dtype=Dtype(int64), )
paddle.cast(Tensor([11, 4, 8],"int64"), dtype=Dtype(int64), )
paddle.cast(Tensor([1],"int64"), Dtype(float32), )
paddle.cast(Tensor([2, 1, 1, 1, 1],"bool"), Dtype(float32), )
paddle.cast(Tensor([2, 1, 1, 1, 1],"bool"), Dtype(float64), )
paddle.cast(Tensor([2, 1, 1, 1],"bool"), Dtype(float32), )
paddle.cast(Tensor([2, 1, 1, 1],"bool"), Dtype(float64), )
paddle.cast(Tensor([2, 1, 1, 2, 3],"float32"), Dtype(float32), )
paddle.cast(Tensor([2, 1, 1, 2, 3],"float64"), Dtype(float64), )
paddle.cast(Tensor([2, 1, 2, 3],"float32"), Dtype(float32), )
paddle.cast(Tensor([2, 1, 2, 3],"float64"), Dtype(float64), )
paddle.cast(Tensor([2, 2, 2],"int32"), "float32", )
paddle.cast(Tensor([2, 2, 2],"int64"), "float32", )
paddle.cast(Tensor([2, 2, 4, 5],"int64"), Dtype(float32), )
paddle.cast(Tensor([2, 3],"bool"), Dtype(float32), )
paddle.cast(Tensor([2, 4, 5],"int64"), Dtype(float32), )
paddle.cast(Tensor([2, 4],"bool"), "float32", )
paddle.cast(Tensor([25, 1, 44, 44],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([3, 4, 7, 3],"float64"), Dtype(float32), )
paddle.cast(Tensor([3, 4],"bool"), dtype="float64", )
paddle.cast(Tensor([3],"int64"), Dtype(float64), )
paddle.cast(Tensor([4, 1, 4],"float32"), dtype="float32", )
paddle.cast(Tensor([4, 125, 125, 1],"bool"), Dtype(float64), )
paddle.cast(Tensor([4, 125, 125, 1],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([4, 125, 125, 1],"float64"), Dtype(float64), )
paddle.cast(Tensor([4, 4, 4],"bool"), dtype="float32", )
paddle.cast(Tensor([4, 4],"bool"), "int64", )
paddle.cast(Tensor([4, 4],"bool"), Dtype(int64), )
paddle.cast(Tensor([4, 4],"bool"), dtype=Dtype(float32), )
paddle.cast(Tensor([4, 5],"int64"), Dtype(float32), )
paddle.cast(Tensor([4, 8],"bool"), "int64", )
paddle.cast(Tensor([4, 8],"bool"), Dtype(int64), )
paddle.cast(Tensor([4, 8],"bool"), dtype=Dtype(float32), )
paddle.cast(Tensor([4],"bool"), type(numpy.bool), )
paddle.cast(Tensor([4],"bool"), type(numpy.float16), )
paddle.cast(Tensor([4],"bool"), type(numpy.float32), )
paddle.cast(Tensor([4],"bool"), type(numpy.float64), )
paddle.cast(Tensor([4],"bool"), type(numpy.int32), )
paddle.cast(Tensor([4],"bool"), type(numpy.int64), )
paddle.cast(Tensor([4],"float16"), type(numpy.bool), )
paddle.cast(Tensor([4],"float16"), type(numpy.float16), )
paddle.cast(Tensor([4],"float16"), type(numpy.float32), )
paddle.cast(Tensor([4],"float16"), type(numpy.float64), )
paddle.cast(Tensor([4],"float16"), type(numpy.int32), )
paddle.cast(Tensor([4],"float16"), type(numpy.int64), )
paddle.cast(Tensor([4],"float32"), type(numpy.bool), )
paddle.cast(Tensor([4],"float32"), type(numpy.float16), )
paddle.cast(Tensor([4],"float32"), type(numpy.float32), )
paddle.cast(Tensor([4],"float32"), type(numpy.float64), )
paddle.cast(Tensor([4],"float32"), type(numpy.int32), )
paddle.cast(Tensor([4],"float32"), type(numpy.int64), )
paddle.cast(Tensor([4],"float64"), type(numpy.bool), )
paddle.cast(Tensor([4],"float64"), type(numpy.float16), )
paddle.cast(Tensor([4],"float64"), type(numpy.float32), )
paddle.cast(Tensor([4],"float64"), type(numpy.float64), )
paddle.cast(Tensor([4],"float64"), type(numpy.int32), )
paddle.cast(Tensor([4],"float64"), type(numpy.int64), )
paddle.cast(Tensor([4],"int32"), type(numpy.bool), )
paddle.cast(Tensor([4],"int32"), type(numpy.float16), )
paddle.cast(Tensor([4],"int32"), type(numpy.float32), )
paddle.cast(Tensor([4],"int32"), type(numpy.float64), )
paddle.cast(Tensor([4],"int32"), type(numpy.int32), )
paddle.cast(Tensor([4],"int32"), type(numpy.int64), )
paddle.cast(Tensor([4],"int64"), Dtype(float32), )
paddle.cast(Tensor([4],"int64"), type(numpy.bool), )
paddle.cast(Tensor([4],"int64"), type(numpy.float16), )
paddle.cast(Tensor([4],"int64"), type(numpy.float32), )
paddle.cast(Tensor([4],"int64"), type(numpy.float64), )
paddle.cast(Tensor([4],"int64"), type(numpy.int32), )
paddle.cast(Tensor([4],"int64"), type(numpy.int64), )
paddle.cast(Tensor([5, 10, 15, 20],"bool"), Dtype(float32), )
paddle.cast(Tensor([5, 1],"bool"), Dtype(float64), )
paddle.cast(Tensor([5, 1],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([5, 1],"float64"), Dtype(float64), )
paddle.cast(Tensor([5, 8, 7, 6],"float64"), Dtype(float32), )
paddle.cast(Tensor([6, 4, 4],"int64"), dtype=Dtype(int64), )
paddle.cast(Tensor([8, 6, 8, 16],"float64"), Dtype(float32), )
paddle.cast(Tensor([8, 7, 6, 6],"float64"), Dtype(float32), )
paddle.cast(Tensor([],"int64"), "int64", )
paddle.cast(x=Tensor([3, 3, 3],"float32"), dtype="float64", )
paddle.cast(x=Tensor([3, 3, 3],"float64"), dtype="float64", )
paddle.ceil(Tensor([1, 3, 3],"float32"), )
paddle.ceil(Tensor([1, 3, 3],"float64"), )
paddle.ceil(Tensor([1],"float64"), )
paddle.ceil(Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.ceil(Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.ceil(Tensor([3, 6, 3, 4, 2, 1],"float64"), )
paddle.ceil(x=Tensor([3, 3, 3],"float32"), )
paddle.ceil(x=Tensor([3, 3, 3],"float64"), )
paddle.chunk(x=Tensor([3, 3],"float16"), chunks=3, axis=-1, )
paddle.chunk(x=Tensor([3, 3],"float16"), chunks=3, axis=0, )
paddle.chunk(x=Tensor([3, 3],"float16"), chunks=3, axis=Tensor([1],"int64"), )
paddle.chunk(x=Tensor([3, 3],"float32"), chunks=3, axis=-1, )
paddle.chunk(x=Tensor([3, 3],"float32"), chunks=3, axis=0, )
paddle.chunk(x=Tensor([3, 3],"float32"), chunks=3, axis=Tensor([1],"int64"), )
paddle.chunk(x=Tensor([3, 3],"float64"), chunks=3, axis=-1, )
paddle.chunk(x=Tensor([3, 3],"float64"), chunks=3, axis=0, )
paddle.chunk(x=Tensor([3, 3],"float64"), chunks=3, axis=Tensor([1],"int64"), )
paddle.chunk(x=Tensor([3, 3],"int32"), chunks=3, axis=-1, )
paddle.chunk(x=Tensor([3, 3],"int32"), chunks=3, axis=0, )
paddle.chunk(x=Tensor([3, 3],"int32"), chunks=3, axis=Tensor([1],"int64"), )
paddle.chunk(x=Tensor([3, 3],"int64"), chunks=3, axis=-1, )
paddle.chunk(x=Tensor([3, 3],"int64"), chunks=3, axis=0, )
paddle.chunk(x=Tensor([3, 3],"int64"), chunks=3, axis=Tensor([1],"int64"), )
paddle.chunk(x=Tensor([3],"bool"), chunks=3, axis=0, )
paddle.clip(Tensor([],"float32"), min=0, )
paddle.clip(Tensor([],"float64"), min=0, )
paddle.clip(x=Tensor([1, 2, 3],"float32"), min=None, max=1, )
paddle.clip(x=Tensor([1, 2, 3],"float64"), min=None, max=1, )
paddle.clip(x=Tensor([1, 2],"float64"), min=Tensor([1],"float64"), max=Tensor([1],"float64"), )
paddle.clip(x=Tensor([10, 10],"float64"), min=-1.0, max=1.0, )
paddle.clip(x=Tensor([10, 10],"float64"), min=-2.0, max=-1.0, )
paddle.clip(x=Tensor([10, 10],"float64"), min=2.0, max=2.0, )
paddle.clip(x=Tensor([2, 2],"float64"), min=Tensor([1],"float64"), max=Tensor([1],"float64"), )
paddle.clip(x=Tensor([2],"float64"), min=Tensor([1],"float64"), max=Tensor([1],"float64"), name="test name", )
paddle.clip(x=Tensor([3, 3, 3],"float32"), min=None, max=5, )
paddle.clip(x=Tensor([3, 3, 3],"float64"), min=None, max=5, )
paddle.clip(x=Tensor([3, 3],"float32"), min=-5.0, max=5.0, )
paddle.clip(x=Tensor([3, 3],"float64"), min=-5.0, max=5.0, )
paddle.clip(x=Tensor([3, 3],"float64"), min=0.0, max=5, )
paddle.clip(x=Tensor([3, 3],"float64"), min=1, max=Tensor([1],"float64"), )
paddle.clip(x=Tensor([3, 3],"float64"), min=1.0, max=None, )
paddle.clip(x=Tensor([3, 3],"float64"), min=5, max=None, )
paddle.clip(x=Tensor([3, 3],"float64"), min=Tensor([1],"float64"), max=None, )
paddle.clip(x=Tensor([3, 3],"float64"), min=Tensor([1],"float64"), max=Tensor([1],"float64"), )
paddle.clip(x=Tensor([3],"float64"), )
paddle.clip(x=Tensor([3],"float64"), min=2.0, max=2.0, )
paddle.clip(x=Tensor([3],"float64"), min=None, max=-1, )
paddle.clip(x=Tensor([3],"float64"), min=Tensor([1],"float64"), max=Tensor([1],"float64"), )
paddle.clip(x=Tensor([4, 10, 10],"float64"), min=-1.0, max=1.0, )
paddle.clone(Tensor([3, 3, 4, 4],"float64"), )
paddle.clone(Tensor([3, 3, 4],"float64"), )
paddle.clone(Tensor([3, 3],"float64"), )
paddle.clone(Tensor([3],"float64"), )
paddle.complex(real=Tensor([3, 2],"float32"), imag=Tensor([3, 2],"float32"), )
paddle.complex(real=Tensor([3, 2],"float64"), imag=Tensor([3, 2],"float64"), )
paddle.complex(real=Tensor([9, 2, 3],"float32"), imag=Tensor([9, 2, 3],"float32"), )
paddle.complex(real=Tensor([9, 2, 3],"float64"), imag=Tensor([9, 2, 3],"float64"), )
paddle.complex(real=Tensor([9],"float32"), imag=Tensor([9],"float32"), )
paddle.complex(real=Tensor([9],"float64"), imag=Tensor([9],"float64"), )
paddle.concat(list[Tensor([1, 1, 3],"float32"),Tensor([1, 1, 4],"float32"),], -1, )
paddle.concat(list[Tensor([1, 1, 4],"float32"),Tensor([1, 1, 4],"float32"),], -1, )
paddle.concat(list[Tensor([12],"float64"),Tensor([12],"float64"),Tensor([12],"float64"),Tensor([12],"float64"),Tensor([12],"float64"),Tensor([12],"float64"),Tensor([12],"float64"),Tensor([12],"float64"),Tensor([12],"float64"),Tensor([12],"float64"),Tensor([12],"float64"),Tensor([12],"float64"),], axis=0, )
paddle.concat(list[Tensor([16],"float64"),Tensor([16],"float64"),], )
paddle.concat(list[Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),], axis=0, )
paddle.concat(list[Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),], axis=0, )
paddle.concat(list[Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),], axis=0, )
paddle.concat(list[Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),Tensor([18],"float64"),], axis=0, )
paddle.concat(list[Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.concat(list[Tensor([2, 1, 3],"float32"),Tensor([2, 1, 3],"float32"),], -1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2],"float32"),Tensor([2],"float32"),], axis=0, )
paddle.concat(list[Tensor([2],"float64"),Tensor([2],"float64"),], axis=0, )
paddle.concat(list[Tensor([3, 6],"float64"),Tensor([3, 6],"float64"),Tensor([3, 6],"float64"),Tensor([3, 6],"float64"),Tensor([3, 6],"float64"),Tensor([3, 6],"float64"),], axis=1, )
paddle.concat(list[Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),Tensor([32],"float64"),], axis=0, )
paddle.concat(list[Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),Tensor([36],"float64"),], axis=0, )
paddle.concat(list[Tensor([4, 3],"float64"),Tensor([4, 3],"float64"),Tensor([4, 3],"float64"),], axis=1, )
paddle.concat(list[Tensor([4],"float64"),Tensor([4],"float64"),Tensor([4],"float64"),Tensor([4],"float64"),Tensor([4],"float64"),Tensor([4],"float64"),Tensor([4],"float64"),Tensor([4],"float64"),], axis=0, )
paddle.concat(list[Tensor([4],"float64"),Tensor([4],"float64"),Tensor([4],"float64"),Tensor([4],"float64"),], axis=0, )
paddle.concat(list[Tensor([4],"float64"),Tensor([4],"float64"),], )
paddle.concat(list[Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),], axis=0, )
paddle.concat(list[Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),Tensor([72],"float64"),], axis=0, )
paddle.concat(list[Tensor([8],"float64"),Tensor([8],"float64"),Tensor([8],"float64"),Tensor([8],"float64"),], axis=0, )
paddle.concat(list[Tensor([9],"float64"),Tensor([9],"float64"),Tensor([9],"float64"),Tensor([9],"float64"),Tensor([9],"float64"),Tensor([9],"float64"),Tensor([9],"float64"),Tensor([9],"float64"),Tensor([9],"float64"),Tensor([9],"float64"),Tensor([9],"float64"),Tensor([9],"float64"),Tensor([9],"float64"),Tensor([9],"float64"),Tensor([9],"float64"),Tensor([9],"float64"),Tensor([9],"float64"),Tensor([9],"float64"),], axis=0, )
paddle.concat(list[Tensor([9],"float64"),Tensor([9],"float64"),], )
paddle.concat(tuple(Tensor([12],"float64"),), )
paddle.concat(tuple(Tensor([16],"float64"),Tensor([16],"float64"),), )
paddle.concat(tuple(Tensor([18],"float64"),Tensor([18],"float64"),), )
paddle.concat(tuple(Tensor([1],"float32"),), )
paddle.concat(tuple(Tensor([1],"float32"),Tensor([1],"float32"),), )
paddle.concat(tuple(Tensor([1],"float64"),), )
paddle.concat(tuple(Tensor([1],"float64"),Tensor([1],"float64"),), )
paddle.concat(tuple(Tensor([2, 12],"float64"),), 1, )
paddle.concat(tuple(Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),), )
paddle.concat(tuple(Tensor([2],"float32"),), )
paddle.concat(tuple(Tensor([2],"float64"),), )
paddle.concat(tuple(Tensor([2],"float64"),Tensor([2],"float64"),), )
paddle.concat(tuple(Tensor([3, 3],"float64"),Tensor([3, 3],"float64"),), 1, )
paddle.concat(tuple(Tensor([36],"float64"),), )
paddle.concat(tuple(Tensor([3],"float64"),Tensor([3],"float64"),), )
paddle.concat(tuple(Tensor([3],"float64"),Tensor([3],"float64"),Tensor([3],"float64"),), )
paddle.concat(tuple(Tensor([4, 1],"float64"),), 1, )
paddle.concat(tuple(Tensor([4, 3],"float64"),), 1, )
paddle.concat(tuple(Tensor([4],"float64"),), )
paddle.concat(tuple(Tensor([4],"float64"),Tensor([4],"float64"),), )
paddle.concat(tuple(Tensor([6],"float64"),), )
paddle.concat(tuple(Tensor([6],"float64"),Tensor([12],"float64"),), )
paddle.concat(tuple(Tensor([6],"float64"),Tensor([6],"float64"),), )
paddle.concat(tuple(Tensor([6],"float64"),Tensor([6],"float64"),Tensor([4],"float64"),), )
paddle.concat(tuple(Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),), )
paddle.concat(tuple(Tensor([8],"float64"),), )
paddle.concat(tuple(Tensor([9],"float64"),), )
paddle.concat(tuple(Tensor([9],"float64"),Tensor([9],"float64"),), )
paddle.concat(x=tuple(Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),), axis=0, )
paddle.concat(x=tuple(Tensor([2, 3],"float64"),Tensor([2, 3],"float64"),), axis=0, )
paddle.concat(x=tuple(Tensor([2, 3],"uint8"),Tensor([2, 3],"uint8"),), axis=0, )
paddle.conj(x=Tensor([20, 10],"complex128"), )
paddle.conj(x=Tensor([20, 10],"complex64"), )
paddle.cos(Tensor([2, 4],"float64"), )
paddle.cos(x=Tensor([3, 3, 3],"float32"), )
paddle.cos(x=Tensor([3, 3, 3],"float64"), )
paddle.cosh(x=Tensor([3, 3, 3],"float32"), )
paddle.cosh(x=Tensor([3, 3, 3],"float64"), )
paddle.crop(x=Tensor([2, 3, 3, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
paddle.crop(x=Tensor([3, 3],"float32"), shape=list[2,2,], )
paddle.crop(x=Tensor([3, 3],"float64"), shape=list[2,2,], )
paddle.crop(x=Tensor([3, 3],"float64"), shape=list[2,2,], offsets=list[1,0,], )
paddle.crop(x=Tensor([3, 3],"float64"), shape=list[2,2,], offsets=tuple(0,0,), )
paddle.crop(x=Tensor([3, 3],"float64"), shape=list[2,2,], offsets=tuple(0,1,), )
paddle.crop(x=Tensor([3, 3],"float64"), shape=list[2,2,], offsets=tuple(1,1,), )
paddle.crop(x=Tensor([3, 3],"int32"), shape=list[2,2,], )
paddle.crop(x=Tensor([3, 3],"int64"), shape=list[2,2,], )
paddle.cross(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), axis=0, )
paddle.cross(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), axis=1, )
paddle.cross(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), axis=2, )
paddle.cross(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.cross(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.cross(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), axis=-1, )
paddle.cross(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), axis=0, )
paddle.cross(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), axis=1, )
paddle.cross(x=Tensor([3, 3],"int32"), y=Tensor([3, 3],"int32"), )
paddle.cross(x=Tensor([3, 3],"int64"), y=Tensor([3, 3],"int64"), )
paddle.cumprod(x=Tensor([12],"float64"), dim=0, )
paddle.cumprod(x=Tensor([2, 3, 2],"float64"), dim=-2, )
paddle.cumprod(x=Tensor([2, 3, 2],"float64"), dim=0, )
paddle.cumprod(x=Tensor([3, 4],"float32"), dim=0, )
paddle.cumprod(x=Tensor([3, 4],"float64"), dim=-1, )
paddle.cumprod(x=Tensor([3, 4],"float64"), dim=0, )
paddle.cumprod(x=Tensor([3, 4],"float64"), dim=1, )
paddle.cumprod(x=Tensor([3, 4],"int32"), dim=0, )
paddle.cumprod(x=Tensor([3, 4],"int64"), dim=0, )
paddle.cumsum(x=Tensor([1, 16, 96, 32],"float64"), axis=2, )
paddle.cumsum(x=Tensor([1, 2, 1, 3],"float64"), axis=-4, )
paddle.cumsum(x=Tensor([1, 2, 1, 3],"float64"), axis=3, )
paddle.cumsum(x=Tensor([1, 2, 1, 3],"float64"), axis=Tensor([1],"float64"), )
paddle.cumsum(x=Tensor([6],"float32"), )
paddle.cumsum(x=Tensor([6],"float64"), )
paddle.diag(x=Tensor([1],"float64"), )
paddle.diag(x=Tensor([1],"float64"), offset=-1, padding_value=-0.001, )
paddle.diag(x=Tensor([2, 3],"float64"), offset=-1, )
paddle.diag(x=Tensor([2, 3],"float64"), offset=0, )
paddle.diag(x=Tensor([2, 3],"float64"), offset=2, )
paddle.diag(x=Tensor([2],"float64"), )
paddle.diag(x=Tensor([2],"float64"), name="test name", )
paddle.diag(x=Tensor([2],"float64"), offset=1, padding_value=1.1, )
paddle.diag(x=Tensor([3, 1],"float64"), )
paddle.diag(x=Tensor([3, 2],"float64"), )
paddle.diag(x=Tensor([3, 2],"float64"), offset=-1, )
paddle.diag(x=Tensor([3, 2],"float64"), offset=0, )
paddle.diag(x=Tensor([3, 2],"float64"), offset=1, )
paddle.diag(x=Tensor([3, 3],"float64"), )
paddle.diag(x=Tensor([3, 3],"float64"), offset=-1, )
paddle.diag(x=Tensor([3, 3],"float64"), offset=0, )
paddle.diag(x=Tensor([3, 3],"float64"), offset=1, )
paddle.diag(x=Tensor([3],"float32"), )
paddle.diag(x=Tensor([3],"float64"), )
paddle.diag(x=Tensor([3],"float64"), offset=-1, )
paddle.diag(x=Tensor([3],"float64"), offset=-2, padding_value=0, )
paddle.diag(x=Tensor([3],"float64"), offset=0, )
paddle.diag(x=Tensor([3],"float64"), offset=10, )
paddle.diag(x=Tensor([3],"int32"), )
paddle.diag(x=Tensor([3],"int64"), )
paddle.diagflat(x=Tensor([3, 2, 2, 1, 2, 4, 2, 2],"float64"), offset=2, )
paddle.diagflat(x=Tensor([3, 2, 2, 1, 2, 4],"float64"), offset=-1, )
paddle.diagflat(x=Tensor([4],"float32"), offset=0, )
paddle.diagflat(x=Tensor([4],"float64"), offset=-1, )
paddle.diagflat(x=Tensor([4],"float64"), offset=0, )
paddle.diagflat(x=Tensor([4],"float64"), offset=1, )
paddle.diagflat(x=Tensor([4],"int32"), offset=0, )
paddle.diagflat(x=Tensor([4],"int64"), offset=0, )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 2],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 2],"float64"), axis1=-1, axis2=2, )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 2],"float64"), axis1=0, axis2=3, )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 2],"float64"), axis1=2, axis2=3, )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 2],"float64"), axis1=3, axis2=4, )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 2],"float64"), axis1=4, axis2=2, )
paddle.diagonal(x=Tensor([6, 6, 6, 6],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 6],"float64"), )
paddle.diagonal(x=Tensor([6, 6],"float32"), )
paddle.diagonal(x=Tensor([6, 6],"float64"), )
paddle.diagonal(x=Tensor([6, 6],"float64"), offset=-1, )
paddle.diagonal(x=Tensor([6, 6],"float64"), offset=1, )
paddle.diagonal(x=Tensor([6, 6],"int32"), )
paddle.diagonal(x=Tensor([6, 6],"int64"), )
paddle.diff(x=Tensor([10, 4],"float64"), axis=0, prepend=Tensor([4, 4],"float64"), append=Tensor([4, 4],"float64"), )
paddle.diff(x=Tensor([100],"float64"), )
paddle.diff(x=Tensor([10],"float64"), prepend=Tensor([4],"float64"), )
paddle.diff(x=Tensor([10],"float64"), prepend=Tensor([4],"float64"), append=Tensor([4],"float64"), )
paddle.diff(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.diff(x=Tensor([4, 4, 4, 4],"float64"), axis=-2, )
paddle.diff(x=Tensor([4, 4, 4, 4],"float64"), axis=2, )
paddle.diff(x=Tensor([4, 4, 4],"float64"), )
paddle.diff(x=Tensor([4, 4],"float64"), )
paddle.diff(x=Tensor([4],"float32"), )
paddle.diff(x=Tensor([4],"float64"), )
paddle.diff(x=Tensor([4],"int32"), )
paddle.diff(x=Tensor([4],"int64"), )
paddle.digamma(Tensor([2, 2, 2],"float32"), )
paddle.digamma(Tensor([2, 2],"float32"), )
paddle.digamma(Tensor([2, 3],"float32"), )
paddle.digamma(Tensor([2],"float32"), )
paddle.digamma(Tensor([3],"float32"), )
paddle.digamma(Tensor([],"float32"), )
paddle.digamma(x=Tensor([3, 3],"float32"), )
paddle.digamma(x=Tensor([3, 3],"float64"), )
paddle.digamma(x=Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.digamma(x=Tensor([6, 6, 6, 6],"float64"), )
paddle.digamma(x=Tensor([6, 6, 6],"float64"), )
paddle.dist(x=Tensor([10],"float64"), y=Tensor([10],"float64"), )
paddle.dist(x=Tensor([10],"float64"), y=Tensor([4, 10],"float64"), )
paddle.dist(x=Tensor([10],"float64"), y=Tensor([4, 10],"float64"), p=4, )
paddle.dist(x=Tensor([2, 1, 1, 4, 4],"float64"), y=Tensor([2, 8, 7, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 4, 4],"float64"), y=Tensor([7, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 2],"float64"), y=Tensor([2, 2],"float64"), p=-math.inf, )
paddle.dist(x=Tensor([2, 2],"float64"), y=Tensor([2, 2],"float64"), p=0, )
paddle.dist(x=Tensor([2, 2],"float64"), y=Tensor([2, 2],"float64"), p=math.inf, )
paddle.dist(x=Tensor([2, 4, 1, 3],"float64"), y=Tensor([4, 3, 1],"float64"), p=7, )
paddle.dist(x=Tensor([4, 4],"float32"), y=Tensor([4, 4],"float32"), )
paddle.dist(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), )
paddle.dist(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), p=1, )
paddle.divide(Tensor([2, 4],"float64"), Tensor([2, 1],"float64"), )
paddle.divide(Tensor([4, 4],"float32"), Tensor([],"float32"), )
paddle.divide(Tensor([4, 4],"float64"), Tensor([1, 4],"float64"), )
paddle.divide(Tensor([4, 4],"float64"), Tensor([],"float64"), )
paddle.divide(x=Tensor([2],"float64"), y=Tensor([2],"float64"), )
paddle.divide(x=Tensor([3, 1],"float64"), y=Tensor([3, 1],"float64"), name=None, )
paddle.divide(x=Tensor([3, 1],"float64"), y=Tensor([3, 2],"float64"), name="", )
paddle.divide(x=Tensor([3, 3, 3],"float64"), y=Tensor([3],"float64"), )
paddle.divide(x=Tensor([3],"float32"), y=Tensor([3],"float32"), )
paddle.divide(x=Tensor([3],"float64"), y=Tensor([3, 1],"float64"), )
paddle.divide(x=Tensor([3],"float64"), y=Tensor([3],"float64"), )
paddle.dot(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.dot(x=Tensor([2, 3],"float64"), y=Tensor([2, 3],"float64"), )
paddle.dot(x=Tensor([6],"float32"), y=Tensor([6],"float32"), )
paddle.dot(x=Tensor([6],"float64"), y=Tensor([6],"float64"), )
paddle.dot(x=Tensor([6],"int32"), y=Tensor([6],"int32"), )
paddle.dot(x=Tensor([6],"int64"), y=Tensor([6],"int64"), )
paddle.einsum("...jk, ...kl->...jl", Tensor([3, 10, 3],"float64"), Tensor([3, 3, 10],"float64"), )
paddle.einsum("...jk->...kj", Tensor([3, 10, 3],"float64"), )
paddle.einsum("i,i->", Tensor([10],"float64"), Tensor([10],"float64"), )
paddle.einsum("i,j->ij", Tensor([10],"float64"), Tensor([6],"float64"), )
paddle.einsum("i->", Tensor([10],"float64"), )
paddle.einsum("ijk, ikl->ijl", Tensor([3, 10, 3],"float64"), Tensor([3, 3, 10],"float64"), )
paddle.einsum("ijk->kji", Tensor([3, 10, 3],"float64"), )
paddle.einsum("xy,yz->xz", Tensor([4, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.empty(shape=Tensor([2],"int32"), dtype="float16", )
paddle.empty(shape=Tensor([2],"int32"), dtype="float32", )
paddle.empty(shape=Tensor([2],"int32"), dtype="float64", )
paddle.empty(shape=Tensor([2],"int32"), dtype="int32", )
paddle.empty(shape=Tensor([2],"int32"), dtype="int64", )
paddle.empty(shape=Tensor([2],"int32"), dtype=None, )
paddle.empty(shape=Tensor([2],"int32"), dtype=type(bool), )
paddle.empty(shape=Tensor([2],"int32"), dtype=type(numpy.float16), )
paddle.empty(shape=Tensor([2],"int32"), dtype=type(numpy.float32), )
paddle.empty(shape=Tensor([2],"int32"), dtype=type(numpy.float64), )
paddle.empty(shape=Tensor([2],"int32"), dtype=type(numpy.int32), )
paddle.empty(shape=Tensor([2],"int32"), dtype=type(numpy.int64), )
paddle.empty(shape=list[1,2,3,], dtype="float16", )
paddle.empty(shape=list[1,2,3,], dtype="float32", )
paddle.empty(shape=list[1,2,3,], dtype="float64", )
paddle.empty(shape=list[1,2,3,], dtype="int32", )
paddle.empty(shape=list[1,2,3,], dtype="int64", )
paddle.empty(shape=list[1,2,3,], dtype=None, )
paddle.empty(shape=list[1,2,3,], dtype=type(bool), )
paddle.empty(shape=list[1,2,3,], dtype=type(numpy.float16), )
paddle.empty(shape=list[1,2,3,], dtype=type(numpy.float32), )
paddle.empty(shape=list[1,2,3,], dtype=type(numpy.float64), )
paddle.empty(shape=list[1,2,3,], dtype=type(numpy.int32), )
paddle.empty(shape=list[1,2,3,], dtype=type(numpy.int64), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype="float16", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype="float32", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype="float64", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype="int32", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype="int64", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype=None, )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype=type(bool), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype=type(numpy.float16), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype=type(numpy.float32), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype=type(numpy.float64), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype=type(numpy.int32), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype=type(numpy.int64), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype="float16", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype="float32", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype="float64", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype="int32", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype="int64", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype=None, )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype=type(bool), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype=type(numpy.float16), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype=type(numpy.float32), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype=type(numpy.float64), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype=type(numpy.int32), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype=type(numpy.int64), )
paddle.empty(shape=tuple(2,3,), dtype="float16", )
paddle.empty(shape=tuple(2,3,), dtype="float32", )
paddle.empty(shape=tuple(2,3,), dtype="float64", )
paddle.empty(shape=tuple(2,3,), dtype="int32", )
paddle.empty(shape=tuple(2,3,), dtype="int64", )
paddle.empty(shape=tuple(2,3,), dtype=None, )
paddle.empty(shape=tuple(2,3,), dtype=type(bool), )
paddle.empty(shape=tuple(2,3,), dtype=type(numpy.float16), )
paddle.empty(shape=tuple(2,3,), dtype=type(numpy.float32), )
paddle.empty(shape=tuple(2,3,), dtype=type(numpy.float64), )
paddle.empty(shape=tuple(2,3,), dtype=type(numpy.int32), )
paddle.empty(shape=tuple(2,3,), dtype=type(numpy.int64), )
paddle.empty_like(x=Tensor([2],"bool"), dtype="float16", )
paddle.empty_like(x=Tensor([2],"bool"), dtype="float32", )
paddle.empty_like(x=Tensor([2],"bool"), dtype="float64", )
paddle.empty_like(x=Tensor([2],"bool"), dtype="int32", )
paddle.empty_like(x=Tensor([2],"bool"), dtype="int64", )
paddle.empty_like(x=Tensor([2],"bool"), dtype=None, )
paddle.empty_like(x=Tensor([2],"bool"), dtype=type(bool), )
paddle.empty_like(x=Tensor([2],"bool"), dtype=type(numpy.float16), )
paddle.empty_like(x=Tensor([2],"bool"), dtype=type(numpy.float32), )
paddle.empty_like(x=Tensor([2],"bool"), dtype=type(numpy.float64), )
paddle.empty_like(x=Tensor([2],"bool"), dtype=type(numpy.int32), )
paddle.empty_like(x=Tensor([2],"bool"), dtype=type(numpy.int64), )
paddle.empty_like(x=Tensor([2],"float16"), dtype="float16", )
paddle.empty_like(x=Tensor([2],"float16"), dtype="float32", )
paddle.empty_like(x=Tensor([2],"float16"), dtype="float64", )
paddle.empty_like(x=Tensor([2],"float16"), dtype="int32", )
paddle.empty_like(x=Tensor([2],"float16"), dtype="int64", )
paddle.empty_like(x=Tensor([2],"float16"), dtype=None, )
paddle.empty_like(x=Tensor([2],"float16"), dtype=type(bool), )
paddle.empty_like(x=Tensor([2],"float16"), dtype=type(numpy.float16), )
paddle.empty_like(x=Tensor([2],"float16"), dtype=type(numpy.float32), )
paddle.empty_like(x=Tensor([2],"float16"), dtype=type(numpy.float64), )
paddle.empty_like(x=Tensor([2],"float16"), dtype=type(numpy.int32), )
paddle.empty_like(x=Tensor([2],"float16"), dtype=type(numpy.int64), )
paddle.empty_like(x=Tensor([2],"float32"), dtype="float16", )
paddle.empty_like(x=Tensor([2],"float32"), dtype="float32", )
paddle.empty_like(x=Tensor([2],"float32"), dtype="float64", )
paddle.empty_like(x=Tensor([2],"float32"), dtype="int32", )
paddle.empty_like(x=Tensor([2],"float32"), dtype="int64", )
paddle.empty_like(x=Tensor([2],"float32"), dtype=None, )
paddle.empty_like(x=Tensor([2],"float32"), dtype=type(bool), )
paddle.empty_like(x=Tensor([2],"float32"), dtype=type(numpy.float16), )
paddle.empty_like(x=Tensor([2],"float32"), dtype=type(numpy.float32), )
paddle.empty_like(x=Tensor([2],"float32"), dtype=type(numpy.float64), )
paddle.empty_like(x=Tensor([2],"float32"), dtype=type(numpy.int32), )
paddle.empty_like(x=Tensor([2],"float32"), dtype=type(numpy.int64), )
paddle.empty_like(x=Tensor([2],"float64"), dtype="float16", )
paddle.empty_like(x=Tensor([2],"float64"), dtype="float32", )
paddle.empty_like(x=Tensor([2],"float64"), dtype="float64", )
paddle.empty_like(x=Tensor([2],"float64"), dtype="int32", )
paddle.empty_like(x=Tensor([2],"float64"), dtype="int64", )
paddle.empty_like(x=Tensor([2],"float64"), dtype=None, )
paddle.empty_like(x=Tensor([2],"float64"), dtype=type(bool), )
paddle.empty_like(x=Tensor([2],"float64"), dtype=type(numpy.float16), )
paddle.empty_like(x=Tensor([2],"float64"), dtype=type(numpy.float32), )
paddle.empty_like(x=Tensor([2],"float64"), dtype=type(numpy.float64), )
paddle.empty_like(x=Tensor([2],"float64"), dtype=type(numpy.int32), )
paddle.empty_like(x=Tensor([2],"float64"), dtype=type(numpy.int64), )
paddle.empty_like(x=Tensor([2],"int32"), dtype="float16", )
paddle.empty_like(x=Tensor([2],"int32"), dtype="float32", )
paddle.empty_like(x=Tensor([2],"int32"), dtype="float64", )
paddle.empty_like(x=Tensor([2],"int32"), dtype="int32", )
paddle.empty_like(x=Tensor([2],"int32"), dtype="int64", )
paddle.empty_like(x=Tensor([2],"int32"), dtype=None, )
paddle.empty_like(x=Tensor([2],"int32"), dtype=type(bool), )
paddle.empty_like(x=Tensor([2],"int32"), dtype=type(numpy.float16), )
paddle.empty_like(x=Tensor([2],"int32"), dtype=type(numpy.float32), )
paddle.empty_like(x=Tensor([2],"int32"), dtype=type(numpy.float64), )
paddle.empty_like(x=Tensor([2],"int32"), dtype=type(numpy.int32), )
paddle.empty_like(x=Tensor([2],"int32"), dtype=type(numpy.int64), )
paddle.empty_like(x=Tensor([2],"int64"), dtype="float16", )
paddle.empty_like(x=Tensor([2],"int64"), dtype="float32", )
paddle.empty_like(x=Tensor([2],"int64"), dtype="float64", )
paddle.empty_like(x=Tensor([2],"int64"), dtype="int32", )
paddle.empty_like(x=Tensor([2],"int64"), dtype="int64", )
paddle.empty_like(x=Tensor([2],"int64"), dtype=None, )
paddle.empty_like(x=Tensor([2],"int64"), dtype=type(bool), )
paddle.empty_like(x=Tensor([2],"int64"), dtype=type(numpy.float16), )
paddle.empty_like(x=Tensor([2],"int64"), dtype=type(numpy.float32), )
paddle.empty_like(x=Tensor([2],"int64"), dtype=type(numpy.float64), )
paddle.empty_like(x=Tensor([2],"int64"), dtype=type(numpy.int32), )
paddle.empty_like(x=Tensor([2],"int64"), dtype=type(numpy.int64), )
paddle.equal(Tensor([18, 18],"float32"), Tensor([18, 18],"float32"), )
paddle.equal(Tensor([4, 4],"int64"), Tensor([1],"int64"), )
paddle.equal(Tensor([4, 8],"int64"), Tensor([1],"int64"), )
paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.equal(x=Tensor([1, 1, 3, 3],"float64"), y=Tensor([1, 3],"float64"), )
paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 1, 3, 3],"float64"), )
paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 3, 3],"float64"), )
paddle.equal(x=Tensor([3, 3, 1],"float64"), y=Tensor([3, 3, 3, 1],"float64"), )
paddle.equal(x=Tensor([3, 3, 3, 1],"float64"), y=Tensor([3, 3, 1],"float64"), )
paddle.equal(x=Tensor([3, 3, 3],"float32"), y=Tensor([3, 3, 3],"float32"), )
paddle.equal(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), )
paddle.equal(x=Tensor([3, 3, 3],"int32"), y=Tensor([3, 3, 3],"int32"), )
paddle.equal(x=Tensor([3, 3, 3],"int64"), y=Tensor([3, 3, 3],"int64"), )
paddle.equal(x=Tensor([3, 3],"float64"), y=Tensor([1, 3],"float64"), )
paddle.equal(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.equal(x=Tensor([3, 3],"float64"), y=Tensor([3],"float64"), )
paddle.equal_all(x=Tensor([1, 1, 1, 2, 3],"float64"), y=Tensor([1, 1, 1, 2, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 2, 3],"float64"), y=Tensor([2, 3],"float64"), )
paddle.equal_all(x=Tensor([2, 3],"float64"), y=Tensor([1, 3],"float64"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float32"), y=Tensor([3, 3, 3],"float32"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.equal_all(x=Tensor([3, 3, 3],"int32"), y=Tensor([3, 3, 3],"int32"), )
paddle.equal_all(x=Tensor([3, 3, 3],"int64"), y=Tensor([3, 3, 3],"int64"), )
paddle.erf(Tensor([4, 2, 3, 5, 4],"float64"), )
paddle.erf(Tensor([4, 2, 3, 5],"float64"), )
paddle.erf(Tensor([4, 2, 3],"float64"), )
paddle.erf(Tensor([4, 2],"float64"), )
paddle.erf(Tensor([4],"float64"), )
paddle.erf(x=Tensor([2, 2],"float32"), )
paddle.erf(x=Tensor([2, 2],"float64"), )
paddle.erf(x=Tensor([4],"float32"), )
paddle.erf(x=Tensor([4],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 3, 5, 4],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 3, 5],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 3],"float64"), )
paddle.erfinv(x=Tensor([4, 2],"float64"), )
paddle.erfinv(x=Tensor([4],"float32"), )
paddle.erfinv(x=Tensor([4],"float64"), )
paddle.exp(Tensor([10, 2, 1, 2],"float32"), )
paddle.exp(Tensor([10, 2, 2],"float32"), )
paddle.exp(Tensor([10, 3],"float64"), )
paddle.exp(Tensor([1],"float32"), )
paddle.exp(Tensor([2, 1, 2],"float32"), )
paddle.exp(Tensor([2, 2],"float32"), )
paddle.exp(Tensor([2, 3],"float32"), )
paddle.exp(Tensor([2],"float32"), )
paddle.exp(Tensor([3],"float64"), )
paddle.exp(Tensor([],"float32"), )
paddle.exp(Tensor([],"float64"), )
paddle.exp(x=Tensor([3, 3, 3],"float32"), )
paddle.exp(x=Tensor([3, 3, 3],"float64"), )
paddle.expand(Tensor([1, 3, 1, 1, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.expand(x=Tensor([1, 1, 1],"int64"), shape=Tensor([3],"int32"), )
paddle.expand(x=Tensor([1],"float64"), shape=Tensor([2],"int32"), )
paddle.expand(x=Tensor([1],"int32"), shape=list[1,], )
paddle.expand(x=Tensor([1],"int64"), shape=Tensor([2],"int32"), )
paddle.expand(x=Tensor([1],"int64"), shape=list[1,1,1,1,1,1,], )
paddle.expand(x=Tensor([1],"int64"), shape=list[1,], )
paddle.expand(x=Tensor([1],"int64"), shape=list[2,], )
paddle.expand(x=Tensor([2, 2],"int64"), shape=Tensor([3],"int32"), )
paddle.expand(x=Tensor([2],"int64"), shape=list[1,-1,], )
paddle.expand(x=Tensor([3, 1],"int64"), shape=tuple(3,2,), )
paddle.expand(x=Tensor([3],"float64"), shape=list[3,3,], )
paddle.expand(x=Tensor([3],"int32"), shape=tuple(3,3,), )
paddle.expand(x=Tensor([3],"int64"), shape=list[2,3,], )
paddle.expand_as(x=Tensor([1],"int32"), y=Tensor([1],"int32"), )
paddle.expand_as(x=Tensor([1],"int64"), y=Tensor([1, 1, 1, 1, 1, 1],"int64"), )
paddle.expand_as(x=Tensor([2, 2],"int32"), y=Tensor([1, 2, 2],"int32"), )
paddle.expand_as(x=Tensor([2],"int32"), y=Tensor([2, 1, 2],"int32"), )
paddle.expand_as(x=Tensor([3, 1],"int64"), y=Tensor([3, 2],"int64"), )
paddle.expand_as(x=Tensor([3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.expand_as(x=Tensor([3],"int32"), y=Tensor([3, 3],"int32"), )
paddle.expand_as(x=Tensor([3],"int64"), y=Tensor([2, 3],"int64"), )
paddle.expm1(x=Tensor([3, 3, 3],"float16"), )
paddle.expm1(x=Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.expm1(x=Tensor([6, 6, 6, 6],"float64"), )
paddle.expm1(x=Tensor([6, 6, 6],"float64"), )
paddle.expm1(x=Tensor([6, 6],"float32"), )
paddle.expm1(x=Tensor([6, 6],"float64"), )
paddle.eye(num_rows=3, )
paddle.eye(num_rows=3, dtype="float16", )
paddle.eye(num_rows=3, num_columns=5, )
paddle.eye(num_rows=5, dtype="int64", )
paddle.eye(num_rows=5, dtype=type(numpy.float16), )
paddle.eye(num_rows=5, num_columns=3, dtype="float32", )
paddle.eye(num_rows=5, num_columns=3, dtype="float64", )
paddle.eye(num_rows=Tensor([1],"float64"), num_columns=Tensor([1],"float64"), dtype="float32", )
paddle.fft.fft(x=Tensor([2, 3],"complex128"), norm="ortho", )
paddle.fft.fft(x=Tensor([7],"complex128"), )
paddle.fft.fft(x=Tensor([7],"complex128"), axis=0, )
paddle.fft.fft(x=Tensor([7],"complex128"), n=1, )
paddle.fft.fft(x=Tensor([7],"complex128"), norm="forward", )
paddle.fft.fft(x=Tensor([7],"complex128"), norm="ortho", )
paddle.fft.fft(x=Tensor([7],"float32"), )
paddle.fft.fft(x=Tensor([7],"float64"), )
paddle.fft.fft2(x=Tensor([2, 2, 4],"complex128"), )
paddle.fft.fft2(x=Tensor([2, 4, 2],"complex128"), axes=tuple(1,2,), )
paddle.fft.fft2(x=Tensor([2, 4, 2],"complex128"), axes=tuple(1,2,), norm="forward", )
paddle.fft.fft2(x=Tensor([2, 4, 2],"complex128"), axes=tuple(1,2,), norm="ortho", )
paddle.fft.fft2(x=Tensor([2, 4],"float64"), )
paddle.fft.fft2(x=Tensor([3, 2, 4, 2],"complex128"), )
paddle.fft.fft2(x=Tensor([3, 3, 2, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.fft2(x=Tensor([3, 4],"complex128"), )
paddle.fft.fft2(x=Tensor([4, 4],"float32"), )
paddle.fft.fft2(x=Tensor([4, 4],"float64"), )
paddle.fft.fftfreq(n=10, d=0.1, )
paddle.fft.fftfreq(n=4, d=0.5, )
paddle.fft.fftn(Tensor([2, 2, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.fftn(Tensor([2, 4, 2],"complex128"), None, tuple(1,2,), "backward", None, )
paddle.fft.fftn(Tensor([2, 4, 2],"complex128"), None, tuple(1,2,), "forward", None, )
paddle.fft.fftn(Tensor([2, 4, 2],"complex128"), None, tuple(1,2,), "ortho", None, )
paddle.fft.fftn(Tensor([2, 4],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.fftn(Tensor([3, 2, 4, 2],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.fftn(Tensor([3, 3, 2, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.fftn(Tensor([3, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.fftn(Tensor([4, 4],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.fftn(Tensor([4, 4],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.fftn(x=Tensor([2, 4, 2],"float64"), )
paddle.fft.fftn(x=Tensor([3, 4],"complex128"), norm="forward", )
paddle.fft.fftn(x=Tensor([3, 4],"complex128"), norm="ortho", )
paddle.fft.fftn(x=Tensor([4, 4, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
paddle.fft.fftn(x=Tensor([4, 4, 6],"float64"), s=list[1,], )
paddle.fft.fftn(x=Tensor([4, 4, 6],"float64"), s=list[2,4,], )
paddle.fft.fftn(x=Tensor([4, 4],"float32"), )
paddle.fft.fftn(x=Tensor([4, 4],"float64"), )
paddle.fft.fftshift(x=Tensor([10],"float32"), )
paddle.fft.fftshift(x=Tensor([10],"float64"), )
paddle.fft.fftshift(x=Tensor([2, 4, 2],"float64"), )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 4],"complex128"), )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 4],"complex128"), axes=3, )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 4],"complex128"), axes=tuple(1,3,), )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 4],"float64"), )
paddle.fft.fftshift(x=Tensor([4, 5, 4],"float64"), )
paddle.fft.hfft(x=Tensor([10],"complex128"), )
paddle.fft.hfft(x=Tensor([10],"complex64"), )
paddle.fft.hfft(x=Tensor([2, 4, 3],"complex128"), )
paddle.fft.hfft(x=Tensor([2, 4],"complex128"), )
paddle.fft.hfft(x=Tensor([2, 4],"complex128"), norm="forward", )
paddle.fft.hfft(x=Tensor([2, 4],"complex128"), norm="ortho", )
paddle.fft.hfft(x=Tensor([3, 2, 2, 3],"complex128"), )
paddle.fft.hfft(x=Tensor([3, 2, 2, 3],"complex128"), n=2, )
paddle.fft.hfft(x=Tensor([3, 2, 2, 3],"complex128"), n=2, axis=1, )
paddle.fft.hfft2(x=Tensor([1, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.hfft2(x=Tensor([1, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.hfft2(x=Tensor([1, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.hfft2(x=Tensor([3, 1, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.hfft2(x=Tensor([3, 3, 3, 3],"complex128"), )
paddle.fft.hfft2(x=Tensor([3, 4, 5],"complex128"), )
paddle.fft.hfft2(x=Tensor([3, 4],"complex128"), )
paddle.fft.hfft2(x=Tensor([3, 4],"complex64"), )
paddle.fft.hfftn(Tensor([1, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )
paddle.fft.hfftn(Tensor([1, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )
paddle.fft.hfftn(Tensor([1, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )
paddle.fft.hfftn(Tensor([3, 1, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([3, 3, 3, 3],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([3, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([3, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([3, 4],"complex64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(x=Tensor([1, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.hfftn(x=Tensor([1, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.hfftn(x=Tensor([1, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.hfftn(x=Tensor([2, 3, 1, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.hfftn(x=Tensor([2, 3, 4, 2],"complex128"), )
paddle.fft.hfftn(x=Tensor([3, 4, 5],"complex128"), )
paddle.fft.hfftn(x=Tensor([3, 4],"complex128"), )
paddle.fft.hfftn(x=Tensor([3],"complex128"), )
paddle.fft.hfftn(x=Tensor([3],"complex64"), )
paddle.fft.ifft(x=Tensor([2, 3],"complex128"), norm="ortho", )
paddle.fft.ifft(x=Tensor([7],"complex128"), )
paddle.fft.ifft(x=Tensor([7],"complex128"), axis=0, )
paddle.fft.ifft(x=Tensor([7],"complex128"), n=1, )
paddle.fft.ifft(x=Tensor([7],"complex128"), norm="forward", )
paddle.fft.ifft(x=Tensor([7],"complex128"), norm="ortho", )
paddle.fft.ifft(x=Tensor([7],"float32"), )
paddle.fft.ifft(x=Tensor([7],"float64"), )
paddle.fft.ifft2(x=Tensor([2, 2, 4],"complex128"), )
paddle.fft.ifft2(x=Tensor([2, 4, 2],"complex128"), axes=tuple(1,2,), )
paddle.fft.ifft2(x=Tensor([2, 4, 2],"complex128"), axes=tuple(1,2,), norm="forward", )
paddle.fft.ifft2(x=Tensor([2, 4, 2],"complex128"), axes=tuple(1,2,), norm="ortho", )
paddle.fft.ifft2(x=Tensor([2, 4],"float64"), )
paddle.fft.ifft2(x=Tensor([3, 2, 4, 2],"complex128"), )
paddle.fft.ifft2(x=Tensor([3, 3, 2, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.ifft2(x=Tensor([3, 4],"complex128"), )
paddle.fft.ifft2(x=Tensor([4, 4],"float32"), )
paddle.fft.ifft2(x=Tensor([4, 4],"float64"), )
paddle.fft.ifftn(Tensor([2, 2, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([2, 4, 2],"complex128"), None, tuple(1,2,), "backward", None, )
paddle.fft.ifftn(Tensor([2, 4, 2],"complex128"), None, tuple(1,2,), "forward", None, )
paddle.fft.ifftn(Tensor([2, 4, 2],"complex128"), None, tuple(1,2,), "ortho", None, )
paddle.fft.ifftn(Tensor([2, 4],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([3, 2, 4, 2],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([3, 3, 2, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([3, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([4, 4],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([4, 4],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(x=Tensor([2, 4, 2],"float64"), )
paddle.fft.ifftn(x=Tensor([3, 4],"complex128"), norm="forward", )
paddle.fft.ifftn(x=Tensor([3, 4],"complex128"), norm="ortho", )
paddle.fft.ifftn(x=Tensor([4, 4, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
paddle.fft.ifftn(x=Tensor([4, 4, 6],"float64"), s=list[1,], )
paddle.fft.ifftn(x=Tensor([4, 4, 6],"float64"), s=list[2,4,], )
paddle.fft.ifftn(x=Tensor([4, 4],"float32"), )
paddle.fft.ifftn(x=Tensor([4, 4],"float64"), )
paddle.fft.ifftshift(x=Tensor([2, 4, 2],"float64"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 4],"complex128"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 4],"complex128"), axes=3, )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 4],"complex128"), axes=tuple(0,3,), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 4],"float64"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4],"float64"), )
paddle.fft.ifftshift(x=Tensor([5],"float32"), )
paddle.fft.ifftshift(x=Tensor([5],"float64"), )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 3],"float64"), )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 3],"float64"), n=2, )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 3],"float64"), n=2, axis=1, )
paddle.fft.ihfft(x=Tensor([2, 4],"float64"), norm="forward", )
paddle.fft.ihfft(x=Tensor([2, 4],"float64"), norm="ortho", )
paddle.fft.ihfft(x=Tensor([4, 3, 3],"float64"), )
paddle.fft.ihfft(x=Tensor([4, 3],"float64"), )
paddle.fft.ihfft(x=Tensor([4],"float32"), )
paddle.fft.ihfft(x=Tensor([4],"float64"), )
paddle.fft.ihfft2(x=Tensor([3, 4, 5],"float64"), )
paddle.fft.ihfft2(x=Tensor([3, 4],"float32"), )
paddle.fft.ihfft2(x=Tensor([3, 4],"float64"), )
paddle.fft.ihfft2(x=Tensor([4, 3, 3, 3],"float64"), )
paddle.fft.ihfft2(x=Tensor([4, 3, 3],"float64"), s=tuple(1,2,), )
paddle.fft.ihfft2(x=Tensor([4, 3, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.ihfft2(x=Tensor([4, 3, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.ihfft2(x=Tensor([4, 3, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.ihfftn(Tensor([3, 4, 5],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([3, 4],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([3, 4],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([4, 3, 3, 3],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([4, 3, 3],"float64"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([4, 3, 3],"float64"), tuple(1,2,), tuple(0,2,), "backward", None, )
paddle.fft.ihfftn(Tensor([4, 3, 3],"float64"), tuple(1,2,), tuple(0,2,), "forward", None, )
paddle.fft.ihfftn(Tensor([4, 3, 3],"float64"), tuple(1,2,), tuple(0,2,), "ortho", None, )
paddle.fft.ihfftn(x=Tensor([4, 3, 2],"float64"), s=tuple(1,2,), )
paddle.fft.ihfftn(x=Tensor([4, 3, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.ihfftn(x=Tensor([4, 3, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.ihfftn(x=Tensor([4, 3, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.ihfftn(x=Tensor([4, 3, 5, 2],"float64"), )
paddle.fft.ihfftn(x=Tensor([4, 3, 5],"float64"), )
paddle.fft.ihfftn(x=Tensor([4, 3],"float64"), )
paddle.fft.ihfftn(x=Tensor([4],"float32"), )
paddle.fft.ihfftn(x=Tensor([4],"float64"), )
paddle.fft.irfft(x=Tensor([3, 2, 4],"complex128"), n=2, axis=1, )
paddle.fft.irfft(x=Tensor([3, 4, 4, 2],"complex128"), )
paddle.fft.irfft(x=Tensor([3, 4, 4],"complex128"), )
paddle.fft.irfft(x=Tensor([3, 4, 4],"complex128"), norm="forward", )
paddle.fft.irfft(x=Tensor([3, 4, 4],"complex128"), norm="ortho", )
paddle.fft.irfft(x=Tensor([3, 4],"complex128"), )
paddle.fft.irfft(x=Tensor([3],"complex128"), )
paddle.fft.irfft(x=Tensor([3],"complex64"), )
paddle.fft.irfft(x=Tensor([4, 4, 2],"complex128"), n=2, )
paddle.fft.irfft2(x=Tensor([1, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.irfft2(x=Tensor([1, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.irfft2(x=Tensor([1, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.irfft2(x=Tensor([3, 1, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.irfft2(x=Tensor([3, 2, 4, 5],"complex128"), )
paddle.fft.irfft2(x=Tensor([3, 4, 5],"complex128"), )
paddle.fft.irfft2(x=Tensor([3, 4],"complex128"), )
paddle.fft.irfft2(x=Tensor([3, 4],"complex64"), )
paddle.fft.irfftn(Tensor([1, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )
paddle.fft.irfftn(Tensor([1, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )
paddle.fft.irfftn(Tensor([1, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )
paddle.fft.irfftn(Tensor([3, 1, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([3, 2, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([3, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([3, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([3, 4],"complex64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(x=Tensor([1, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.irfftn(x=Tensor([1, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.irfftn(x=Tensor([1, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.irfftn(x=Tensor([2, 3, 1, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.irfftn(x=Tensor([2, 3, 4, 2],"complex128"), )
paddle.fft.irfftn(x=Tensor([3, 4, 5],"complex128"), )
paddle.fft.irfftn(x=Tensor([3, 4],"complex128"), )
paddle.fft.irfftn(x=Tensor([3],"complex128"), )
paddle.fft.irfftn(x=Tensor([3],"complex64"), )
paddle.fft.rfft(x=Tensor([2, 2, 2],"float32"), )
paddle.fft.rfft(x=Tensor([2, 2, 2],"float64"), )
paddle.fft.rfft(x=Tensor([2, 2, 2],"float64"), n=1, )
paddle.fft.rfft(x=Tensor([2, 2, 2],"float64"), n=1, norm="backward", )
paddle.fft.rfft(x=Tensor([2, 2, 2],"float64"), n=1, norm="forward", )
paddle.fft.rfft(x=Tensor([2, 2, 2],"float64"), n=1, norm="ortho", )
paddle.fft.rfft(x=Tensor([2, 2, 2],"float64"), n=1, norm="ortho", axis=2, )
paddle.fft.rfft(x=Tensor([2, 2, 2],"int32"), )
paddle.fft.rfft(x=Tensor([2, 2, 2],"int64"), )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"float32"), )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"float64"), )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"float64"), s=list[1,2,], )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"float64"), s=list[1,2,], norm="backward", )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"float64"), s=list[1,2,], norm="forward", )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"float64"), s=list[1,2,], norm="ortho", )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"float64"), s=list[1,2,], norm="ortho", axes=None, )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"int32"), )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"int64"), )
paddle.fft.rfftfreq(n=5, d=0.3, )
paddle.fft.rfftfreq(n=8, d=0.3, )
paddle.fft.rfftfreq(n=8, d=1, )
paddle.fft.rfftn(Tensor([2, 2, 2],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([2, 2, 2],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([2, 2, 2],"float64"), list[1,2,], None, "ortho", None, )
paddle.fft.rfftn(Tensor([2, 2, 2],"float64"), list[1,2,], tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([2, 2, 2],"float64"), list[1,2,], tuple(-2,-1,), "forward", None, )
paddle.fft.rfftn(Tensor([2, 2, 2],"float64"), list[1,2,], tuple(-2,-1,), "ortho", None, )
paddle.fft.rfftn(Tensor([2, 2, 2],"int32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([2, 2, 2],"int64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"float32"), )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"float64"), )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"float64"), s=list[1,], )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"float64"), s=list[1,], axes=list[0,], norm="ortho", )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"float64"), s=list[1,], norm="backward", )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"float64"), s=list[1,], norm="forward", )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"float64"), s=list[1,], norm="ortho", )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"int32"), )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"int64"), )
paddle.flatten(Tensor([1, 16, 5, 5],"float32"), 1, )
paddle.flatten(Tensor([1, 2, 3],"float64"), start_axis=-3, stop_axis=-3, )
paddle.flatten(Tensor([1, 2, 3],"float64"), start_axis=0, stop_axis=1, )
paddle.flatten(Tensor([1, 2, 3],"float64"), start_axis=1, stop_axis=2, )
paddle.flatten(Tensor([2, 2, 3],"float64"), start_axis=-1, stop_axis=-1, )
paddle.flatten(Tensor([2, 2, 3],"float64"), start_axis=-3, stop_axis=1, )
paddle.flatten(Tensor([2, 2, 3],"float64"), start_axis=0, stop_axis=-1, )
paddle.flatten(Tensor([2, 2, 3],"float64"), start_axis=0, stop_axis=2, )
paddle.flatten(Tensor([2, 2, 3],"float64"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 3, 4, 5],"float64"), start_axis=-2, stop_axis=-1, )
paddle.flatten(Tensor([2, 3, 4, 5],"float64"), start_axis=-3, stop_axis=-1, )
paddle.flatten(Tensor([2, 3, 4],"float64"), start_axis=-2, stop_axis=1, )
paddle.flatten(Tensor([2, 4],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 4],"float64"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 4],"int32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 4],"int64"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([3, 100, 100],"float64"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([3, 6, 3, 4, 2, 5],"float64"), )
paddle.flatten(Tensor([4, 2, 4, 4, 5],"float64"), )
paddle.flatten(Tensor([4, 2, 4, 5],"float64"), )
paddle.flatten(Tensor([4, 2, 4],"float64"), )
paddle.flatten(Tensor([4, 2],"float64"), )
paddle.flatten(Tensor([4],"float32"), )
paddle.flatten(Tensor([4],"float64"), )
paddle.flatten(x=Tensor([1, 2, 3],"float64"), start_axis=-3, stop_axis=-3, )
paddle.flatten(x=Tensor([1, 2, 3],"float64"), start_axis=0, stop_axis=1, )
paddle.flatten(x=Tensor([1, 2, 3],"float64"), start_axis=1, stop_axis=2, )
paddle.flatten(x=Tensor([2, 2, 3],"float32"), )
paddle.flatten(x=Tensor([2, 2, 3],"float64"), )
paddle.flatten(x=Tensor([2, 2, 3],"float64"), start_axis=-3, stop_axis=1, )
paddle.flatten(x=Tensor([2, 2, 3],"float64"), start_axis=0, )
paddle.flatten(x=Tensor([2, 2, 3],"float64"), start_axis=0, stop_axis=-1, )
paddle.flatten(x=Tensor([2, 2, 3],"float64"), start_axis=0, stop_axis=2, )
paddle.flatten(x=Tensor([2, 2, 3],"float64"), stop_axis=-1, )
paddle.flatten(x=Tensor([2, 2, 3],"int32"), )
paddle.flatten(x=Tensor([2, 2, 3],"int64"), )
paddle.flatten(x=Tensor([2, 2, 3],"int8"), )
paddle.flatten(x=Tensor([2, 3, 4, 5],"float64"), start_axis=-2, stop_axis=-1, )
paddle.flatten(x=Tensor([2, 3, 4, 5],"float64"), start_axis=-3, stop_axis=-1, )
paddle.flatten(x=Tensor([2, 3, 4],"float64"), start_axis=-2, stop_axis=1, )
paddle.flatten(x=Tensor([2],"float64"), )
paddle.flatten(x=Tensor([3, 100, 100],"float64"), )
paddle.flatten(x=Tensor([3, 3, 3],"float64"), name="test_name", )
paddle.flip(x=Tensor([3, 3, 3, 3, 3, 3],"float64"), axis=list[-1,0,3,4,2,], )
paddle.flip(x=Tensor([3, 3, 3],"bool"), axis=list[0,], )
paddle.flip(x=Tensor([3, 3, 3],"float64"), axis=list[-1,0,1,], )
paddle.flip(x=Tensor([3, 3, 3],"float64"), axis=list[0,1,2,], )
paddle.flip(x=Tensor([3, 3, 3],"float64"), axis=list[0,], )
paddle.floor(Tensor([1, 3, 3],"float32"), )
paddle.floor(Tensor([1, 3, 3],"float64"), )
paddle.floor(Tensor([1],"float64"), )
paddle.floor(Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.floor(Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.floor(Tensor([3, 6, 3, 4, 2, 1],"float64"), )
paddle.floor(x=Tensor([3, 3, 3],"float32"), )
paddle.floor(x=Tensor([3, 3, 3],"float64"), )
paddle.floor_divide(Tensor([4, 4],"int64"), Tensor([1],"int64"), )
paddle.floor_divide(Tensor([4, 8],"int64"), Tensor([1],"int64"), )
paddle.floor_divide(x=Tensor([2],"int32"), y=Tensor([2],"int32"), )
paddle.floor_divide(x=Tensor([3, 1],"int32"), y=Tensor([3, 1],"int32"), name="", )
paddle.floor_divide(x=Tensor([3, 1],"int32"), y=Tensor([3, 1],"int32"), name=None, )
paddle.floor_divide(x=Tensor([3, 3, 3],"int32"), y=Tensor([3],"int32"), )
paddle.floor_divide(x=Tensor([3],"int32"), y=Tensor([3],"int32"), )
paddle.floor_divide(x=Tensor([3],"int64"), y=Tensor([3],"int64"), )
paddle.full(list[5,3,0,5,], 0, Dtype(float32), )
paddle.full(shape=Tensor([2],"int64"), fill_value=1, dtype=type(numpy.int32), )
paddle.full(shape=Tensor([2],"int64"), fill_value=1, dtype=type(numpy.int64), )
paddle.full(shape=Tensor([2],"int64"), fill_value=1.1, dtype=type(numpy.float16), )
paddle.full(shape=Tensor([2],"int64"), fill_value=1.1, dtype=type(numpy.float32), )
paddle.full(shape=Tensor([2],"int64"), fill_value=False, dtype=type(bool), )
paddle.full(shape=Tensor([2],"int64"), fill_value=Tensor([1],"float32"), dtype="float32", )
paddle.full(shape=Tensor([2],"int64"), fill_value=Tensor([1],"float32"), dtype=type(numpy.float32), )
paddle.full(shape=Tensor([2],"int64"), fill_value=Tensor([1],"int32"), dtype=type(numpy.int32), )
paddle.full(shape=Tensor([2],"int64"), fill_value=True, dtype=type(bool), )
paddle.full(shape=list[1,1,2,], fill_value=0, dtype=Dtype(float32), )
paddle.full(shape=list[1,1,2,], fill_value=0, dtype=Dtype(float64), )
paddle.full(shape=list[1,1,3,], fill_value=0, dtype=Dtype(float32), )
paddle.full(shape=list[1,1,3,], fill_value=0, dtype=Dtype(float64), )
paddle.full(shape=list[1,3,], fill_value=0.0, dtype="float32", )
paddle.full(shape=list[1,3,], fill_value=0.0, dtype="float64", )
paddle.full(shape=list[1,4,], fill_value=0.0, dtype="float32", )
paddle.full(shape=list[1,], dtype="int64", fill_value=0, )
paddle.full(shape=list[1,], dtype="int64", fill_value=1, )
paddle.full(shape=list[1,], dtype="int64", fill_value=16, )
paddle.full(shape=list[1,], dtype="int64", fill_value=2, )
paddle.full(shape=list[1,], dtype="int64", fill_value=32, )
paddle.full(shape=list[1,], fill_value=0, dtype="int64", )
paddle.full(shape=list[1,], fill_value=1e-12, dtype=Dtype(float32), )
paddle.full(shape=list[1,], fill_value=1e-12, dtype=Dtype(float64), )
paddle.full(shape=list[16,4,16,], fill_value=0.0, dtype=Dtype(float32), )
paddle.full(shape=list[2,1,3,], fill_value=0, dtype=Dtype(float32), )
paddle.full(shape=list[3,2,], fill_value=1, )
paddle.full(shape=list[3,2,], fill_value=1, dtype=type(numpy.int32), )
paddle.full(shape=list[3,2,], fill_value=1, dtype=type(numpy.int64), )
paddle.full(shape=list[3,2,], fill_value=1.1, dtype=type(numpy.float16), )
paddle.full(shape=list[3,2,], fill_value=1.1, dtype=type(numpy.float32), )
paddle.full(shape=list[3,2,], fill_value=False, dtype=type(bool), )
paddle.full(shape=list[3,2,], fill_value=Tensor([1],"float32"), dtype="float32", )
paddle.full(shape=list[3,2,], fill_value=Tensor([1],"float32"), dtype=type(numpy.float32), )
paddle.full(shape=list[3,2,], fill_value=Tensor([1],"int32"), dtype=type(numpy.int32), )
paddle.full(shape=list[3,2,], fill_value=True, dtype=type(bool), )
paddle.full(shape=list[4,1,3,], fill_value=0, dtype=Dtype(float32), )
paddle.full(shape=list[4,16,], fill_value=0.0, dtype="float32", )
paddle.full(shape=list[4,32,], fill_value=0.0, dtype="float32", )
paddle.full(shape=list[4,4,16,22,], fill_value=0.0, dtype=Dtype(float32), )
paddle.full(shape=list[4,4,16,], fill_value=-2, dtype=Dtype(float32), )
paddle.full(shape=list[4,4,16,], fill_value=0.0, dtype="float32", )
paddle.full(shape=list[4,4,16,], fill_value=0.0, dtype=Dtype(float32), )
paddle.full(shape=list[4,4,16,], fill_value=0.0, dtype=Dtype(float64), )
paddle.full(shape=list[4,4,16,], fill_value=1, dtype=Dtype(float32), )
paddle.full(shape=list[4,4,16,], fill_value=1e+22, dtype=Dtype(float32), )
paddle.full(shape=list[4,4,], fill_value=0.0, dtype="float32", )
paddle.full(shape=list[6,4,16,], fill_value=0.0, dtype=Dtype(float32), )
paddle.full(shape=list[Tensor([],"int64"),4,], fill_value=False, dtype="bool", )
paddle.full(shape=list[Tensor([],"int64"),4,], fill_value=Tensor([1],"int64"), dtype=Dtype(int64), )
paddle.full(shape=list[Tensor([],"int64"),8,], fill_value=False, dtype="bool", )
paddle.full(shape=list[Tensor([],"int64"),8,], fill_value=Tensor([1],"int64"), dtype=Dtype(int64), )
paddle.full(shape=list[], fill_value=0.0, dtype=Dtype(float64), )
paddle.full(shape=list[], fill_value=0.2, )
paddle.full(shape=list[], fill_value=0.2, dtype=Dtype(float64), )
paddle.full(shape=list[], fill_value=0.5, )
paddle.full(shape=list[], fill_value=0.5, dtype=Dtype(float32), )
paddle.full(shape=list[], fill_value=0.5, dtype=Dtype(float64), )
paddle.full(shape=list[], fill_value=0.7, )
paddle.full(shape=list[], fill_value=1, )
paddle.full(shape=list[], fill_value=1.0, dtype=Dtype(float64), )
paddle.full(shape=list[], fill_value=10, dtype=Dtype(float32), )
paddle.full(shape=list[], fill_value=10, dtype=Dtype(float64), )
paddle.full(shape=tuple(3,2,), fill_value=1, dtype=type(numpy.int32), )
paddle.full(shape=tuple(3,2,), fill_value=1, dtype=type(numpy.int64), )
paddle.full(shape=tuple(3,2,), fill_value=1.1, dtype=type(numpy.float16), )
paddle.full(shape=tuple(3,2,), fill_value=1.1, dtype=type(numpy.float32), )
paddle.full(shape=tuple(3,2,), fill_value=False, dtype=type(bool), )
paddle.full(shape=tuple(3,2,), fill_value=Tensor([1],"float32"), dtype="float32", )
paddle.full(shape=tuple(3,2,), fill_value=Tensor([1],"float32"), dtype=type(numpy.float32), )
paddle.full(shape=tuple(3,2,), fill_value=Tensor([1],"int32"), dtype=type(numpy.int32), )
paddle.full(shape=tuple(3,2,), fill_value=True, dtype=type(bool), )
paddle.full_like(Tensor([1, 3, 3],"float32"), fill_value=2, )
paddle.full_like(Tensor([1, 3, 3],"float64"), fill_value=2, )
paddle.full_like(Tensor([1],"float64"), fill_value=2159, )
paddle.full_like(Tensor([3, 6, 3, 1, 2, 5],"float64"), fill_value=3, )
paddle.full_like(Tensor([3, 6, 3, 4, 1, 5],"float64"), fill_value=1, )
paddle.full_like(Tensor([3, 6, 3, 4, 2, 1],"float64"), fill_value=4, )
paddle.full_like(x=Tensor([2],"bool"), fill_value=1, )
paddle.full_like(x=Tensor([2],"float16"), fill_value=1, )
paddle.full_like(x=Tensor([2],"float32"), fill_value=1, )
paddle.full_like(x=Tensor([2],"float64"), fill_value=-math.inf, )
paddle.full_like(x=Tensor([2],"float64"), fill_value=1, )
paddle.full_like(x=Tensor([2],"float64"), fill_value=1, dtype="int32", )
paddle.full_like(x=Tensor([2],"float64"), fill_value=1, dtype="int64", )
paddle.full_like(x=Tensor([2],"float64"), fill_value=1, dtype=type(numpy.int32), )
paddle.full_like(x=Tensor([2],"float64"), fill_value=1, dtype=type(numpy.int64), )
paddle.full_like(x=Tensor([2],"float64"), fill_value=1.0, dtype="float16", )
paddle.full_like(x=Tensor([2],"float64"), fill_value=1.0, dtype="float32", )
paddle.full_like(x=Tensor([2],"float64"), fill_value=1.0, dtype=type(numpy.float16), )
paddle.full_like(x=Tensor([2],"float64"), fill_value=1.0, dtype=type(numpy.float32), )
paddle.full_like(x=Tensor([2],"float64"), fill_value=False, dtype="bool", )
paddle.full_like(x=Tensor([2],"float64"), fill_value=False, dtype=type(numpy.bool), )
paddle.full_like(x=Tensor([2],"float64"), fill_value=True, dtype="bool", )
paddle.full_like(x=Tensor([2],"float64"), fill_value=True, dtype=type(numpy.bool), )
paddle.full_like(x=Tensor([2],"float64"), fill_value=math.inf, )
paddle.full_like(x=Tensor([2],"int32"), fill_value=1, )
paddle.full_like(x=Tensor([2],"int64"), fill_value=1, )
paddle.gather(x=Tensor([3, 3],"float32"), index=Tensor([4],"int32"), axis=0, )
paddle.gather(x=Tensor([3, 3],"float32"), index=Tensor([4],"int64"), axis=0, )
paddle.gather(x=Tensor([3, 3],"float32"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([3, 3],"float32"), index=Tensor([4],"int64"), axis=Tensor([1],"int64"), )
paddle.gather(x=Tensor([3, 3],"float64"), index=Tensor([4],"int32"), axis=0, )
paddle.gather(x=Tensor([3, 3],"float64"), index=Tensor([4],"int64"), axis=0, )
paddle.gather(x=Tensor([3, 3],"float64"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([3, 3],"float64"), index=Tensor([4],"int64"), axis=Tensor([1],"int64"), )
paddle.gather(x=Tensor([3, 3],"int32"), index=Tensor([4],"int32"), axis=0, )
paddle.gather(x=Tensor([3, 3],"int32"), index=Tensor([4],"int64"), axis=0, )
paddle.gather(x=Tensor([3, 3],"int32"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([3, 3],"int32"), index=Tensor([4],"int64"), axis=Tensor([1],"int64"), )
paddle.gather(x=Tensor([3, 3],"int64"), index=Tensor([4],"int32"), axis=0, )
paddle.gather(x=Tensor([3, 3],"int64"), index=Tensor([4],"int64"), axis=0, )
paddle.gather(x=Tensor([3, 3],"int64"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([3, 3],"int64"), index=Tensor([4],"int64"), axis=Tensor([1],"int64"), )
paddle.gather(x=Tensor([3, 4],"float64"), index=Tensor([0],"int32"), axis=0, )
paddle.gather(x=Tensor([3, 4],"float64"), index=Tensor([0],"int64"), axis=1, )
paddle.gather_nd(Tensor([4, 128],"float32"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([4, 256],"float32"), Tensor([4, 8, 2],"int64"), )
paddle.gather_nd(Tensor([4, 4, 16],"float32"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([4, 4, 32],"float32"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([4, 4],"bool"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([4, 4],"int64"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([4, 64],"float32"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([4, 8, 32],"float32"), Tensor([4, 8, 2],"int64"), )
paddle.gather_nd(Tensor([4, 8],"bool"), Tensor([4, 8, 2],"int64"), )
paddle.gather_nd(Tensor([4, 8],"int64"), Tensor([4, 8, 2],"int64"), )
paddle.gather_nd(x=Tensor([1, 2, 3, 2],"float64"), index=Tensor([1, 1, 1, 3],"int64"), )
paddle.gather_nd(x=Tensor([1, 2, 3, 2],"float64"), index=Tensor([3],"int64"), )
paddle.gather_nd(x=Tensor([3, 3],"float32"), index=Tensor([2],"int32"), )
paddle.gather_nd(x=Tensor([3, 3],"float32"), index=Tensor([2],"int64"), )
paddle.gather_nd(x=Tensor([3, 3],"float64"), index=Tensor([2],"int32"), )
paddle.gather_nd(x=Tensor([3, 3],"float64"), index=Tensor([2],"int64"), )
paddle.gather_nd(x=Tensor([3, 3],"int32"), index=Tensor([2],"int32"), )
paddle.gather_nd(x=Tensor([3, 3],"int32"), index=Tensor([2],"int64"), )
paddle.gather_nd(x=Tensor([3, 3],"int64"), index=Tensor([2],"int32"), )
paddle.gather_nd(x=Tensor([3, 3],"int64"), index=Tensor([2],"int64"), )
paddle.gcd(x=Tensor([1],"int32"), y=Tensor([1],"int32"), )
paddle.gcd(x=Tensor([1],"int64"), y=Tensor([1],"int64"), )
paddle.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([2, 4, 5],"int32"), )
paddle.gcd(x=Tensor([4, 5],"int32"), y=Tensor([4, 5],"int32"), )
paddle.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.greater_equal(Tensor([2, 1, 1, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([2, 1, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.greater_equal(Tensor([5, 10, 15, 20],"float32"), Tensor([5, 10, 15, 20],"float32"), )
paddle.greater_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.greater_equal(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.greater_equal(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.greater_equal(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.greater_equal(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.greater_than(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.greater_than(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.greater_than(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.greater_than(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.greater_than(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.histogram(input=Tensor([4, 4],"float32"), )
paddle.histogram(input=Tensor([4, 4],"float64"), )
paddle.histogram(input=Tensor([4, 4],"float64"), bins=4, )
paddle.histogram(input=Tensor([4, 4],"float64"), bins=4, max=5, )
paddle.histogram(input=Tensor([4, 4],"float64"), bins=4, min=-2, )
paddle.histogram(input=Tensor([4, 4],"float64"), bins=4, min=-4, )
paddle.histogram(input=Tensor([4, 4],"float64"), bins=4, min=-40, )
paddle.histogram(input=Tensor([4, 4],"float64"), bins=4, min=-41, max=-5, )
paddle.histogram(input=Tensor([4, 4],"float64"), bins=4, min=4, max=5, )
paddle.histogram(input=Tensor([4, 4],"int32"), )
paddle.histogram(input=Tensor([4, 4],"int64"), )
paddle.histogram(input=Tensor([44],"float64"), )
paddle.imag(x=Tensor([1, 10],"complex64"), )
paddle.imag(x=Tensor([20, 10],"complex128"), )
paddle.imag(x=Tensor([20, 10],"complex64"), )
paddle.increment(x=Tensor([1],"float32"), )
paddle.increment(x=Tensor([1],"float64"), )
paddle.increment(x=Tensor([1],"float64"), value=2.0, )
paddle.increment(x=Tensor([1],"int32"), )
paddle.increment(x=Tensor([1],"int64"), )
paddle.increment(x=Tensor([1],"int64"), value=1.0, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, Tensor([4],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), activation="gelu", dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln1_scale=Tensor([2],"float32"), ln1_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln2_scale=Tensor([2],"float32"), ln2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_multi_head_attention(x=Tensor([1, 2, 4],"float32"), qkv_weight=Tensor([3, 2, 2, 4],"float32"), linear_weight=Tensor([4, 4],"float32"), pre_layer_norm=False, pre_ln_scale=None, pre_ln_bias=None, ln_scale=Tensor([4],"float32"), ln_bias=Tensor([4],"float32"), pre_ln_epsilon=1e-05, qkv_bias=Tensor([3, 2, 2],"float32"), linear_bias=Tensor([4],"float32"), cache_kv=None, attn_mask=Tensor([1, 1, 2, 2],"float32"), dropout_rate=0, attn_dropout_rate=0, ln_epsilon=1e-05, training=True, ring_id=-1, num_heads=2, transpose_qkv_wb=False, name=None, )
paddle.incubate.nn.functional.fused_multi_head_attention(x=Tensor([1, 2, 4],"float32"), qkv_weight=Tensor([3, 2, 2, 4],"float32"), linear_weight=Tensor([4, 4],"float32"), pre_layer_norm=True, pre_ln_scale=Tensor([4],"float32"), pre_ln_bias=Tensor([4],"float32"), ln_scale=None, ln_bias=None, pre_ln_epsilon=1e-05, qkv_bias=Tensor([3, 2, 2],"float32"), linear_bias=Tensor([4],"float32"), cache_kv=None, attn_mask=Tensor([1, 1, 2, 2],"float32"), dropout_rate=0, attn_dropout_rate=0, ln_epsilon=1e-05, training=True, ring_id=-1, num_heads=2, transpose_qkv_wb=False, name=None, )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 8, 1020],"float16"), mask=Tensor([2, 1, 8, 1020],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 8, 32],"float16"), mask=Tensor([2, 1, 8, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([6, 8, 8, 32],"float16"), mask=Tensor([6, 1, 8, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([7, 3, 16, 32],"float16"), mask=Tensor([7, 1, 16, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 1, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 1, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([3, 1, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([5, 7, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([7, 11, 32, 32],"float32"), )
paddle.index_sample(x=Tensor([3, 4],"float32"), index=Tensor([3, 3],"int64"), )
paddle.index_sample(x=Tensor([3, 4],"float64"), index=Tensor([3, 3],"int64"), )
paddle.index_sample(x=Tensor([3, 4],"int32"), index=Tensor([3, 3],"int64"), )
paddle.index_sample(x=Tensor([3, 4],"int64"), index=Tensor([3, 3],"int64"), )
paddle.index_select(x=Tensor([2, 3],"float32"), index=Tensor([1],"int32"), )
paddle.index_select(x=Tensor([2, 3],"float64"), index=Tensor([1],"int32"), )
paddle.index_select(x=Tensor([2, 3],"float64"), index=Tensor([2],"int32"), axis=1, )
paddle.index_select(x=Tensor([2, 3],"float64"), index=Tensor([2],"int64"), axis=1, )
paddle.index_select(x=Tensor([2, 3],"int32"), index=Tensor([1],"int32"), )
paddle.index_select(x=Tensor([2, 3],"int64"), index=Tensor([1],"int32"), )
paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([5, 4],"float64"), )
paddle.inner(x=Tensor([4, 4],"float32"), y=Tensor([4, 4],"float32"), )
paddle.inner(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), )
paddle.inner(x=Tensor([4],"float64"), y=Tensor([4],"float64"), )
paddle.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
paddle.is_complex(Tensor([2, 3, 4],"float32"), )
paddle.is_complex(Tensor([2, 3, 4],"float64"), )
paddle.is_complex(Tensor([3, 2],"int64"), )
paddle.is_complex(Tensor([3, 3, 3],"float64"), )
paddle.is_complex(Tensor([3, 3],"float64"), )
paddle.is_complex(Tensor([3],"complex128"), )
paddle.is_complex(Tensor([3],"complex64"), )
paddle.is_complex(Tensor([4],"float32"), )
paddle.is_complex(Tensor([9],"float64"), )
paddle.is_empty(Tensor([0],"float32"), )
paddle.is_empty(Tensor([2, 3],"float32"), )
paddle.is_empty(Tensor([3, 0],"float64"), )
paddle.is_empty(Tensor([3, 0],"int64"), )
paddle.is_empty(Tensor([3],"int64"), )
paddle.is_empty(Tensor([],"int64"), )
paddle.isclose(x=Tensor([2],"float32"), y=Tensor([2],"float32"), )
paddle.isclose(x=Tensor([2],"float64"), y=Tensor([2],"float64"), )
paddle.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 4, 5],"float64"), )
paddle.isclose(x=Tensor([6],"float64"), y=Tensor([6],"float64"), )
paddle.isfinite(x=Tensor([2],"float64"), )
paddle.isfinite(x=Tensor([3],"float64"), )
paddle.isfinite(x=Tensor([5],"float64"), )
paddle.isfinite(x=Tensor([7],"float64"), )
paddle.isinf(Tensor([2, 1, 2],"float32"), )
paddle.isinf(Tensor([2, 2],"float32"), )
paddle.isinf(Tensor([3],"float64"), )
paddle.isinf(x=Tensor([2],"float64"), )
paddle.isinf(x=Tensor([5],"float64"), )
paddle.isinf(x=Tensor([7],"float64"), )
paddle.isnan(Tensor([3, 4],"float64"), )
paddle.isnan(Tensor([4, 4, 4],"float32"), )
paddle.isnan(x=Tensor([2],"float64"), )
paddle.isnan(x=Tensor([3],"float64"), )
paddle.isnan(x=Tensor([5],"float64"), )
paddle.isnan(x=Tensor([7],"float64"), )
paddle.kron(x=Tensor([1],"float64"), y=Tensor([3, 3],"float64"), )
paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([3, 3, 2],"float64"), )
paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([3, 3],"float64"), )
paddle.kron(x=Tensor([2, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.kron(x=Tensor([2, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.kron(x=Tensor([2, 3],"int32"), y=Tensor([3, 3],"int32"), )
paddle.kron(x=Tensor([2, 3],"int64"), y=Tensor([3, 3],"int64"), )
paddle.kthvalue(x=Tensor([3, 2, 4],"float32"), k=3, axis=0, )
paddle.kthvalue(x=Tensor([3, 2, 4],"float64"), k=3, axis=0, )
paddle.kthvalue(x=Tensor([3, 2, 4],"float64"), k=4, axis=2, keepdim=False, )
paddle.kthvalue(x=Tensor([3, 2, 4],"float64"), k=4, axis=2, keepdim=True, )
paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.lerp(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 2, 1],"float64"), Tensor([3, 6, 3, 4, 2, 1],"float64"), Tensor([3, 6, 3, 4, 2, 1],"float64"), )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.lerp(x=Tensor([4, 5],"float64"), y=Tensor([4, 5],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4],"float32"), y=Tensor([4],"float32"), weight=0.5, )
paddle.lerp(x=Tensor([4],"float64"), y=Tensor([4],"float64"), weight=0.5, )
paddle.less_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.less_equal(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.less_equal(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.less_equal(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.less_equal(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.less_than(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.less_than(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.less_than(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.less_than(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.less_than(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.lgamma(Tensor([10, 1, 1, 1],"float32"), )
paddle.lgamma(Tensor([10, 1, 1],"float32"), )
paddle.lgamma(Tensor([10, 1],"float64"), )
paddle.lgamma(Tensor([2, 1, 2],"float32"), )
paddle.lgamma(Tensor([2, 1],"float32"), )
paddle.lgamma(Tensor([2, 2, 2],"float32"), )
paddle.lgamma(Tensor([2, 2],"float32"), )
paddle.lgamma(Tensor([2, 3],"float32"), )
paddle.lgamma(Tensor([2],"float32"), )
paddle.lgamma(Tensor([3],"float32"), )
paddle.lgamma(Tensor([3],"float64"), )
paddle.lgamma(Tensor([],"float32"), )
paddle.lgamma(Tensor([],"float64"), )
paddle.lgamma(x=Tensor([3, 3],"float32"), )
paddle.lgamma(x=Tensor([3, 3],"float64"), )
paddle.lgamma(x=Tensor([6, 6, 6],"float64"), )
paddle.lgamma(x=Tensor([6, 6],"float32"), )
paddle.lgamma(x=Tensor([6, 6],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 1],"float32"), y=Tensor([4, 4],"float32"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 1],"float64"), y=Tensor([4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 3],"float64"), y=Tensor([4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.linalg.cond(x=Tensor([3, 3],"float32"), )
paddle.linalg.cond(x=Tensor([3, 3],"float64"), )
paddle.linalg.cond(x=Tensor([3, 4],"float64"), )
paddle.linalg.cond(x=Tensor([4, 2, 4, 4],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 4],"float64"), p=-math.inf, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 4],"float64"), p=math.inf, )
paddle.linalg.cond(x=Tensor([4, 4],"float64"), )
paddle.linalg.cond(x=Tensor([4, 4],"float64"), p="fro", )
paddle.linalg.cond(x=Tensor([4, 4],"float64"), p="nuc", )
paddle.linalg.cond(x=Tensor([4, 4],"float64"), p=-2, )
paddle.linalg.cond(x=Tensor([4, 4],"float64"), p=1, )
paddle.linalg.cond(x=Tensor([6, 2, 4, 3, 4],"float64"), )
paddle.linalg.cond(x=Tensor([6, 4],"float64"), p=-2, )
paddle.linalg.cov(x=Tensor([4, 12],"float64"), )
paddle.linalg.cov(x=Tensor([4, 12],"float64"), rowvar=True, )
paddle.linalg.cov(x=Tensor([4, 12],"float64"), rowvar=True, ddof=True, )
paddle.linalg.cov(x=Tensor([4, 2],"float32"), )
paddle.linalg.cov(x=Tensor([4, 2],"float64"), )
paddle.linalg.det(x=Tensor([3, 4, 4],"float64"), )
paddle.linalg.det(x=Tensor([4, 4],"float32"), )
paddle.linalg.det(x=Tensor([4, 4],"float64"), )
paddle.linalg.eig(Tensor([2, 2],"float64"), )
paddle.linalg.eig(Tensor([3, 3],"complex128"), )
paddle.linalg.eig(Tensor([4, 3, 3],"complex128"), )
paddle.linalg.eig(Tensor([4, 4],"complex128"), )
paddle.linalg.eig(Tensor([4, 4],"complex64"), )
paddle.linalg.eig(Tensor([4, 4],"float32"), )
paddle.linalg.eig(Tensor([4, 4],"float64"), )
paddle.linalg.eigh(Tensor([2, 2],"complex128"), "L", )
paddle.linalg.eigh(Tensor([2, 2],"complex128"), "U", )
paddle.linalg.eigh(Tensor([2, 2],"complex64"), "L", )
paddle.linalg.eigh(Tensor([4, 4, 4],"complex128"), "L", )
paddle.linalg.eigh(Tensor([4, 4, 4],"complex64"), "L", )
paddle.linalg.eigh(Tensor([4, 4, 4],"float32"), "L", )
paddle.linalg.eigh(Tensor([4, 4, 4],"float64"), "L", )
paddle.linalg.eigh(Tensor([4, 4],"complex128"), "L", )
paddle.linalg.eigh(Tensor([4, 4],"complex128"), "U", )
paddle.linalg.eigh(Tensor([4, 4],"complex64"), "L", )
paddle.linalg.eigh(Tensor([4, 4],"complex64"), "U", )
paddle.linalg.eigh(Tensor([4, 4],"float32"), "L", )
paddle.linalg.eigh(Tensor([4, 4],"float32"), "U", )
paddle.linalg.eigh(Tensor([4, 4],"float64"), "L", )
paddle.linalg.eigh(Tensor([4, 4],"float64"), "U", )
paddle.linalg.eigvals(x=Tensor([2, 4, 4],"float64"), )
paddle.linalg.eigvals(x=Tensor([3, 3],"float64"), )
paddle.linalg.eigvals(x=Tensor([4, 4],"float32"), )
paddle.linalg.eigvals(x=Tensor([4, 4],"float64"), )
paddle.linalg.eigvalsh(x=Tensor([10, 10],"complex128"), )
paddle.linalg.eigvalsh(x=Tensor([10, 10],"float64"), )
paddle.linalg.eigvalsh(x=Tensor([4, 4],"complex128"), )
paddle.linalg.eigvalsh(x=Tensor([4, 4],"complex64"), )
paddle.linalg.eigvalsh(x=Tensor([4, 4],"float32"), )
paddle.linalg.eigvalsh(x=Tensor([4, 4],"float64"), )
paddle.linalg.eigvalsh(x=Tensor([4, 5, 5],"float64"), )
paddle.linalg.eigvalsh(x=Tensor([4, 5, 5],"float64"), UPLO="U", )
paddle.linalg.eigvalsh(x=Tensor([5, 10, 10],"complex128"), )
paddle.linalg.eigvalsh(x=Tensor([5, 10, 10],"complex128"), UPLO="U", )
paddle.linalg.inv(x=Tensor([2, 2, 2],"float64"), )
paddle.linalg.inv(x=Tensor([4, 4],"float32"), )
paddle.linalg.inv(x=Tensor([4, 4],"float64"), )
paddle.linalg.inv(x=Tensor([5, 3, 4, 4],"float64"), )
paddle.linalg.lu(Tensor([3, 3, 3],"float64"), )
paddle.linalg.lu(Tensor([3, 3, 3],"float64"), get_infos=False, )
paddle.linalg.lu(Tensor([3, 3],"float32"), )
paddle.linalg.lu(Tensor([3, 3],"float32"), get_infos=False, )
paddle.linalg.lu(Tensor([3, 3],"float64"), )
paddle.linalg.lu(Tensor([3, 3],"float64"), get_infos=False, )
paddle.linalg.lu(Tensor([4, 3, 2, 2],"float64"), )
paddle.linalg.lu(Tensor([5, 3, 3, 3],"float64"), get_infos=False, )
paddle.linalg.lu_unpack(Tensor([3, 3, 3],"float64"), Tensor([3, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 3],"float64"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 3, 3, 3],"float64"), Tensor([5, 3, 3],"int32"), )
paddle.linalg.matrix_power(x=Tensor([3, 2, 10, 10],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 32, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 32, 32],"float64"), n=0, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 32, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 4, 4],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 4, 4],"float64"), n=8, )
paddle.linalg.matrix_power(x=Tensor([3, 4, 4],"float32"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_rank(x=Tensor([2, 2, 4, 4],"float64"), tol=Tensor([1, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 4],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 4],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 4, 4],"float64"), tol=None, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 4, 4],"float64"), tol=Tensor([2, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 4, 5],"float64"), tol=Tensor([2, 1],"float64"), hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([4, 4],"float64"), tol=4.4, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([4, 4],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([4, 5],"float32"), tol=None, hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([4, 5],"float64"), tol=4.4, hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([4, 5],"float64"), tol=None, hermitian=False, )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4, 4],"float64"),Tensor([4, 31],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 31],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 5],"float64"),Tensor([5, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4],"float64"),], )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float32"), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=1, p=-math.inf, )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=1, p=0, )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=1, p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=None, )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=list[0,2,], p=1, )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=list[0,2,], p=2, )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=list[1,2,], p=1, )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=list[1,2,], p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=list[1,], p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 3],"float64"), axis=None, p="fro", )
paddle.linalg.norm(x=Tensor([9],"float64"), axis=None, p="fro", )
paddle.linalg.pinv(x=Tensor([2, 2],"complex128"), hermitian=True, )
paddle.linalg.pinv(x=Tensor([2, 2],"complex64"), hermitian=True, )
paddle.linalg.pinv(x=Tensor([2, 2],"float32"), hermitian=True, )
paddle.linalg.pinv(x=Tensor([2, 2],"float64"), hermitian=True, )
paddle.linalg.pinv(x=Tensor([2, 4, 40],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 4, 40],"float64"), rcond=0.5, )
paddle.linalg.pinv(x=Tensor([2, 40],"float64"), )
paddle.linalg.pinv(x=Tensor([3, 4],"float32"), )
paddle.linalg.pinv(x=Tensor([3, 4],"float64"), )
paddle.linalg.pinv(x=Tensor([4, 2, 2],"float64"), hermitian=True, )
paddle.linalg.pinv(x=Tensor([4, 2, 2],"float64"), rcond=5, hermitian=True, )
paddle.linalg.qr(Tensor([3, 4],"float32"), )
paddle.linalg.qr(Tensor([3, 4],"float64"), )
paddle.linalg.qr(Tensor([3, 5, 6],"float32"), )
paddle.linalg.qr(Tensor([3, 5, 6],"float64"), )
paddle.linalg.qr(Tensor([4, 5],"float32"), )
paddle.linalg.qr(Tensor([4, 5],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([4, 5],"float32"), mode="r", )
paddle.linalg.qr(Tensor([4, 5],"float64"), )
paddle.linalg.qr(Tensor([4, 5],"float64"), mode="complete", )
paddle.linalg.qr(Tensor([4, 5],"float64"), mode="r", )
paddle.linalg.slogdet(x=Tensor([14, 14],"float32"), )
paddle.linalg.slogdet(x=Tensor([14, 14],"float64"), )
paddle.linalg.slogdet(x=Tensor([3, 4, 4],"float64"), )
paddle.linalg.slogdet(x=Tensor([4, 4],"float64"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([14],"float64"), )
paddle.linalg.solve(x=Tensor([4, 14, 14],"float64"), y=Tensor([4, 14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([4, 4],"float32"), y=Tensor([4],"float32"), )
paddle.linalg.solve(x=Tensor([4, 4],"float64"), y=Tensor([4],"float64"), )
paddle.linalg.svd(Tensor([2, 3],"float32"), full_matrices=False, )
paddle.linalg.svd(Tensor([2, 3],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([3, 2, 3, 4],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([3, 2, 3, 4],"float64"), full_matrices=True, )
paddle.linalg.svd(Tensor([3, 2, 3],"float64"), full_matrices=False, )
paddle.linalg.triangular_solve(x=Tensor([3, 3],"float32"), y=Tensor([3, 1],"float32"), )
paddle.linalg.triangular_solve(x=Tensor([3, 3],"float64"), y=Tensor([3, 1],"float64"), )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 1],"float64"), )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), upper=False, transpose=True, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), upper=False, transpose=True, unitriangular=True, )
paddle.linspace(start=3, stop=9, num=1, )
paddle.linspace(start=3, stop=9, num=5, dtype="float32", )
paddle.linspace(start=3, stop=9, num=5, dtype="float64", )
paddle.linspace(start=3, stop=9, num=5, dtype=type(numpy.float64), )
paddle.linspace(start=3.5, stop=9.6, num=5, )
paddle.linspace(start=4.5, stop=8, num=Tensor([1],"int32"), )
paddle.linspace(start=9, stop=3, num=5, )
paddle.linspace(start=Tensor([1],"float64"), stop=9.6, num=5, dtype="float64", )
paddle.linspace(start=Tensor([1],"float64"), stop=Tensor([1],"float64"), num=2, dtype="float64", )
paddle.linspace(start=Tensor([1],"int32"), stop=Tensor([1],"int32"), num=2, )
paddle.log(Tensor([1, 2],"float32"), )
paddle.log(Tensor([1],"float64"), )
paddle.log(Tensor([2, 1, 1],"float32"), )
paddle.log(Tensor([2, 1, 2],"float32"), )
paddle.log(Tensor([2, 1],"float32"), )
paddle.log(Tensor([2, 2],"float32"), )
paddle.log(Tensor([2, 3],"float64"), )
paddle.log(Tensor([3],"float32"), )
paddle.log(Tensor([3],"float64"), )
paddle.log(Tensor([4, 4, 16],"float32"), )
paddle.log(Tensor([4, 4, 32],"float32"), )
paddle.log(Tensor([4, 8, 32],"float32"), )
paddle.log(Tensor([4],"float64"), )
paddle.log(x=Tensor([1],"float64"), )
paddle.log(x=Tensor([2, 2, 3],"float64"), )
paddle.log(x=Tensor([2, 2, 3],"float64"), name="test_log", )
paddle.log(x=Tensor([2, 2],"float32"), )
paddle.log(x=Tensor([2, 2],"float64"), )
paddle.log(x=Tensor([2, 2],"int32"), )
paddle.log(x=Tensor([3],"float64"), )
paddle.log10(x=Tensor([1, 2],"float32"), )
paddle.log10(x=Tensor([1, 2],"float64"), )
paddle.log10(x=Tensor([1],"float64"), )
paddle.log10(x=Tensor([2, 2],"float64"), )
paddle.log10(x=Tensor([2, 3, 2, 2],"float64"), )
paddle.log1p(Tensor([2, 1, 2],"float32"), )
paddle.log1p(Tensor([2, 2],"float32"), )
paddle.log1p(Tensor([3],"float64"), )
paddle.log1p(x=Tensor([1, 2],"float32"), )
paddle.log1p(x=Tensor([1, 2],"float64"), )
paddle.log1p(x=Tensor([1],"float64"), )
paddle.log1p(x=Tensor([2, 2],"float64"), )
paddle.log1p(x=Tensor([2, 3, 2, 2],"float64"), )
paddle.log2(x=Tensor([1, 2],"float32"), )
paddle.log2(x=Tensor([1, 2],"float64"), )
paddle.log2(x=Tensor([1],"float64"), )
paddle.log2(x=Tensor([2, 2],"float64"), )
paddle.log2(x=Tensor([2, 3, 2, 2],"float64"), )
paddle.logical_and(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_and(x=Tensor([1, 2],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_and(x=Tensor([1],"bool"), y=Tensor([4],"bool"), )
paddle.logical_not(Tensor([4, 4],"bool"), )
paddle.logical_not(Tensor([4, 8],"bool"), )
paddle.logical_not(Tensor([],"bool"), )
paddle.logical_not(x=Tensor([1, 2, 1, 3],"bool"), )
paddle.logical_not(x=Tensor([1, 2],"bool"), )
paddle.logical_not(x=Tensor([1],"bool"), )
paddle.logical_or(Tensor([4, 4],"bool"), Tensor([4, 4],"bool"), )
paddle.logical_or(Tensor([4, 8],"bool"), Tensor([4, 8],"bool"), )
paddle.logical_or(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_or(x=Tensor([1, 2],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_or(x=Tensor([1],"bool"), y=Tensor([4],"bool"), )
paddle.logical_xor(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_xor(x=Tensor([1, 2],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_xor(x=Tensor([1],"bool"), y=Tensor([4],"bool"), )
paddle.logit(x=Tensor([4, 2],"float64"), )
paddle.logit(x=Tensor([4, 3, 2, 5],"float64"), )
paddle.logit(x=Tensor([4, 3, 2, 5],"float64"), eps=0.2, )
paddle.logit(x=Tensor([4, 3, 2],"float64"), )
paddle.logit(x=Tensor([4],"float32"), )
paddle.logit(x=Tensor([4],"float64"), )
paddle.logsumexp(x=Tensor([2, 3, 2],"float32"), axis=2, )
paddle.logsumexp(x=Tensor([2, 3, 2],"float64"), axis=0, keepdim=True, )
paddle.logsumexp(x=Tensor([2, 3, 2],"float64"), axis=2, )
paddle.logsumexp(x=Tensor([2, 3, 2],"float64"), axis=list[0,1,], )
paddle.logsumexp(x=Tensor([2, 3, 2],"float64"), axis=list[0,1,], keepdim=True, )
paddle.masked_select(x=Tensor([2, 3],"float32"), mask=Tensor([2, 3],"bool"), )
paddle.masked_select(x=Tensor([2, 3],"float64"), mask=Tensor([2, 3],"bool"), )
paddle.masked_select(x=Tensor([2, 3],"int32"), mask=Tensor([2, 3],"bool"), )
paddle.masked_select(x=Tensor([2, 3],"int64"), mask=Tensor([2, 3],"bool"), )
paddle.matmul(Tensor([1, 18],"float64"), Tensor([18, 18],"float64"), )
paddle.matmul(Tensor([1, 18],"float64"), Tensor([18, 9],"float64"), )
paddle.matmul(Tensor([1, 2],"float32"), Tensor([12, 2],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 2],"float32"), Tensor([16, 2],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 2],"float32"), Tensor([3, 2],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 2],"float32"), Tensor([4, 2],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 2],"float32"), Tensor([9, 2],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 2],"float64"), Tensor([12, 2],"float64"), transpose_y=True, )
paddle.matmul(Tensor([1, 2],"float64"), Tensor([2, 2],"float64"), )
paddle.matmul(Tensor([1, 2],"float64"), Tensor([9, 2],"float64"), transpose_y=True, )
paddle.matmul(Tensor([1, 32],"float64"), Tensor([32, 32],"float64"), )
paddle.matmul(Tensor([1, 3],"float32"), Tensor([12, 3],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 3],"float32"), Tensor([3, 3],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 3],"float32"), Tensor([9, 3],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 3],"float64"), Tensor([12, 3],"float64"), transpose_y=True, )
paddle.matmul(Tensor([1, 3],"float64"), Tensor([9, 3],"float64"), transpose_y=True, )
paddle.matmul(Tensor([1, 4],"float32"), Tensor([12, 4],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4],"float32"), Tensor([16, 4],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4],"float32"), Tensor([4, 4],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4],"float32"), Tensor([7, 4],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([1, 4],"float64"), Tensor([4, 8],"float64"), )
paddle.matmul(Tensor([1, 4],"float64"), Tensor([7, 4],"float64"), transpose_y=True, )
paddle.matmul(Tensor([1, 7],"float32"), Tensor([7, 7],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 7],"float64"), Tensor([7, 7],"float64"), transpose_y=True, )
paddle.matmul(Tensor([1, 9],"float64"), Tensor([9, 18],"float64"), )
paddle.matmul(Tensor([16, 16],"float32"), Tensor([48, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([16, 16],"float32"), Tensor([64, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([16, 16],"float32"), Tensor([96, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([16, 32],"float32"), Tensor([128, 32],"float32"), transpose_y=True, )
paddle.matmul(Tensor([16, 32],"float32"), Tensor([32, 32],"float32"), transpose_y=True, )
paddle.matmul(Tensor([16, 32],"float32"), Tensor([96, 32],"float32"), transpose_y=True, )
paddle.matmul(Tensor([18, 18],"float64"), Tensor([18, 1],"float64"), )
paddle.matmul(Tensor([18, 6],"float32"), Tensor([18, 6],"float32"), transpose_x=False, transpose_y=True, )
paddle.matmul(Tensor([18, 9],"float64"), Tensor([9, 1],"float64"), )
paddle.matmul(Tensor([2, 12],"float32"), Tensor([6, 12],"float32"), transpose_y=True, )
paddle.matmul(Tensor([2, 2],"float64"), Tensor([2, 1],"float64"), )
paddle.matmul(Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), )
paddle.matmul(Tensor([2, 3],"float64"), Tensor([3, 2],"float64"), )
paddle.matmul(Tensor([2, 3],"float64"), Tensor([3, 4],"float64"), )
paddle.matmul(Tensor([2, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([2, 6],"float32"), Tensor([6, 6],"float32"), transpose_y=True, )
paddle.matmul(Tensor([3, 12],"float32"), Tensor([12],"float32"), )
paddle.matmul(Tensor([3, 12],"float32"), Tensor([3],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([3, 36],"float32"), Tensor([36],"float32"), )
paddle.matmul(Tensor([3, 36],"float32"), Tensor([3],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([3, 3],"float64"), )
paddle.matmul(Tensor([3, 6],"float32"), Tensor([3],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([3, 6],"float32"), Tensor([6],"float32"), )
paddle.matmul(Tensor([32, 32],"float32"), Tensor([96, 32],"float32"), transpose_y=True, )
paddle.matmul(Tensor([32, 32],"float64"), Tensor([32, 1],"float64"), )
paddle.matmul(Tensor([4, 12],"float32"), Tensor([4, 12],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 12],"float32"), Tensor([48, 12],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 12],"float32"), Tensor([6, 12],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 12],"float32"), Tensor([64, 12],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 16],"float32"), Tensor([48, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 16],"float32"), Tensor([64, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 4],"float64"), Tensor([4, 1],"float64"), )
paddle.matmul(Tensor([4, 6],"float32"), Tensor([6, 6],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 8],"float64"), Tensor([8, 1],"float64"), )
paddle.matmul(Tensor([8, 18],"float64"), Tensor([18, 1],"float64"), )
paddle.matmul(x=Tensor([10, 1, 5, 2],"float64"), y=Tensor([1, 3, 2, 5],"float64"), )
paddle.matmul(x=Tensor([10, 5, 2],"float64"), y=Tensor([10, 2, 5],"float64"), )
paddle.matmul(x=Tensor([10, 5, 2],"float64"), y=Tensor([2],"float64"), )
paddle.matmul(x=Tensor([10, 5],"float64"), y=Tensor([5],"float64"), )
paddle.matmul(x=Tensor([10],"float32"), y=Tensor([10],"float32"), )
paddle.matmul(x=Tensor([10],"float64"), y=Tensor([10],"float64"), )
paddle.matmul(x=Tensor([2, 2, 4, 4],"float32"), y=Tensor([2, 2, 4, 4],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 2, 4, 4],"float32"), y=Tensor([2, 2, 6, 4],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 2, 4, 64],"float64"), y=Tensor([2, 2, 4, 64],"float64"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 2, 6, 64],"float64"), y=Tensor([2, 2, 4, 64],"float64"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 2, 6, 64],"float64"), y=Tensor([2, 2, 6, 64],"float64"), transpose_y=True, )
paddle.matmul(x=Tensor([3, 4, 7, 7],"float32"), y=Tensor([3, 4, 3, 7],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([3, 6, 7, 9],"float32"), y=Tensor([3, 6, 7, 9],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([5, 3, 3, 5],"float32"), y=Tensor([5, 3, 3, 5],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([5, 3, 3, 5],"float32"), y=Tensor([5, 3, 8, 5],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([5, 8, 7, 7],"float32"), y=Tensor([5, 8, 6, 7],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 5, 3, 9],"float64"), y=Tensor([8, 5, 3, 9],"float64"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 5, 3, 9],"float64"), y=Tensor([8, 5, 8, 9],"float64"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 5, 8, 9],"float64"), y=Tensor([8, 5, 8, 9],"float64"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 6, 8, 9],"float32"), y=Tensor([8, 6, 16, 9],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 7, 6, 9],"float32"), y=Tensor([8, 7, 6, 9],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([9, 4, 4, 6],"float32"), y=Tensor([9, 4, 4, 6],"float32"), transpose_y=True, )
paddle.max(Tensor([2, 1, 2],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([2, 2],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([2, 3],"float32"), axis=Tensor([],"int64"), )
paddle.max(Tensor([3],"float64"), axis=-1, keepdim=True, )
paddle.max(x=Tensor([2, 2],"float32"), axis=list[-2,1,], keepdim=False, )
paddle.max(x=Tensor([2, 3],"float32"), )
paddle.max(x=Tensor([2, 3],"float32"), axis=-2, )
paddle.max(x=Tensor([2, 3],"float32"), axis=0, keepdim=True, )
paddle.max(x=Tensor([2, 3],"float32"), axis=1, )
paddle.max(x=Tensor([2, 3],"float32"), axis=Tensor([1],"int64"), )
paddle.maximum(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.maximum(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.maximum(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.mean(Tensor([1, 1, 1, 1],"float64"), )
paddle.mean(Tensor([1, 1, 1, 4, 3],"float64"), )
paddle.mean(Tensor([1, 1, 1, 4, 7],"float64"), )
paddle.mean(Tensor([1, 1, 1],"float64"), )
paddle.mean(Tensor([1, 1, 2],"float64"), )
paddle.mean(Tensor([1, 1, 3, 3, 3],"float32"), )
paddle.mean(Tensor([1, 1, 3, 3, 3],"float64"), )
paddle.mean(Tensor([1, 1, 3, 3, 5],"float64"), )
paddle.mean(Tensor([1, 1, 3, 3],"float32"), )
paddle.mean(Tensor([1, 1, 3, 3],"float64"), )
paddle.mean(Tensor([1, 1, 3, 4, 3],"float64"), )
paddle.mean(Tensor([1, 1, 3, 4, 4],"float64"), )
paddle.mean(Tensor([1, 1, 3, 6, 3],"float64"), )
paddle.mean(Tensor([1, 1, 3],"float64"), )
paddle.mean(Tensor([1, 1, 4, 4],"float64"), )
paddle.mean(Tensor([1, 1, 4],"float32"), )
paddle.mean(Tensor([1, 1, 4],"float64"), )
paddle.mean(Tensor([1, 1, 5, 4],"float64"), )
paddle.mean(Tensor([1, 1, 5],"float32"), )
paddle.mean(Tensor([1, 1, 6, 6, 6],"float32"), )
paddle.mean(Tensor([1, 1, 6, 6, 6],"float64"), )
paddle.mean(Tensor([1, 1, 6, 6],"float32"), )
paddle.mean(Tensor([1, 1, 6, 6],"float64"), )
paddle.mean(Tensor([1, 1, 6],"float32"), )
paddle.mean(Tensor([1, 1, 7],"float32"), )
paddle.mean(Tensor([1, 1, 8],"float32"), )
paddle.mean(Tensor([1, 2, 1, 3],"float64"), )
paddle.mean(Tensor([1, 2, 10],"float32"), )
paddle.mean(Tensor([1, 2, 12, 12],"float64"), )
paddle.mean(Tensor([1, 2, 2, 3],"float64"), )
paddle.mean(Tensor([1, 2, 2],"float32"), )
paddle.mean(Tensor([1, 2, 2],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 2],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4],"float32"), )
paddle.mean(Tensor([1, 2, 3, 4],"float64"), )
paddle.mean(Tensor([1, 2, 3],"float32"), )
paddle.mean(Tensor([1, 2, 3],"float64"), )
paddle.mean(Tensor([1, 2, 4, 4, 4],"float32"), )
paddle.mean(Tensor([1, 2, 4, 4, 4],"float64"), )
paddle.mean(Tensor([1, 2, 4, 4],"float64"), )
paddle.mean(Tensor([1, 2, 4],"float32"), )
paddle.mean(Tensor([1, 2, 5],"float32"), )
paddle.mean(Tensor([1, 2, 5],"float64"), )
paddle.mean(Tensor([1, 2, 6, 7],"float64"), )
paddle.mean(Tensor([1, 2, 6],"float32"), )
paddle.mean(Tensor([1, 2, 6],"float64"), )
paddle.mean(Tensor([1, 2, 7],"float32"), )
paddle.mean(Tensor([1, 2, 7],"float64"), )
paddle.mean(Tensor([1, 2],"float32"), )
paddle.mean(Tensor([1, 2],"float64"), )
paddle.mean(Tensor([1, 3, 2],"float32"), )
paddle.mean(Tensor([1, 3, 2],"float64"), )
paddle.mean(Tensor([1, 3, 3, 3, 3],"float64"), )
paddle.mean(Tensor([1, 3, 3, 4, 2],"float64"), )
paddle.mean(Tensor([1, 3, 3],"float64"), )
paddle.mean(Tensor([1, 3, 4, 5, 3],"float64"), )
paddle.mean(Tensor([1, 3, 5, 1],"float64"), )
paddle.mean(Tensor([1, 3],"float32"), )
paddle.mean(Tensor([1, 3],"float64"), )
paddle.mean(Tensor([1, 4, 3],"float64"), )
paddle.mean(Tensor([1, 4],"float32"), )
paddle.mean(Tensor([1, 4],"float32"), axis=Tensor([],"int64"), )
paddle.mean(Tensor([1, 5, 3],"float64"), )
paddle.mean(Tensor([1, 5, 6, 4],"float64"), )
paddle.mean(Tensor([1, 6],"float64"), )
paddle.mean(Tensor([1, 7],"float32"), )
paddle.mean(Tensor([1, 7],"float64"), )
paddle.mean(Tensor([10, 1, 4, 3],"float64"), )
paddle.mean(Tensor([10, 10, 10],"float32"), )
paddle.mean(Tensor([10, 10, 10],"float64"), )
paddle.mean(Tensor([10, 2, 4],"float32"), )
paddle.mean(Tensor([10, 2, 4],"float64"), )
paddle.mean(Tensor([10, 3, 3, 3],"float64"), )
paddle.mean(Tensor([10, 3, 3],"float64"), )
paddle.mean(Tensor([10, 3, 5, 5],"float64"), )
paddle.mean(Tensor([10, 5, 5],"float64"), )
paddle.mean(Tensor([10, 5],"float64"), )
paddle.mean(Tensor([100, 2, 3, 3],"float32"), )
paddle.mean(Tensor([100, 2, 3, 3],"float64"), )
paddle.mean(Tensor([100, 4, 3, 3],"float32"), )
paddle.mean(Tensor([100, 4, 3, 3],"float64"), )
paddle.mean(Tensor([10],"float32"), )
paddle.mean(Tensor([10],"float64"), )
paddle.mean(Tensor([12, 12],"float64"), )
paddle.mean(Tensor([1280],"float64"), )
paddle.mean(Tensor([12],"float32"), )
paddle.mean(Tensor([12],"float64"), )
paddle.mean(Tensor([14, 2],"float64"), )
paddle.mean(Tensor([14],"float64"), )
paddle.mean(Tensor([16, 18],"float64"), )
paddle.mean(Tensor([16],"float64"), )
paddle.mean(Tensor([18],"float32"), )
paddle.mean(Tensor([18],"float64"), )
paddle.mean(Tensor([1],"float32"), )
paddle.mean(Tensor([1],"float64"), )
paddle.mean(Tensor([2, 1, 1, 1, 1],"float32"), )
paddle.mean(Tensor([2, 1, 1, 1, 1],"float64"), )
paddle.mean(Tensor([2, 1, 1, 1, 2],"float32"), )
paddle.mean(Tensor([2, 1, 1, 1, 2],"float64"), )
paddle.mean(Tensor([2, 1, 1, 1],"float32"), )
paddle.mean(Tensor([2, 1, 1, 1],"float64"), )
paddle.mean(Tensor([2, 1, 1, 2, 4],"float32"), )
paddle.mean(Tensor([2, 1, 1, 2, 4],"float64"), )
paddle.mean(Tensor([2, 1, 1, 2],"float32"), )
paddle.mean(Tensor([2, 1, 1, 2],"float64"), )
paddle.mean(Tensor([2, 1, 1, 4],"float32"), )
paddle.mean(Tensor([2, 1, 1, 4],"float64"), )
paddle.mean(Tensor([2, 1, 10],"float32"), )
paddle.mean(Tensor([2, 1, 12, 12],"float64"), )
paddle.mean(Tensor([2, 1, 1],"float32"), )
paddle.mean(Tensor([2, 1, 1],"float64"), )
paddle.mean(Tensor([2, 1, 2, 2, 2],"float32"), )
paddle.mean(Tensor([2, 1, 2, 2, 2],"float64"), )
paddle.mean(Tensor([2, 1, 2, 2, 4],"float32"), )
paddle.mean(Tensor([2, 1, 2, 2, 4],"float64"), )
paddle.mean(Tensor([2, 1, 2, 2],"float32"), )
paddle.mean(Tensor([2, 1, 2, 2],"float64"), )
paddle.mean(Tensor([2, 1, 2, 4, 2],"float32"), )
paddle.mean(Tensor([2, 1, 2, 4, 2],"float64"), )
paddle.mean(Tensor([2, 1, 2, 4],"float32"), )
paddle.mean(Tensor([2, 1, 2, 4],"float64"), )
paddle.mean(Tensor([2, 1, 2],"float32"), )
paddle.mean(Tensor([2, 1, 2],"float64"), )
paddle.mean(Tensor([2, 1, 3, 3, 3],"float32"), )
paddle.mean(Tensor([2, 1, 3, 3, 3],"float64"), )
paddle.mean(Tensor([2, 1, 3, 3],"float32"), )
paddle.mean(Tensor([2, 1, 3, 3],"float64"), )
paddle.mean(Tensor([2, 1, 3],"float32"), )
paddle.mean(Tensor([2, 1, 3],"float64"), )
paddle.mean(Tensor([2, 1, 4, 4],"float32"), )
paddle.mean(Tensor([2, 1, 4, 4],"float64"), )
paddle.mean(Tensor([2, 1, 4, 6, 4],"float32"), )
paddle.mean(Tensor([2, 1, 4, 6, 4],"float64"), )
paddle.mean(Tensor([2, 1, 4, 6],"float32"), )
paddle.mean(Tensor([2, 1, 4, 6],"float64"), )
paddle.mean(Tensor([2, 1, 4],"float32"), )
paddle.mean(Tensor([2, 1, 4],"float64"), )
paddle.mean(Tensor([2, 1, 5],"float32"), )
paddle.mean(Tensor([2, 1, 6, 6],"float32"), )
paddle.mean(Tensor([2, 1, 6, 6],"float64"), )
paddle.mean(Tensor([2, 1, 6],"float32"), )
paddle.mean(Tensor([2, 1, 8, 8],"float64"), )
paddle.mean(Tensor([2, 1, 9, 5],"float64"), )
paddle.mean(Tensor([2, 10, 4],"float32"), )
paddle.mean(Tensor([2, 10, 4],"float64"), )
paddle.mean(Tensor([2, 11, 4],"float32"), )
paddle.mean(Tensor([2, 11, 4],"float64"), )
paddle.mean(Tensor([2, 12, 12, 10],"float64"), )
paddle.mean(Tensor([2, 12, 12, 1],"float64"), )
paddle.mean(Tensor([2, 12, 12],"float64"), )
paddle.mean(Tensor([2, 12, 4],"float32"), )
paddle.mean(Tensor([2, 12, 4],"float64"), )
paddle.mean(Tensor([2, 13, 13, 2],"float64"), )
paddle.mean(Tensor([2, 13, 2, 2],"float64"), )
paddle.mean(Tensor([2, 13, 4],"float32"), )
paddle.mean(Tensor([2, 13, 4],"float64"), )
paddle.mean(Tensor([2, 14, 12, 2],"float64"), )
paddle.mean(Tensor([2, 14, 2, 2],"float64"), )
paddle.mean(Tensor([2, 14, 22, 2],"float64"), )
paddle.mean(Tensor([2, 14, 4],"float32"), )
paddle.mean(Tensor([2, 14, 4],"float64"), )
paddle.mean(Tensor([2, 14, 5, 1, 1, 2, 1, 1, 2],"float32"), )
paddle.mean(Tensor([2, 15, 4],"float32"), )
paddle.mean(Tensor([2, 15, 4],"float64"), )
paddle.mean(Tensor([2, 16, 4],"float32"), )
paddle.mean(Tensor([2, 16, 4],"float64"), )
paddle.mean(Tensor([2, 17, 17, 2],"float64"), )
paddle.mean(Tensor([2, 17, 28, 2],"float64"), )
paddle.mean(Tensor([2, 17, 39, 2],"float64"), )
paddle.mean(Tensor([2, 17, 4],"float32"), )
paddle.mean(Tensor([2, 17, 4],"float64"), )
paddle.mean(Tensor([2, 17, 6, 2],"float64"), )
paddle.mean(Tensor([2, 18, 18, 2],"float64"), )
paddle.mean(Tensor([2, 18, 4],"float32"), )
paddle.mean(Tensor([2, 18, 4],"float64"), )
paddle.mean(Tensor([2, 18, 6, 2],"float64"), )
paddle.mean(Tensor([2, 19, 4],"float32"), )
paddle.mean(Tensor([2, 19, 4],"float64"), )
paddle.mean(Tensor([2, 1],"float64"), )
paddle.mean(Tensor([2, 2, 1, 1],"float32"), )
paddle.mean(Tensor([2, 2, 10, 11],"float64"), )
paddle.mean(Tensor([2, 2, 12, 2],"float64"), )
paddle.mean(Tensor([2, 2, 13, 13],"float32"), )
paddle.mean(Tensor([2, 2, 13, 13],"float64"), )
paddle.mean(Tensor([2, 2, 13, 24],"float32"), )
paddle.mean(Tensor([2, 2, 13, 24],"float64"), )
paddle.mean(Tensor([2, 2, 13, 2],"float32"), )
paddle.mean(Tensor([2, 2, 13, 2],"float64"), )
paddle.mean(Tensor([2, 2, 18, 18],"float32"), )
paddle.mean(Tensor([2, 2, 18, 18],"float64"), )
paddle.mean(Tensor([2, 2, 18, 30],"float32"), )
paddle.mean(Tensor([2, 2, 18, 30],"float64"), )
paddle.mean(Tensor([2, 2, 18, 42],"float32"), )
paddle.mean(Tensor([2, 2, 18, 42],"float64"), )
paddle.mean(Tensor([2, 2, 18, 54],"float32"), )
paddle.mean(Tensor([2, 2, 18, 54],"float64"), )
paddle.mean(Tensor([2, 2, 18, 6],"float32"), )
paddle.mean(Tensor([2, 2, 18, 6],"float64"), )
paddle.mean(Tensor([2, 2, 1],"float32"), )
paddle.mean(Tensor([2, 2, 1],"float64"), )
paddle.mean(Tensor([2, 2, 2, 13],"float32"), )
paddle.mean(Tensor([2, 2, 2, 13],"float64"), )
paddle.mean(Tensor([2, 2, 2, 2, 2],"float32"), )
paddle.mean(Tensor([2, 2, 2, 2, 2],"float64"), )
paddle.mean(Tensor([2, 2, 2, 2, 3],"float32"), )
paddle.mean(Tensor([2, 2, 2, 2, 3],"float64"), )
paddle.mean(Tensor([2, 2, 2, 24],"float32"), )
paddle.mean(Tensor([2, 2, 2, 24],"float64"), )
paddle.mean(Tensor([2, 2, 2, 2],"float32"), )
paddle.mean(Tensor([2, 2, 2, 2],"float64"), )
paddle.mean(Tensor([2, 2, 2, 3],"float32"), )
paddle.mean(Tensor([2, 2, 2, 3],"float64"), )
paddle.mean(Tensor([2, 2, 22, 2],"float64"), )
paddle.mean(Tensor([2, 2, 24, 13],"float32"), )
paddle.mean(Tensor([2, 2, 24, 13],"float64"), )
paddle.mean(Tensor([2, 2, 24, 24],"float32"), )
paddle.mean(Tensor([2, 2, 24, 24],"float64"), )
paddle.mean(Tensor([2, 2, 24, 2],"float32"), )
paddle.mean(Tensor([2, 2, 24, 2],"float64"), )
paddle.mean(Tensor([2, 2, 2],"float32"), )
paddle.mean(Tensor([2, 2, 2],"float64"), )
paddle.mean(Tensor([2, 2, 3, 2],"float32"), )
paddle.mean(Tensor([2, 2, 3, 3],"float32"), )
paddle.mean(Tensor([2, 2, 30, 18],"float32"), )
paddle.mean(Tensor([2, 2, 30, 18],"float64"), )
paddle.mean(Tensor([2, 2, 30, 30],"float32"), )
paddle.mean(Tensor([2, 2, 30, 30],"float64"), )
paddle.mean(Tensor([2, 2, 30, 42],"float32"), )
paddle.mean(Tensor([2, 2, 30, 42],"float64"), )
paddle.mean(Tensor([2, 2, 30, 54],"float32"), )
paddle.mean(Tensor([2, 2, 30, 54],"float64"), )
paddle.mean(Tensor([2, 2, 30, 6],"float32"), )
paddle.mean(Tensor([2, 2, 30, 6],"float64"), )
paddle.mean(Tensor([2, 2, 3],"float32"), )
paddle.mean(Tensor([2, 2, 3],"float64"), )
paddle.mean(Tensor([2, 2, 4, 2, 3],"float32"), )
paddle.mean(Tensor([2, 2, 4, 2, 3],"float64"), )
paddle.mean(Tensor([2, 2, 4, 3],"float32"), )
paddle.mean(Tensor([2, 2, 4, 3],"float64"), )
paddle.mean(Tensor([2, 2, 4, 4, 4],"float32"), )
paddle.mean(Tensor([2, 2, 4, 4, 4],"float64"), )
paddle.mean(Tensor([2, 2, 4],"float32"), )
paddle.mean(Tensor([2, 2, 4],"float64"), )
paddle.mean(Tensor([2, 2, 5],"float64"), )
paddle.mean(Tensor([2, 2, 6, 18],"float32"), )
paddle.mean(Tensor([2, 2, 6, 18],"float64"), )
paddle.mean(Tensor([2, 2, 6, 30],"float32"), )
paddle.mean(Tensor([2, 2, 6, 30],"float64"), )
paddle.mean(Tensor([2, 2, 6, 42],"float32"), )
paddle.mean(Tensor([2, 2, 6, 42],"float64"), )
paddle.mean(Tensor([2, 2, 6, 54],"float32"), )
paddle.mean(Tensor([2, 2, 6, 54],"float64"), )
paddle.mean(Tensor([2, 2, 6, 6],"float32"), )
paddle.mean(Tensor([2, 2, 6, 6],"float64"), )
paddle.mean(Tensor([2, 2, 7],"float64"), )
paddle.mean(Tensor([2, 2, 9, 10, 11],"float64"), )
paddle.mean(Tensor([2, 2, 9, 10],"float64"), )
paddle.mean(Tensor([2, 20, 4],"float32"), )
paddle.mean(Tensor([2, 20, 4],"float64"), )
paddle.mean(Tensor([2, 21, 4],"float32"), )
paddle.mean(Tensor([2, 21, 4],"float64"), )
paddle.mean(Tensor([2, 22, 4],"float32"), )
paddle.mean(Tensor([2, 22, 4],"float64"), )
paddle.mean(Tensor([2, 23, 4],"float32"), )
paddle.mean(Tensor([2, 23, 4],"float64"), )
paddle.mean(Tensor([2, 24, 30],"float64"), )
paddle.mean(Tensor([2, 24, 4],"float32"), )
paddle.mean(Tensor([2, 24, 4],"float64"), )
paddle.mean(Tensor([2, 24, 99],"float64"), )
paddle.mean(Tensor([2, 25, 4],"float32"), )
paddle.mean(Tensor([2, 25, 4],"float64"), )
paddle.mean(Tensor([2, 26, 12, 2],"float64"), )
paddle.mean(Tensor([2, 26, 2, 2],"float64"), )
paddle.mean(Tensor([2, 26, 22, 2],"float64"), )
paddle.mean(Tensor([2, 26, 4],"float32"), )
paddle.mean(Tensor([2, 26, 4],"float64"), )
paddle.mean(Tensor([2, 27, 100],"float64"), )
paddle.mean(Tensor([2, 27, 4],"float32"), )
paddle.mean(Tensor([2, 27, 4],"float64"), )
paddle.mean(Tensor([2, 27, 64],"float32"), )
paddle.mean(Tensor([2, 27, 64],"float64"), )
paddle.mean(Tensor([2, 28, 17, 2],"float64"), )
paddle.mean(Tensor([2, 28, 28, 2],"float64"), )
paddle.mean(Tensor([2, 28, 39, 2],"float64"), )
paddle.mean(Tensor([2, 28, 4],"float32"), )
paddle.mean(Tensor([2, 28, 4],"float64"), )
paddle.mean(Tensor([2, 28, 6, 2],"float64"), )
paddle.mean(Tensor([2, 29, 4],"float32"), )
paddle.mean(Tensor([2, 29, 4],"float64"), )
paddle.mean(Tensor([2, 2],"float32"), )
paddle.mean(Tensor([2, 2],"float64"), )
paddle.mean(Tensor([2, 3, 1, 1, 1],"float64"), )
paddle.mean(Tensor([2, 3, 1, 1],"float64"), )
paddle.mean(Tensor([2, 3, 1, 3, 2],"float64"), )
paddle.mean(Tensor([2, 3, 1, 3],"float64"), )
paddle.mean(Tensor([2, 3, 1, 4],"float64"), )
paddle.mean(Tensor([2, 3, 10, 10],"float64"), )
paddle.mean(Tensor([2, 3, 12, 12],"float32"), )
paddle.mean(Tensor([2, 3, 12, 12],"float64"), )
paddle.mean(Tensor([2, 3, 12, 13],"float64"), )
paddle.mean(Tensor([2, 3, 12, 20],"float64"), )
paddle.mean(Tensor([2, 3, 12, 30],"float64"), )
paddle.mean(Tensor([2, 3, 16, 16],"float32"), )
paddle.mean(Tensor([2, 3, 16, 16],"float64"), )
paddle.mean(Tensor([2, 3, 2, 2, 2],"float64"), )
paddle.mean(Tensor([2, 3, 2, 2],"float64"), )
paddle.mean(Tensor([2, 3, 2, 3, 3],"float64"), )
paddle.mean(Tensor([2, 3, 2, 3, 6],"float64"), )
paddle.mean(Tensor([2, 3, 2, 3],"float64"), )
paddle.mean(Tensor([2, 3, 2, 4, 2],"float32"), )
paddle.mean(Tensor([2, 3, 2, 4, 2],"float64"), )
paddle.mean(Tensor([2, 3, 2, 4],"float32"), )
paddle.mean(Tensor([2, 3, 2, 4],"float64"), )
paddle.mean(Tensor([2, 3, 20],"float64"), )
paddle.mean(Tensor([2, 3, 256, 256],"float64"), )
paddle.mean(Tensor([2, 3, 2],"float32"), )
paddle.mean(Tensor([2, 3, 2],"float64"), )
paddle.mean(Tensor([2, 3, 3, 3, 32],"float64"), )
paddle.mean(Tensor([2, 3, 3, 3, 3],"float32"), )
paddle.mean(Tensor([2, 3, 3, 3, 3],"float64"), )
paddle.mean(Tensor([2, 3, 3, 3, 6],"float64"), )
paddle.mean(Tensor([2, 3, 3, 3],"float32"), )
paddle.mean(Tensor([2, 3, 3, 3],"float64"), )
paddle.mean(Tensor([2, 3, 3, 4, 3, 4, 3, 4],"float64"), )
paddle.mean(Tensor([2, 3, 3, 4, 8],"float64"), )
paddle.mean(Tensor([2, 3, 3, 4],"float64"), )
paddle.mean(Tensor([2, 3, 3, 5, 8],"float64"), )
paddle.mean(Tensor([2, 3, 30, 15],"float64"), )
paddle.mean(Tensor([2, 3, 30, 30],"float64"), )
paddle.mean(Tensor([2, 3, 30, 50],"float64"), )
paddle.mean(Tensor([2, 3, 32, 32],"float64"), )
paddle.mean(Tensor([2, 3, 3],"float32"), )
paddle.mean(Tensor([2, 3, 3],"float64"), )
paddle.mean(Tensor([2, 3, 4, 4, 2, 3, 4, 4],"float64"), )
paddle.mean(Tensor([2, 3, 4, 4, 3, 4, 4, 4],"float64"), )
paddle.mean(Tensor([2, 3, 4, 4, 4],"float64"), )
paddle.mean(Tensor([2, 3, 4, 4],"float64"), )
paddle.mean(Tensor([2, 3, 4],"float32"), )
paddle.mean(Tensor([2, 3, 4],"float64"), )
paddle.mean(Tensor([2, 3, 5],"float64"), )
paddle.mean(Tensor([2, 3, 6, 3, 2],"float64"), )
paddle.mean(Tensor([2, 3, 6, 6, 6],"float32"), )
paddle.mean(Tensor([2, 3, 6, 6, 6],"float64"), )
paddle.mean(Tensor([2, 3, 7],"float64"), )
paddle.mean(Tensor([2, 3, 8, 7],"float64"), )
paddle.mean(Tensor([2, 3, 8],"float64"), )
paddle.mean(Tensor([2, 3, 9],"float64"), )
paddle.mean(Tensor([2, 30, 4],"float32"), )
paddle.mean(Tensor([2, 30, 4],"float64"), )
paddle.mean(Tensor([2, 31, 4],"float32"), )
paddle.mean(Tensor([2, 31, 4],"float64"), )
paddle.mean(Tensor([2, 32, 4],"float32"), )
paddle.mean(Tensor([2, 32, 4],"float64"), )
paddle.mean(Tensor([2, 33, 4],"float32"), )
paddle.mean(Tensor([2, 33, 4],"float64"), )
paddle.mean(Tensor([2, 34, 4],"float32"), )
paddle.mean(Tensor([2, 34, 4],"float64"), )
paddle.mean(Tensor([2, 35, 4],"float32"), )
paddle.mean(Tensor([2, 35, 4],"float64"), )
paddle.mean(Tensor([2, 36, 4],"float32"), )
paddle.mean(Tensor([2, 36, 4],"float64"), )
paddle.mean(Tensor([2, 37, 4],"float32"), )
paddle.mean(Tensor([2, 37, 4],"float64"), )
paddle.mean(Tensor([2, 38, 4],"float32"), )
paddle.mean(Tensor([2, 38, 4],"float64"), )
paddle.mean(Tensor([2, 39, 17, 2],"float64"), )
paddle.mean(Tensor([2, 39, 28, 2],"float64"), )
paddle.mean(Tensor([2, 39, 39, 2],"float64"), )
paddle.mean(Tensor([2, 39, 4],"float32"), )
paddle.mean(Tensor([2, 39, 4],"float64"), )
paddle.mean(Tensor([2, 39, 6, 2],"float64"), )
paddle.mean(Tensor([2, 3],"float32"), )
paddle.mean(Tensor([2, 3],"float64"), )
paddle.mean(Tensor([2, 4, 2, 2, 2],"float32"), )
paddle.mean(Tensor([2, 4, 2, 2, 2],"float64"), )
paddle.mean(Tensor([2, 4, 2, 3, 4],"float64"), )
paddle.mean(Tensor([2, 4, 3, 3],"float64"), )
paddle.mean(Tensor([2, 4, 3],"float32"), )
paddle.mean(Tensor([2, 4, 3],"float64"), )
paddle.mean(Tensor([2, 4, 4, 4, 3],"float32"), )
paddle.mean(Tensor([2, 4, 4, 4, 3],"float64"), )
paddle.mean(Tensor([2, 4, 4],"float64"), )
paddle.mean(Tensor([2, 4, 6, 3],"float32"), )
paddle.mean(Tensor([2, 4, 6, 3],"float64"), )
paddle.mean(Tensor([2, 4, 6, 6, 6],"float32"), )
paddle.mean(Tensor([2, 4, 6, 6, 6],"float64"), )
paddle.mean(Tensor([2, 40, 4],"float32"), )
paddle.mean(Tensor([2, 40, 4],"float64"), )
paddle.mean(Tensor([2, 41, 4],"float32"), )
paddle.mean(Tensor([2, 41, 4],"float64"), )
paddle.mean(Tensor([2, 42, 4],"float32"), )
paddle.mean(Tensor([2, 42, 4],"float64"), )
paddle.mean(Tensor([2, 43, 4],"float32"), )
paddle.mean(Tensor([2, 43, 4],"float64"), )
paddle.mean(Tensor([2, 44, 4],"float32"), )
paddle.mean(Tensor([2, 44, 4],"float64"), )
paddle.mean(Tensor([2, 45, 4],"float32"), )
paddle.mean(Tensor([2, 45, 4],"float64"), )
paddle.mean(Tensor([2, 46, 4],"float32"), )
paddle.mean(Tensor([2, 46, 4],"float64"), )
paddle.mean(Tensor([2, 47, 4],"float32"), )
paddle.mean(Tensor([2, 47, 4],"float64"), )
paddle.mean(Tensor([2, 48, 4],"float32"), )
paddle.mean(Tensor([2, 48, 4],"float64"), )
paddle.mean(Tensor([2, 49, 4],"float32"), )
paddle.mean(Tensor([2, 49, 4],"float64"), )
paddle.mean(Tensor([2, 4],"float32"), )
paddle.mean(Tensor([2, 4],"float64"), )
paddle.mean(Tensor([2, 5, 3, 3, 2, 5],"float64"), )
paddle.mean(Tensor([2, 5, 4],"float32"), )
paddle.mean(Tensor([2, 5, 4],"float64"), )
paddle.mean(Tensor([2, 50, 4],"float32"), )
paddle.mean(Tensor([2, 50, 4],"float64"), )
paddle.mean(Tensor([2, 51, 4],"float32"), )
paddle.mean(Tensor([2, 51, 4],"float64"), )
paddle.mean(Tensor([2, 52, 4],"float32"), )
paddle.mean(Tensor([2, 52, 4],"float64"), )
paddle.mean(Tensor([2, 53, 4],"float32"), )
paddle.mean(Tensor([2, 53, 4],"float64"), )
paddle.mean(Tensor([2, 54, 4],"float32"), )
paddle.mean(Tensor([2, 54, 4],"float64"), )
paddle.mean(Tensor([2, 55, 4],"float32"), )
paddle.mean(Tensor([2, 55, 4],"float64"), )
paddle.mean(Tensor([2, 56, 4],"float32"), )
paddle.mean(Tensor([2, 56, 4],"float64"), )
paddle.mean(Tensor([2, 57, 4],"float32"), )
paddle.mean(Tensor([2, 57, 4],"float64"), )
paddle.mean(Tensor([2, 58, 4],"float32"), )
paddle.mean(Tensor([2, 58, 4],"float64"), )
paddle.mean(Tensor([2, 59, 4],"float32"), )
paddle.mean(Tensor([2, 59, 4],"float64"), )
paddle.mean(Tensor([2, 6, 1, 1, 1],"float32"), )
paddle.mean(Tensor([2, 6, 1, 1, 1],"float64"), )
paddle.mean(Tensor([2, 6, 1, 1],"float32"), )
paddle.mean(Tensor([2, 6, 1, 1],"float64"), )
paddle.mean(Tensor([2, 6, 16, 17, 4],"float64"), )
paddle.mean(Tensor([2, 6, 17, 2],"float64"), )
paddle.mean(Tensor([2, 6, 18, 2],"float64"), )
paddle.mean(Tensor([2, 6, 1],"float32"), )
paddle.mean(Tensor([2, 6, 1],"float64"), )
paddle.mean(Tensor([2, 6, 2, 8],"float32"), )
paddle.mean(Tensor([2, 6, 2, 8],"float64"), )
paddle.mean(Tensor([2, 6, 28, 2],"float64"), )
paddle.mean(Tensor([2, 6, 3, 4, 4, 2],"float32"), )
paddle.mean(Tensor([2, 6, 39, 2],"float64"), )
paddle.mean(Tensor([2, 6, 4],"float32"), )
paddle.mean(Tensor([2, 6, 4],"float64"), )
paddle.mean(Tensor([2, 6, 6, 2],"float64"), )
paddle.mean(Tensor([2, 6, 6, 6, 3],"float64"), )
paddle.mean(Tensor([2, 60, 4],"float32"), )
paddle.mean(Tensor([2, 60, 4],"float64"), )
paddle.mean(Tensor([2, 60],"float64"), )
paddle.mean(Tensor([2, 61, 4],"float32"), )
paddle.mean(Tensor([2, 61, 4],"float64"), )
paddle.mean(Tensor([2, 62, 4],"float32"), )
paddle.mean(Tensor([2, 62, 4],"float64"), )
paddle.mean(Tensor([2, 63, 4],"float32"), )
paddle.mean(Tensor([2, 63, 4],"float64"), )
paddle.mean(Tensor([2, 64, 4],"float32"), )
paddle.mean(Tensor([2, 64, 4],"float64"), )
paddle.mean(Tensor([2, 65, 4],"float32"), )
paddle.mean(Tensor([2, 65, 4],"float64"), )
paddle.mean(Tensor([2, 66, 4],"float32"), )
paddle.mean(Tensor([2, 66, 4],"float64"), )
paddle.mean(Tensor([2, 67, 4],"float32"), )
paddle.mean(Tensor([2, 67, 4],"float64"), )
paddle.mean(Tensor([2, 68, 4],"float32"), )
paddle.mean(Tensor([2, 68, 4],"float64"), )
paddle.mean(Tensor([2, 69, 4],"float32"), )
paddle.mean(Tensor([2, 69, 4],"float64"), )
paddle.mean(Tensor([2, 6],"float32"), )
paddle.mean(Tensor([2, 6],"float64"), )
paddle.mean(Tensor([2, 7, 4],"float32"), )
paddle.mean(Tensor([2, 7, 4],"float64"), )
paddle.mean(Tensor([2, 70, 4],"float32"), )
paddle.mean(Tensor([2, 70, 4],"float64"), )
paddle.mean(Tensor([2, 71, 4],"float32"), )
paddle.mean(Tensor([2, 71, 4],"float64"), )
paddle.mean(Tensor([2, 72, 4],"float32"), )
paddle.mean(Tensor([2, 72, 4],"float64"), )
paddle.mean(Tensor([2, 73, 4],"float32"), )
paddle.mean(Tensor([2, 73, 4],"float64"), )
paddle.mean(Tensor([2, 74, 4],"float32"), )
paddle.mean(Tensor([2, 74, 4],"float64"), )
paddle.mean(Tensor([2, 75, 4],"float32"), )
paddle.mean(Tensor([2, 75, 4],"float64"), )
paddle.mean(Tensor([2, 76, 4],"float32"), )
paddle.mean(Tensor([2, 76, 4],"float64"), )
paddle.mean(Tensor([2, 77, 4],"float32"), )
paddle.mean(Tensor([2, 77, 4],"float64"), )
paddle.mean(Tensor([2, 78, 4],"float32"), )
paddle.mean(Tensor([2, 78, 4],"float64"), )
paddle.mean(Tensor([2, 79, 4],"float32"), )
paddle.mean(Tensor([2, 79, 4],"float64"), )
paddle.mean(Tensor([2, 7],"float64"), )
paddle.mean(Tensor([2, 8, 4],"float32"), )
paddle.mean(Tensor([2, 8, 4],"float64"), )
paddle.mean(Tensor([2, 80, 4],"float32"), )
paddle.mean(Tensor([2, 80, 4],"float64"), )
paddle.mean(Tensor([2, 81, 4],"float32"), )
paddle.mean(Tensor([2, 81, 4],"float64"), )
paddle.mean(Tensor([2, 82, 4],"float32"), )
paddle.mean(Tensor([2, 82, 4],"float64"), )
paddle.mean(Tensor([2, 83, 4],"float32"), )
paddle.mean(Tensor([2, 83, 4],"float64"), )
paddle.mean(Tensor([2, 84, 4],"float32"), )
paddle.mean(Tensor([2, 84, 4],"float64"), )
paddle.mean(Tensor([2, 85, 4],"float32"), )
paddle.mean(Tensor([2, 85, 4],"float64"), )
paddle.mean(Tensor([2, 86, 4],"float32"), )
paddle.mean(Tensor([2, 86, 4],"float64"), )
paddle.mean(Tensor([2, 87, 4],"float32"), )
paddle.mean(Tensor([2, 87, 4],"float64"), )
paddle.mean(Tensor([2, 88, 4],"float32"), )
paddle.mean(Tensor([2, 88, 4],"float64"), )
paddle.mean(Tensor([2, 89, 4],"float32"), )
paddle.mean(Tensor([2, 89, 4],"float64"), )
paddle.mean(Tensor([2, 8],"float64"), )
paddle.mean(Tensor([2, 9, 4],"float32"), )
paddle.mean(Tensor([2, 9, 4],"float64"), )
paddle.mean(Tensor([2, 9, 5, 1],"float64"), )
paddle.mean(Tensor([24, 24],"float64"), )
paddle.mean(Tensor([27],"float64"), )
paddle.mean(Tensor([2],"float32"), )
paddle.mean(Tensor([2],"float64"), )
paddle.mean(Tensor([3, 1, 2],"float64"), )
paddle.mean(Tensor([3, 10, 3, 3],"float32"), )
paddle.mean(Tensor([3, 10, 3, 3],"float64"), )
paddle.mean(Tensor([3, 10000],"float64"), )
paddle.mean(Tensor([3, 1],"float32"), )
paddle.mean(Tensor([3, 1],"float64"), )
paddle.mean(Tensor([3, 2, 1, 2],"float64"), )
paddle.mean(Tensor([3, 2, 1],"float64"), )
paddle.mean(Tensor([3, 2, 2],"float32"), )
paddle.mean(Tensor([3, 2, 2],"float64"), )
paddle.mean(Tensor([3, 2, 3, 1, 5, 1, 2],"float64"), )
paddle.mean(Tensor([3, 2, 3, 3],"float64"), )
paddle.mean(Tensor([3, 2, 32, 32],"float64"), )
paddle.mean(Tensor([3, 2, 3],"float32"), )
paddle.mean(Tensor([3, 2, 3],"float64"), )
paddle.mean(Tensor([3, 2, 4, 4],"float64"), )
paddle.mean(Tensor([3, 2, 4, 6],"float32"), )
paddle.mean(Tensor([3, 2, 6, 4],"float64"), )
paddle.mean(Tensor([3, 2],"float32"), )
paddle.mean(Tensor([3, 2],"float64"), )
paddle.mean(Tensor([3, 3, 2, 5],"float64"), )
paddle.mean(Tensor([3, 3, 2],"float64"), )
paddle.mean(Tensor([3, 3, 3],"float32"), )
paddle.mean(Tensor([3, 3, 3],"float64"), )
paddle.mean(Tensor([3, 3, 5],"float32"), )
paddle.mean(Tensor([3, 3, 5],"float64"), )
paddle.mean(Tensor([3, 3, 6, 3, 2, 5],"float64"), )
paddle.mean(Tensor([3, 3],"float32"), )
paddle.mean(Tensor([3, 3],"float64"), )
paddle.mean(Tensor([3, 3],"float64"), name=None, )
paddle.mean(Tensor([3, 4, 3, 4, 3, 4],"float64"), )
paddle.mean(Tensor([3, 4, 4],"float32"), )
paddle.mean(Tensor([3, 4, 4],"float64"), )
paddle.mean(Tensor([3, 4, 5, 6, 7],"float32"), )
paddle.mean(Tensor([3, 4, 5, 6],"float32"), )
paddle.mean(Tensor([3, 4, 5, 6],"float64"), )
paddle.mean(Tensor([3, 4, 5],"float32"), )
paddle.mean(Tensor([3, 4, 5],"float64"), )
paddle.mean(Tensor([3, 4],"float32"), )
paddle.mean(Tensor([3, 4],"float64"), )
paddle.mean(Tensor([3, 5],"float64"), )
paddle.mean(Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.mean(Tensor([3, 6, 3, 4, 2],"float64"), )
paddle.mean(Tensor([3, 6, 4],"float64"), )
paddle.mean(Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.mean(Tensor([3, 6, 6],"float64"), )
paddle.mean(Tensor([3, 8, 2, 4],"float32"), )
paddle.mean(Tensor([30000],"float64"), )
paddle.mean(Tensor([31],"float64"), )
paddle.mean(Tensor([320],"float64"), )
paddle.mean(Tensor([32],"float64"), )
paddle.mean(Tensor([3],"float32"), )
paddle.mean(Tensor([3],"float64"), )
paddle.mean(Tensor([4, 1, 12, 12],"float64"), )
paddle.mean(Tensor([4, 1, 3, 3],"float64"), )
paddle.mean(Tensor([4, 1, 4],"float32"), )
paddle.mean(Tensor([4, 10, 10, 7],"float64"), )
paddle.mean(Tensor([4, 14, 2],"float64"), )
paddle.mean(Tensor([4, 16],"float32"), )
paddle.mean(Tensor([4, 2, 2],"float64"), )
paddle.mean(Tensor([4, 2, 4],"float64"), )
paddle.mean(Tensor([4, 2, 8, 7],"float64"), )
paddle.mean(Tensor([4, 2],"float64"), )
paddle.mean(Tensor([4, 3, 2, 5],"float64"), )
paddle.mean(Tensor([4, 3, 3, 4],"float64"), name=None, )
paddle.mean(Tensor([4, 3, 3],"float64"), name=None, )
paddle.mean(Tensor([4, 3, 6, 3, 4, 5],"float64"), )
paddle.mean(Tensor([4, 31],"float64"), )
paddle.mean(Tensor([4, 3],"float32"), )
paddle.mean(Tensor([4, 3],"float64"), )
paddle.mean(Tensor([4, 4, 3, 3],"float64"), )
paddle.mean(Tensor([4, 4, 4, 4, 5],"float64"), )
paddle.mean(Tensor([4, 4, 4, 4],"float64"), )
paddle.mean(Tensor([4, 4, 4],"float64"), )
paddle.mean(Tensor([4, 4],"float32"), )
paddle.mean(Tensor([4, 4],"float64"), )
paddle.mean(Tensor([4, 5, 10, 10],"float32"), )
paddle.mean(Tensor([4, 5, 10, 10],"float64"), )
paddle.mean(Tensor([4, 5, 100, 50],"float64"), )
paddle.mean(Tensor([4, 5, 22, 28],"float64"), )
paddle.mean(Tensor([4, 5, 4, 3],"float64"), )
paddle.mean(Tensor([4, 5, 4, 5],"float64"), )
paddle.mean(Tensor([4, 5, 4],"float64"), )
paddle.mean(Tensor([4, 5, 6, 7],"float64"), )
paddle.mean(Tensor([4, 5, 6],"float64"), )
paddle.mean(Tensor([4, 5, 7, 23],"float64"), )
paddle.mean(Tensor([4, 5],"float64"), )
paddle.mean(Tensor([4, 6, 1, 8],"float32"), )
paddle.mean(Tensor([4, 6, 1, 8],"float64"), )
paddle.mean(Tensor([4, 6, 2, 4],"float32"), )
paddle.mean(Tensor([4, 6, 2, 4],"float64"), )
paddle.mean(Tensor([4, 6],"float32"), )
paddle.mean(Tensor([4, 8],"float64"), )
paddle.mean(Tensor([4, 9, 12, 12],"float64"), )
paddle.mean(Tensor([40, 2],"float64"), )
paddle.mean(Tensor([4],"float32"), )
paddle.mean(Tensor([4],"float64"), )
paddle.mean(Tensor([5, 2],"float32"), )
paddle.mean(Tensor([5, 2],"float64"), )
paddle.mean(Tensor([5, 2],"float64"), name=None, )
paddle.mean(Tensor([5, 3, 2, 5],"float64"), )
paddle.mean(Tensor([5, 5],"float64"), )
paddle.mean(Tensor([5, 8],"float64"), )
paddle.mean(Tensor([5],"float32"), )
paddle.mean(Tensor([5],"float64"), )
paddle.mean(Tensor([6, 2],"float64"), )
paddle.mean(Tensor([6, 4, 2, 2],"float64"), )
paddle.mean(Tensor([6, 6, 6, 6],"float64"), )
paddle.mean(Tensor([6, 6, 6],"float64"), )
paddle.mean(Tensor([6, 6],"float32"), )
paddle.mean(Tensor([6, 6],"float64"), )
paddle.mean(Tensor([6, 9],"float32"), )
paddle.mean(Tensor([6, 9],"float64"), )
paddle.mean(Tensor([64],"float64"), )
paddle.mean(Tensor([6],"float32"), )
paddle.mean(Tensor([6],"float64"), )
paddle.mean(Tensor([72, 72],"float64"), )
paddle.mean(Tensor([8, 24],"float64"), )
paddle.mean(Tensor([8, 4],"float64"), )
paddle.mean(Tensor([80, 96],"float64"), )
paddle.mean(Tensor([8],"float64"), )
paddle.mean(Tensor([9, 2, 2, 3],"float64"), )
paddle.mean(Tensor([9],"float64"), )
paddle.mean(Tensor([],"float32"), )
paddle.mean(Tensor([],"float64"), )
paddle.mean(x=Tensor([1, 4],"float32"), )
paddle.mean(x=Tensor([1, 4],"float64"), )
paddle.mean(x=Tensor([1, 4],"float64"), axis=-2, )
paddle.mean(x=Tensor([1, 4],"float64"), axis=-2, keepdim=False, )
paddle.mean(x=Tensor([1, 4],"float64"), axis=1, )
paddle.mean(x=Tensor([1, 4],"float64"), axis=1, keepdim=True, )
paddle.mean(x=Tensor([2, 1, 3],"float64"), axis=Tensor([2],"int64"), )
paddle.mean(x=Tensor([2, 1, 3],"float64"), axis=list[0,1,2,], )
paddle.mean(x=Tensor([2, 1, 3],"float64"), axis=list[0,1,2,], keepdim=False, )
paddle.mean(x=Tensor([2, 1, 3],"float64"), axis=list[0,1,], )
paddle.mean(x=Tensor([2, 1, 3],"float64"), axis=list[0,2,], keepdim=True, )
paddle.mean(x=Tensor([2, 1, 3],"float64"), axis=tuple(0,1,2,), keepdim=False, )
paddle.mean(x=Tensor([2, 1, 3],"float64"), axis=tuple(0,2,), keepdim=True, )
paddle.median(Tensor([3, 4],"float64"), 0, )
paddle.median(x=Tensor([4, 4, 4],"float32"), axis=-2, keepdim=True, )
paddle.median(x=Tensor([4, 4, 4],"float32"), axis=0, keepdim=False, )
paddle.median(x=Tensor([4, 4, 4],"float32"), axis=1, keepdim=False, )
paddle.median(x=Tensor([4, 4, 4],"float32"), axis=1, keepdim=True, )
paddle.meshgrid(Tensor([2],"float32"), Tensor([4],"float32"), )
paddle.meshgrid(Tensor([2],"float32"), Tensor([4],"float32"), Tensor([6],"float32"), )
paddle.meshgrid(Tensor([2],"float64"), Tensor([4],"float64"), )
paddle.meshgrid(Tensor([2],"float64"), Tensor([4],"float64"), Tensor([6],"float64"), )
paddle.meshgrid(Tensor([2],"int32"), Tensor([4],"int32"), )
paddle.meshgrid(Tensor([2],"int32"), Tensor([4],"int32"), Tensor([6],"int32"), )
paddle.meshgrid(Tensor([2],"int64"), Tensor([4],"int64"), )
paddle.meshgrid(Tensor([2],"int64"), Tensor([4],"int64"), Tensor([6],"int64"), )
paddle.min(x=Tensor([2, 2],"float32"), axis=list[-2,1,], keepdim=False, )
paddle.min(x=Tensor([2, 3],"float32"), )
paddle.min(x=Tensor([2, 3],"float32"), axis=-2, )
paddle.min(x=Tensor([2, 3],"float32"), axis=0, keepdim=True, )
paddle.min(x=Tensor([2, 3],"float32"), axis=1, )
paddle.min(x=Tensor([2, 3],"float32"), axis=Tensor([1],"int32"), )
paddle.minimum(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.minimum(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.minimum(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.mm(Tensor([4, 12],"float64"), Tensor([12, 4],"float64"), )
paddle.mm(Tensor([4, 2],"float32"), Tensor([2, 4],"float32"), )
paddle.mm(Tensor([4, 2],"float64"), Tensor([2, 4],"float64"), )
paddle.mm(input=Tensor([2, 3, 1, 2],"float64"), mat2=Tensor([2, 3, 2, 3],"float64"), )
paddle.mm(input=Tensor([2, 3, 4],"float64"), mat2=Tensor([2, 4, 2],"float64"), )
paddle.mm(input=Tensor([2, 3, 4],"float64"), mat2=Tensor([4, 5],"float64"), )
paddle.mm(input=Tensor([2, 3, 4],"float64"), mat2=Tensor([4],"float64"), )
paddle.mm(input=Tensor([2, 3],"float32"), mat2=Tensor([3, 2],"float32"), )
paddle.mm(input=Tensor([2, 3],"float64"), mat2=Tensor([3, 2],"float64"), )
paddle.mm(input=Tensor([7],"float64"), mat2=Tensor([7],"float64"), )
paddle.mod(Tensor([1],"int32"), Tensor([1],"int32"), )
paddle.mod(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.mod(Tensor([2, 4, 5],"int32"), Tensor([2, 4, 5],"int32"), )
paddle.mod(Tensor([4, 5],"int32"), Tensor([4, 5],"int32"), )
paddle.mod(Tensor([6, 2, 4, 5],"int32"), Tensor([6, 2, 4, 5],"int32"), )
paddle.mode(x=Tensor([3, 2, 3],"float32"), )
paddle.mode(x=Tensor([3, 2, 3],"float64"), )
paddle.mode(x=Tensor([3, 2, 3],"float64"), axis=1, keepdim=False, )
paddle.mode(x=Tensor([3, 2, 3],"float64"), axis=2, keepdim=True, )
paddle.mode(x=Tensor([3, 2, 3],"int32"), )
paddle.mode(x=Tensor([3, 2, 3],"int64"), )
paddle.moveaxis(x=Tensor([4, 2, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.moveaxis(x=Tensor([4, 2, 3, 5],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 2, 3],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 2],"complex128"), source=0, destination=1, )
paddle.moveaxis(x=Tensor([4, 2],"complex64"), source=0, destination=1, )
paddle.moveaxis(x=Tensor([4, 2],"float32"), source=0, destination=1, )
paddle.moveaxis(x=Tensor([4, 2],"float64"), source=0, destination=1, )
paddle.moveaxis(x=Tensor([4, 2],"int32"), source=0, destination=1, )
paddle.moveaxis(x=Tensor([4, 2],"int64"), source=0, destination=1, )
paddle.multinomial(Tensor([2, 7],"float32"), num_samples=5, replacement=True, name=None, )
paddle.multinomial(Tensor([2, 7],"float64"), num_samples=5, replacement=True, name=None, )
paddle.multinomial(Tensor([6],"float32"), name=None, )
paddle.multinomial(Tensor([6],"float32"), num_samples=Tensor([],"int64"), name=None, )
paddle.multinomial(Tensor([6],"float64"), name=None, )
paddle.multinomial(Tensor([6],"float64"), num_samples=Tensor([],"int64"), name=None, )
paddle.multinomial(Tensor([7],"float32"), num_samples=4, name=None, )
paddle.multinomial(Tensor([7],"float64"), num_samples=4, name=None, )
paddle.multiplex(inputs=list[Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),], index=Tensor([3, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),], index=Tensor([4, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([7, 4],"float32"),Tensor([7, 4],"float32"),], index=Tensor([6, 1],"int32"), )
paddle.multiply(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.multiply(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), )
paddle.multiply(Tensor([1, 5],"float64"), Tensor([1, 5],"float64"), )
paddle.multiply(Tensor([10, 2, 4],"float32"), Tensor([10, 2, 4],"float32"), name=None, )
paddle.multiply(Tensor([10, 2, 4],"float64"), Tensor([10, 2, 4],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 3],"float32"), Tensor([2, 1, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 3],"float64"), Tensor([2, 1, 1, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 2, 3],"float32"), Tensor([2, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 2, 3],"float64"), Tensor([2, 1, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), name=None, )
paddle.multiply(Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), name=None, )
paddle.multiply(Tensor([2, 3, 4],"float64"), Tensor([2, 3, 4],"float64"), )
paddle.multiply(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.multiply(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), )
paddle.multiply(Tensor([2, 6, 2, 8],"float32"), Tensor([2, 6, 2, 8],"float32"), name=None, )
paddle.multiply(Tensor([2, 6, 2, 8],"float64"), Tensor([2, 6, 2, 8],"float64"), name=None, )
paddle.multiply(Tensor([3, 8, 2],"float64"), Tensor([3, 8, 2],"float64"), )
paddle.multiply(Tensor([4, 4, 16],"float32"), Tensor([16],"float32"), )
paddle.multiply(Tensor([4, 4, 16],"float32"), Tensor([4, 4, 1],"float32"), )
paddle.multiply(Tensor([4, 4, 32],"float32"), Tensor([32],"float32"), )
paddle.multiply(Tensor([4, 4, 32],"float32"), Tensor([4, 4, 1],"float32"), )
paddle.multiply(Tensor([4, 6, 1, 8],"float32"), Tensor([4, 6, 1, 8],"float32"), name=None, )
paddle.multiply(Tensor([4, 6, 1, 8],"float64"), Tensor([4, 6, 1, 8],"float64"), name=None, )
paddle.multiply(Tensor([4, 6, 2, 4],"float32"), Tensor([4, 6, 2, 4],"float32"), name=None, )
paddle.multiply(Tensor([4, 6, 2, 4],"float64"), Tensor([4, 6, 2, 4],"float64"), name=None, )
paddle.multiply(Tensor([4, 8, 32],"float32"), Tensor([32],"float32"), )
paddle.multiply(Tensor([4, 8, 32],"float32"), Tensor([4, 8, 1],"float32"), )
paddle.multiply(Tensor([5, 1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.multiply(Tensor([5, 1, 3],"float64"), Tensor([2, 3],"float64"), )
paddle.multiply(Tensor([5, 1, 3],"float64"), Tensor([5, 1, 3],"float64"), )
paddle.multiply(Tensor([5, 10, 15, 20],"float32"), Tensor([5, 10, 15, 20],"float32"), )
paddle.multiply(Tensor([5, 2, 3, 4],"float64"), Tensor([2, 3, 4],"float64"), )
paddle.multiply(Tensor([5, 2, 3, 4],"float64"), Tensor([5, 2, 3, 4],"float64"), )
paddle.multiply(Tensor([5],"float32"), Tensor([5],"float32"), name=None, )
paddle.multiply(Tensor([5],"float64"), Tensor([5],"float64"), name=None, )
paddle.multiply(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.multiply(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.multiply(x=Tensor([1],"float32"), y=Tensor([4],"float32"), )
paddle.multiply(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.mv(Tensor([3, 12],"float32"), Tensor([12],"float32"), )
paddle.mv(Tensor([3, 36],"float32"), Tensor([36],"float32"), )
paddle.mv(Tensor([3, 6],"float32"), Tensor([6],"float32"), )
paddle.mv(x=Tensor([1, 2],"float64"), vec=Tensor([2],"float64"), )
paddle.mv(x=Tensor([2, 1],"float64"), vec=Tensor([1],"float64"), )
paddle.mv(x=Tensor([2, 3],"float64"), vec=Tensor([3],"float64"), )
paddle.mv(x=Tensor([3, 2],"float32"), vec=Tensor([2],"float32"), )
paddle.mv(x=Tensor([3, 2],"float64"), vec=Tensor([2],"float64"), )
paddle.mv(x=Tensor([3, 3],"float64"), vec=Tensor([3],"float64"), )
paddle.nansum(x=Tensor([3, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 3, 3],"float64"), )
paddle.nansum(x=Tensor([3, 3, 3],"float64"), axis=-1, )
paddle.nansum(x=Tensor([3, 3, 3],"float64"), axis=0, )
paddle.nansum(x=Tensor([3, 3, 3],"float64"), axis=0, keepdim=True, )
paddle.neg(x=Tensor([6, 6, 6],"float64"), )
paddle.neg(x=Tensor([6, 6],"float32"), )
paddle.neg(x=Tensor([6, 6],"float64"), )
paddle.neg(x=Tensor([6, 6],"int16"), )
paddle.neg(x=Tensor([6, 6],"int32"), )
paddle.neg(x=Tensor([6, 6],"int64"), )
paddle.neg(x=Tensor([6, 6],"int8"), )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 8],"float32"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 8],"float64"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 8],"float64"), 4, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 8],"float64"), 8, None, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 3, 8],"float32"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 3, 8],"float64"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 3, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 3, 8],"float64"), output_size=8, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 4],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 4],"float64"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 4],"float64"), output_size=list[1,1,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 4],"float64"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 4],"float64"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 4],"float64"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 3],"float64"), output_size=3, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 3],"float64"), output_size=Tensor([2],"int32"), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 3],"float64"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 3],"float64"), output_size=tuple(3,3,), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 4],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), output_size=list[1,1,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 4, 3],"float64"), output_size=3, data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 4, 3],"float64"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 4, 3],"float64"), output_size=tuple(3,3,), data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=Tensor([3],"int64"), )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_max_pool1d(Tensor([1, 1, 4],"float64"), 4, True, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 32],"float64"), 8, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 8],"float32"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 8],"float64"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([1, 1, 4],"float64"), output_size=4, return_mask=True, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 3, 32],"float64"), output_size=8, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 3, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 3, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 1, 5, 5],"float32"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 1, 5, 5],"float64"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 2, 8, 8],"float64"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 1, 8, 8],"float32"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 1, 8, 8],"float64"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 1, 5, 5],"float32"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 1, 5, 5],"float64"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 2, 8, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 1, 8, 8],"float32"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 1, 8, 8],"float64"), output_size=3, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 1, 5, 5, 5],"float32"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 1, 5, 5, 5],"float64"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 8, 8, 8],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 8, 8, 8],"float64"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 1, 5, 5, 5],"float32"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 1, 5, 5, 5],"float64"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 8, 8, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 8, 8, 8],"float64"), output_size=4, )
paddle.nn.functional.affine_grid(Tensor([1, 2, 3],"float32"), Tensor([4],"int32"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([1, 2, 3],"float64"), Tensor([4],"int32"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([4, 2, 3],"float64"), Tensor([4],"int32"), align_corners=False, )
paddle.nn.functional.affine_grid(Tensor([4, 2, 3],"float64"), Tensor([4],"int32"), align_corners=True, )
paddle.nn.functional.alpha_dropout(Tensor([2, 3],"float32"), p=0, training=True, name=None, )
paddle.nn.functional.alpha_dropout(Tensor([2, 3],"float32"), p=0.5, training=True, name=None, )
paddle.nn.functional.alpha_dropout(Tensor([2, 3],"float32"), p=1.0, training=True, name=None, )
paddle.nn.functional.alpha_dropout(Tensor([5, 10, 15, 20],"float32"), p=0.5, training=True, name=None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float32"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float64"), 1, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float64"), 2, 1, 0, True, True, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float64"), 2, 1, 1, False, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float64"), 3, 4, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=1, stride=1, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=1, padding=1, exclusive=False, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 32, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float64"), Tensor([3, 2],"float64"), Tensor([4, 1, 2],"float64"), Tensor([1, 4],"float64"), None, )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 1, 2],"float64"), label=Tensor([1, 1, 2],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy(Tensor([5, 2],"float64"), Tensor([5, 2],"float64"), None, "mean", None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 2],"float64"), label=Tensor([1, 1, 2],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([5, 2],"float64"), Tensor([5, 2],"float64"), None, "mean", None, None, )
paddle.nn.functional.celu(Tensor([2, 2],"float64"), -0.4, None, )
paddle.nn.functional.celu(Tensor([2, 3, 4],"float32"), 1.0, None, )
paddle.nn.functional.celu(Tensor([2, 3, 4],"float64"), 1.0, None, )
paddle.nn.functional.celu(Tensor([2, 4, 4],"float64"), 0.2, None, )
paddle.nn.functional.celu(Tensor([2, 4, 4],"float64"), 1.0, None, )
paddle.nn.functional.celu(x=Tensor([2, 2],"float64"), alpha=-0.4, )
paddle.nn.functional.celu(x=Tensor([2, 3, 4],"float32"), )
paddle.nn.functional.celu(x=Tensor([2, 3, 4],"float64"), )
paddle.nn.functional.celu(x=Tensor([2, 4, 4],"float64"), )
paddle.nn.functional.celu(x=Tensor([2, 4, 4],"float64"), alpha=0.2, )
paddle.nn.functional.class_center_sample(Tensor([15],"int32"), 20, 8, )
paddle.nn.functional.class_center_sample(Tensor([5],"int32"), 10, 8, )
paddle.nn.functional.conv1d(Tensor([1, 3, 5],"float32"), Tensor([4, 3, 3],"float32"), bias=Tensor([4],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 2],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([3, 3, 2],"float32"), bias=Tensor([3],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 2],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([3, 3, 2],"float64"), bias=Tensor([3],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([6, 1, 3],"float64"), bias=Tensor([6],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 6],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 6],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float32"), Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float64"), Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([3, 3, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([3, 3, 2],"float64"), bias=Tensor([3],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([6, 1, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float64"), weight=Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([2],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,], output_padding=1, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 2, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], output_padding=0, groups=1, dilation=2, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 5],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding="SaME", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 5],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding="vALiD", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 8],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[4,4,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 8],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[3,4,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 8, 3],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[3,4,],list[0,0,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NLC", )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([3, 3, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 2, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([2, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([3, 3, 2, 2],"float64"), bias=Tensor([3],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 4, 3],"float64"), weight=Tensor([2, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,0,], output_padding=1, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding="vaLiD", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 8, 8, 3],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[1,2,],list[3,4,],list[0,0,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([6, 1, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 2, 2, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([2, 3, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([3, 3, 2, 2, 2],"float64"), bias=Tensor([3],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([6, 1, 3, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float64"), weight=Tensor([2, 3, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-07, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-09, )
paddle.nn.functional.cosine_similarity(Tensor([3, 8, 2],"float64"), Tensor([3, 8, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([5, 1, 3],"float64"), Tensor([1, 3],"float64"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([5, 2, 3, 4],"float64"), Tensor([2, 3, 4],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3, 4],"float64"), x2=Tensor([2, 3, 4],"float64"), axis=1, eps=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3],"float32"), x2=Tensor([2, 3],"float32"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3],"float64"), x2=Tensor([2, 3],"float64"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3],"float64"), x2=Tensor([2, 3],"float64"), axis=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3],"float64"), x2=Tensor([2, 3],"float64"), axis=1, )
paddle.nn.functional.cross_entropy(Tensor([25, 529, 44, 44],"float64"), Tensor([25, 1, 44, 44],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 125, 125, 7],"float64"), Tensor([4, 125, 125],"int64"), weight=Tensor([7],"float64"), ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([5, 10],"float64"), Tensor([5],"int64"), weight=Tensor([10],"float64"), ignore_index=-25, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([5, 2],"float64"), Tensor([5],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([5, 2],"float64"), label=Tensor([5],"int64"), weight=None, ignore_index=-100, soft_label=False, axis=-1, reduction="mean", name=None, )
paddle.nn.functional.ctc_loss(Tensor([5, 2, 3],"float64"), Tensor([2, 3],"int32"), Tensor([2],"int64"), Tensor([2],"int64"), 0, "mean", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([5, 2, 3],"float64"), Tensor([2, 3],"int32"), Tensor([2],"int64"), Tensor([2],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([5, 2, 3],"float64"), labels=Tensor([2, 3],"int32"), input_lengths=Tensor([2],"int64"), label_lengths=Tensor([2],"int64"), blank=0, reduction="mean", )
paddle.nn.functional.ctc_loss(Tensor([5, 2, 3],"float64"), labels=Tensor([2, 3],"int32"), input_lengths=Tensor([2],"int64"), label_lengths=Tensor([2],"int64"), blank=0, reduction="none", )
paddle.nn.functional.dice_loss(Tensor([5, 2],"float64"), label=Tensor([5, 1],"int64"), epsilon=1e-05, )
paddle.nn.functional.dropout(Tensor([1, 2, 2],"float32"), p=0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([1, 2, 4],"float32"), p=0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 2, 4, 4],"float32"), 0.1, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 2, 4, 6],"float32"), 0.1, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 4, 128],"float64"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 4, 16],"float32"), p=0.1, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 4, 512],"float64"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 4, 8],"float32"), p=0.1, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 6, 128],"float64"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 6, 512],"float64"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([3, 7, 54],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([3, 7, 883],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([5, 3, 15],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([5, 3, 763],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([6],"float32"), p=0.5, )
paddle.nn.functional.dropout(Tensor([6],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([6],"float32"), p=Tensor([],"float32"), )
paddle.nn.functional.dropout(Tensor([6],"float32"), p=Tensor([],"float32"), axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([6],"float64"), p=0.5, )
paddle.nn.functional.dropout(Tensor([6],"float64"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([6],"float64"), p=Tensor([],"float32"), )
paddle.nn.functional.dropout(Tensor([6],"float64"), p=Tensor([],"float32"), axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([8, 3, 226],"float64"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([8, 3, 45],"float64"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([8, 8, 226],"float64"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([8, 8, 45],"float64"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([9, 4, 24],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([9, 4, 424],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout2d(Tensor([2, 1, 2, 3],"float32"), p=0.5, )
paddle.nn.functional.dropout2d(Tensor([2, 1, 2, 3],"float32"), p=0.5, training=True, data_format="NCHW", name=None, )
paddle.nn.functional.dropout2d(Tensor([2, 1, 2, 3],"float32"), p=Tensor([],"float32"), )
paddle.nn.functional.dropout2d(Tensor([2, 1, 2, 3],"float32"), p=Tensor([],"float32"), training=True, data_format="NCHW", name=None, )
paddle.nn.functional.dropout2d(Tensor([2, 1, 2, 3],"float64"), p=0.5, )
paddle.nn.functional.dropout2d(Tensor([2, 1, 2, 3],"float64"), p=0.5, training=True, data_format="NCHW", name=None, )
paddle.nn.functional.dropout2d(Tensor([2, 1, 2, 3],"float64"), p=Tensor([],"float32"), )
paddle.nn.functional.dropout2d(Tensor([2, 1, 2, 3],"float64"), p=Tensor([],"float32"), training=True, data_format="NCHW", name=None, )
paddle.nn.functional.dropout3d(Tensor([2, 1, 1, 2, 3],"float32"), p=0.5, )
paddle.nn.functional.dropout3d(Tensor([2, 1, 1, 2, 3],"float32"), p=0.5, training=True, data_format="NCDHW", name=None, )
paddle.nn.functional.dropout3d(Tensor([2, 1, 1, 2, 3],"float32"), p=Tensor([],"float32"), )
paddle.nn.functional.dropout3d(Tensor([2, 1, 1, 2, 3],"float32"), p=Tensor([],"float32"), training=True, data_format="NCDHW", name=None, )
paddle.nn.functional.dropout3d(Tensor([2, 1, 1, 2, 3],"float64"), p=0.5, )
paddle.nn.functional.dropout3d(Tensor([2, 1, 1, 2, 3],"float64"), p=0.5, training=True, data_format="NCDHW", name=None, )
paddle.nn.functional.dropout3d(Tensor([2, 1, 1, 2, 3],"float64"), p=Tensor([],"float32"), )
paddle.nn.functional.dropout3d(Tensor([2, 1, 1, 2, 3],"float64"), p=Tensor([],"float32"), training=True, data_format="NCDHW", name=None, )
paddle.nn.functional.elu(Tensor([2, 2],"float64"), 0.2, None, )
paddle.nn.functional.elu(Tensor([3, 3, 3],"float32"), 1.0, None, )
paddle.nn.functional.elu(Tensor([3, 3, 3],"float64"), 0, None, )
paddle.nn.functional.elu(Tensor([3, 3, 3],"float64"), 1.0, None, )
paddle.nn.functional.elu(Tensor([3, 3, 3],"float64"), 2, None, )
paddle.nn.functional.elu(x=Tensor([2, 2],"float64"), alpha=0.2, )
paddle.nn.functional.elu(x=Tensor([3, 3, 3],"float32"), )
paddle.nn.functional.elu(x=Tensor([3, 3, 3],"float64"), )
paddle.nn.functional.elu(x=Tensor([3, 3, 3],"float64"), alpha=0, )
paddle.nn.functional.elu(x=Tensor([3, 3, 3],"float64"), alpha=2, )
paddle.nn.functional.embedding(Tensor([2, 4],"int32"), weight=Tensor([10, 3],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 4],"int64"), weight=Tensor([10, 3],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 4],"int64"), Tensor([10, 4],"float64"), padding_idx=-4, )
paddle.nn.functional.embedding(Tensor([3, 4],"int64"), Tensor([10, 4],"float64"), padding_idx=9, )
paddle.nn.functional.embedding(Tensor([3, 4],"int64"), Tensor([10, 4],"float64"), padding_idx=None, )
paddle.nn.functional.embedding(Tensor([4, 4],"int64"), weight=Tensor([100, 16],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 4],"int64"), weight=Tensor([100, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 8],"int64"), weight=Tensor([100, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4],"int32"), Tensor([10, 4],"float64"), padding_idx=None, )
paddle.nn.functional.embedding(Tensor([4],"int64"), Tensor([10, 4],"float64"), padding_idx=None, )
paddle.nn.functional.fold(Tensor([2, 12, 2],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), strides=2, )
paddle.nn.functional.fold(Tensor([2, 12, 2],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), strides=2, paddings=1, dilations=2, )
paddle.nn.functional.fold(Tensor([2, 12, 6],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), )
paddle.nn.functional.fold(Tensor([2, 12, 6],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), strides=2, paddings=1, )
paddle.nn.functional.fold(Tensor([3, 12, 12],"float32"), output_sizes=list[4,5,], kernel_sizes=2, )
paddle.nn.functional.fold(Tensor([3, 12, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=2, )
paddle.nn.functional.fold(Tensor([3, 12, 9],"float64"), output_sizes=4, kernel_sizes=2, )
paddle.nn.functional.gather_tree(Tensor([11, 4, 4],"int64"), Tensor([11, 4, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([11, 4, 8],"int64"), Tensor([11, 4, 8],"int64"), )
paddle.nn.functional.gather_tree(Tensor([6, 4, 4],"int64"), Tensor([6, 4, 4],"int64"), )
paddle.nn.functional.gelu(Tensor([1, 2, 2],"float32"), )
paddle.nn.functional.gelu(Tensor([3, 3, 3],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([3, 3, 3],"float64"), False, None, )
paddle.nn.functional.gelu(Tensor([3, 3, 3],"float64"), True, None, )
paddle.nn.functional.gelu(x=Tensor([3, 3, 3],"float32"), )
paddle.nn.functional.gelu(x=Tensor([3, 3, 3],"float64"), )
paddle.nn.functional.gelu(x=Tensor([3, 3, 3],"float64"), approximate=True, )
paddle.nn.functional.glu(x=Tensor([10, 2, 8],"float32"), )
paddle.nn.functional.glu(x=Tensor([10, 2, 8],"float64"), )
paddle.nn.functional.glu(x=Tensor([10],"float32"), )
paddle.nn.functional.glu(x=Tensor([10],"float64"), )
paddle.nn.functional.glu(x=Tensor([2, 4],"float32"), )
paddle.nn.functional.glu(x=Tensor([2, 4],"float64"), )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 8],"float32"), )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 8],"float32"), axis=0, )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 8],"float32"), axis=2, )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 8],"float64"), )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 8],"float64"), axis=0, )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 8],"float64"), axis=2, )
paddle.nn.functional.gumbel_softmax(x=Tensor([2, 3, 4],"float64"), )
paddle.nn.functional.gumbel_softmax(x=Tensor([2, 3, 4],"float64"), temperature=4.0, )
paddle.nn.functional.gumbel_softmax(x=Tensor([2, 3, 4],"float64"), temperature=4.0, hard=True, )
paddle.nn.functional.gumbel_softmax(x=Tensor([3, 4, 5],"float64"), temperature=4.0, hard=True, axis=0, )
paddle.nn.functional.gumbel_softmax(x=Tensor([3, 4],"float64"), )
paddle.nn.functional.gumbel_softmax(x=Tensor([4],"float32"), )
paddle.nn.functional.gumbel_softmax(x=Tensor([4],"float64"), )
paddle.nn.functional.hardshrink(Tensor([3],"float32"), -1, None, )
paddle.nn.functional.hardshrink(Tensor([3],"float32"), 0.5, None, )
paddle.nn.functional.hardshrink(Tensor([3],"float64"), -1, None, )
paddle.nn.functional.hardshrink(Tensor([3],"float64"), 0, None, )
paddle.nn.functional.hardshrink(Tensor([3],"float64"), 0.5, None, )
paddle.nn.functional.hardshrink(x=Tensor([3],"float32"), )
paddle.nn.functional.hardshrink(x=Tensor([3],"float64"), )
paddle.nn.functional.hardshrink(x=Tensor([3],"float64"), threshold=-1, )
paddle.nn.functional.hardshrink(x=Tensor([3],"float64"), threshold=0, )
paddle.nn.functional.hardsigmoid(Tensor([2, 2],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 2],"float64"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([3, 3],"float64"), name=None, )
paddle.nn.functional.hardswish(Tensor([3, 3, 3],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([3, 3, 3],"float64"), None, )
paddle.nn.functional.hardswish(Tensor([3, 4],"float64"), None, )
paddle.nn.functional.hardswish(x=Tensor([2, 4],"float32"), )
paddle.nn.functional.hardswish(x=Tensor([2, 4],"float64"), )
paddle.nn.functional.hardswish(x=Tensor([4, 2, 4],"float64"), )
paddle.nn.functional.hardtanh(Tensor([3, 3, 3],"float64"), -3.2, -3.2, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 3],"float64"), -3.4, 0, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 3],"float64"), 0, 0, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 3],"float64"), 0, 1.3, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 3],"float64"), 1, 1, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 3],"float64"), 2.3, 3.5, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 3],"float64"), 3.3, -3.3, None, )
paddle.nn.functional.hardtanh(Tensor([3],"float32"), -1.0, 1.0, None, )
paddle.nn.functional.hardtanh(Tensor([3],"float64"), -1.0, 1.0, None, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 3],"float64"), max=-3.2, min=-3.2, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 3],"float64"), max=-3.3, min=3.3, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 3],"float64"), max=0, min=-3.4, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 3],"float64"), max=0, min=0, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 3],"float64"), max=1, min=1, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 3],"float64"), max=1.3, min=0, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 3],"float64"), max=3.5, min=2.3, )
paddle.nn.functional.hardtanh(x=Tensor([3],"float32"), )
paddle.nn.functional.hardtanh(x=Tensor([3],"float64"), )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float64"), Tensor([3, 3],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float64"), Tensor([3, 3],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float64"), Tensor([3, 3],"float64"), reduction="mean", margin=4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float64"), Tensor([3, 3],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="none", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="sum", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3],"float64"), Tensor([4, 3, 3],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.instance_norm(x=Tensor([2, 1, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 3],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 3],"float64"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 3],"float64"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 10, 4],"float64"), size=None, scale_factor=list[0.6,1.6,1.7,], mode="trilinear", align_corners=False, align_mode=0, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 10, 4],"float64"), size=None, scale_factor=list[0.6,1.6,1.7,], mode="trilinear", align_corners=False, align_mode=1, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 10, 4],"float64"), size=None, scale_factor=list[0.6,1.6,1.7,], mode="trilinear", align_corners=True, align_mode=0, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 10, 4],"float64"), size=None, scale_factor=list[0.6,1.6,1.7,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 10, 4],"float64"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 10, 4],"float64"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=1, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 10, 4],"float64"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=0, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 10, 4],"float64"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[14,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[14,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[14,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[14,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[14,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[14,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[14,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[14,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[14,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[14,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[14,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[14,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[2,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[26,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[26,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[26,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[26,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[26,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[26,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[26,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 2],"float64"), size=list[26,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[11,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[11,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[11,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[11,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[14,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[14,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[14,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[14,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[17,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[17,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[17,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[17,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[2,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[2,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[2,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[2,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[20,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[20,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[20,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[20,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[23,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[23,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[23,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[23,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[26,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[26,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[26,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[26,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[29,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[29,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[29,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[29,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[5,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[5,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[5,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[5,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[8,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[8,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[8,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=list[8,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=Tensor([1],"float32"), mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.4,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.4,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.4,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.4,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.6000000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.6000000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.6000000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.6000000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.8000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.8000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.8000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.8000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.0000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.0000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.0000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.0000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.2000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.2000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.2000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.2000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.4000000000000004,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.4000000000000004,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.4000000000000004,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.4000000000000004,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.6000000000000005,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.6000000000000005,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.6000000000000005,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.6000000000000005,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.8000000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.8000000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.8000000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.8000000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.0000000000000004,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.0000000000000004,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.0000000000000004,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.0000000000000004,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.2000000000000006,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.2000000000000006,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.2000000000000006,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.2000000000000006,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.400000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.400000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.400000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.400000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.6000000000000005,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.6000000000000005,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.6000000000000005,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.6000000000000005,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.8000000000000007,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.8000000000000007,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.8000000000000007,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.8000000000000007,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.000000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.000000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.000000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.000000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.2000000000000006,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.2000000000000006,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.2000000000000006,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.2000000000000006,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.400000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.400000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.400000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.400000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.600000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.600000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.600000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.600000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.800000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.800000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.800000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.800000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.200000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.200000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.200000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.200000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.400000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.400000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.400000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.400000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.600000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.600000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.600000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.600000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.800000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.800000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.800000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.800000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.200000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.200000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.200000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.200000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.400000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.400000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.400000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.400000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.600000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.600000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.600000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.600000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.8000000000000025,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.8000000000000025,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.8000000000000025,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.8000000000000025,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.200000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.200000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.200000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.200000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.400000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.400000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.400000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.400000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.600000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.600000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.600000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.600000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.8000000000000025,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.8000000000000025,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.8000000000000025,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.8000000000000025,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.000000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.000000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.000000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.000000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.200000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.200000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.200000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.200000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.400000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.400000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.400000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.400000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.600000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.600000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.600000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.600000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.8000000000000025,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.8000000000000025,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.8000000000000025,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.8000000000000025,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.200000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.200000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.200000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.200000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.400000000000004,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.400000000000004,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.400000000000004,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.400000000000004,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.600000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.600000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.600000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.600000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.800000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.800000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.800000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.800000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=Tensor([1],"int32"), scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[11,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[11,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[11,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[11,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[14,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[14,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[14,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[14,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[17,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[17,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[17,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[17,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[2,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[2,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[2,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[2,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[20,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[20,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[20,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[20,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[23,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[23,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[23,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[23,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[26,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[26,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[26,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[26,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[29,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[29,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[29,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[29,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[5,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[5,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[5,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[5,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[8,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[8,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[8,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=list[8,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 4, 5, 6],"float64"), size=list[9,10,11,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 4, 5],"float64"), size=list[10,11,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 4, 5],"float64"), size=list[9,10,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 4, 5],"float64"), size=list[9,10,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 10],"float32"), size=list[12,12,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 10],"float64"), size=None, scale_factor=2, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 10],"float64"), size=None, scale_factor=5, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 10],"float64"), size=None, scale_factor=list[2,3,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 10],"float64"), size=None, scale_factor=tuple(2,3,), mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 10],"float64"), size=list[12,12,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 10],"float64"), size=list[12,12,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 10],"float64"), size=list[12,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 10],"float64"), size=list[256,256,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 10],"float64"), size=tuple(12,13,), scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=False, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=True, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 10],"float32"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 10],"float32"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 10],"float32"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 10],"float32"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=False, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=True, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 10],"float64"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 10],"float64"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 10],"float64"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 10],"float64"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([4, 5, 20, 20],"float64"), size=list[10,10,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([4, 5, 6, 7],"float32"), size=list[10,10,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([4, 5, 6, 7],"float64"), size=None, scale_factor=Tensor([2],"float32"), mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([4, 5, 6, 7],"float64"), size=None, scale_factor=list[1.2,3.3,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([4, 5, 6, 7],"float64"), size=Tensor([2],"int32"), scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([4, 5, 6, 7],"float64"), size=list[10,10,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([4, 5, 6, 7],"float64"), size=list[10,10,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([4, 5, 6, 7],"float64"), size=list[100,50,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(x=Tensor([2, 1, 3, 4],"float32"), size=list[6,6,], )
paddle.nn.functional.interpolate(x=Tensor([2, 1, 3, 4],"float64"), scale_factor=list[2,1.5,], )
paddle.nn.functional.interpolate(x=Tensor([2, 1, 3, 4],"float64"), size=list[6,6,], )
paddle.nn.functional.interpolate(x=Tensor([2, 1, 3, 4],"int32"), size=list[6,6,], )
paddle.nn.functional.interpolate(x=Tensor([2, 1, 3, 4],"int64"), size=list[6,6,], )
paddle.nn.functional.kl_div(Tensor([5, 2],"float32"), label=Tensor([5, 2],"float32"), reduction="mean", name=None, )
paddle.nn.functional.kl_div(Tensor([5, 2],"float64"), Tensor([5, 2],"float64"), "mean", False, )
paddle.nn.functional.l1_loss(Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([2, 2],"float64"), label=Tensor([2, 2],"float64"), reduction="mean", name=None, )
paddle.nn.functional.layer_norm(Tensor([1, 2, 2],"float32"), 2, epsilon=1e-05, weight=None, bias=None, )
paddle.nn.functional.layer_norm(Tensor([1, 2, 2],"float32"), 2, epsilon=1e-05, weight=Tensor([2],"float32"), bias=Tensor([2],"float32"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([2, 2, 2, 3],"float32"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([2, 2, 2, 3],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([2, 2, 2, 3],"float32"), epsilon=1e-05, weight=None, bias=None, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([2, 2, 2, 3],"float64"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([2, 2, 2, 3],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([2, 2, 2, 3],"float64"), epsilon=1e-05, weight=None, bias=None, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,3,), x=Tensor([2, 2, 3],"float32"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,3,), x=Tensor([2, 2, 3],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,3,), x=Tensor([2, 2, 3],"float64"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,3,), x=Tensor([2, 2, 3],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(3,), x=Tensor([2, 3],"float32"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(3,), x=Tensor([2, 3],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(3,), x=Tensor([2, 3],"float64"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(3,), x=Tensor([2, 3],"float64"), epsilon=1e-05, )
paddle.nn.functional.leaky_relu(Tensor([10, 3, 3],"float64"), -1, None, )
paddle.nn.functional.leaky_relu(Tensor([3, 3, 3],"float32"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([3, 3, 3],"float64"), 0, None, )
paddle.nn.functional.leaky_relu(Tensor([3, 3, 3],"float64"), 0.01, None, )
paddle.nn.functional.leaky_relu(x=Tensor([3],"float32"), )
paddle.nn.functional.leaky_relu(x=Tensor([3],"float64"), )
paddle.nn.functional.leaky_relu(x=Tensor([5],"float64"), )
paddle.nn.functional.leaky_relu(x=Tensor([5],"float64"), negative_slope=-100, )
paddle.nn.functional.leaky_relu(x=Tensor([5],"float64"), negative_slope=0, )
paddle.nn.functional.linear(Tensor([1, 2, 2],"float32"), Tensor([2, 2],"float32"), bias=None, )
paddle.nn.functional.linear(Tensor([1, 2, 2],"float32"), Tensor([2, 4],"float32"), bias=Tensor([4],"float32"), )
paddle.nn.functional.linear(Tensor([1, 2, 4],"float32"), Tensor([4, 2],"float32"), bias=Tensor([2],"float32"), )
paddle.nn.functional.linear(x=Tensor([1, 1, 10],"float64"), weight=Tensor([10, 20],"float64"), bias=Tensor([20],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1, 10],"float64"), weight=Tensor([10, 2],"float64"), bias=Tensor([2],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1, 20],"float64"), weight=Tensor([20, 2],"float64"), bias=Tensor([2],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 120],"float32"), weight=Tensor([120, 84],"float32"), bias=Tensor([84],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 400],"float32"), weight=Tensor([400, 120],"float32"), bias=Tensor([120],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 84],"float32"), weight=Tensor([84, 10],"float32"), bias=Tensor([10],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([10, 10],"float32"), weight=Tensor([10, 1],"float32"), bias=Tensor([1],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([18, 10],"float32"), weight=Tensor([10, 6],"float32"), bias=Tensor([6],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 10],"float64"), weight=Tensor([10, 2],"float64"), bias=Tensor([2],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 10],"float64"), weight=Tensor([10, 4],"float64"), bias=Tensor([4],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 4, 128],"float64"), weight=Tensor([128, 128],"float64"), bias=Tensor([128],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 4, 128],"float64"), weight=Tensor([128, 512],"float64"), bias=Tensor([512],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 4, 16],"float32"), weight=Tensor([16, 8],"float32"), bias=Tensor([8],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 4, 512],"float64"), weight=Tensor([512, 128],"float64"), bias=Tensor([128],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 4, 8],"float32"), weight=Tensor([8, 16],"float32"), bias=Tensor([16],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 4, 8],"float32"), weight=Tensor([8, 8],"float32"), bias=Tensor([8],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 6, 128],"float64"), weight=Tensor([128, 128],"float64"), bias=Tensor([128],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 6, 128],"float64"), weight=Tensor([128, 512],"float64"), bias=Tensor([512],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 6, 512],"float64"), weight=Tensor([512, 128],"float64"), bias=Tensor([128],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 6, 8],"float32"), weight=Tensor([8, 8],"float32"), bias=Tensor([8],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([3, 2, 1, 10],"float64"), weight=Tensor([10, 2],"float64"), bias=Tensor([2],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([3, 2],"float32"), weight=Tensor([2, 4],"float32"), bias=Tensor([4],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([3, 2],"float64"), weight=Tensor([2, 4],"float64"), bias=Tensor([4],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([3, 7, 28],"float32"), weight=Tensor([28, 28],"float32"), bias=Tensor([28],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([3, 7, 54],"float32"), weight=Tensor([54, 54],"float32"), bias=Tensor([54],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([3, 7, 54],"float32"), weight=Tensor([54, 883],"float32"), bias=Tensor([883],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([3, 7, 883],"float32"), weight=Tensor([883, 54],"float32"), bias=Tensor([54],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([4, 3],"float32"), weight=Tensor([3, 6],"float32"), bias=Tensor([6],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([4, 4, 16],"float32"), weight=Tensor([16, 16],"float32"), bias=Tensor([16],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([4, 4, 32],"float32"), weight=Tensor([32, 32],"float32"), bias=Tensor([32],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([4, 8, 32],"float32"), weight=Tensor([32, 32],"float32"), bias=Tensor([32],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([5, 10],"float32"), weight=Tensor([10, 2],"float32"), bias=Tensor([2],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([5, 10],"float64"), weight=Tensor([10, 2],"float64"), bias=Tensor([2],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([5, 2, 10],"float64"), weight=Tensor([10, 3],"float64"), bias=Tensor([3],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([5, 20],"float64"), weight=Tensor([20, 10],"float64"), bias=Tensor([10],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([5, 3, 15],"float32"), weight=Tensor([15, 15],"float32"), bias=Tensor([15],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([5, 3, 15],"float32"), weight=Tensor([15, 763],"float32"), bias=Tensor([763],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([5, 3, 763],"float32"), weight=Tensor([763, 15],"float32"), bias=Tensor([15],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([5, 6, 11],"float32"), weight=Tensor([11, 56],"float32"), bias=Tensor([56],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([5, 6, 15],"float32"), weight=Tensor([15, 56],"float32"), bias=Tensor([56],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([5, 7, 56],"float32"), weight=Tensor([56, 56],"float32"), bias=Tensor([56],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([5, 8, 15],"float32"), weight=Tensor([15, 15],"float32"), bias=Tensor([15],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([8, 3, 226],"float64"), weight=Tensor([226, 45],"float64"), bias=Tensor([45],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([8, 3, 45],"float64"), weight=Tensor([45, 226],"float64"), bias=Tensor([226],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([8, 3, 45],"float64"), weight=Tensor([45, 45],"float64"), bias=Tensor([45],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([8, 6, 63],"float32"), weight=Tensor([63, 63],"float32"), bias=Tensor([63],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([8, 8, 226],"float64"), weight=Tensor([226, 45],"float64"), bias=Tensor([45],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([8, 8, 45],"float64"), weight=Tensor([45, 226],"float64"), bias=Tensor([226],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([8, 8, 45],"float64"), weight=Tensor([45, 45],"float64"), bias=Tensor([45],"float64"), name=None, )
paddle.nn.functional.linear(x=Tensor([8, 8, 54],"float32"), weight=Tensor([54, 54],"float32"), bias=Tensor([54],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([9, 4, 24],"float32"), weight=Tensor([24, 24],"float32"), bias=Tensor([24],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([9, 4, 24],"float32"), weight=Tensor([24, 424],"float32"), bias=Tensor([424],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([9, 4, 424],"float32"), weight=Tensor([424, 24],"float32"), bias=Tensor([24],"float32"), name=None, )
paddle.nn.functional.log_loss(Tensor([10, 1],"float32"), label=Tensor([10, 1],"float32"), epsilon=0.0001, name=None, )
paddle.nn.functional.log_sigmoid(Tensor([10, 10, 10],"float32"), None, )
paddle.nn.functional.log_sigmoid(Tensor([10, 10, 10],"float64"), None, )
paddle.nn.functional.log_sigmoid(Tensor([3, 3, 3],"float32"), None, )
paddle.nn.functional.log_sigmoid(Tensor([3, 3, 3],"float64"), None, )
paddle.nn.functional.log_sigmoid(Tensor([3],"float32"), )
paddle.nn.functional.log_sigmoid(Tensor([3],"float64"), )
paddle.nn.functional.log_sigmoid(x=Tensor([10, 10, 10],"float32"), )
paddle.nn.functional.log_sigmoid(x=Tensor([10, 10, 10],"float64"), )
paddle.nn.functional.log_sigmoid(x=Tensor([4],"float32"), )
paddle.nn.functional.log_sigmoid(x=Tensor([4],"float64"), )
paddle.nn.functional.log_softmax(Tensor([2, 2, 1],"float32"), 0, )
paddle.nn.functional.log_softmax(Tensor([2, 2, 1],"float64"), 0, )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4],"float64"), -1, )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4],"float64"), 0, )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4],"float64"), 1, )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4],"float64"), 2, )
paddle.nn.functional.log_softmax(x=Tensor([2, 2, 1],"float32"), axis=0, )
paddle.nn.functional.log_softmax(x=Tensor([2, 2, 1],"float64"), axis=0, )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 4],"float64"), )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 4],"float64"), axis=-1, )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 4],"float64"), axis=0, )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 4],"float64"), axis=1, )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 4],"float64"), axis=2, )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 4],"float64"), axis=2, dtype="float32", )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 4],"float64"), axis=2, dtype="float64", )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 4],"float64"), axis=2, dtype=type(numpy.float32), )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 4],"float64"), axis=2, dtype=type(numpy.float64), )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 4],"float64"), Tensor([2],"int64"), margin1=1.0, margin2=0.7, margin3=0.2, scale=64.0, return_softmax=True, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 4],"float64"), label=Tensor([2],"int64"), margin1=0.8, margin2=0.0, margin3=0.15, scale=40.0, group=None, return_softmax=False, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 4],"float64"), label=Tensor([2],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=64.0, group=None, return_softmax=False, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 4],"float64"), label=Tensor([2],"int64"), margin1=1.0, margin2=0.7, margin3=0.2, scale=32.0, group=None, return_softmax=False, reduction="mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2, 2],"float64"), other=Tensor([2, 2],"float64"), label=Tensor([2, 2],"float64"), margin=0.0, reduction="mean", name=None, )
paddle.nn.functional.max_pool1d(Tensor([1, 1, 2],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float32"), 2, 2, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 1, 1, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, 1, 0, False, True, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, 1, 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, 1, list[1,1,], False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, 1, list[1,], False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, 2, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, 2, 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, list[1,], 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 3, 4, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), list[3,], 1, 1, False, False, None, )
paddle.nn.functional.max_pool1d(x=Tensor([1, 1, 2],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=1, stride=1, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=1, padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=1, padding=list[1,1,], )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=1, padding=list[1,], )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=2, padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=list[1,], padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=list[3,], stride=1, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=list[2,2,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[2,2,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,0,0,], return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,2,], padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=tuple(1,2,), padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 40],"float64"), kernel_size=2, stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 40],"float64"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 40],"float64"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 40],"float64"), kernel_size=tuple(2,4,), stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], padding=list[1,1,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], ceil_mode=True, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=tuple(1,2,), )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 4, 4, 4],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NDHWC", name=None, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), )
paddle.nn.functional.max_pool3d(x=Tensor([2, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 11, 11],"float32"), Tensor([2, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 11, 11],"float64"), Tensor([2, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 10],"float32"), Tensor([2, 4, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 10],"float64"), Tensor([2, 4, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 20],"float32"), Tensor([2, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 20],"float32"), Tensor([2, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=tuple(2,4,40,40,), name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 20],"float64"), Tensor([2, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 20],"float64"), Tensor([2, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=tuple(2,4,40,40,), name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 21, 21],"float32"), Tensor([2, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 21, 21],"float64"), Tensor([2, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.maxout(Tensor([10, 9, 3, 3],"float64"), 3, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 3, 3],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 3, 3],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([9, 2, 2, 6],"float64"), 2, 3, None, )
paddle.nn.functional.maxout(x=Tensor([10, 9, 3, 3],"float64"), groups=3, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 3, 3],"float32"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 3, 3],"float64"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([9, 2, 2, 6],"float64"), groups=2, axis=3, )
paddle.nn.functional.mse_loss(Tensor([5, 2],"float64"), label=Tensor([5, 2],"float64"), reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 2],"float64"), Tensor([5, 5],"int64"), weight=None, ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 2],"float64"), label=Tensor([5, 5],"int64"), weight=None, ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.normalize(Tensor([12],"float32"), axis=0, epsilon=1e-12, )
paddle.nn.functional.normalize(Tensor([3, 45],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([3, 5],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([36],"float32"), axis=0, epsilon=1e-12, )
paddle.nn.functional.normalize(Tensor([3],"float32"), axis=0, epsilon=1e-12, )
paddle.nn.functional.normalize(Tensor([4, 1080],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([4, 20],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([4, 7],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([4, 7],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([45, 3],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([5, 256],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([5, 27],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([5, 81],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([5, 8],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([6, 720],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([60, 4],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([6],"float32"), axis=0, epsilon=1e-12, )
paddle.nn.functional.normalize(Tensor([720, 6],"float32"), axis=0, )
paddle.nn.functional.normalize(x=Tensor([2, 4],"float32"), )
paddle.nn.functional.normalize(x=Tensor([2, 4],"float64"), )
paddle.nn.functional.normalize(x=Tensor([3, 4],"float64"), )
paddle.nn.functional.normalize(x=Tensor([4, 2],"float64"), p=1.2, )
paddle.nn.functional.normalize(x=Tensor([4, 5, 6, 7],"float64"), )
paddle.nn.functional.normalize(x=Tensor([4, 5, 6, 7],"float64"), p=1, )
paddle.nn.functional.normalize(x=Tensor([4, 5, 6, 7],"float64"), p=4, )
paddle.nn.functional.normalize(x=Tensor([4, 5, 6, 7],"float64"), p=4, axis=3, )
paddle.nn.functional.normalize(x=Tensor([4, 5, 6],"float64"), )
paddle.nn.functional.normalize(x=Tensor([4],"float64"), axis=0, )
paddle.nn.functional.npair_loss(Tensor([18, 6],"float32"), positive=Tensor([18, 6],"float32"), labels=Tensor([18],"float32"), l2_reg=0.002, )
paddle.nn.functional.one_hot(Tensor([10, 2],"int64"), 3, )
paddle.nn.functional.one_hot(Tensor([14, 2, 4, 2],"int64"), 3, )
paddle.nn.functional.one_hot(Tensor([14, 2, 4],"int64"), 3, )
paddle.nn.functional.one_hot(Tensor([14, 2, 4],"int64"), 4, )
paddle.nn.functional.one_hot(Tensor([2],"int64"), num_classes=4, )
paddle.nn.functional.one_hot(Tensor([5],"int64"), 2, )
paddle.nn.functional.one_hot(x=Tensor([2, 3, 4, 6],"int32"), num_classes=10, )
paddle.nn.functional.one_hot(x=Tensor([2, 3],"int32"), num_classes=10, )
paddle.nn.functional.one_hot(x=Tensor([2, 3],"int64"), num_classes=10, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 2, 2],"float32"), pad=list[2,2,2,2,2,2,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 2, 2],"float64"), pad=list[2,2,2,2,2,2,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 2, 2],"int32"), pad=list[2,2,2,2,2,2,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 2, 2],"int64"), pad=list[2,2,2,2,2,2,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 2, 3],"float64"), pad=list[1,1,1,0,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 2],"float32"), pad=list[2,2,2,2,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 2],"float64"), pad=list[2,2,2,2,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 2],"int32"), pad=list[2,2,2,2,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 2],"int64"), pad=list[2,2,2,2,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 3, 2],"float64"), pad=list[1,0,1,0,0,1,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 3, 2],"float64"), pad=list[1,0,1,0,0,1,], mode="replicate", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 3, 2],"float64"), pad=list[1,0,1,2,1,0,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 3],"float64"), pad=list[1,0,1,2,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 2, 2, 2],"float64"), pad=list[1,1,1,0,1,0,], mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3, 1],"float64"), pad=list[1,1,1,0,], mode="reflect", value=0.0, data_format="NHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3, 4],"float64"), pad=list[2,1,2,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3, 4],"float64"), pad=list[2,1,2,1,], mode="replicate", value=0.0, data_format="NHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"float32"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"float32"), pad=list[1,2,], mode="reflect", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"float32"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"float32"), pad=list[2,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"float64"), pad=list[1,1,], mode="reflect", value=0.0, data_format="NLC", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"float64"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"float64"), pad=list[1,2,], mode="reflect", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"float64"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"float64"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NLC", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"float64"), pad=list[2,1,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"float64"), pad=list[2,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"int32"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"int32"), pad=list[1,2,], mode="reflect", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"int32"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"int32"), pad=list[2,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"int64"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"int64"), pad=list[1,2,], mode="reflect", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"int64"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3],"int64"), pad=list[2,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4, 4],"float32"), list[1,1,1,1,1,1,], mode="circular", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4, 4],"float32"), list[1,1,1,1,1,1,], mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4, 4],"float32"), list[1,1,1,1,1,1,], mode="replicate", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4, 4],"float64"), list[1,1,1,1,1,1,], mode="circular", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4, 4],"float64"), list[1,1,1,1,1,1,], mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4, 4],"float64"), list[1,1,1,1,1,1,], mode="replicate", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4],"float32"), list[1,1,1,1,], mode="circular", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4],"float32"), list[1,1,1,1,], mode="reflect", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4],"float32"), list[1,1,1,1,], mode="replicate", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4],"float64"), list[1,1,1,1,], mode="circular", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4],"float64"), list[1,1,1,1,], mode="reflect", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4],"float64"), list[1,1,1,1,], mode="replicate", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4],"float32"), list[1,1,], mode="circular", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 3, 4],"float32"), list[1,1,], mode="reflect", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 3, 4],"float32"), list[1,1,], mode="replicate", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 3, 4],"float64"), list[1,1,], mode="circular", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 3, 4],"float64"), list[1,1,], mode="reflect", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 3, 4],"float64"), list[1,1,], mode="replicate", data_format="NCL", )
paddle.nn.functional.pad(Tensor([3],"float32"), list[0,1,], value=1, )
paddle.nn.functional.pad(Tensor([3],"float32"), list[1,0,], value=1, )
paddle.nn.functional.pad(Tensor([3],"float64"), list[0,1,], value=1, )
paddle.nn.functional.pad(Tensor([3],"float64"), list[1,0,], value=1, )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 3],"float64"), pad=list[0,0,0,0,0,0,1,1,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 3],"float64"), pad=list[0,0,0,0,0,0,1,1,0,0,], mode="constant", value=Tensor([1],"float64"), )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 3],"float64"), pad=list[0,0,1,1,0,0,], mode="constant", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="circular", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="circular", value=0, data_format="NDHWC", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="constant", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 3],"float64"), pad=tuple(2,1,3,0,2,0,), mode="replicate", data_format="NDHWC", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 3],"float64"), pad=tuple(2,2,1,1,0,0,), mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 2, 2],"float64"), pad=list[1,1,1,2,], mode="constant", value=Tensor([],"float64"), data_format="NCHW", )
paddle.nn.functional.pad(x=Tensor([3, 2, 1, 2],"float64"), pad=list[1,1,2,3,], mode="constant", value=2.0, data_format="NCHW", )
paddle.nn.functional.pad(x=Tensor([3, 3, 3],"float32"), pad=list[1,1,], mode="constant", value=0.0, data_format="NCL", )
paddle.nn.functional.pad(x=Tensor([3, 3, 3],"float64"), pad=list[1,1,], mode="constant", value=0.0, data_format="NCL", )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 4, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 81, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 9, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(x=Tensor([2, 4, 4, 9],"float64"), upscale_factor=3, data_format="NHWC", )
paddle.nn.functional.pixel_shuffle(x=Tensor([2, 9, 4, 4],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.pixel_shuffle(x=Tensor([4, 81, 4, 4],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.pixel_shuffle(x=Tensor([4, 9, 4, 4],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([2, 3, 3, 3],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([2, 3, 3, 3],"float64"), Tensor([1],"float64"), data_format="NCHW", )
paddle.nn.functional.prelu(x=Tensor([1, 2, 3, 4],"float32"), weight=Tensor([1],"float32"), )
paddle.nn.functional.prelu(x=Tensor([1, 2, 3, 4],"float64"), weight=Tensor([1],"float64"), )
paddle.nn.functional.prelu(x=Tensor([3, 3, 3],"float64"), weight=Tensor([3],"float64"), )
paddle.nn.functional.relu(Tensor([1, 16, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 2, 2],"float32"), )
paddle.nn.functional.relu(Tensor([1, 2, 4],"float32"), )
paddle.nn.functional.relu(Tensor([1, 6, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 2],"float64"), None, )
paddle.nn.functional.relu(Tensor([2, 4, 16],"float32"), )
paddle.nn.functional.relu(Tensor([2, 4, 512],"float64"), )
paddle.nn.functional.relu(Tensor([2, 6, 512],"float64"), )
paddle.nn.functional.relu(Tensor([2, 6],"float32"), )
paddle.nn.functional.relu(Tensor([3, 10, 3, 3],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 10, 3, 3],"float64"), None, )
paddle.nn.functional.relu(Tensor([3, 3],"float32"), )
paddle.nn.functional.relu(Tensor([3, 3],"float64"), )
paddle.nn.functional.relu(Tensor([3, 7, 883],"float32"), )
paddle.nn.functional.relu(Tensor([4, 3, 3, 4],"float64"), )
paddle.nn.functional.relu(Tensor([4, 3, 3],"float64"), )
paddle.nn.functional.relu(Tensor([5, 3, 763],"float32"), )
paddle.nn.functional.relu(Tensor([8, 3, 226],"float64"), )
paddle.nn.functional.relu(Tensor([8, 8, 226],"float64"), )
paddle.nn.functional.relu(Tensor([9, 4, 424],"float32"), )
paddle.nn.functional.relu(x=Tensor([10, 10, 10],"float64"), )
paddle.nn.functional.relu(x=Tensor([3, 3, 3],"float32"), )
paddle.nn.functional.relu(x=Tensor([3, 3, 3],"float64"), )
paddle.nn.functional.relu6(Tensor([3, 3, 3],"float64"), None, )
paddle.nn.functional.relu6(Tensor([3],"float32"), None, )
paddle.nn.functional.relu6(Tensor([3],"float64"), None, )
paddle.nn.functional.relu6(Tensor([4],"float64"), None, )
paddle.nn.functional.relu6(x=Tensor([3, 3, 3],"float64"), )
paddle.nn.functional.relu6(x=Tensor([3],"float32"), )
paddle.nn.functional.relu6(x=Tensor([3],"float64"), )
paddle.nn.functional.relu6(x=Tensor([4],"float64"), )
paddle.nn.functional.selu(Tensor([2, 2],"float32"), 1.0507009873554805, 1.6732632423543772, None, )
paddle.nn.functional.selu(Tensor([2, 2],"float64"), 1.0507009873554805, 1.6732632423543772, None, )
paddle.nn.functional.selu(Tensor([3, 3, 3],"float64"), 1.0507009873554805, 0, None, )
paddle.nn.functional.selu(Tensor([3, 3, 3],"float64"), 1.0507009873554805, 1.6732632423543772, None, )
paddle.nn.functional.selu(x=Tensor([2, 2],"float32"), )
paddle.nn.functional.selu(x=Tensor([2, 2],"float64"), )
paddle.nn.functional.selu(x=Tensor([3, 3, 3],"float64"), )
paddle.nn.functional.selu(x=Tensor([3, 3, 3],"float64"), alpha=0, scale=1.0507009873554805, )
paddle.nn.functional.sequence_mask(Tensor([2, 2, 3, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=30, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([3],"float32"), dtype=type(numpy.float64), )
paddle.nn.functional.sequence_mask(Tensor([3],"float64"), maxlen=20, )
paddle.nn.functional.sequence_mask(Tensor([3],"int64"), )
paddle.nn.functional.sequence_mask(Tensor([3],"int64"), dtype=type(numpy.float64), )
paddle.nn.functional.sequence_mask(Tensor([8],"int32"), )
paddle.nn.functional.sigmoid(Tensor([1, 3],"float32"), )
paddle.nn.functional.sigmoid(Tensor([1, 3],"float64"), )
paddle.nn.functional.sigmoid(Tensor([1, 4],"float32"), )
paddle.nn.functional.sigmoid(Tensor([16, 16],"float32"), )
paddle.nn.functional.sigmoid(Tensor([16, 32],"float32"), )
paddle.nn.functional.sigmoid(Tensor([2, 3, 2],"float64"), )
paddle.nn.functional.sigmoid(Tensor([2, 3],"float32"), )
paddle.nn.functional.sigmoid(Tensor([2, 3],"float64"), )
paddle.nn.functional.sigmoid(Tensor([32, 32],"float32"), )
paddle.nn.functional.sigmoid(Tensor([3],"float32"), )
paddle.nn.functional.sigmoid(Tensor([3],"float64"), )
paddle.nn.functional.sigmoid(Tensor([4, 16],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 3],"float64"), )
paddle.nn.functional.sigmoid(Tensor([4],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([4],"float64"), None, )
paddle.nn.functional.sigmoid(x=Tensor([4],"float32"), )
paddle.nn.functional.sigmoid(x=Tensor([4],"float64"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([5, 2],"float32"), label=Tensor([5, 2],"float32"), normalizer=Tensor([1],"float32"), alpha=0.25, gamma=2.0, reduction="sum", name=None, )
paddle.nn.functional.silu(Tensor([3, 10, 3, 3],"float32"), None, )
paddle.nn.functional.silu(Tensor([3, 10, 3, 3],"float64"), None, )
paddle.nn.functional.silu(Tensor([4, 1, 3, 3],"float64"), None, )
paddle.nn.functional.silu(x=Tensor([3, 10, 3, 3],"float32"), )
paddle.nn.functional.silu(x=Tensor([3, 10, 3, 3],"float64"), )
paddle.nn.functional.silu(x=Tensor([4, 1, 3, 3],"float64"), )
paddle.nn.functional.smooth_l1_loss(Tensor([5, 2],"float64"), Tensor([5, 2],"float64"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([5, 2],"float64"), label=Tensor([5, 2],"float64"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.softmax(Tensor([1, 1, 2],"float64"), )
paddle.nn.functional.softmax(Tensor([10, 1],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 2, 4, 4],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 2, 4, 4],"float64"), )
paddle.nn.functional.softmax(Tensor([2, 2, 4, 6],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 2, 6, 4],"float64"), )
paddle.nn.functional.softmax(Tensor([2, 2, 6, 6],"float64"), )
paddle.nn.functional.softmax(Tensor([2, 3, 4],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 4],"float64"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 4],"float64"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 4],"float64"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 4],"float64"), 2, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3],"float64"), axis=-1, )
paddle.nn.functional.softmax(Tensor([2, 4],"float64"), )
paddle.nn.functional.softmax(Tensor([3, 4, 7, 3],"float32"), )
paddle.nn.functional.softmax(Tensor([3, 6, 7, 7],"float32"), )
paddle.nn.functional.softmax(Tensor([3],"float64"), axis=-1, )
paddle.nn.functional.softmax(Tensor([4, 4, 16],"float32"), )
paddle.nn.functional.softmax(Tensor([4, 4, 16],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([4, 4, 32],"float32"), )
paddle.nn.functional.softmax(Tensor([4, 8, 32],"float32"), )
paddle.nn.functional.softmax(Tensor([4],"float64"), axis=-1, )
paddle.nn.functional.softmax(Tensor([5, 2],"float64"), )
paddle.nn.functional.softmax(Tensor([5, 3, 3, 3],"float32"), )
paddle.nn.functional.softmax(Tensor([5, 3, 3, 8],"float32"), )
paddle.nn.functional.softmax(Tensor([5, 8, 7, 6],"float32"), )
paddle.nn.functional.softmax(Tensor([8, 5, 3, 3],"float64"), )
paddle.nn.functional.softmax(Tensor([8, 5, 3, 8],"float64"), )
paddle.nn.functional.softmax(Tensor([8, 5, 8, 8],"float64"), )
paddle.nn.functional.softmax(Tensor([8, 6, 8, 16],"float32"), )
paddle.nn.functional.softmax(Tensor([8, 7, 6, 6],"float32"), )
paddle.nn.functional.softmax(Tensor([9, 4, 4, 4],"float32"), )
paddle.nn.functional.softmax(x=Tensor([2, 3, 4],"float32"), )
paddle.nn.functional.softmax(x=Tensor([2, 3, 4],"float64"), )
paddle.nn.functional.softmax(x=Tensor([2, 3, 4],"float64"), axis=0, )
paddle.nn.functional.softmax(x=Tensor([2, 3, 4],"float64"), axis=1, )
paddle.nn.functional.softmax(x=Tensor([2, 3, 4],"float64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([5, 2],"float32"), label=Tensor([5, 1],"int64"), soft_label=False, ignore_index=-100, numeric_stable_mode=True, return_softmax=False, axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([2, 4],"float64"), label=Tensor([2, 1],"int64"), return_softmax=True, )
paddle.nn.functional.softplus(Tensor([1, 2, 3],"float32"), )
paddle.nn.functional.softplus(Tensor([1, 2, 3],"float64"), )
paddle.nn.functional.softplus(Tensor([2, 3, 2],"float64"), )
paddle.nn.functional.softplus(Tensor([2, 3],"float32"), )
paddle.nn.functional.softplus(Tensor([2, 3],"float64"), )
paddle.nn.functional.softplus(Tensor([3, 3, 3],"float64"), -1e-06, 20, None, )
paddle.nn.functional.softplus(Tensor([3, 3, 3],"float64"), -3, 20, None, )
paddle.nn.functional.softplus(Tensor([3, 3, 3],"float64"), 1e-06, 20, None, )
paddle.nn.functional.softplus(Tensor([3, 3, 3],"float64"), 2, 20, None, )
paddle.nn.functional.softplus(Tensor([3, 3, 3],"float64"), 3, -5, None, )
paddle.nn.functional.softplus(Tensor([3, 3, 3],"float64"), 3, 5, None, )
paddle.nn.functional.softplus(Tensor([3],"float32"), )
paddle.nn.functional.softplus(Tensor([3],"float64"), )
paddle.nn.functional.softplus(Tensor([4],"float32"), 1, 15, None, )
paddle.nn.functional.softplus(Tensor([4],"float64"), 1, 15, None, )
paddle.nn.functional.softplus(x=Tensor([3, 3, 3],"float64"), beta=-1e-06, threshold=20, )
paddle.nn.functional.softplus(x=Tensor([3, 3, 3],"float64"), beta=-3, threshold=20, )
paddle.nn.functional.softplus(x=Tensor([3, 3, 3],"float64"), beta=1e-06, threshold=20, )
paddle.nn.functional.softplus(x=Tensor([3, 3, 3],"float64"), beta=2, threshold=20, )
paddle.nn.functional.softplus(x=Tensor([3, 3, 3],"float64"), beta=3, threshold=-5, )
paddle.nn.functional.softplus(x=Tensor([3, 3, 3],"float64"), beta=3, threshold=5, )
paddle.nn.functional.softplus(x=Tensor([4],"float32"), beta=1, threshold=15, )
paddle.nn.functional.softplus(x=Tensor([4],"float64"), beta=1, threshold=15, )
paddle.nn.functional.softshrink(Tensor([3, 3, 3],"float64"), 0, None, )
paddle.nn.functional.softshrink(Tensor([3, 3, 3],"float64"), 5, None, )
paddle.nn.functional.softshrink(Tensor([4],"float32"), 0.5, None, )
paddle.nn.functional.softshrink(Tensor([4],"float64"), 0.5, None, )
paddle.nn.functional.softshrink(x=Tensor([3, 3, 3],"float64"), threshold=0, )
paddle.nn.functional.softshrink(x=Tensor([3, 3, 3],"float64"), threshold=5, )
paddle.nn.functional.softshrink(x=Tensor([4],"float32"), threshold=0.5, )
paddle.nn.functional.softshrink(x=Tensor([4],"float64"), threshold=0.5, )
paddle.nn.functional.softsign(Tensor([3, 3, 3],"float64"), None, )
paddle.nn.functional.softsign(Tensor([4],"float32"), None, )
paddle.nn.functional.softsign(Tensor([4],"float64"), None, )
paddle.nn.functional.softsign(x=Tensor([3, 3, 3],"float64"), )
paddle.nn.functional.softsign(x=Tensor([4],"float32"), )
paddle.nn.functional.softsign(x=Tensor([4],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 2],"float64"), label=Tensor([3, 2, 1, 2],"float64"), )
paddle.nn.functional.swish(Tensor([3, 10, 3, 3],"float32"), None, )
paddle.nn.functional.swish(Tensor([3, 10, 3, 3],"float64"), None, )
paddle.nn.functional.swish(Tensor([4, 1, 3, 3],"float64"), None, )
paddle.nn.functional.swish(x=Tensor([3, 10, 3, 3],"float32"), )
paddle.nn.functional.swish(x=Tensor([3, 10, 3, 3],"float64"), )
paddle.nn.functional.swish(x=Tensor([4, 1, 3, 3],"float64"), )
paddle.nn.functional.tanhshrink(Tensor([3, 3, 3],"float64"), None, )
paddle.nn.functional.tanhshrink(Tensor([4],"float32"), None, )
paddle.nn.functional.tanhshrink(Tensor([4],"float64"), None, )
paddle.nn.functional.tanhshrink(x=Tensor([3, 3, 3],"float64"), )
paddle.nn.functional.tanhshrink(x=Tensor([4],"float32"), )
paddle.nn.functional.tanhshrink(x=Tensor([4],"float64"), )
paddle.nn.functional.temporal_shift(x=Tensor([2, 2, 4, 3],"float32"), seg_num=2, )
paddle.nn.functional.temporal_shift(x=Tensor([2, 2, 4, 3],"float64"), seg_num=2, )
paddle.nn.functional.temporal_shift(x=Tensor([2, 4, 3, 3],"float64"), seg_num=2, shift_ratio=0.4, )
paddle.nn.functional.temporal_shift(x=Tensor([2, 4, 3, 3],"float64"), seg_num=2, shift_ratio=0.4, data_format="NHWC", )
paddle.nn.functional.temporal_shift(x=Tensor([4, 4, 3, 3],"float64"), seg_num=4, )
paddle.nn.functional.temporal_shift(x=Tensor([6, 4, 2, 2],"float64"), seg_num=2, )
paddle.nn.functional.thresholded_relu(Tensor([10, 1, 4, 3],"float64"), -1, 0.0, None, )
paddle.nn.functional.thresholded_relu(Tensor([10, 1, 4, 3],"float64"), 0, 0.0, None, )
paddle.nn.functional.thresholded_relu(Tensor([100, 4, 3, 3],"float32"), 1.0, 0.0, None, )
paddle.nn.functional.thresholded_relu(Tensor([100, 4, 3, 3],"float64"), 1.0, 0.0, None, )
paddle.nn.functional.thresholded_relu(x=Tensor([10, 1, 4, 3],"float64"), threshold=-1, )
paddle.nn.functional.thresholded_relu(x=Tensor([10, 1, 4, 3],"float64"), threshold=0, )
paddle.nn.functional.thresholded_relu(x=Tensor([100, 4, 3, 3],"float32"), )
paddle.nn.functional.thresholded_relu(x=Tensor([100, 4, 3, 3],"float64"), )
paddle.nn.functional.unfold(Tensor([2, 3, 10, 10],"float32"), kernel_sizes=3, strides=1, paddings=0, dilations=1, name=None, )
paddle.nn.functional.unfold(Tensor([2, 3, 10, 10],"float64"), kernel_sizes=3, strides=1, paddings=0, dilations=1, name=None, )
paddle.nn.functional.unfold(Tensor([2, 3, 10, 10],"float64"), kernel_sizes=list[2,4,], strides=1, paddings=1, dilations=1, name=None, )
paddle.nn.functional.unfold(Tensor([2, 3, 10, 10],"float64"), kernel_sizes=list[2,4,], strides=2, paddings=1, dilations=1, name=None, )
paddle.nn.functional.unfold(Tensor([2, 3, 10, 10],"float64"), kernel_sizes=list[3,3,], strides=1, paddings=0, dilations=1, name=None, )
paddle.nn.functional.unfold(Tensor([2, 3, 10, 10],"float64"), kernel_sizes=list[3,3,], strides=1, paddings=1, dilations=1, name=None, )
paddle.nn.functional.unfold(x=Tensor([2, 3, 10, 10],"float32"), kernel_sizes=3, )
paddle.nn.functional.unfold(x=Tensor([2, 3, 10, 10],"float64"), kernel_sizes=3, )
paddle.nn.functional.unfold(x=Tensor([2, 3, 10, 10],"float64"), kernel_sizes=list[2,4,], paddings=1, )
paddle.nn.functional.unfold(x=Tensor([2, 3, 10, 10],"float64"), kernel_sizes=list[2,4,], paddings=1, strides=2, )
paddle.nn.functional.unfold(x=Tensor([2, 3, 10, 10],"float64"), kernel_sizes=list[3,3,], )
paddle.nn.functional.unfold(x=Tensor([2, 3, 10, 10],"float64"), kernel_sizes=list[3,3,], paddings=1, )
paddle.nn.functional.upsample(x=Tensor([1, 2, 1],"float64"), size=Tensor([1],"float64"), scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", )
paddle.nn.functional.upsample(x=Tensor([1, 2, 2, 1],"float64"), size=None, scale_factor=Tensor([2],"float64"), mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", )
paddle.nn.functional.upsample(x=Tensor([1, 2, 2, 1],"float64"), size=Tensor([2],"float64"), scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", )
paddle.nn.functional.upsample(x=Tensor([1, 2, 2, 1],"float64"), size=Tensor([2],"float64"), scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", )
paddle.nn.functional.upsample(x=Tensor([1, 2, 2, 2, 1],"float64"), size=Tensor([3],"float64"), scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.upsample(x=Tensor([2, 1, 4, 4],"float32"), size=Tensor([2],"float32"), scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", )
paddle.nn.functional.upsample(x=Tensor([2, 1, 4, 4],"float64"), size=Tensor([2],"float64"), scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", )
paddle.nn.utils.parameters_to_vector(list[Tensor([10, 20],"float32"),Tensor([20],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([10, 3],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([2, 2],"float32"),Tensor([2],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([3, 2, 4, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([3, 2, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([3, 2, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.parameters_to_vector(list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([27],"float32"), list[Tensor([3, 2, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([30],"float32"), list[Tensor([10, 3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([387],"float32"), list[Tensor([3, 2, 4, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([6],"float32"), list[Tensor([2, 2],"float32"),Tensor([2],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([99],"float32"), list[Tensor([3, 2, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nonzero(Tensor([3, 2, 2, 2],"float64"), True, )
paddle.nonzero(Tensor([3, 3],"float32"), True, )
paddle.nonzero(Tensor([4],"int32"), True, )
paddle.nonzero(x=Tensor([3, 2, 2, 2],"float64"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 3],"float32"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 3],"float64"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 3],"int32"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 3],"int64"), as_tuple=False, )
paddle.nonzero(x=Tensor([4],"float64"), as_tuple=False, )
paddle.normal(0.0, 1.0, shape=list[12,], )
paddle.normal(0.0, 1.0, shape=list[3,], )
paddle.normal(0.0, 1.0, shape=list[36,], )
paddle.normal(0.0, 1.0, shape=list[6,], )
paddle.normal(shape=Tensor([2],"float32"), mean=Tensor([3],"float32"), std=Tensor([3],"float32"), )
paddle.normal(shape=Tensor([2],"float64"), mean=Tensor([3],"float64"), std=Tensor([3],"float64"), )
paddle.normal(shape=list[3,4,], )
paddle.normal(shape=list[3,4,], mean=Tensor([3],"float32"), )
paddle.normal(shape=list[3,4,], mean=Tensor([3],"float64"), )
paddle.normal(shape=tuple(3,4,), mean=Tensor([3],"float32"), std=Tensor([3],"float32"), )
paddle.normal(shape=tuple(3,4,), mean=Tensor([3],"float64"), std=Tensor([3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.not_equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.not_equal(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.not_equal(x=Tensor([3, 3],"float64"), y=Tensor([1, 3],"float64"), )
paddle.not_equal(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.not_equal(x=Tensor([3, 3],"float64"), y=Tensor([3],"float64"), )
paddle.numel(Tensor([1, 1, 3],"float64"), )
paddle.numel(Tensor([2, 3],"float32"), )
paddle.numel(Tensor([2, 3],"float64"), )
paddle.numel(Tensor([3, 3, 3],"float64"), )
paddle.numel(Tensor([3, 3],"float64"), )
paddle.numel(Tensor([3],"float64"), )
paddle.numel(Tensor([],"float32"), )
paddle.numel(Tensor([],"float64"), )
paddle.numel(x=Tensor([4, 5],"float16"), )
paddle.numel(x=Tensor([4, 5],"float32"), )
paddle.numel(x=Tensor([4, 5],"float64"), )
paddle.numel(x=Tensor([4, 5],"int32"), )
paddle.numel(x=Tensor([4, 5],"int64"), )
paddle.ones(list[1,3,1,1,1,1,], )
paddle.ones(list[1,], Dtype(int32), )
paddle.ones(list[1,], Dtype(int64), )
paddle.ones(list[2,4,5,], Dtype(int32), )
paddle.ones(list[3,], )
paddle.ones(list[4,5,], Dtype(int32), )
paddle.ones(list[6,2,4,5,], Dtype(int32), )
paddle.ones(list[], Dtype(float32), )
paddle.ones(list[], Dtype(float64), )
paddle.ones(shape=Tensor([0],"int32"), )
paddle.ones(shape=Tensor([1],"int32"), )
paddle.ones(shape=Tensor([1],"int32"), dtype=type(numpy.int64), )
paddle.ones(shape=Tensor([2],"int32"), )
paddle.ones(shape=Tensor([2],"int32"), dtype="int32", )
paddle.ones(shape=list[1,2,3,4,5,], dtype="float64", )
paddle.ones(shape=list[1,2,3,4,], dtype=type(bool), )
paddle.ones(shape=list[1,2,3,], dtype="bool", )
paddle.ones(shape=list[1,5,2,3,], dtype=None, )
paddle.ones(shape=list[1,5,2,3,], dtype=type(bool), )
paddle.ones(shape=list[1000,], )
paddle.ones(shape=list[2,1,], )
paddle.ones(shape=list[2,4,], dtype=type(numpy.float32), )
paddle.ones(shape=list[2,], dtype=type(numpy.float16), )
paddle.ones(shape=list[2,], name="None", )
paddle.ones(shape=list[2,], name="ones_name", )
paddle.ones(shape=list[2,], name=None, )
paddle.ones(shape=list[20,], )
paddle.ones(shape=list[5,2,], dtype="float16", )
paddle.ones(shape=tuple(1,), )
paddle.ones(shape=tuple(1,), dtype="float32", )
paddle.ones(shape=tuple(1,5,1,), dtype="int64", )
paddle.ones(shape=tuple(1000,1,), dtype=type(numpy.int8), )
paddle.ones(shape=tuple(2,4,), dtype=type(numpy.int32), )
paddle.ones(shape=tuple(2,4,1,), )
paddle.ones(shape=tuple(2,4,1,), dtype=type(numpy.float64), )
paddle.ones(tuple(4,4,16,), dtype="float32", )
paddle.ones(tuple(4,4,16,), dtype=Dtype(float32), )
paddle.ones(tuple(4,8,16,), dtype="float32", )
paddle.ones(tuple(4,8,32,), dtype="float32", )
paddle.ones_like(Tensor([2, 2],"float64"), )
paddle.ones_like(Tensor([2, 3],"float64"), )
paddle.ones_like(Tensor([2],"float64"), )
paddle.ones_like(Tensor([3, 3],"float64"), )
paddle.ones_like(Tensor([3, 4],"float64"), )
paddle.ones_like(Tensor([3],"float64"), )
paddle.ones_like(Tensor([],"float64"), )
paddle.ones_like(x=Tensor([3, 3, 3, 3, 3, 3],"float64"), )
paddle.ones_like(x=Tensor([3, 3, 3],"bool"), )
paddle.ones_like(x=Tensor([3, 3, 3],"float16"), )
paddle.ones_like(x=Tensor([3, 3, 3],"float32"), )
paddle.ones_like(x=Tensor([3, 3, 3],"float64"), )
paddle.ones_like(x=Tensor([3, 3, 3],"int32"), )
paddle.ones_like(x=Tensor([3, 3, 3],"int64"), )
paddle.outer(x=Tensor([1, 4],"float32"), y=Tensor([1, 4],"float32"), )
paddle.outer(x=Tensor([1, 4],"float64"), y=Tensor([1, 4],"float64"), )
paddle.outer(x=Tensor([4, 1],"float64"), y=Tensor([4, 1],"float64"), )
paddle.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([4, 2, 3],"float64"), )
paddle.outer(x=Tensor([4, 2, 5, 2],"float64"), y=Tensor([2, 3, 4, 4],"float64"), )
paddle.outer(x=Tensor([4, 2],"float64"), y=Tensor([2, 3, 4],"float64"), )
paddle.outer(x=Tensor([4],"float64"), y=Tensor([4],"float64"), )
paddle.poisson(Tensor([2, 2],"float64"), )
paddle.poisson(Tensor([2],"float64"), )
paddle.pow(Tensor([2, 3],"float32"), 2, )
paddle.pow(Tensor([2, 3],"float64"), 2, )
paddle.pow(Tensor([3, 3, 3],"float64"), 2, )
paddle.pow(x=Tensor([2, 2, 2],"float32"), y=Tensor([2, 2, 2],"float32"), )
paddle.pow(x=Tensor([2, 2, 2],"float64"), y=0, )
paddle.pow(x=Tensor([2, 2, 2],"float64"), y=Tensor([2, 2, 2],"float64"), )
paddle.pow(x=Tensor([2, 2, 2],"float64"), y=Tensor([2],"float64"), )
paddle.pow(x=Tensor([2, 2, 2],"int32"), y=Tensor([2, 2, 2],"int32"), )
paddle.pow(x=Tensor([2, 2, 2],"int64"), y=Tensor([2, 2, 2],"int64"), )
paddle.prod(Tensor([2, 2],"float64"), axis=Tensor([1],"int64"), )
paddle.prod(x=Tensor([2, 2],"float32"), )
paddle.prod(x=Tensor([2, 2],"float32"), axis=0, keepdim=True, )
paddle.prod(x=Tensor([2, 2],"float32"), dtype="float32", )
paddle.prod(x=Tensor([2, 2],"float64"), )
paddle.prod(x=Tensor([2, 2],"float64"), axis=-1, )
paddle.prod(x=Tensor([2, 2],"float64"), axis=0, keepdim=True, )
paddle.prod(x=Tensor([2, 2],"float64"), axis=1, )
paddle.prod(x=Tensor([2, 2],"float64"), axis=Tensor([1],"int64"), )
paddle.prod(x=Tensor([2, 2],"float64"), axis=list[0,1,], )
paddle.prod(x=Tensor([2, 2],"float64"), axis=tuple(0,1,), )
paddle.prod(x=Tensor([2, 2],"float64"), dtype="float32", )
paddle.prod(x=Tensor([2, 2],"int32"), )
paddle.prod(x=Tensor([2, 2],"int32"), dtype="int64", )
paddle.prod(x=Tensor([2, 2],"int64"), dtype="int64", )
paddle.put_along_axis(Tensor([2, 2],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([2, 2],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 1, "add", )
paddle.put_along_axis(Tensor([2, 2],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 1, "assign", )
paddle.put_along_axis(Tensor([2, 2],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 1, "mul", )
paddle.put_along_axis(Tensor([4, 2],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([4, 4, 4, 2],"float64"), Tensor([1, 1, 1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([4, 4, 4],"float64"), Tensor([1, 1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([4, 4],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([4],"float32"), Tensor([1],"int64"), Tensor([1],"float32"), 0, "assign", )
paddle.put_along_axis(Tensor([4],"float64"), Tensor([1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.quantile(Tensor([3, 6, 3, 4, 2, 5],"float64"), q=0.5, )
paddle.quantile(x=Tensor([3, 3, 3],"float32"), q=0.5, axis=0, )
paddle.quantile(x=Tensor([3, 3, 3],"float64"), q=0.5, axis=0, )
paddle.quantile(x=Tensor([3, 6, 3, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.quantile(x=Tensor([3, 6, 3, 4, 2, 5],"float64"), q=0.75, axis=5, )
paddle.quantile(x=Tensor([3, 6, 3, 4, 2, 5],"float64"), q=list[0.25,0.5,0.75,], axis=3, keepdim=False, )
paddle.quantile(x=Tensor([3, 6, 3, 4, 2, 5],"float64"), q=tuple(0.11,0.5,0.73,0.9,), axis=4, keepdim=False, )
paddle.rad2deg(x=Tensor([10],"float32"), )
paddle.rad2deg(x=Tensor([10],"float64"), )
paddle.rad2deg(x=Tensor([10],"int32"), )
paddle.rad2deg(x=Tensor([10],"int64"), )
paddle.rad2deg(x=Tensor([1],"float64"), )
paddle.rad2deg(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.rad2deg(x=Tensor([4, 4, 4],"float64"), )
paddle.rad2deg(x=Tensor([4, 4],"float64"), )
paddle.rank(input=Tensor([1, 1, 1, 1],"bool"), )
paddle.rank(input=Tensor([1, 1, 1, 1],"float32"), )
paddle.rank(input=Tensor([1, 1, 1, 1],"float64"), )
paddle.rank(input=Tensor([1, 1, 1, 1],"int32"), )
paddle.rank(input=Tensor([1, 1, 1, 1],"int64"), )
paddle.rank(input=Tensor([2, 2],"float64"), )
paddle.rank(input=Tensor([3, 2, 2, 2],"float64"), )
paddle.rank(input=Tensor([4, 1],"float64"), )
paddle.rank(input=Tensor([4],"float64"), )
paddle.real(x=Tensor([1, 10],"complex64"), )
paddle.real(x=Tensor([20, 10],"complex128"), )
paddle.real(x=Tensor([20, 10],"complex64"), )
paddle.reciprocal(x=Tensor([3, 3, 3],"float32"), )
paddle.reciprocal(x=Tensor([3, 3, 3],"float64"), )
paddle.remainder(Tensor([4, 4],"int64"), Tensor([1],"int64"), )
paddle.remainder(Tensor([4, 8],"int64"), Tensor([1],"int64"), )
paddle.renorm(x=Tensor([3, 2, 3],"float32"), p=1, axis=0, max_norm=5, )
paddle.renorm(x=Tensor([3, 2, 3],"float64"), p=1, axis=0, max_norm=5, )
paddle.renorm(x=Tensor([3, 2, 3],"float64"), p=1.2, axis=2, max_norm=6.5, )
paddle.renorm(x=Tensor([3, 2, 3],"float64"), p=1.5, axis=2, max_norm=20, )
paddle.renorm(x=Tensor([3, 2, 3],"float64"), p=2, axis=1, max_norm=20, )
paddle.renorm(x=Tensor([3, 2, 3],"float64"), p=2, axis=1, max_norm=40, )
paddle.renorm(x=Tensor([3, 2, 3],"float64"), p=2, axis=1, max_norm=50, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 4, 5],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 4, 5],"float64"), repeats=2, axis=1, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 4, 5],"int32"), repeats=2, axis=3, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 4, 5],"int32"), repeats=Tensor([2],"int32"), axis=1, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 5],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([4, 2, 4],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([4, 2],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([4],"float32"), repeats=3, )
paddle.repeat_interleave(x=Tensor([4],"float64"), repeats=3, )
paddle.reshape(Tensor([1, 2, 2],"float32"), list[-1,], )
paddle.reshape(Tensor([1, 2, 3],"float32"), list[-1,], )
paddle.reshape(Tensor([1, 2, 3],"float64"), list[-1,], )
paddle.reshape(Tensor([1, 3, 2],"float32"), list[-1,], )
paddle.reshape(Tensor([1, 3, 2],"float64"), list[-1,], )
paddle.reshape(Tensor([1, 3],"float64"), list[-1,], )
paddle.reshape(Tensor([112, 2],"int64"), list[14,2,4,2,], name="Categorical_sample", )
paddle.reshape(Tensor([112],"int64"), list[14,2,4,], name="Categorical_sample", )
paddle.reshape(Tensor([15, 4, 4],"float32"), tuple(-1,4,), )
paddle.reshape(Tensor([16, 16],"float32"), shape=list[-1,4,16,], )
paddle.reshape(Tensor([16, 32],"float32"), shape=list[-1,4,32,], )
paddle.reshape(Tensor([18],"float32"), shape=list[18,1,], )
paddle.reshape(Tensor([18],"float32"), tuple(1,-1,), )
paddle.reshape(Tensor([18],"float64"), tuple(-1,1,), )
paddle.reshape(Tensor([18],"float64"), tuple(1,-1,), )
paddle.reshape(Tensor([1],"float32"), list[1,1,1,1,1,], )
paddle.reshape(Tensor([1],"float32"), list[1,1,1,1,], )
paddle.reshape(Tensor([1],"float64"), list[-1,], )
paddle.reshape(Tensor([1],"float64"), list[1,1,1,1,1,], )
paddle.reshape(Tensor([1],"float64"), list[1,1,1,1,], )
paddle.reshape(Tensor([2, 2],"float32"), list[-1,], )
paddle.reshape(Tensor([2, 2],"float64"), list[-1,], )
paddle.reshape(Tensor([2, 3, 2],"float64"), list[-1,], )
paddle.reshape(Tensor([2, 3, 3, 2],"float64"), list[-1,], )
paddle.reshape(Tensor([2, 3, 4],"float64"), list[-1,], )
paddle.reshape(Tensor([2, 3],"float32"), list[-1,], )
paddle.reshape(Tensor([2, 3],"float64"), list[-1,], )
paddle.reshape(Tensor([2, 3],"float64"), list[2,3,], )
paddle.reshape(Tensor([2, 4],"float32"), list[-1,], )
paddle.reshape(Tensor([20],"int64"), list[10,2,], name="Categorical_sample", )
paddle.reshape(Tensor([24],"float64"), list[2,3,4,], )
paddle.reshape(Tensor([2],"float32"), list[-1,], )
paddle.reshape(Tensor([2],"float32"), list[1,2,1,1,1,], )
paddle.reshape(Tensor([2],"float32"), list[1,2,1,1,], )
paddle.reshape(Tensor([2],"float64"), list[-1,], )
paddle.reshape(Tensor([2],"float64"), list[1,2,1,1,1,], )
paddle.reshape(Tensor([2],"float64"), list[1,2,1,1,], )
paddle.reshape(Tensor([2],"float64"), list[2,], )
paddle.reshape(Tensor([2],"float64"), tuple(-1,1,), )
paddle.reshape(Tensor([2],"float64"), tuple(1,-1,), )
paddle.reshape(Tensor([2],"int64"), tuple(-1,1,), )
paddle.reshape(Tensor([3, 1, 2],"float64"), list[-1,], )
paddle.reshape(Tensor([3, 2],"float32"), list[-1,], )
paddle.reshape(Tensor([3, 2],"float64"), list[-1,], )
paddle.reshape(Tensor([3, 3, 5, 3],"float32"), tuple(3,-1,), )
paddle.reshape(Tensor([3, 3],"float64"), list[-1,], )
paddle.reshape(Tensor([3, 45],"float32"), list[3,3,5,3,], )
paddle.reshape(Tensor([3, 45],"float32"), list[3,5,3,3,], )
paddle.reshape(Tensor([3, 4],"float64"), list[-1,], )
paddle.reshape(Tensor([3, 5, 3, 3],"float32"), tuple(3,-1,), )
paddle.reshape(Tensor([3, 5],"float32"), list[3,5,], )
paddle.reshape(Tensor([3, 5],"float32"), tuple(3,-1,), )
paddle.reshape(Tensor([32, 32],"float32"), shape=list[-1,8,32,], )
paddle.reshape(Tensor([32],"float64"), tuple(-1,1,), )
paddle.reshape(Tensor([32],"float64"), tuple(1,-1,), )
paddle.reshape(Tensor([36],"float64"), list[2,3,3,2,], )
paddle.reshape(Tensor([3],"float32"), Tensor([1],"int64"), )
paddle.reshape(Tensor([3],"float32"), list[1,1,1,3,], )
paddle.reshape(Tensor([3],"float32"), list[1,1,3,1,], )
paddle.reshape(Tensor([3],"float32"), list[1,3,1,1,1,], )
paddle.reshape(Tensor([3],"float32"), list[1,3,1,1,], )
paddle.reshape(Tensor([3],"float32"), list[3,1,], )
paddle.reshape(Tensor([3],"float64"), Tensor([1],"int64"), )
paddle.reshape(Tensor([3],"float64"), list[-1,], )
paddle.reshape(Tensor([3],"float64"), list[1,3,1,1,1,], )
paddle.reshape(Tensor([3],"float64"), list[1,3,1,1,], )
paddle.reshape(Tensor([3],"float64"), list[1,3,], )
paddle.reshape(Tensor([3],"float64"), shape=list[1,-1,], )
paddle.reshape(Tensor([4, 1080],"float32"), list[4,5,6,6,6,], )
paddle.reshape(Tensor([4, 20],"float32"), list[4,5,4,], )
paddle.reshape(Tensor([4, 2],"float32"), list[-1,], )
paddle.reshape(Tensor([4, 3],"float64"), shape=list[4,-1,], )
paddle.reshape(Tensor([4, 4, 16],"float32"), list[-1,64,], )
paddle.reshape(Tensor([4, 4, 16],"float32"), shape=list[-1,16,], )
paddle.reshape(Tensor([4, 4, 32],"float32"), list[-1,128,], )
paddle.reshape(Tensor([4, 4, 32],"float32"), shape=list[-1,32,], )
paddle.reshape(Tensor([4, 4],"float64"), list[-1,], )
paddle.reshape(Tensor([4, 5, 4],"float32"), tuple(4,-1,), )
paddle.reshape(Tensor([4, 5, 6, 6, 6],"float32"), tuple(4,-1,), )
paddle.reshape(Tensor([4, 7],"float32"), list[4,7,], )
paddle.reshape(Tensor([4, 7],"float32"), tuple(-1,7,), )
paddle.reshape(Tensor([4, 7],"float32"), tuple(4,-1,), )
paddle.reshape(Tensor([4, 8, 32],"float32"), list[-1,256,], )
paddle.reshape(Tensor([4, 8, 32],"float32"), shape=list[-1,32,], )
paddle.reshape(Tensor([45, 3],"float32"), list[5,3,3,3,], )
paddle.reshape(Tensor([4],"float32"), list[-1,], )
paddle.reshape(Tensor([4],"float32"), list[1,1,4,], )
paddle.reshape(Tensor([4],"float32"), list[1,4,1,1,1,], )
paddle.reshape(Tensor([4],"float32"), list[1,4,1,1,], )
paddle.reshape(Tensor([4],"float32"), list[1,4,1,], )
paddle.reshape(Tensor([4],"float32"), list[4,1,], )
paddle.reshape(Tensor([4],"float64"), list[2,2,], )
paddle.reshape(Tensor([4],"float64"), tuple(-1,1,), )
paddle.reshape(Tensor([4],"float64"), tuple(1,-1,), )
paddle.reshape(Tensor([5, 256],"float32"), list[5,4,4,4,4,], )
paddle.reshape(Tensor([5, 27],"float32"), list[5,3,3,3,], )
paddle.reshape(Tensor([5, 3, 3, 3, 3],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 3, 3, 3],"float32"), tuple(-1,3,), )
paddle.reshape(Tensor([5, 3, 3, 3],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 4, 2],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 4, 4, 4, 4],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 4, 6, 6, 6],"float32"), tuple(-1,6,), )
paddle.reshape(Tensor([5, 81],"float32"), list[5,3,3,3,3,], )
paddle.reshape(Tensor([5, 8],"float32"), list[5,4,2,], )
paddle.reshape(Tensor([5],"float32"), list[5,1,1,1,1,], )
paddle.reshape(Tensor([5],"float32"), list[5,1,1,1,], )
paddle.reshape(Tensor([5],"float32"), list[5,1,1,], )
paddle.reshape(Tensor([6, 4, 5, 6, 6],"float32"), tuple(6,-1,), )
paddle.reshape(Tensor([6, 4, 6, 5, 6],"float32"), tuple(6,-1,), )
paddle.reshape(Tensor([6, 720],"float32"), list[6,4,5,6,6,], )
paddle.reshape(Tensor([6, 720],"float32"), list[6,4,6,5,6,], )
paddle.reshape(Tensor([60, 4],"float32"), list[15,4,4,], )
paddle.reshape(Tensor([6],"float32"), list[1,1,1,1,6,], )
paddle.reshape(Tensor([6],"float32"), list[1,1,1,6,1,], )
paddle.reshape(Tensor([6],"float32"), list[1,1,6,1,1,], )
paddle.reshape(Tensor([6],"float32"), list[1,6,1,1,], )
paddle.reshape(Tensor([6],"float64"), list[1,6,1,1,], )
paddle.reshape(Tensor([6],"float64"), list[2,3,], )
paddle.reshape(Tensor([6],"float64"), list[3,2,], )
paddle.reshape(Tensor([720, 6],"float32"), list[5,4,6,6,6,], )
paddle.reshape(Tensor([7],"float32"), list[1,7,], )
paddle.reshape(Tensor([8],"float64"), tuple(-1,1,), )
paddle.reshape(Tensor([9],"float64"), list[3,3,], )
paddle.reshape(Tensor([9],"float64"), tuple(-1,1,), )
paddle.reshape(Tensor([9],"float64"), tuple(1,-1,), )
paddle.reshape(Tensor([],"float64"), list[-1,], )
paddle.reshape(x=Tensor([2, 2],"float32"), shape=list[1,-1,], )
paddle.reshape(x=Tensor([2, 2],"float32"), shape=list[1,4,], )
paddle.reshape(x=Tensor([2, 2],"float64"), shape=Tensor([2],"int32"), )
paddle.reshape(x=Tensor([2, 2],"float64"), shape=list[1,-1,], )
paddle.reshape(x=Tensor([2, 2],"float64"), shape=list[1,4,], )
paddle.reshape(x=Tensor([2, 2],"float64"), shape=list[2,0,], )
paddle.reshape(x=Tensor([2, 2],"float64"), shape=tuple(1,4,), )
paddle.reshape(x=Tensor([2, 2],"int32"), shape=list[1,-1,], )
paddle.reshape(x=Tensor([2, 2],"int32"), shape=list[1,4,], )
paddle.reshape(x=Tensor([2, 2],"int64"), shape=list[1,-1,], )
paddle.reshape(x=Tensor([2, 2],"int64"), shape=list[1,4,], )
paddle.reverse(Tensor([1, 1, 2],"float32"), axis=list[0,], )
paddle.reverse(Tensor([1, 1, 4],"float32"), axis=1, )
paddle.reverse(Tensor([2, 1, 2],"float32"), axis=list[0,], )
paddle.reverse(Tensor([2, 1, 3],"float32"), axis=0, )
paddle.reverse(Tensor([2, 1, 4],"float32"), axis=0, )
paddle.roll(Tensor([10],"float32"), -5, name=None, )
paddle.roll(Tensor([10],"float32"), Tensor([1],"int64"), list[0,], name=None, )
paddle.roll(Tensor([10],"float64"), Tensor([1],"int64"), list[0,], name=None, )
paddle.roll(Tensor([2, 4, 2],"float64"), Tensor([3],"int64"), list[0,1,2,], name=None, )
paddle.roll(Tensor([4, 5, 4, 4],"complex128"), Tensor([1],"int64"), 3, name=None, )
paddle.roll(Tensor([4, 5, 4, 4],"complex128"), Tensor([2],"int64"), tuple(0,3,), name=None, )
paddle.roll(Tensor([4, 5, 4, 4],"complex128"), Tensor([2],"int64"), tuple(1,3,), name=None, )
paddle.roll(Tensor([4, 5, 4, 4],"complex128"), Tensor([4],"int64"), list[0,1,2,3,], name=None, )
paddle.roll(Tensor([4, 5, 4, 4],"float64"), Tensor([4],"int64"), list[0,1,2,3,], name=None, )
paddle.roll(Tensor([4, 5, 4],"float64"), Tensor([3],"int64"), list[0,1,2,], name=None, )
paddle.roll(Tensor([4],"float32"), -2, name=None, )
paddle.roll(Tensor([5],"float32"), Tensor([1],"int64"), list[0,], name=None, )
paddle.roll(Tensor([5],"float64"), Tensor([1],"int64"), list[0,], name=None, )
paddle.roll(x=Tensor([3, 3],"float32"), shifts=0, axis=None, )
paddle.roll(x=Tensor([3, 3],"float64"), shifts=-1, axis=0, )
paddle.roll(x=Tensor([3, 3],"float64"), shifts=0, axis=None, )
paddle.roll(x=Tensor([3, 3],"float64"), shifts=1, axis=None, )
paddle.roll(x=Tensor([3, 3],"float64"), shifts=list[-1,1,], axis=list[0,1,], )
paddle.roll(x=Tensor([3, 3],"float64"), shifts=tuple(-1,1,), axis=tuple(0,1,), )
paddle.roll(x=Tensor([3, 3],"int32"), shifts=0, axis=None, )
paddle.roll(x=Tensor([3, 3],"int64"), shifts=0, axis=None, )
paddle.rot90(x=Tensor([2, 2],"float64"), k=-4, )
paddle.rot90(x=Tensor([3, 4],"float64"), )
paddle.rot90(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.rot90(x=Tensor([4, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.rot90(x=Tensor([4, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.rot90(x=Tensor([4, 4, 4],"float64"), )
paddle.rot90(x=Tensor([4, 4],"float32"), )
paddle.rot90(x=Tensor([4, 4],"float64"), )
paddle.rot90(x=Tensor([4, 4],"float64"), k=-1, )
paddle.rot90(x=Tensor([4, 4],"float64"), k=4, )
paddle.rot90(x=Tensor([4, 4],"int32"), )
paddle.rot90(x=Tensor([4, 4],"int64"), )
paddle.round(x=Tensor([3, 3, 3],"float32"), )
paddle.round(x=Tensor([3, 3, 3],"float64"), )
paddle.rsqrt(x=Tensor([2, 3, 2],"float32"), )
paddle.rsqrt(x=Tensor([2, 3, 2],"float64"), )
paddle.rsqrt(x=Tensor([2, 3, 3],"float64"), )
paddle.rsqrt(x=Tensor([],"float64"), )
paddle.scale(Tensor([2, 1, 1, 2, 3],"float32"), scale=2.0, )
paddle.scale(Tensor([2, 1, 1, 2, 3],"float32"), scale=Tensor([],"float32"), )
paddle.scale(Tensor([2, 1, 1, 2, 3],"float64"), scale=2.0, )
paddle.scale(Tensor([2, 1, 1, 2, 3],"float64"), scale=Tensor([],"float32"), )
paddle.scale(Tensor([2, 1, 2, 3],"float32"), scale=2.0, )
paddle.scale(Tensor([2, 1, 2, 3],"float32"), scale=Tensor([],"float32"), )
paddle.scale(Tensor([2, 1, 2, 3],"float64"), scale=2.0, )
paddle.scale(Tensor([2, 1, 2, 3],"float64"), scale=Tensor([],"float32"), )
paddle.scale(Tensor([2, 1],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([2, 3],"float32"), scale=-1.7580993408473766, )
paddle.scale(Tensor([2, 3],"float32"), scale=0.0, )
paddle.scale(Tensor([2, 3],"float32"), scale=0.886404894665932, )
paddle.scale(Tensor([2, 3],"float32"), scale=1.0, )
paddle.scale(Tensor([2],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([5, 10, 15, 20],"float32"), scale=-1.7580993408473766, )
paddle.scale(Tensor([5, 10, 15, 20],"float32"), scale=0.886404894665932, )
paddle.scale(Tensor([],"float64"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(x=Tensor([3, 3, 3],"float32"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([3, 3, 3],"float64"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([3, 3, 3],"float64"), scale=2.0, bias=4.0, bias_after_scale=False, act=None, )
paddle.scale(x=Tensor([3, 3, 3],"float64"), scale=2.0, bias=4.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([3, 3, 3],"int32"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([3, 3, 3],"int64"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scatter_nd_add(x=Tensor([2, 3, 4, 2, 4],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2, 2, 4],"float64"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 4],"float32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float32"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 4],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float64"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 4],"int32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int32"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 4],"int64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"float32"), values=Tensor([2, 3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"float64"), values=Tensor([2, 3],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"int32"), values=Tensor([2, 3],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"int64"), values=Tensor([2, 3],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([2, 3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([2],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([4, 2],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([2, 3],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([2],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([3],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([4, 2],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int32"), values=Tensor([2, 3],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int32"), values=Tensor([2],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int32"), values=Tensor([3],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int32"), values=Tensor([4, 2],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int64"), values=Tensor([2, 3],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int64"), values=Tensor([2],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int64"), values=Tensor([3],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int64"), values=Tensor([4, 2],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([7],"float32"), values=Tensor([2, 2, 2],"float32"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([7],"float64"), values=Tensor([2, 2, 2],"float64"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([7],"int32"), values=Tensor([2, 2, 2],"int32"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([7],"int64"), values=Tensor([2, 2, 2],"int64"), right=True, )
paddle.shape(Tensor([10],"float32"), )
paddle.shape(Tensor([10],"float64"), )
paddle.shape(Tensor([2, 2, 4, 5],"float32"), )
paddle.shape(Tensor([2, 3, 5, 5, 2, 1, 2, 2, 2],"float64"), )
paddle.shape(Tensor([2, 4, 2],"float64"), )
paddle.shape(Tensor([2, 4, 5],"float32"), )
paddle.shape(Tensor([2],"float64"), )
paddle.shape(Tensor([3, 0],"float64"), )
paddle.shape(Tensor([3],"float32"), )
paddle.shape(Tensor([3],"float64"), )
paddle.shape(Tensor([4, 16],"float32"), )
paddle.shape(Tensor([4, 32],"float32"), )
paddle.shape(Tensor([4, 5, 4, 4],"complex128"), )
paddle.shape(Tensor([4, 5, 4, 4],"float64"), )
paddle.shape(Tensor([4, 5, 4],"float64"), )
paddle.shape(Tensor([4, 5],"float32"), )
paddle.shape(Tensor([4],"float32"), )
paddle.shape(Tensor([5, 2],"float32"), )
paddle.shape(Tensor([5, 8, 15],"float32"), )
paddle.shape(Tensor([5],"float32"), )
paddle.shape(Tensor([5],"float64"), )
paddle.shape(Tensor([7],"float64"), )
paddle.shard_index(input=Tensor([2, 1],"int64"), index_num=20, nshards=2, shard_id=1, )
paddle.shard_index(input=Tensor([2, 1],"int64"), index_num=6, nshards=40, shard_id=4, )
paddle.shard_index(input=Tensor([4, 1],"int64"), index_num=13, nshards=3, shard_id=0, )
paddle.shard_index(input=Tensor([4, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, )
paddle.shard_index(input=Tensor([4, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, ignore_value=16, )
paddle.sign(x=Tensor([4],"float32"), )
paddle.sign(x=Tensor([4],"float64"), )
paddle.sin(x=Tensor([2, 2, 3],"float64"), )
paddle.sin(x=Tensor([2, 2, 3],"float64"), name="test_sin", )
paddle.sin(x=Tensor([3],"float64"), )
paddle.sin(x=Tensor([4],"float32"), )
paddle.sin(x=Tensor([4],"float64"), )
paddle.sinh(x=Tensor([1, 2],"float32"), )
paddle.sinh(x=Tensor([1, 2],"float64"), )
paddle.sinh(x=Tensor([1],"float64"), )
paddle.sinh(x=Tensor([2, 2],"float64"), )
paddle.sinh(x=Tensor([2, 3, 2, 2],"float64"), )
paddle.slice(Tensor([15, 4],"int64"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([15, 4],"int64"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([15, 4],"int64"), axes=list[1,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([15, 4],"int64"), axes=list[1,], starts=list[3,], ends=list[4,], )
paddle.slice(Tensor([2, 2, 2],"float64"), list[0,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([2, 2, 2],"float64"), list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([2, 2, 2],"float64"), list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([2, 4, 3, 3],"float64"), list[1,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([2, 4, 3, 3],"float64"), list[3,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([2, 4],"float64"), axes=list[0,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([3, 2, 2, 3],"complex128"), list[3,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([3, 3, 2, 2],"complex128"), list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([3, 4, 4],"float32"), axes=list[0,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([3, 4, 4],"float32"), axes=list[0,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([4, 3, 2],"float64"), list[0,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([4, 3, 2],"float64"), list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([4, 3, 3],"float64"), list[0,2,], starts=list[0,0,], ends=list[1,2,], )
paddle.slice(Tensor([4, 3, 3],"float64"), list[1,2,], starts=list[0,0,], ends=list[1,2,], )
paddle.slice(Tensor([4, 3, 4],"float32"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([4, 3, 4],"float32"), axes=list[1,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([4, 4, 6, 2],"float64"), list[0,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([4, 4, 6],"float64"), list[1,2,], starts=list[0,0,], ends=list[2,4,], )
paddle.slice(Tensor([4, 4, 6],"float64"), list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([5, 2],"int64"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([5, 2],"int64"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([7],"complex128"), list[0,], starts=list[0,], ends=list[1,], )
paddle.sort(Tensor([2160],"float64"), 0, )
paddle.sort(Tensor([3, 3, 3],"float32"), 0, )
paddle.sort(Tensor([3, 3, 3],"float64"), 0, )
paddle.sort(Tensor([3, 6, 3, 4, 2, 5],"float64"), 3, )
paddle.sort(Tensor([3, 6, 3, 4, 2, 5],"float64"), 4, )
paddle.sort(Tensor([3, 6, 3, 4, 2, 5],"float64"), 5, )
paddle.sort(x=Tensor([3, 2, 2],"float32"), axis=0, )
paddle.sort(x=Tensor([3, 2, 2],"float64"), axis=-1, )
paddle.sort(x=Tensor([3, 2, 2],"float64"), axis=0, )
paddle.sort(x=Tensor([3, 2, 2],"float64"), axis=0, descending=True, )
paddle.sort(x=Tensor([3, 2, 2],"float64"), axis=1, )
paddle.sort(x=Tensor([3, 2, 2],"int32"), axis=0, )
paddle.sort(x=Tensor([3, 2, 2],"int64"), axis=0, )
paddle.split(Tensor([1, 12],"float32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([1, 12],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([1, 12],"float64"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([1, 16],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([1, 9],"float32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([1, 9],"float64"), num_or_sections=3, axis=1, )
paddle.split(Tensor([13],"int64"), list[5,4,0,4,], )
paddle.split(Tensor([16, 128],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([16, 48],"float32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([16, 64],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([16, 96],"float32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([32, 96],"float32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([4, 48],"float32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([4, 64],"float32"), num_or_sections=4, axis=-1, )
paddle.split(x=Tensor([2, 3],"float64"), num_or_sections=2, )
paddle.split(x=Tensor([2, 3],"float64"), num_or_sections=list[2,-1,], axis=-1, )
paddle.split(x=Tensor([2, 3],"float64"), num_or_sections=tuple(2,1,), axis=1, )
paddle.split(x=Tensor([2, 3],"int32"), num_or_sections=3, axis=Tensor([1],"int32"), )
paddle.split(x=Tensor([3],"bool"), num_or_sections=3, axis=0, )
paddle.sqrt(Tensor([1, 1, 3],"float64"), )
paddle.sqrt(Tensor([1, 4],"float64"), )
paddle.sqrt(Tensor([2, 1],"float64"), )
paddle.sqrt(Tensor([3, 3],"float64"), )
paddle.sqrt(Tensor([3],"float64"), )
paddle.sqrt(Tensor([],"float32"), )
paddle.sqrt(Tensor([],"float64"), )
paddle.sqrt(x=Tensor([1],"float64"), )
paddle.sqrt(x=Tensor([2],"float64"), )
paddle.sqrt(x=Tensor([3, 3],"float64"), )
paddle.sqrt(x=Tensor([3],"float64"), )
paddle.sqrt(x=Tensor([3],"float64"), name=None, )
paddle.sqrt(x=Tensor([4],"float64"), )
paddle.square(Tensor([18, 6],"float32"), )
paddle.square(Tensor([2, 4],"float64"), )
paddle.square(Tensor([4, 4],"float64"), )
paddle.square(Tensor([5, 2],"float64"), )
paddle.square(x=Tensor([2],"float32"), )
paddle.square(x=Tensor([2],"float64"), )
paddle.square(x=Tensor([2],"int32"), )
paddle.square(x=Tensor([2],"int64"), )
paddle.squeeze(Tensor([1, 2, 1, 3],"float32"), axis=Tensor([2],"int64"), )
paddle.squeeze(Tensor([1, 3, 3],"float32"), axis=0, )
paddle.squeeze(Tensor([1, 3, 3],"float64"), axis=0, )
paddle.squeeze(Tensor([1, 3],"float32"), axis=list[0,], )
paddle.squeeze(Tensor([1, 4],"float32"), axis=list[0,], )
paddle.squeeze(Tensor([1, 6],"float32"), axis=list[0,], )
paddle.squeeze(Tensor([1, 7],"float32"), axis=list[0,], )
paddle.squeeze(Tensor([1],"float64"), axis=0, )
paddle.squeeze(Tensor([2, 1],"float64"), list[-1,], )
paddle.squeeze(Tensor([3, 1],"float32"), axis=list[1,], )
paddle.squeeze(Tensor([3, 6, 3, 1, 2, 5],"float64"), axis=3, )
paddle.squeeze(Tensor([3, 6, 3, 4, 1, 5],"float64"), axis=4, )
paddle.squeeze(Tensor([3, 6, 3, 4, 2, 1],"float64"), axis=5, )
paddle.squeeze(Tensor([4, 125, 125, 1],"float64"), -1, )
paddle.squeeze(Tensor([4, 1],"float32"), axis=list[1,], )
paddle.squeeze(Tensor([5, 1],"float32"), axis=list[1,], )
paddle.squeeze(Tensor([5, 1],"float64"), -1, )
paddle.squeeze(Tensor([5, 1],"int64"), list[-1,], )
paddle.squeeze(Tensor([6, 1],"float32"), axis=list[1,], )
paddle.squeeze(x=Tensor([1, 2, 1, 3],"float32"), )
paddle.squeeze(x=Tensor([1, 2, 1, 3],"float64"), )
paddle.squeeze(x=Tensor([1, 2, 1, 3],"float64"), axis=-4, )
paddle.squeeze(x=Tensor([1, 2, 1, 3],"float64"), axis=Tensor([2],"int64"), )
paddle.squeeze(x=Tensor([1, 2, 1, 3],"float64"), axis=list[2,3,], )
paddle.squeeze(x=Tensor([1, 2, 1, 3],"float64"), axis=tuple(-4,-3,), )
paddle.squeeze(x=Tensor([1, 2, 1, 3],"int32"), )
paddle.squeeze(x=Tensor([1, 2, 1, 3],"int64"), )
paddle.squeeze(x=Tensor([1, 2, 1, 3],"int8"), )
paddle.stack(list[Tensor([1, 3],"float32"),Tensor([1, 3],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 3],"float32"),], axis=1, )
paddle.stack(list[Tensor([1, 4],"float32"),Tensor([1, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 4],"float32"),], axis=1, )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),], -1, )
paddle.stack(list[Tensor([2, 2],"float32"),Tensor([2, 2],"float32"),], -1, )
paddle.stack(list[Tensor([2],"float32"),Tensor([2],"float32"),], -1, )
paddle.stack(list[Tensor([2],"float32"),Tensor([2],"float32"),], axis=0, )
paddle.stack(list[Tensor([2],"float64"),Tensor([2],"float64"),], axis=0, )
paddle.stack(list[Tensor([2],"int32"),Tensor([2],"int32"),], axis=0, )
paddle.stack(list[Tensor([2],"int64"),Tensor([2],"int64"),], axis=-2, )
paddle.stack(list[Tensor([2],"int64"),Tensor([2],"int64"),], axis=0, )
paddle.stack(list[Tensor([2],"int64"),Tensor([2],"int64"),], axis=1, )
paddle.stack(list[Tensor([3, 6, 3, 2, 5],"float64"),Tensor([3, 6, 3, 2, 5],"float64"),Tensor([3, 6, 3, 2, 5],"float64"),], 0, )
paddle.stack(list[Tensor([3, 6, 3, 4, 5],"float64"),Tensor([3, 6, 3, 4, 5],"float64"),Tensor([3, 6, 3, 4, 5],"float64"),Tensor([3, 6, 3, 4, 5],"float64"),], 0, )
paddle.stack(list[Tensor([3],"float32"),Tensor([3],"float32"),], 1, )
paddle.stack(list[Tensor([3],"float64"),Tensor([3],"float64"),], 0, )
paddle.stack(list[Tensor([3],"float64"),Tensor([3],"float64"),], 1, )
paddle.stack(list[Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),], axis=2, )
paddle.stack(list[Tensor([4, 8],"float32"),Tensor([4, 8],"float32"),Tensor([4, 8],"float32"),Tensor([4, 8],"float32"),Tensor([4, 8],"float32"),Tensor([4, 8],"float32"),Tensor([4, 8],"float32"),Tensor([4, 8],"float32"),Tensor([4, 8],"float32"),Tensor([4, 8],"float32"),Tensor([4, 8],"float32"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"int64"),Tensor([4, 8],"int64"),Tensor([4, 8],"int64"),Tensor([4, 8],"int64"),Tensor([4, 8],"int64"),Tensor([4, 8],"int64"),Tensor([4, 8],"int64"),Tensor([4, 8],"int64"),Tensor([4, 8],"int64"),Tensor([4, 8],"int64"),Tensor([4, 8],"int64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"int64"),Tensor([4, 8],"int64"),], axis=2, )
paddle.stack(list[Tensor([],"float32"),Tensor([],"float32"),], -1, )
paddle.stack(tuple(Tensor([2],"float32"),Tensor([2],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([2],"float64"),Tensor([2],"float64"),), axis=0, )
paddle.stack(tuple(Tensor([2],"int32"),Tensor([2],"int32"),), axis=0, )
paddle.stack(tuple(Tensor([2],"int64"),Tensor([2],"int64"),), axis=0, )
paddle.stanh(x=Tensor([1, 2],"float32"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([1, 2],"float32"), scale_a=1.43, scale_b=4.56, )
paddle.stanh(x=Tensor([1, 2],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([1, 2],"float64"), scale_a=1.43, scale_b=4.56, )
paddle.stanh(x=Tensor([1],"float32"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([1],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([2, 2],"float32"), scale_a=6.42, scale_b=3.58, )
paddle.stanh(x=Tensor([2, 2],"float64"), scale_a=6.42, scale_b=3.58, )
paddle.stanh(x=Tensor([2, 3, 2, 2],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.std(x=Tensor([2, 3],"float32"), )
paddle.std(x=Tensor([2, 3],"float64"), )
paddle.std(x=Tensor([3, 3, 3],"float64"), )
paddle.std(x=Tensor([3, 3, 3],"float64"), axis=0, )
paddle.std(x=Tensor([3, 3, 3],"float64"), axis=0, unbiased=False, )
paddle.std(x=Tensor([3, 3, 3],"float64"), axis=list[0,1,], )
paddle.std(x=Tensor([3, 3, 3],"float64"), axis=tuple(0,1,), )
paddle.std(x=Tensor([3, 3, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.strided_slice(x=Tensor([3, 4, 5, 6],"float32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 5, 6],"float64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 5, 6],"int32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 5, 6],"int64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([5, 8, 6, 4, 2, 6],"float64"), axes=list[1,2,5,], starts=list[-3,3,4,], ends=list[3,0,1,], strides=list[-1,-1,-2,], )
paddle.strided_slice(x=Tensor([5, 8, 6, 4, 2, 6],"float64"), axes=list[1,2,5,], starts=list[6,5,4,], ends=list[2,0,1,], strides=list[-1,-2,-3,], )
paddle.strided_slice(x=Tensor([6, 6],"float32"), axes=list[0,1,], starts=list[3,4,], ends=list[5,2,], strides=list[1,-2,], )
paddle.strided_slice(x=Tensor([6, 6],"float32"), axes=list[0,1,], starts=list[3,4,], ends=list[5,2,], strides=list[4,-2,], )
paddle.strided_slice(x=Tensor([6],"float32"), axes=list[0,], starts=list[3,], ends=list[1,], strides=list[-2,], )
paddle.subtract(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.subtract(Tensor([5, 10, 15, 20],"float32"), Tensor([5, 10, 15, 20],"float32"), )
paddle.subtract(Tensor([5, 2],"float64"), Tensor([5, 2],"float64"), )
paddle.subtract(x=Tensor([2, 2],"float32"), y=Tensor([2, 2],"float32"), )
paddle.subtract(x=Tensor([2, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.subtract(x=Tensor([2, 2],"int32"), y=Tensor([2, 2],"int32"), )
paddle.subtract(x=Tensor([2, 2],"int64"), y=Tensor([2, 2],"int64"), )
paddle.subtract(x=Tensor([3],"float64"), y=Tensor([3],"float64"), )
paddle.sum(Tensor([1, 3],"float64"), axis=list[1,], )
paddle.sum(Tensor([18, 18],"float32"), 0, )
paddle.sum(Tensor([18, 18],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([18, 6],"float32"), 1, )
paddle.sum(Tensor([2, 1, 2],"float32"), axis=-1, )
paddle.sum(Tensor([2, 1, 2],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([2, 2, 2],"float32"), )
paddle.sum(Tensor([2, 2, 2],"float64"), )
paddle.sum(Tensor([2, 2, 2],"int32"), )
paddle.sum(Tensor([2, 2, 2],"int64"), )
paddle.sum(Tensor([2, 2],"float32"), axis=-1, )
paddle.sum(Tensor([2, 2],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([2, 2],"float64"), )
paddle.sum(Tensor([2, 2],"float64"), axis=Tensor([2],"int64"), )
paddle.sum(Tensor([2, 3, 3, 2],"float64"), )
paddle.sum(Tensor([2, 3],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 3],"float64"), )
paddle.sum(Tensor([2, 3],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 3],"float64"), axis=-1, keepdim=True, )
paddle.sum(Tensor([2, 4, 4],"float32"), )
paddle.sum(Tensor([2, 4, 4],"float64"), )
paddle.sum(Tensor([2, 4, 4],"int32"), )
paddle.sum(Tensor([2, 4, 4],"int64"), )
paddle.sum(Tensor([2, 4, 7],"float32"), )
paddle.sum(Tensor([2, 4, 7],"float64"), )
paddle.sum(Tensor([2, 4, 7],"int32"), )
paddle.sum(Tensor([2, 4, 7],"int64"), )
paddle.sum(Tensor([2, 4],"float64"), axis=1, keepdim=True, )
paddle.sum(Tensor([2],"float32"), )
paddle.sum(Tensor([2],"float64"), )
paddle.sum(Tensor([3, 3, 3],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([3, 3, 3],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([3, 3, 3],"float64"), list[0,1,], keepdim=False, name=None, )
paddle.sum(Tensor([3, 3, 3],"float64"), tuple(0,1,), keepdim=False, name=None, )
paddle.sum(Tensor([3, 3, 3],"float64"), tuple(0,1,), keepdim=True, name=None, )
paddle.sum(Tensor([3, 3],"float32"), )
paddle.sum(Tensor([3, 3],"float64"), )
paddle.sum(Tensor([3, 3],"int32"), )
paddle.sum(Tensor([3, 3],"int64"), )
paddle.sum(Tensor([3, 4],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([3],"float64"), axis=-1, )
paddle.sum(Tensor([3],"float64"), axis=-1, keepdim=True, )
paddle.sum(Tensor([4, 3, 3, 4],"float64"), name=None, )
paddle.sum(Tensor([4, 3],"float64"), axis=list[1,], )
paddle.sum(Tensor([4, 4, 4],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([4, 4, 4],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([4, 4],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([4],"float64"), axis=-1, keepdim=True, )
paddle.sum(Tensor([5, 2],"float32"), axis=list[1,], )
paddle.sum(Tensor([5, 2],"float64"), axis=list[1,], )
paddle.sum(Tensor([5, 3],"float32"), )
paddle.sum(Tensor([5, 3],"float64"), )
paddle.sum(Tensor([5, 3],"int32"), )
paddle.sum(Tensor([5, 3],"int64"), )
paddle.sum(Tensor([66416, 20, 5],"float64"), axis=1, keepdim=True, )
paddle.sum(Tensor([7, 3],"float32"), )
paddle.sum(Tensor([7, 3],"float64"), )
paddle.sum(Tensor([7, 3],"int32"), )
paddle.sum(Tensor([7, 3],"int64"), )
paddle.sum(x=Tensor([2, 2],"float32"), )
paddle.sum(x=Tensor([2, 2],"float32"), axis=0, keepdim=True, )
paddle.sum(x=Tensor([2, 2],"float32"), dtype="float64", )
paddle.sum(x=Tensor([2, 2],"float64"), )
paddle.sum(x=Tensor([2, 2],"float64"), axis=-1, )
paddle.sum(x=Tensor([2, 2],"float64"), axis=0, keepdim=True, )
paddle.sum(x=Tensor([2, 2],"float64"), axis=1, )
paddle.sum(x=Tensor([2, 2],"float64"), axis=Tensor([1],"int64"), )
paddle.sum(x=Tensor([2, 2],"float64"), axis=list[0,1,], )
paddle.sum(x=Tensor([2, 2],"float64"), dtype="float64", )
paddle.sum(x=Tensor([2, 2],"int32"), )
paddle.sum(x=Tensor([2, 3, 4, 5],"float64"), keepdim=True, )
paddle.take_along_axis(Tensor([2160],"float64"), Tensor([1],"int32"), axis=0, )
paddle.take_along_axis(Tensor([3, 3, 3],"float32"), Tensor([1, 3, 3],"int32"), axis=0, )
paddle.take_along_axis(Tensor([3, 3, 3],"float64"), Tensor([1, 3, 3],"int32"), axis=0, )
paddle.take_along_axis(Tensor([3, 6, 3, 4, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"int32"), axis=3, )
paddle.take_along_axis(Tensor([3, 6, 3, 4, 2, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"int32"), axis=4, )
paddle.take_along_axis(Tensor([3, 6, 3, 4, 2, 5],"float64"), Tensor([3, 6, 3, 4, 2, 1],"int32"), axis=5, )
paddle.take_along_axis(Tensor([4, 2],"float64"), Tensor([1, 1],"int64"), 1, )
paddle.take_along_axis(Tensor([4, 4, 4, 2],"float64"), Tensor([1, 1, 1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 4, 4],"float64"), Tensor([1, 1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 4],"float64"), Tensor([1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4],"float32"), Tensor([1],"int64"), 0, )
paddle.take_along_axis(Tensor([4],"float64"), Tensor([1],"int64"), 0, )
paddle.tan(x=Tensor([3, 3, 3],"float32"), )
paddle.tan(x=Tensor([3, 3, 3],"float64"), )
paddle.tanh(Tensor([1, 3],"float32"), )
paddle.tanh(Tensor([1, 3],"float64"), )
paddle.tanh(Tensor([1, 4],"float32"), )
paddle.tanh(Tensor([1, 7],"float32"), )
paddle.tanh(Tensor([1, 7],"float64"), )
paddle.tanh(Tensor([16, 16],"float32"), )
paddle.tanh(Tensor([16, 32],"float32"), )
paddle.tanh(Tensor([2, 3, 4],"float64"), )
paddle.tanh(Tensor([2, 3],"float64"), )
paddle.tanh(Tensor([3, 3],"float64"), )
paddle.tanh(Tensor([32, 32],"float32"), )
paddle.tanh(Tensor([4, 16],"float32"), )
paddle.tanh(Tensor([4, 4],"float32"), )
paddle.tanh(Tensor([4, 4],"float64"), )
paddle.tanh(Tensor([4, 6],"float32"), )
paddle.tanh(x=Tensor([1],"float64"), )
paddle.tanh(x=Tensor([2, 3, 4],"float64"), )
paddle.tanh(x=Tensor([2, 3, 4],"float64"), name="test name", )
paddle.tanh(x=Tensor([2],"float64"), )
paddle.tanh(x=Tensor([3, 3, 3],"float64"), )
paddle.tanh(x=Tensor([3, 5],"float64"), )
paddle.tanh(x=Tensor([3],"float32"), )
paddle.tanh(x=Tensor([3],"float64"), )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 4, 3, 4],"float64"), )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 4, 3, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 2],"float64"), y=Tensor([2, 3, 8, 7],"float64"), axes=list[0,1,], )
paddle.tensordot(x=Tensor([2, 3, 4, 2],"float64"), y=Tensor([8, 7, 4, 2],"float64"), axes=list[2,3,], )
paddle.tensordot(x=Tensor([2, 3, 4, 4],"float64"), y=Tensor([2, 3, 4, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 4],"float64"), y=Tensor([3, 4, 4, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 4, 3, 5],"float64"), y=Tensor([2, 4, 1, 5],"float64"), axes=list[0,2,], )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float64"), y=Tensor([7, 7, 4, 2],"float64"), axes=list[tuple(1,2,3,),tuple(0,2,3,),], )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float64"), y=Tensor([7, 7, 4, 2],"float64"), axes=tuple(list[1,2,3,],list[0,2,3,],), )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float64"), y=Tensor([7, 7, 4, 2],"float64"), axes=tuple(list[1,2,3,],list[0,2,3,],list[4,5,6,],), )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float64"), y=Tensor([8, 7, 4, 2],"float64"), axes=list[tuple(1,2,3,),], )
paddle.tensordot(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), axes=2, )
paddle.tensordot(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), axes=2, )
paddle.tensordot(x=Tensor([3, 4, 3, 4],"float64"), y=Tensor([4, 4, 3, 4],"float64"), axes=1, )
paddle.tensordot(x=Tensor([4, 2, 3, 5, 4],"float64"), y=Tensor([2, 4, 3, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
paddle.tensordot(x=Tensor([4, 3, 5],"float64"), y=Tensor([4, 1, 8],"float64"), axes=list[0,1,], )
paddle.tile(Tensor([1, 3, 1, 1, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([1, 4],"float32"), list[Tensor([],"int64"),1,], )
paddle.tile(Tensor([1, 8],"float32"), list[Tensor([],"int64"),1,], )
paddle.tile(Tensor([18, 1],"float32"), repeat_times=list[1,18,], )
paddle.tile(Tensor([4, 1, 16],"float32"), list[1,4,1,], )
paddle.tile(Tensor([4, 1, 32],"float32"), list[1,4,1,], )
paddle.tile(Tensor([4, 1, 32],"float32"), list[1,8,1,], )
paddle.tile(Tensor([4, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([4, 1],"int64"), list[1,8,], )
paddle.tile(Tensor([4, 4, 1],"float32"), list[1,1,16,], )
paddle.tile(Tensor([4, 4, 1],"float32"), list[1,1,32,], )
paddle.tile(Tensor([4, 8, 1],"float32"), list[1,1,32,], )
paddle.tile(x=Tensor([1, 3, 2],"float64"), repeat_times=tuple(2,3,), )
paddle.tile(x=Tensor([2, 3],"float64"), repeat_times=list[3,2,], )
paddle.tile(x=Tensor([3],"int32"), repeat_times=tuple(3,), )
paddle.tile(x=Tensor([3],"int64"), repeat_times=Tensor([2],"int32"), )
paddle.tolist(Tensor([2, 5],"float32"), )
paddle.tolist(Tensor([5],"float32"), )
paddle.topk(Tensor([2, 2, 4],"int32"), k=1, axis=-1, )
paddle.topk(Tensor([2, 2, 4],"int64"), k=1, axis=2, )
paddle.topk(Tensor([2, 4],"float32"), k=1, axis=-1, )
paddle.topk(Tensor([2, 4],"float64"), k=1, axis=-1, )
paddle.topk(Tensor([2, 4],"int32"), k=1, axis=-1, )
paddle.topk(Tensor([2, 4],"int64"), k=1, axis=-1, )
paddle.topk(Tensor([3, 4],"float32"), k=2, axis=0, )
paddle.topk(Tensor([3, 4],"float64"), 2, axis=0, largest=False, )
paddle.topk(Tensor([4, 4, 4],"float32"), 3, axis=0, largest=False, )
paddle.topk(Tensor([4, 4, 4],"float32"), 3, axis=1, largest=False, )
paddle.topk(x=Tensor([4, 128],"float32"), k=4, )
paddle.topk(x=Tensor([4, 256],"float32"), k=8, )
paddle.topk(x=Tensor([4, 64],"float32"), k=4, )
paddle.trace(x=Tensor([2, 3, 2],"float64"), offset=-1, axis1=2, axis2=-2, )
paddle.trace(x=Tensor([2, 3, 2],"float64"), offset=0, axis1=-3, axis2=-2, )
paddle.trace(x=Tensor([2, 3, 2],"float64"), offset=1, axis1=0, axis2=2, )
paddle.trace(x=Tensor([3, 4],"float64"), offset=-1, axis1=0, axis2=1, )
paddle.trace(x=Tensor([3, 4],"float64"), offset=0, axis1=0, axis2=1, )
paddle.trace(x=Tensor([3, 4],"float64"), offset=1, axis1=0, axis2=1, )
paddle.transpose(Tensor([1, 1, 2],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([1, 3, 2, 2],"bool"), list[1,0,2,3,], )
paddle.transpose(Tensor([1, 4],"float64"), list[1,0,], )
paddle.transpose(Tensor([10, 4],"float64"), list[1,0,], )
paddle.transpose(Tensor([11, 4, 4],"int64"), list[1,0,2,], )
paddle.transpose(Tensor([11, 4, 8],"int64"), list[1,0,2,], )
paddle.transpose(Tensor([18, 18],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([2, 1, 3, 4, 2, 1, 2],"bool"), list[6,0,1,4,3,5,2,], )
paddle.transpose(Tensor([3, 3, 5, 3],"float32"), list[2,1,0,3,], )
paddle.transpose(Tensor([3, 5, 3, 3],"float32"), list[1,0,2,3,], )
paddle.transpose(Tensor([30, 4],"float64"), list[1,0,], )
paddle.transpose(Tensor([4, 4],"float32"), list[1,0,], )
paddle.transpose(Tensor([4, 4],"float64"), list[1,0,], )
paddle.transpose(Tensor([4, 5, 4],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([4, 5, 6, 6, 6],"float32"), list[1,0,2,3,4,], )
paddle.transpose(Tensor([5, 3, 3, 3],"float32"), list[1,0,2,3,], )
paddle.transpose(Tensor([5, 3, 3, 3],"float32"), list[2,1,0,3,], )
paddle.transpose(Tensor([5, 4, 4],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([5, 4, 6, 6, 6],"float32"), list[1,0,2,3,4,], )
paddle.transpose(Tensor([5, 4, 6, 6, 6],"float32"), list[2,1,0,3,4,], )
paddle.transpose(Tensor([5, 4, 6, 6, 6],"float32"), list[3,1,2,0,4,], )
paddle.transpose(Tensor([5, 4],"float64"), list[1,0,], )
paddle.transpose(Tensor([6, 4, 4],"int64"), list[1,0,2,], )
paddle.transpose(Tensor([6, 4, 5, 6, 6],"float32"), list[2,1,0,3,4,], )
paddle.transpose(Tensor([6, 4, 6, 5, 6],"float32"), list[3,1,2,0,4,], )
paddle.transpose(Tensor([6, 4],"float64"), list[1,0,], )
paddle.transpose(x=Tensor([1, 2, 2, 3],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(x=Tensor([1, 2, 2, 3],"float64"), perm=list[0,3,1,2,], )
paddle.transpose(x=Tensor([1, 2, 2, 3],"int32"), perm=list[0,3,1,2,], )
paddle.transpose(x=Tensor([1, 2, 2, 3],"int64"), perm=list[0,3,1,2,], )
paddle.transpose(x=Tensor([3, 1, 2, 2],"float64"), perm=list[1,0,2,3,], )
paddle.tril(x=Tensor([3, 2, 2],"float32"), diagonal=0, )
paddle.tril(x=Tensor([3, 2, 2],"float64"), diagonal=-1, )
paddle.tril(x=Tensor([3, 2, 2],"float64"), diagonal=-5, )
paddle.tril(x=Tensor([3, 2, 2],"float64"), diagonal=0, )
paddle.tril(x=Tensor([3, 2, 2],"float64"), diagonal=1, )
paddle.tril(x=Tensor([3, 2, 2],"float64"), diagonal=5, )
paddle.tril(x=Tensor([3, 2, 2],"int32"), diagonal=0, )
paddle.tril(x=Tensor([3, 2, 2],"int64"), diagonal=0, )
paddle.triu(x=Tensor([3, 2, 2],"float32"), diagonal=0, )
paddle.triu(x=Tensor([3, 2, 2],"float64"), diagonal=-1, )
paddle.triu(x=Tensor([3, 2, 2],"float64"), diagonal=-5, )
paddle.triu(x=Tensor([3, 2, 2],"float64"), diagonal=0, )
paddle.triu(x=Tensor([3, 2, 2],"float64"), diagonal=1, )
paddle.triu(x=Tensor([3, 2, 2],"float64"), diagonal=5, )
paddle.triu(x=Tensor([3, 2, 2],"int32"), diagonal=0, )
paddle.triu(x=Tensor([3, 2, 2],"int64"), diagonal=0, )
paddle.trunc(input=Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([6, 6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([6, 6],"int32"), )
paddle.trunc(input=Tensor([6, 6],"int64"), )
paddle.unbind(Tensor([3, 2, 2],"int32"), axis=0, )
paddle.unbind(Tensor([4, 2, 3],"float32"), axis=-1, )
paddle.unbind(Tensor([4, 2, 3],"float32"), axis=2, )
paddle.unbind(Tensor([4, 3, 2, 2],"float64"), axis=1, )
paddle.unique(x=Tensor([2, 2],"float32"), axis=1, )
paddle.unique(x=Tensor([2, 2],"float64"), axis=1, )
paddle.unique(x=Tensor([2, 2],"int32"), axis=0, )
paddle.unique(x=Tensor([2, 2],"int64"), axis=0, )
paddle.unique(x=Tensor([6],"float32"), )
paddle.unique(x=Tensor([6],"float64"), )
paddle.unique_consecutive(x=Tensor([2, 6],"float32"), )
paddle.unique_consecutive(x=Tensor([2, 6],"float64"), )
paddle.unique_consecutive(x=Tensor([2, 6],"int32"), )
paddle.unique_consecutive(x=Tensor([2, 6],"int64"), )
paddle.unique_consecutive(x=Tensor([3, 6],"float64"), axis=1, )
paddle.unique_consecutive(x=Tensor([4, 1],"float32"), return_inverse=True, )
paddle.unique_consecutive(x=Tensor([4, 1],"float64"), )
paddle.unique_consecutive(x=Tensor([4, 1],"float64"), dtype="int32", )
paddle.unique_consecutive(x=Tensor([6, 1],"float32"), return_inverse=True, return_counts=True, )
paddle.unique_consecutive(x=Tensor([6, 4],"float32"), return_inverse=True, return_counts=True, axis=0, )
paddle.unsqueeze(Tensor([2],"int64"), -1, )
paddle.unsqueeze(Tensor([2],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([4, 125, 125],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([4, 16],"float32"), list[1,], )
paddle.unsqueeze(Tensor([4, 32],"float32"), list[1,], )
paddle.unsqueeze(Tensor([4, 4],"float32"), list[2,], )
paddle.unsqueeze(Tensor([4, 8],"float32"), list[2,], )
paddle.unsqueeze(Tensor([4],"int64"), list[1,], )
paddle.unsqueeze(Tensor([5],"int64"), axis=-1, )
paddle.unsqueeze(x=Tensor([2, 3],"float32"), axis=1, )
paddle.unsqueeze(x=Tensor([2, 3],"float64"), axis=-1, )
paddle.unsqueeze(x=Tensor([2, 3],"float64"), axis=1, )
paddle.unsqueeze(x=Tensor([2, 3],"float64"), axis=Tensor([3],"int64"), )
paddle.unsqueeze(x=Tensor([2, 3],"float64"), axis=list[0,1,], )
paddle.unsqueeze(x=Tensor([2, 3],"float64"), axis=tuple(0,1,), )
paddle.unsqueeze(x=Tensor([2, 3],"int32"), axis=1, )
paddle.unsqueeze(x=Tensor([2, 3],"int64"), axis=1, )
paddle.unsqueeze(x=Tensor([2, 3],"int8"), axis=1, )
paddle.unstack(Tensor([2, 3],"float64"), 0, )
paddle.unstack(Tensor([3, 2, 2],"int32"), axis=0, )
paddle.unstack(Tensor([3, 2],"float32"), 1, )
paddle.unstack(Tensor([3, 2],"float64"), 1, )
paddle.unstack(Tensor([4, 2, 3],"float32"), axis=-1, )
paddle.unstack(Tensor([4, 2, 3],"float32"), axis=2, )
paddle.unstack(Tensor([4, 3, 2, 2],"float64"), axis=1, )
paddle.var(x=Tensor([2, 3],"float32"), )
paddle.var(x=Tensor([2, 3],"float64"), )
paddle.var(x=Tensor([3, 3, 3],"float64"), )
paddle.var(x=Tensor([3, 3, 3],"float64"), axis=0, )
paddle.var(x=Tensor([3, 3, 3],"float64"), axis=0, unbiased=False, )
paddle.var(x=Tensor([3, 3, 3],"float64"), axis=list[0,1,], )
paddle.var(x=Tensor([3, 3, 3],"float64"), axis=tuple(0,1,), )
paddle.var(x=Tensor([3, 3, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.where(Tensor([1, 3, 3],"bool"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.where(Tensor([1, 3, 3],"bool"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.where(Tensor([1],"bool"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.where(Tensor([1],"bool"), Tensor([1],"int32"), Tensor([1],"int32"), )
paddle.where(Tensor([1],"bool"), Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.where(Tensor([2, 1, 4],"bool"), Tensor([2, 1, 1],"float32"), Tensor([2, 2, 4],"float32"), )
paddle.where(Tensor([2, 1, 4],"bool"), Tensor([2, 1, 4],"float32"), Tensor([2, 2, 4],"float32"), )
paddle.where(Tensor([2, 1, 4],"bool"), Tensor([2, 2, 1],"float32"), Tensor([2, 2, 1],"float32"), )
paddle.where(Tensor([2, 4, 5],"bool"), Tensor([2, 4, 5],"int32"), Tensor([2, 4, 5],"int32"), )
paddle.where(Tensor([2, 4],"bool"), Tensor([2, 2, 4],"float32"), Tensor([2, 2, 4],"float32"), )
paddle.where(Tensor([2, 4],"bool"), Tensor([2, 4],"float64"), Tensor([],"float64"), )
paddle.where(Tensor([2],"bool"), Tensor([2],"float32"), Tensor([],"float32"), )
paddle.where(Tensor([2],"bool"), Tensor([2],"float64"), Tensor([],"float64"), )
paddle.where(Tensor([3, 2, 2, 4],"bool"), Tensor([2, 2, 4],"float32"), Tensor([2, 2, 4],"float32"), )
paddle.where(Tensor([3, 2, 3, 4, 5, 1, 2],"bool"), Tensor([3, 2, 3, 4, 5, 1, 2],"float64"), Tensor([3, 2, 3, 4, 5, 1, 2],"float64"), )
paddle.where(Tensor([3, 3, 3],"bool"), Tensor([3, 3, 3],"float32"), Tensor([3, 3, 3],"float32"), )
paddle.where(Tensor([3, 3, 3],"bool"), Tensor([3, 3, 3],"float64"), Tensor([3, 3, 3],"float64"), )
paddle.where(Tensor([3, 3],"bool"), Tensor([3, 3],"float32"), Tensor([1],"float32"), )
paddle.where(Tensor([3, 3],"bool"), Tensor([3, 3],"float64"), Tensor([1],"float64"), )
paddle.where(Tensor([3, 6, 3, 1, 2, 5],"bool"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.where(Tensor([3, 6, 3, 4, 1, 5],"bool"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.where(Tensor([3, 6, 3, 4, 2, 1],"bool"), Tensor([3, 6, 3, 4, 2, 1],"float64"), Tensor([3, 6, 3, 4, 2, 1],"float64"), )
paddle.where(Tensor([3],"bool"), Tensor([3],"float32"), Tensor([],"float32"), )
paddle.where(Tensor([3],"bool"), Tensor([3],"float64"), Tensor([],"float64"), )
paddle.where(Tensor([4, 2],"bool"), Tensor([4, 2],"float64"), Tensor([],"float64"), )
paddle.where(Tensor([4, 3, 3, 4],"bool"), Tensor([4, 3, 3, 4],"float64"), Tensor([1],"float64"), )
paddle.where(Tensor([4, 3, 3],"bool"), Tensor([4, 3, 3],"float64"), Tensor([1],"float64"), )
paddle.where(Tensor([4, 5],"bool"), Tensor([4, 5],"int32"), Tensor([4, 5],"int32"), )
paddle.where(Tensor([4],"bool"), Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.where(Tensor([4],"bool"), Tensor([4],"float64"), Tensor([4],"float64"), )
paddle.where(Tensor([4],"bool"), Tensor([4],"int32"), Tensor([4],"int32"), )
paddle.where(Tensor([4],"bool"), Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.where(Tensor([6, 2, 4, 5],"bool"), Tensor([6, 2, 4, 5],"int32"), Tensor([6, 2, 4, 5],"int32"), )
paddle.zeros(list[1,], Dtype(int32), )
paddle.zeros(list[1,], Dtype(int64), )
paddle.zeros(list[1,], dtype="int32", )
paddle.zeros(list[1,], dtype="int64", )
paddle.zeros(list[1,], dtype=Dtype(float32), )
paddle.zeros(list[1,], dtype=Dtype(float64), )
paddle.zeros(list[2,4,5,], Dtype(int32), )
paddle.zeros(list[4,5,], Dtype(int32), )
paddle.zeros(list[6,2,4,5,], Dtype(int32), )
paddle.zeros(list[], dtype=Dtype(float32), )
paddle.zeros(list[], dtype=Dtype(float64), )
paddle.zeros(shape=Tensor([0],"int32"), )
paddle.zeros(shape=Tensor([1],"int32"), )
paddle.zeros(shape=Tensor([1],"int32"), dtype=type(numpy.int64), )
paddle.zeros(shape=Tensor([2],"int32"), )
paddle.zeros(shape=Tensor([2],"int32"), dtype="int32", )
paddle.zeros(shape=list[1,2,3,4,5,], dtype="float64", )
paddle.zeros(shape=list[1,2,3,4,], dtype=type(bool), )
paddle.zeros(shape=list[1,2,3,], dtype="bool", )
paddle.zeros(shape=list[1,5,2,3,], dtype=None, )
paddle.zeros(shape=list[1,5,2,3,], dtype=type(bool), )
paddle.zeros(shape=list[1000,], )
paddle.zeros(shape=list[2,1,], )
paddle.zeros(shape=list[2,4,], dtype=type(numpy.float32), )
paddle.zeros(shape=list[2,], dtype=type(numpy.float16), )
paddle.zeros(shape=list[2,], name="None", )
paddle.zeros(shape=list[2,], name="zeros_name", )
paddle.zeros(shape=list[2,], name=None, )
paddle.zeros(shape=list[5,2,], dtype="float16", )
paddle.zeros(shape=tuple(1,), )
paddle.zeros(shape=tuple(1,), dtype="float32", )
paddle.zeros(shape=tuple(1,5,1,), dtype="int64", )
paddle.zeros(shape=tuple(1000,1,), dtype=type(numpy.int8), )
paddle.zeros(shape=tuple(2,4,), dtype=type(numpy.int32), )
paddle.zeros(shape=tuple(2,4,1,), )
paddle.zeros(shape=tuple(2,4,1,), dtype=type(numpy.float64), )
paddle.zeros(tuple(16,4,16,), dtype=Dtype(float32), )
paddle.zeros(tuple(4,4,16,), dtype=Dtype(float32), )
paddle.zeros(tuple(4,4,16,), dtype=Dtype(float64), )
paddle.zeros(tuple(4,4,16,22,), dtype=Dtype(float32), )
paddle.zeros(tuple(6,4,16,), dtype=Dtype(float32), )
paddle.zeros_like(Tensor([2, 2],"float64"), )
paddle.zeros_like(Tensor([2, 4],"float64"), )
paddle.zeros_like(Tensor([2],"float32"), )
paddle.zeros_like(Tensor([2],"float64"), )
paddle.zeros_like(Tensor([3, 2, 3, 4, 5, 1, 2],"float64"), )
paddle.zeros_like(Tensor([3, 3, 3],"float32"), )
paddle.zeros_like(Tensor([3, 3, 3],"float64"), )
paddle.zeros_like(Tensor([3, 3],"float64"), )
paddle.zeros_like(Tensor([4, 4],"bool"), )
paddle.zeros_like(Tensor([4, 4],"float64"), )
paddle.zeros_like(Tensor([4, 4],"int64"), )
paddle.zeros_like(Tensor([4, 8],"bool"), )
paddle.zeros_like(Tensor([4, 8],"int64"), )
paddle.zeros_like(x=Tensor([3, 3, 3, 3, 3, 3],"float64"), )
paddle.zeros_like(x=Tensor([3, 3, 3],"bool"), )
paddle.zeros_like(x=Tensor([3, 3, 3],"float16"), )
paddle.zeros_like(x=Tensor([3, 3, 3],"float32"), )
paddle.zeros_like(x=Tensor([3, 3, 3],"float64"), )
paddle.zeros_like(x=Tensor([3, 3, 3],"int32"), )
paddle.zeros_like(x=Tensor([3, 3, 3],"int64"), )
